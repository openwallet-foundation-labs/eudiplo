var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AccessCertificateResponse.html",[0,1.258,1,3.864]],["body/interfaces/AccessCertificateResponse.html",[0,1.764,1,6.599,2,3.066,3,0.076,4,0.085,5,0.067,6,5.894,7,4.162,8,5.894,9,0.777,10,6.616,11,5.416,12,1.734,13,0.252,14,1.002,15,6.533,16,2.034,17,0.874,18,8.397,19,0.579,20,0.318,21,0.007,22,3.052,23,1.843,24,5.072,25,2.931,26,3.734,27,3.116,28,3.291,29,6.599,30,0.085,31,0.005,32,0.005]],["title/injectables/AdminAuthGuard.html",[33,0.928,34,3.611]],["body/injectables/AdminAuthGuard.html",[3,0.081,4,0.091,5,0.071,13,0.268,17,0.763,20,0.257,21,0.007,30,0.091,31,0.006,32,0.006,33,1.644,34,6.398,35,2.61,36,6.266,37,3.973,38,7.447,39,1.945,40,7.447,41,7.447,42,6.668,43,0.457,44,7.034,45,1.751,46,1.208,47,4.428,48,1.609,49,0.192,50,1.167,51,6.266,52,5.082,53,0.298,54,1.407,55,6.266]],["title/classes/AllowListPolicy.html",[53,0.2,56,2.581]],["body/classes/AllowListPolicy.html",[3,0.062,4,0.07,5,0.055,9,0.634,13,0.206,14,0.882,19,0.516,20,0.334,21,0.007,30,0.118,31,0.005,32,0.005,37,4.145,43,0.461,49,0.182,53,0.392,56,3.879,57,1.099,58,3.402,59,4.745,60,4.99,61,5.33,62,3.11,63,1.197,64,5.404,65,3.904,66,5.404,67,5.404,68,1.618,69,5.404,70,1.6,71,4.041,72,5.723,73,2.134,74,2.565,75,2.383,76,2.776,77,1.301,78,3.965,79,3.965,80,3.965,81,3.712,82,2.504,83,3.402,84,2.822,85,4.47,86,4.47,87,3.712,88,5.768,89,4.495,90,2.957,91,3.712,92,3.712,93,2.957,94,3.546,95,2.386,96,3.546,97,2.957,98,2.957,99,4.98,100,2.636,101,1.572,102,3.712,103,2.957,104,3.712]],["title/classes/ApiKeyConfig.html",[53,0.2,105,3.096]],["body/classes/ApiKeyConfig.html",[3,0.057,4,0.063,5,0.05,9,0.577,13,0.187,14,0.827,17,0.533,19,0.519,20,0.347,21,0.007,23,2.037,30,0.112,31,0.004,32,0.004,43,0.432,46,1.388,49,0.173,53,0.377,57,0.999,63,1.123,68,0.888,70,1.455,73,1.94,75,2.333,76,2.118,77,1.182,84,2.373,105,5.305,106,3.224,107,2.026,108,6.117,109,4.054,110,5.089,111,5.45,112,2.458,113,4.913,114,3.944,115,4.167,116,4.913,117,2.871,118,2.805,119,2.871,120,1.244,121,2.776,122,2.52,123,3.429,124,2.898,125,4.03,126,3.374,127,4.188,128,3.013,129,5.305,130,2.42,131,5.305,132,3.55,133,4.807,134,1.718,135,1.38,136,4.95,137,3.55,138,4.807,139,3.55,140,3.374,141,3.093,142,3.55,143,1.787,144,2.157,145,2.871,146,3.224,147,2.462,148,2.871,149,3.888,150,3.55,151,3.55,152,2.871,153,2.607,154,2.871,155,2.871,156,2.071]],["title/controllers/AppController.html",[157,1.448,158,3.611]],["body/controllers/AppController.html",[3,0.081,4,0.091,5,0.071,13,0.269,19,0.515,21,0.007,30,0.091,31,0.006,32,0.006,39,1.95,43,0.459,48,1.616,49,0.192,50,1.172,53,0.299,54,1.412,63,1.192,120,1.788,157,2.571,158,6.413,159,2.569,160,6.291,161,9.241,162,7.061,163,5.275,164,6.291,165,4.85,166,7.061,167,6.291,168,3.748,169,6.291,170,5.783,171,6.291]],["title/modules/AppModule.html",[172,1.502,173,3.611]],["body/modules/AppModule.html",[3,0.067,4,0.052,5,0.059,20,0.212,21,0.007,22,2.193,30,0.052,31,0.004,32,0.004,49,0.222,50,0.668,53,0.17,54,1.158,68,1.225,93,2.203,144,1.305,158,5.188,159,2.106,172,2.158,173,7.518,174,1.778,175,2.018,176,2.137,177,2.137,178,1.964,179,3.398,180,2.018,181,3.587,182,3.587,183,3.587,184,5.908,185,4.62,186,6.344,187,5.908,188,5.616,189,5.674,190,5.908,191,5.148,192,4.953,193,5.674,194,5.908,195,5.148,196,5.616,197,3.073,198,2.137,199,1.914,200,4.026,201,5.188,202,3.352,203,4.898,204,2.732,205,1.258,206,4.026,207,3.298,208,2.275,209,4.026,210,3.298,211,4.026,212,3.587,213,2.909,214,5.789,215,3.587,216,3.298,217,2.535,218,3.799,219,4.026,220,2.203,221,1.737,222,4.026,223,4.026,224,2.642,225,4.026,226,4.026,227,4.026,228,3.587,229,4.026,230,3.081,231,2.909,232,4.026,233,3.799,234,5.789,235,4.026,236,2.535,237,4.026,238,4.026,239,3.976,240,4.431,241,4.026,242,3.587,243,4.026,244,4.026,245,4.026,246,4.026,247,4.026,248,3.976,249,4.431,250,1.525,251,4.742,252,3.298,253,3.081,254,2.497,255,1.59,256,2.018,257,3.645,258,4.026,259,4.026,260,4.026,261,4.026,262,4.026,263,2.909,264,4.026,265,4.026,266,4.026,267,4.026,268,2.909,269,2.203,270,4.026,271,4.026,272,4.026,273,4.026,274,3.587,275,4.026,276,4.026,277,4.026,278,4.026,279,4.026,280,4.107,281,3.645,282,5.789,283,4.026,284,1.914,285,3.081,286,4.026,287,2.203,288,1.557,289,5.158,290,4.026,291,2.353,292,4.026,293,0.969,294,4.026,295,3.271,296,3.587,297,4.026,298,4.026,299,4.026,300,3.081,301,4.026,302,4.026,303,4.183,304,3.587,305,5.789,306,4.026,307,4.026,308,4.026,309,4.026]],["title/classes/AttestationBasedPolicy.html",[53,0.2,103,2.581]],["body/classes/AttestationBasedPolicy.html",[3,0.062,4,0.07,5,0.055,13,0.207,14,0.883,19,0.487,20,0.334,21,0.007,30,0.118,31,0.005,32,0.005,37,4.149,43,0.462,49,0.182,53,0.392,56,2.966,57,1.103,58,3.412,59,4.476,60,4.994,61,5.334,62,3.113,63,1.199,65,3.916,68,1.578,70,1.605,71,4.045,72,5.728,73,2.14,74,2.569,75,2.385,76,2.778,77,1.304,78,3.971,79,3.971,80,3.971,81,3.723,82,2.512,83,3.412,84,2.826,85,4.476,86,4.476,87,3.723,88,5.775,89,4.499,90,2.966,91,3.723,92,3.723,93,2.966,94,3.557,95,2.393,96,3.557,97,2.966,98,2.966,99,5.293,100,2.644,101,1.577,102,3.723,103,3.887,104,3.723,310,5.42,311,5.42,312,4.829,313,4.149,314,5.42]],["title/controllers/AuthController.html",[157,1.448,315,3.611]],["body/controllers/AuthController.html",[3,0.045,4,0.051,5,0.04,9,1.076,12,1.494,13,0.15,17,0.427,20,0.269,21,0.007,23,1.998,30,0.051,31,0.004,32,0.004,39,1.327,43,0.435,45,0.981,46,0.677,48,1.961,49,0.192,50,0.654,53,0.167,54,1.468,63,1.131,68,0.712,93,2.157,101,2.665,107,1.994,109,2.957,112,1.573,114,2.782,120,0.998,156,2.404,157,2.253,159,1.434,163,2.481,287,4.58,315,4.364,316,3.512,317,7.34,318,5.968,319,6.539,320,5.702,321,3.942,322,3.785,323,5.193,324,3.378,325,3.206,326,3.942,327,8.118,328,3.942,329,5.127,330,3.332,331,4.69,332,4.863,333,3.785,334,6.012,335,5.702,336,5.08,337,3.916,338,3.453,339,5.127,340,3.512,341,3.942,342,5.127,343,5.303,344,5.702,345,4.447,346,2.172,347,4.84,348,5.08,349,4.119,350,3.942,351,5.702,352,5.702,353,3.784,354,5.08,355,3.306,356,1.815,357,5.702,358,3.942,359,5.576,360,7.637,361,5.618,362,7.34,363,3.942,364,3.942,365,5.702,366,4.364,367,5.08,368,3.12,369,4.84,370,5.968,371,5.486,372,2.092,373,4.119,374,5.968,375,6.379,376,2.587,377,3.942,378,2.782,379,4.601,380,3.512,381,3.512,382,3.942,383,3.512,384,3.512,385,3.512,386,2.587,387,3.942,388,1.524,389,1.658,390,3.942,391,5.08,392,5.618,393,3.942,394,4.364,395,3.241,396,3.512,397,3.512,398,3.017,399,3.942,400,3.228,401,3.228,402,2.848,403,3.512,404,3.942,405,5.702,406,3.942,407,2.848,408,2.707,409,2.848,410,3.512,411,3.942,412,3.453,413,0.998,414,2.388,415,3.942,416,3.512,417,3.228,418,2.304]],["title/modules/AuthModule.html",[172,1.502,184,3.408]],["body/modules/AuthModule.html",[3,0.057,4,0.063,5,0.05,21,0.007,30,0.104,31,0.004,32,0.004,46,0.845,49,0.223,50,0.816,52,3.555,53,0.208,159,2.422,172,2.403,174,2.172,175,2.466,176,2.611,177,2.611,178,2.4,179,3.783,180,3.783,184,7.153,185,4.922,188,5.984,191,5.485,192,5.278,197,3.534,198,2.611,199,2.338,202,3.011,203,4.811,205,1.538,224,3.229,228,4.383,230,3.765,231,3.555,250,1.698,315,5.777,379,5.984,380,4.383,394,5.097,419,4.383,420,4.383,421,4.383,422,4.383,423,5.718,424,5.01,425,6.195,426,6.821,427,5.485,428,4.029,429,5.777,430,7.549,431,2.875,432,2.029,433,5.933,434,3.229,435,3.379,436,3.555,437,2.78,438,4.029,439,4.92,440,4.92,441,1.826,442,4.029,443,4.383,444,4.92,445,4.92,446,4.383,447,3.555,448,4.383,449,4.029,450,4.029,451,4.92,452,4.92,453,4.383,454,4.029,455,1.826,456,3.555]],["title/interfaces/AuthResponse.html",[0,1.258,457,3.408]],["body/interfaces/AuthResponse.html",[0,1.767,2,3.072,3,0.076,4,0.086,5,0.067,9,0.778,12,2.114,13,0.253,14,1.003,19,0.57,20,0.331,21,0.007,23,1.845,30,0.086,31,0.005,32,0.005,112,1.829,325,3.434,457,6.282,458,5.905,459,3.874,460,3.874,461,6.617,462,7.41,463,7.186,464,8.066,465,8.066,466,6.607,467,6.174,468,4.615,469,3.834,470,3.119,471,3.932,472,6.629,473,3.627]],["title/injectables/AuthService.html",[33,0.928,379,3.24]],["body/injectables/AuthService.html",[3,0.047,4,0.052,5,0.041,9,0.476,11,2.369,12,1.524,13,0.155,16,1.531,17,0.631,19,0.357,20,0.249,21,0.007,22,1.535,25,1.475,30,0.052,31,0.004,32,0.004,33,1.144,35,1.504,39,1.354,43,0.442,45,1.448,46,0.999,48,1.701,49,0.194,50,0.673,53,0.172,54,1.164,68,0.733,100,1.978,101,2.384,107,1.73,109,3.004,114,3.32,134,1.418,147,2.032,156,2.453,164,5.183,169,3.611,170,3.32,171,3.611,204,2.8,205,1.267,250,1.979,255,2.297,256,2.032,287,4.069,318,5.183,319,6.625,325,3.109,331,2.218,332,4.179,333,1.833,337,2.784,340,5.183,345,4.122,347,2.929,349,2.929,353,3.508,354,5.183,355,2.936,356,1.852,359,5.629,360,6.625,361,3.102,366,3.102,368,2.218,371,5.574,378,1.978,379,5.107,383,3.611,384,3.611,385,3.611,389,2.29,391,6.063,398,4.453,400,3.32,401,3.32,402,2.929,403,3.611,407,2.929,417,3.32,425,5.54,427,5.437,443,3.611,446,3.611,474,3.611,475,2.652,476,2.206,477,2.125,478,4.054,479,4.054,480,4.054,481,4.054,482,7.874,483,2.631,484,2.66,485,2.051,486,4.054,487,3.247,488,2.373,489,2.929,490,4.765,491,4.453,492,2.151,493,3.102,494,4.054,495,3.102,496,3.32,497,5.689,498,7.015,499,3.818,500,3.102,501,5.818,502,4.054,503,4.054,504,5.818,505,4.054,506,4.054,507,3.32,508,4.054,509,3.183,510,4.054,511,2.218,512,4.054,513,4.054,514,4.054,515,4.054,516,4.054,517,4.054,518,1.418,519,2.552,520,4.054,521,4.054,522,1.927,523,3.996,524,4.054,525,3.102,526,4.054,527,5.574,528,4.054,529,1.886,530,5.818,531,4.054,532,3.996,533,4.765,534,4.054,535,4.054,536,4.054,537,2.369,538,5.818,539,2.66,540,1.79,541,2.929,542,4.054,543,2.929,544,4.054,545,3.611,546,4.054,547,3.102,548,4.054,549,4.054,550,4.054,551,4.054,552,2.29,553,4.054,554,4.054,555,3.102,556,3.611,557,3.102,558,2.929,559,4.054]],["title/classes/AuthenticationMethodAuth.html",[53,0.2,560,2.858]],["body/classes/AuthenticationMethodAuth.html",[0,1.43,3,0.062,4,0.069,5,0.054,12,1.405,13,0.205,14,0.877,17,0.582,19,0.433,20,0.327,21,0.007,30,0.117,31,0.005,32,0.005,43,0.458,49,0.181,53,0.385,57,1.091,63,1.191,70,1.588,73,2.118,74,2.287,75,2.3,76,2.665,77,1.291,84,2.986,98,2.935,107,1.948,109,3.841,115,2.765,122,2.985,123,2.765,124,2.704,128,2.516,130,3.046,135,2.351,143,2.867,144,2.556,156,3.668,284,4.391,288,2.074,333,3.564,470,2.728,560,4.273,561,4.962,562,3.376,563,5.476,564,5.271,565,4.778,566,5.363,567,5.363,568,5.363,569,2.261,570,3.86,571,4.845,572,3.636,573,4.845,574,3.52,575,3.249,576,4.894,577,2.846,578,1.707,579,4.962,580,3.684,581,3.52,582,2.074,583,3.376,584,3.249,585,3.684,586,3.684,587,3.249,588,3.376,589,3.52]],["title/interfaces/AuthenticationMethodInterface.html",[0,1.258,563,2.97]],["body/interfaces/AuthenticationMethodInterface.html",[0,1.443,2,2.508,3,0.062,4,0.07,5,0.055,12,1.418,13,0.206,14,0.882,17,0.587,19,0.436,20,0.327,21,0.007,30,0.118,31,0.005,32,0.005,49,0.182,53,0.386,70,1.602,73,2.137,74,2.301,75,2.306,76,2.675,77,1.302,84,3.193,98,2.961,107,1.955,109,3.852,115,2.79,122,2.999,123,2.79,124,2.716,128,2.531,130,2.88,135,1.993,143,2.88,144,2.567,156,3.847,284,4.449,288,2.093,333,3.58,470,2.744,560,3.279,561,3.407,562,3.407,563,5.492,564,4.984,569,2.282,570,3.883,571,4.874,572,3.658,573,4.874,574,3.552,575,3.279,576,5.232,577,2.872,578,1.723,579,4.984,580,3.717,581,3.552,582,2.093,583,3.407,584,3.279,585,3.717,586,3.717,587,3.279,588,3.407,589,3.552]],["title/classes/AuthenticationMethodNone.html",[53,0.2,587,2.858]],["body/classes/AuthenticationMethodNone.html",[0,1.454,3,0.063,4,0.07,5,0.055,12,1.429,13,0.208,14,0.887,17,0.591,19,0.438,20,0.32,21,0.007,30,0.118,31,0.005,32,0.005,43,0.354,49,0.182,53,0.387,57,1.109,63,0.921,70,1.615,73,2.154,74,2.312,75,2.311,76,2.683,77,1.312,84,3.006,98,2.984,107,1.961,109,3.861,115,2.811,122,3.01,123,2.811,124,2.726,128,2.543,130,3.066,135,2.003,143,2.891,144,2.576,156,3.687,284,4.406,288,2.109,333,3.593,470,2.758,560,3.304,561,4.489,562,3.433,563,5.506,564,5.002,569,2.299,570,3.902,571,4.898,572,3.676,573,4.898,574,3.579,575,3.304,576,4.925,577,2.894,578,1.736,579,5.002,580,3.746,581,3.579,582,2.109,583,3.433,584,3.304,585,3.746,586,3.746,587,4.32,588,3.433,589,3.579,590,4.859,591,5.454]],["title/classes/AuthenticationMethodPresentation.html",[53,0.2,584,2.858]],["body/classes/AuthenticationMethodPresentation.html",[0,1.43,3,0.062,4,0.069,5,0.054,12,1.405,13,0.205,14,0.877,17,0.582,19,0.433,20,0.327,21,0.007,30,0.117,31,0.005,32,0.005,43,0.458,49,0.181,53,0.385,57,1.091,63,1.191,70,1.588,73,2.118,74,2.287,75,2.3,76,2.665,77,1.291,84,2.986,98,2.935,107,1.948,109,3.841,115,2.765,122,2.985,123,2.765,124,2.704,128,2.516,130,3.046,135,2.351,143,2.867,144,2.556,156,3.668,284,4.391,288,2.074,333,3.564,470,2.728,560,3.249,561,4.962,562,3.376,563,5.476,564,4.962,565,4.778,569,2.261,570,3.86,571,4.845,572,3.636,573,4.845,574,3.52,575,3.249,576,4.894,577,2.846,578,1.707,579,5.271,580,3.684,581,3.52,582,2.074,583,3.376,584,4.273,585,3.684,586,3.684,587,3.249,588,3.376,589,3.52,592,5.363,593,5.363,594,5.363]],["title/classes/AuthenticationUrlConfig.html",[53,0.2,564,2.97]],["body/classes/AuthenticationUrlConfig.html",[0,1.366,3,0.059,4,0.066,5,0.052,9,0.602,12,1.343,13,0.196,14,0.851,17,0.892,19,0.473,20,0.329,21,0.007,30,0.116,31,0.005,32,0.005,43,0.445,49,0.177,53,0.381,57,1.042,63,1.155,70,1.517,73,2.024,74,2.219,75,2.319,76,2.618,77,1.233,84,2.933,98,2.804,107,2.051,109,4.089,115,2.642,122,2.919,123,2.642,124,2.94,128,3.056,130,2.803,135,1.922,143,2.992,144,2.919,156,3.717,284,4.279,288,2.646,333,3.875,470,2.646,560,3.104,561,4.851,562,3.226,563,5.177,564,5.177,569,2.161,570,4.5,571,5.648,572,4.239,573,5.648,574,4.492,575,4.146,576,4.806,577,2.72,578,1.631,579,4.851,580,3.52,581,3.363,582,1.982,583,3.226,584,3.104,585,3.52,586,3.52,587,3.104,588,3.226,589,3.363,595,5.125,596,5.125,597,5.125]],["title/classes/AuthorizationResponse.html",[53,0.2,598,3.408]],["body/classes/AuthorizationResponse.html",[3,0.079,4,0.089,5,0.069,9,0.805,13,0.262,14,1.024,19,0.562,20,0.251,21,0.007,30,0.089,31,0.005,32,0.005,43,0.446,49,0.157,53,0.349,57,1.395,63,1.158,75,2.273,77,1.65,325,3.251,346,3.116,353,4.717,459,4.008,460,4.812,468,4.37,469,4.35,598,5.949,599,7.336,600,6.11,601,4.812]],["title/controllers/AuthorizeController.html",[157,1.448,602,3.611]],["body/controllers/AuthorizeController.html",[3,0.048,4,0.054,5,0.042,9,0.699,11,3.482,12,2.407,13,0.16,17,0.819,20,0.312,21,0.007,30,0.054,31,0.004,32,0.004,39,1.386,43,0.491,45,1.88,46,1.296,48,1.951,49,0.206,50,0.695,53,0.177,54,1.51,63,1.274,68,0.758,120,1.061,124,2.044,157,2.448,159,1.525,163,2.639,208,2.368,250,0.943,255,1.655,280,5.165,295,5.189,325,3.501,331,4.919,346,2.764,353,4.809,355,3.728,356,2.403,372,2.225,373,4.305,378,2.045,386,2.751,389,2.48,402,3.029,476,2.248,477,1.198,485,1.796,518,3.302,529,1.359,572,3.071,602,4.561,603,3.734,604,2.045,605,4.192,606,5.309,607,4.561,608,5.959,609,4.955,610,5.306,611,6.933,612,7.55,613,3.734,614,5.726,615,4.192,616,4.192,617,5.309,618,4.192,619,4.192,620,5.455,621,5.009,622,4.192,623,4.192,624,6.184,625,4.192,626,4.192,627,4.192,628,4.192,629,4.192,630,2.907,631,5.309,632,2.751,633,2.879,634,2.539,635,2.225,636,4.762,637,3.208,638,3.574,639,2.751,640,4.2,641,4.192,642,3.208,643,1.895,644,3.208,645,4.192,646,4.192,647,1.621,648,4.192,649,4.192,650,4.192,651,4.192,652,4.753,653,4.192,654,3.734,655,3.433,656,3.433,657,3.208,658,3.734,659,4.192,660,3.734,661,4.192,662,4.192,663,3.208,664,4.192,665,4.192,666,4.192]],["title/classes/AuthorizeQueries.html",[53,0.2,614,2.97]],["body/classes/AuthorizeQueries.html",[3,0.062,4,0.069,5,0.054,13,0.205,14,0.877,17,1.072,19,0.607,20,0.348,21,0.007,30,0.069,31,0.005,32,0.005,43,0.618,49,0.123,53,0.299,57,1.091,63,1.604,74,3.102,75,2.464,77,1.291,369,5.695,614,4.441,652,4.962,667,8.523,668,3.376,669,5.695,670,7.882,671,7.882,672,7.882,673,5.695,674,7.882,675,7.882,676,5.173,677,5.695,678,6.528,679,5.363,680,5.363,681,5.363,682,5.363,683,5.363,684,4.778,685,5.363,686,5.363,687,4.778,688,4.778,689,5.363]],["title/injectables/AuthorizeService.html",[33,0.928,640,2.858]],["body/injectables/AuthorizeService.html",[0,1.121,3,0.03,4,0.034,5,0.027,12,2.093,13,0.101,17,0.845,19,0.536,20,0.308,21,0.007,22,1.001,30,0.054,31,0.003,32,0.003,33,0.827,35,0.981,39,0.979,43,0.506,45,1.94,46,1.338,48,1.73,49,0.193,50,0.438,53,0.112,54,1.389,62,1.5,68,0.478,84,0.943,101,0.769,107,0.979,109,2.313,112,0.729,125,3.174,128,2.477,134,2.089,135,0.742,143,2.173,144,1.937,147,2.626,156,2.519,204,2.252,205,0.826,208,1.493,250,2.058,255,2.069,256,1.325,280,3.174,284,3.1,285,4.01,287,2.867,293,1.875,295,4.272,332,1.403,333,1.195,338,1.362,346,2.731,355,3.077,356,1.339,368,1.446,407,1.909,409,1.909,461,2.889,470,2.522,476,2.877,477,1.202,485,2.279,487,3.004,488,2.349,492,1.403,495,3.219,497,1.909,511,1.446,518,3.265,529,2.799,532,1.815,539,1.734,540,2.313,541,1.909,543,1.909,547,2.023,552,2.376,569,1.114,572,3.361,575,2.548,576,1.544,577,1.403,578,1.339,582,2.026,610,4.01,613,2.354,614,5.028,620,1.909,621,3.786,632,3.439,633,1.815,635,1.403,638,3.755,639,1.734,640,2.548,642,2.023,643,1.195,652,3.299,669,4.316,673,4.316,690,2.023,691,3.747,692,4.206,693,4.292,694,4.206,695,4.292,696,4.206,697,4.292,698,1.544,699,3.376,700,4.257,701,4.413,702,2.643,703,2.643,704,3.219,705,2.643,706,5.689,707,3.445,708,2.643,709,5.341,710,2.643,711,2.643,712,1.493,713,2.052,714,3.445,715,2.643,716,2.643,717,2.643,718,3.445,719,2.643,720,2.643,721,2.643,722,3.811,723,4.892,724,4.892,725,2.839,726,2.165,727,4.892,728,1.909,729,1.446,730,2.165,731,2.023,732,1.909,733,2.165,734,3.039,735,3.445,736,3.039,737,2.165,738,2.165,739,3.445,740,2.165,741,3.445,742,2.648,743,4.892,744,4.105,745,2.165,746,2.165,747,2.023,748,2.165,749,2.165,750,2.023,751,1.734,752,2.023,753,2.023,754,2.165,755,2.023,756,2.165,757,2.023,758,2.165,759,2.165,760,3.445,761,2.165,762,2.023,763,2.165,764,2.165,765,3.801,766,2.165,767,2.165,768,2.165,769,2.165,770,2.165,771,4.292,772,4.01,773,2.108,774,3.445,775,3.219,776,2.165,777,4.892,778,3.445,779,5.263,780,2.165,781,3.445,782,3.445,783,3.445,784,3.445,785,3.445,786,2.052,787,3.445,788,2.165,789,2.165,790,2.165,791,2.165,792,2.165,793,2.165,794,2.165,795,3.445,796,2.165,797,2.165,798,1.601,799,1.362,800,2.165,801,2.023,802,1.664,803,2.165,804,1.493,805,2.165,806,2.165,807,2.023,808,1.664,809,3.445,810,1.493,811,2.165,812,4.292,813,2.165,814,2.165,815,2.165,816,2.369,817,2.165,818,2.165,819,2.023,820,3.445,821,2.165,822,3.445,823,2.232,824,2.165,825,4.292,826,2.023,827,2.165,828,2.165,829,2.165,830,2.165,831,1.734,832,2.648,833,1.815,834,2.165,835,1.664,836,2.165,837,3.299,838,2.165,839,2.165,840,2.165,841,4.292,842,0.841,843,2.165,844,2.165,845,4.01,846,2.165,847,2.165,848,2.165]],["title/entities/CertEntity.html",[849,1.372,850,2.581]],["body/entities/CertEntity.html",[3,0.056,4,0.063,5,0.05,7,3.565,9,1.022,11,4.402,12,2.116,13,0.187,14,0.826,15,5.442,16,1.899,17,0.72,19,0.556,20,0.349,21,0.007,23,1.991,24,4.18,25,2.416,26,3.077,27,2.568,30,0.086,31,0.004,32,0.004,43,0.588,49,0.152,53,0.207,63,1.528,68,1.677,293,1.813,412,3.423,413,2.253,418,4.932,441,2.997,468,4.286,842,2.114,849,2.349,850,3.633,851,2.329,852,4.013,853,5.916,854,5.916,855,3.406,856,3.883,857,4.418,858,4.402,859,4.9,860,4.719,861,3.156,862,5.539,863,4.9,864,3.24,865,4.9,866,3.588,867,4.9,868,2.768,869,3.405,870,2.8,871,4.9,872,2.8,873,2.323,874,4.9,875,5.442,876,4.9,877,4.402,878,4.9,879,3.752,880,3.752,881,2.02,882,2.8,883,1.649,884,2.066,885,3.64]],["title/classes/ClaimsQuery.html",[53,0.2,78,2.364]],["body/classes/ClaimsQuery.html",[3,0.045,4,0.05,5,0.039,7,1.719,9,0.663,12,2.239,13,0.149,14,0.703,16,1.819,17,0.721,19,0.57,20,0.34,21,0.007,25,2.056,26,1.805,27,1.506,28,2.141,30,0.108,31,0.004,32,0.004,43,0.432,49,0.191,53,0.369,57,0.792,62,2.603,63,1.123,68,1.637,70,1.153,71,4.099,73,1.538,74,2.937,75,2.308,76,2.655,77,0.937,78,2.833,79,3.334,80,3.334,89,3.995,95,2.495,101,1.133,107,1.315,118,2.383,120,0.986,122,2.141,124,1.336,128,2.016,134,1.362,143,2.42,144,1.263,221,2.87,255,2.882,269,2.131,293,0.937,324,1.506,346,1.263,413,1.685,441,2.469,455,1.445,468,4.29,469,1.851,470,2.572,471,1.761,473,2.131,537,2.276,569,1.642,578,1.799,601,2.276,630,1.9,634,4.422,643,1.761,804,2.2,810,2.2,823,2.067,842,1.24,849,1.935,855,1.761,856,2.007,857,3.093,858,3.303,860,3.303,861,1.851,864,3.561,866,2.33,869,2.383,870,1.642,872,1.642,873,1.362,877,3.303,879,2.2,880,2.2,881,1.606,882,2.383,883,1.311,884,1.642,885,2.87,886,4.595,887,2.276,888,3.894,889,3.47,890,3.47,891,3.894,892,2.833,893,3.64,894,3.709,895,3,896,3.759,897,2.556,898,4.366,899,2.452,900,4.03,901,2.556,902,4.79,903,4.79,904,4.79,905,4.113,906,4.265,907,4.366,908,2.556,909,2.556,910,4.03,911,2.556,912,2.556,913,2.556,914,2.556,915,2.067,916,2.556,917,2.556,918,3.193,919,4.422,920,2.556,921,2.067,922,2.556,923,2.913,924,2.556,925,2.556,926,2.067,927,3.383,928,2.359,929,2.276,930,2.2,931,2.359,932,2.007,933,2.556]],["title/classes/ClientCredentialsDto.html",[53,0.2,342,3.611]],["body/classes/ClientCredentialsDto.html",[3,0.081,4,0.091,5,0.071,13,0.269,14,1.042,19,0.568,20,0.306,21,0.007,30,0.091,31,0.006,32,0.006,43,0.545,49,0.162,53,0.355,57,1.436,63,1.414,75,2.43,77,1.699,342,6.413,369,6.455,370,7.96,934,7.318,935,6.291,936,7.061,937,7.061]],["title/classes/ClientInitDto.html",[53,0.2,938,3.611]],["body/classes/ClientInitDto.html",[3,0.083,4,0.093,5,0.073,13,0.275,14,1.054,16,2.027,17,0.919,19,0.521,20,0.264,21,0.006,30,0.093,31,0.006,32,0.006,43,0.468,49,0.165,53,0.359,57,1.465,63,1.216,74,2.749,75,2.184,77,1.734,934,6.944,938,6.489,939,6.418,940,5.9,941,7.204]],["title/interfaces/ConfigGroup.html",[0,1.258,942,3.24]],["body/interfaces/ConfigGroup.html",[0,1.564,2,1.461,3,0.036,4,0.041,5,0.067,9,0.689,13,0.12,14,0.6,17,0.636,19,0.571,20,0.24,21,0.007,22,1.194,23,1.621,25,2.391,28,1.828,30,0.085,31,0.003,32,0.003,33,0.949,46,1.217,49,0.171,50,0.523,53,0.133,54,1.679,62,1.124,68,1.281,107,0.733,112,2.147,130,1.146,134,2.299,135,1.846,195,1.984,199,3.368,204,1.565,205,0.985,220,2.641,221,1.359,233,2.068,236,1.984,250,2.201,291,2.821,322,1.391,356,1.536,388,1.219,455,2.439,476,1.565,485,2.253,488,1.455,509,3.596,519,1.984,529,1.902,647,1.219,713,1.538,835,1.984,837,4.138,842,2.092,855,2.182,915,3.488,918,4.534,942,4.515,943,1.984,944,2.165,945,5.179,946,5.343,947,2.277,948,1.842,949,2.412,950,2.412,951,1.498,952,3.849,953,2.412,954,2.165,955,2.165,956,2.412,957,5.512,958,5.423,959,4.749,960,4.489,961,4.749,962,2.182,963,5.134,964,4.489,965,2.277,966,2.412,967,2.412,968,3.694,969,2.412,970,2.412,971,2.412,972,2.412,973,2.412,974,3.694,975,2.412,976,3.694,977,2.412,978,2.277,979,2.412,980,2.277,981,2.412,982,2.412,983,2.412,984,2.412,985,2.412,986,3.694,987,3.487,988,2.412,989,2.412,990,2.068,991,2.412,992,2.412,993,2.412,994,3.694,995,2.412,996,1.461,997,2.412,998,2.277,999,2.412,1000,2.412,1001,2.412,1002,2.277,1003,2.412,1004,2.277,1005,2.412,1006,2.277,1007,5.031,1008,2.412,1009,2.412,1010,2.412,1011,2.412,1012,2.412,1013,2.412,1014,3.694,1015,3.694,1016,3.694,1017,2.412,1018,2.412,1019,2.277,1020,2.412,1021,2.412,1022,2.412,1023,2.412,1024,2.412,1025,2.412,1026,2.412,1027,3.694,1028,3.694,1029,2.412,1030,3.694,1031,2.412,1032,2.412,1033,3.694,1034,2.412,1035,2.412,1036,2.412,1037,2.412,1038,2.412,1039,2.412,1040,2.412,1041,2.412,1042,2.412,1043,2.412,1044,3.694,1045,2.412,1046,2.412,1047,2.412,1048,3.487,1049,3.694,1050,3.694,1051,2.412,1052,3.694,1053,5.031,1054,2.412,1055,2.412,1056,2.412,1057,2.412,1058,2.412,1059,2.277,1060,2.412,1061,2.068,1062,1.673,1063,2.412,1064,2.412,1065,2.412,1066,4.489,1067,2.412,1068,2.412,1069,2.412,1070,2.412,1071,2.412,1072,2.412,1073,2.068,1074,2.277,1075,2.412,1076,3.487,1077,2.412,1078,2.412,1079,2.412,1080,3.694,1081,2.412,1082,2.412,1083,2.412,1084,2.412,1085,2.412,1086,2.412,1087,2.277,1088,2.412,1089,2.068,1090,2.412,1091,2.412,1092,2.412,1093,2.412,1094,1.984,1095,2.412,1096,3.694,1097,2.412,1098,2.068,1099,2.412,1100,2.412,1101,2.412,1102,2.277,1103,3.694,1104,2.412,1105,2.412,1106,2.412,1107,2.412,1108,2.412]],["title/interfaces/ConfigItem.html",[0,1.258,946,3.24]],["body/interfaces/ConfigItem.html",[0,1.52,2,1.396,3,0.035,4,0.039,5,0.065,9,0.862,13,0.115,14,0.58,17,0.618,19,0.584,20,0.309,21,0.007,22,1.141,23,1.81,25,2.335,28,2.781,30,0.083,31,0.003,32,0.003,33,0.917,46,0.801,49,0.168,50,0.5,53,0.128,54,1.659,62,1.075,68,1.255,107,0.701,112,2.289,130,1.096,134,2.245,135,1.803,195,1.897,199,3.3,204,1.512,205,0.942,220,2.551,221,1.3,233,1.977,236,1.897,250,2.194,291,2.725,322,1.33,356,1.484,388,1.165,455,2.382,476,1.512,485,2.213,488,1.405,509,4.189,519,1.897,529,1.849,647,1.165,713,1.47,835,1.897,837,4.041,842,2.043,855,2.108,915,4.063,918,3.922,942,3.917,943,1.897,944,2.07,945,5.111,946,5.042,947,2.177,948,1.761,949,2.306,950,2.306,951,1.432,952,3.743,953,2.306,954,2.07,955,2.07,956,2.306,957,5.965,958,6.054,959,5.531,960,5.619,961,5.531,962,2.903,963,5.042,964,4.365,965,2.177,966,2.306,967,2.306,968,3.568,969,2.306,970,2.306,971,2.306,972,2.306,973,2.306,974,3.568,975,2.306,976,3.568,977,2.306,978,2.177,979,2.306,980,2.177,981,2.306,982,2.306,983,2.306,984,2.306,985,2.306,986,3.568,987,3.369,988,2.306,989,2.306,990,1.977,991,2.306,992,2.306,993,2.306,994,3.568,995,2.306,996,1.396,997,2.306,998,2.177,999,2.306,1000,2.306,1001,2.306,1002,2.177,1003,2.306,1004,2.177,1005,2.306,1006,2.177,1007,4.913,1008,2.306,1009,2.306,1010,2.306,1011,2.306,1012,2.306,1013,2.306,1014,3.568,1015,3.568,1016,3.568,1017,2.306,1018,2.306,1019,2.177,1020,2.306,1021,2.306,1022,2.306,1023,2.306,1024,2.306,1025,2.306,1026,2.306,1027,3.568,1028,3.568,1029,2.306,1030,3.568,1031,2.306,1032,2.306,1033,3.568,1034,2.306,1035,2.306,1036,2.306,1037,2.306,1038,2.306,1039,2.306,1040,2.306,1041,2.306,1042,2.306,1043,2.306,1044,3.568,1045,2.306,1046,2.306,1047,2.306,1048,3.369,1049,3.568,1050,3.568,1051,2.306,1052,3.568,1053,4.913,1054,2.306,1055,2.306,1056,2.306,1057,2.306,1058,2.306,1059,2.177,1060,2.306,1061,1.977,1062,1.599,1063,2.306,1064,2.306,1065,2.306,1066,4.365,1067,2.306,1068,2.306,1069,2.306,1070,2.306,1071,2.306,1072,2.306,1073,1.977,1074,2.177,1075,2.306,1076,3.369,1077,2.306,1078,2.306,1079,2.306,1080,3.568,1081,2.306,1082,2.306,1083,2.306,1084,2.306,1085,2.306,1086,2.306,1087,2.177,1088,2.306,1089,1.977,1090,2.306,1091,2.306,1092,2.306,1093,2.306,1094,1.897,1095,2.306,1096,3.568,1097,2.306,1098,1.977,1099,2.306,1100,2.306,1101,2.306,1102,2.177,1103,3.568,1104,2.306,1105,2.306,1106,2.306,1107,2.306,1108,2.306]],["title/interfaces/ConfigModel.html",[0,1.258,963,3.24]],["body/interfaces/ConfigModel.html",[0,1.566,2,1.464,3,0.036,4,0.041,5,0.067,9,0.69,13,0.121,14,0.601,17,0.637,19,0.571,20,0.241,21,0.007,22,1.197,23,1.623,25,2.394,28,1.832,30,0.085,31,0.003,32,0.003,33,0.951,46,0.83,49,0.172,50,0.524,53,0.134,54,1.681,62,1.127,68,1.282,107,0.735,112,2.149,130,1.149,134,2.302,135,1.848,195,1.989,199,3.372,204,1.568,205,0.988,220,2.646,221,1.363,233,2.074,236,1.989,250,2.202,291,2.826,322,1.395,356,1.539,388,1.222,455,1.795,476,1.568,485,2.255,488,1.458,509,3.601,519,1.989,529,1.905,647,1.222,713,1.542,835,1.989,837,4.144,842,2.095,855,3.208,915,3.493,918,4.008,942,4.873,943,1.989,944,2.17,945,4.71,946,5.348,947,2.283,948,1.847,949,2.418,950,2.418,951,1.502,952,3.856,953,2.418,954,2.17,955,2.17,956,2.418,957,5.516,958,5.43,959,4.756,960,4.497,961,4.756,962,2.187,963,5.348,964,5.727,965,2.283,966,2.418,967,2.418,968,3.701,969,2.418,970,2.418,971,2.418,972,2.418,973,2.418,974,3.701,975,2.418,976,3.701,977,2.418,978,2.283,979,2.418,980,2.283,981,2.418,982,2.418,983,2.418,984,2.418,985,2.418,986,3.701,987,3.494,988,2.418,989,2.418,990,2.074,991,2.418,992,2.418,993,2.418,994,3.701,995,2.418,996,1.464,997,2.418,998,2.283,999,2.418,1000,2.418,1001,2.418,1002,2.283,1003,2.418,1004,2.283,1005,2.418,1006,2.283,1007,5.038,1008,2.418,1009,2.418,1010,2.418,1011,2.418,1012,2.418,1013,2.418,1014,3.701,1015,3.701,1016,3.701,1017,2.418,1018,2.418,1019,2.283,1020,2.418,1021,2.418,1022,2.418,1023,2.418,1024,2.418,1025,2.418,1026,2.418,1027,3.701,1028,3.701,1029,2.418,1030,3.701,1031,2.418,1032,2.418,1033,3.701,1034,2.418,1035,2.418,1036,2.418,1037,2.418,1038,2.418,1039,2.418,1040,2.418,1041,2.418,1042,2.418,1043,2.418,1044,3.701,1045,2.418,1046,2.418,1047,2.418,1048,3.494,1049,3.701,1050,3.701,1051,2.418,1052,3.701,1053,5.038,1054,2.418,1055,2.418,1056,2.418,1057,2.418,1058,2.418,1059,2.283,1060,2.418,1061,2.074,1062,1.677,1063,2.418,1064,2.418,1065,2.418,1066,4.497,1067,2.418,1068,2.418,1069,2.418,1070,2.418,1071,2.418,1072,2.418,1073,2.074,1074,2.283,1075,2.418,1076,3.494,1077,2.418,1078,2.418,1079,2.418,1080,3.701,1081,2.418,1082,2.418,1083,2.418,1084,2.418,1085,2.418,1086,2.418,1087,2.283,1088,2.418,1089,2.074,1090,2.418,1091,2.418,1092,2.418,1093,2.418,1094,1.989,1095,2.418,1096,3.701,1097,2.418,1098,2.074,1099,2.418,1100,2.418,1101,2.418,1102,2.283,1103,3.701,1104,2.418,1105,2.418,1106,2.418,1107,2.418,1108,2.418]],["title/injectables/ConfigPrinterService.html",[33,0.928,195,2.97]],["body/injectables/ConfigPrinterService.html",[0,1.441,3,0.032,4,0.036,5,0.062,9,0.635,13,0.106,17,0.878,19,0.58,20,0.281,21,0.007,22,2.048,23,1.527,25,2.579,28,1.655,30,0.079,31,0.003,32,0.003,33,0.859,35,1.029,39,1.016,43,0.514,45,1.848,46,1.359,48,1.759,49,0.163,50,0.46,53,0.117,54,1.62,62,1.558,68,1.206,107,0.645,112,2.048,130,1.008,134,2.146,135,1.874,195,2.75,199,3.173,204,1.989,205,0.866,220,2.39,221,1.196,233,1.819,236,5.1,250,2.18,291,3.585,322,1.224,356,1.953,388,1.072,455,1.621,476,2.299,477,0.792,485,2.698,488,1.317,509,3.357,519,1.745,529,1.753,647,1.072,713,1.352,835,1.745,837,3.862,842,1.953,855,1.975,915,3.543,918,3.771,942,3.713,943,5.1,944,1.904,945,4.464,946,5.097,947,2.003,948,1.62,949,2.122,950,2.122,951,1.318,952,4.654,953,2.122,954,1.904,955,1.904,956,2.122,957,5.282,958,5.109,959,4.433,960,4.138,961,4.823,962,1.975,963,5.99,964,4.138,965,3.156,966,3.344,967,3.344,968,5.68,969,4.696,970,2.122,971,2.122,972,2.122,973,2.122,974,3.344,975,2.122,976,3.344,977,2.122,978,2.003,979,2.122,980,2.003,981,2.122,982,2.122,983,2.122,984,2.122,985,2.122,986,3.344,987,3.156,988,2.122,989,2.122,990,1.819,991,2.122,992,2.122,993,2.122,994,3.344,995,2.122,996,1.285,997,2.122,998,2.003,999,2.122,1000,2.122,1001,2.122,1002,2.003,1003,2.122,1004,2.003,1005,2.122,1006,2.003,1007,4.696,1008,2.122,1009,2.122,1010,2.122,1011,2.122,1012,2.122,1013,2.122,1014,3.344,1015,3.344,1016,3.344,1017,2.122,1018,2.122,1019,2.003,1020,2.122,1021,2.122,1022,2.122,1023,2.122,1024,2.122,1025,2.122,1026,3.344,1027,3.344,1028,3.344,1029,2.122,1030,3.344,1031,2.122,1032,2.122,1033,3.344,1034,2.122,1035,2.122,1036,2.122,1037,2.122,1038,2.122,1039,2.122,1040,2.122,1041,2.122,1042,2.122,1043,2.122,1044,3.344,1045,2.122,1046,2.122,1047,3.344,1048,3.156,1049,3.344,1050,3.344,1051,2.122,1052,3.344,1053,4.696,1054,2.122,1055,2.122,1056,2.122,1057,2.122,1058,3.344,1059,2.003,1060,2.122,1061,1.819,1062,1.471,1063,2.122,1064,2.122,1065,2.122,1066,4.138,1067,2.122,1068,2.122,1069,2.122,1070,2.122,1071,3.344,1072,2.122,1073,1.819,1074,2.003,1075,3.344,1076,3.156,1077,2.122,1078,2.122,1079,2.122,1080,3.344,1081,2.122,1082,4.138,1083,3.344,1084,2.122,1085,2.122,1086,2.122,1087,2.003,1088,2.122,1089,1.819,1090,2.122,1091,2.122,1092,2.122,1093,2.122,1094,1.745,1095,2.122,1096,3.344,1097,2.122,1098,1.819,1099,2.122,1100,2.122,1101,2.122,1102,2.003,1103,3.344,1104,2.122,1105,2.122,1106,2.122,1107,2.122,1108,2.122,1109,4.369,1110,4.369,1111,4.369,1112,4.369,1113,4.369,1114,2.772,1115,2.772,1116,2.772,1117,2.772,1118,2.772,1119,2.772,1120,2.772,1121,2.772,1122,2.772,1123,2.772,1124,2.772]],["title/entities/CredentialConfig.html",[849,1.372,1125,2.581]],["body/entities/CredentialConfig.html",[3,0.038,4,0.042,5,0.033,9,0.788,13,0.125,14,0.619,16,1.354,17,1.009,19,0.558,20,0.346,21,0.007,23,1.377,25,1.195,28,2.543,30,0.087,31,0.003,32,0.003,43,0.591,46,1.239,49,0.195,53,0.359,56,3.292,59,1.856,60,4.157,61,4.439,63,1.534,68,1.664,70,1.782,74,2.797,75,2.252,76,2.588,77,1.448,82,1.522,84,1.172,85,1.856,86,1.856,90,3.292,97,3.292,100,2.936,101,1.449,103,3.674,112,1.853,117,2.911,118,2.1,119,1.92,120,0.832,122,2.279,135,1.69,148,1.92,149,3.924,152,3.924,153,1.743,154,1.92,155,2.911,254,2.149,293,1.448,378,1.603,413,1.828,441,2.492,455,1.849,578,1.046,582,1.926,677,2.373,678,2.256,773,3.366,842,2.137,849,1.449,850,3.674,851,1.561,864,4.36,866,2.769,868,2.814,869,3.428,870,2.831,872,2.1,873,1.742,881,1.355,882,2.537,883,1.106,884,1.385,885,2.595,887,1.92,892,2.497,893,3.292,895,2.644,923,3.102,926,1.743,927,3.521,962,3.037,996,2.309,1125,2.726,1126,2.373,1127,4.347,1128,4.347,1129,4.347,1130,3.399,1131,3.399,1132,4.605,1133,4.781,1134,3.599,1135,4.981,1136,3.285,1137,4.612,1138,2.927,1139,3.285,1140,4.438,1141,3.285,1142,3.285,1143,3.285,1144,2.691,1145,3.285,1146,3.285,1147,3.813,1148,3.813,1149,3.813,1150,3.813,1151,3.599,1152,3.813,1153,3.813,1154,3.813,1155,3.813,1156,3.813,1157,3.813,1158,3.285,1159,2.927,1160,3.813,1161,3.285,1162,3.285,1163,4.981,1164,4.981,1165,3.285,1166,3.285,1167,3.285,1168,3.285,1169,3.285,1170,4.227,1171,4.08,1172,3.285,1173,3.285,1174,3.285,1175,2.514,1176,3.285,1177,3.285,1178,3.599,1179,2.514,1180,2.156,1181,2.373,1182,2.256,1183,2.514,1184,4.957,1185,1.603,1186,3.564,1187,2.156,1188,2.514,1189,2.514,1190,2.514,1191,2.156,1192,3.599,1193,2.514,1194,2.514,1195,2.514,1196,2.514,1197,2.514,1198,1.99,1199,2.156]],["title/classes/CredentialConfigCreate.html",[53,0.2,1200,3.408]],["body/classes/CredentialConfigCreate.html",[3,0.083,4,0.093,5,0.073,21,0.007,23,1.942,30,0.093,31,0.006,32,0.006,37,4.035,49,0.195,53,0.306,57,1.468,120,1.828,135,2.027,293,2.043,413,2.149,1125,3.95,1128,6.133,1200,6.133,1201,6.431,1202,5.525,1203,8.488,1204,4.958,1205,5.912]],["title/classes/CredentialConfigMapping.html",[53,0.2,1206,3.611]],["body/classes/CredentialConfigMapping.html",[3,0.073,4,0.082,5,0.064,9,0.748,13,0.243,14,0.979,16,1.922,19,0.525,20,0.233,21,0.007,26,3.647,27,3.043,30,0.102,31,0.005,32,0.005,37,3.027,43,0.414,49,0.196,53,0.362,57,1.295,63,1.075,71,3.647,75,2.2,77,1.533,82,2.951,107,1.988,120,1.613,250,1.433,293,1.533,413,1.613,460,4.992,578,2.918,582,3.45,773,3.192,855,2.88,856,3.283,1204,4.374,1206,6.024,1207,5.216,1208,6.997,1209,5.041,1210,6.368,1211,5.216,1212,4.374,1213,5.674,1214,4.874,1215,4.874,1216,4.179,1217,5.674]],["title/injectables/CredentialConfigService.html",[33,0.928,1218,3.096]],["body/injectables/CredentialConfigService.html",[3,0.034,4,0.038,5,0.081,7,1.293,9,0.804,13,0.112,16,2.105,17,0.787,19,0.565,20,0.265,21,0.007,22,2.122,23,1.044,30,0.038,31,0.003,32,0.003,33,0.897,35,1.087,39,1.061,43,0.509,45,1.807,46,1.246,48,1.883,49,0.209,50,0.486,53,0.237,54,1.265,68,0.824,70,0.867,72,1.922,77,0.705,95,2.014,101,1.629,107,1.823,112,0.808,135,2.477,147,1.468,153,1.555,202,2.062,204,2.457,205,0.915,217,1.844,218,1.922,220,1.603,221,1.967,250,1.964,254,2.955,256,1.468,293,2.123,303,2.116,324,1.133,349,3.295,356,2.31,366,2.242,389,2.279,413,2.329,432,1.208,475,1.998,476,2.353,477,1.807,485,1.906,499,1.922,500,2.242,511,2.496,522,2.662,529,2.353,578,2.668,630,2.225,647,1.133,699,3.511,729,1.603,816,1.324,849,2.279,851,2.168,883,0.986,948,1.712,951,2.662,990,3.676,1089,1.922,1125,4.659,1130,2.577,1200,4.951,1205,2.399,1209,3.572,1218,4.149,1219,6.981,1220,5.661,1221,2.242,1222,2.286,1223,3.345,1224,4.561,1225,3.133,1226,3.695,1227,2.929,1228,3.54,1229,4.568,1230,2.929,1231,5.602,1232,4.561,1233,2.929,1234,2.351,1235,3.927,1236,5.944,1237,3.295,1238,4.561,1239,4.064,1240,2.929,1241,3.83,1242,4.561,1243,2.929,1244,2.929,1245,4.047,1246,3.133,1247,2.929,1248,4.561,1249,2.929,1250,3.295,1251,4.047,1252,4.428,1253,4.561,1254,3.295,1255,1.603,1256,3.736,1257,2.116,1258,2.399,1259,2.399,1260,2.012,1261,2.61,1262,2.116,1263,2.116,1264,3.736,1265,2.929,1266,4.839,1267,2.399,1268,2.116,1269,3.295,1270,2.116,1271,2.116,1272,2.116,1273,2.116,1274,4.588,1275,2.763,1276,2.399,1277,2.399,1278,3.847,1279,2.399,1280,6.057,1281,2.871,1282,2.399,1283,2.242,1284,2.399,1285,2.399,1286,2.399,1287,2.929,1288,4.588,1289,2.399,1290,2.242,1291,2.399,1292,2.399,1293,5.602,1294,2.399,1295,3.736,1296,2.61,1297,2.399,1298,2.399,1299,2.242,1300,2.399,1301,2.399,1302,2.242,1303,2.399,1304,2.399,1305,5.602,1306,4.287,1307,2.929,1308,4.047,1309,3.83,1310,3.736,1311,3.295,1312,3.736,1313,1.922,1314,2.993,1315,3.676,1316,2.929,1317,2.399,1318,2.61,1319,2.929,1320,2.61,1321,2.929,1322,2.929,1323,2.929,1324,2.929,1325,2.116,1326,2.399,1327,2.929,1328,2.61,1329,2.929,1330,2.929]],["title/classes/CredentialIssuerMetadataDto.html",[53,0.2,1331,3.611]],["body/classes/CredentialIssuerMetadataDto.html",[3,0.06,4,0.068,5,0.053,9,0.616,13,0.2,14,0.864,19,0.577,20,0.34,21,0.007,27,2.688,30,0.068,31,0.005,32,0.005,43,0.597,53,0.222,57,1.067,95,3.069,101,2.414,144,2.981,168,4.405,331,4.542,337,4.774,338,3.583,353,4.279,455,1.947,467,4.014,493,5.32,496,5.693,540,4.289,578,2.961,582,3.432,873,2.431,1186,4.583,1209,3.927,1278,3.602,1331,5.32,1332,6.106,1333,8.289,1334,4.296,1335,3.177,1336,2.87,1337,7.796,1338,7.796,1339,7.796,1340,6.945,1341,7.796,1342,7.796,1343,7.796,1344,5.245,1345,6.951,1346,5.245,1347,3.927,1348,6.951,1349,5.245,1350,6.945,1351,5.245,1352,5.245,1353,5.245,1354,6.193,1355,5.245,1356,6.951,1357,5.245,1358,4.211,1359,4.673,1360,5.245]],["title/classes/CredentialQuery.html",[53,0.2,79,2.364]],["body/classes/CredentialQuery.html",[3,0.044,4,0.049,5,0.038,7,1.674,9,0.651,12,2.222,13,0.145,14,0.689,16,1.802,17,0.831,19,0.568,20,0.342,21,0.007,25,2.622,26,1.757,27,1.466,28,2.481,30,0.107,31,0.004,32,0.004,43,0.498,49,0.19,53,0.366,57,0.771,62,1.977,63,1.294,68,1.629,70,1.122,71,4.009,73,1.497,74,2.922,75,2.321,76,2.633,77,0.912,78,1.9,79,3.612,80,3.283,89,3.952,95,2.447,101,1.103,107,1.29,118,2.337,120,0.96,122,2.481,124,1.301,128,1.977,134,1.326,143,2.383,144,1.229,221,1.635,255,2.846,269,2.074,293,0.912,313,2.901,324,1.466,346,1.229,413,1.659,441,2.431,455,1.407,468,4.25,469,1.802,470,2.533,471,1.714,473,2.074,537,2.215,569,1.598,578,1.764,601,2.215,630,1.849,634,4.366,643,1.714,804,2.142,810,2.142,823,2.012,842,1.207,849,1.906,855,1.714,856,1.954,857,3.032,858,3.239,860,3.239,861,1.802,864,3.516,866,2.285,869,2.337,870,1.598,872,1.598,873,1.326,877,3.239,879,2.142,880,2.142,881,1.563,882,2.337,883,1.276,884,1.598,885,2.826,886,5.042,887,2.215,892,2.778,893,3.584,894,3.637,895,2.941,896,3.701,897,2.488,898,4.299,899,2.387,900,3.968,901,2.488,902,4.73,903,4.73,904,4.73,905,4.069,906,4.212,907,4.299,908,2.488,909,2.488,910,4.366,911,2.488,912,2.488,913,2.488,914,4.299,915,3.477,916,4.299,917,2.488,918,3.131,919,4.366,920,2.488,921,2.012,922,2.488,923,2.857,924,2.488,925,2.488,926,2.012,927,3.34,928,2.296,929,2.215,930,2.142,931,2.296,932,1.954,933,2.488,1361,3.791,1362,3.791,1363,3.791,1364,3.791,1365,3.377,1366,3.377,1367,3.791]],["title/classes/CredentialSetQuery.html",[53,0.2,80,2.364]],["body/classes/CredentialSetQuery.html",[3,0.045,4,0.051,5,0.04,7,1.733,9,0.667,12,2.243,13,0.15,14,0.707,16,1.648,17,0.725,19,0.567,20,0.338,21,0.007,25,2.067,26,1.819,27,1.517,28,2.531,30,0.108,31,0.004,32,0.004,43,0.369,49,0.192,53,0.369,57,0.798,62,2.027,63,0.959,68,1.64,70,1.162,71,4.044,73,1.55,74,2.941,75,2.282,76,2.661,77,0.944,78,1.967,79,3.349,80,3.671,89,4.007,95,2.95,101,1.141,107,1.322,118,2.396,120,0.994,122,2.153,124,1.346,128,2.027,134,2.337,143,2.431,144,1.272,221,1.693,255,2.893,269,3.656,293,0.944,324,1.517,346,1.272,413,1.692,441,2.48,455,1.456,468,4.302,469,1.865,470,2.584,471,1.775,473,2.147,537,2.293,569,1.655,578,1.809,601,2.293,630,1.915,634,4.437,643,1.775,804,2.217,810,2.217,823,2.083,842,1.249,849,1.944,855,1.775,856,2.023,857,3.11,858,3.321,860,3.321,861,1.865,864,3.574,866,2.343,869,2.396,870,1.655,872,1.655,873,1.373,877,3.321,879,2.217,880,2.217,881,1.618,882,2.396,883,1.321,884,1.655,885,2.882,886,4.206,887,2.293,892,2.849,893,3.656,894,3.73,895,3.016,896,3.775,897,2.575,898,4.385,899,2.47,900,4.048,901,2.575,902,4.807,903,4.807,904,4.807,905,4.126,906,4.281,907,4.385,908,2.575,909,2.575,910,4.048,911,2.575,912,2.575,913,2.575,914,2.575,915,2.083,916,2.575,917,2.575,918,3.775,919,4.437,920,2.575,921,2.083,922,2.575,923,2.93,924,2.575,925,2.575,926,2.083,927,3.395,928,2.377,929,2.293,930,2.217,931,2.377,932,2.023,933,2.575,1368,3.214,1369,3.924,1370,3.924,1371,3.924,1372,3.924]],["title/controllers/CredentialsController.html",[157,1.448,1373,3.611]],["body/controllers/CredentialsController.html",[3,0.06,4,0.067,5,0.053,9,0.611,13,0.199,16,1.862,17,0.842,19,0.477,20,0.284,21,0.007,30,0.067,31,0.005,32,0.005,39,1.609,43,0.505,45,1.934,46,1.334,48,2.1,49,0.203,50,0.864,53,0.22,54,1.554,63,1.311,107,1.926,120,1.319,135,2.419,157,2.384,159,1.894,288,3.549,325,3.067,355,2.732,372,4.122,376,3.417,388,2.013,389,2.407,413,2.096,424,2.763,483,4.243,540,2.299,578,2.957,604,2.54,647,2.013,1200,5.98,1209,4.676,1218,5.098,1220,3.762,1222,3.467,1223,2.299,1234,3.566,1250,4.998,1259,4.265,1260,3.576,1373,5.945,1374,4.639,1375,6.917,1376,6.362,1377,6.917,1378,7.768,1379,4.639,1380,3.576,1381,5.207,1382,5.207,1383,5.207,1384,5.207,1385,5.207,1386,3.154,1387,3.154,1388,3.278,1389,3.278,1390,4.265,1391,4.265,1392,3.043,1393,3.278,1394,3.154,1395,4.265,1396,3.985,1397,4.539,1398,5.207,1399,5.207,1400,5.207,1401,3.576,1402,3.985,1403,5.207]],["title/controllers/CredentialsMetadataController.html",[157,1.448,1404,3.611]],["body/controllers/CredentialsMetadataController.html",[3,0.067,4,0.075,5,0.059,9,0.68,13,0.221,16,2.051,17,0.804,19,0.594,20,0.315,21,0.007,27,2.866,30,0.075,31,0.005,32,0.005,39,1.725,43,0.482,45,1.845,46,1.273,48,1.871,49,0.188,50,0.961,53,0.245,54,1.483,63,1.251,68,1.046,101,2.156,107,1.725,120,1.466,157,1.777,159,2.106,163,3.645,293,2.259,386,3.8,388,2.239,389,2.378,414,4.491,475,2.644,578,2.902,604,2.825,647,2.239,905,3.934,1131,4.871,1133,5.223,1241,5.223,1336,4.056,1397,5.366,1404,5.674,1405,6.258,1406,6.697,1407,5.158,1408,5.79,1409,5.79,1410,5.79,1411,5.79,1412,5.79,1413,5.79,1414,5.79,1415,5.158,1416,5.79,1417,5.79,1418,5.79,1419,7.413,1420,5.79,1421,5.79,1422,5.79,1423,5.79]],["title/injectables/CredentialsService.html",[33,0.928,1397,3.096]],["body/injectables/CredentialsService.html",[3,0.033,4,0.037,5,0.029,9,0.339,13,0.11,16,1.623,17,0.738,19,0.54,20,0.285,21,0.007,23,1.032,30,0.037,31,0.003,32,0.003,33,0.888,35,1.072,39,1.05,43,0.469,45,1.695,46,1.169,48,1.875,49,0.205,50,0.479,53,0.122,54,1.255,68,0.522,82,1.339,100,3.062,101,1.825,107,2.002,112,0.797,114,1.409,134,1.942,135,1.559,147,3.145,204,2.529,205,0.903,250,1.958,293,2.042,324,1.117,356,2.297,378,1.409,389,2.502,395,3.328,414,4.124,417,2.366,418,2.637,432,1.191,437,1.632,455,1.072,475,1.609,476,2.751,477,1.793,485,2.052,487,2.807,488,2.175,492,2.395,499,1.896,511,1.581,518,3.13,529,2.444,539,2.961,555,2.211,557,4.249,558,4.011,570,2.469,578,2.8,635,1.533,699,3.493,712,1.632,713,1.409,722,4.217,725,3.81,728,2.087,729,1.581,744,3.951,765,3.725,773,4.312,786,2.709,798,1.75,799,1.489,842,0.919,883,0.972,905,2.395,923,1.489,962,2.838,996,2.573,1125,3.434,1127,3.26,1130,2.549,1131,3.137,1133,4.124,1170,1.819,1180,1.896,1181,2.087,1182,1.984,1205,2.366,1209,2.549,1222,2.262,1223,1.275,1228,3.062,1241,3.801,1245,3.26,1254,2.087,1255,1.581,1261,2.574,1340,4.946,1347,1.632,1392,1.688,1397,4.118,1424,2.574,1425,5.552,1426,5.552,1427,5.552,1428,4.512,1429,2.574,1430,4.558,1431,6.275,1432,4.725,1433,2.889,1434,2.889,1435,6.807,1436,2.889,1437,4.512,1438,3.26,1439,5.923,1440,2.889,1441,2.889,1442,2.889,1443,2.889,1444,4.512,1445,2.889,1446,6.275,1447,5.552,1448,1.984,1449,4.02,1450,4.512,1451,3.667,1452,2.211,1453,2.211,1454,4.02,1455,2.211,1456,4.02,1457,2.211,1458,2.087,1459,2.574,1460,1.688,1461,2.087,1462,1.984,1463,2.889,1464,1.688,1465,4.512,1466,4.02,1467,2.889,1468,2.889,1469,5.591,1470,2.889,1471,2.889,1472,2.889,1473,4.512,1474,4.512,1475,4.512,1476,6.807,1477,2.889,1478,4.512,1479,2.889,1480,5.552,1481,2.889,1482,2.889,1483,2.889,1484,4.512,1485,2.574,1486,4.512,1487,4.512,1488,2.889,1489,2.889,1490,2.889,1491,2.889,1492,2.889,1493,2.366,1494,2.889,1495,2.889,1496,2.889,1497,2.889,1498,2.574,1499,2.889,1500,2.574,1501,2.366,1502,2.889,1503,2.889,1504,3.26,1505,1.581,1506,2.211,1507,2.889,1508,2.889,1509,2.889,1510,2.366,1511,1.984,1512,2.366,1513,2.574,1514,4.512,1515,5.591,1516,2.889,1517,2.889,1518,2.889,1519,2.087,1520,2.211,1521,2.889,1522,1.984,1523,4.512,1524,2.211,1525,2.889,1526,2.889,1527,2.889,1528,2.889,1529,4.512]],["title/modules/CryptoImplementatationModule.html",[172,1.502,1530,3.408]],["body/modules/CryptoImplementatationModule.html",[3,0.078,4,0.088,5,0.069,21,0.007,30,0.088,31,0.005,32,0.005,49,0.201,50,1.125,53,0.287,172,2.795,174,2.993,175,3.398,176,3.598,177,3.598,178,3.308,179,4.401,180,4.401,197,4.34,198,3.598,199,3.222,202,3.066,203,5.908,205,2.119,329,6.259,1313,4.449,1432,5.981,1460,3.962,1461,4.898,1530,6.928,1531,6.04,1532,6.04,1533,6.04,1534,4.656,1535,6.78]],["title/interfaces/CryptoImplementation.html",[0,1.258,1536,3.24]],["body/interfaces/CryptoImplementation.html",[0,2.175,2,2.67,3,0.066,4,0.074,5,0.058,9,0.676,13,0.22,14,0.919,17,0.801,19,0.559,20,0.333,21,0.007,23,1.969,30,0.074,31,0.005,32,0.005,39,1.719,43,0.53,45,1.84,46,1.401,48,1.867,356,2.985,389,2.15,471,3.342,488,2.227,798,4.942,799,4.436,1438,6.218,1460,5.029,1485,7.667,1534,5.911,1536,5.076,1537,4.719,1538,6.053,1539,7.39,1540,6.053,1541,5.339,1542,7.048,1543,7.39,1544,7.39,1545,5.762,1546,6.584,1547,5.603,1548,6.584,1549,9.377,1550,5.762,1551,6.587,1552,6.053,1553,6.584,1554,5.762,1555,6.244,1556,6.584,1557,3.957,1558,3.781,1559,4.719,1560,3.627]],["title/injectables/CryptoImplementationService.html",[33,0.928,1432,2.858]],["body/injectables/CryptoImplementationService.html",[3,0.066,4,0.074,5,0.058,13,0.218,17,0.797,20,0.269,21,0.007,30,0.095,31,0.005,32,0.005,33,1.446,35,2.121,39,1.711,43,0.528,45,1.83,46,1.262,48,2.079,49,0.204,50,0.948,53,0.242,54,1.776,112,1.577,124,2.522,204,2.782,205,1.786,388,2.21,389,1.663,418,4.296,477,1.633,487,2.357,488,1.723,552,4.847,799,4.575,835,3.598,837,4.628,842,2.34,1313,5.825,1432,4.454,1438,5.312,1451,3.34,1452,4.374,1453,4.374,1460,5.014,1534,5.893,1536,5.582,1560,5.588,1561,4.681,1562,8.58,1563,8.127,1564,5.716,1565,5.716,1566,7.352,1567,5.716,1568,5.627,1569,7.027,1570,5.716,1571,5.716,1572,7.241,1573,5.312,1574,8.127,1575,6.794,1576,5.716]],["title/modules/CryptoModule.html",[172,1.502,185,2.665]],["body/modules/CryptoModule.html",[3,0.073,4,0.082,5,0.064,21,0.007,30,0.082,31,0.005,32,0.005,49,0.217,50,1.053,53,0.269,159,2.857,172,2.715,174,2.802,175,3.181,176,3.368,177,3.368,178,3.096,179,4.275,180,4.275,185,5.478,197,4.168,198,3.368,199,3.016,202,2.869,431,3.708,432,2.617,699,4.538,850,3.472,1577,5.653,1578,5.653,1579,5.653,1580,6.164,1581,6.346,1582,6.528,1583,5.653,1584,6.346,1585,6.346,1586,5.154,1587,5.653,1588,6.346,1589,5.653]],["title/classes/DBKeyService.html",[53,0.2,1590,3.611]],["body/classes/DBKeyService.html",[3,0.03,4,0.033,5,0.065,7,1.142,9,0.304,13,0.099,14,0.514,16,1.741,17,0.909,19,0.599,20,0.335,21,0.007,22,2.842,23,2.185,24,4.332,30,0.067,31,0.003,32,0.003,37,1.966,39,0.962,43,0.552,45,2.086,46,1.439,48,2.022,49,0.203,53,0.11,54,1.587,57,0.526,65,5.422,68,0.748,112,0.714,114,2.52,204,2.231,205,0.809,239,1.777,250,1.856,293,2.215,355,2.331,356,2.834,378,1.262,389,1.877,412,3.724,413,1.743,414,2.505,418,2.417,475,2.676,476,2.786,477,1.182,485,2.684,487,1.705,488,1.557,522,1.966,529,2.509,540,1.826,654,3.684,698,1.512,699,2.394,712,3.888,713,1.262,725,3.434,798,3.909,816,1.87,842,0.823,850,1.416,875,4.264,1059,2.988,1061,2.714,1130,5.221,1199,2.714,1222,2.073,1223,1.826,1228,3.524,1235,1.297,1252,2.417,1313,4.235,1432,3.575,1451,1.512,1460,2.417,1461,1.869,1464,1.512,1505,3.229,1522,2.84,1536,3.548,1547,2.84,1551,3.165,1552,2.119,1557,4.432,1558,5.318,1572,2.305,1586,1.698,1590,3.165,1591,6.436,1592,2.305,1593,2.84,1594,5.566,1595,4.603,1596,4.136,1597,4.136,1598,6.685,1599,3.387,1600,4.517,1601,3.684,1602,3.684,1603,4.834,1604,4.231,1605,4.136,1606,3.387,1607,2.587,1608,4.136,1609,4.517,1610,2.305,1611,2.587,1612,3.165,1613,4.136,1614,2.587,1615,2.988,1616,4.834,1617,4.136,1618,6.453,1619,2.587,1620,3.873,1621,5.258,1622,2.587,1623,2.587,1624,2.587,1625,3.684,1626,3.715,1627,2.587,1628,4.136,1629,2.587,1630,2.604,1631,3.684,1632,2.587,1633,3.684,1634,4.264,1635,5.902,1636,2.587,1637,2.305,1638,2.587,1639,1.869,1640,5.902,1641,3.684,1642,2.587,1643,4.231,1644,1.334,1645,1.777,1646,3.387,1647,1.98,1648,1.777,1649,2.119,1650,1.98,1651,1.98,1652,2.305,1653,2.119,1654,2.587,1655,2.587,1656,2.587,1657,2.587,1658,4.603,1659,6.453,1660,2.119,1661,2.587,1662,4.136,1663,2.587,1664,2.587,1665,2.587,1666,2.587,1667,2.587,1668,2.587,1669,2.587,1670,2.587,1671,2.119,1672,2.587,1673,2.587,1674,2.587,1675,2.587,1676,2.587,1677,5.166,1678,2.587,1679,2.587,1680,2.587,1681,2.587,1682,2.587,1683,2.305,1684,2.587,1685,2.305,1686,2.587,1687,2.305,1688,5.166,1689,4.136,1690,3.684,1691,4.136,1692,2.587,1693,2.587,1694,2.587,1695,2.587,1696,2.587,1697,2.587]],["title/classes/DCQL.html",[53,0.2,919,2.858]],["body/classes/DCQL.html",[3,0.045,4,0.051,5,0.04,7,1.735,9,0.668,12,2.244,13,0.15,14,0.707,16,1.649,17,0.725,19,0.563,20,0.338,21,0.007,25,2.069,26,1.821,27,1.519,28,2.154,30,0.108,31,0.004,32,0.004,43,0.37,49,0.192,53,0.37,57,0.799,62,2.029,63,0.96,68,1.64,70,1.163,71,4.045,73,1.551,74,2.942,75,2.283,76,2.662,77,0.945,78,1.969,79,3.673,80,3.673,89,4.009,95,2.511,101,1.945,107,1.323,118,2.398,120,0.995,122,2.154,124,1.348,128,2.029,134,1.374,143,2.432,144,1.274,221,1.695,255,2.894,269,2.15,293,0.945,313,4.353,324,1.519,346,1.274,413,1.693,441,2.481,455,1.458,468,4.303,469,1.867,470,2.585,471,1.776,473,2.15,537,2.296,569,1.656,578,1.81,601,2.296,630,1.917,634,4.44,643,1.776,804,2.22,810,2.22,823,2.085,842,1.25,849,1.945,855,1.776,856,2.025,857,3.112,858,3.324,860,3.324,861,1.867,864,3.576,866,2.345,869,2.398,870,1.656,872,1.656,873,1.374,877,3.324,879,2.22,880,2.22,881,1.62,882,2.398,883,1.322,884,1.656,885,2.884,886,4.209,887,2.296,892,2.851,893,3.658,894,3.733,895,3.019,896,3.777,897,2.578,898,4.388,899,2.473,900,4.05,901,2.578,902,4.81,903,4.81,904,4.81,905,4.128,906,4.283,907,4.388,908,2.578,909,2.578,910,4.05,911,2.578,912,2.578,913,2.578,914,2.578,915,2.085,916,2.578,917,2.578,918,3.214,919,4.712,920,4.388,921,2.085,922,2.578,923,2.932,924,2.578,925,2.578,926,2.085,927,3.396,928,2.38,929,2.296,930,2.22,931,2.38,932,2.025,933,2.578,1366,3.5,1698,3.929,1699,3.929,1700,3.929]],["title/modules/DatabaseModule.html",[172,1.502,186,3.408]],["body/modules/DatabaseModule.html",[3,0.074,4,0.083,5,0.065,20,0.29,21,0.007,30,0.083,31,0.005,32,0.005,49,0.205,50,1.066,53,0.272,54,1.583,68,1.43,172,2.519,174,2.837,186,5.718,202,3.579,203,5.718,204,2.902,205,2.008,220,4.33,221,2.772,248,4.413,249,4.918,250,1.781,252,5.263,304,5.725,431,3.755,432,2.65,1524,4.918,1701,6.426,1702,7.914,1703,6.426,1704,7.914,1705,5.725,1706,8.577,1707,6.426,1708,6.426,1709,7.051,1710,6.426,1711,5.725,1712,6.426,1713,5.725,1714,6.426,1715,5.263,1716,6.426,1717,6.482,1718,6.426,1719,5.725,1720,6.426]],["title/classes/Display.html",[53,0.2,1186,2.504]],["body/classes/Display.html",[3,0.045,4,0.05,5,0.039,9,0.854,13,0.148,14,0.7,16,0.87,17,0.925,19,0.577,20,0.339,21,0.007,23,0.885,25,1.407,28,2.131,30,0.094,31,0.004,32,0.004,43,0.541,46,1.429,49,0.203,53,0.361,56,3.627,57,0.787,59,2.186,60,3.627,61,4.252,63,1.405,68,1.617,70,1.666,74,2.901,75,2.417,76,2.715,77,1.354,82,1.793,84,1.38,85,2.186,86,2.186,90,3.627,97,3.627,100,1.888,101,1.636,103,3.981,112,2.008,117,3.287,118,2.372,119,2.261,120,0.98,122,2.51,135,1.087,148,2.261,149,4.252,152,3.287,153,2.053,154,2.261,155,2.261,254,2.426,293,0.931,378,1.888,413,1.424,441,2.46,455,1.436,582,1.496,677,2.795,773,3.322,842,1.79,849,1.636,850,3.627,864,4.061,866,2.319,869,3.068,870,2.372,872,1.631,873,1.353,881,1.595,882,2.795,883,1.302,884,1.631,885,2.859,892,2.819,893,3.627,895,2.985,923,1.994,926,2.053,927,3.738,962,2.544,1125,2.117,1126,2.795,1127,2.795,1128,2.795,1129,2.795,1130,2.186,1131,2.186,1132,2.961,1133,4.408,1137,4.552,1147,2.961,1148,2.961,1149,2.961,1150,2.961,1151,2.795,1152,2.961,1153,2.961,1154,2.961,1155,2.961,1156,2.961,1157,2.961,1160,2.961,1170,4.173,1178,4.064,1179,2.961,1180,2.539,1181,2.795,1182,2.657,1183,2.961,1184,5.717,1185,1.888,1186,4.103,1187,4.35,1188,5.073,1189,5.073,1190,5.073,1191,4.35,1192,4.064,1193,2.961,1194,2.961,1195,2.961,1196,2.961,1197,2.961,1198,2.344,1199,2.539,1721,3.869,1722,4.305,1723,3.869,1724,3.869,1725,3.869,1726,3.869,1727,3.869,1728,3.869]],["title/controllers/DisplayController.html",[157,1.448,1729,3.611]],["body/controllers/DisplayController.html",[3,0.063,4,0.07,5,0.055,9,0.933,13,0.208,17,0.773,20,0.261,21,0.007,30,0.07,31,0.005,32,0.005,39,1.659,43,0.463,45,1.775,46,1.225,48,1.928,49,0.206,50,0.905,53,0.231,54,1.426,63,1.204,120,1.381,157,2.587,159,1.984,168,4.761,288,3.745,325,3.543,355,2.816,372,4.217,388,2.109,389,2.451,424,2.894,471,3.225,483,4.133,488,2.15,522,4.006,604,2.661,647,2.109,861,3.39,1186,5.14,1260,3.746,1386,3.304,1387,3.304,1388,3.433,1389,3.433,1393,3.433,1394,3.304,1505,4.611,1729,5.458,1730,4.859,1731,7.946,1732,7.131,1733,5.454,1734,7.792,1735,6.089,1736,5.454,1737,5.454,1738,5.454,1739,5.789,1740,5.454,1741,4.859,1742,5.454,1743,5.454,1744,5.454,1745,5.454]],["title/classes/DisplayCreateDto.html",[53,0.2,1735,3.408]],["body/classes/DisplayCreateDto.html",[3,0.084,4,0.094,5,0.074,21,0.007,30,0.094,31,0.006,32,0.006,37,4.059,49,0.196,53,0.309,57,1.483,120,1.847,250,1.921,413,2.162,1202,5.581,1204,5.008,1735,6.17,1746,6.497,1747,8.539,1748,4.591,1749,6.497]],["title/entities/DisplayEntity.html",[849,1.372,1748,2.97]],["body/entities/DisplayEntity.html",[3,0.068,4,0.076,5,0.06,13,0.226,14,0.934,19,0.551,20,0.335,21,0.007,30,0.097,31,0.005,32,0.005,43,0.537,46,1.016,49,0.206,53,0.38,63,1.394,68,1.571,70,1.751,75,2.238,76,2.629,77,1.423,112,2.279,120,1.498,144,1.918,168,3.988,293,1.988,413,2.271,441,3.225,849,2.186,851,2.811,866,3.098,868,3.341,869,3.664,870,3.168,872,3.168,873,2.628,881,2.439,882,3.168,883,1.991,884,2.494,885,2.551,892,3.766,927,2.741,1175,4.527,1186,3.988,1187,3.881,1191,3.881,1748,4.73,1750,4.527,1751,5.914,1752,5.914,1753,6.278,1754,5.914,1755,5.914,1756,5.967]],["title/classes/DisplayImage.html",[53,0.2,1184,3.24]],["body/classes/DisplayImage.html",[3,0.048,4,0.054,5,0.042,9,0.698,13,0.159,14,0.739,16,0.94,19,0.569,20,0.324,21,0.007,23,0.956,25,1.519,28,2.251,30,0.097,31,0.004,32,0.004,43,0.271,46,1.368,49,0.206,53,0.369,56,3.786,57,0.85,59,2.36,60,3.786,61,4.405,63,0.705,68,1.643,70,1.76,74,2.947,75,2.384,76,2.771,77,1.43,82,1.936,84,1.49,85,2.36,86,2.36,90,3.786,97,3.786,100,2.038,101,1.729,103,4.124,112,2.08,117,3.474,118,2.506,119,2.441,120,1.058,122,2.621,135,1.173,148,2.441,149,4.405,152,3.474,153,2.217,154,2.441,155,2.441,254,2.564,293,1.005,378,2.038,413,1.505,441,2.568,455,1.55,582,1.615,677,3.018,773,3.468,842,1.892,849,1.729,850,3.786,864,4.155,866,2.451,869,3.178,870,2.506,872,1.761,873,1.461,881,1.722,882,2.917,883,1.406,884,1.761,885,2.985,892,2.979,893,3.786,895,3.154,923,2.153,926,2.217,927,3.836,962,2.688,1125,2.285,1126,3.018,1127,3.018,1128,3.018,1129,3.018,1130,2.36,1131,2.36,1132,3.197,1133,4.566,1137,4.752,1147,3.197,1148,3.197,1149,3.197,1150,3.197,1151,3.018,1152,3.197,1153,3.197,1154,3.197,1155,3.197,1156,3.197,1157,3.197,1160,3.197,1170,4.356,1178,4.294,1179,3.197,1180,2.741,1181,3.018,1182,2.869,1183,3.197,1184,5.686,1185,3.376,1186,4.001,1187,2.741,1188,3.197,1189,3.197,1190,3.197,1191,2.741,1192,4.294,1193,3.197,1194,3.197,1195,3.197,1196,3.197,1197,3.197,1198,2.53,1199,2.741,1757,4.177]],["title/classes/DisplayInfo.html",[53,0.2,1753,3.408]],["body/classes/DisplayInfo.html",[3,0.069,4,0.078,5,0.061,13,0.23,14,0.945,19,0.566,20,0.337,21,0.007,30,0.098,31,0.005,32,0.005,43,0.541,46,1.43,49,0.207,53,0.382,57,1.225,63,1.406,68,1.374,70,1.784,75,2.373,76,2.651,77,1.45,112,1.663,120,1.525,144,1.953,168,3.197,293,1.45,413,1.925,441,3.091,849,2.211,866,2.484,869,3.205,870,2.54,872,2.54,873,2.107,881,2.484,882,3.205,883,2.028,884,2.54,885,2.598,892,3.81,927,2.792,1186,3.197,1187,5.466,1191,5.466,1722,4.611,1748,3.792,1750,4.611,1753,6.321,1756,6.321,1758,6.024,1759,6.024,1760,6.024]],["title/classes/DisplayLogo.html",[53,0.2,1756,3.408]],["body/classes/DisplayLogo.html",[3,0.072,4,0.08,5,0.063,13,0.238,14,0.966,19,0.56,20,0.324,21,0.007,30,0.1,31,0.005,32,0.005,43,0.405,46,1.071,49,0.209,53,0.386,57,1.268,63,1.052,68,1.404,70,1.846,75,2.347,76,2.693,77,1.5,112,1.721,120,1.579,144,2.743,168,3.309,293,1.5,413,1.967,441,3.14,849,2.259,866,2.571,869,3.275,870,2.629,872,2.629,873,2.181,881,2.571,882,3.275,883,2.099,884,2.629,885,2.689,892,3.893,927,2.889,1186,3.309,1187,4.092,1191,4.092,1748,3.925,1750,4.772,1753,6.113,1756,6.399,1761,6.235]],["title/injectables/DisplayService.html",[33,0.928,1739,3.24]],["body/injectables/DisplayService.html",[3,0.062,4,0.07,5,0.055,9,0.929,13,0.206,16,1.89,17,0.859,19,0.55,20,0.29,21,0.007,30,0.07,31,0.005,32,0.005,33,1.396,35,2.009,39,1.651,43,0.515,45,1.971,46,1.36,48,1.923,49,0.2,50,0.898,53,0.229,54,1.419,168,4.752,250,1.218,288,3.249,293,2.196,356,2.675,389,2.444,413,2.267,432,2.232,471,3.209,475,2.997,477,2.028,485,1.631,488,2.139,647,2.093,861,3.373,883,1.822,1186,5.135,1228,4.1,1239,6.322,1255,2.961,1260,3.717,1505,4.992,1606,4.433,1734,7.773,1735,6.071,1739,4.874,1741,4.822,1748,4.467,1749,4.822,1762,4.822,1763,5.412,1764,5.412,1765,7.917,1766,5.412,1767,5.412,1768,5.412,1769,5.412,1770,5.412,1771,5.412]],["title/classes/EC_Public.html",[53,0.2,1620,3.096]],["body/classes/EC_Public.html",[3,0.063,4,0.07,5,0.055,9,0.64,13,0.208,14,0.887,19,0.551,20,0.32,21,0.007,22,3.583,23,2.206,25,2.891,30,0.092,31,0.005,32,0.005,43,0.548,49,0.125,53,0.357,57,1.109,95,3.508,124,2.447,130,2.594,322,3.508,323,4.814,324,2.109,330,3.187,346,1.768,412,4.711,459,3.187,469,2.592,492,3.785,552,4.029,600,4.859,663,5.458,725,4.157,833,4.898,1332,5.74,1335,4.814,1560,4.489,1620,4.68,1644,2.811,1648,6.007,1772,7.508,1773,6.45,1774,7.379,1775,7.079,1776,5.741,1777,6.082,1778,6.694,1779,6.694,1780,5.454,1781,6.353,1782,5.841,1783,6.353,1784,5.454,1785,6.45,1786,4.859,1787,3.746]],["title/classes/EmbeddedDisclosurePolicy.html",[53,0.2,60,2.581]],["body/classes/EmbeddedDisclosurePolicy.html",[3,0.064,4,0.071,5,0.056,13,0.211,14,0.894,19,0.52,20,0.335,21,0.007,30,0.118,31,0.005,32,0.005,37,4.025,43,0.359,49,0.183,53,0.394,56,3.021,57,1.123,58,3.476,59,4.516,60,4.925,61,5.357,62,2.851,63,0.932,68,1.587,70,1.635,71,4.069,72,5.762,73,2.18,74,2.592,75,2.42,76,2.795,77,1.329,78,4.007,79,4.007,80,4.007,81,3.792,82,2.559,83,3.476,84,2.851,85,4.516,86,4.516,87,3.792,88,5.816,89,4.526,90,3.021,91,3.792,92,3.792,93,3.021,94,3.623,95,2.438,96,3.623,97,3.021,98,3.021,99,5.032,100,2.694,101,1.606,102,3.792,103,3.021,104,3.792,1788,5.521]],["title/injectables/EncryptionService.html",[33,0.928,1580,2.97]],["body/injectables/EncryptionService.html",[3,0.048,4,0.054,5,0.042,9,0.936,13,0.16,16,1.994,17,0.865,19,0.583,20,0.303,21,0.007,22,3.139,23,1.951,30,0.054,31,0.004,32,0.004,33,1.172,35,1.556,39,1.386,43,0.518,45,2.063,46,1.37,48,1.896,49,0.19,50,0.695,53,0.177,54,1.387,68,0.758,204,1.359,250,1.56,293,2.245,295,2.368,322,2.631,323,3.61,346,2.915,356,2.539,368,3.26,389,2.411,412,4.491,413,2.362,432,1.728,475,2.125,476,2.874,477,2.158,485,1.263,509,2.294,529,2.448,656,4.88,725,3.295,1223,3.061,1225,4.093,1228,3.683,1234,3.071,1235,4.154,1241,3.61,1246,4.093,1255,2.294,1396,4.561,1501,3.433,1522,4.093,1542,3.433,1558,3.91,1568,4.561,1580,4.753,1586,3.91,1587,3.734,1604,4.88,1630,3.751,1641,3.734,1643,3.433,1644,2.161,1645,2.879,1646,4.88,1647,3.208,1658,5.309,1690,3.734,1776,3.029,1789,3.734,1790,3.91,1791,9.185,1792,5.959,1793,5.959,1794,5.959,1795,4.88,1796,4.192,1797,4.192,1798,5.959,1799,4.192,1800,4.192,1801,5.959,1802,7.55,1803,6.983,1804,5.959,1805,5.959,1806,4.192,1807,4.192,1808,4.88,1809,4.192,1810,4.192,1811,4.192,1812,4.192,1813,5.309,1814,3.734,1815,3.734,1816,4.192,1817,4.192,1818,5.678,1819,4.192,1820,5.959,1821,4.192,1822,3.734,1823,4.192,1824,4.192,1825,4.192,1826,4.192,1827,4.192]],["title/entities/FileEntity.html",[849,1.372,1828,3.408]],["body/entities/FileEntity.html",[3,0.073,4,0.082,5,0.065,13,0.243,14,0.98,16,2.064,19,0.549,20,0.313,21,0.007,23,1.803,30,0.082,31,0.005,32,0.005,43,0.556,49,0.181,53,0.27,63,1.443,68,1.614,293,2.057,413,2.398,441,3.314,849,2.292,851,3.032,862,4.187,866,3.249,868,3.604,869,3.765,870,3.322,872,3.322,873,2.756,881,2.631,882,3.322,883,2.147,884,2.69,885,2.752,1828,5.693,1829,5.684,1830,7.002,1831,6.38,1832,6.38,1833,6.38]],["title/interfaces/FileStorage.html",[0,1.258,1834,3.096]],["body/interfaces/FileStorage.html",[0,1.458,2,2.535,3,0.063,4,0.071,5,0.055,13,0.209,17,1.006,19,0.607,20,0.335,21,0.007,22,2.707,23,2.146,30,0.109,31,0.005,32,0.005,39,1.663,43,0.569,45,2.179,46,1.503,48,2.003,49,0.126,144,2.58,250,1.231,355,3.143,356,3.013,455,2.03,485,1.649,507,4.48,519,4.498,712,3.091,962,3.231,1223,3.155,1252,4.176,1336,3.91,1834,4.689,1835,4.187,1836,6.366,1837,6.091,1838,6.091,1839,5.469,1840,5.47,1841,5.853,1842,5.47,1843,4.873,1844,5.47,1845,4.187,1846,5.47,1847,4.48,1848,5.75,1849,6.458,1850,6.518,1851,6.096,1852,5.47,1853,3.952,1854,4.498,1855,4.48,1856,4.873,1857,5.47,1858,3.757,1859,5.47,1860,5.47,1861,4.873,1862,4.187,1863,5.47,1864,5.47,1865,5.47,1866,4.187,1867,3.952,1868,4.873]],["title/classes/FileUploadDto.html",[53,0.2,1869,3.611]],["body/classes/FileUploadDto.html",[3,0.083,4,0.093,5,0.094,13,0.274,14,1.053,19,0.52,20,0.31,21,0.006,25,3.08,30,0.093,31,0.006,32,0.006,43,0.467,49,0.165,53,0.304,57,1.462,63,1.214,118,3.57,120,1.821,1368,5.888,1869,6.481,1870,7.544,1871,6.405,1872,6.936,1873,7.189]],["title/injectables/FilesService.html",[33,0.928,1874,3.096]],["body/injectables/FilesService.html",[3,0.045,4,0.05,5,0.098,9,0.859,13,0.149,16,1.747,17,0.878,19,0.571,20,0.296,21,0.007,22,1.482,23,2.026,26,3.389,27,2.828,30,0.05,31,0.004,32,0.004,33,1.115,35,1.452,39,1.319,43,0.526,45,2.016,46,1.39,48,1.957,49,0.196,50,0.649,53,0.166,54,1.553,94,2.567,112,1.079,144,1.838,204,2.708,205,1.222,221,1.687,248,2.686,250,1.821,254,2.446,255,1.545,288,2.192,293,2.059,300,6.197,346,1.268,356,2.577,389,2.355,413,2.05,414,3.435,432,1.613,476,2.625,477,1.62,485,2.205,488,1.179,529,2.625,632,2.567,842,1.245,883,1.317,1102,2.826,1216,4.8,1223,2.503,1228,3.568,1234,3.77,1235,2.842,1236,5.99,1241,3.435,1254,4.097,1255,2.14,1281,4.888,1313,2.567,1336,3.649,1464,2.286,1828,2.826,1834,4.8,1837,4.34,1839,4.34,1845,4.34,1849,5.598,1853,5.284,1854,2.462,1855,3.204,1856,5.051,1858,2.686,1867,2.826,1874,3.721,1875,3.485,1876,5.67,1877,5.67,1878,6.669,1879,3.911,1880,6.669,1881,3.911,1882,3.911,1883,5.99,1884,5.67,1885,3.911,1886,5.67,1887,5.67,1888,3.911,1889,3.911,1890,3.911,1891,5.942,1892,6.359,1893,3.911,1894,5.67,1895,5.67,1896,5.67,1897,5.051,1898,4.097,1899,5.67,1900,5.67,1901,3.911,1902,3.911,1903,3.485,1904,3.911,1905,3.911,1906,5.67,1907,3.911,1908,3.911,1909,3.911,1910,3.204,1911,3.911,1912,3.911,1913,3.911,1914,3.911,1915,3.911,1916,3.911,1917,3.911,1918,3.911,1919,3.911,1920,3.911,1921,3.911,1922,3.911,1923,3.911,1924,3.911,1925,3.911,1926,3.911,1927,3.204,1928,3.911,1929,3.911,1930,3.911,1931,3.911,1932,3.911]],["title/interfaces/GenerateTokenOptions.html",[0,1.258,1933,3.611]],["body/interfaces/GenerateTokenOptions.html",[0,1.304,2,2.267,3,0.056,4,0.063,5,0.05,13,0.187,14,0.825,17,0.943,19,0.57,20,0.275,21,0.007,28,1.853,30,0.086,31,0.004,32,0.004,33,1.305,49,0.194,50,0.812,53,0.207,54,1.506,93,2.677,204,2.441,205,1.529,250,2.064,256,2.452,269,2.677,325,3.435,338,2.522,345,2.964,356,2.112,359,5.543,368,4.119,388,1.892,408,3.36,425,3.211,447,4.793,475,1.745,476,2.151,483,3.404,484,3.211,487,3.104,488,2.622,489,3.535,490,6.61,491,6.177,492,2.597,499,3.211,509,4.119,511,2.677,522,4.01,527,6.909,529,2.151,532,5.543,540,3.323,751,3.211,786,3.937,799,2.522,802,5.081,816,3.404,842,1.557,996,2.267,1098,3.211,1314,3.211,1541,3.535,1600,5.078,1615,3.535,1644,2.522,1933,5.761,1934,4.007,1935,4.007,1936,4.359,1937,4.359,1938,4.359,1939,4.359,1940,4.007,1941,4.007,1942,4.359,1943,5.911,1944,5.911,1945,5.911,1946,5.911,1947,4.359,1948,4.359,1949,6.706,1950,5.911,1951,4.359,1952,5.434,1953,4.359,1954,4.359,1955,4.359,1956,4.007,1957,4.359,1958,4.359,1959,4.359,1960,4.359,1961,4.007,1962,4.359,1963,4.007,1964,4.359,1965,4.359,1966,3.745,1967,4.359,1968,4.007]],["title/controllers/HealthController.html",[157,1.448,1969,3.611]],["body/controllers/HealthController.html",[3,0.074,4,0.083,5,0.065,9,0.756,13,0.246,21,0.007,30,0.083,31,0.005,32,0.005,39,1.843,43,0.418,48,1.813,49,0.182,50,1.068,53,0.273,54,1.288,63,1.087,157,1.976,159,2.342,256,4.803,331,4.335,475,2.826,477,1.84,485,2.388,604,3.14,607,6.064,1593,5.442,1717,6.489,1969,6.855,1970,5.735,1971,9.364,1972,7.923,1973,7.059,1974,8.957,1975,7.923,1976,7.059,1977,7.923,1978,6.437,1979,6.437,1980,7.923,1981,7.923,1982,5.272,1983,6.437,1984,6.437,1985,6.437,1986,6.437]],["title/modules/HealthModule.html",[172,1.502,187,3.408]],["body/modules/HealthModule.html",[3,0.084,4,0.094,5,0.074,21,0.007,30,0.094,31,0.006,32,0.006,49,0.208,50,1.21,53,0.309,159,3.106,172,2.718,174,3.22,187,6.17,202,3.297,1969,6.931,1982,5.973,1987,7.292,1988,8.539,1989,7.292]],["title/entities/IssuanceConfig.html",[773,2.364,849,1.372]],["body/entities/IssuanceConfig.html",[3,0.04,4,0.045,5,0.035,9,0.909,12,1.805,13,0.132,14,0.643,16,1.659,17,0.932,19,0.476,20,0.335,21,0.007,26,2.397,27,2,28,1.959,29,4.237,30,0.045,31,0.003,32,0.003,43,0.574,46,1.065,49,0.189,53,0.263,63,1.492,68,1.677,70,1.023,74,2.51,75,1.597,76,2.192,77,0.831,100,2.524,101,1.505,107,1.921,109,2.284,112,2.215,117,3.023,118,2.181,119,2.018,120,0.874,128,2.456,134,1.809,135,1.934,143,2.92,145,3.023,148,2.018,149,3.624,152,3.023,153,1.833,154,2.018,155,3.023,284,1.641,293,1.493,337,3.553,346,1.677,413,2.033,441,2.556,455,1.92,468,3.655,560,4.468,569,1.456,578,2.192,582,3.544,583,4.874,584,4.468,587,4.69,588,2.174,773,2.593,779,3.737,842,2.627,849,2.003,851,1.641,853,4.608,855,2.804,856,3.197,857,3.768,858,3.624,860,4.025,861,2.459,864,3.777,866,2.84,868,1.951,869,2.904,870,2.181,872,2.181,873,1.809,877,3.624,879,2.922,880,2.922,881,1.424,882,2.181,883,1.162,884,1.456,885,2.675,887,2.018,889,3.077,892,2.593,893,2.83,895,2.745,926,1.833,927,2.874,932,2.666,996,1.6,1125,3.768,1140,3.077,1144,2.829,1159,3.077,1171,4.237,1175,2.643,1178,3.737,1192,2.495,1214,4.747,1237,3.737,1245,3.737,1350,4.608,1358,3.133,1359,4.608,1365,3.077,1898,3.737,1990,7.962,1991,6.202,1992,6.202,1993,4.481,1994,6.202,1995,5.525,1996,3.453,1997,3.453,1998,3.077,1999,4.52,2000,3.453,2001,4.608,2002,3.453,2003,3.453,2004,3.453,2005,5.173,2006,5.173,2007,5.173,2008,3.453,2009,3.453,2010,3.453,2011,3.453,2012,3.453,2013,3.453,2014,3.453,2015,3.453,2016,5.173,2017,2.829,2018,3.453,2019,3.453,2020,3.453,2021,3.453,2022,3.453,2023,3.453,2024,3.453,2025,3.453,2026,3.453]],["title/controllers/IssuanceController.html",[157,1.448,2027,3.611]],["body/controllers/IssuanceController.html",[3,0.062,4,0.07,5,0.055,13,0.206,16,1.887,17,0.857,19,0.485,20,0.289,21,0.007,30,0.07,31,0.005,32,0.005,39,1.646,43,0.513,45,1.967,46,1.356,48,2.116,49,0.205,50,0.894,53,0.228,54,1.58,63,1.333,107,1.952,120,1.364,135,2.356,157,1.653,159,1.96,288,3.575,325,3.119,355,2.794,372,4.192,376,3.536,388,2.083,389,2.298,413,2.124,424,2.859,483,4.269,540,2.379,582,3.458,604,2.628,647,2.083,701,4.785,1209,3.997,1212,5.761,1223,2.379,1234,3.647,1250,5.112,1376,6.47,1379,4.8,1380,3.7,1386,3.264,1387,3.264,1388,3.392,1389,3.392,1391,4.413,1392,3.149,1393,3.392,1394,3.264,1395,4.413,1401,3.7,1402,4.124,2027,5.415,2028,4.8,2029,7.075,2030,7.075,2031,7.038,2032,5.388,2033,5.388,2034,5.388,2035,5.388,2036,5.388,2037,4.8,2038,5.388,2039,5.388,2040,5.388,2041,5.388,2042,3.536,2043,5.388]],["title/classes/IssuanceDto.html",[53,0.2,1212,3.24]],["body/classes/IssuanceDto.html",[3,0.072,4,0.081,5,0.063,9,0.733,13,0.238,14,0.967,16,1.405,19,0.52,20,0.228,21,0.007,26,2.894,27,2.415,30,0.1,31,0.005,32,0.005,37,3.696,43,0.406,49,0.194,53,0.359,57,1.27,63,1.054,71,3.924,75,2.003,77,1.503,82,2.894,107,1.97,120,1.582,250,1.749,293,1.871,413,1.969,460,4.949,578,2.821,582,3.525,773,3.13,855,3.516,856,4.008,1204,4.29,1206,4.78,1207,5.115,1208,6.936,1209,5.151,1211,5.115,1212,5.341,1213,6.928,1214,5.952,1215,5.952,1216,5.103,1217,7.544,2044,6.246]],["title/injectables/IssuanceService.html",[33,0.928,701,2.858]],["body/injectables/IssuanceService.html",[3,0.033,4,0.037,5,0.069,9,0.339,13,0.11,16,1.802,17,0.782,19,0.569,20,0.264,21,0.007,22,2.101,30,0.037,31,0.003,32,0.003,33,0.886,35,1.07,39,1.459,43,0.507,45,1.795,46,1.238,48,2.012,49,0.213,50,0.478,53,0.235,54,1.442,68,0.815,70,0.854,77,0.694,82,1.337,101,1.311,107,1.459,112,1.99,130,1.049,135,2.025,153,1.531,204,2.442,205,0.901,217,1.816,218,1.893,220,2.466,221,1.944,250,2.065,254,2.934,256,1.446,263,2.084,269,1.578,293,2.169,303,4.915,324,1.115,334,3.691,349,2.084,356,1.434,389,2.33,413,1.908,432,1.189,475,1.607,476,2.75,477,1.792,485,2.35,511,1.578,522,2.636,529,2.657,578,2.295,582,3.365,630,2.706,699,3.491,701,3.798,713,1.407,729,1.578,773,2.78,816,1.304,883,0.971,948,1.685,951,2.636,962,1.304,990,2.957,1089,1.893,1125,2.466,1209,4.793,1211,2.362,1212,5.174,1214,4.245,1218,4.115,1220,2.084,1222,2.259,1223,2.449,1225,3.095,1226,3.664,1228,3.059,1229,4.53,1234,2.323,1235,2.259,1245,3.256,1246,3.095,1251,4.007,1252,3.664,1255,1.578,1256,2.362,1257,2.084,1258,2.362,1262,2.084,1263,2.084,1264,3.691,1266,4.799,1267,2.362,1268,2.084,1269,3.256,1270,2.084,1271,2.084,1272,2.084,1273,2.084,1274,4.543,1275,3.798,1276,2.362,1277,2.362,1278,3.095,1279,2.362,1280,5.443,1281,2.837,1282,2.362,1283,2.207,1284,2.362,1285,2.362,1286,4.543,1288,3.691,1289,2.362,1290,2.207,1291,2.362,1292,2.362,1294,2.362,1295,3.691,1297,2.362,1298,2.362,1299,2.207,1300,2.362,1301,2.362,1302,2.207,1303,2.362,1304,2.362,1308,2.084,1309,2.73,1310,2.362,1311,2.084,1312,4.543,1314,1.893,1315,1.893,1317,2.362,1320,2.569,1325,2.084,1326,2.362,1328,4.015,1376,3.691,1390,2.362,1464,2.634,1540,2.362,1573,4.53,1616,4.543,2017,2.362,2031,4.015,2037,2.569,2045,2.569,2046,4.506,2047,5.546,2048,4.952,2049,2.884,2050,6.27,2051,2.884,2052,5.546,2053,4.506,2054,2.884,2055,4.506,2056,2.884,2057,2.884,2058,2.884,2059,6.27,2060,2.884,2061,2.884,2062,2.884,2063,4.506,2064,2.884,2065,4.015,2066,2.569,2067,2.884,2068,2.884,2069,2.884,2070,2.569,2071,2.884,2072,2.884,2073,5.546,2074,2.884,2075,2.884,2076,2.884,2077,2.884,2078,5.546,2079,2.362,2080,4.941,2081,4.506,2082,2.884,2083,2.884,2084,4.506,2085,2.884,2086,2.884,2087,2.884,2088,4.506,2089,2.884,2090,2.884,2091,2.884,2092,4.941,2093,2.884,2094,2.569,2095,2.569,2096,2.884,2097,2.884,2098,2.884,2099,4.506,2100,2.884,2101,2.884,2102,2.884,2103,2.884]],["title/controllers/IssuerManagementController.html",[157,1.448,2104,3.611]],["body/controllers/IssuerManagementController.html",[3,0.052,4,0.058,5,0.046,9,0.528,13,0.172,17,0.488,19,0.276,20,0.33,21,0.007,25,1.636,30,0.058,31,0.004,32,0.004,39,1.457,43,0.292,45,1.12,46,0.772,48,1.029,49,0.207,50,0.746,53,0.19,62,1.604,63,0.759,84,1.604,93,2.461,100,2.194,112,2.149,120,1.139,145,2.629,156,1.897,157,1.38,159,1.636,168,2.387,208,2.541,250,1.409,255,1.776,288,3.166,291,4.21,295,4.626,322,3.18,324,1.739,325,2.473,333,2.034,343,4.524,346,2.921,355,3.503,372,2.387,373,4.524,375,5.129,376,2.952,388,1.739,389,1.821,392,5.961,395,2.765,409,3.25,416,4.007,424,2.387,475,2.233,476,2.335,483,3.522,492,2.387,518,2.19,529,2.03,540,1.986,572,3.713,578,1.993,604,2.194,643,2.831,647,1.739,655,3.684,676,5.111,819,3.443,831,4.109,832,4.903,873,1.573,1094,3.942,1131,3.538,1185,3.055,1386,2.725,1387,2.725,1388,2.832,1389,2.832,1391,3.684,1392,4.21,1393,2.832,1394,2.725,1395,3.684,1505,3.426,1615,3.25,1848,3.25,1872,3.684,2042,2.952,2104,4.793,2105,5.129,2106,5.129,2107,4.007,2108,6.417,2109,4.007,2110,6.266,2111,4.007,2112,5.579,2113,4.727,2114,4.007,2115,4.498,2116,4.498,2117,4.498,2118,3.684,2119,4.727,2120,4.535,2121,3.25,2122,3.089,2123,3.684,2124,4.498,2125,4.007,2126,4.007,2127,5.579,2128,3.443,2129,6.939,2130,4.007,2131,5.9,2132,4.007,2133,6.939,2134,6.267,2135,4.007,2136,4.498,2137,4.498,2138,4.498,2139,4.498,2140,4.498,2141,4.498,2142,4.498,2143,3.684,2144,4.498,2145,4.498,2146,4.498,2147,4.007,2148,4.498,2149,4.007,2150,4.498,2151,4.007,2152,4.007,2153,4.007,2154,4.007,2155,4.007,2156,4.007,2157,4.007]],["title/interfaces/IssuerMetadata.html",[0,1.258,2158,3.408]],["body/interfaces/IssuerMetadata.html",[0,2.297,2,3.01,3,0.075,4,0.084,5,0.066,9,0.763,13,0.248,14,0.991,19,0.53,20,0.329,21,0.007,22,3.018,23,1.823,27,3.081,30,0.084,31,0.005,32,0.005,49,0.149,144,2.583,322,3.518,323,4.826,324,3.081,330,5.555,412,4.631,467,6.098,469,3.787,473,4.359,540,4.296,725,3.787,1334,5.32,1336,4.359,1347,3.67,1354,7.098,1644,3.348,2158,5.756,2159,5.787]],["title/classes/IssuerMetadataCredentialConfig.html",[53,0.2,1137,3.24]],["body/classes/IssuerMetadataCredentialConfig.html",[3,0.047,4,0.053,5,0.041,9,0.685,13,0.155,14,0.726,16,0.916,17,0.633,19,0.571,20,0.331,21,0.007,23,0.932,25,2.482,28,2.211,30,0.096,31,0.004,32,0.004,43,0.443,46,1.354,49,0.205,53,0.366,56,3.733,57,0.828,59,2.301,60,3.733,61,4.355,63,1.152,68,1.635,70,1.728,74,2.932,75,2.374,76,2.752,77,1.405,82,1.887,84,1.452,85,2.301,86,2.301,90,3.733,97,3.733,100,1.987,101,1.698,103,4.077,112,2.056,117,3.411,118,2.461,119,2.38,120,1.031,122,2.584,135,1.144,148,2.38,149,4.355,152,3.411,153,2.161,154,2.38,155,2.38,254,2.518,293,0.98,378,1.987,413,1.478,441,2.532,455,1.511,582,1.575,677,4.929,678,2.797,773,3.419,842,1.858,849,1.698,850,3.733,864,4.124,866,2.407,869,3.142,870,2.461,872,1.717,873,1.424,881,1.679,882,2.876,883,1.371,884,1.717,885,2.943,892,2.926,893,3.733,895,3.098,923,2.099,926,2.161,927,3.804,962,2.639,1125,2.228,1126,2.942,1127,2.942,1128,2.942,1129,2.942,1130,2.301,1131,2.301,1132,3.117,1133,4.514,1137,5.118,1147,3.117,1148,3.117,1149,3.117,1150,3.117,1151,2.942,1152,3.117,1153,3.117,1154,3.117,1155,3.117,1156,3.117,1157,3.117,1160,3.117,1170,4.295,1178,4.217,1179,3.117,1180,2.672,1181,2.942,1182,2.797,1183,3.117,1184,5.417,1185,1.987,1186,4.486,1187,2.672,1188,3.117,1189,3.117,1190,3.117,1191,2.672,1192,4.217,1193,3.117,1194,3.117,1195,3.117,1196,3.117,1197,3.117,1198,2.467,1199,2.672,1722,3.117,2160,4.072,2161,4.072,2162,4.072]],["title/modules/IssuerModule.html",[172,1.502,188,3.24]],["body/modules/IssuerModule.html",[3,0.05,4,0.056,5,0.044,21,0.007,30,0.056,31,0.004,32,0.004,49,0.225,50,0.719,53,0.184,82,2.009,101,1.261,159,2.219,172,2.247,174,1.914,175,2.172,176,2.3,177,2.3,178,2.115,179,3.539,180,3.539,185,4.734,188,6.799,192,5.075,197,3.238,198,2.3,199,2.06,202,2.759,204,2.289,205,1.355,224,2.844,231,3.131,250,0.975,395,1.914,423,5.498,431,2.533,432,1.787,437,2.449,438,3.55,540,1.914,602,5.404,640,5.598,698,2.533,701,5.598,731,3.317,773,3.058,1125,3.338,1182,2.977,1218,6.064,1220,3.131,1373,5.404,1390,3.55,1397,5.498,1404,5.404,1406,3.55,1415,3.861,1448,2.977,1729,5.404,1739,5.754,1748,3.841,2017,3.55,2027,5.404,2066,3.861,2104,5.404,2106,3.55,2120,5.817,2163,3.861,2164,3.861,2165,3.861,2166,3.861,2167,5.498,2168,5.274,2169,5.075,2170,5.274,2171,4.334,2172,5.404,2173,4.19,2174,2.449,2175,6.101,2176,4.408,2177,3.317,2178,3.131,2179,3.55,2180,4.334,2181,4.334,2182,4.334,2183,4.334,2184,4.334,2185,4.334,2186,4.334,2187,4.334,2188,4.334,2189,4.334,2190,4.334,2191,4.334,2192,4.334,2193,6.101,2194,3.861,2195,4.334,2196,4.334]],["title/classes/JwksResponseDto.html",[53,0.2,1787,3.24]],["body/classes/JwksResponseDto.html",[3,0.068,4,0.076,5,0.06,9,0.693,13,0.225,14,0.933,19,0.507,20,0.275,21,0.007,22,3.569,23,2.156,25,3.002,30,0.097,31,0.005,32,0.005,43,0.384,49,0.135,53,0.349,57,1.201,95,4.046,124,2.026,130,2.148,322,3.644,323,4.999,324,2.903,330,4.387,346,2.434,412,4.904,459,3.451,469,3.568,492,3.134,552,3.336,663,4.519,725,4.128,833,4.055,1332,4.926,1335,4.999,1560,3.717,1620,3.875,1644,3.044,1648,5.156,1772,6.687,1773,5.745,1774,7.337,1775,6.687,1776,4.266,1777,4.519,1778,5.745,1779,5.745,1781,5.26,1782,4.836,1783,5.26,1785,5.745,1787,5.156,2197,5.26]],["title/injectables/JwtAuthGuard.html",[33,0.928,424,2.504]],["body/injectables/JwtAuthGuard.html",[3,0.075,4,0.084,5,0.066,13,0.248,17,0.865,20,0.292,21,0.007,30,0.084,31,0.005,32,0.005,33,1.569,35,2.415,37,3.791,38,7.106,39,1.856,40,7.106,41,7.106,42,6.496,43,0.518,45,1.986,46,1.37,47,4.097,48,1.489,49,0.206,50,1.08,51,5.798,52,4.702,53,0.276,54,1.595,55,5.798,68,1.176,250,1.464,388,2.516,424,4.233,477,1.86,1892,6.533,2198,5.798,2199,5.798,2200,8.364,2201,6.508,2202,6.508,2203,5.33,2204,6.533,2205,6.508,2206,6.508,2207,6.508,2208,5.798,2209,6.508]],["title/injectables/JwtService.html",[33,0.928,425,3.096]],["body/injectables/JwtService.html",[0,1.214,3,0.052,4,0.059,5,0.046,13,0.174,17,0.786,19,0.523,20,0.265,21,0.007,28,2.393,30,0.082,31,0.004,32,0.004,33,1.243,35,1.691,39,1.47,43,0.509,45,1.805,46,1.245,48,1.659,49,0.189,50,0.756,53,0.193,54,1.451,93,3.457,112,1.257,204,2.76,205,1.424,250,2.033,256,3.166,269,3.968,325,3.568,338,3.256,345,3.827,356,2.493,359,5.65,368,4.285,388,1.762,408,3.129,425,4.146,447,4.564,475,2.253,476,2.76,477,1.302,483,3.72,484,2.99,487,2.99,488,2.566,489,3.291,490,6.737,491,6.296,492,2.418,499,2.99,509,3.968,511,2.493,522,4.046,527,5.174,529,2.048,532,3.129,540,3.202,698,2.662,751,4.146,786,4.153,799,2.348,802,2.868,816,3.279,842,2.011,996,2.111,1098,2.99,1314,4.146,1541,3.291,1600,4.835,1615,4.564,1644,2.348,1933,5.994,1934,3.731,1935,3.731,1936,4.059,1937,4.059,1938,4.059,1939,4.059,1940,3.731,1941,5.174,1942,6.461,1943,5.628,1944,5.628,1945,5.628,1946,5.628,1947,4.059,1948,4.059,1949,6.461,1950,5.628,1951,4.059,1952,5.174,1953,4.059,1954,4.059,1955,4.059,1956,3.731,1957,4.059,1958,4.059,1959,4.059,1960,4.059,1961,5.174,1962,5.628,1963,3.731,1964,4.059,1965,4.059,1966,3.487,1967,6.977,1968,3.731,2210,6.317,2211,4.556,2212,4.556,2213,4.556,2214,4.556,2215,4.556]],["title/injectables/JwtStrategy.html",[33,0.928,426,3.408]],["body/injectables/JwtStrategy.html",[3,0.05,4,0.056,5,0.044,9,0.513,13,0.167,17,0.879,19,0.269,20,0.296,21,0.007,23,1.623,30,0.056,31,0.004,32,0.004,33,1.207,35,1.622,37,2.917,39,1.428,43,0.527,45,2.017,46,1.391,48,1.854,49,0.193,50,0.725,52,3.158,53,0.185,54,1.681,68,1.282,96,2.869,135,2.16,165,4.216,204,3.063,205,1.366,213,6.07,250,1.981,254,2.647,256,3.076,269,4.209,280,2.648,324,2.373,330,3.587,332,3.258,336,3.894,345,2.648,348,3.894,367,6.32,368,2.392,388,1.69,389,1.272,418,2.555,426,4.435,477,1.249,483,3.478,484,2.869,485,2.532,487,1.802,488,1.318,522,4.255,523,4.872,525,3.346,540,3.709,630,3.753,698,2.555,712,2.47,786,4.21,816,3.664,996,2.026,1094,2.752,1311,3.158,1314,2.869,1464,3.587,1541,5.125,1573,3.158,1941,3.58,1952,3.58,1956,3.58,1968,3.58,2216,3.894,2217,6.138,2218,6.138,2219,7.094,2220,4.371,2221,6.138,2222,4.371,2223,6.138,2224,4.371,2225,6.138,2226,7.094,2227,4.371,2228,4.371,2229,6.138,2230,4.371,2231,6.138,2232,4.371,2233,6.138,2234,3.894,2235,4.371,2236,4.371,2237,3.894,2238,7.692,2239,4.371,2240,4.371,2241,4.371,2242,4.371,2243,4.371,2244,4.371,2245,4.371,2246,4.371,2247,6.138,2248,4.371,2249,7.094,2250,4.371,2251,4.371,2252,3.894,2253,4.371,2254,4.371,2255,3.894,2256,4.371,2257,5.429,2258,6.138,2259,3.894,2260,6.138,2261,3.894,2262,4.371,2263,6.138,2264,4.371,2265,4.371,2266,4.371,2267,4.371,2268,4.371,2269,3.58,2270,4.371,2271,3.894,2272,4.371,2273,4.371,2274,4.371,2275,4.371,2276,4.371]],["title/classes/Key.html",[23,1.079,53,0.2]],["body/classes/Key.html",[3,0.062,4,0.069,5,0.054,7,2.361,9,0.826,13,0.204,14,0.875,15,3.863,16,1.203,17,0.58,19,0.598,20,0.345,21,0.007,23,2.174,24,3.366,25,2.561,30,0.069,31,0.005,32,0.005,43,0.591,46,0.918,49,0.181,53,0.354,57,1.088,63,1.535,70,1.583,74,2.552,75,2.499,76,2.241,77,1.287,112,1.476,121,3.021,124,1.835,130,2.561,412,4.311,460,3.125,485,2.122,725,3.975,799,4.057,1558,3.509,1560,3.366,1626,3.366,1644,2.756,1660,6.446,1773,4.093,1774,6.401,1776,5.686,1777,6.024,1778,6.401,1779,6.401,1785,5.388,2277,6.341,2278,4.38,2279,7.012,2280,5.347,2281,5.347,2282,5.347,2283,5.347,2284,5.347,2285,5.347,2286,5.347,2287,5.347,2288,4.764,2289,4.764]],["title/controllers/KeyController.html",[157,1.448,1582,3.611]],["body/controllers/KeyController.html",[3,0.052,4,0.058,5,0.045,9,0.526,13,0.171,16,2.091,17,0.843,19,0.52,20,0.284,21,0.007,22,1.697,23,2.143,30,0.058,31,0.004,32,0.004,39,1.453,43,0.505,45,1.936,46,1.335,48,1.937,49,0.207,50,0.743,53,0.19,54,1.438,63,1.313,120,1.135,157,1.375,159,1.63,248,3.078,250,1.749,293,1.73,325,3.744,355,3.698,356,2.695,372,3.815,389,2.618,412,4.008,413,1.581,424,2.378,475,3.02,476,2.745,477,1.281,483,4.235,485,1.351,488,1.882,529,2.025,604,2.186,647,1.733,699,3.331,850,2.452,1222,3.13,1223,3.174,1380,3.078,1386,2.715,1387,2.715,1388,2.821,1389,2.821,1393,2.821,1394,2.715,1401,3.078,1402,4.78,1464,3.65,1582,5.952,1583,3.992,1593,4.289,1594,4.937,1609,4.78,1626,4.895,1649,5.115,1650,3.43,1651,3.43,1653,3.67,1838,3.43,2290,3.992,2291,7.189,2292,6.245,2293,6.245,2294,7.189,2295,4.481,2296,4.481,2297,4.481,2298,4.481,2299,4.481,2300,4.481,2301,4.481,2302,5.952,2303,4.481,2304,4.481,2305,6.245,2306,5.115,2307,3.67,2308,4.481,2309,4.481,2310,4.481,2311,7.189,2312,4.481,2313,4.481,2314,4.481,2315,4.481,2316,4.481,2317,4.481]],["title/entities/KeyEntity.html",[849,1.372,1586,3.096]],["body/entities/KeyEntity.html",[3,0.064,4,0.072,5,0.057,13,0.213,14,0.9,16,1.982,19,0.522,20,0.341,21,0.007,23,2.202,26,3.355,27,2.799,30,0.093,31,0.005,32,0.005,43,0.573,49,0.184,53,0.236,63,1.487,68,1.632,293,1.934,413,2.327,441,3.156,725,3.819,842,2.304,849,2.106,851,2.653,862,5.274,866,3.506,868,3.153,869,3.585,870,3.053,872,3.053,873,2.532,881,2.301,882,3.053,883,1.879,884,2.353,885,3.466,927,2.587,1134,4.033,1586,4.751,1644,2.877,1803,4.571,1818,7.395,2318,4.571,2319,5.581,2320,5.581,2321,7.24,2322,5.581,2323,5.581,2324,6.582,2325,5.806,2326,5.581,2327,4.272]],["title/classes/KeyImportDto.html",[53,0.2,1626,2.97]],["body/classes/KeyImportDto.html",[3,0.064,4,0.072,5,0.057,7,3.196,9,1.06,13,0.213,14,0.9,15,5.806,16,1.256,17,0.979,19,0.588,20,0.33,21,0.007,23,2.222,24,4.558,25,3.093,30,0.072,31,0.005,32,0.005,43,0.522,46,0.958,49,0.184,53,0.36,57,1.135,63,1.356,70,1.653,74,2.605,75,2.425,76,2.304,77,1.343,112,1.54,121,3.153,124,1.915,130,2.03,412,4.383,460,4.231,485,2.422,725,4.042,799,2.877,940,5.93,1558,5.274,1560,3.514,1626,4.558,1644,2.877,1660,4.571,1722,4.272,1773,4.272,1774,6.508,1776,4.033,1777,4.272,1778,5.541,1779,5.541,1785,5.541,2277,5.84,2278,4.571,2279,4.973,2288,4.973,2289,6.45,2328,5.581,2329,5.581,2330,5.581]],["title/modules/KeyModule.html",[172,1.502,189,3.408]],["body/modules/KeyModule.html",[3,0.066,4,0.074,5,0.058,21,0.007,30,0.074,31,0.005,32,0.005,39,1.334,43,0.373,48,1.312,49,0.22,50,0.951,53,0.243,54,1.628,172,2.591,174,2.532,179,2.874,180,2.874,189,5.881,202,2.593,203,5.323,204,2.948,205,1.792,213,5.323,248,3.938,249,4.389,250,1.29,252,4.696,329,5.638,431,3.351,432,2.364,488,2.221,699,3.772,850,3.137,1228,3.971,1313,4.835,1432,4.931,1460,4.305,1461,4.143,1530,5.323,1586,4.835,1589,5.108,1590,5.638,1594,5.06,1603,6.667,1604,6.034,1645,3.938,1651,4.389,1652,5.108,1653,6.034,2173,5.06,2174,3.239,2331,5.734,2332,7.252,2333,5.734,2334,7.252,2335,6.42,2336,5.734,2337,5.734,2338,6.563,2339,5.734,2340,5.734,2341,5.108,2342,7.367,2343,5.108,2344,5.108,2345,5.734,2346,5.734]],["title/classes/KeyObj.html",[53,0.2,2347,3.864]],["body/classes/KeyObj.html",[3,0.074,4,0.083,5,0.065,7,3.947,9,0.752,13,0.244,14,0.982,15,6.187,16,1.926,19,0.549,20,0.313,21,0.007,22,3.386,23,2.19,24,4.971,25,3.252,26,4.143,27,3.457,30,0.083,31,0.005,32,0.005,43,0.556,49,0.147,53,0.271,57,1.302,239,4.397,378,3.124,725,3.753,849,2.297,1335,4.784,1557,5.881,1620,5.619,1648,4.397,2277,6.14,2347,6.468,2348,5.704,2349,6.403,2350,6.403,2351,6.403]],["title/classes/KeyResponseDto.html",[53,0.2,339,3.611]],["body/classes/KeyResponseDto.html",[3,0.084,4,0.094,5,0.074,13,0.279,14,1.063,20,0.267,21,0.006,30,0.094,31,0.006,32,0.006,43,0.475,49,0.168,53,0.309,57,1.486,239,5.019,339,6.543,378,3.565,412,4.672,459,4.27,1620,5.948,1648,5.019,2277,5.872,2352,6.51]],["title/classes/KeyService.html",[53,0.2,1594,3.24]],["body/classes/KeyService.html",[0,1.423,3,0.041,4,0.047,5,0.036,7,2.357,9,0.423,13,0.137,16,1.921,17,0.956,19,0.606,20,0.342,21,0.007,22,2.022,23,2.173,24,4.427,30,0.047,31,0.004,32,0.004,39,1.242,43,0.573,45,2.194,46,1.513,48,2.08,49,0.202,50,0.598,53,0.153,54,1.068,57,0.733,114,3.103,204,2.55,205,1.126,255,1.423,293,2.301,355,2.777,356,3,389,2.368,466,5.209,475,2.805,477,1.526,487,1.486,488,1.917,522,2.538,657,2.758,698,2.106,712,4.443,722,2.106,725,3.569,765,1.972,798,4.764,850,1.972,875,5.081,883,1.213,1061,3.504,1130,5.325,1228,3.431,1235,2.676,1306,2.758,1451,2.106,1505,2.921,1522,2.475,1538,4.373,1547,3.667,1551,4.086,1594,3.667,1595,4.757,1598,7.606,1599,4.373,1600,4.868,1601,6.69,1602,4.757,1603,5.209,1606,4.373,1610,4.757,1621,5.666,1625,4.757,1626,4.427,1630,3.361,1631,4.757,1633,3.21,1634,5.081,1637,4.757,1639,2.603,1644,1.857,1649,2.951,1650,2.758,1651,2.758,1683,3.21,1963,2.951,2353,3.21,2354,9.66,2355,3.603,2356,3.603,2357,3.603,2358,3.603,2359,3.603,2360,3.603,2361,3.603,2362,3.603,2363,5.339,2364,3.603,2365,4.757,2366,3.603,2367,3.504,2368,7.033,2369,3.603,2370,3.603,2371,3.603]],["title/classes/LocalFileStorage.html",[53,0.2,2372,3.611]],["body/classes/LocalFileStorage.html",[3,0.06,4,0.067,5,0.053,13,0.198,17,0.934,19,0.594,20,0.315,21,0.007,23,2.146,30,0.067,31,0.005,32,0.005,39,1.608,43,0.56,45,2.144,46,1.479,48,1.892,49,0.19,53,0.22,54,1.655,57,1.058,68,0.94,130,2.514,220,2.845,221,2.243,250,1.937,355,3.4,356,2.2,388,2.01,476,2.517,477,1.486,488,1.567,529,1.686,712,2.937,948,3.038,1087,3.757,1223,3.051,1252,4.038,1834,5.094,1837,5.289,1838,5.941,1839,5.289,1841,5.66,1845,5.289,1847,4.258,1848,5.608,1849,6.59,1850,6.357,1851,5.976,1853,4.993,1854,3.273,1858,3.571,1862,3.979,1927,4.258,2261,4.632,2372,5.289,2373,4.632,2374,5.199,2375,5.199,2376,6.911,2377,5.199,2378,5.199,2379,5.199,2380,5.199,2381,5.199,2382,5.199,2383,5.199,2384,5.199,2385,5.199,2386,5.199,2387,5.199,2388,4.258,2389,6.911,2390,6.911,2391,5.199,2392,5.199,2393,6.911,2394,4.632,2395,5.199,2396,5.199,2397,5.199,2398,5.199,2399,5.199,2400,4.632,2401,5.199,2402,5.199,2403,5.199,2404,5.199,2405,4.632,2406,5.199,2407,5.199,2408,5.199]],["title/injectables/LoggerConfigService.html",[33,0.928,2409,3.611]],["body/injectables/LoggerConfigService.html",[0,1.193,3,0.072,4,0.058,5,0.045,9,0.525,13,0.171,14,0.776,17,0.677,19,0.441,20,0.263,21,0.007,28,3.489,30,0.081,31,0.004,32,0.004,33,1.227,35,1.661,39,1.452,43,0.604,45,1.553,46,1.072,48,2.085,49,0.143,50,0.743,53,0.19,54,1.772,107,1.969,124,2.141,135,2.017,204,2.744,205,1.399,216,5.111,250,1.007,251,5.111,253,3.425,254,3.099,256,3.128,257,3.928,263,5.19,268,5.615,322,3.172,388,1.731,475,2.225,477,1.279,485,2.713,647,1.731,698,2.616,816,2.822,951,2.966,962,2.024,1221,3.425,1222,3.128,1504,4.508,2409,4.776,2410,7.669,2411,6.924,2412,6.924,2413,6.924,2414,6.924,2415,6.924,2416,6.924,2417,6.924,2418,6.24,2419,6.924,2420,6.924,2421,6.24,2422,4.476,2423,6.255,2424,4.476,2425,4.476,2426,7.541,2427,4.476,2428,4.476,2429,4.476,2430,4.476,2431,5.338,2432,5.559,2433,4.476,2434,4.476,2435,5.559,2436,5.559,2437,4.508,2438,4.476,2439,5.559,2440,4.508,2441,5.559,2442,5.559,2443,5.559,2444,5.559,2445,5.559,2446,5.559,2447,3.987,2448,3.987,2449,5.948,2450,3.234,2451,3.666,2452,3.666,2453,3.987,2454,5.111,2455,5.111,2456,5.19,2457,5.111,2458,5.111,2459,3.987,2460,3.987,2461,3.987,2462,3.987,2463,3.987,2464,3.987,2465,3.987]],["title/interfaces/LoggerConfiguration.html",[0,1.258,2423,3.611]],["body/interfaces/LoggerConfiguration.html",[0,1.38,2,2.399,3,0.079,4,0.067,5,0.052,13,0.197,14,0.857,19,0.318,20,0.315,21,0.007,28,3.625,30,0.089,31,0.005,32,0.005,33,1.355,49,0.158,50,0.859,53,0.219,54,1.834,107,1.802,124,1.776,135,1.454,204,2.511,205,1.618,216,4.24,250,1.165,251,7.042,253,3.962,254,3.341,256,2.595,257,3.259,263,6.212,268,6.212,322,3.646,388,2.002,475,1.846,485,2.335,647,2.002,816,3.116,951,2.46,962,2.341,1221,3.962,1222,2.595,1504,3.74,2409,3.962,2410,4.24,2411,4.612,2412,4.612,2413,4.612,2414,4.612,2415,4.612,2416,4.612,2417,4.612,2419,4.612,2420,4.612,2423,6.32,2426,7.877,2431,4.733,2432,4.612,2435,4.612,2436,4.612,2437,3.74,2439,4.612,2440,3.74,2441,4.612,2442,7.66,2443,7.66,2444,7.66,2445,6.139,2446,6.139,2447,4.612,2448,4.612,2449,6.32,2450,3.74,2451,4.24,2452,4.24,2453,4.612,2454,5.644,2455,5.644,2456,5.596,2457,5.644,2458,5.644,2459,4.612,2460,4.612,2461,4.612,2462,4.612,2463,4.612,2464,4.612,2465,4.612]],["title/modules/MetricModule.html",[172,1.502,190,3.408]],["body/modules/MetricModule.html",[3,0.083,4,0.093,5,0.073,21,0.007,30,0.093,31,0.006,32,0.006,49,0.195,50,1.195,53,0.305,172,2.699,174,3.181,190,6.126,202,3.257,254,3.107,255,2.845,331,3.942,434,4.728,435,4.948,1464,4.21,1504,5.205,2466,7.204,2467,7.204,2468,7.204,2469,7.204,2470,5.514,2471,7.204,2472,7.204]],["title/classes/NoneTrustPolicy.html",[53,0.2,97,2.581]],["body/classes/NoneTrustPolicy.html",[3,0.063,4,0.071,5,0.056,9,0.645,13,0.21,14,0.891,19,0.49,20,0.329,21,0.007,30,0.118,31,0.005,32,0.005,37,4.167,43,0.357,49,0.183,53,0.393,56,3.007,57,1.118,58,3.46,59,4.506,60,5.01,61,5.351,62,2.845,63,0.928,65,3.971,68,1.585,70,1.627,71,4.063,72,5.754,73,2.17,74,2.586,75,2.392,76,2.791,77,1.323,78,3.998,79,3.998,80,3.998,81,3.774,82,2.547,83,3.46,84,3.015,85,4.506,86,4.506,87,3.774,88,5.806,89,4.519,90,3.007,91,3.774,92,3.774,93,3.007,94,3.607,95,2.426,96,3.607,97,3.922,98,3.007,99,5.021,100,2.681,101,1.599,102,3.774,103,3.007,104,3.774,590,4.896,2473,5.496]],["title/classes/NotificationRequestDto.html",[53,0.2,2474,3.611]],["body/classes/NotificationRequestDto.html",[3,0.08,4,0.09,5,0.07,13,0.265,14,1.032,19,0.51,20,0.304,21,0.007,30,0.09,31,0.005,32,0.005,43,0.539,49,0.19,53,0.351,57,1.414,63,1.401,75,2.286,77,1.673,121,3.927,668,4.376,684,6.193,688,6.193,1309,5.376,1448,4.774,2474,6.353,2475,7.907,2476,8.875,2477,7.269,2478,6.951,2479,8.301,2480,6.951]],["title/classes/Oauth2AuthorizationServerResponse.html",[53,0.2,2481,3.408]],["body/classes/Oauth2AuthorizationServerResponse.html",[3,0.057,4,0.064,5,0.05,9,0.584,12,1.758,13,0.19,14,0.834,19,0.593,20,0.337,21,0.007,23,1.535,28,2.541,29,5.495,30,0.064,31,0.004,32,0.004,43,0.598,53,0.211,57,1.012,144,3.017,322,2.962,323,4.064,324,2.594,325,2.649,330,3.921,331,5.091,338,4.906,345,5.412,346,1.613,353,5.092,418,3.921,459,2.907,496,6.655,540,3.352,541,5.485,543,5.485,609,4.403,617,7.239,624,6.655,747,5.81,750,5.81,752,5.81,753,5.81,755,5.81,757,5.81,779,4.847,1332,6.106,1335,3.014,1347,4.591,1541,5.871,1898,4.847,2197,4.432,2325,4.847,2481,4.847,2482,8.289,2483,4.975,2484,4.975,2485,8.741,2486,4.975,2487,4.975,2488,4.074,2489,4.975,2490,4.975,2491,6.709,2492,4.432]],["title/classes/OfferRequestDto.html",[53,0.2,2110,3.24]],["body/classes/OfferRequestDto.html",[3,0.056,4,0.063,5,0.049,9,0.946,12,1.279,13,0.186,14,1.002,16,1.814,17,0.981,19,0.556,20,0.342,21,0.007,30,0.085,31,0.004,32,0.004,43,0.588,49,0.193,53,0.341,57,0.993,62,3.1,63,1.467,70,1.445,71,3.069,74,2.733,75,1.936,76,2.108,77,1.174,100,4.473,107,1.876,112,1.347,118,3.169,120,1.236,121,2.757,122,2.508,128,2.362,135,1.86,143,2.933,343,5.431,346,2.147,518,3.04,569,2.057,578,2.766,582,3.117,643,2.206,668,3.072,676,4.933,831,4.346,832,4.732,842,2.766,873,2.316,890,4.347,962,2.994,996,3.069,1094,5.075,1185,2.38,1215,5.068,1368,3.996,1671,5.424,1993,5.431,2110,4.548,2113,3.202,2119,3.202,2122,5.163,2123,3.996,2134,3.735,2143,3.996,2493,7.281,2494,6.697,2495,4.879,2496,4.879,2497,4.879,2498,4.879,2499,4.879,2500,5.9,2501,4.879,2502,4.879,2503,5.068,2504,4.879,2505,4.879,2506,4.879,2507,4.879,2508,5.9,2509,5.9,2510,3.996,2511,4.347,2512,4.347,2513,4.347]],["title/classes/OfferResponse.html",[53,0.2,2113,3.096]],["body/classes/OfferResponse.html",[3,0.065,4,0.073,5,0.057,9,0.856,12,1.479,13,0.215,14,1.005,16,1.64,19,0.566,20,0.331,21,0.007,30,0.094,31,0.005,32,0.005,43,0.525,49,0.203,53,0.362,57,1.148,62,2.881,70,1.671,71,3.379,74,2.867,75,1.878,76,2.321,77,1.358,100,4.166,107,1.697,112,1.557,118,3.406,120,1.429,121,3.188,122,2.762,128,2.013,135,1.585,143,2.939,343,5.268,346,1.83,518,3.092,569,2.379,578,2.571,582,2.82,643,2.552,668,3.553,676,3.703,831,3.703,832,3.553,842,2.571,873,1.974,962,2.552,1094,4.59,1185,3.941,1215,4.319,1671,4.622,1993,4.077,2110,3.876,2113,4.785,2119,3.703,2122,5.008,2123,4.622,2134,4.319,2143,4.622,2493,6.616,2494,5.028,2500,5.028,2503,4.319,2508,5.028,2509,6.496,2510,4.622,2511,5.028,2512,5.028,2513,5.028,2514,5.643,2515,5.643]],["title/controllers/Oid4vciController.html",[157,1.448,2172,3.611]],["body/controllers/Oid4vciController.html",[3,0.056,4,0.062,5,0.049,9,0.568,12,2.324,13,0.185,17,0.812,20,0.307,21,0.007,30,0.062,31,0.004,32,0.004,39,1.532,43,0.486,45,1.863,46,1.38,48,1.923,49,0.212,50,0.803,53,0.205,54,1.607,63,1.263,68,1.19,101,1.915,120,1.226,134,1.693,146,4.912,157,2.297,159,1.761,163,3.047,208,2.734,250,1.089,255,2.6,280,5.545,331,4.598,355,3.424,356,2.096,361,5.04,372,2.569,386,3.176,388,1.871,389,1.915,518,3.447,570,4.939,578,2.675,581,3.176,582,2.546,604,2.361,609,4.322,632,3.176,635,2.569,636,5.141,637,3.704,643,2.188,647,1.871,808,3.047,810,2.734,861,2.3,905,3.495,1226,2.828,1358,3.989,1448,3.324,1790,4.322,2120,4.712,2121,3.497,2168,3.047,2172,5.04,2176,3.497,2177,3.704,2474,6.149,2516,4.312,2517,4.84,2518,5.394,2519,4.84,2520,4.84,2521,4.84,2522,6.585,2523,4.84,2524,4.84,2525,4.84,2526,4.84,2527,4.84,2528,4.84,2529,3.964,2530,5.04,2531,4.84,2532,3.176,2533,4.84,2534,3.964,2535,4.84,2536,4.84,2537,4.312,2538,4.84,2539,4.312,2540,4.84,2541,4.84,2542,4.84,2543,4.84,2544,4.84,2545,4.84,2546,4.84,2547,4.84,2548,4.84,2549,4.84,2550,3.964,2551,4.84]],["title/controllers/Oid4vpController.html",[157,1.448,2552,3.611]],["body/controllers/Oid4vpController.html",[3,0.061,4,0.069,5,0.054,9,0.623,12,1.836,13,0.202,17,0.76,20,0.256,21,0.007,30,0.069,31,0.005,32,0.005,39,1.63,43,0.455,45,1.744,46,1.347,48,2.037,49,0.211,50,0.881,53,0.225,54,1.401,63,1.182,68,1.266,120,1.344,134,1.856,157,2.407,159,1.931,163,3.341,331,3.833,346,2.271,353,3.611,355,3.423,361,5.362,372,3.718,378,2.589,386,3.483,388,2.052,389,2.426,477,1.517,518,3.414,577,4.819,598,6.025,604,2.589,609,4.597,635,2.817,636,4.812,637,4.062,647,2.052,700,5.066,808,4.41,905,3.718,906,4.094,932,3.611,1198,3.215,1235,3.511,1568,4.062,1790,5.146,2168,3.341,2176,5.061,2177,4.062,2529,4.347,2530,5.362,2532,3.483,2534,4.347,2537,4.729,2539,6.241,2552,6.002,2553,4.729,2554,5.308,2555,7.005,2556,6.986,2557,5.308,2558,5.308,2559,5.308,2560,5.386,2561,4.729,2562,5.308,2563,5.308,2564,4.729,2565,4.729,2566,5.308,2567,5.308,2568,5.308,2569,5.308]],["title/modules/Oid4vpModule.html",[172,1.502,2167,3.096]],["body/modules/Oid4vpModule.html",[3,0.066,4,0.074,5,0.058,21,0.007,30,0.074,31,0.005,32,0.005,49,0.22,50,0.954,53,0.244,159,2.685,172,2.595,174,2.54,175,2.883,176,3.053,177,3.053,178,2.806,179,4.086,180,4.086,185,5.142,191,4.647,192,5.513,197,3.918,198,3.053,199,2.734,202,3.338,224,3.775,230,4.403,231,4.156,700,5.648,2167,6.459,2168,5.73,2169,5.513,2170,5.73,2173,5.07,2174,3.25,2176,5.334,2177,4.403,2178,4.156,2179,4.711,2552,6.239,2565,5.125,2570,5.125,2571,5.752,2572,5.125,2573,5.125,2574,5.752,2575,7.263,2576,4.845,2577,5.125,2578,5.752]],["title/injectables/Oid4vpService.html",[33,0.928,700,2.757]],["body/injectables/Oid4vpService.html",[3,0.031,4,0.035,5,0.027,11,2.495,12,2.054,13,0.103,16,0.606,17,0.655,19,0.468,20,0.221,21,0.007,23,0.616,25,0.979,30,0.035,31,0.003,32,0.003,33,0.84,35,0.999,39,0.993,43,0.392,45,1.743,46,1.037,47,4.143,48,1.506,49,0.203,50,0.447,53,0.114,54,0.854,62,2.153,101,1.914,112,0.743,114,2.588,134,0.942,135,0.756,144,1.72,145,1.574,156,1.135,204,2.379,205,0.842,220,1.473,250,2.064,254,1.161,255,2.095,257,3.8,281,2.688,284,2.029,293,1.933,295,2.412,330,1.574,333,3.318,338,1.388,346,1.957,353,3.392,355,1.686,356,1.921,369,3.085,378,2.083,389,2.214,412,1.388,457,1.945,461,2.932,462,3.497,471,1.218,475,0.96,476,2.542,477,1.22,485,2.294,487,2.187,488,1.82,499,2.802,511,2.336,518,3.114,522,1.28,529,2.779,539,3.481,545,2.399,552,3.41,556,2.399,557,2.061,558,1.945,570,1.473,577,3.717,598,4.361,632,2.802,633,1.849,635,1.429,638,3.783,639,1.767,643,1.218,652,1.695,669,1.945,676,1.767,699,3.245,700,2.495,722,1.574,729,1.473,742,2.688,744,4.935,765,1.473,786,2.945,799,2.201,804,1.521,808,2.688,816,3.442,857,1.473,861,1.28,921,2.266,923,2.201,928,3.213,930,2.412,931,2.586,951,1.28,996,2.798,1006,1.945,1048,3.085,1130,2.412,1185,1.314,1237,1.945,1275,3.657,1283,3.268,1318,2.399,1396,3.268,1429,2.399,1451,1.574,1466,2.399,1493,2.205,1505,2.336,1510,2.205,1511,3.643,1519,1.945,1520,2.061,1524,3.268,1546,3.803,1551,4.62,1580,4.62,1646,3.497,1647,2.061,1813,2.399,1822,2.399,1993,3.085,1999,1.767,2113,1.767,2169,3.657,2170,4.62,2176,3.085,2178,1.945,2179,2.205,2518,5.39,2532,3.481,2556,3.803,2560,5.384,2561,3.803,2564,2.399,2579,2.399,2580,4.269,2581,5.305,2582,4.62,2583,4.62,2584,2.693,2585,4.269,2586,2.693,2587,3.803,2588,3.497,2589,3.497,2590,2.693,2591,4.62,2592,2.693,2593,2.693,2594,4.269,2595,2.205,2596,2.205,2597,2.205,2598,3.481,2599,2.693,2600,2.693,2601,2.205,2602,2.693,2603,5.037,2604,3.268,2605,3.497,2606,2.399,2607,4.269,2608,6.581,2609,6.037,2610,4.269,2611,5.305,2612,2.693,2613,4.269,2614,6.581,2615,2.693,2616,2.693,2617,2.693,2618,2.693,2619,2.205,2620,2.399,2621,2.693,2622,2.693,2623,2.693,2624,2.693,2625,6.581,2626,3.497,2627,2.693,2628,2.693,2629,2.693,2630,2.693,2631,2.693,2632,2.693,2633,2.693,2634,2.693,2635,2.693,2636,2.693,2637,4.269,2638,2.693,2639,2.693,2640,2.693,2641,2.693,2642,2.399,2643,2.399,2644,2.399,2645,2.693,2646,2.205,2647,2.399,2648,2.693,2649,2.693,2650,4.269,2651,2.693,2652,4.269,2653,2.205,2654,2.693,2655,2.205,2656,2.205,2657,2.693,2658,2.693,2659,2.693,2660,2.693,2661,4.269,2662,4.269,2663,6.581,2664,2.693,2665,2.693,2666,2.693,2667,4.269,2668,2.693,2669,2.693,2670,4.726,2671,2.399,2672,2.693,2673,2.693,2674,4.269,2675,4.269,2676,3.803,2677,4.269,2678,2.693,2679,2.693,2680,2.693,2681,4.269,2682,2.693,2683,2.693,2684,4.269,2685,2.693,2686,5.305,2687,2.205,2688,2.205,2689,2.693,2690,4.269,2691,2.693,2692,2.693,2693,4.269,2694,4.269,2695,2.693,2696,2.693,2697,2.693,2698,2.693,2699,2.693,2700,2.693,2701,2.693,2702,2.693,2703,2.693]],["title/classes/ParResponseDto.html",[53,0.2,644,3.611]],["body/classes/ParResponseDto.html",[3,0.079,4,0.089,5,0.07,12,2.494,13,0.263,14,1.027,19,0.508,20,0.302,21,0.007,30,0.089,31,0.005,32,0.005,43,0.537,53,0.292,57,1.403,353,4.259,402,6.391,455,3.066,459,4.031,537,4.829,624,6.767,644,6.324,652,5.569,1185,4.474,1512,6.767,1513,7.361,2488,5.649,2492,6.145,2704,7.881]],["title/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,1.258,734,3.408]],["body/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,1.258,2,1.418,3,0.035,4,0.039,5,0.031,12,2.083,13,0.117,14,0.587,19,0.512,20,0.27,21,0.007,22,1.159,30,0.061,31,0.003,32,0.003,33,0.928,49,0.2,50,0.508,53,0.13,54,1.478,62,1.683,68,0.553,84,1.091,101,0.89,107,1.098,109,2.542,112,0.844,125,3.488,128,2.308,134,2.264,135,0.859,143,1.716,144,2.098,147,2.886,156,2.729,204,1.867,205,0.956,208,1.729,250,2.101,255,2.274,256,1.534,280,1.853,284,3.323,285,4.407,287,3.151,293,1.778,295,3.656,332,1.624,333,1.384,338,1.577,346,2.496,355,2.761,356,0.974,368,1.674,407,2.211,409,2.211,461,3.24,470,2.703,476,2.395,477,0.874,485,2.227,487,3.174,488,2.458,492,1.624,495,3.611,497,2.211,511,1.674,518,3.162,529,2.885,532,2.101,539,2.008,540,2.542,541,2.211,543,2.211,547,2.342,552,2.665,569,1.29,572,4.097,575,2.858,576,1.788,577,1.624,578,1.502,582,2.227,610,2.342,614,4.074,620,2.211,621,3.409,632,3.779,633,2.101,635,1.624,638,2.968,639,2.008,640,1.853,642,2.342,643,1.384,652,3.625,669,4.676,673,2.211,690,2.342,693,2.506,695,2.506,697,2.506,699,2.669,700,3.365,701,3.488,704,2.342,706,5.726,707,2.506,709,5.301,714,2.506,718,2.506,722,4.086,723,6.05,724,5.301,725,3.076,726,2.506,727,5.301,728,2.211,729,1.674,730,2.506,731,2.342,732,2.211,733,2.506,734,4.16,735,5.726,736,3.409,737,2.506,738,2.506,739,3.864,740,2.506,741,3.864,742,2.97,743,5.301,744,4.401,745,2.506,746,2.506,747,2.342,748,2.506,749,2.506,750,2.342,751,2.008,752,2.342,753,2.342,754,2.506,755,2.342,756,2.506,757,2.342,758,2.506,759,2.506,760,3.864,761,2.506,762,2.342,763,2.506,764,2.506,765,4.042,766,2.506,767,2.506,768,2.506,769,2.506,770,2.506,771,4.716,772,4.407,773,2.365,774,3.864,775,3.611,776,2.506,777,5.301,778,3.864,779,5.562,780,2.506,781,3.864,782,3.864,783,3.864,784,3.864,785,3.864,786,2.302,787,3.864,788,2.506,789,2.506,790,2.506,791,2.506,792,2.506,793,2.506,794,2.506,795,3.864,796,2.506,797,2.506,798,1.853,799,1.577,800,2.506,801,2.342,802,1.926,803,2.506,804,1.729,805,2.506,806,2.506,807,2.342,808,1.926,809,3.864,810,1.729,811,2.506,812,4.716,813,2.506,814,2.506,815,2.506,816,2.604,817,2.506,818,2.506,819,2.342,820,3.864,821,2.506,822,3.864,823,2.504,824,2.506,825,4.716,826,2.342,827,2.506,828,2.506,829,2.506,830,2.506,831,2.008,832,2.97,833,2.101,834,2.506,835,1.926,836,2.506,837,3.625,838,2.506,839,2.506,840,2.506,841,4.716,842,0.974,843,2.506,844,2.506,845,4.407,846,2.506,847,2.506,848,2.506]],["title/interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html",[0,1.258,736,3.408]],["body/interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html",[0,1.25,2,1.407,3,0.035,4,0.039,5,0.031,12,2.078,13,0.116,14,0.583,17,0.509,19,0.528,20,0.281,21,0.007,22,1.15,30,0.061,31,0.003,32,0.003,33,0.922,49,0.2,50,0.504,53,0.129,54,1.473,62,1.673,68,0.549,84,1.083,101,0.883,107,1.091,109,2.53,112,0.838,125,3.471,128,2.299,134,2.254,135,0.853,143,1.706,144,2.09,147,2.872,156,2.718,204,1.858,205,0.949,208,1.715,250,2.099,255,2.263,256,1.522,280,1.839,284,3.311,285,4.386,287,3.135,293,1.772,295,3.641,332,1.611,333,1.373,338,1.565,346,2.489,355,2.751,356,0.966,368,1.661,407,2.194,409,2.194,461,3.221,470,2.694,476,2.388,477,0.868,485,2.22,487,3.165,488,2.453,492,1.611,495,3.59,497,2.194,511,1.661,518,3.158,529,2.88,532,2.085,539,1.993,540,2.53,541,2.194,543,2.194,547,2.324,552,2.65,569,1.28,572,3.591,575,2.841,576,1.774,577,1.611,578,1.493,582,2.216,610,2.324,614,4.058,620,2.194,621,3.389,632,3.761,633,2.085,635,1.611,638,2.954,639,1.993,640,1.839,642,2.324,643,1.373,652,3.608,669,4.657,673,2.194,690,2.324,693,2.487,695,2.487,697,2.487,699,2.656,700,3.349,701,3.471,704,2.324,706,5.706,707,2.487,709,5.279,714,2.487,718,2.487,722,4.071,723,5.279,724,5.279,725,3.063,726,2.487,727,6.032,728,2.194,729,1.661,730,2.487,731,2.324,732,2.194,733,2.487,734,3.389,735,5.706,736,4.14,737,5.279,738,5.279,739,3.841,740,2.487,741,3.841,742,2.953,743,5.279,744,4.386,745,2.487,746,2.487,747,2.324,748,2.487,749,2.487,750,2.324,751,1.993,752,2.324,753,2.324,754,2.487,755,2.324,756,2.487,757,2.324,758,2.487,759,2.487,760,3.841,761,2.487,762,2.324,763,2.487,764,2.487,765,4.029,766,2.487,767,2.487,768,2.487,769,2.487,770,2.487,771,4.693,772,4.386,773,2.351,774,3.841,775,3.59,776,2.487,777,5.279,778,3.841,779,5.547,780,2.487,781,3.841,782,3.841,783,3.841,784,3.841,785,3.841,786,2.288,787,3.841,788,2.487,789,2.487,790,2.487,791,2.487,792,2.487,793,2.487,794,2.487,795,3.841,796,2.487,797,2.487,798,1.839,799,1.565,800,2.487,801,2.324,802,1.911,803,2.487,804,1.715,805,2.487,806,2.487,807,2.324,808,1.911,809,3.841,810,1.715,811,2.487,812,4.693,813,2.487,814,2.487,815,2.487,816,2.591,817,2.487,818,2.487,819,2.324,820,3.841,821,2.487,822,3.841,823,2.489,824,2.487,825,4.693,826,2.324,827,2.487,828,2.487,829,2.487,830,2.487,831,1.993,832,2.953,833,2.085,834,2.487,835,1.911,836,2.487,837,3.608,838,2.487,839,2.487,840,2.487,841,4.693,842,0.966,843,2.487,844,2.487,845,4.386,846,2.487,847,2.487,848,2.487]],["title/classes/PolicyCredential.html",[53,0.2,99,2.97]],["body/classes/PolicyCredential.html",[3,0.061,4,0.068,5,0.053,9,0.62,13,0.202,14,0.869,17,0.903,19,0.481,20,0.341,21,0.007,30,0.117,31,0.005,32,0.005,37,3.957,43,0.508,49,0.18,53,0.39,56,2.891,57,1.075,58,3.326,59,4.421,60,4.737,61,5.059,62,2.791,63,1.321,68,1.565,70,1.564,71,4.012,72,5.681,73,2.087,74,2.537,75,2.372,76,2.755,77,1.272,78,4.173,79,4.173,80,4.173,81,3.629,82,2.449,83,3.326,84,2.791,85,4.421,86,4.703,87,3.629,88,5.718,89,4.462,90,2.891,91,3.629,92,3.629,93,2.891,94,3.468,95,2.333,96,3.468,97,2.891,98,2.891,99,5.241,100,3.817,101,2.276,102,5.374,103,2.891,104,3.629,312,4.708,313,5.989,2705,6.985,2706,5.284,2707,5.284,2708,5.284]],["title/classes/PresentationAttachment.html",[53,0.2,900,2.858]],["body/classes/PresentationAttachment.html",[3,0.045,4,0.05,5,0.039,7,1.712,9,0.779,12,2.236,13,0.148,14,0.701,16,1.639,17,0.72,19,0.57,20,0.339,21,0.007,25,2.65,26,1.797,27,1.499,28,2.134,30,0.108,31,0.004,32,0.004,43,0.431,49,0.191,53,0.368,57,0.789,62,2.009,63,1.12,68,1.651,70,1.148,71,4.032,73,1.531,74,2.935,75,2.306,76,2.651,77,0.933,78,1.943,79,3.326,80,3.326,89,3.988,95,2.487,101,1.128,107,1.311,118,2.375,120,0.982,122,2.134,124,1.33,128,2.009,134,1.356,143,2.414,144,1.257,221,1.672,255,2.876,269,2.122,293,0.933,324,1.499,346,1.257,413,1.68,441,2.463,455,1.439,468,4.284,469,1.843,470,2.566,471,3.001,473,2.122,537,2.266,569,1.635,578,1.793,601,2.266,630,1.892,634,4.412,643,1.753,804,2.191,810,2.191,823,2.058,842,1.234,849,1.93,855,1.753,856,1.999,857,3.083,858,3.293,860,3.293,861,1.843,864,3.554,866,2.323,869,2.375,870,1.635,872,1.635,873,1.356,877,3.293,879,2.191,880,2.191,881,1.599,882,2.375,883,1.305,884,1.635,885,2.862,886,4.586,887,2.266,892,2.824,893,3.631,894,4.355,895,2.99,896,3.749,897,2.545,898,4.78,899,3.547,900,4.412,901,4.355,902,4.78,903,4.78,904,4.78,905,4.106,906,4.257,907,4.355,908,2.545,909,2.545,910,4.02,911,2.545,912,2.545,913,2.545,914,2.545,915,2.058,916,2.545,917,2.545,918,3.183,919,4.412,920,2.545,921,2.058,922,2.545,923,2.904,924,2.545,925,2.545,926,2.058,927,3.376,928,2.349,929,2.266,930,2.191,931,2.349,932,1.999,933,2.545,2709,3.877,2710,3.877,2711,3.877,2712,3.877]],["title/entities/PresentationConfig.html",[849,1.372,921,2.504]],["body/entities/PresentationConfig.html",[3,0.038,4,0.042,5,0.033,7,2.196,9,0.891,12,2.38,13,0.125,14,0.619,16,1.775,17,0.948,19,0.558,20,0.345,21,0.007,25,1.81,26,2.305,27,1.923,28,1.884,30,0.102,31,0.003,32,0.003,43,0.56,49,0.181,53,0.352,62,1.774,63,1.455,68,1.642,70,0.971,71,3.856,73,1.295,74,2.834,75,2.185,76,2.511,77,0.789,78,1.643,79,3.012,80,3.012,89,3.717,95,2.196,101,0.954,107,1.561,118,2.097,120,0.83,122,1.884,124,1.707,128,2.572,134,1.147,143,2.441,144,1.613,221,1.414,255,2.649,269,1.794,293,1.446,324,1.268,346,1.613,413,1.997,441,2.49,455,1.846,468,4.639,469,2.364,470,2.935,471,1.483,473,2.722,537,2.907,569,1.382,578,1.583,601,2.907,630,1.6,634,4.369,643,1.483,804,2.81,810,2.81,823,2.64,842,1.583,849,1.951,851,1.558,855,2.718,856,3.098,857,3.671,858,3.512,860,3.921,861,2.364,862,3.265,864,3.964,866,2.766,868,1.853,869,2.829,870,2.097,872,2.097,873,1.74,877,3.512,879,2.81,880,2.81,881,1.352,882,2.097,883,1.104,884,1.382,885,2.592,886,5.503,887,1.916,892,2.493,893,3.289,894,3.265,895,2.64,896,3.79,897,2.152,898,4.982,899,2.064,900,4.064,901,2.152,902,4.403,903,4.403,904,4.403,905,4.029,906,3.921,907,3.944,908,2.152,909,2.152,910,3.641,911,2.152,912,2.152,913,2.152,914,2.152,915,1.74,916,2.152,917,2.152,918,2.81,919,4.599,920,2.152,921,2.64,922,3.265,923,3.717,924,3.265,925,3.265,926,1.74,927,3.109,928,3.641,929,2.907,930,2.81,931,3.641,932,2.564,933,2.152,1134,2.369,1138,2.921,1171,2.686,1175,2.51,1998,2.921,2713,3.279,2714,3.279,2715,3.279,2716,3.279,2717,3.279,2718,3.279,2719,3.279,2720,3.279,2721,3.279,2722,3.279,2723,3.279,2724,3.279,2725,3.279,2726,3.279,2727,3.279]],["title/classes/PresentationConfigCreateDto.html",[53,0.2,2728,3.408]],["body/classes/PresentationConfigCreateDto.html",[3,0.082,4,0.092,5,0.072,14,0.882,21,0.007,30,0.092,31,0.006,32,0.006,37,3.992,49,0.193,53,0.3,57,1.442,82,3.285,120,1.795,135,2.358,250,1.889,293,2.021,460,4.143,470,2.741,663,5.426,855,3.798,856,4.329,921,3.762,1202,5.426,1204,4.869,1505,3.879,2728,6.068,2729,6.316,2730,8.399,2731,5.806]],["title/classes/PresentationDuringIssuanceConfig.html",[53,0.2,579,2.97]],["body/classes/PresentationDuringIssuanceConfig.html",[0,1.413,3,0.061,4,0.068,5,0.054,9,0.622,12,1.834,13,0.202,14,0.87,17,0.575,19,0.481,20,0.337,21,0.007,30,0.117,31,0.005,32,0.005,43,0.344,49,0.18,53,0.384,57,1.078,63,0.895,70,1.569,73,2.093,74,2.269,75,2.338,76,2.653,77,1.275,84,2.972,98,2.9,107,2.071,109,3.93,115,3.607,122,2.968,123,2.732,124,2.859,128,2.496,130,2.85,135,1.965,143,2.85,144,2.541,156,3.653,284,4.314,288,2.049,333,3.769,470,3.223,560,3.21,561,4.406,562,3.336,563,5.247,564,4.933,569,2.234,570,3.829,571,4.807,572,3.607,573,4.807,574,3.478,575,3.21,576,5.064,577,3.714,578,2.228,579,5.247,580,4.807,581,4.593,582,2.706,583,4.406,584,3.21,585,3.64,586,3.64,587,3.21,588,3.336,589,3.478,2732,5.3]],["title/controllers/PresentationManagementController.html",[157,1.448,2733,3.611]],["body/controllers/PresentationManagementController.html",[3,0.045,4,0.051,5,0.04,9,0.46,12,2.242,13,0.149,16,1.747,17,0.794,19,0.45,20,0.332,21,0.007,25,1.424,30,0.051,31,0.004,32,0.004,39,1.32,43,0.476,45,1.822,46,1.257,48,1.995,49,0.206,50,0.65,53,0.166,54,1.335,62,1.397,63,1.235,107,1.885,112,1.566,115,2.925,120,0.992,128,1.397,135,2.181,145,2.288,157,1.202,159,1.424,208,2.212,250,1.277,255,1.546,288,3.539,291,3.9,295,4.388,322,2.946,324,1.514,325,2.89,343,4.1,346,2.827,355,3.299,372,3.542,373,4.1,375,4.648,376,2.57,389,2.259,392,4.343,395,2.505,424,2.078,470,3.372,476,2.164,477,1.119,483,4.139,485,1.71,492,2.078,529,1.84,572,3.44,604,1.91,643,2.566,647,2.194,655,3.207,676,3.724,700,3.9,873,1.37,880,3.206,1131,3.206,1185,2.768,1209,3.206,1223,1.729,1226,3.316,1234,2.925,1251,4.1,1252,3.316,1260,2.689,1380,2.689,1386,2.372,1387,2.372,1388,2.465,1389,2.465,1392,3.9,1393,3.572,1394,3.437,1401,2.689,1505,3.105,1615,2.829,1848,2.829,1872,3.207,2042,4.38,2108,5.945,2109,3.489,2111,3.489,2112,5.055,2113,4.38,2114,3.489,2118,3.207,2119,4.38,2122,2.689,2125,3.489,2126,3.489,2127,5.055,2128,2.997,2129,6.519,2130,3.489,2131,5.466,2132,3.489,2133,5.055,2134,4.343,2135,3.489,2151,3.489,2152,3.489,2153,3.489,2154,3.489,2155,3.489,2156,3.489,2157,3.489,2560,3.897,2583,4.201,2596,3.207,2601,3.207,2728,5.287,2733,4.343,2734,3.489,2735,5.674,2736,5.945,2737,3.916,2738,3.916,2739,3.916,2740,3.916,2741,6.199,2742,3.916,2743,3.916,2744,3.916,2745,3.916,2746,3.916,2747,3.916,2748,3.916,2749,3.489,2750,3.916,2751,3.916,2752,3.916,2753,3.916,2754,3.916,2755,3.916,2756,3.916,2757,3.916,2758,3.916,2759,3.916,2760,3.916,2761,3.916,2762,3.916,2763,3.916,2764,3.916]],["title/classes/PresentationRequest.html",[53,0.2,2741,3.611]],["body/classes/PresentationRequest.html",[3,0.065,4,0.073,5,0.057,9,0.664,12,2.415,13,0.216,14,0.908,16,1.642,17,0.792,19,0.448,20,0.348,21,0.007,27,2.822,30,0.094,31,0.005,32,0.005,43,0.525,49,0.167,53,0.309,57,1.15,63,1.365,74,2.367,75,2.082,77,1.36,107,2.108,121,3.193,122,2.765,123,3.762,124,2.504,128,3.287,143,2.941,147,3.658,346,3.06,460,4.266,469,3.469,470,3.564,569,2.383,572,2.913,668,3.558,676,5.305,932,3.762,1185,3.944,1573,5.274,2119,4.79,2122,5.553,2131,4.629,2503,6.188,2510,5.978,2560,5.553,2741,5.587,2765,6.539,2766,5.652,2767,5.652,2768,5.652,2769,5.652,2770,7.299,2771,5.978]],["title/interfaces/PresentationRequestOptions.html",[0,1.258,2591,3.611]],["body/interfaces/PresentationRequestOptions.html",[0,1.784,2,3.101,3,0.077,4,0.086,5,0.068,9,0.785,12,2.288,13,0.255,14,1.009,17,1.046,19,0.536,20,0.297,21,0.007,27,3.137,30,0.086,31,0.005,32,0.005,49,0.154,107,1.887,128,3.371,143,3.302,346,2.63,460,4.741,518,3.305,569,2.821,932,4.181,2591,6.947,2765,5.121,2772,5.961,2773,7.227]],["title/modules/PresentationsModule.html",[172,1.502,2576,3.096]],["body/modules/PresentationsModule.html",[3,0.072,4,0.081,5,0.064,21,0.007,30,0.081,31,0.005,32,0.005,49,0.219,50,1.042,53,0.266,82,2.91,159,2.838,172,2.702,174,2.772,175,3.147,176,3.332,177,3.332,178,3.063,179,4.254,180,4.254,197,4.141,198,3.332,199,2.984,202,3.528,431,3.669,432,2.589,921,3.332,2167,5.12,2173,5.358,2174,3.547,2575,6.951,2576,6.311,2583,6.156,2731,5.142,2733,6.497,2749,5.594,2774,5.594,2775,5.594,2776,5.594,2777,5.594,2778,6.724,2779,6.279,2780,5.594,2781,6.279,2782,6.279,2783,6.279]],["title/injectables/PresentationsService.html",[33,0.928,2583,2.97]],["body/injectables/PresentationsService.html",[3,0.023,4,0.025,5,0.057,7,2.669,9,0.791,12,0.868,13,0.075,14,0.412,16,2.126,17,0.697,19,0.565,20,0.272,21,0.007,22,1.621,23,0.451,30,0.025,31,0.002,32,0.002,33,0.651,35,0.732,39,0.77,43,0.505,45,1.803,46,1.244,48,1.888,49,0.202,50,0.327,53,0.181,54,1.669,62,0.703,68,1.161,70,0.584,77,0.475,82,0.914,95,1.462,107,1.941,112,1.383,114,1.615,130,0.717,135,1.698,153,1.047,202,2.266,204,2.083,205,0.616,217,1.242,218,1.294,220,1.079,221,1.428,250,1.944,254,2.771,293,2.094,295,2.831,303,1.425,324,0.763,346,1.073,349,1.425,356,2.475,378,0.962,389,2.495,395,2.212,413,2.134,432,0.813,457,3.62,462,2.712,468,1.757,470,3.316,471,3.049,475,1.181,476,2.186,477,1.432,485,2.385,487,1.764,488,2.113,511,1.812,522,3.332,529,2.273,552,1.87,609,2.173,630,1.615,656,4.952,722,1.153,725,2.034,751,4.216,765,1.812,786,3.921,808,2.084,816,1.497,823,2.659,833,3.442,842,1.362,849,1.759,851,1.574,855,0.892,899,2.694,905,1.757,906,1.935,921,3.844,929,3.533,931,1.195,945,1.242,948,1.153,951,2.034,990,2.173,996,1.534,1089,1.294,1129,2.392,1185,2.95,1198,3.892,1199,2.173,1209,4.092,1222,2.512,1223,2.466,1226,3.94,1228,2.95,1229,3.62,1234,1.707,1235,1.659,1236,5.522,1237,1.425,1241,3.036,1245,1.425,1250,3.62,1251,1.425,1252,1.153,1254,2.392,1255,1.079,1256,2.712,1257,1.425,1258,1.615,1260,1.355,1262,1.425,1263,1.425,1264,2.712,1266,3.835,1267,1.615,1268,1.425,1269,2.392,1270,1.425,1271,1.425,1272,1.425,1273,1.425,1274,3.504,1275,2.006,1276,1.615,1277,1.615,1278,2.274,1279,1.615,1280,4.368,1281,2.084,1282,1.615,1283,1.51,1284,1.615,1285,1.615,1286,1.615,1288,2.712,1289,1.615,1290,1.51,1291,1.615,1292,1.615,1294,1.615,1295,1.615,1296,1.757,1297,1.615,1298,1.615,1299,1.51,1300,1.615,1301,1.615,1302,1.51,1303,1.615,1304,1.615,1308,1.425,1309,2.006,1310,1.615,1311,1.425,1312,1.615,1314,1.294,1315,1.294,1317,1.615,1325,1.425,1326,1.615,1347,1.87,1449,3.812,1451,4.822,1452,1.51,1453,1.51,1456,5.724,1457,1.51,1458,4.642,1498,2.95,1515,3.812,1522,1.355,1555,5.697,1557,1.355,1559,6.241,1634,2.392,1639,1.425,1643,1.615,1644,1.017,1645,1.355,1790,3.289,1935,1.615,2048,4.152,2070,1.757,2080,1.757,2092,1.757,2094,1.757,2095,1.757,2174,1.114,2257,1.51,2335,5.066,2367,1.294,2440,2.392,2550,2.712,2583,3.155,2601,1.615,2728,4.035,2731,1.615,2736,3.812,2784,1.757,2785,3.311,2786,6.742,2787,6.425,2788,4.279,2789,5.011,2790,3.311,2791,4.279,2792,3.311,2793,4.279,2794,3.311,2795,1.615,2796,4.974,2797,5.011,2798,3.311,2799,3.311,2800,2.95,2801,3.311,2802,3.311,2803,1.972,2804,2.712,2805,3.311,2806,1.972,2807,1.972,2808,3.311,2809,1.972,2810,1.972,2811,5.011,2812,4.464,2813,1.972,2814,1.972,2815,5.585,2816,5.011,2817,1.972,2818,3.311,2819,3.311,2820,1.972,2821,5.585,2822,1.972,2823,3.311,2824,1.972,2825,4.279,2826,2.534,2827,1.972,2828,3.311,2829,1.972,2830,3.311,2831,1.972,2832,3.311,2833,1.51,2834,1.355,2835,1.972,2836,1.972,2837,1.972,2838,3.311,2839,1.972,2840,1.972,2841,1.972,2842,4.279,2843,1.972,2844,3.311,2845,1.972,2846,1.972,2847,1.615,2848,1.972,2849,1.972,2850,1.972,2851,1.972,2852,1.972,2853,1.972,2854,1.972,2855,1.972,2856,1.972,2857,1.972,2858,1.972,2859,1.972,2860,3.311,2861,1.972,2862,1.972,2863,1.972,2864,1.972,2865,1.972,2866,1.972,2867,1.972,2868,1.972,2869,4.279,2870,1.972,2871,1.972,2872,1.972,2873,1.972,2874,3.311,2875,1.615,2876,1.972]],["title/entities/RegistrarEntity.html",[849,1.372,2877,3.408]],["body/entities/RegistrarEntity.html",[3,0.073,4,0.082,5,0.064,13,0.242,14,0.977,19,0.573,20,0.326,21,0.007,30,0.082,31,0.005,32,0.005,43,0.579,49,0.18,53,0.269,63,1.504,68,1.611,293,2.053,413,2.319,441,3.308,849,2.284,851,3.016,862,5.597,866,3.238,868,3.585,869,3.758,870,3.311,872,3.311,873,2.747,881,2.617,882,3.311,883,2.136,884,2.675,885,3.679,2877,5.674,2878,5.653,2879,7.598,2880,7.598,2881,6.346,2882,6.346,2883,6.346,2884,6.346]],["title/modules/RegistrarModule.html",[172,1.502,191,2.97]],["body/modules/RegistrarModule.html",[3,0.071,4,0.079,5,0.062,9,0.721,21,0.007,30,0.079,31,0.005,32,0.005,49,0.212,50,1.018,53,0.26,172,2.674,174,3.709,175,3.077,176,3.258,177,3.258,178,2.995,179,4.211,180,4.211,185,5.229,191,6.163,197,4.083,198,3.258,199,2.918,202,3.983,224,4.028,334,6.3,431,3.587,432,2.531,475,2.744,930,4.346,1222,3.856,1593,5.283,2576,6.074,2582,6.185,2877,4.435,2885,5.469,2886,6.138,2887,5.469,2888,5.469,2889,6.138,2890,6.3,2891,6.138,2892,5.469,2893,6.138,2894,6.138]],["title/injectables/RegistrarService.html",[33,0.928,2582,2.97]],["body/injectables/RegistrarService.html",[3,0.026,4,0.029,5,0.023,7,3.836,9,0.556,11,5.117,13,0.087,14,0.464,16,1.359,17,0.743,19,0.562,20,0.271,21,0.007,24,1.432,28,0.862,30,0.029,31,0.002,32,0.003,33,0.733,35,0.844,39,0.867,43,0.535,45,1.705,46,1.479,48,1.882,49,0.179,50,0.378,53,0.096,54,1.621,62,1.329,68,0.674,93,3.55,101,1.084,107,1.405,108,2.56,124,1.279,130,0.828,135,0.639,156,0.959,204,2.399,205,0.711,221,2.042,250,1.791,254,1.608,255,2.162,256,1.868,280,2.258,284,1.772,293,2.031,295,2.106,324,0.88,325,2.823,332,4.711,338,1.173,345,3.316,346,0.738,355,1.87,356,1.742,359,2.56,366,2.853,368,2.04,389,1.887,413,1.386,414,2.258,432,0.938,455,0.844,475,1.952,476,2.793,477,1.564,485,2.619,487,1.952,488,2.4,491,2.853,492,2.513,497,2.693,498,3.321,529,2.627,609,2.446,634,1.378,643,1.029,698,1.33,699,3.529,713,1.11,729,1.245,801,1.742,802,1.432,816,1.686,823,1.978,854,4.877,857,2.04,861,3.083,883,0.766,896,3.093,906,2.178,928,3.316,929,4.558,930,2.106,947,1.644,952,4.257,998,1.644,1061,1.493,1062,1.978,1073,1.493,1130,2.675,1198,3.93,1209,2.106,1222,1.868,1225,2.56,1226,1.33,1228,2.671,1234,1.921,1246,2.56,1250,2.693,1251,4.687,1252,3.791,1255,1.245,1275,1.378,1306,2.853,1396,2.853,1438,3.955,1464,3.199,1504,3.955,1506,1.742,1511,1.563,1524,2.853,1540,1.864,1557,1.563,1560,1.432,1568,2.853,1593,2.56,1612,1.742,1685,2.027,1790,2.446,1795,3.053,1808,3.053,1815,4.218,1976,3.321,2048,4.456,2147,2.027,2194,2.027,2259,2.027,2269,3.053,2306,4.483,2365,3.321,2367,3.592,2394,2.027,2431,1.563,2550,1.864,2560,3.76,2582,4.084,2583,4.794,2642,2.027,2688,1.864,2771,4.483,2877,1.644,2879,3.321,2880,6.102,2890,7.462,2892,2.027,2895,2.027,2896,3.727,2897,3.321,2898,6.487,2899,8.228,2900,3.727,2901,4.735,2902,6.85,2903,4.735,2904,4.735,2905,3.727,2906,3.727,2907,4.483,2908,5.474,2909,4.735,2910,3.727,2911,2.853,2912,3.727,2913,2.275,2914,2.275,2915,6.487,2916,2.275,2917,2.275,2918,3.727,2919,2.275,2920,3.727,2921,7.092,2922,3.727,2923,2.275,2924,2.275,2925,3.053,2926,2.275,2927,6.487,2928,3.727,2929,3.727,2930,2.275,2931,2.275,2932,3.321,2933,2.275,2934,2.275,2935,3.727,2936,3.727,2937,3.727,2938,2.275,2939,5.474,2940,2.275,2941,2.027,2942,2.275,2943,2.275,2944,3.727,2945,3.727,2946,3.727,2947,3.727,2948,3.727,2949,2.275,2950,2.275,2951,3.053,2952,2.275,2953,2.275,2954,3.053,2955,2.027,2956,2.027,2957,2.275,2958,2.275,2959,2.275,2960,2.275,2961,2.275,2962,2.275,2963,6.487,2964,2.275,2965,2.275,2966,2.275,2967,3.727,2968,3.727,2969,3.727,2970,2.027,2971,2.275,2972,2.275,2973,2.275,2974,2.275,2975,2.275,2976,2.275,2977,2.275,2978,2.275,2979,2.275,2980,2.275,2981,2.275,2982,1.864,2983,2.275,2984,2.275,2985,2.275,2986,2.275,2987,2.275,2988,2.275,2989,5.474,2990,2.275,2991,2.275,2992,2.275,2993,2.275,2994,2.275,2995,2.275,2996,2.275,2997,2.275,2998,2.275,2999,2.275,3000,2.275,3001,4.735,3002,5.474,3003,2.275,3004,3.727,3005,2.275,3006,2.275,3007,3.727,3008,2.275,3009,2.275,3010,2.275,3011,2.275,3012,2.275,3013,2.027,3014,3.727,3015,2.275,3016,2.275,3017,2.275,3018,2.275,3019,2.275,3020,2.275,3021,2.275,3022,3.727,3023,2.275,3024,2.275,3025,2.275,3026,2.275,3027,2.275,3028,2.275]],["title/classes/RegistrationCertificateRequest.html",[53,0.2,896,2.665]],["body/classes/RegistrationCertificateRequest.html",[3,0.075,4,0.084,5,0.066,7,3.962,9,0.76,12,2.083,13,0.247,14,0.989,16,1.936,17,0.862,19,0.488,20,0.291,21,0.007,27,3.074,30,0.084,31,0.005,32,0.005,43,0.517,49,0.182,53,0.337,57,1.317,63,1.342,74,2.577,75,2.048,77,1.558,122,3.259,337,5.46,355,3.637,460,4.646,469,3.778,601,4.646,668,4.074,678,4.445,687,5.766,896,5.07,929,5.244,930,4.491,3029,7.665,3030,8.604,3031,6.472,3032,6.472]],["title/modules/ResolverModule.html",[172,1.502,2778,3.408]],["body/modules/ResolverModule.html",[3,0.079,4,0.088,5,0.069,21,0.007,30,0.088,31,0.005,32,0.005,49,0.202,50,1.136,53,0.29,172,2.806,174,3.022,175,3.431,176,3.633,177,3.633,178,3.339,179,4.419,180,4.419,197,4.365,198,3.633,199,3.253,202,3.095,2173,5.649,2174,3.867,2778,6.942,2796,6.789,3033,6.098,3034,6.098,3035,6.098,3036,6.845,3037,6.845]],["title/injectables/ResolverService.html",[33,0.928,2796,3.24]],["body/injectables/ResolverService.html",[3,0.059,4,0.066,5,0.052,7,2.253,9,0.599,13,0.195,17,0.74,20,0.25,21,0.007,22,3.11,23,2.015,25,1.856,30,0.066,31,0.005,32,0.005,33,1.342,35,1.894,39,1.588,43,0.444,45,1.699,46,1.172,48,1.561,49,0.202,50,0.847,53,0.216,54,1.538,114,4.387,250,1.847,255,2.015,256,3.421,287,3.734,346,1.654,356,2.172,388,1.973,389,1.985,412,3.518,475,2.434,476,2.493,477,1.458,487,3.385,488,2.579,507,4.179,522,3.244,529,1.654,540,3.888,630,2.489,633,3.505,722,2.982,725,4.343,765,3.734,786,3.329,1019,3.687,1306,5.223,1336,3.734,1458,3.687,1519,4.931,1634,5.932,1644,2.63,1687,6.08,2158,3.687,2174,2.883,2335,6.362,2367,4.479,2400,6.08,2795,4.179,2796,4.687,2800,6.08,2833,5.223,2834,3.505,3013,4.546,3038,4.546,3039,6.825,3040,6.825,3041,5.103,3042,6.825,3043,5.103,3044,6.08,3045,6.825,3046,5.103,3047,5.103,3048,4.546,3049,5.103,3050,5.103,3051,5.103,3052,5.103,3053,5.103,3054,5.103,3055,5.103,3056,5.103,3057,5.103,3058,5.103,3059,5.103,3060,5.103,3061,5.103,3062,5.103,3063,6.825,3064,5.103,3065,5.103,3066,5.103,3067,5.103,3068,5.103,3069,5.103,3070,5.103,3071,5.103,3072,5.103,3073,5.103]],["title/classes/RootOfTrustPolicy.html",[53,0.2,90,2.581]],["body/classes/RootOfTrustPolicy.html",[3,0.062,4,0.07,5,0.055,9,0.635,13,0.206,14,0.882,19,0.516,20,0.334,21,0.007,30,0.118,31,0.005,32,0.005,37,4.147,43,0.461,49,0.182,53,0.392,56,2.961,57,1.101,58,3.407,59,4.473,60,4.992,61,5.332,62,3.112,63,1.198,65,3.91,68,1.577,70,1.602,71,4.043,72,5.726,73,2.137,74,2.567,75,2.384,76,2.777,77,1.302,78,3.968,79,3.968,80,3.968,81,3.717,82,2.508,83,3.407,84,2.824,85,4.748,86,4.473,87,3.717,88,5.771,89,4.497,90,3.883,91,3.717,92,3.717,93,2.961,94,3.552,95,2.39,96,3.552,97,2.961,98,2.961,99,4.984,100,2.64,101,1.574,102,3.717,103,2.961,104,3.717,3074,5.412,3075,5.412,3076,5.412,3077,5.412]],["title/classes/S3FileStorage.html",[53,0.2,3078,3.611]],["body/classes/S3FileStorage.html",[3,0.05,4,0.056,5,0.044,12,1.145,13,0.167,17,0.955,19,0.595,20,0.307,21,0.007,22,2.687,23,2.2,30,0.056,31,0.004,32,0.004,39,1.428,43,0.546,45,2.092,46,1.443,48,1.854,49,0.176,53,0.185,54,1.621,57,0.889,68,0.79,130,2.233,144,2.3,250,1.731,254,1.886,355,3.2,356,1.954,476,3.001,477,1.754,485,2.138,488,2.532,499,2.869,511,2.392,519,2.752,529,2.627,712,3.468,713,2.994,996,2.845,1223,2.71,1252,3.587,1336,2.392,1834,4.655,1836,6.32,1837,4.698,1838,5.429,1839,4.698,1841,5.027,1843,5.468,1845,4.698,1847,3.58,1848,5.125,1849,6.201,1850,5.81,1851,5.558,1853,5.125,1854,4.466,1855,3.58,1858,3.002,1861,3.894,1862,4.698,1927,3.58,2325,4.435,2388,3.58,2405,5.468,3078,4.698,3079,3.894,3080,4.371,3081,6.853,3082,7.975,3083,7.094,3084,4.371,3085,5.125,3086,4.371,3087,4.371,3088,4.371,3089,4.371,3090,4.371,3091,6.138,3092,7.094,3093,7.094,3094,6.138,3095,4.698,3096,3.58,3097,3.894,3098,3.894,3099,4.371,3100,8.103,3101,8.401,3102,4.371,3103,6.138,3104,4.371,3105,4.371,3106,4.371,3107,4.371,3108,4.371,3109,4.371,3110,4.371,3111,4.371,3112,4.371,3113,4.371,3114,4.371,3115,4.371,3116,4.371,3117,4.371,3118,4.371,3119,4.371,3120,4.371]],["title/classes/SchemaResponse.html",[53,0.2,1170,2.97]],["body/classes/SchemaResponse.html",[3,0.069,4,0.078,5,0.061,9,1.027,13,0.23,14,1.122,17,0.999,19,0.566,20,0.342,21,0.007,30,0.078,31,0.005,32,0.005,43,0.599,49,0.138,53,0.322,57,1.225,63,1.555,71,3.86,74,2.701,75,2.146,77,1.45,122,3.155,134,2.913,322,3.356,459,3.521,630,3.709,678,5.222,873,2.107,962,3.438,1131,5.096,1170,4.786,1180,6.138,1302,5.819,1405,7.158,1786,5.367,3121,8.33,3122,6.024,3123,8.33,3124,8.33,3125,6.024,3126,6.024,3127,6.024,3128,6.024,3129,6.024,3130,6.024,3131,6.024,3132,6.024,3133,6.024,3134,6.024]],["title/entities/Session.html",[518,1.65,849,1.372]],["body/entities/Session.html",[3,0.032,4,0.035,5,0.028,9,0.322,12,2.341,13,0.105,14,0.759,16,1.775,17,1.023,19,0.563,20,0.338,21,0.007,26,2.49,27,2.078,30,0.069,31,0.003,32,0.003,43,0.595,49,0.176,53,0.116,63,1.545,68,1.722,101,2.151,107,1.643,118,1.828,120,0.695,123,2.235,124,1.488,128,2.177,140,2.979,143,2.417,144,1.979,145,3.567,146,4.361,156,1.828,167,3.864,168,2.302,288,2.078,293,1.293,333,1.961,346,1.406,353,4.164,395,2.934,408,2.979,413,1.873,441,2.265,468,3.239,469,2.901,470,2.964,473,2.373,493,3.319,518,3.101,522,2.061,569,1.158,570,2.373,572,3.146,578,2.511,583,2.73,601,3.567,614,3.383,621,4.41,643,1.961,652,3.383,660,4.788,786,1.34,831,5.579,832,3.383,842,1.943,845,4.113,849,1.933,851,1.305,855,2.43,856,2.77,857,3.865,858,3.14,860,3.567,861,2.061,862,5.178,864,4.628,868,1.552,869,2.573,870,1.828,872,1.828,873,2.135,877,3.14,879,2.45,880,2.45,881,1.132,882,1.828,883,0.925,884,1.158,885,3.485,905,2.302,927,3.427,932,2.235,996,1.273,1062,2.852,1134,5.343,1185,2.978,1216,4.853,1222,1.377,1237,4.41,1309,1.664,1315,2.846,1335,1.664,1358,4.643,1439,1.984,1448,1.886,1451,1.605,1457,2.102,1458,1.984,1782,3.552,1830,2.249,1993,3.883,1995,4.788,2110,3.691,2477,3.552,2518,5.443,2560,3.691,2587,3.864,2596,2.249,2620,4.788,2670,4.788,2676,4.788,3135,2.102,3136,4.401,3137,5.374,3138,2.747,3139,2.747,3140,2.747,3141,4.337,3142,2.747,3143,2.747,3144,4.788,3145,2.747,3146,4.337,3147,2.747,3148,2.747,3149,2.747,3150,2.747,3151,2.747,3152,2.747,3153,2.747,3154,2.747,3155,5.374,3156,2.747,3157,2.747,3158,2.747,3159,2.747,3160,2.747,3161,4.999,3162,2.747,3163,2.747,3164,4.41,3165,2.747,3166,2.747,3167,2.747,3168,4.337,3169,4.337,3170,2.747,3171,2.747,3172,4.337,3173,2.747,3174,3.864,3175,3.133,3176,3.864,3177,1.886,3178,2.747,3179,2.747,3180,2.747]],["title/controllers/SessionController.html",[157,1.448,3181,3.611]],["body/controllers/SessionController.html",[3,0.056,4,0.062,5,0.049,9,0.772,13,0.184,16,2.117,17,0.811,19,0.493,20,0.307,21,0.007,27,1.866,30,0.062,31,0.004,32,0.004,39,1.529,43,0.522,45,1.861,46,1.378,48,1.982,49,0.21,50,0.801,53,0.204,54,1.605,63,1.355,101,1.912,112,2.063,120,1.222,157,1.481,159,1.756,168,3.489,288,3.428,325,2.952,355,1.906,356,2.554,372,2.562,376,3.168,389,2.442,395,2.902,414,3.982,424,2.562,436,4.749,437,2.727,477,1.379,483,4.008,485,1.981,518,3.418,604,2.355,638,3.853,647,2.542,1223,2.131,1234,3.388,1235,3.295,1241,4.861,1380,3.315,1386,2.924,1387,2.924,1388,3.038,1389,3.038,1392,2.821,1393,3.038,1394,2.924,1401,3.315,1402,3.694,1430,4.368,1462,3.315,2042,4.314,2307,3.953,2530,5.031,2826,5.031,3177,4.515,3181,5.031,3182,4.3,3183,7.475,3184,8.025,3185,6.573,3186,6.573,3187,4.827,3188,4.827,3189,4.827,3190,4.827,3191,4.827,3192,4.827,3193,4.827,3194,4.827,3195,5.798,3196,4.827,3197,4.827,3198,3.953,3199,3.694,3200,5.031,3201,4.827,3202,3.953,3203,4.827,3204,4.827,3205,4.827,3206,4.827,3207,4.827,3208,4.827,3209,4.827,3210,4.827,3211,4.827]],["title/interfaces/SessionLogContext.html",[0,1.258,2598,3.096]],["body/interfaces/SessionLogContext.html",[0,1.582,2,2.75,3,0.068,4,0.077,5,0.06,9,0.697,13,0.226,14,0.936,16,1.694,17,0.974,19,0.593,20,0.341,21,0.007,23,1.723,26,3.49,27,3.364,30,0.077,31,0.005,32,0.005,43,0.386,47,5.207,168,3.996,257,3.736,281,5.477,293,2.094,333,4.06,413,2.095,518,3.299,519,4.74,570,4.913,577,4.765,951,3.579,1216,4.942,1961,6.168,2598,4.942,2604,6.659,2605,7.634,2773,6.709,2897,5.287,3212,5.441,3213,5.287,3214,5.287,3215,5.934,3216,7.53,3217,7.53,3218,7.53,3219,7.53]],["title/injectables/SessionLoggerInterceptor.html",[33,0.928,2168,2.97]],["body/injectables/SessionLoggerInterceptor.html",[3,0.042,4,0.047,5,0.037,9,0.833,12,2.346,13,0.14,14,0.674,17,0.698,20,0.29,21,0.007,23,0.841,28,2.051,30,0.047,31,0.004,32,0.004,33,1.065,35,1.364,39,1.26,42,5.129,43,0.461,45,1.601,46,1.219,47,4.986,48,1.624,49,0.188,50,0.61,53,0.156,54,1.42,107,1.26,130,1.336,144,2.725,168,3.768,204,2.829,205,1.148,217,2.313,218,2.411,250,2.053,254,1.585,257,4.469,281,4.765,284,3.995,287,2.01,288,1.421,289,4.825,291,2.147,293,1.303,296,3.273,324,1.421,325,1.451,331,2.01,346,2.086,355,3.536,389,2.304,398,2.812,471,2.449,477,2.029,485,2.586,487,1.515,509,2.01,518,2.94,533,3.009,609,3.554,647,3.062,816,2.909,951,3.598,1198,4.586,1199,4.222,1229,5.722,1299,2.812,1308,2.654,1309,3.897,1325,3.913,1336,4.142,1505,2.963,1715,3.009,1966,4.145,2168,4.469,2199,3.273,2200,7.645,2203,3.009,2208,3.273,2449,2.812,2450,2.654,2456,3.913,2534,3.009,2588,4.436,2589,3.009,2603,5.434,2604,5.794,2671,5.731,2688,3.009,2834,2.523,2907,5.269,2911,5.434,2951,4.436,2970,4.825,2982,5.815,3175,2.654,3212,5.469,3220,3.273,3221,5.416,3222,5.129,3223,5.416,3224,5.416,3225,5.416,3226,5.416,3227,5.416,3228,7.099,3229,3.674,3230,5.416,3231,5.416,3232,5.416,3233,5.416,3234,7.57,3235,5.416,3236,5.416,3237,3.674,3238,5.416,3239,6.433,3240,5.416,3241,7.099,3242,5.416,3243,3.674,3244,3.674,3245,3.674,3246,4.436,3247,3.674,3248,3.674,3249,3.273,3250,3.674,3251,3.674,3252,3.674,3253,3.674,3254,3.674,3255,3.674,3256,3.674,3257,3.674,3258,3.674,3259,3.674,3260,3.674,3261,3.674,3262,6.433,3263,3.674,3264,3.674,3265,7.099,3266,3.674,3267,3.674,3268,3.674,3269,3.674,3270,3.273,3271,3.674,3272,3.674,3273,3.674,3274,3.273,3275,3.273,3276,2.812,3277,3.273,3278,3.674,3279,3.674,3280,3.674,3281,3.674,3282,3.674,3283,3.674,3284,5.416,3285,3.674]],["title/injectables/SessionLoggerService.html",[33,0.928,2169,2.858]],["body/injectables/SessionLoggerService.html",[3,0.033,4,0.037,5,0.029,9,0.532,12,1.459,13,0.111,14,0.563,17,0.907,19,0.522,20,0.315,21,0.007,28,2.86,30,0.037,31,0.003,32,0.003,33,0.891,35,1.077,39,1.054,43,0.56,45,2.082,46,1.479,47,5.925,48,1.913,49,0.144,50,0.482,53,0.123,54,1.673,107,1.054,204,2.661,205,0.907,217,1.827,218,1.905,250,1.253,254,1.252,257,4.551,284,2.991,325,2.199,333,3.63,353,3.243,389,1.317,408,4.322,413,0.735,470,1.751,475,1.615,477,1.798,485,2.355,518,3.213,578,2.301,582,1.751,631,4.962,647,2.638,658,4.035,712,4.638,816,4.107,861,1.38,951,2.991,1198,2.744,1229,5.644,1308,3.272,1309,4.732,1311,3.272,1315,1.905,1325,5.644,1358,4.133,1538,5.153,1966,4.816,1973,4.035,2169,3.812,2431,5.638,2437,3.272,2449,2.222,2450,2.097,2456,6.601,2477,5.588,2589,3.71,2598,6.246,2605,6.185,2606,2.586,2907,4.562,2911,3.467,2951,3.71,3144,6.079,3175,2.097,3212,6.296,3222,3.272,3274,4.035,3275,7.916,3276,3.467,3277,4.035,3286,2.586,3287,6.292,3288,4.529,3289,4.529,3290,5.57,3291,5.57,3292,4.529,3293,5.57,3294,4.529,3295,5.57,3296,5.57,3297,5.57,3298,4.529,3299,6.292,3300,2.903,3301,4.529,3302,4.529,3303,9.684,3304,2.903,3305,2.903,3306,6.823,3307,2.903,3308,2.903,3309,2.903,3310,4.529,3311,2.903,3312,5.57,3313,2.903,3314,2.903,3315,4.529,3316,2.903,3317,2.903,3318,2.903,3319,2.903,3320,2.903,3321,2.903,3322,2.903,3323,4.529,3324,2.903,3325,2.903,3326,2.903,3327,8.209,3328,8.209,3329,2.903,3330,7.812,3331,2.903,3332,2.903,3333,2.903,3334,2.903,3335,2.903,3336,2.903,3337,2.903,3338,2.903,3339,2.903,3340,2.903,3341,4.529]],["title/modules/SessionModule.html",[172,1.502,192,2.858]],["body/modules/SessionModule.html",[3,0.07,4,0.078,5,0.062,9,0.713,21,0.007,30,0.078,31,0.005,32,0.005,46,1.043,49,0.215,50,1.008,53,0.257,159,2.78,172,2.662,174,2.682,175,3.045,176,3.224,177,3.224,178,2.964,179,4.191,180,4.191,192,5.869,197,4.056,198,3.224,199,2.888,202,3.456,288,2.955,395,3.374,423,6.058,431,3.551,432,2.505,433,6.809,434,3.987,435,4.173,436,4.39,437,3.433,438,4.976,453,5.413,454,4.976,455,2.255,518,2.125,638,5.019,1222,3.831,1593,5.249,3177,6.027,3181,6.4,3199,4.65,3202,4.976,3342,5.413,3343,5.413,3344,5.413,3345,6.076,3346,6.076,3347,6.076,3348,6.076,3349,6.076,3350,5.413,3351,5.413]],["title/injectables/SessionPipe.html",[33,0.928,3200,3.611]],["body/injectables/SessionPipe.html",[3,0.072,4,0.081,5,0.064,12,1.648,13,0.24,16,1.757,17,0.847,19,0.522,20,0.286,21,0.007,30,0.081,31,0.005,32,0.005,33,1.536,35,2.334,39,1.817,43,0.508,45,2.115,46,1.341,48,1.439,49,0.195,50,1.044,53,0.266,54,1.562,130,2.288,157,1.93,250,1.415,281,5.348,356,2.486,388,2.432,463,5.604,476,2.754,477,1.798,487,3.22,488,2.354,518,3.257,529,2.039,638,4.799,647,2.432,765,4.274,849,1.83,3199,4.814,3200,5.978,3202,5.152,3352,5.604,3353,7.81,3354,6.29,3355,6.29,3356,7.81,3357,6.29,3358,6.958,3359,7.81,3360,6.29,3361,6.29]],["title/injectables/SessionService.html",[33,0.928,638,2.432]],["body/injectables/SessionService.html",[3,0.036,4,0.041,5,0.032,13,0.12,16,1.888,17,0.87,19,0.549,20,0.293,21,0.007,30,0.041,31,0.003,32,0.003,33,0.947,35,1.167,39,1.121,43,0.555,45,1.996,46,1.377,48,2.078,49,0.189,50,0.521,53,0.133,54,1.604,62,2.663,130,1.143,135,1.353,165,4.508,178,2.35,204,2.52,205,0.982,210,2.574,250,1.92,293,1.978,324,1.215,332,1.668,356,2.089,389,2.44,394,2.406,395,3.822,396,2.8,397,4.291,408,4.022,413,1.662,414,3.976,432,1.296,434,2.063,454,2.574,461,5.763,466,2.574,476,2.807,477,1.377,485,1.979,488,1.452,518,3.25,523,4.861,529,2.295,582,2.264,638,2.483,647,1.862,657,3.686,673,4.231,713,2.35,742,1.979,744,3.032,762,3.686,775,2.406,832,3.032,842,1.864,855,1.421,856,1.62,861,1.494,883,1.058,945,1.979,1062,2.556,1223,2.127,1225,3.308,1228,3.202,1234,3.383,1246,3.308,1255,1.72,1315,3.161,1464,2.815,1505,3.592,1511,3.308,1573,3.48,1999,3.161,2048,5.128,2306,3.945,2431,2.159,2470,2.406,2826,3.686,2847,2.574,3161,5.797,3164,4.231,3175,2.271,3177,5.646,3199,2.406,3350,6.305,3351,6.305,3362,2.8,3363,6.564,3364,4.817,3365,6.564,3366,3.143,3367,7.772,3368,5.856,3369,5.376,3370,3.143,3371,4.817,3372,4.817,3373,6.564,3374,3.143,3375,4.817,3376,6.564,3377,3.143,3378,4.817,3379,3.143,3380,4.817,3381,3.143,3382,3.143,3383,4.817,3384,6.564,3385,3.143,3386,4.817,3387,3.143,3388,4.817,3389,5.848,3390,4.817,3391,4.817,3392,4.291,3393,4.291,3394,4.291,3395,4.291,3396,3.143,3397,4.817,3398,3.143,3399,4.817,3400,3.143,3401,4.817,3402,4.817,3403,2.574,3404,3.143,3405,2.406,3406,4.817,3407,3.143,3408,3.143,3409,3.143,3410,3.143,3411,3.143,3412,4.817,3413,4.817,3414,3.143,3415,4.817,3416,3.143,3417,3.143,3418,4.817,3419,3.143,3420,3.143,3421,3.143,3422,3.143,3423,3.143,3424,4.817,3425,4.817,3426,3.143,3427,4.817,3428,4.817,3429,5.856,3430,4.817,3431,3.143,3432,4.796,3433,4.817,3434,3.143,3435,3.143,3436,5.856,3437,4.817,3438,3.143,3439,3.143,3440,3.143,3441,3.143,3442,3.143,3443,3.143,3444,4.817,3445,3.143,3446,3.143,3447,3.143]],["title/controllers/StatusListController.html",[157,1.448,3448,3.611]],["body/controllers/StatusListController.html",[3,0.075,4,0.084,5,0.066,13,0.248,17,0.704,19,0.53,20,0.315,21,0.007,30,0.084,31,0.005,32,0.005,39,1.854,43,0.422,45,1.617,46,1.115,48,1.823,49,0.198,50,1.078,53,0.275,54,1.299,63,1.096,68,1.174,114,3.169,120,1.645,157,1.994,159,2.363,163,4.089,293,1.917,376,4.263,386,4.263,388,2.512,389,1.889,395,3.805,437,4.501,604,3.169,1347,4.869,1392,5.036,1430,5.036,1462,4.461,3448,6.098,3449,5.229,3450,5.787,3451,6.496,3452,7.098,3453,5.787,3454,5.787,3455,6.496,3456,7.967,3457,6.496,3458,6.496,3459,6.496,3460,5.787,3461,5.787,3462,6.496,3463,6.496]],["title/entities/StatusListEntity.html",[849,1.372,3464,3.408]],["body/entities/StatusListEntity.html",[3,0.059,4,0.066,5,0.052,9,0.599,13,0.195,14,0.849,16,1.535,17,0.74,19,0.504,20,0.322,21,0.007,30,0.066,31,0.005,32,0.005,43,0.572,49,0.176,53,0.216,63,1.486,68,1.592,89,3.518,124,2.341,293,1.851,322,3.013,323,4.134,325,2.695,395,4.259,413,2.343,441,3.047,455,3.268,473,3.734,489,4.931,786,4.175,849,2.388,851,2.425,862,4.479,864,3.329,866,2.814,868,2.883,869,3.461,870,2.877,872,2.877,873,2.387,881,2.104,882,2.877,883,1.718,884,2.151,885,2.944,926,2.708,927,3.163,1134,4.931,1278,5.877,1347,5.397,1451,2.982,1455,3.905,3276,6.549,3449,5.901,3464,4.931,3465,7.365,3466,4.546,3467,7.624,3468,7.69,3469,5.103,3470,5.103,3471,5.103,3472,5.103,3473,5.103,3474,6.08,3475,5.103,3476,5.103,3477,6.825]],["title/modules/StatusListModule.html",[172,1.502,423,3.096]],["body/modules/StatusListModule.html",[3,0.073,4,0.082,5,0.064,21,0.007,30,0.082,31,0.005,32,0.005,49,0.217,50,1.049,53,0.268,159,2.851,172,2.71,174,2.792,175,3.169,176,3.356,177,3.356,178,3.085,179,4.268,180,4.268,185,5.267,197,4.159,198,3.356,199,3.005,202,3.543,224,4.15,395,3.46,423,6.318,431,3.695,432,2.607,437,3.572,1430,5.72,1462,4.343,3448,6.517,3449,4.15,3464,5.662,3478,5.633,3479,5.633,3480,5.633,3481,6.323,3482,6.323,3483,6.981,3484,5.633,3485,4.569,3486,5.633,3487,6.323,3488,6.323]],["title/injectables/StatusListService.html",[33,0.928,1430,2.757]],["body/injectables/StatusListService.html",[3,0.033,4,0.037,5,0.083,9,0.525,13,0.21,16,1.616,17,0.843,19,0.553,20,0.284,21,0.007,30,0.037,31,0.003,32,0.003,33,0.88,35,1.06,39,1.041,43,0.505,45,1.934,46,1.334,48,1.827,49,0.194,50,0.474,53,0.121,54,1.103,84,1.019,95,1.261,107,1.283,112,2.204,114,2.182,204,2.328,205,0.893,220,3.016,221,1.232,250,2.009,255,1.128,281,2.816,293,2.216,322,1.975,356,1.424,389,1.97,395,4.195,410,4.911,413,1.967,414,2.709,418,1.669,432,1.178,437,4.513,455,2.665,475,1.595,476,2.845,477,1.278,485,2.263,487,1.844,488,2.408,518,2.794,522,2.126,523,4.651,529,2.7,539,3.617,552,1.614,555,3.423,558,2.064,578,1.754,635,1.516,698,1.669,699,3.479,713,1.394,722,2.614,729,1.563,742,1.798,744,3.926,765,2.447,786,3.504,799,1.472,879,1.614,883,0.962,945,2.816,996,1.324,1004,2.064,1185,1.394,1208,3.663,1223,1.975,1225,3.072,1226,1.669,1228,3.662,1246,3.072,1252,2.614,1254,4.506,1255,1.563,1275,2.709,1278,3.786,1290,2.186,1347,5.324,1392,2.614,1430,2.614,1439,4.892,1451,2.614,1454,2.545,1455,2.186,1505,4.107,1506,5.947,1511,3.786,1519,2.064,1520,2.186,1522,3.072,1609,3.423,1612,2.186,1616,3.663,1630,2.816,1634,3.231,1639,2.064,1795,3.663,1808,3.663,1862,3.423,1999,1.875,2269,3.663,2307,2.34,2431,1.962,2643,2.545,2646,2.34,2653,2.34,2826,4.774,2932,6.398,2982,3.663,3195,4.506,3276,5.947,3449,5.242,3452,3.985,3453,3.985,3464,4.506,3467,2.545,3474,4.911,3483,3.985,3484,2.545,3485,2.064,3486,2.545,3489,2.545,3490,5.512,3491,4.473,3492,4.473,3493,4.473,3494,5.512,3495,5.512,3496,2.856,3497,2.856,3498,2.856,3499,4.473,3500,4.473,3501,2.856,3502,2.856,3503,2.856,3504,2.856,3505,4.473,3506,6.237,3507,4.473,3508,4.473,3509,4.473,3510,2.856,3511,4.473,3512,2.856,3513,4.473,3514,2.856,3515,4.473,3516,2.856,3517,2.856,3518,2.856,3519,2.856,3520,2.856,3521,2.856,3522,2.856,3523,2.856,3524,2.856,3525,2.856,3526,2.856,3527,2.856,3528,4.473,3529,2.856,3530,2.856,3531,2.856,3532,2.856,3533,6.237,3534,4.473,3535,4.473,3536,2.856,3537,4.473,3538,4.473,3539,2.856,3540,2.856,3541,2.856,3542,4.473,3543,6.771,3544,2.856,3545,2.856,3546,2.856,3547,2.856,3548,2.856,3549,2.856,3550,2.856,3551,4.473,3552,4.473,3553,2.856,3554,2.856,3555,2.856]],["title/entities/StatusMapping.html",[849,1.372,3485,3.408]],["body/entities/StatusMapping.html",[3,0.065,4,0.072,5,0.057,13,0.325,14,0.903,19,0.573,20,0.35,21,0.007,30,0.072,31,0.005,32,0.005,43,0.587,49,0.167,53,0.237,63,1.526,68,1.74,281,5.07,293,1.938,413,2.234,441,3.161,455,2.695,849,2.112,851,2.665,866,3.919,868,3.168,869,3.592,870,3.062,872,3.062,873,2.54,881,3.727,882,3.062,883,1.888,884,2.364,1347,4.55,1439,5.819,3449,6.038,3465,7.536,3485,5.247,3556,4.996,3557,8.824,3558,9.325,3559,5.608,3560,7.262,3561,5.608,3562,5.608,3563,5.608,3564,5.608,3565,5.608]],["title/classes/StatusUpdateDto.html",[53,0.2,3195,3.408]],["body/classes/StatusUpdateDto.html",[3,0.071,4,0.079,5,0.062,13,0.234,14,0.957,16,1.981,17,0.955,18,7.847,19,0.541,20,0.307,21,0.007,30,0.079,31,0.005,32,0.005,43,0.546,49,0.141,53,0.326,57,1.249,63,1.418,73,2.424,74,2.494,75,2.269,77,1.477,101,2.238,107,1.79,147,3.856,281,5.289,288,2.974,395,4.005,455,2.855,518,3.081,578,2.803,823,4.083,895,4.083,940,5.027,1275,4.66,1439,6.07,1999,5.78,3195,5.558,3198,7.214,3449,5.78,3566,5.027,3567,6.138,3568,6.138,3569,6.138,3570,6.138,3571,6.138]],["title/controllers/StorageController.html",[157,1.448,3572,3.611]],["body/controllers/StorageController.html",[3,0.063,4,0.07,5,0.091,9,0.837,13,0.208,17,0.773,19,0.488,20,0.32,21,0.007,23,1.632,30,0.07,31,0.005,32,0.005,39,1.659,43,0.463,45,1.775,46,1.225,48,1.818,49,0.21,50,0.905,53,0.231,54,1.426,63,1.204,68,0.986,120,1.381,157,2.439,159,1.984,207,4.467,208,3.081,288,3.073,300,6.082,325,2.816,372,3.785,373,5.152,388,2.109,389,2.451,413,1.806,424,2.894,471,2.466,475,1.945,477,1.559,483,3.811,488,1.644,604,2.661,1281,5.002,1347,4.029,1386,3.304,1387,3.304,1388,3.433,1389,3.433,1393,3.433,1394,3.304,1853,3.94,1869,5.458,1874,5.531,1891,7.079,1897,7.792,2529,4.467,3270,4.859,3572,5.458,3573,4.859,3574,7.131,3575,5.454,3576,5.454,3577,5.454,3578,5.454,3579,5.454,3580,5.454,3581,7.131,3582,5.454,3583,5.454,3584,7.131,3585,7.131,3586,5.454,3587,7.131,3588,5.454,3589,5.454,3590,5.454,3591,5.454,3592,4.859,3593,5.454,3594,5.454,3595,5.454,3596,5.454,3597,5.454,3598,5.454,3599,5.454,3600,5.454,3601,5.454,3602,5.454,3603,5.454,3604,5.454]],["title/modules/StorageModule.html",[172,1.502,193,3.408]],["body/modules/StorageModule.html",[3,0.067,4,0.075,5,0.059,20,0.212,21,0.007,30,0.075,31,0.005,32,0.005,39,1.347,43,0.376,48,1.325,49,0.219,50,0.961,53,0.245,54,1.636,101,1.684,159,2.106,172,2.603,174,2.556,179,2.902,180,2.902,193,5.908,202,2.618,204,2.651,205,1.809,213,5.356,248,3.977,249,4.431,250,1.303,329,5.674,331,3.168,431,3.384,432,2.387,488,2.465,965,4.183,1828,4.183,1834,4.865,1866,5.674,1867,5.356,1874,5.366,1903,5.158,2332,7.285,2334,7.285,2341,5.158,2372,5.674,2388,4.742,3078,5.674,3081,6.604,3085,5.908,3095,4.431,3096,4.742,3572,5.674,3592,5.158,3605,4.742,3606,5.79,3607,5.79,3608,5.79,3609,5.79,3610,6.258,3611,5.79,3612,5.79,3613,5.158,3614,5.79,3615,5.79,3616,5.79,3617,8.177,3618,5.158,3619,5.79,3620,5.158,3621,5.79,3622,5.158,3623,5.79,3624,5.79,3625,5.79]],["title/controllers/TenantController.html",[157,1.448,429,3.611]],["body/controllers/TenantController.html",[3,0.057,4,0.064,5,0.05,9,0.889,13,0.189,16,2.092,17,0.821,19,0.465,20,0.277,21,0.007,30,0.064,31,0.004,32,0.004,34,3.792,39,1.557,43,0.492,45,1.886,46,1.301,48,1.938,49,0.2,50,0.822,53,0.21,54,1.515,62,2.702,63,1.279,120,1.254,157,2.325,159,1.802,288,3.731,325,2.642,355,2.642,372,4.02,381,4.413,388,1.916,389,2.36,395,3.581,413,2.453,427,4.769,429,5.12,483,4.204,484,3.251,487,2.759,488,2.283,525,5.798,574,3.251,604,2.417,647,1.916,722,3.91,826,3.792,938,6.209,1223,3.74,1234,3.449,1235,3.353,1380,3.402,1386,3.001,1387,3.001,1392,3.91,1394,3.001,1401,3.402,1599,4.057,1630,5.107,2042,4.391,3454,4.413,3460,4.413,3626,4.413,3627,5.96,3628,5.96,3629,5.96,3630,4.954,3631,4.954,3632,4.954,3633,4.954,3634,4.954,3635,4.954,3636,4.954,3637,4.954,3638,4.954,3639,4.954,3640,4.954,3641,4.954,3642,5.48,3643,4.954,3644,4.954,3645,6.69,3646,4.954,3647,4.954,3648,4.954,3649,4.954,3650,4.954,3651,4.954,3652,4.954]],["title/entities/TenantEntity.html",[441,1.751,849,1.372]],["body/entities/TenantEntity.html",[3,0.077,4,0.086,5,0.067,9,0.781,13,0.254,14,1.005,16,1.959,19,0.557,20,0.296,21,0.007,26,3.747,27,3.126,30,0.086,31,0.005,32,0.005,43,0.525,49,0.153,53,0.282,63,1.365,68,1.461,395,4.098,413,2.39,441,3,849,2.352,851,3.162,864,3.246,881,3.334,883,2.24,1335,4.897,1609,6.188,1830,7.133,2079,6.622,3653,5.927,3654,6.653,3655,6.653,3656,6.653]],["title/injectables/TenantService.html",[33,0.928,427,2.97]],["body/injectables/TenantService.html",[0,1.257,3,0.035,4,0.039,5,0.031,9,0.359,13,0.117,14,0.586,16,2.048,17,0.835,19,0.574,20,0.291,21,0.007,30,0.061,31,0.003,32,0.003,33,0.927,35,1.135,39,1.097,43,0.559,45,1.916,46,1.322,48,1.939,49,0.204,50,0.507,53,0.129,54,1.539,68,0.553,101,1.882,107,1.505,109,2.082,112,0.844,130,1.112,141,2.968,165,3.238,204,2.394,205,0.955,250,1.661,284,2.241,288,3.277,293,1.962,324,1.823,332,1.622,333,2.132,345,2.856,389,1.882,395,1.35,413,2.391,427,2.968,432,1.261,434,2.006,435,2.1,436,2.209,437,1.727,441,1.135,442,2.504,456,6.617,475,2.053,476,2.951,477,1.347,483,2.925,484,2.006,485,2.744,487,1.944,488,1.421,509,2.58,529,2.789,630,2.3,698,1.787,699,3.566,713,2.3,729,1.673,765,1.673,842,1.501,851,1.453,866,1.944,948,1.787,952,4.846,1073,5.465,1216,2.006,1223,2.856,1228,3.156,1234,2.43,1235,2.363,1255,1.673,1257,2.209,1262,2.209,1263,2.209,1268,3.406,1269,3.406,1270,2.209,1271,2.209,1272,2.209,1273,2.209,1280,2.209,1281,1.925,1309,2.856,1430,4.497,1462,2.1,1580,4.845,1630,4.072,1645,2.1,1874,5.05,1883,2.504,2042,3.094,2048,5.072,2120,4.845,2121,2.209,2470,2.34,2582,4.845,2595,2.504,2597,2.504,2687,3.862,2804,3.862,2954,2.504,3164,2.209,3222,2.209,3358,2.504,3369,5.298,3403,2.504,3405,2.34,3432,3.862,3627,4.2,3628,4.2,3629,4.2,3642,2.504,3657,2.504,3658,4.715,3659,5.763,3660,5.763,3661,4.715,3662,4.715,3663,5.127,3664,5.127,3665,4.715,3666,4.2,3667,3.057,3668,4.2,3669,4.2,3670,3.057,3671,4.2,3672,3.057,3673,4.2,3674,3.057,3675,4.2,3676,3.057,3677,3.057,3678,3.057,3679,3.057,3680,4.2,3681,3.057,3682,3.609,3683,4.2,3684,4.2,3685,4.2,3686,4.2,3687,4.2,3688,5.763,3689,3.057,3690,5.127,3691,4.2,3692,2.724,3693,2.724,3694,2.724,3695,4.2,3696,2.724,3697,2.724,3698,2.724,3699,2.724,3700,2.724,3701,5.127,3702,2.724,3703,2.724,3704,2.724,3705,2.504,3706,4.2,3707,4.2,3708,2.724,3709,2.724,3710,2.724,3711,2.724,3712,2.724,3713,2.724,3714,2.724,3715,2.724,3716,2.724,3717,2.724]],["title/interfaces/Tenants.html",[0,1.258,456,3.408]],["body/interfaces/Tenants.html",[0,1.497,2,1.789,3,0.044,4,0.05,5,0.039,13,0.147,14,0.698,16,2.085,19,0.561,20,0.205,21,0.007,30,0.072,31,0.004,32,0.004,33,1.105,48,0.883,49,0.213,50,0.641,53,0.163,54,1.664,68,0.698,101,1.634,107,1.307,109,1.705,130,1.404,141,2.43,165,2.652,204,2.146,205,1.207,250,1.813,284,1.835,288,3.217,293,1.94,324,1.493,332,2.049,333,1.746,345,2.339,389,2.114,395,1.705,413,2.398,427,2.43,432,1.592,434,2.534,435,2.652,436,2.789,437,2.181,441,1.433,442,3.162,456,6.462,475,2.003,476,2.613,477,1.103,483,2.54,484,2.534,485,2.726,487,2.316,488,1.693,509,4.226,529,2.932,630,1.883,699,3.068,729,2.112,765,2.112,842,1.229,851,1.835,866,1.592,948,2.256,952,4.344,1073,5.289,1216,2.534,1223,2.923,1228,2.74,1234,1.99,1235,1.935,1255,2.112,1257,2.789,1262,2.789,1263,2.789,1268,4.058,1269,4.058,1270,2.789,1271,2.789,1272,2.789,1273,2.789,1280,2.789,1281,2.43,1309,2.339,1430,3.869,1462,2.652,1580,4.167,1630,4.167,1645,2.652,1874,4.344,1883,3.162,2042,3.686,2048,4.547,2120,4.167,2121,2.789,2470,2.955,2582,4.167,2595,3.162,2597,3.162,2687,3.162,2804,3.162,2954,3.162,3164,2.789,3222,2.789,3358,3.162,3369,4.6,3403,3.162,3405,2.955,3432,4.6,3642,3.162,3657,3.162,3659,3.439,3660,3.439,3663,3.439,3664,3.439,3666,3.439,3668,3.439,3669,3.439,3671,3.439,3673,3.439,3675,3.439,3680,3.439,3682,2.955,3683,3.439,3684,3.439,3685,3.439,3686,3.439,3687,3.439,3688,5.004,3690,5.004,3691,5.004,3692,3.439,3693,3.439,3694,3.439,3695,5.004,3696,3.439,3697,3.439,3698,3.439,3699,3.439,3700,3.439,3701,5.898,3702,3.439,3703,3.439,3704,3.439,3705,3.162,3706,5.004,3707,5.004,3708,3.439,3709,3.439,3710,3.439,3711,3.439,3712,3.439,3713,3.439,3714,3.439,3715,3.439,3716,3.439,3717,3.439]],["title/interfaces/TokenPayload.html",[0,1.258,483,2.133]],["body/interfaces/TokenPayload.html",[0,1.767,2,3.072,3,0.076,4,0.086,5,0.067,9,0.778,11,3.874,12,2.114,13,0.253,14,1.003,19,0.534,20,0.295,21,0.007,28,3.293,30,0.104,31,0.005,32,0.005,42,5.828,49,0.152,50,1.1,54,1.326,62,2.877,101,1.928,250,1.815,288,3.119,325,3.573,332,3.518,369,4.789,471,2.997,483,3.932,522,3.151,523,6.214,525,7.097,713,3.234,802,4.173,873,2.318,3718,5.429,3719,7.186,3720,5.905,3721,5.905,3722,5.905,3723,6.629]],["title/classes/TokenResponse.html",[53,0.2,347,3.408]],["body/classes/TokenResponse.html",[3,0.08,4,0.09,5,0.071,13,0.267,14,1.036,17,0.903,19,0.566,20,0.325,21,0.006,30,0.09,31,0.005,32,0.005,43,0.599,53,0.296,57,1.422,347,6.018,398,6.81,400,7.287,401,5.727,402,6.428,455,3.092,459,4.086,533,7.287,2352,6.229,2488,5.727,3724,8.383,3725,6.992,3726,6.992]],["title/classes/TrustedAuthorityQuery.html",[53,0.2,910,2.858]],["body/classes/TrustedAuthorityQuery.html",[3,0.045,4,0.051,5,0.04,7,1.736,9,0.668,12,2.245,13,0.15,14,0.708,16,1.65,17,0.427,19,0.571,20,0.342,21,0.007,25,2.071,26,1.823,27,1.521,28,2.156,30,0.108,31,0.004,32,0.004,43,0.37,49,0.192,53,0.37,57,0.8,62,2.615,63,0.961,68,1.656,70,1.164,71,4.046,73,1.553,74,2.943,75,2.284,76,2.663,77,0.947,78,1.971,79,3.353,80,3.353,89,4.011,95,2.513,101,1.144,107,1.324,118,2.4,120,0.996,122,2.156,124,1.349,128,2.03,134,1.376,143,2.434,144,1.275,221,1.696,255,2.896,269,2.152,293,0.947,324,1.521,346,1.275,413,1.694,441,2.483,455,1.46,468,4.305,469,1.869,470,2.587,471,1.778,473,2.152,537,2.298,569,1.658,578,1.812,601,2.298,630,1.919,634,4.442,643,1.778,804,2.222,810,2.222,823,2.087,842,1.252,849,1.946,855,1.778,856,2.027,857,3.115,858,3.327,860,3.327,861,1.869,864,3.577,866,2.347,869,2.4,870,1.658,872,1.658,873,1.376,877,3.327,879,2.222,880,2.222,881,1.622,882,2.4,883,1.324,884,1.658,885,2.886,886,4.212,887,2.298,892,2.853,893,3.661,894,3.736,895,3.021,896,3.78,897,2.581,898,4.39,899,2.476,900,4.053,901,2.581,902,4.812,903,4.812,904,4.812,905,4.13,906,4.285,907,4.39,908,2.581,909,2.581,910,4.442,911,2.581,912,3.736,913,3.736,914,2.581,915,2.087,916,2.581,917,2.581,918,3.216,919,4.442,920,2.581,921,2.087,922,2.581,923,2.934,924,2.581,925,2.581,926,2.087,927,3.398,928,2.383,929,2.298,930,2.222,931,2.383,932,2.027,933,2.581,3727,3.933,3728,3.933,3729,3.933,3730,3.933]],["title/classes/UpdateKeyDto.html",[53,0.2,2302,3.611]],["body/classes/UpdateKeyDto.html",[3,0.084,4,0.094,5,0.074,21,0.007,23,1.665,30,0.094,31,0.006,32,0.006,37,4.054,49,0.196,53,0.308,57,1.48,120,1.843,250,1.919,1204,4.998,1558,5.597,1626,4.581,1650,5.57,2277,4.998,2302,6.528,3566,5.96,3731,8.529]],["title/classes/VCT.html",[53,0.2,1133,2.858]],["body/classes/VCT.html",[3,0.068,4,0.076,5,0.059,9,0.967,13,0.224,14,0.931,17,1.06,19,0.601,20,0.34,21,0.007,30,0.076,31,0.005,32,0.005,37,3.913,43,0.604,46,1.414,49,0.172,53,0.317,57,1.195,63,1.57,74,3.015,75,2.396,77,1.414,118,3.155,120,1.488,134,2.055,254,2.534,678,6.286,1133,5.423,1405,7.205,3732,5.235,3733,8.234,3734,8.234,3735,8.234,3736,5.876,3737,5.876,3738,5.876,3739,5.876,3740,5.876,3741,5.876,3742,5.876,3743,5.876,3744,5.876,3745,7.483]],["title/modules/VerifierModule.html",[172,1.502,194,3.408]],["body/modules/VerifierModule.html",[3,0.073,4,0.082,5,0.064,21,0.007,30,0.082,31,0.005,32,0.005,49,0.217,50,1.051,53,0.268,172,2.712,174,2.797,175,3.175,176,3.362,177,3.362,178,3.09,179,3.175,180,3.175,185,5.27,191,5.872,192,5.65,194,7.124,197,4.163,198,3.362,199,3.011,202,3.547,224,4.157,230,4.848,231,4.577,2167,6.121,2173,5.388,2174,3.579,2576,6.121,2577,5.643,2780,5.643,3746,6.334,3747,6.334,3748,6.334]],["title/classes/WebHookAuthConfig.html",[53,0.2,131,3.096]],["body/classes/WebHookAuthConfig.html",[3,0.059,4,0.066,5,0.052,13,0.194,14,0.848,17,0.553,19,0.472,20,0.351,21,0.007,23,1.877,30,0.114,31,0.005,32,0.005,43,0.331,46,1.32,49,0.176,53,0.381,57,1.036,63,0.86,68,0.921,70,1.509,73,2.012,75,2.267,76,2.17,77,1.226,84,2.432,105,5.043,106,3.344,107,1.99,108,5.635,109,4.033,110,4.837,111,3.681,112,2.264,114,3.326,115,3.514,117,2.978,118,2.875,119,2.978,120,1.29,121,2.879,122,2.582,123,3.514,124,2.934,125,4.655,126,3.5,127,4.292,128,3.05,129,5.385,130,2.48,131,5.613,132,3.681,133,4.926,134,1.782,135,1.431,136,5.043,137,3.681,138,4.926,139,4.926,140,3.5,141,3.208,142,3.681,143,1.854,144,2.211,145,2.978,146,3.344,147,2.554,148,2.978,149,3.984,150,3.681,151,3.681,152,2.978,153,2.704,154,2.978,155,2.978,156,2.148,3749,5.095]],["title/classes/WebHookAuthConfigHeader.html",[53,0.2,129,3.096]],["body/classes/WebHookAuthConfigHeader.html",[3,0.056,4,0.063,5,0.05,9,0.576,13,0.187,14,0.827,17,0.532,19,0.463,20,0.354,21,0.007,23,1.932,30,0.112,31,0.004,32,0.004,43,0.432,46,1.294,49,0.173,53,0.377,57,0.998,63,1.122,68,0.887,70,1.453,73,1.937,75,2.242,76,2.116,77,1.181,84,2.371,105,5.302,106,3.22,107,2.071,108,5.799,109,4.135,110,4.745,111,3.545,112,2.23,114,3.243,115,3.426,117,2.867,118,2.802,119,2.867,120,1.242,121,2.772,122,2.518,123,3.426,124,2.987,125,4.026,126,3.37,127,4.745,128,3.175,129,5.541,130,2.742,131,5.541,132,3.545,133,5.446,134,2.325,135,2.117,136,4.947,137,3.545,138,4.802,139,3.545,140,3.37,141,3.089,142,3.545,143,1.785,144,2.155,145,2.867,146,3.22,147,2.459,148,2.867,149,3.884,150,3.545,151,3.545,152,2.867,153,2.604,154,2.867,155,2.867,156,2.069,3750,4.906,3751,4.906,3752,4.371,3753,4.906]],["title/classes/WebHookAuthConfigNone.html",[53,0.2,136,3.096]],["body/classes/WebHookAuthConfigNone.html",[3,0.058,4,0.065,5,0.051,13,0.193,14,0.843,17,0.548,19,0.47,20,0.352,21,0.007,23,1.871,30,0.113,31,0.004,32,0.004,43,0.328,46,1.314,49,0.176,53,0.38,57,1.028,63,0.853,68,0.913,70,1.496,73,1.995,75,2.262,76,2.158,77,1.216,84,2.418,105,5.021,106,3.315,107,1.984,108,5.616,109,4.077,110,4.817,111,3.65,112,2.257,114,3.307,115,3.494,117,2.952,118,2.858,119,2.952,120,1.279,121,2.854,122,2.568,123,3.494,124,3.012,125,4.107,126,3.47,127,4.268,128,3.132,129,5.366,130,2.783,131,5.597,132,3.65,133,4.898,134,1.767,135,1.419,136,5.366,137,3.65,138,5.528,139,3.65,140,3.47,141,3.18,142,3.65,143,1.838,144,2.198,145,2.952,146,3.315,147,2.532,148,2.952,149,3.962,150,3.65,151,3.65,152,2.952,153,2.681,154,2.952,155,2.952,156,2.13,3752,4.501,3754,5.052]],["title/classes/WebhookConfig.html",[53,0.2,143,1.716]],["body/classes/WebhookConfig.html",[3,0.056,4,0.063,5,0.049,9,0.569,13,0.185,14,0.82,17,0.872,19,0.494,20,0.347,21,0.007,23,1.839,30,0.112,31,0.004,32,0.004,43,0.428,46,1.286,49,0.172,53,0.376,57,0.986,63,1.113,68,1.191,70,1.435,73,1.914,75,2.286,76,2.098,77,1.166,84,2.351,105,4.916,106,3.18,107,2.065,108,5.521,109,4.088,110,5.061,111,3.501,112,2.218,114,3.216,115,3.398,117,2.832,118,2.779,119,2.832,120,1.227,121,2.738,122,2.497,123,3.398,124,3.044,125,3.993,126,3.329,127,4.149,128,3.165,129,5.518,130,2.398,131,5.276,132,3.501,133,4.762,134,1.695,135,1.361,136,5.276,137,3.501,138,4.762,139,3.501,140,4.527,141,4.149,142,3.501,143,2.398,144,2.726,145,3.852,146,4.326,147,3.304,148,2.832,149,3.852,150,3.501,151,3.501,152,3.852,153,2.572,154,2.832,155,3.852,156,3.158,996,2.246,1144,3.969,3755,4.846,3756,4.846,3757,4.846]],["title/classes/WebhookResponse.html",[53,0.2,3758,3.611]],["body/classes/WebhookResponse.html",[3,0.048,4,0.054,5,0.042,9,0.491,17,0.454,19,0.366,21,0.007,23,1.362,30,0.077,31,0.004,32,0.004,33,1.171,43,0.272,47,2.636,49,0.196,50,0.695,53,0.252,54,1.386,57,0.852,68,0.757,84,2.123,101,2.41,110,2.636,115,3.069,127,3.748,128,3.366,147,2.098,250,1.559,255,2.351,287,4.129,346,2.686,389,2.614,470,2.302,471,1.893,475,1.493,476,2.246,477,1.701,485,2.088,487,2.455,488,1.795,518,3.144,529,2.246,582,2.302,635,2.222,638,3.89,639,2.748,742,3.748,816,2.692,932,3.069,951,1.99,962,3.412,1062,2.222,1226,4.41,1358,5.277,1790,2.748,1898,3.025,2169,3.607,2170,3.748,2174,2.365,2178,3.025,2257,6.341,2335,5.452,2532,3.907,2598,4.547,2603,6.783,2619,4.876,2655,5.675,2656,4.876,2833,5.303,2834,2.876,2875,4.876,3136,4.876,3214,3.73,3682,4.557,3758,5.775,3759,3.429,3760,4.187,3761,5.304,3762,6.172,3763,3.73,3764,3.73,3765,3.73,3766,3.73,3767,3.73,3768,3.73,3769,3.73,3770,7.381,3771,6.723,3772,6.723,3773,5.304,3774,3.73,3775,5.304,3776,5.304,3777,5.304,3778,5.304,3779,7.593,3780,5.304,3781,5.304,3782,5.304,3783,5.304,3784,5.304,3785,5.304,3786,5.304,3787,5.304,3788,3.73,3789,3.73,3790,3.73,3791,3.73,3792,3.73,3793,3.73,3794,5.304,3795,3.73]],["title/injectables/WebhookService.html",[33,0.928,2170,2.97]],["body/injectables/WebhookService.html",[3,0.044,4,0.049,5,0.038,9,0.651,13,0.145,17,0.832,19,0.233,20,0.24,21,0.007,23,0.868,30,0.072,31,0.004,32,0.004,33,1.091,35,1.408,39,1.291,43,0.426,45,1.632,46,1.126,47,2.389,48,1.269,49,0.19,50,0.63,53,0.235,54,1.442,68,1.003,84,1.978,101,2.467,110,3.492,112,1.047,115,2.859,127,3.492,128,3.354,147,2.78,250,1.475,255,2.19,287,3.945,346,2.683,389,2.558,470,2.145,471,2.508,475,1.978,476,2.487,477,2.061,485,1.976,487,2.287,488,1.672,518,3.273,529,2.125,582,2.145,635,2.014,638,4.373,639,2.491,712,2.144,742,3.492,816,2.508,842,1.208,932,1.956,951,1.804,962,2.964,1062,2.944,1226,4.214,1358,5.513,1790,3.64,1898,4.007,2169,4.368,2170,4.539,2174,2.144,2178,2.742,2257,6.132,2335,5.978,2532,4.732,2598,5.43,2603,6.965,2619,4.543,2655,5.369,2656,4.543,2795,3.108,2833,5.017,2834,2.606,2875,4.543,3136,4.543,3682,5.519,3758,5.017,3759,3.108,3761,4.941,3762,6.834,3763,4.941,3764,5.84,3765,3.381,3766,3.381,3767,3.381,3768,3.381,3769,3.381,3770,7.138,3771,6.424,3772,6.424,3773,4.941,3774,3.381,3775,4.941,3776,4.941,3777,4.941,3778,4.941,3779,7.372,3780,4.941,3781,4.941,3782,4.941,3783,4.941,3784,4.941,3785,4.941,3786,4.941,3787,4.941,3788,5.84,3789,3.381,3790,3.381,3791,3.381,3792,3.381,3793,3.381,3794,4.941,3795,3.381,3796,3.795,3797,3.795,3798,3.795,3799,3.795,3800,3.795]],["title/controllers/WellKnownController.html",[157,1.448,201,3.611]],["body/controllers/WellKnownController.html",[3,0.054,4,0.06,5,0.047,9,0.861,13,0.178,17,0.796,20,0.303,21,0.007,23,1.467,30,0.06,31,0.004,32,0.004,39,1.492,43,0.477,45,1.826,46,1.357,48,2.102,49,0.208,50,0.773,53,0.197,54,1.468,63,1.238,68,1.159,114,2.272,120,1.179,134,1.629,157,2.252,159,1.694,163,2.931,196,5.43,201,5.615,239,5.039,240,6.05,242,4.149,293,1.121,322,2.832,323,3.885,324,2.837,330,3.748,338,4.526,353,4.526,356,2.041,374,5.714,378,3.129,386,3.056,388,1.801,389,2.134,392,3.564,413,1.624,477,1.331,518,3.363,540,3.949,578,2.041,604,2.272,606,7.969,607,4.909,635,2.471,636,5.039,637,3.564,647,1.801,657,3.564,691,6.536,704,3.564,1235,3.215,1241,3.885,1332,5.188,1336,4.804,1787,3.198,1854,5.527,2118,3.814,2149,4.149,2158,5.301,2481,5.301,2530,4.909,3461,4.149,3801,4.149,3802,4.657,3803,7.043,3804,5.714,3805,4.657,3806,4.657,3807,4.657,3808,4.657,3809,6.414,3810,4.657,3811,4.657,3812,4.657,3813,6.475,3814,4.657,3815,4.657,3816,4.657,3817,4.657,3818,5.714,3819,4.657,3820,4.149,3821,4.149,3822,4.149,3823,4.657,3824,4.657,3825,4.657,3826,4.657,3827,4.149,3828,4.657,3829,4.657,3830,4.657,3831,4.657,3832,4.657,3833,4.657,3834,4.657,3835,4.657]],["title/injectables/WellKnownService.html",[33,0.928,196,3.24]],["body/injectables/WellKnownService.html",[3,0.046,4,0.051,5,0.04,9,0.466,11,3.351,12,1.041,13,0.152,17,0.799,19,0.413,20,0.325,21,0.007,23,1.539,30,0.051,31,0.004,32,0.004,33,1.128,35,1.474,39,1.334,43,0.479,45,1.834,46,1.265,48,2.033,49,0.204,50,0.659,53,0.168,54,1.474,112,1.582,196,5.06,239,3.938,240,5.979,250,1.29,274,3.539,291,3.351,293,1.38,322,3.594,323,4.463,324,2.217,325,2.264,330,3.351,337,2.728,338,3.468,353,3.468,356,1.825,368,4.031,378,2.797,389,2.272,412,2.048,413,2.061,469,2.725,475,2.045,476,2.181,477,2.105,485,2.221,518,3.108,522,2.725,523,2.728,529,2.181,540,3.705,555,3.04,557,3.04,558,2.87,578,1.825,607,4.388,620,4.143,635,2.108,640,5.204,647,2.849,699,3.981,713,2.797,729,2.174,744,4.235,786,3.282,799,2.048,923,2.048,1130,3.239,1151,2.87,1235,4.08,1241,3.473,1259,3.254,1331,4.388,1332,5.127,1336,5.06,1432,5.083,1459,3.539,1460,2.321,1461,2.87,1464,2.321,1469,3.539,1493,3.254,1510,3.254,1511,2.728,1519,2.87,1520,3.04,1787,2.728,1854,4.918,1999,2.607,2120,5.282,2121,2.87,2128,4.388,2252,5.108,2481,5.323,2644,3.539,2646,3.254,2647,5.108,2653,3.254,2771,4.696,3044,5.108,3048,3.539,3393,5.108,3803,5.108,3804,5.108,3813,6.034,3818,3.539,3820,3.539,3821,3.539,3822,3.539,3827,3.539,3836,3.539,3837,5.734,3838,5.734,3839,5.734,3840,3.972,3841,3.972,3842,5.734,3843,3.972,3844,5.108,3845,5.734,3846,3.972,3847,5.734,3848,5.734,3849,5.734,3850,5.734,3851,6.034,3852,6.728,3853,5.108,3854,5.734,3855,3.972,3856,3.972,3857,3.972,3858,3.972,3859,3.972,3860,3.972,3861,5.734,3862,3.972,3863,3.972,3864,3.972,3865,3.972,3866,3.972]],["title/coverage.html",[3867,5.765]],["body/coverage.html",[0,2.268,1,1.687,5,0.021,6,1.835,7,0.91,8,1.835,12,0.54,20,0.288,21,0.007,22,0.78,23,0.471,27,0.797,31,0.002,32,0.002,33,1.78,34,1.577,36,1.835,53,0.411,56,1.127,58,4.126,60,1.127,78,1.033,79,1.033,80,1.033,83,1.297,90,1.127,97,1.127,99,1.297,103,1.127,105,1.352,106,3.755,129,1.352,131,1.352,135,0.964,136,1.352,143,0.749,157,2.586,158,1.577,160,1.835,178,1.005,195,1.297,196,1.415,201,1.577,233,1.352,236,3.891,240,2.628,315,1.577,316,1.835,325,0.813,338,1.062,339,1.577,342,1.577,347,1.488,353,1.062,371,2.812,379,1.415,424,1.093,425,1.352,426,1.488,427,1.297,428,3.616,429,1.577,437,1.94,441,0.765,447,1.488,449,1.687,450,1.687,456,1.488,457,1.488,458,1.835,459,4.167,474,1.835,483,0.932,488,0.621,518,0.721,540,0.91,560,1.248,561,3.891,562,3.891,563,1.297,564,1.297,579,1.297,584,1.248,587,1.248,598,1.488,599,1.835,602,1.577,603,1.835,614,1.297,636,1.415,638,1.062,640,1.248,644,1.577,667,1.835,668,3.891,690,3.379,699,0.955,700,1.204,701,1.248,732,1.488,734,1.488,736,1.488,773,1.721,798,1.248,807,7.433,849,2.247,850,1.127,852,2.812,875,1.488,886,4.126,887,4.167,896,1.164,900,1.248,910,1.248,919,1.248,921,1.093,934,2.812,935,1.835,938,1.577,939,1.835,942,1.415,943,5.043,944,3.93,946,1.415,951,0.979,954,1.415,955,1.415,957,1.415,963,1.415,1125,1.879,1126,4.134,1133,1.248,1137,1.415,1170,1.297,1180,1.352,1184,1.415,1186,1.093,1200,1.488,1201,1.835,1202,3.379,1206,1.577,1207,2.812,1212,1.415,1218,1.352,1219,1.835,1220,1.488,1221,3.379,1275,5.939,1331,1.577,1332,4.056,1333,1.835,1334,2.812,1358,1.248,1373,1.577,1374,1.835,1397,1.352,1404,1.577,1405,3.379,1406,1.687,1407,1.835,1424,1.835,1430,1.204,1432,1.248,1460,3.831,1534,4.716,1536,1.415,1537,4.218,1547,1.415,1555,1.577,1561,2.812,1569,1.687,1575,1.577,1580,1.297,1582,1.577,1586,1.352,1590,1.577,1591,1.835,1592,3.059,1594,1.415,1620,1.352,1626,1.297,1648,2.358,1729,1.577,1730,1.835,1735,1.488,1739,1.415,1746,1.835,1748,1.297,1750,3.379,1753,1.488,1756,1.488,1762,1.835,1787,1.415,1789,1.835,1828,1.488,1829,1.835,1834,1.352,1835,3.942,1851,1.488,1854,1.297,1858,1.415,1867,1.488,1869,1.577,1870,1.835,1871,1.835,1874,1.352,1875,1.835,1910,1.687,1933,1.577,1934,2.812,1969,1.577,1970,1.835,1990,3.059,2027,1.577,2028,1.835,2045,1.835,2104,1.577,2105,2.812,2106,1.687,2107,1.835,2110,1.415,2113,1.352,2120,1.297,2158,1.488,2159,1.835,2168,1.297,2169,1.248,2170,1.297,2172,1.577,2198,1.835,2204,1.687,2216,1.835,2277,3.93,2278,2.812,2290,1.835,2302,1.577,2318,2.812,2324,1.687,2338,1.835,2347,1.687,2348,1.835,2353,1.835,2367,4.68,2372,1.577,2373,1.835,2409,1.577,2410,2.812,2423,1.577,2474,1.577,2475,1.835,2481,1.488,2482,1.835,2493,2.812,2516,1.835,2532,1.352,2552,1.577,2553,1.835,2579,1.835,2582,1.297,2583,1.297,2591,1.577,2598,1.352,2626,2.812,2704,1.835,2728,1.488,2729,1.835,2733,1.577,2734,1.835,2741,1.577,2765,2.628,2772,1.835,2784,1.835,2796,1.415,2877,1.488,2878,1.835,2895,1.835,3029,1.835,3038,1.835,3078,1.577,3079,1.835,3135,2.628,3181,1.577,3182,1.835,3195,1.488,3198,1.687,3200,1.577,3212,4.134,3213,1.835,3220,1.835,3246,1.687,3286,1.835,3352,1.835,3362,1.835,3395,7.866,3448,1.577,3449,3.755,3450,1.835,3464,1.488,3465,2.812,3466,1.835,3485,1.488,3489,1.835,3556,1.835,3566,2.812,3572,1.577,3573,1.835,3605,1.687,3610,1.577,3626,1.835,3653,1.835,3657,2.812,3718,2.812,3724,1.835,3732,1.835,3758,1.577,3759,2.812,3801,1.835,3836,1.835,3867,1.835,3868,1.835,3869,2.06,3870,7.554,3871,2.06,3872,3.433,3873,3.433,3874,1.835,3875,6.555,3876,1.835,3877,9.271,3878,7.554,3879,7.877,3880,2.06,3881,2.06,3882,8.927,3883,3.433,3884,6.555,3885,2.06,3886,2.06,3887,3.059,3888,2.06,3889,2.06,3890,4.414,3891,4.414,3892,3.059,3893,3.059,3894,2.06,3895,1.835,3896,3.433,3897,6.18,3898,2.06,3899,2.06,3900,2.06,3901,2.06,3902,5.098,3903,2.06,3904,7.725,3905,4.588,3906,5.15,3907,1.835,3908,1.835,3909,4.414,3910,1.835,3911,1.835,3912,5.722,3913,2.06,3914,1.835,3915,1.835,3916,6.18,3917,2.06,3918,3.433,3919,5.15,3920,2.06,3921,2.06,3922,2.06,3923,2.06,3924,2.06,3925,2.06,3926,5.15,3927,3.433,3928,3.433,3929,7.358,3930,2.06,3931,4.414,3932,4.414,3933,2.06,3934,2.06,3935,1.835,3936,2.06,3937,2.06,3938,2.06,3939,3.433,3940,3.433,3941,1.835,3942,2.06,3943,2.06,3944,1.835,3945,1.835,3946,1.835,3947,2.06,3948,1.835,3949,1.835,3950,1.835,3951,5.15,3952,2.06,3953,2.06,3954,2.06,3955,1.835,3956,1.835,3957,1.835,3958,2.06,3959,1.835,3960,5.506,3961,1.835,3962,1.835,3963,1.835,3964,1.835,3965,1.835,3966,1.835,3967,1.835,3968,1.835,3969,2.06,3970,2.06,3971,3.059,3972,2.06,3973,2.06,3974,1.687,3975,1.835,3976,2.06,3977,2.06,3978,2.06,3979,2.06,3980,2.06]],["title/dependencies.html",[175,2.848,3981,3.496]],["body/dependencies.html",[12,1.488,21,0.007,31,0.005,32,0.005,50,0.942,52,4.103,53,0.31,70,1.682,77,1.367,120,1.438,175,2.847,205,1.775,207,4.651,208,3.209,210,4.651,212,5.06,213,4.103,215,5.06,217,3.575,218,5.318,268,4.103,330,3.319,332,3.886,395,2.507,432,2.342,434,3.727,435,3.901,728,4.103,786,3.572,883,1.912,1336,3.107,1347,3.209,1448,3.901,1451,5.002,1452,4.347,1453,4.347,1455,4.347,1457,4.347,1458,4.103,1639,4.103,1644,2.927,1647,4.347,1982,4.651,2119,3.727,2174,3.209,2203,4.651,2234,5.06,2237,5.06,2440,4.103,2834,3.901,2941,5.06,3085,4.103,3095,5.604,3096,4.651,3097,5.06,3098,5.06,3405,4.347,3982,7.322,3983,5.679,3984,7.322,3985,8.103,3986,5.679,3987,5.679,3988,5.679,3989,5.679,3990,5.679,3991,5.679,3992,5.679,3993,5.679,3994,7.322,3995,8.559,3996,8.559,3997,8.559,3998,5.679,3999,5.679,4000,5.679,4001,5.679,4002,8.103,4003,5.679,4004,5.679,4005,5.679,4006,5.679,4007,5.679,4008,5.679,4009,5.679,4010,5.679,4011,5.679,4012,5.679,4013,5.679,4014,5.679,4015,5.679,4016,5.679,4017,5.679,4018,5.679,4019,5.679,4020,5.679,4021,5.679,4022,5.679,4023,5.679,4024,5.679,4025,5.679,4026,5.679,4027,5.679,4028,5.679,4029,5.679]],["title/miscellaneous/enumerations.html",[4030,2.47,4031,5.063]],["body/miscellaneous/enumerations.html",[12,1.678,13,0.244,20,0.289,21,0.007,31,0.005,32,0.005,84,3.188,106,4.202,109,2.827,110,4.031,112,2.724,123,4.07,124,2.709,125,4.784,126,4.397,127,4.031,156,3.329,346,2.076,470,2.476,561,4.031,562,4.971,576,3.742,588,4.971,589,4.202,668,4.971,1062,3.398,1185,3.853,1315,5.182,1335,3.879,2119,5.182,2122,5.424,2128,4.9,2327,4.9,2503,4.9,2765,4.9,3135,4.9,3161,6.468,3164,5.705,3174,7.035,3175,5.705,3176,7.035,3813,6.468,3851,5.244,3853,5.704,3974,5.244,4030,4.031,4031,5.704,4032,6.403,4033,6.403,4034,5.704,4035,7.897,4036,6.403,4037,5.704,4038,6.403,4039,6.403]],["title/miscellaneous/functions.html",[4030,2.47,4040,5.063]],["body/miscellaneous/functions.html",[9,1.104,12,2.05,13,0.202,17,0.984,19,0.573,20,0.332,21,0.006,23,2.075,28,2.001,31,0.005,32,0.005,45,2.258,46,1.558,48,2.107,68,0.955,95,2.333,107,1.229,134,2.443,135,1.962,168,4.153,178,4.061,208,2.985,217,3.326,254,2.279,280,3.201,287,2.891,469,2.511,473,2.891,500,5.989,636,5.374,712,3.946,732,5.047,772,4.044,873,3.111,915,4.153,943,3.326,954,4.797,955,4.797,961,6.015,962,3.764,978,3.818,980,6.015,1002,3.818,1062,2.804,1131,4.421,1235,4.339,1506,5.989,1630,3.326,2079,4.328,2367,4.584,2437,5.047,2847,4.328,2925,4.328,3941,4.708,3944,4.708,3950,4.708,3960,4.708,3961,6.223,3962,6.223,3963,6.223,3964,6.223,4030,3.326,4040,4.708,4041,5.284,4042,8.893,4043,5.284,4044,5.284,4045,5.284,4046,5.284,4047,5.284,4048,5.284,4049,5.284,4050,5.284,4051,5.284,4052,6.985,4053,5.284,4054,6.985,4055,5.284,4056,5.284,4057,4.328,4058,5.284,4059,7.824,4060,7.824,4061,7.824,4062,5.284,4063,6.985,4064,5.284,4065,5.284,4066,5.284,4067,5.284,4068,5.284,4069,5.284]],["title/index.html",[13,0.18,4070,4.203]],["body/index.html",[2,1.759,21,0.007,31,0.004,32,0.004,35,1.408,57,0.772,159,1.38,172,1.208,173,7.458,174,1.676,175,1.902,176,2.014,177,2.014,178,1.851,179,1.902,180,1.902,181,3.381,182,3.381,183,3.381,184,6.982,185,5.223,186,5.21,187,4.736,188,6.735,189,4.736,190,4.736,191,5.674,192,5.46,193,4.736,194,6.575,195,4.127,196,4.502,197,2.944,198,2.014,199,1.804,379,4.502,419,3.381,420,3.381,421,3.381,422,3.381,423,5.771,424,4.391,425,5.43,426,5.978,427,4.127,638,4.265,640,5.012,699,3.835,700,4.835,701,5.012,851,1.804,1218,5.43,1397,4.302,1430,4.835,1432,5.012,1530,5.542,1531,3.381,1532,3.381,1533,3.381,1577,3.381,1578,3.381,1579,3.381,1580,5.209,1739,4.502,2120,5.209,2163,3.381,2164,3.381,2165,3.381,2166,3.381,2167,6.141,2168,4.539,2169,4.368,2170,4.539,2570,3.381,2572,3.381,2573,3.381,2576,5.678,2582,5.209,2583,5.209,2774,3.381,2775,3.381,2776,3.381,2777,3.381,2778,5.788,2796,5.683,2885,3.381,2887,3.381,2888,3.381,3033,3.381,3034,3.381,3035,3.381,3342,3.381,3343,3.381,3344,3.381,3478,3.381,3479,3.381,3480,3.381,4070,3.381,4071,3.795,4072,3.795,4073,3.795,4074,3.795,4075,3.795,4076,3.795]],["title/modules.html",[174,2.857]],["body/modules.html",[21,0.005,31,0.005,32,0.005,173,5.083,174,2.932,184,4.798,185,3.752,186,4.798,187,4.798,188,4.561,189,4.798,190,4.798,191,4.181,192,4.023,193,4.798,194,4.798,423,4.358,489,6.703,493,7.538,1530,4.798,2167,4.358,2576,4.358,2778,4.798,4077,9.848,4078,9.848,4079,9.977,4080,9.278]],["title/properties.html",[14,0.707,3981,3.496]],["body/properties.html",[9,0.865,14,0.916,21,0.006,31,0.006,32,0.006,170,7.036,808,4.638,1228,3.594,3844,6.564,4081,7.367,4082,7.367,4083,7.367,4084,7.367,4085,7.367,4086,7.367,4087,8.591,4088,7.367,4089,7.367,4090,7.367,4091,7.367,4092,7.367,4093,7.367,4094,7.367]],["title/miscellaneous/typealiases.html",[4030,2.47,4095,5.683]],["body/miscellaneous/typealiases.html",[11,3.722,13,0.243,17,0.691,19,0.391,20,0.335,21,0.006,23,1.457,31,0.005,32,0.005,58,4.009,59,3.598,83,4.955,84,2.271,85,3.598,86,3.598,134,2.227,236,4.009,288,2.462,418,3.722,467,6.829,518,2.227,552,3.598,798,4.768,849,1.852,852,5.216,875,5.687,943,4.009,944,5.406,957,5.406,1062,3.38,1222,3.192,1335,3.858,1358,4.768,1460,4.6,1534,5.406,1537,7.308,1547,5.406,1555,6.024,1561,6.446,1569,6.446,1575,4.874,1803,5.216,1818,5.216,1835,4.874,1851,5.687,1858,5.406,1866,4.874,2318,5.216,2324,6.446,2325,4.601,2327,4.874,2367,5.165,3085,4.601,3135,4.874,3177,4.374,3605,5.216,3610,6.024,4030,4.009,4037,5.674,4096,6.368,4097,6.368,4098,7.95,4099,6.368,4100,6.368,4101,6.368,4102,5.674,4103,7.012]],["title/miscellaneous/variables.html",[4030,2.47,4057,4.654]],["body/miscellaneous/variables.html",[3,0.023,5,0.02,9,0.234,11,2.521,12,1.593,13,0.076,16,0.97,19,0.447,20,0.28,21,0.007,22,1.911,23,1.478,25,0.726,31,0.002,32,0.002,39,0.464,42,2.414,46,1.109,49,0.099,54,1.292,68,0.604,107,1.174,112,2.422,124,0.684,134,0.698,135,2.295,141,1.256,144,2.094,156,3.15,165,1.37,172,1.064,221,1.441,233,2.193,236,1.256,250,1.681,253,1.526,254,1.441,257,3.177,263,1.441,268,2.414,287,1.091,288,0.771,291,1.166,300,5.719,303,3.116,322,1.475,325,1.993,331,1.091,332,1.774,333,0.902,338,1.028,359,4.436,368,1.091,394,2.558,418,1.166,428,1.634,447,2.414,448,1.777,449,2.737,450,2.737,471,2.282,475,1.192,476,1.822,483,0.902,488,1.007,492,2.289,500,1.526,509,2.761,518,2.259,522,0.948,529,2.094,537,1.953,540,1.904,570,1.091,577,1.058,713,1.63,725,2.399,751,2.193,786,2.462,799,1.723,802,1.256,816,0.902,842,2.794,873,1.765,915,5.039,943,2.715,945,5.977,951,1.588,959,6.859,987,1.441,996,0.924,1062,1.058,1074,1.441,1076,1.441,1098,2.831,1131,3.175,1185,1.63,1186,1.058,1222,1,1226,1.166,1266,1.526,1275,1.208,1281,2.104,1313,1.309,1314,3.688,1336,1.091,1392,1.166,1438,1.441,1460,1.166,1500,1.777,1501,2.737,1512,1.634,1534,2.295,1536,1.37,1542,1.634,1547,1.37,1548,1.777,1552,1.634,1553,1.777,1556,1.777,1557,3.466,1558,3.312,1559,3.533,1560,1.256,1575,4.301,1612,1.526,1705,1.777,1709,1.777,1711,1.777,1713,1.777,1715,1.634,1717,4.603,1719,5.007,1814,1.777,1835,1.526,1854,2.104,1866,3.862,1867,2.414,1868,1.777,1892,1.634,1910,6.12,1940,1.634,1999,1.309,2001,1.777,2065,1.777,2105,1.634,2204,2.737,2255,1.777,2271,1.777,2325,2.414,2327,1.526,2343,1.777,2344,5.417,2437,1.441,2440,1.441,2450,1.441,2451,1.634,2452,1.634,2454,1.634,2455,3.533,2456,4.393,2457,2.737,2458,1.634,2532,2.193,2588,1.634,2604,2.558,2626,4.603,2812,1.777,2890,5.768,2911,1.526,2921,1.777,2925,6.603,2955,1.777,2956,1.777,3082,5.007,3085,5.905,3095,1.526,3177,2.295,3212,1.441,3222,1.441,3246,2.737,3249,2.977,3389,1.777,3392,1.777,3394,1.777,3610,1.526,3613,1.777,3618,1.777,3620,1.777,3622,1.777,3705,1.634,3718,1.634,3719,2.977,3720,2.977,3721,2.977,3722,1.777,3851,1.634,3868,1.777,3874,1.777,3875,7.595,3876,3.843,3887,1.777,3892,1.777,3893,2.977,3895,2.977,3902,4.496,3905,2.977,3907,2.977,3908,1.777,3910,1.777,3911,2.977,3914,1.777,3915,2.977,3935,2.977,3945,1.777,3946,2.977,3948,1.777,3949,2.977,3955,1.777,3956,2.977,3957,1.777,3959,2.977,3965,1.777,3966,2.977,3967,1.777,3968,2.977,3971,3.843,3974,1.634,3975,2.977,4030,1.256,4034,1.777,4057,2.737,4098,1.777,4102,1.777,4103,1.777,4104,1.994,4105,1.994,4106,1.994,4107,4.313,4108,1.994,4109,1.994,4110,3.342,4111,1.994,4112,1.994,4113,1.994,4114,1.994,4115,4.313,4116,1.994,4117,1.994,4118,1.994,4119,1.994,4120,7.472,4121,9.045,4122,6.08,4123,3.342,4124,1.994,4125,1.994,4126,7.472,4127,8.173,4128,7.472,4129,1.994,4130,7.042,4131,1.994,4132,6.458,4133,1.994,4134,1.994,4135,6.458,4136,1.994,4137,1.994,4138,1.994,4139,1.994,4140,1.994,4141,5.62,4142,1.994,4143,5.62,4144,1.994,4145,4.313,4146,1.994,4147,1.994,4148,1.994,4149,3.342,4150,1.994,4151,3.342,4152,1.994,4153,1.994,4154,3.342,4155,1.994,4156,1.994,4157,1.994,4158,1.994,4159,4.313,4160,1.994,4161,1.994,4162,1.994,4163,3.342,4164,1.994,4165,7.042,4166,6.458,4167,5.046,4168,1.994,4169,1.994,4170,1.994,4171,1.994,4172,1.994,4173,1.994,4174,1.994,4175,1.994,4176,1.994,4177,1.994,4178,1.994,4179,1.994,4180,1.994,4181,1.994,4182,1.994,4183,1.994,4184,1.994,4185,1.994,4186,1.994,4187,1.994,4188,1.994,4189,1.994,4190,4.313,4191,1.994,4192,1.994,4193,1.994,4194,8.173,4195,1.994,4196,1.994,4197,5.62,4198,1.994,4199,1.994,4200,1.994,4201,4.313,4202,5.046,4203,1.994,4204,1.994,4205,1.994,4206,1.994,4207,5.046,4208,1.994,4209,6.08,4210,1.994,4211,3.342,4212,1.994,4213,1.994,4214,3.342,4215,1.994,4216,3.342,4217,1.994,4218,1.994,4219,1.994,4220,1.994,4221,3.342,4222,1.994,4223,1.994,4224,1.994,4225,1.994,4226,1.994,4227,1.994,4228,1.994,4229,3.342,4230,1.994,4231,1.994,4232,1.994,4233,3.342,4234,1.994,4235,1.994,4236,1.994,4237,1.994,4238,1.994,4239,1.994,4240,4.313,4241,1.994,4242,1.994,4243,1.994,4244,1.994,4245,1.994,4246,1.994,4247,1.994,4248,1.994,4249,1.994,4250,1.994,4251,1.994,4252,1.994,4253,1.994,4254,6.774,4255,1.994,4256,1.994,4257,1.994,4258,1.994,4259,1.994,4260,1.994,4261,1.994,4262,1.994,4263,1.994,4264,1.994,4265,1.994,4266,1.994,4267,1.994,4268,1.994,4269,1.994,4270,1.994,4271,1.994,4272,1.994,4273,1.994,4274,1.994,4275,1.994,4276,1.994,4277,1.994]]],"invertedIndex":[["",{"_index":21,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1275,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":4082,"title":{},"body":{"properties.html":{}}}],["0.14.0",{"_index":4002,"title":{},"body":{"dependencies.html":{}}}],["0.14.1",{"_index":4003,"title":{},"body":{"dependencies.html":{}}}],["0.14.2",{"_index":4008,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":4024,"title":{},"body":{"dependencies.html":{}}}],["0.3.0",{"_index":3995,"title":{},"body":{"dependencies.html":{}}}],["0.3.25",{"_index":4028,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":3525,"title":{},"body":{"injectables/StatusListService.html":{}}}],["0.5.1",{"_index":4007,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":3877,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":3917,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":3918,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":3870,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":3879,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":3884,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":3881,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":3951,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":3952,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":3909,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":1999,"title":{},"body":{"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["1.11.0",{"_index":4006,"title":{},"body":{"dependencies.html":{}}}],["1.13.0",{"_index":4001,"title":{},"body":{"dependencies.html":{}}}],["1.5.4",{"_index":4022,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":3882,"title":{},"body":{"coverage.html":{}}}],["1/10",{"_index":3958,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":3926,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":3891,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":3928,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":3886,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":3921,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1910,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["10,000",{"_index":3506,"title":{},"body":{"injectables/StatusListService.html":{}}}],["10.5.0",{"_index":4019,"title":{},"body":{"dependencies.html":{}}}],["10/12",{"_index":3940,"title":{},"body":{"coverage.html":{}}}],["10/15",{"_index":3898,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":807,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["1000",{"_index":1511,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["10000",{"_index":3519,"title":{},"body":{"injectables/StatusListService.html":{}}}],["11",{"_index":3924,"title":{},"body":{"coverage.html":{}}}],["11.0.0",{"_index":3994,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":3990,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":4029,"title":{},"body":{"dependencies.html":{}}}],["11.1.6",{"_index":3985,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":3993,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":4073,"title":{},"body":{"index.html":{}}}],["12/14",{"_index":3973,"title":{},"body":{"coverage.html":{}}}],["12/schema",{"_index":3124,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["13.1.1",{"_index":4020,"title":{},"body":{"dependencies.html":{}}}],["13/13",{"_index":3930,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":3920,"title":{},"body":{"coverage.html":{}}}],["14/14",{"_index":3976,"title":{},"body":{"coverage.html":{}}}],["15.1.3",{"_index":4021,"title":{},"body":{"dependencies.html":{}}}],["15/15",{"_index":3947,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":3885,"title":{},"body":{"coverage.html":{}}}],["17",{"_index":4071,"title":{},"body":{"index.html":{}}}],["18",{"_index":4072,"title":{},"body":{"index.html":{}}}],["18.0.0",{"_index":4010,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":4076,"title":{},"body":{"index.html":{}}}],["1_0.html#claims_query",{"_index":917,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["1_0.html#name",{"_index":907,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["2",{"_index":1074,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"miscellaneous/variables.html":{}}}],["2.0",{"_index":3844,"title":{},"body":{"injectables/WellKnownService.html":{},"properties.html":{}}}],["2.0.2",{"_index":4013,"title":{},"body":{"dependencies.html":{}}}],["2/17",{"_index":3925,"title":{},"body":{"coverage.html":{}}}],["2/2",{"_index":3916,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":3919,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":3903,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":4130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["20/22",{"_index":3894,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{}}}],["201",{"_index":2112,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["20250714110838",{"_index":3997,"title":{},"body":{"dependencies.html":{}}}],["23",{"_index":3969,"title":{},"body":{"coverage.html":{}}}],["24",{"_index":535,"title":{},"body":{"injectables/AuthService.html":{}}}],["24h",{"_index":531,"title":{},"body":{"injectables/AuthService.html":{}}}],["25",{"_index":3927,"title":{},"body":{"coverage.html":{}}}],["256",{"_index":1501,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"miscellaneous/variables.html":{}}}],["29",{"_index":4074,"title":{},"body":{"index.html":{}}}],["3",{"_index":4176,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.0.1",{"_index":3989,"title":{},"body":{"dependencies.html":{}}}],["3.14.3",{"_index":4015,"title":{},"body":{"dependencies.html":{}}}],["3.2.0",{"_index":4012,"title":{},"body":{"dependencies.html":{}}}],["3.3.0",{"_index":3983,"title":{},"body":{"dependencies.html":{}}}],["3.864.0",{"_index":3982,"title":{},"body":{"dependencies.html":{}}}],["3/13",{"_index":3970,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":3929,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":3932,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":3883,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":4135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["300",{"_index":804,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["30d",{"_index":534,"title":{},"body":{"injectables/AuthService.html":{}}}],["33",{"_index":3890,"title":{},"body":{"coverage.html":{}}}],["36/36",{"_index":3873,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":904,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["4.0.1",{"_index":3984,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":3986,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":4016,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":3878,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":3906,"title":{},"body":{"coverage.html":{}}}],["4/7",{"_index":3954,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":4141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["401",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["47",{"_index":3900,"title":{},"body":{"coverage.html":{}}}],["4909",{"_index":2140,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["5",{"_index":2255,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["5.0.3",{"_index":3992,"title":{},"body":{"dependencies.html":{}}}],["5.1.7",{"_index":4027,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":3912,"title":{},"body":{"coverage.html":{}}}],["5/7",{"_index":3937,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":3902,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["500",{"_index":661,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["53",{"_index":3888,"title":{},"body":{"coverage.html":{}}}],["57",{"_index":3953,"title":{},"body":{"coverage.html":{}}}],["6.0.0",{"_index":3991,"title":{},"body":{"dependencies.html":{}}}],["6.0.12",{"_index":4011,"title":{},"body":{"dependencies.html":{}}}],["6.0.2",{"_index":4004,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":3896,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":2626,"title":{},"body":{"injectables/Oid4vpService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["64",{"_index":4075,"title":{},"body":{"index.html":{}}}],["66",{"_index":3897,"title":{},"body":{"coverage.html":{}}}],["7.8.2",{"_index":4025,"title":{},"body":{"dependencies.html":{}}}],["7/13",{"_index":3889,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":3923,"title":{},"body":{"coverage.html":{}}}],["7/9",{"_index":3943,"title":{},"body":{"coverage.html":{}}}],["70",{"_index":4149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["71",{"_index":3936,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":3931,"title":{},"body":{"coverage.html":{}}}],["77",{"_index":3942,"title":{},"body":{"coverage.html":{}}}],["8.16.3",{"_index":4018,"title":{},"body":{"dependencies.html":{}}}],["8/12",{"_index":3913,"title":{},"body":{"coverage.html":{}}}],["8/9",{"_index":3934,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":3905,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["83",{"_index":3939,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":3972,"title":{},"body":{"coverage.html":{}}}],["86400",{"_index":403,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["87",{"_index":3922,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":3933,"title":{},"body":{"coverage.html":{}}}],["8a7a",{"_index":2141,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["8ad6",{"_index":2139,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["9/10",{"_index":3978,"title":{},"body":{"coverage.html":{}}}],["9/19",{"_index":3901,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":3977,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":3893,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["999",{"_index":986,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["_d",{"_index":1661,"title":{},"body":{"classes/DBKeyService.html":{}}}],["_ext",{"_index":1665,"title":{},"body":{"classes/DBKeyService.html":{}}}],["_key_ops",{"_index":1663,"title":{},"body":{"classes/DBKeyService.html":{}}}],["a.key.localecompare(b.key",{"_index":1017,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["a.name.localecompare(b.name",{"_index":1023,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["a.order",{"_index":1015,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["a128gcm",{"_index":2640,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["a739c2c412c0",{"_index":2142,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["abstract",{"_index":2354,"title":{},"body":{"classes/KeyService.html":{}}}],["accept",{"_index":2149,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/WellKnownController.html":{}}}],["accepts",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{}}}],["access",{"_index":11,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"entities/CertEntity.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["access_token",{"_index":398,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TokenResponse.html":{}}}],["accesscert",{"_index":2650,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscert?.length",{"_index":2660,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscertificatecontrollerregister",{"_index":2944,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["accesscertificateid",{"_index":2879,"title":{},"body":{"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{}}}],["accesscertificateresponse",{"_index":1,"title":{"interfaces/AccessCertificateResponse.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"coverage.html":{}}}],["accessible",{"_index":1900,"title":{},"body":{"injectables/FilesService.html":{}}}],["accessing",{"_index":2911,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["accesskeyid",{"_index":3619,"title":{},"body":{"modules/StorageModule.html":{}}}],["accesstoken",{"_index":2901,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["accesstokenrequest",{"_index":771,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["accordingly",{"_index":3686,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["acl",{"_index":1855,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/S3FileStorage.html":{}}}],["acl=public",{"_index":1863,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["action",{"_index":2609,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["active",{"_index":3164,"title":{},"body":{"entities/Session.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"miscellaneous/enumerations.html":{}}}],["actual",{"_index":411,"title":{},"body":{"controllers/AuthController.html":{}}}],["adapt",{"_index":92,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["adapters/db",{"_index":2337,"title":{},"body":{"modules/KeyModule.html":{}}}],["adapters/local.storage",{"_index":3607,"title":{},"body":{"modules/StorageModule.html":{}}}],["adapters/s3.storage",{"_index":3608,"title":{},"body":{"modules/StorageModule.html":{}}}],["adapters/vault",{"_index":2339,"title":{},"body":{"modules/KeyModule.html":{}}}],["add",{"_index":1464,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/MetricModule.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/WellKnownService.html":{}}}],["add(issuer_state",{"_index":3372,"title":{},"body":{"injectables/SessionService.html":{}}}],["addaccesscertificate",{"_index":2903,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addaccesscertificate(tenantid",{"_index":2913,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["adding",{"_index":2898,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["additional",{"_index":1961,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/SessionLogContext.html":{}}}],["additionaldata",{"_index":3303,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["addkey",{"_index":2291,"title":{},"body":{"controllers/KeyController.html":{}}}],["addkey(token",{"_index":2295,"title":{},"body":{"controllers/KeyController.html":{}}}],["addregistrationcertificate",{"_index":2904,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addregistrationcertificate(req",{"_index":2916,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addrp",{"_index":2905,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addrp(name",{"_index":2918,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["adds",{"_index":2920,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["admin",{"_index":525,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/TenantController.html":{},"interfaces/TokenPayload.html":{}}}],["admin.guard",{"_index":3636,"title":{},"body":{"controllers/TenantController.html":{}}}],["adminauthguard",{"_index":34,"title":{"injectables/AdminAuthGuard.html":{}},"body":{"injectables/AdminAuthGuard.html":{},"controllers/TenantController.html":{},"coverage.html":{}}}],["advanced",{"_index":987,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"miscellaneous/variables.html":{}}}],["against",{"_index":1294,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["agent",{"_index":289,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["alg",{"_index":799,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["algorithm",{"_index":1560,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["algorithms",{"_index":1541,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["alias",{"_index":3904,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":4096,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allkeys",{"_index":974,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["allowed",{"_index":3642,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["allowedsigningalgs",{"_index":784,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["allowing",{"_index":3683,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["allowinsecureurls",{"_index":2196,"title":{},"body":{"modules/IssuerModule.html":{}}}],["allowlist",{"_index":59,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/typealiases.html":{}}}],["allowlistpolicy",{"_index":56,"title":{"classes/AllowListPolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["alpha",{"_index":3996,"title":{},"body":{"dependencies.html":{}}}],["already",{"_index":1251,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["always",{"_index":1783,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["amount",{"_index":1359,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{}}}],["any).$schema",{"_index":1481,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["any).issuer",{"_index":2273,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["any).method",{"_index":844,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["any)[key",{"_index":2275,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apache",{"_index":4090,"title":{},"body":{"properties.html":{}}}],["api",{"_index":108,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/RegistrarService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["api:read",{"_index":2751,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["api:write",{"_index":2752,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["api_key",{"_index":126,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["apibody",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/StorageController.html":{}}}],["apibody({description",{"_index":623,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["apiconsumes",{"_index":3589,"title":{},"body":{"controllers/StorageController.html":{}}}],["apiconsumes(\"multipart/form",{"_index":3595,"title":{},"body":{"controllers/StorageController.html":{}}}],["apiexcludecontroller",{"_index":163,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["apiexcludecontroller(process.env.swagger_all",{"_index":386,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["apiextramodels",{"_index":117,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["apiextramodels(webhookauthconfignone",{"_index":142,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["apiheader",{"_index":3824,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apihideproperty",{"_index":892,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["apihideproperty()@column('varchar",{"_index":1175,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/DisplayEntity.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["apikey",{"_index":127,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["apikeyconfig",{"_index":105,"title":{"classes/ApiKeyConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["apioperation",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{},"controllers/WellKnownController.html":{}}}],["apioperation({summary",{"_index":3814,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apiparam",{"_index":2530,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/SessionController.html":{},"controllers/WellKnownController.html":{}}}],["apiparam({name",{"_index":3191,"title":{},"body":{"controllers/SessionController.html":{}}}],["apiproduces",{"_index":2118,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/WellKnownController.html":{}}}],["apiproduces(\"application/json",{"_index":2130,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiproduces(mediatype.application_json",{"_index":3826,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apiproperty",{"_index":118,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/FileUploadDto.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["apiproperty({enum",{"_index":3162,"title":{},"body":{"entities/Session.html":{}}}],["apiproperty({examples",{"_index":2502,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["apiproperty({required",{"_index":3742,"title":{},"body":{"classes/VCT.html":{}}}],["apiproperty({type",{"_index":1368,"title":{},"body":{"classes/CredentialSetQuery.html":{},"classes/FileUploadDto.html":{},"classes/OfferRequestDto.html":{}}}],["apiresponse",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiresponse({description",{"_index":2111,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apisecurity",{"_index":1387,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{}}}],["apisecurity(\"oauth2",{"_index":1394,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{}}}],["apitags",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{}}}],["apitags(\"authentication",{"_index":387,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(\"issuer",{"_index":1391,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{}}}],["apitags(\"presentation",{"_index":2750,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["apitags(\"session",{"_index":3203,"title":{},"body":{"controllers/SessionController.html":{}}}],["apitags(\"status",{"_index":3458,"title":{},"body":{"controllers/StatusListController.html":{}}}],["app/app.controller",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":158,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1062,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["application/json",{"_index":2128,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{}}}],["application/jwk",{"_index":3809,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["application/jwt",{"_index":3853,"title":{},"body":{"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{}}}],["application/statuslist+jwt",{"_index":3456,"title":{},"body":{"controllers/StatusListController.html":{}}}],["application_json",{"_index":4038,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["application_jwt",{"_index":4039,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["applications",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{}}}],["appmodule",{"_index":173,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["arr",{"_index":1007,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["arr.push(i",{"_index":1009,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["arr.reduce((m",{"_index":1018,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["arr.sort",{"_index":1013,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["array",{"_index":95,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/ClaimsQuery.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/JwksResponseDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/StatusListService.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/functions.html":{}}}],["array(size",{"_index":3522,"title":{},"body":{"injectables/StatusListService.html":{}}}],["array(size).fill(0).map",{"_index":3520,"title":{},"body":{"injectables/StatusListService.html":{}}}],["array.from(groupsmap.entries",{"_index":1011,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["array.isarray(dcql_query",{"_index":2623,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["array.isarray(keydesc.notes",{"_index":992,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["associated",{"_index":1216,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"injectables/FilesService.html":{},"classes/IssuanceDto.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["assume",{"_index":822,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["async",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/KeyController.html":{},"classes/LocalFileStorage.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["att",{"_index":2869,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attached",{"_index":898,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["attachment",{"_index":3602,"title":{},"body":{"controllers/StorageController.html":{}}}],["attestation",{"_index":810,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["attestationbased",{"_index":86,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/typealiases.html":{}}}],["attestationbasedpolicy",{"_index":103,"title":{"classes/AttestationBasedPolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["attestations",{"_index":899,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["attestations.map((att",{"_index":2870,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["aud",{"_index":556,"title":{},"body":{"injectables/AuthService.html":{},"injectables/Oid4vpService.html":{}}}],["audience",{"_index":532,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["auth",{"_index":156,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["auth.controller",{"_index":439,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":440,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.module",{"_index":1936,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["auth.service",{"_index":380,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.guard",{"_index":1388,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{}}}],["auth/auth.module",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/entitites/tenant.entity",{"_index":884,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["auth/token.decorator",{"_index":1389,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{}}}],["auth_client_id",{"_index":4152,"title":{},"body":{"miscellaneous/variables.html":{}}}],["auth_client_secret",{"_index":3705,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"miscellaneous/variables.html":{}}}],["auth_queries",{"_index":660,"title":{},"body":{"controllers/AuthorizeController.html":{},"entities/Session.html":{}}}],["auth_session",{"_index":669,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["auth_validation_schema",{"_index":3876,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["authconfig",{"_index":125,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["authconfig.api_key",{"_index":133,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["authconfig.method",{"_index":836,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authconfig.none",{"_index":138,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["authcontroller",{"_index":315,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["authenticate(req",{"_index":2221,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authenticating",{"_index":2937,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["authentication",{"_index":109,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["authentication.'})@apiresponse({status",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticationconfig",{"_index":1991,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["authenticationmethod",{"_index":588,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"miscellaneous/enumerations.html":{}}}],["authenticationmethod.auth",{"_index":2025,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["authenticationmethod.none",{"_index":2024,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["authenticationmethod.presentation_during_issuance",{"_index":2026,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["authenticationmethodauth",{"_index":560,"title":{"classes/AuthenticationMethodAuth.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authenticationmethodinterface",{"_index":563,"title":{"interfaces/AuthenticationMethodInterface.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authenticationmethodnone",{"_index":587,"title":{"classes/AuthenticationMethodNone.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authenticationmethodpresentation",{"_index":584,"title":{"classes/AuthenticationMethodPresentation.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authenticationurlconfig",{"_index":564,"title":{"classes/AuthenticationUrlConfig.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authfixed",{"_index":2136,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["authguard",{"_index":51,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/JwtAuthGuard.html":{}}}],["authguard(\"jwt",{"_index":38,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/JwtAuthGuard.html":{}}}],["authheader",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{}}}],["authheader.startswith(\"basic",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{}}}],["authheader.substring(6",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{}}}],["authmodule",{"_index":184,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"index.html":{},"modules.html":{}}}],["author",{"_index":4092,"title":{},"body":{"properties.html":{}}}],["authorities",{"_index":909,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["authorization",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["authorization_challenge_endpoint",{"_index":757,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorization_code",{"_index":845,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["authorization_encrypted_response_alg",{"_index":2638,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_encrypted_response_enc",{"_index":2639,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_endpoint",{"_index":747,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorization_request",{"_index":2606,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerService.html":{}}}],["authorization_server",{"_index":1337,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["authorization_servers",{"_index":1338,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["authorizationchallengeendpoint",{"_index":610,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationchallengeendpoint(res",{"_index":613,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{}}}],["authorizationcodegrantidentifier",{"_index":723,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationresponse",{"_index":598,"title":{"classes/AuthorizationResponse.html":{}},"body":{"classes/AuthorizationResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"coverage.html":{}}}],["authorizationserver",{"_index":739,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata",{"_index":706,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata.dpop_signing_alg_values_supported",{"_index":785,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata.issuer",{"_index":805,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorize",{"_index":611,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize(@query",{"_index":648,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize(queries",{"_index":618,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize.service",{"_index":641,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize/authorize.controller",{"_index":2181,"title":{},"body":{"modules/IssuerModule.html":{}}}],["authorize/authorize.service",{"_index":2182,"title":{},"body":{"modules/IssuerModule.html":{}}}],["authorizecontroller",{"_index":602,"title":{"controllers/AuthorizeController.html":{}},"body":{"controllers/AuthorizeController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["authorized",{"_index":571,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["authorizequeries",{"_index":614,"title":{"classes/AuthorizeQueries.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{},"coverage.html":{}}}],["authorizequeries})@post('par",{"_index":625,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorizeservice",{"_index":640,"title":{"injectables/AuthorizeService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["authresponse",{"_index":457,"title":{"interfaces/AuthResponse.html":{}},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"coverage.html":{}}}],["authserver",{"_index":741,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/.well",{"_index":749,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize",{"_index":748,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/challenge",{"_index":758,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/par",{"_index":754,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/token",{"_index":746,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authservice",{"_index":379,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"index.html":{}}}],["authtype",{"_index":3773,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["authz",{"_index":2648,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authzmetadata",{"_index":691,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/WellKnownController.html":{}}}],["authzmetadata(session",{"_index":704,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/WellKnownController.html":{}}}],["auto",{"_index":1060,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["autoloadentities",{"_index":1708,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["autologging",{"_index":265,"title":{},"body":{"modules/AppModule.html":{}}}],["automatic",{"_index":2439,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["available",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"entities/StatusListEntity.html":{},"modules.html":{}}}],["avoid",{"_index":1299,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["await",{"_index":529,"title":{},"body":{"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/KeyController.html":{},"classes/LocalFileStorage.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["aws",{"_index":3095,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["axios",{"_index":4005,"title":{},"body":{"dependencies.html":{}}}],["b",{"_index":1014,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["b.order",{"_index":1016,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["back",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{}}}],["background_color",{"_index":1188,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["background_image",{"_index":1190,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["badgateway/oauth2",{"_index":2941,"title":{},"body":{"injectables/RegistrarService.html":{},"dependencies.html":{}}}],["base",{"_index":4163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base64",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FileStorage.html":{},"injectables/ResolverService.html":{}}}],["base64credentials",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{}}}],["base64url",{"_index":4220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base_validation_schema",{"_index":3966,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["base_validation_schema.concat",{"_index":4267,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":1438,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["basedir",{"_index":2376,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["baseurl",{"_index":2965,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["basic",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["batch",{"_index":1350,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{}}}],["batch_credential_issuance",{"_index":1339,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["batch_size",{"_index":1360,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["batchsize",{"_index":1992,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["bearer",{"_index":401,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/TokenResponse.html":{}}}],["before",{"_index":819,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["being",{"_index":3216,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["belong",{"_index":3584,"title":{},"body":{"controllers/StorageController.html":{}}}],["belongs",{"_index":3477,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["better",{"_index":3776,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["between",{"_index":465,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["binary",{"_index":1872,"title":{},"body":{"classes/FileUploadDto.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["binding",{"_index":1465,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["bindings",{"_index":2006,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["bits",{"_index":3467,"title":{},"body":{"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["bitsperstatus",{"_index":3468,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["body",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/CredentialsController.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"interfaces/FileStorage.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/TenantController.html":{}}}],["body.auth_session",{"_index":820,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["body.client_id",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{}}}],["body.client_secret",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{}}}],["body.grant_type",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{}}}],["body.issuer_state",{"_index":812,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["body.privatekey",{"_index":1657,"title":{},"body":{"classes/DBKeyService.html":{}}}],["body.requestid",{"_index":2756,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["body.response",{"_index":2680,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["body.response_type",{"_index":2151,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["body.webhook",{"_index":2757,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["boolean",{"_index":28,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ClaimsQuery.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":178,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["both",{"_index":655,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["bound",{"_index":3012,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["break",{"_index":841,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["browse",{"_index":4079,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":4077,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":3082,"title":{},"body":{"classes/S3FileStorage.html":{},"miscellaneous/variables.html":{}}}],["buffer",{"_index":1848,"title":{},"body":{"interfaces/FileStorage.html":{},"controllers/IssuerManagementController.html":{},"classes/LocalFileStorage.html":{},"controllers/PresentationManagementController.html":{},"classes/S3FileStorage.html":{}}}],["buffer.from",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{}}}],["buffer.from(signature).tostring(\"base64url",{"_index":4217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buffer.from(signaturebase64url",{"_index":4219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bugs",{"_index":4086,"title":{},"body":{"properties.html":{}}}],["build",{"_index":966,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["builder/querypartialentity",{"_index":3409,"title":{},"body":{"injectables/SessionService.html":{}}}],["buildmodel",{"_index":969,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["c.id",{"_index":3707,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["cache",{"_index":2252,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/WellKnownService.html":{}}}],["call",{"_index":2970,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["callback",{"_index":466,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/KeyService.html":{},"injectables/SessionService.html":{}}}],["callbacks",{"_index":575,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["called",{"_index":2927,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["callhandler",{"_index":3228,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["canactivate",{"_index":40,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/JwtAuthGuard.html":{}}}],["canactivate(context",{"_index":41,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/JwtAuthGuard.html":{}}}],["canonical",{"_index":1859,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["cascade",{"_index":869,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["cascading",{"_index":3716,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["case",{"_index":837,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/CryptoImplementationService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["catch",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"classes/S3FileStorage.html":{}}}],["catcherror",{"_index":3243,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["catcherror((error",{"_index":3272,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["cats",{"_index":3581,"title":{},"body":{"controllers/StorageController.html":{}}}],["cb",{"_index":2258,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cb(err",{"_index":2262,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cert",{"_index":1306,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["cert.crt",{"_index":2370,"title":{},"body":{"classes/KeyService.html":{}}}],["cert.id",{"_index":1685,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/RegistrarService.html":{}}}],["cert.publickey.export",{"_index":3061,"title":{},"body":{"injectables/ResolverService.html":{}}}],["cert.revoked",{"_index":3017,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["cert.subjectaltname?.includes(new",{"_index":3057,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certentity",{"_index":850,"title":{"entities/CertEntity.html":{}},"body":{"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"coverage.html":{}}}],["certificate",{"_index":7,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["certificatechainlength",{"_index":2659,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["certificates",{"_index":854,"title":{},"body":{"entities/CertEntity.html":{},"injectables/RegistrarService.html":{}}}],["certificatetype",{"_index":875,"title":{},"body":{"entities/CertEntity.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["certrepository",{"_index":1603,"title":{},"body":{"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{}}}],["certs",{"_index":3013,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["certs?.length",{"_index":3019,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["certs[0",{"_index":3056,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certs[0].jwt",{"_index":3020,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["cfg",{"_index":965,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"modules/StorageModule.html":{}}}],["cfg.get",{"_index":3617,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_bucket",{"_index":3623,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_endpoint",{"_index":3615,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_public_base_url",{"_index":3624,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_region",{"_index":3614,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"storage_driver",{"_index":3612,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.getorthrow(\"local_storage_dir",{"_index":3625,"title":{},"body":{"modules/StorageModule.html":{}}}],["chain",{"_index":3052,"title":{},"body":{"injectables/ResolverService.html":{}}}],["challenge",{"_index":617,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["check",{"_index":256,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["checked",{"_index":827,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["checking",{"_index":3505,"title":{},"body":{"injectables/StatusListService.html":{}}}],["checks",{"_index":1976,"title":{},"body":{"controllers/HealthController.html":{},"injectables/RegistrarService.html":{}}}],["checksum",{"_index":1856,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{}}}],["checksumsha256",{"_index":3105,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["checl",{"_index":3062,"title":{},"body":{"injectables/ResolverService.html":{}}}],["child",{"_index":2086,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["children",{"_index":1320,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{}}}],["claims",{"_index":100,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"injectables/AuthService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["claims?.[credentialconfigurationid",{"_index":1488,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["claims_supported",{"_index":554,"title":{},"body":{"injectables/AuthService.html":{}}}],["claimsquery",{"_index":78,"title":{"classes/ClaimsQuery.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["claimswebhook",{"_index":1993,"title":{},"body":{"entities/IssuanceConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["class",{"_index":53,"title":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayCreateDto.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/FileUploadDto.html":{},"classes/IssuanceDto.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{}},"body":{"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":57,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayCreateDto.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/FileUploadDto.html":{},"classes/IssuanceDto.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"index.html":{}}}],["clear",{"_index":2696,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/JwtStrategy.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["client.id",{"_index":524,"title":{},"body":{"injectables/AuthService.html":{}}}],["client_credentials",{"_index":391,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["client_id",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/TokenPayload.html":{}}}],["client_metadata",{"_index":2632,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_name",{"_index":2641,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_secret",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{}}}],["client_secret_basic",{"_index":548,"title":{},"body":{"injectables/AuthService.html":{}}}],["client_secret_post",{"_index":549,"title":{},"body":{"injectables/AuthService.html":{}}}],["clientcredentialsdto",{"_index":342,"title":{"classes/ClientCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{},"coverage.html":{}}}],["clientid",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{}}}],["clientinitdto",{"_index":938,"title":{"classes/ClientInitDto.html":{}},"body":{"classes/ClientInitDto.html":{},"controllers/TenantController.html":{},"coverage.html":{}}}],["clientsecret",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RegistrarService.html":{}}}],["cloudfront",{"_index":3099,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["cluster_appmodule",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_providers",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_authmodule",{"_index":419,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_exports",{"_index":422,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_imports",{"_index":420,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_providers",{"_index":421,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_cryptoimplementatationmodule",{"_index":1531,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"index.html":{}}}],["cluster_cryptoimplementatationmodule_exports",{"_index":1532,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"index.html":{}}}],["cluster_cryptoimplementatationmodule_providers",{"_index":1533,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"index.html":{}}}],["cluster_cryptomodule",{"_index":1577,"title":{},"body":{"modules/CryptoModule.html":{},"index.html":{}}}],["cluster_cryptomodule_exports",{"_index":1578,"title":{},"body":{"modules/CryptoModule.html":{},"index.html":{}}}],["cluster_cryptomodule_providers",{"_index":1579,"title":{},"body":{"modules/CryptoModule.html":{},"index.html":{}}}],["cluster_issuermodule",{"_index":2163,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_issuermodule_exports",{"_index":2166,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_issuermodule_imports",{"_index":2165,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_issuermodule_providers",{"_index":2164,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_oid4vpmodule",{"_index":2570,"title":{},"body":{"modules/Oid4vpModule.html":{},"index.html":{}}}],["cluster_oid4vpmodule_exports",{"_index":2572,"title":{},"body":{"modules/Oid4vpModule.html":{},"index.html":{}}}],["cluster_oid4vpmodule_imports",{"_index":2571,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["cluster_oid4vpmodule_providers",{"_index":2573,"title":{},"body":{"modules/Oid4vpModule.html":{},"index.html":{}}}],["cluster_presentationsmodule",{"_index":2774,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_presentationsmodule_exports",{"_index":2775,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_presentationsmodule_imports",{"_index":2776,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_presentationsmodule_providers",{"_index":2777,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_registrarmodule",{"_index":2885,"title":{},"body":{"modules/RegistrarModule.html":{},"index.html":{}}}],["cluster_registrarmodule_exports",{"_index":2887,"title":{},"body":{"modules/RegistrarModule.html":{},"index.html":{}}}],["cluster_registrarmodule_imports",{"_index":2886,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["cluster_registrarmodule_providers",{"_index":2888,"title":{},"body":{"modules/RegistrarModule.html":{},"index.html":{}}}],["cluster_resolvermodule",{"_index":3033,"title":{},"body":{"modules/ResolverModule.html":{},"index.html":{}}}],["cluster_resolvermodule_exports",{"_index":3034,"title":{},"body":{"modules/ResolverModule.html":{},"index.html":{}}}],["cluster_resolvermodule_providers",{"_index":3035,"title":{},"body":{"modules/ResolverModule.html":{},"index.html":{}}}],["cluster_sessionmodule",{"_index":3342,"title":{},"body":{"modules/SessionModule.html":{},"index.html":{}}}],["cluster_sessionmodule_exports",{"_index":3344,"title":{},"body":{"modules/SessionModule.html":{},"index.html":{}}}],["cluster_sessionmodule_imports",{"_index":3345,"title":{},"body":{"modules/SessionModule.html":{}}}],["cluster_sessionmodule_providers",{"_index":3343,"title":{},"body":{"modules/SessionModule.html":{},"index.html":{}}}],["cluster_statuslistmodule",{"_index":3478,"title":{},"body":{"modules/StatusListModule.html":{},"index.html":{}}}],["cluster_statuslistmodule_exports",{"_index":3480,"title":{},"body":{"modules/StatusListModule.html":{},"index.html":{}}}],["cluster_statuslistmodule_imports",{"_index":3481,"title":{},"body":{"modules/StatusListModule.html":{}}}],["cluster_statuslistmodule_providers",{"_index":3479,"title":{},"body":{"modules/StatusListModule.html":{},"index.html":{}}}],["cluster_verifiermodule",{"_index":3746,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cluster_verifiermodule_imports",{"_index":3747,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cnf",{"_index":1515,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["cnonce",{"_index":795,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["cnonceexpiresin",{"_index":806,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["code",{"_index":572,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"entities/Session.html":{}}}],["code_challenge",{"_index":670,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_method",{"_index":671,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_methods_supported",{"_index":755,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["colorize",{"_index":270,"title":{},"body":{"modules/AppModule.html":{}}}],["column",{"_index":881,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["column(\"boolean",{"_index":1192,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["column(\"date",{"_index":3179,"title":{},"body":{"entities/Session.html":{}}}],["column(\"int",{"_index":926,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/StatusListEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["column(\"json",{"_index":927,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["column(\"varchar",{"_index":885,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["column('date",{"_index":3147,"title":{},"body":{"entities/Session.html":{}}}],["column('int",{"_index":3469,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["column('json",{"_index":1134,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{}}}],["column('json')@validatenested()@apiproperty({oneof",{"_index":1996,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["column('json')@validatenested()@type(undefined",{"_index":1138,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/PresentationConfig.html":{}}}],["column('varchar",{"_index":862,"title":{},"body":{"entities/CertEntity.html":{},"entities/FileEntity.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{}}}],["column({nullable",{"_index":3655,"title":{},"body":{"entities/TenantEntity.html":{}}}],["column({type",{"_index":3557,"title":{},"body":{"entities/StatusMapping.html":{}}}],["combined",{"_index":4277,"title":{},"body":{"miscellaneous/variables.html":{}}}],["combined.schema",{"_index":953,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["commonoptions",{"_index":1706,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["comparison",{"_index":3024,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["compatible",{"_index":4261,"title":{},"body":{"miscellaneous/variables.html":{}}}],["complete",{"_index":2805,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["completed",{"_index":3175,"title":{},"body":{"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"miscellaneous/enumerations.html":{}}}],["completion",{"_index":3312,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["components",{"_index":1691,"title":{},"body":{"classes/DBKeyService.html":{}}}],["computed",{"_index":3107,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["concat(config_validation_schema",{"_index":4269,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concat(crypto_validation_schema",{"_index":4273,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concat(db_validation_schema",{"_index":4268,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concat(issuer_validation_schema",{"_index":4274,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concat(key_validation_schema",{"_index":4272,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concat(log_validation_schema",{"_index":4270,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concat(registrar_validation_schema",{"_index":4271,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concat(session_validation_schema",{"_index":4275,"title":{},"body":{"miscellaneous/variables.html":{}}}],["concat(storage_validation_schema",{"_index":4276,"title":{},"body":{"miscellaneous/variables.html":{}}}],["condition",{"_index":3386,"title":{},"body":{"injectables/SessionService.html":{}}}],["conditions",{"_index":961,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"miscellaneous/functions.html":{}}}],["conds",{"_index":1030,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["config",{"_index":135,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["config.dto",{"_index":2019,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.dto.ts",{"_index":562,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["config.dto.ts:21",{"_index":595,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{}}}],["config.dto.ts:29",{"_index":597,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{}}}],["config.dto.ts:41",{"_index":2732,"title":{},"body":{"classes/PresentationDuringIssuanceConfig.html":{}}}],["config.dto.ts:49",{"_index":594,"title":{},"body":{"classes/AuthenticationMethodPresentation.html":{}}}],["config.dto.ts:53",{"_index":592,"title":{},"body":{"classes/AuthenticationMethodPresentation.html":{}}}],["config.dto.ts:59",{"_index":568,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{}}}],["config.dto.ts:63",{"_index":566,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{}}}],["config.dto.ts:69",{"_index":591,"title":{},"body":{"classes/AuthenticationMethodNone.html":{}}}],["config.entity",{"_index":82,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationConfigCreateDto.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/RootOfTrustPolicy.html":{}}}],["config.entity.ts",{"_index":887,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["config.entity.ts:105",{"_index":1700,"title":{},"body":{"classes/DCQL.html":{}}}],["config.entity.ts:111",{"_index":1698,"title":{},"body":{"classes/DCQL.html":{}}}],["config.entity.ts:114",{"_index":1997,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:123",{"_index":2003,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:124",{"_index":2720,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:129",{"_index":2015,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:131",{"_index":2724,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:137",{"_index":2723,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:138",{"_index":2002,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:145",{"_index":2718,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:147",{"_index":2013,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:153",{"_index":2721,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:156",{"_index":2000,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:161",{"_index":2716,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:164",{"_index":2011,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:169",{"_index":2722,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:177",{"_index":2727,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:183",{"_index":2715,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:189",{"_index":2725,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:199",{"_index":2714,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:31",{"_index":2712,"title":{},"body":{"classes/PresentationAttachment.html":{}}}],["config.entity.ts:34",{"_index":2711,"title":{},"body":{"classes/PresentationAttachment.html":{}}}],["config.entity.ts:38",{"_index":2710,"title":{},"body":{"classes/PresentationAttachment.html":{}}}],["config.entity.ts:44",{"_index":3728,"title":{},"body":{"classes/TrustedAuthorityQuery.html":{}}}],["config.entity.ts:48",{"_index":3730,"title":{},"body":{"classes/TrustedAuthorityQuery.html":{}}}],["config.entity.ts:49",{"_index":2012,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:55",{"_index":1362,"title":{},"body":{"classes/CredentialQuery.html":{}}}],["config.entity.ts:56",{"_index":2014,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:58",{"_index":1361,"title":{},"body":{"classes/CredentialQuery.html":{}}}],["config.entity.ts:62",{"_index":1365,"title":{},"body":{"classes/CredentialQuery.html":{},"entities/IssuanceConfig.html":{}}}],["config.entity.ts:65",{"_index":1363,"title":{},"body":{"classes/CredentialQuery.html":{}}}],["config.entity.ts:70",{"_index":2009,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:71",{"_index":1367,"title":{},"body":{"classes/CredentialQuery.html":{}}}],["config.entity.ts:77",{"_index":888,"title":{},"body":{"classes/ClaimsQuery.html":{}}}],["config.entity.ts:80",{"_index":889,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/IssuanceConfig.html":{}}}],["config.entity.ts:84",{"_index":891,"title":{},"body":{"classes/ClaimsQuery.html":{}}}],["config.entity.ts:94",{"_index":1370,"title":{},"body":{"classes/CredentialSetQuery.html":{}}}],["config.entity.ts:98",{"_index":1372,"title":{},"body":{"classes/CredentialSetQuery.html":{}}}],["config.id",{"_index":1474,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["config.keyid",{"_index":1305,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.md",{"_index":4179,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config.service",{"_index":1390,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["config.service.ts",{"_index":1221,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["config.service.ts:149",{"_index":1247,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:158",{"_index":1240,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:17",{"_index":2421,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:171",{"_index":1243,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:18",{"_index":1230,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:185",{"_index":1249,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:198",{"_index":1233,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:23",{"_index":2430,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:34",{"_index":1244,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:47",{"_index":2433,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:59",{"_index":2422,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:63",{"_index":2429,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:67",{"_index":2428,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:71",{"_index":2427,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:75",{"_index":2425,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:79",{"_index":2424,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:86",{"_index":2434,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:94",{"_index":2438,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config/credential",{"_index":1220,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["config_folder",{"_index":4186,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config_import",{"_index":4181,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config_import_force",{"_index":4184,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config_print",{"_index":4164,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config_print_advanced",{"_index":4172,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config_print_file",{"_index":4177,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config_print_format",{"_index":4168,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config_print_in_prod",{"_index":4174,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config_print_in_prod=true",{"_index":1095,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["config_validation_schema",{"_index":3959,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["configgroup",{"_index":942,"title":{"interfaces/ConfigGroup.html":{}},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"coverage.html":{}}}],["configitem",{"_index":946,"title":{"interfaces/ConfigItem.html":{}},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"coverage.html":{}}}],["configmodel",{"_index":963,"title":{"interfaces/ConfigModel.html":{}},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"coverage.html":{}}}],["configmodule",{"_index":203,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["configmodule.forroot",{"_index":243,"title":{},"body":{"modules/AppModule.html":{}}}],["configpath",{"_index":1262,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["configprinterservice",{"_index":195,"title":{"injectables/ConfigPrinterService.html":{}},"body":{"modules/AppModule.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"coverage.html":{},"index.html":{}}}],["configs",{"_index":1245,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["configservice",{"_index":204,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["configservice.get",{"_index":252,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["configservice.get(\"jwt_issuer",{"_index":2272,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get(\"jwt_secret",{"_index":2266,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get(\"log_level",{"_index":264,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(\"oidc",{"_index":2239,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get(\"oidc_algorithm",{"_index":2264,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get(\"oidc_internal_issuer_url",{"_index":2248,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.getorthrow(\"db_database",{"_index":1718,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"db_host",{"_index":1710,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"db_password",{"_index":1716,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"db_port",{"_index":1712,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"db_username",{"_index":1714,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"folder",{"_index":304,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["configservie",{"_index":1566,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["configurable",{"_index":528,"title":{},"body":{"injectables/AuthService.html":{}}}],["configuration",{"_index":107,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["configuration(@token",{"_index":2760,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["configuration(user",{"_index":2737,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["configurations",{"_index":1209,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["configured",{"_index":1573,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"classes/PresentationRequest.html":{},"injectables/SessionService.html":{}}}],["conflictexception",{"_index":722,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{},"controllers/TenantController.html":{}}}],["conflictexception(\"certificate",{"_index":2371,"title":{},"body":{"classes/KeyService.html":{}}}],["conflictexception(\"issuer",{"_index":3068,"title":{},"body":{"injectables/ResolverService.html":{}}}],["conflictexception(\"no",{"_index":2682,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["conflictexception(\"user",{"_index":3646,"title":{},"body":{"controllers/TenantController.html":{}}}],["conflictexception(`request",{"_index":2850,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["connect",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{}}}],["connect/certs",{"_index":2251,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["connect/token",{"_index":2959,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["connection",{"_index":1977,"title":{},"body":{"controllers/HealthController.html":{}}}],["console.error",{"_index":2259,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{}}}],["console.error(\"error",{"_index":3003,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["console.log('session",{"_index":2549,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["console.log(err",{"_index":2860,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["console.warn",{"_index":1938,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["const",{"_index":250,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"classes/DisplayCreateDto.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationConfigCreateDto.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateKeyDto.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["constraints",{"_index":1312,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["constructor",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/ConfigPrinterService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["constructor(basedir",{"_index":2374,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["constructor(cfg",{"_index":1114,"title":{},"body":{"injectables/ConfigPrinterService.html":{}}}],["constructor(configservice",{"_index":698,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/DBKeyService.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{}}}],["constructor(configservie",{"_index":1564,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["constructor(credentialconfigrepository",{"_index":1227,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["constructor(cryptoservice",{"_index":1429,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{}}}],["constructor(displayrepository",{"_index":1763,"title":{},"body":{"injectables/DisplayService.html":{}}}],["constructor(httpservice",{"_index":2795,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/WebhookService.html":{}}}],["constructor(issuanceconfigrepo",{"_index":2049,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["constructor(jwtservice",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(keyrepository",{"_index":1796,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["constructor(logger",{"_index":3300,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["constructor(oid4vciservice",{"_index":3840,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["constructor(private",{"_index":388,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CryptoImplementationService.html":{},"controllers/DisplayController.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/ResolverService.html":{},"injectables/SessionPipe.html":{},"controllers/StatusListController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"controllers/WellKnownController.html":{}}}],["constructor(reflector",{"_index":2199,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["constructor(s3",{"_index":3080,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["constructor(sessionrepository",{"_index":3366,"title":{},"body":{"injectables/SessionService.html":{}}}],["constructor(sessionservice",{"_index":3354,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["constructor(storage",{"_index":1879,"title":{},"body":{"injectables/FilesService.html":{}}}],["containing",{"_index":469,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["content",{"_index":291,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["contenttype",{"_index":1854,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":47,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["context.flowtype",{"_index":3328,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.getclass",{"_index":2209,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":2208,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["context.sessionid",{"_index":3330,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.switchtohttp().getrequest",{"_index":3250,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":3251,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["context.tenantid",{"_index":3331,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.ts",{"_index":3213,"title":{},"body":{"interfaces/SessionLogContext.html":{},"coverage.html":{}}}],["context.ts:21",{"_index":3215,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["continue",{"_index":990,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["controller",{"_index":157,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/DisplayController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"controllers/WellKnownController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/DisplayController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"injectables/SessionPipe.html":{},"controllers/StatusListController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["controller(\":session/.well",{"_index":3823,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["controller(\":session/authorize",{"_index":646,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["controller(\":session/oid4vp",{"_index":2566,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["controller(\":session/vci",{"_index":2536,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["controller(\":tenantid/credentials",{"_index":1416,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["controller(\":tenantid/status",{"_index":3459,"title":{},"body":{"controllers/StatusListController.html":{}}}],["controller(\"display",{"_index":1742,"title":{},"body":{"controllers/DisplayController.html":{}}}],["controller(\"health",{"_index":1983,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller(\"issuer",{"_index":1395,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{}}}],["controller(\"key",{"_index":2308,"title":{},"body":{"controllers/KeyController.html":{}}}],["controller(\"presentation",{"_index":2753,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["controller(\"session",{"_index":3204,"title":{},"body":{"controllers/SessionController.html":{}}}],["controller(\"storage",{"_index":3593,"title":{},"body":{"controllers/StorageController.html":{}}}],["controller(\"tenant",{"_index":3640,"title":{},"body":{"controllers/TenantController.html":{}}}],["controllers",{"_index":159,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"modules/CryptoModule.html":{},"controllers/DisplayController.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/KeyController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"controllers/WellKnownController.html":{},"index.html":{}}}],["convert",{"_index":1686,"title":{},"body":{"classes/DBKeyService.html":{}}}],["coordinate",{"_index":1785,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["copy",{"_index":3278,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["correct",{"_index":828,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["count",{"_index":3432,"title":{},"body":{"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["counter",{"_index":1274,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["coverage",{"_index":3867,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covered",{"_index":3008,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["create",{"_index":1505,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"controllers/IssuerManagementController.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationConfigCreateDto.html":{},"controllers/PresentationManagementController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["create(session",{"_index":3375,"title":{},"body":{"injectables/SessionService.html":{}}}],["create(tenantid",{"_index":1606,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"classes/KeyService.html":{}}}],["create.dto",{"_index":1260,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["create.dto.ts",{"_index":1202,"title":{},"body":{"classes/CredentialConfigCreate.html":{},"classes/DisplayCreateDto.html":{},"classes/PresentationConfigCreateDto.html":{},"coverage.html":{}}}],["create_authorization_request",{"_index":2610,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest",{"_index":2580,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest(session",{"_index":2585,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationservermetadata",{"_index":745,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["created",{"_index":861,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["createdat",{"_index":855,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["createdatecolumn",{"_index":858,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["createdisplay",{"_index":1731,"title":{},"body":{"controllers/DisplayController.html":{}}}],["createdisplay(user",{"_index":1733,"title":{},"body":{"controllers/DisplayController.html":{}}}],["createdsession",{"_index":3430,"title":{},"body":{"injectables/SessionService.html":{}}}],["createdsession.issuanceid",{"_index":3435,"title":{},"body":{"injectables/SessionService.html":{}}}],["createdsession.tenantid",{"_index":3434,"title":{},"body":{"injectables/SessionService.html":{}}}],["createentry",{"_index":3490,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createentry(session",{"_index":3497,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createhash('sha256').update(bufferorstreamtobuffer(body)).digest('base64",{"_index":1914,"title":{},"body":{"injectables/FilesService.html":{}}}],["createheaderandpayload",{"_index":3513,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createlist",{"_index":3491,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createlist(entry",{"_index":3500,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createparamdecorator",{"_index":3719,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["createreadstream",{"_index":2381,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["createreadstream(fullpath",{"_index":2406,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["createrequest",{"_index":2581,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createrequest(requestid",{"_index":2590,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["creates",{"_index":1551,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{}}}],["createwritestream",{"_index":2382,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["createwritestream(fullpath",{"_index":2395,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["creation",{"_index":925,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["credential",{"_index":578,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/TrustedAuthorityQuery.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["credential(req",{"_index":2519,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["credential.issuanceconfigs",{"_index":2020,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["credential.issuanceconfigs)@jointable",{"_index":2004,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["credential_configurations_supported",{"_index":1340,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/CredentialsService.html":{}}}],["credential_creation",{"_index":3337,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_endpoint",{"_index":1341,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["credential_ids",{"_index":901,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["credential_issuance",{"_index":3336,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_issuer",{"_index":1342,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["credential_revoked",{"_index":2479,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["credential_set",{"_index":920,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["credential_sets",{"_index":102,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["credential_signing_alg_values_supported",{"_index":1470,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credential_verification",{"_index":3339,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credentialconfig",{"_index":1125,"title":{"entities/CredentialConfig.html":{}},"body":{"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialconfig).key",{"_index":1316,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["credentialconfig.schema",{"_index":1529,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.vct",{"_index":1523,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.vct.vct",{"_index":1525,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigcreate",{"_index":1200,"title":{"classes/CredentialConfigCreate.html":{}},"body":{"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"coverage.html":{}}}],["credentialconfigid",{"_index":2099,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialconfigids",{"_index":1217,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{}}}],["credentialconfigmapping",{"_index":1206,"title":{"classes/CredentialConfigMapping.html":{}},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"coverage.html":{}}}],["credentialconfigrepo",{"_index":1431,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigrepository",{"_index":1231,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["credentialconfigs",{"_index":1214,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{}}}],["credentialconfigservice",{"_index":1218,"title":{"injectables/CredentialConfigService.html":{}},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"coverage.html":{},"index.html":{}}}],["credentialconfiguration",{"_index":1484,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.claims",{"_index":1490,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.disclosureframe",{"_index":1491,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.keybinding",{"_index":1516,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.lifetime",{"_index":1514,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.statusmanagement",{"_index":1507,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration?.keyid",{"_index":1492,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigurationid",{"_index":1439,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["credentialconfigurationids",{"_index":2494,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["credentialconfigurationsupported",{"_index":1447,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigurationsupported).vct",{"_index":1477,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialcount",{"_index":2693,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialid",{"_index":1446,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialissuer",{"_index":3858,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["credentialissuermetadatadto",{"_index":1331,"title":{"classes/CredentialIssuerMetadataDto.html":{}},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["credentialofferobject",{"_index":3155,"title":{},"body":{"entities/Session.html":{}}}],["credentialpayload",{"_index":3136,"title":{},"body":{"entities/Session.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["credentialquery",{"_index":79,"title":{"classes/CredentialQuery.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["credentialresponse",{"_index":2531,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["credentials",{"_index":101,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/NoneTrustPolicy.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["credentials.dto",{"_index":382,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials.dto.ts",{"_index":935,"title":{},"body":{"classes/ClientCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:5",{"_index":936,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.dto.ts:7",{"_index":937,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.length",{"_index":2692,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentials.push(credential",{"_index":2102,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentials.split",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{}}}],["credentials/credential",{"_index":2066,"title":{},"body":{"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["credentials/credentials.controller",{"_index":2183,"title":{},"body":{"modules/IssuerModule.html":{}}}],["credentials/credentials.service",{"_index":1415,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{}}}],["credentials/entities/credential.entity",{"_index":2017,"title":{},"body":{"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["credentials?.length",{"_index":2694,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialsconfigservice",{"_index":2050,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialscontroller",{"_index":1373,"title":{"controllers/CredentialsController.html":{}},"body":{"controllers/CredentialsController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialsetquery",{"_index":80,"title":{"classes/CredentialSetQuery.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["credentialsmetadatacontroller",{"_index":1404,"title":{"controllers/CredentialsMetadataController.html":{}},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialsservice",{"_index":1397,"title":{"injectables/CredentialsService.html":{}},"body":{"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"coverage.html":{},"index.html":{}}}],["credentialtype",{"_index":3306,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["cron",{"_index":3390,"title":{},"body":{"injectables/SessionService.html":{}}}],["crt",{"_index":15,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{}}}],["crv",{"_index":1776,"title":{},"body":{"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["crypto",{"_index":1313,"title":{},"body":{"injectables/CredentialConfigService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/FilesService.html":{},"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["crypto.service",{"_index":1583,"title":{},"body":{"modules/CryptoModule.html":{},"controllers/KeyController.html":{}}}],["crypto.webcrypto.subtle.exportkey",{"_index":4211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.generatekey",{"_index":4210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.importkey",{"_index":4214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.sign",{"_index":4215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.verify",{"_index":4222,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto/crypto.module",{"_index":224,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{}}}],["crypto/crypto.service",{"_index":729,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"injectables/WellKnownService.html":{}}}],["crypto/encryption/encryption.service",{"_index":2595,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["crypto/key/crypto",{"_index":1459,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/WellKnownService.html":{}}}],["crypto/key/dto/key",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{}}}],["crypto/key/entities/cert.entity",{"_index":1179,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["crypto/key/key.module",{"_index":225,"title":{},"body":{"modules/AppModule.html":{}}}],["crypto_alg",{"_index":4191,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto_validation_schema",{"_index":3907,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["cryptographic",{"_index":2912,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["cryptographic_binding_methods_supported",{"_index":1471,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["cryptoimplementatationmodule",{"_index":1530,"title":{"modules/CryptoImplementatationModule.html":{}},"body":{"modules/CryptoImplementatationModule.html":{},"modules/KeyModule.html":{},"index.html":{},"modules.html":{}}}],["cryptoimplementation",{"_index":1536,"title":{"interfaces/CryptoImplementation.html":{}},"body":{"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cryptoimplementationservice",{"_index":1432,"title":{"injectables/CryptoImplementationService.html":{}},"body":{"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["cryptokey",{"_index":1640,"title":{},"body":{"classes/DBKeyService.html":{}}}],["cryptomodule",{"_index":185,"title":{"modules/CryptoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["cryptoservice",{"_index":699,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["cryptoservice.getcrypto",{"_index":1656,"title":{},"body":{"classes/DBKeyService.html":{}}}],["cryptotype",{"_index":1569,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["ctx",{"_index":3720,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":3721,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["current",{"_index":2079,"title":{},"body":{"injectables/IssuanceService.html":{},"entities/TenantEntity.html":{},"miscellaneous/functions.html":{}}}],["curve",{"_index":1773,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["customprops",{"_index":279,"title":{},"body":{"modules/AppModule.html":{}}}],["c}]`).join",{"_index":1032,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["d",{"_index":1660,"title":{},"body":{"classes/DBKeyService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["data",{"_index":471,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"interfaces/CryptoImplementation.html":{},"classes/DCQL.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/StorageController.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/variables.html":{}}}],["data')@apibody({description",{"_index":3580,"title":{},"body":{"controllers/StorageController.html":{}}}],["database",{"_index":1717,"title":{},"body":{"modules/DatabaseModule.html":{},"controllers/HealthController.html":{},"miscellaneous/variables.html":{}}}],["database/database.module",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":186,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"index.html":{},"modules.html":{}}}],["date",{"_index":857,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["date().gettime",{"_index":1510,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["date().toisostring",{"_index":1024,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["date().toisostring().slice(0",{"_index":1909,"title":{},"body":{"injectables/FilesService.html":{}}}],["date(date.now",{"_index":3447,"title":{},"body":{"injectables/SessionService.html":{}}}],["date(token.expiresat",{"_index":2978,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["date.gettime",{"_index":2988,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["date.now",{"_index":2671,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["day",{"_index":3402,"title":{},"body":{"injectables/SessionService.html":{}}}],["db",{"_index":1984,"title":{},"body":{"controllers/HealthController.html":{}}}],["db_database",{"_index":4205,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db_host",{"_index":4198,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db_password",{"_index":4204,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db_port",{"_index":4200,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db_type",{"_index":1705,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_username",{"_index":4203,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db_validation_schema",{"_index":3915,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbkeyservice",{"_index":1590,"title":{"classes/DBKeyService.html":{}},"body":{"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"coverage.html":{}}}],["dbtype",{"_index":1704,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dc+sd",{"_index":2636,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcql",{"_index":919,"title":{"classes/DCQL.html":{}},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["dcql_query",{"_index":928,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["dcql_query.length",{"_index":2624,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcqlquerycount",{"_index":2622,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dd",{"_index":275,"title":{},"body":{"modules/AppModule.html":{}}}],["deal",{"_index":2126,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["debug",{"_index":2455,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"miscellaneous/variables.html":{}}}],["debugging",{"_index":2243,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["declarations",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["declare",{"_index":88,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["decodedvc",{"_index":2852,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.header",{"_index":2855,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.payload",{"_index":2854,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decorator",{"_index":4190,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":63,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"classes/AuthenticationMethodAuth.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/FileEntity.html":{},"classes/FileUploadDto.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"entities/RegistrarEntity.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["decrease",{"_index":3439,"title":{},"body":{"injectables/SessionService.html":{}}}],["decryption",{"_index":1792,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["decryptjwe",{"_index":1793,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["decryptjwe(response",{"_index":1798,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["dedicated",{"_index":2699,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["deeppartial",{"_index":3376,"title":{},"body":{"injectables/SessionService.html":{}}}],["default",{"_index":842,"title":{},"body":{"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtService.html":{},"entities/KeyEntity.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"injectables/WebhookService.html":{},"miscellaneous/variables.html":{}}}],["default(\"../../assets/config",{"_index":4187,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(\"../../docs/architecture/environment",{"_index":4178,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(\"../../tmp",{"_index":4155,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(\"db",{"_index":4227,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(\"es256",{"_index":4193,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(\"eudiplo",{"_index":4161,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(\"http://localhost:3000",{"_index":4225,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(\"local",{"_index":4252,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(\"sqlite",{"_index":4196,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(\"text",{"_index":4170,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(24",{"_index":4247,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(60",{"_index":4244,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(false",{"_index":4166,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(process.env.node_env",{"_index":4233,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(true",{"_index":4173,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default_auth_client_id",{"_index":449,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_auth_client_secret",{"_index":450,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_jwt_secret",{"_index":447,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultmetrics",{"_index":2472,"title":{},"body":{"modules/MetricModule.html":{}}}],["define",{"_index":663,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/PresentationConfigCreateDto.html":{}}}],["defined",{"_index":43,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"injectables/ConfigPrinterService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["defines",{"_index":4241,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deftag",{"_index":1028,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["delete",{"_index":1223,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"classes/LocalFileStorage.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["delete(\":id",{"_index":1401,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/TenantController.html":{}}}],["delete(':id",{"_index":1380,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/TenantController.html":{}}}],["delete(id",{"_index":3378,"title":{},"body":{"injectables/SessionService.html":{}}}],["delete(key",{"_index":1839,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["delete(tenantid",{"_index":1232,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["deletebytenant",{"_index":1876,"title":{},"body":{"injectables/FilesService.html":{}}}],["deletebytenant(tenantid",{"_index":1884,"title":{},"body":{"injectables/FilesService.html":{}}}],["deleteconfiguration",{"_index":2735,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(@param(\"id",{"_index":2763,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(id",{"_index":2739,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleted",{"_index":1883,"title":{},"body":{"injectables/FilesService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["deleteissuanceconfiguration",{"_index":1376,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["deleteissuanceconfiguration(id",{"_index":1379,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{}}}],["deleteissuanceconfiguration(tenantid",{"_index":2053,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["deletekey",{"_index":2292,"title":{},"body":{"controllers/KeyController.html":{}}}],["deletekey(@token",{"_index":2316,"title":{},"body":{"controllers/KeyController.html":{}}}],["deletekey(token",{"_index":2297,"title":{},"body":{"controllers/KeyController.html":{}}}],["deleteobjectcommand",{"_index":3091,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["deletepresentationconfig",{"_index":2790,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletepresentationconfig(id",{"_index":2802,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletes",{"_index":1234,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["deletesession",{"_index":3183,"title":{},"body":{"controllers/SessionController.html":{}}}],["deletesession(id",{"_index":3187,"title":{},"body":{"controllers/SessionController.html":{}}}],["deletetenant",{"_index":3627,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantService.html":{}}}],["deletetenant(@param(\"id",{"_index":3650,"title":{},"body":{"controllers/TenantController.html":{}}}],["deletetenant(id",{"_index":3630,"title":{},"body":{"controllers/TenantController.html":{}}}],["deletetenant(tenantid",{"_index":3666,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["deletion",{"_index":2804,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["dependencies",{"_index":175,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"dependencies.html":{},"index.html":{}}}],["deprecated",{"_index":1035,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["desc",{"_index":2847,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/SessionService.html":{},"miscellaneous/functions.html":{}}}],["desckeys",{"_index":972,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["desckeys[key",{"_index":979,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["described",{"_index":970,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["described.keys",{"_index":973,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["description",{"_index":9,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayImage.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"classes/NoneTrustPolicy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["description(\"allow",{"_index":4175,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"application",{"_index":4234,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"claim",{"_index":4134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"client",{"_index":4151,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"database",{"_index":4197,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"enable",{"_index":4122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"expected",{"_index":4140,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"force",{"_index":4185,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"format",{"_index":4171,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"internal",{"_index":4129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"interval",{"_index":4245,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"local",{"_index":4145,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"log",{"_index":4236,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"output",{"_index":4180,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"path",{"_index":4188,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"relying",{"_index":4162,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"root",{"_index":4156,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"run",{"_index":4182,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"the",{"_index":4194,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"time",{"_index":4248,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description(\"whether",{"_index":4263,"title":{},"body":{"miscellaneous/variables.html":{}}}],["details",{"_index":601,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["detection",{"_index":1913,"title":{},"body":{"injectables/FilesService.html":{}}}],["determine",{"_index":2001,"title":{},"body":{"entities/IssuanceConfig.html":{},"miscellaneous/variables.html":{}}}],["development/testing",{"_index":3703,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["different",{"_index":1540,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/IssuanceService.html":{},"injectables/RegistrarService.html":{}}}],["digest",{"_index":1449,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["dir",{"_index":1084,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["direct_post.jwt",{"_index":2631,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["directory",{"_index":2812,"title":{},"body":{"injectables/PresentationsService.html":{},"miscellaneous/variables.html":{}}}],["dirname",{"_index":2387,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["disable",{"_index":2981,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["disclosure",{"_index":1148,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["disclosure_policy",{"_index":1482,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["disclosureframe",{"_index":1127,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["discovery",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["discovery.dto",{"_index":384,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["discovery.dto.ts",{"_index":3872,"title":{},"body":{"coverage.html":{}}}],["discoveryendpoint",{"_index":2960,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["discriminated",{"_index":1149,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["discriminator",{"_index":152,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["display",{"_index":1186,"title":{"classes/Display.html":{}},"body":{"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["display.service",{"_index":1740,"title":{},"body":{"controllers/DisplayController.html":{}}}],["display/display.controller",{"_index":2185,"title":{},"body":{"modules/IssuerModule.html":{}}}],["display/display.service",{"_index":2186,"title":{},"body":{"modules/IssuerModule.html":{}}}],["display/entities/display.entity",{"_index":2187,"title":{},"body":{"modules/IssuerModule.html":{}}}],["displaycontroller",{"_index":1729,"title":{"controllers/DisplayController.html":{}},"body":{"controllers/DisplayController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["displaycreatedto",{"_index":1735,"title":{"classes/DisplayCreateDto.html":{}},"body":{"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"injectables/DisplayService.html":{},"coverage.html":{}}}],["displaydata",{"_index":1734,"title":{},"body":{"controllers/DisplayController.html":{},"injectables/DisplayService.html":{}}}],["displayentity",{"_index":1748,"title":{"entities/DisplayEntity.html":{}},"body":{"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["displayimage",{"_index":1184,"title":{"classes/DisplayImage.html":{}},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"coverage.html":{}}}],["displayinfo",{"_index":1753,"title":{"classes/DisplayInfo.html":{}},"body":{"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"coverage.html":{}}}],["displaylogo",{"_index":1756,"title":{"classes/DisplayLogo.html":{}},"body":{"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"coverage.html":{}}}],["displayrepository",{"_index":1765,"title":{},"body":{"injectables/DisplayService.html":{}}}],["displayservice",{"_index":1739,"title":{"injectables/DisplayService.html":{}},"body":{"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"modules/IssuerModule.html":{},"coverage.html":{},"index.html":{}}}],["disposition",{"_index":3601,"title":{},"body":{"controllers/StorageController.html":{}}}],["dns",{"_index":3000,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["docs",{"_index":1040,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["document",{"_index":3044,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/WellKnownService.html":{}}}],["documentation",{"_index":3868,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["documents",{"_index":2801,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["download",{"_index":3574,"title":{},"body":{"controllers/StorageController.html":{}}}],["download(@param(\"key",{"_index":3598,"title":{},"body":{"controllers/StorageController.html":{}}}],["download(key",{"_index":3575,"title":{},"body":{"controllers/StorageController.html":{}}}],["dpop",{"_index":779,"title":{},"body":{"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dpop_jkt",{"_index":672,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["dpop_signing_alg_values_supported",{"_index":750,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dpoprequired",{"_index":1994,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["dpopvalue",{"_index":777,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["driver",{"_index":3610,"title":{},"body":{"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["dto",{"_index":460,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["dto/auth",{"_index":2836,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["dto/authentication",{"_index":2018,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["dto/authorization",{"_index":2564,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["dto/authorize",{"_index":642,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dto/client",{"_index":381,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TenantController.html":{}}}],["dto/credential",{"_index":1259,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/WellKnownService.html":{}}}],["dto/display",{"_index":1741,"title":{},"body":{"controllers/DisplayController.html":{},"injectables/DisplayService.html":{}}}],["dto/file",{"_index":3590,"title":{},"body":{"controllers/StorageController.html":{}}}],["dto/issuance.dto",{"_index":2037,"title":{},"body":{"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["dto/issuer",{"_index":3047,"title":{},"body":{"injectables/ResolverService.html":{}}}],["dto/jwks",{"_index":3821,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["dto/key",{"_index":1649,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{}}}],["dto/notification",{"_index":2535,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["dto/oauth",{"_index":3822,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["dto/oidc",{"_index":383,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/par",{"_index":645,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["dto/presentation",{"_index":2601,"title":{},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["dto/status",{"_index":3516,"title":{},"body":{"injectables/StatusListService.html":{}}}],["dto/token",{"_index":385,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/vp",{"_index":897,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["duration",{"_index":3265,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["duration}ms",{"_index":3271,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["during",{"_index":3778,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["dynamicmodule",{"_index":2334,"title":{},"body":{"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["e",{"_index":1322,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["e.g",{"_index":519,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{},"interfaces/SessionLogContext.html":{}}}],["e.message",{"_index":1324,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["each",{"_index":89,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"entities/StatusListEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["easier",{"_index":3022,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["ec",{"_index":1774,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["ec_public",{"_index":1620,"title":{"classes/EC_Public.html":{}},"body":{"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"coverage.html":{}}}],["ecdh",{"_index":1822,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["ecdsa",{"_index":4206,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ecdsa_p256",{"_index":3895,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ed25519",{"_index":1575,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["eddsa",{"_index":4209,"title":{},"body":{"miscellaneous/variables.html":{}}}],["edit",{"_index":1063,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["effectively",{"_index":4054,"title":{},"body":{"miscellaneous/functions.html":{}}}],["element",{"_index":1290,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{}}}],["elements",{"_index":1278,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["elliptic",{"_index":1772,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["embedded",{"_index":1147,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["embeddeddisclosurepolicy",{"_index":60,"title":{"classes/EmbeddedDisclosurePolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["embeddeddisclosurepolicy:31",{"_index":66,"title":{},"body":{"classes/AllowListPolicy.html":{}}}],["embeddeddisclosurepolicy:42",{"_index":3075,"title":{},"body":{"classes/RootOfTrustPolicy.html":{}}}],["embeddeddisclosurepolicy:54",{"_index":2473,"title":{},"body":{"classes/NoneTrustPolicy.html":{}}}],["embeddeddisclosurepolicy:80",{"_index":311,"title":{},"body":{"classes/AttestationBasedPolicy.html":{}}}],["emits",{"_index":3235,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["emitter",{"_index":3988,"title":{},"body":{"dependencies.html":{}}}],["empty",{"_index":410,"title":{},"body":{"controllers/AuthController.html":{},"injectables/StatusListService.html":{}}}],["enabled",{"_index":1504,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"injectables/RegistrarService.html":{}}}],["enabledebugmode",{"_index":2443,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["enablehttplogger",{"_index":251,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["enablesessionlogger",{"_index":2442,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["encodeuri(key",{"_index":3111,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["encodeuricomponent(key)}=${encodeuricomponent(value",{"_index":2669,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["encrypt",{"_index":1803,"title":{},"body":{"injectables/EncryptionService.html":{},"entities/KeyEntity.html":{},"miscellaneous/typealiases.html":{}}}],["encrypted",{"_index":1804,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryption",{"_index":1791,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryption/encryption.service",{"_index":1584,"title":{},"body":{"modules/CryptoModule.html":{}}}],["encryptionservice",{"_index":1580,"title":{"injectables/EncryptionService.html":{}},"body":{"modules/CryptoModule.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{},"index.html":{}}}],["encrypts",{"_index":1801,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["endpoint",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/HealthController.html":{},"modules/MetricModule.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/SessionLoggerInterceptor.html":{},"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":607,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/HealthController.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["enhanced",{"_index":415,"title":{},"body":{"controllers/AuthController.html":{}}}],["ensure",{"_index":2269,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["entities",{"_index":851,"title":{},"body":{"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/DisplayEntity.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"index.html":{}}}],["entities/cert.entity",{"_index":1651,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{}}}],["entities/credential.entity",{"_index":1205,"title":{},"body":{"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{}}}],["entities/display.entity",{"_index":1749,"title":{},"body":{"classes/DisplayCreateDto.html":{},"injectables/DisplayService.html":{}}}],["entities/files.entity",{"_index":1903,"title":{},"body":{"injectables/FilesService.html":{},"modules/StorageModule.html":{}}}],["entities/issuance",{"_index":1211,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{}}}],["entities/keys.entity",{"_index":1652,"title":{},"body":{"classes/DBKeyService.html":{},"modules/KeyModule.html":{}}}],["entities/presentation",{"_index":2731,"title":{},"body":{"classes/PresentationConfigCreateDto.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["entities/registrar.entity",{"_index":2892,"title":{},"body":{"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{}}}],["entities/session.entity",{"_index":3199,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{}}}],["entities/status",{"_index":3483,"title":{},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["entitites/tenant.entity",{"_index":442,"title":{},"body":{"modules/AuthModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["entity",{"_index":849,"title":{"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"entities/DisplayEntity.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"entities/TenantEntity.html":{}},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/KeyObj.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"injectables/SessionPipe.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["entries",{"_index":2932,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["entries.length",{"_index":3553,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry",{"_index":1506,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"miscellaneous/functions.html":{}}}],["entry.bits",{"_index":3532,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry.elements",{"_index":3549,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry.elements[id",{"_index":3548,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry.key",{"_index":1827,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["entry.key.d",{"_index":1826,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["entry.relyingpartyid",{"_index":3014,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["entry.tenantid",{"_index":3533,"title":{},"body":{"injectables/StatusListService.html":{}}}],["enum",{"_index":123,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":4031,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":2437,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["environments",{"_index":1940,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"miscellaneous/variables.html":{}}}],["equals",{"_index":3131,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["equals(\"https://json",{"_index":3132,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["equals(\"object",{"_index":3134,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["equals('https://json",{"_index":3122,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["equals('object",{"_index":3129,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["erika",{"_index":2511,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["err",{"_index":2257,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PresentationsService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["err.message",{"_index":2875,"title":{},"body":{"injectables/PresentationsService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["error",{"_index":816,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/variables.html":{}}}],["error(\"error",{"_index":3004,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["error(\"issuer",{"_index":3050,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error(\"key",{"_index":3073,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error(\"no",{"_index":2864,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["error(\"stack",{"_index":3545,"title":{},"body":{"injectables/StatusListService.html":{}}}],["error(\"subject",{"_index":3059,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error('credential",{"_index":830,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["error(`error",{"_index":3787,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["error(`invalid",{"_index":1965,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["error(`unsupported",{"_index":1576,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["error.children",{"_index":2084,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["error.children.length",{"_index":2085,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["error.constraints",{"_index":2080,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["error.message",{"_index":1966,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.name",{"_index":3274,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.property",{"_index":2092,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["error.stack",{"_index":3277,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.value",{"_index":2095,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["error_description",{"_index":818,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["errormessages",{"_index":2088,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["errors",{"_index":1311,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerService.html":{}}}],["es",{"_index":1813,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["es256",{"_index":552,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoImplementationService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{},"miscellaneous/typealiases.html":{}}}],["es256\").default(\"rs256",{"_index":4139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["es256.getverifier(publickey",{"_index":2857,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["eslint",{"_index":2980,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["eslint/no",{"_index":2985,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["etag",{"_index":1861,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{}}}],["etsi_tl",{"_index":912,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["eudi",{"_index":4085,"title":{},"body":{"properties.html":{}}}],["eudiplo",{"_index":164,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{}}}],["event",{"_index":1309,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"classes/NotificationRequestDto.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["events",{"_index":3287,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["example",{"_index":2132,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["examples",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{}}}],["exchange",{"_index":631,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/SessionLoggerService.html":{}}}],["execution",{"_index":3231,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["executioncontext",{"_index":42,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1616,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/IssuanceService.html":{},"injectables/StatusListService.html":{}}}],["existing",{"_index":2306,"title":{},"body":{"controllers/KeyController.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{}}}],["exists",{"_index":1252,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"interfaces/FileStorage.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"injectables/StatusListService.html":{}}}],["exists(key",{"_index":1841,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["existssync",{"_index":2383,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["exp",{"_index":557,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["expandvariables",{"_index":246,"title":{},"body":{"modules/AppModule.html":{}}}],["expect",{"_index":3763,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["expected",{"_index":2503,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["expectedcode",{"_index":793,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expectedpreauthorizedcode",{"_index":788,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expectedtxcode",{"_index":790,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expectresponse",{"_index":3762,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["expiration",{"_index":1512,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/ParResponseDto.html":{},"miscellaneous/variables.html":{}}}],["expirationdate",{"_index":2977,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["expirationdate.gettime",{"_index":2987,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["expire",{"_index":2270,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expired",{"_index":3176,"title":{},"body":{"entities/Session.html":{},"miscellaneous/enumerations.html":{}}}],["expires_in",{"_index":402,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"classes/ParResponseDto.html":{},"classes/TokenResponse.html":{}}}],["expiresat",{"_index":2670,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["expiresin",{"_index":527,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["expiresinseconds",{"_index":803,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["export",{"_index":30,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["exportable",{"_index":1674,"title":{},"body":{"classes/DBKeyService.html":{}}}],["exportjwk",{"_index":1641,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{}}}],["exportjwk(secret.privatekey",{"_index":1816,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exports",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["exportspki",{"_index":1642,"title":{},"body":{"classes/DBKeyService.html":{}}}],["exportspki(publickeyinstance",{"_index":1694,"title":{},"body":{"classes/DBKeyService.html":{}}}],["express",{"_index":208,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"controllers/StorageController.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["express.multer.file",{"_index":1891,"title":{},"body":{"injectables/FilesService.html":{},"controllers/StorageController.html":{}}}],["ext",{"_index":1664,"title":{},"body":{"classes/DBKeyService.html":{}}}],["extend",{"_index":902,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["extends",{"_index":37,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"classes/DBKeyService.html":{},"classes/DisplayCreateDto.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuanceDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/RootOfTrustPolicy.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{}}}],["extends#integrity",{"_index":3733,"title":{},"body":{"classes/VCT.html":{}}}],["external",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["extname",{"_index":1901,"title":{},"body":{"injectables/FilesService.html":{}}}],["extname(file.originalname",{"_index":1907,"title":{},"body":{"injectables/FilesService.html":{}}}],["extra",{"_index":1033,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["extract",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialConfigService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["extractable",{"_index":1690,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{}}}],["extractconditionsfromkeydesc",{"_index":954,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["extractconditionsfromkeydesc(keydesc",{"_index":1002,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"miscellaneous/functions.html":{}}}],["extracted",{"_index":4047,"title":{},"body":{"miscellaneous/functions.html":{}}}],["extracterrormessages",{"_index":2077,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["extracterrormessages(child",{"_index":2087,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["extracterrormessages(error",{"_index":2090,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["extractjwt",{"_index":2235,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":2263,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extracts",{"_index":4045,"title":{},"body":{"miscellaneous/functions.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9",{"_index":399,"title":{},"body":{"controllers/AuthController.html":{}}}],["failed",{"_index":1315,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"miscellaneous/enumerations.html":{}}}],["failure",{"_index":3438,"title":{},"body":{"injectables/SessionService.html":{}}}],["failwitherror",{"_index":2245,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fall",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{}}}],["false",{"_index":254,"title":{},"body":{"modules/AppModule.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/VCT.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["false})@isboolean",{"_index":1164,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["false})@isempty",{"_index":3743,"title":{},"body":{"classes/VCT.html":{}}}],["family_name",{"_index":2512,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["fatal",{"_index":2458,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"miscellaneous/variables.html":{}}}],["fd3ebf28",{"_index":2138,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["fetch",{"_index":2830,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["fetched",{"_index":3174,"title":{},"body":{"entities/Session.html":{},"miscellaneous/enumerations.html":{}}}],["fields",{"_index":2688,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["file#asynchronous",{"_index":261,"title":{},"body":{"modules/AppModule.html":{}}}],["file.buffer",{"_index":1916,"title":{},"body":{"injectables/FilesService.html":{}}}],["file.jwt",{"_index":3540,"title":{},"body":{"injectables/StatusListService.html":{}}}],["file.mimetype",{"_index":1917,"title":{},"body":{"injectables/FilesService.html":{}}}],["file.originalname",{"_index":1919,"title":{},"body":{"injectables/FilesService.html":{}}}],["file.replace(\".json",{"_index":1285,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["file.stack.pop",{"_index":3544,"title":{},"body":{"injectables/StatusListService.html":{}}}],["file_storage",{"_index":1867,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fileentity",{"_index":1828,"title":{"entities/FileEntity.html":{}},"body":{"entities/FileEntity.html":{},"injectables/FilesService.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["fileinterceptor",{"_index":3588,"title":{},"body":{"controllers/StorageController.html":{}}}],["filepath",{"_index":1083,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["filerepository",{"_index":1880,"title":{},"body":{"injectables/FilesService.html":{}}}],["files",{"_index":1281,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"controllers/StorageController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"miscellaneous/variables.html":{}}}],["files.service",{"_index":3592,"title":{},"body":{"controllers/StorageController.html":{},"modules/StorageModule.html":{}}}],["filesservice",{"_index":1874,"title":{"injectables/FilesService.html":{}},"body":{"injectables/FilesService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{}}}],["filestorage",{"_index":1834,"title":{"interfaces/FileStorage.html":{}},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["fileuploaddto",{"_index":1869,"title":{"classes/FileUploadDto.html":{}},"body":{"classes/FileUploadDto.html":{},"controllers/StorageController.html":{},"coverage.html":{}}}],["fileuploaddto})@post",{"_index":3582,"title":{},"body":{"controllers/StorageController.html":{}}}],["fill(0",{"_index":3523,"title":{},"body":{"injectables/StatusListService.html":{}}}],["filter((tenant",{"_index":1272,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["filter(boolean",{"_index":1044,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["finally",{"_index":3045,"title":{},"body":{"injectables/ResolverService.html":{}}}],["find",{"_index":3671,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["findonebyorfail",{"_index":1522,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{}}}],["findoptionswhere",{"_index":3384,"title":{},"body":{"injectables/SessionService.html":{}}}],["findtenantbyid",{"_index":3658,"title":{},"body":{"injectables/TenantService.html":{}}}],["findtenantbyid(tenantid",{"_index":3669,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["first",{"_index":1687,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/ResolverService.html":{}}}],["firstvaluefrom",{"_index":2833,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["firstvaluefrom(this.httpservice.get(uri)).then",{"_index":2861,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["fixed",{"_index":2137,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["flag",{"_index":3723,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["flags",{"_index":980,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"miscellaneous/functions.html":{}}}],["flags.description",{"_index":991,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["flags.presence",{"_index":994,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["flattened",{"_index":4050,"title":{},"body":{"miscellaneous/functions.html":{}}}],["flattenmetas",{"_index":955,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["flattenmetas(desc",{"_index":4048,"title":{},"body":{"miscellaneous/functions.html":{}}}],["flattenmetas(keydesc",{"_index":982,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["flattens",{"_index":4049,"title":{},"body":{"miscellaneous/functions.html":{}}}],["flow",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"miscellaneous/variables.html":{}}}],["flow_complete",{"_index":3334,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_error",{"_index":3335,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_start",{"_index":3332,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flowtype",{"_index":2604,"title":{},"body":{"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["folder",{"_index":303,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"miscellaneous/variables.html":{}}}],["forbiddenexception",{"_index":3691,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["forbidnonwhitelisted",{"_index":1303,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["forbidunknownvalues",{"_index":1298,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["force",{"_index":1266,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"miscellaneous/variables.html":{}}}],["forcepathstyle",{"_index":3616,"title":{},"body":{"modules/StorageModule.html":{}}}],["format",{"_index":25,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EC_Public.html":{},"classes/FileUploadDto.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/ResolverService.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/variables.html":{}}}],["formats",{"_index":3849,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["forroot",{"_index":2332,"title":{},"body":{"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["forwardref",{"_index":2575,"title":{},"body":{"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{}}}],["found",{"_index":765,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/SessionPipe.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["foundation",{"_index":170,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"properties.html":{}}}],["free",{"_index":3499,"title":{},"body":{"injectables/StatusListService.html":{}}}],["fresh",{"_index":2662,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["fs",{"_index":948,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["fs.mkdir(dir",{"_index":1086,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["fs.writefile(filepath",{"_index":1088,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["fullpath",{"_index":2389,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["function",{"_index":2367,"title":{},"body":{"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":4040,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":3141,"title":{},"body":{"entities/Session.html":{}}}],["g",{"_index":1048,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/Oid4vpService.html":{}}}],["g.items",{"_index":1052,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["g.name",{"_index":1051,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["g.name}\\n",{"_index":1065,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["gauge",{"_index":3369,"title":{},"body":{"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["general",{"_index":4159,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generate",{"_index":1615,"title":{},"body":{"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/PresentationManagementController.html":{}}}],["generated",{"_index":1061,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{}}}],["generated/client.gen",{"_index":2949,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["generatekeypair",{"_index":1542,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/EncryptionService.html":{},"miscellaneous/variables.html":{}}}],["generatekeypair(\"ecdh",{"_index":1812,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["generates",{"_index":1546,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/Oid4vpService.html":{}}}],["generatesalt",{"_index":1450,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["generatetoken",{"_index":1942,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["generatetoken(payload",{"_index":2212,"title":{},"body":{"injectables/JwtService.html":{}}}],["generatetokenoptions",{"_index":1933,"title":{"interfaces/GenerateTokenOptions.html":{}},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{}}}],["generation",{"_index":1944,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["generic",{"_index":1538,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/KeyService.html":{},"injectables/SessionLoggerService.html":{}}}],["get(\".well",{"_index":405,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(\":id",{"_index":3206,"title":{},"body":{"controllers/SessionController.html":{}}}],["get(\":key",{"_index":3597,"title":{},"body":{"controllers/StorageController.html":{}}}],["get(\"jwks.json",{"_index":3833,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get(\"oauth",{"_index":3830,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get(\"openid",{"_index":3828,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get(\"schema/:id",{"_index":1421,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get(\"status",{"_index":3460,"title":{},"body":{"controllers/StatusListController.html":{},"controllers/TenantController.html":{}}}],["get(\"vct/:id",{"_index":1417,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get('.well",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(':key",{"_index":3576,"title":{},"body":{"controllers/StorageController.html":{}}}],["get('oauth",{"_index":3805,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('schema/:id",{"_index":1410,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get('session",{"_index":2548,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["get('status",{"_index":3454,"title":{},"body":{"controllers/StatusListController.html":{},"controllers/TenantController.html":{}}}],["get('vct/:id",{"_index":1413,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get()@healthcheck",{"_index":1978,"title":{},"body":{"controllers/HealthController.html":{}}}],["get()@sessionlogger('session",{"_index":2558,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["get(state",{"_index":3380,"title":{},"body":{"injectables/SessionService.html":{}}}],["get(tenantid",{"_index":1239,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{}}}],["getalg",{"_index":1562,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["getall",{"_index":3363,"title":{},"body":{"injectables/SessionService.html":{}}}],["getallsessions",{"_index":3184,"title":{},"body":{"controllers/SessionController.html":{}}}],["getauthorizationserver",{"_index":692,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["getauthorizationserver(tenantid",{"_index":707,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["getauthzmetadata",{"_index":3838,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getauthzmetadata(session",{"_index":3842,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getby",{"_index":762,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["getby(where",{"_index":3383,"title":{},"body":{"injectables/SessionService.html":{}}}],["getbyid",{"_index":1224,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getbyid(tenantid",{"_index":1242,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getcertificate",{"_index":1602,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getcertificate(tenantid",{"_index":1637,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getconfigs",{"_index":1377,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfigs(@token",{"_index":1398,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfigs(user",{"_index":1382,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfiguration",{"_index":2411,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getcredential",{"_index":1425,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredential(credentialconfigurationid",{"_index":1434,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredentialconfigurationsupported",{"_index":1426,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredentialconfigurationsupported(session",{"_index":1440,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcrypto",{"_index":1563,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["getcrypto(alg",{"_index":1570,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["getdisplay",{"_index":1732,"title":{},"body":{"controllers/DisplayController.html":{}}}],["getdisplay(@token",{"_index":1743,"title":{},"body":{"controllers/DisplayController.html":{}}}],["getdisplay(user",{"_index":1737,"title":{},"body":{"controllers/DisplayController.html":{}}}],["getdownloadurl",{"_index":1877,"title":{},"body":{"injectables/FilesService.html":{}}}],["getdownloadurl(key",{"_index":1887,"title":{},"body":{"injectables/FilesService.html":{}}}],["getencryptionpublickey",{"_index":1794,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["getencryptionpublickey(tenantid",{"_index":1805,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["getexistingrp",{"_index":2906,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["getexistingrp(name",{"_index":2922,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["getexternaloidcconfig",{"_index":2218,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getexternaloidcconfig(configservice",{"_index":2223,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getglobaljwks",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{}}}],["getheadersfromrequest",{"_index":732,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getheadersfromrequest(req",{"_index":772,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"miscellaneous/functions.html":{}}}],["getintegratedoauth2config",{"_index":2219,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getintegratedoauth2config(configservice",{"_index":2227,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getissuanceconfiguration",{"_index":2046,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfiguration(tenantid",{"_index":2055,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurationbyid",{"_index":2047,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurationbyid(issuanceconfigid",{"_index":2057,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurations",{"_index":2030,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuanceconfigurations(@token",{"_index":2039,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuanceconfigurations(user",{"_index":2033,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuermetadata",{"_index":3839,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getissuermetadata(session",{"_index":3845,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getjwks",{"_index":3804,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["getjwks(@sessionentity",{"_index":3834,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["getjwks(session",{"_index":3807,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["getjwks(tenantid",{"_index":3854,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getkeys",{"_index":2293,"title":{},"body":{"controllers/KeyController.html":{}}}],["getkeys(@token",{"_index":2310,"title":{},"body":{"controllers/KeyController.html":{}}}],["getkeys(token",{"_index":2299,"title":{},"body":{"controllers/KeyController.html":{}}}],["getkid",{"_index":1595,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getkid(tenantid",{"_index":1610,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getlist",{"_index":3452,"title":{},"body":{"controllers/StatusListController.html":{},"injectables/StatusListService.html":{}}}],["getlist(@param(\"tenantid",{"_index":3462,"title":{},"body":{"controllers/StatusListController.html":{}}}],["getlist(tenantid",{"_index":3453,"title":{},"body":{"controllers/StatusListController.html":{},"injectables/StatusListService.html":{}}}],["getlogformat",{"_index":2412,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getloglevel",{"_index":2413,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getoauth2token",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["getoauth2token(body",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["getobjectcommand",{"_index":3092,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["getoffer",{"_index":2108,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["getoffer(res",{"_index":2109,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["getoidcdiscovery",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["getorthrow(\"public_url",{"_index":2194,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/RegistrarService.html":{}}}],["getpresentationconfig",{"_index":2791,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfig(id",{"_index":2806,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs",{"_index":2792,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs(tenantid",{"_index":2808,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getprivatekey",{"_index":1596,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getprivatekey(tenantid",{"_index":1613,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getpubfromprivatekey",{"_index":1597,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getpubfromprivatekey(privatekey",{"_index":1617,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getpublickey",{"_index":1598,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getpublickey(type",{"_index":1621,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getrepositorytoken",{"_index":2336,"title":{},"body":{"modules/KeyModule.html":{}}}],["getrepositorytoken(certentity",{"_index":2345,"title":{},"body":{"modules/KeyModule.html":{}}}],["getrepositorytoken(keyentity",{"_index":2346,"title":{},"body":{"modules/KeyModule.html":{}}}],["getrequestwithsession",{"_index":2555,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getrequestwithsession(@sessionentity",{"_index":2567,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getrequestwithsession(session",{"_index":2557,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getresponse",{"_index":2556,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["getresponse(body",{"_index":2561,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["gets",{"_index":1059,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"classes/DBKeyService.html":{}}}],["getschema",{"_index":1427,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getschema(credentialconfigurationid",{"_index":1442,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getschemapath",{"_index":119,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["getschemapath(allowlistpolicy",{"_index":1195,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["getschemapath(attestationbasedpolicy",{"_index":1193,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["getschemapath(authenticationmethodauth",{"_index":2022,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["getschemapath(authenticationmethodnone",{"_index":2021,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["getschemapath(authenticationmethodpresentation",{"_index":2023,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["getschemapath(nonetrustpolicy",{"_index":1194,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["getschemapath(rootoftrustpolicy",{"_index":1196,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["getschemapath(webhookauthconfigheader",{"_index":151,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["getschemapath(webhookauthconfignone",{"_index":150,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["getsession",{"_index":3185,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(@param(\"id",{"_index":3207,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(session",{"_index":3190,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsignedurl",{"_index":1836,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{}}}],["getsignedurl(key",{"_index":1843,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{}}}],["getsignedurl?(key",{"_index":1865,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["getsigner",{"_index":1543,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getsigner(privatekeyjwk",{"_index":1548,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["getstream",{"_index":1837,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["getstream(key",{"_index":1845,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["gettenants",{"_index":3659,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["gettenantstatus",{"_index":3628,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantService.html":{}}}],["gettenantstatus(@token",{"_index":3648,"title":{},"body":{"controllers/TenantController.html":{}}}],["gettenantstatus(id",{"_index":3673,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["gettenantstatus(user",{"_index":3632,"title":{},"body":{"controllers/TenantController.html":{}}}],["getting",{"_index":1356,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["getvct",{"_index":1428,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getvct(credentialid",{"_index":1444,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getverifier",{"_index":1544,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getverifier(publickeyjwk",{"_index":1553,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["given",{"_index":1235,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"classes/KeyService.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["given_name",{"_index":2143,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["global",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{},"modules/CryptoImplementatationModule.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["globalthis.headers",{"_index":4068,"title":{},"body":{"miscellaneous/functions.html":{}}}],["grant",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["grant_type",{"_index":393,"title":{},"body":{"controllers/AuthController.html":{}}}],["grant_types_supported",{"_index":546,"title":{},"body":{"injectables/AuthService.html":{}}}],["granttype",{"_index":735,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["graph",{"_index":4080,"title":{},"body":{"modules.html":{}}}],["group",{"_index":959,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"miscellaneous/variables.html":{}}}],["groups",{"_index":964,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["groupsmap",{"_index":1005,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["groupsmap.get(i.group",{"_index":1008,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["groupsmap.set(i.group",{"_index":1010,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["guard",{"_index":2468,"title":{},"body":{"modules/MetricModule.html":{}}}],["handle",{"_index":620,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/WellKnownService.html":{}}}],["handled",{"_index":1963,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{}}}],["handler",{"_index":3232,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["handles",{"_index":608,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["handlesigningkeyerror",{"_index":2256,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["handling",{"_index":1790,"title":{},"body":{"injectables/EncryptionService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["hash",{"_index":4208,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashalg",{"_index":1499,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["hasher",{"_index":1498,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["hasresponsedata",{"_index":3785,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["haswebhook",{"_index":2685,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["head",{"_index":3108,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["head.contentlength",{"_index":3114,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["head.contenttype",{"_index":3115,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["head.etag",{"_index":3113,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["header",{"_index":114,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["header(\"content",{"_index":3461,"title":{},"body":{"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["header('content",{"_index":3808,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["header.kid",{"_index":3072,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c",{"_index":3051,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c.map",{"_index":3054,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header[\"jwk",{"_index":3063,"title":{},"body":{"injectables/ResolverService.html":{}}}],["headername",{"_index":111,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["headers",{"_index":287,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["headers.authorization",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{}}}],["headers[session.claimswebhook!.auth.config.headername",{"_index":3767,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["headers[webhook.auth.config.headername",{"_index":3792,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["headobjectcommand",{"_index":3093,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["health",{"_index":1971,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":1989,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":227,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1980,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1974,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1969,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":187,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"index.html":{},"modules.html":{}}}],["help",{"_index":453,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionModule.html":{}}}],["helpers",{"_index":956,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["here",{"_index":3863,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["hh:mm:ss",{"_index":276,"title":{},"body":{"modules/AppModule.html":{}}}],["holdercnf",{"_index":1435,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["host",{"_index":1524,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/DatabaseModule.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["hostname",{"_index":2625,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${session.id}/oid4vp",{"_index":2629,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${session.tenantid",{"_index":2612,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${tenantid}/credentials",{"_index":1526,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["hot",{"_index":2435,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["hour",{"_index":3393,"title":{},"body":{"injectables/SessionService.html":{},"injectables/WellKnownService.html":{}}}],["hours",{"_index":536,"title":{},"body":{"injectables/AuthService.html":{}}}],["hs256",{"_index":1952,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["http",{"_index":2440,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["httpmethod",{"_index":724,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["httpmodule",{"_index":2173,"title":{},"body":{"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"modules/VerifierModule.html":{}}}],["https://${this.bucket}.s3.amazonaws.com/${encodeuri(key",{"_index":3112,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["https://github.com/iamolegga/nestjs",{"_index":258,"title":{},"body":{"modules/AppModule.html":{}}}],["https://github.com/openwallet",{"_index":4087,"title":{},"body":{"properties.html":{}}}],["https://json",{"_index":3133,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["https://openid.net/specs/openid",{"_index":903,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["https://openwallet",{"_index":169,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{}}}],["httpservice",{"_index":2335,"title":{},"body":{"modules/KeyModule.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["i.conditions.map((c",{"_index":1031,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["i.description",{"_index":1045,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["i.key",{"_index":1069,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["i.key.padend(28",{"_index":1054,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["i.meta.deprecated",{"_index":1036,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["i.meta.docurl",{"_index":1041,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["i.meta.example",{"_index":1043,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["i.meta?.deprecated",{"_index":1034,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["i.meta?.docurl",{"_index":1039,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["i.meta?.example",{"_index":1042,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["i.meta?.restartrequired",{"_index":1037,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["i.presence",{"_index":1027,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["i.useddefault",{"_index":1029,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["iat",{"_index":558,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["id",{"_index":16,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/variables.html":{}}}],["id_token_signing_alg_values_supported",{"_index":551,"title":{},"body":{"injectables/AuthService.html":{}}}],["identifier",{"_index":27,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsMetadataController.html":{},"classes/DCQL.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"interfaces/IssuerMetadata.html":{},"entities/KeyEntity.html":{},"classes/KeyObj.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["ids",{"_index":1215,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["idx",{"_index":3543,"title":{},"body":{"injectables/StatusListService.html":{}}}],["ignore",{"_index":277,"title":{},"body":{"modules/AppModule.html":{}}}],["ignoreexpiration",{"_index":2268,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":2155,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png",{"_index":2129,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png')@apibody({type",{"_index":2115,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["image/png')@useguards(jwtauthguard)@apisecurity('oauth2')@apibody({type",{"_index":2742,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["images",{"_index":3585,"title":{},"body":{"controllers/StorageController.html":{}}}],["imeplement",{"_index":1539,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation",{"_index":1572,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{}}}],["implementation.module",{"_index":2340,"title":{},"body":{"modules/KeyModule.html":{}}}],["implementation.module.ts",{"_index":1535,"title":{},"body":{"modules/CryptoImplementatationModule.html":{}}}],["implementation.service",{"_index":1461,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"injectables/WellKnownService.html":{}}}],["implementation.service.ts",{"_index":1561,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["implementation.service.ts:10",{"_index":1565,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implementation.service.ts:17",{"_index":1567,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implementation.service.ts:26",{"_index":1571,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implementation.ts",{"_index":1537,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["implementation.ts:19",{"_index":1545,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:24",{"_index":1550,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:29",{"_index":1554,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation/crypto",{"_index":1460,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["implementation/ed25519.ts",{"_index":3908,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["implements",{"_index":130,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"classes/EC_Public.html":{},"injectables/IssuanceService.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/LocalFileStorage.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["import",{"_index":49,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["import(tenantid",{"_index":1625,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["import.dto",{"_index":1650,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/UpdateKeyDto.html":{}}}],["import.dto.ts",{"_index":2278,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{},"coverage.html":{}}}],["import.dto.ts:11",{"_index":2286,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:13",{"_index":2287,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:15",{"_index":2281,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:17",{"_index":2282,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:19",{"_index":2280,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:31",{"_index":2330,"title":{},"body":{"classes/KeyImportDto.html":{}}}],["import.dto.ts:38",{"_index":2328,"title":{},"body":{"classes/KeyImportDto.html":{}}}],["import.dto.ts:45",{"_index":2329,"title":{},"body":{"classes/KeyImportDto.html":{}}}],["import.dto.ts:7",{"_index":2283,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:9",{"_index":2285,"title":{},"body":{"classes/Key.html":{}}}],["imported",{"_index":1326,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["importerror",{"_index":1323,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["importing",{"_index":2289,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["importjwk",{"_index":1643,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/PresentationsService.html":{}}}],["importjwk(keyentity.key",{"_index":1821,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["importjwk(payload.cnf.jwk",{"_index":2865,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["importjwk(privatekey",{"_index":1695,"title":{},"body":{"classes/DBKeyService.html":{}}}],["imports",{"_index":202,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/CredentialConfigService.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{}}}],["include",{"_index":417,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CredentialsService.html":{}}}],["included",{"_index":2007,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["includes",{"_index":2587,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["including",{"_index":2897,"title":{},"body":{"injectables/RegistrarService.html":{},"interfaces/SessionLogContext.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":3214,"title":{},"body":{"interfaces/SessionLogContext.html":{},"classes/WebhookResponse.html":{}}}],["indexes",{"_index":3474,"title":{},"body":{"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["indicates",{"_index":29,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/IssuanceConfig.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["indicating",{"_index":2770,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["information",{"_index":168,"title":{},"body":{"controllers/AppController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"controllers/IssuerManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/functions.html":{}}}],["inherited",{"_index":65,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/DBKeyService.html":{},"classes/NoneTrustPolicy.html":{},"classes/RootOfTrustPolicy.html":{}}}],["init",{"_index":1599,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"controllers/TenantController.html":{}}}],["init(tenant",{"_index":1628,"title":{},"body":{"classes/DBKeyService.html":{}}}],["init(tenantid",{"_index":2363,"title":{},"body":{"classes/KeyService.html":{}}}],["init.dto",{"_index":3637,"title":{},"body":{"controllers/TenantController.html":{}}}],["init.dto.ts",{"_index":939,"title":{},"body":{"classes/ClientInitDto.html":{},"coverage.html":{}}}],["init.dto.ts:6",{"_index":941,"title":{},"body":{"classes/ClientInitDto.html":{}}}],["initialization",{"_index":3333,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["initialize",{"_index":1630,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"classes/KeyService.html":{},"injectables/StatusListService.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"miscellaneous/functions.html":{}}}],["initialized",{"_index":2365,"title":{},"body":{"classes/KeyService.html":{},"injectables/RegistrarService.html":{}}}],["initializes",{"_index":1396,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["inittenant",{"_index":3629,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantService.html":{}}}],["inittenant(@token",{"_index":3641,"title":{},"body":{"controllers/TenantController.html":{}}}],["inittenant(id",{"_index":3675,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["inittenant(user",{"_index":3634,"title":{},"body":{"controllers/TenantController.html":{}}}],["inject",{"_index":248,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"injectables/FilesService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["inject(\"keyservice",{"_index":2309,"title":{},"body":{"controllers/KeyController.html":{}}}],["inject(file_storage",{"_index":1904,"title":{},"body":{"injectables/FilesService.html":{}}}],["injectable",{"_index":33,"title":{"injectables/AdminAuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/ConfigPrinterService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{}},"body":{"injectables/AdminAuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["injectables",{"_index":35,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/ConfigPrinterService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"index.html":{}}}],["injectmetric",{"_index":3403,"title":{},"body":{"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["injectmetric(\"sessions",{"_index":3411,"title":{},"body":{"injectables/SessionService.html":{}}}],["injectmetric(\"tenant_total",{"_index":3694,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["injectrepository",{"_index":1255,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["injectrepository(credentialconfig",{"_index":1261,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{}}}],["injectrepository(displayentity",{"_index":1768,"title":{},"body":{"injectables/DisplayService.html":{}}}],["injectrepository(fileentity",{"_index":1905,"title":{},"body":{"injectables/FilesService.html":{}}}],["injectrepository(issuanceconfig",{"_index":2067,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["injectrepository(keyentity",{"_index":1811,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["injectrepository(presentationconfig",{"_index":2837,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["injectrepository(registrarentity",{"_index":2950,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["injectrepository(session",{"_index":3410,"title":{},"body":{"injectables/SessionService.html":{}}}],["injectrepository(statuslistentity",{"_index":3518,"title":{},"body":{"injectables/StatusListService.html":{}}}],["injectrepository(statusmapping",{"_index":3517,"title":{},"body":{"injectables/StatusListService.html":{}}}],["injectrepository(tenantentity",{"_index":3693,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["inprod",{"_index":1096,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["instance",{"_index":1198,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["instance.decode(`${data}.${signature",{"_index":2853,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["instanceof",{"_index":2261,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LocalFileStorage.html":{}}}],["instantiate",{"_index":1152,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["instead",{"_index":96,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/JwtStrategy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["insufficient_authorization",{"_index":817,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["int",{"_index":3560,"title":{},"body":{"entities/StatusMapping.html":{}}}],["integrated",{"_index":1941,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["integration",{"_index":3690,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["intended",{"_index":1781,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["interact",{"_index":4084,"title":{},"body":{"properties.html":{}}}],["interacting",{"_index":2939,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["interaction",{"_index":2896,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["intercept",{"_index":3224,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["intercept(context",{"_index":3227,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interceptor",{"_index":3221,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["intercepts",{"_index":3230,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthenticationMethodInterface.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/FileStorage.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/FileStorage.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthenticationMethodInterface.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/FileStorage.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"index.html":{}}}],["interval",{"_index":3415,"title":{},"body":{"injectables/SessionService.html":{}}}],["intervaltime",{"_index":3413,"title":{},"body":{"injectables/SessionService.html":{}}}],["invalid",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["is_public_key",{"_index":2204,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isabsolute",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["isabsolute(folder",{"_index":306,"title":{},"body":{"modules/AppModule.html":{}}}],["isarray",{"_index":71,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuanceDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["isarray()@isoptional",{"_index":890,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/OfferRequestDto.html":{}}}],["isarray()@isoptional()@validatenested({each",{"_index":1366,"title":{},"body":{"classes/CredentialQuery.html":{},"classes/DCQL.html":{}}}],["isarray()@isstring({each",{"_index":3729,"title":{},"body":{"classes/TrustedAuthorityQuery.html":{}}}],["isarray()@validatenested({each",{"_index":1699,"title":{},"body":{"classes/DCQL.html":{}}}],["isboolean",{"_index":893,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["isboolean()@isoptional",{"_index":1371,"title":{},"body":{"classes/CredentialSetQuery.html":{}}}],["isboolean()@isoptional()@column('boolean",{"_index":2010,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["isdebugmodeenabled",{"_index":2414,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isdefined",{"_index":72,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"injectables/CredentialConfigService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isdefined()@isarray()@validatenested({each",{"_index":312,"title":{},"body":{"classes/AttestationBasedPolicy.html":{},"classes/PolicyCredential.html":{}}}],["isdefined()@isstring",{"_index":3076,"title":{},"body":{"classes/RootOfTrustPolicy.html":{}}}],["isdefined()@isstring({each",{"_index":67,"title":{},"body":{"classes/AllowListPolicy.html":{}}}],["iseffectivelyrequired",{"_index":3961,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["iseffectivelyrequired(key",{"_index":4051,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isempty",{"_index":3745,"title":{},"body":{"classes/VCT.html":{}}}],["isenabled",{"_index":2907,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["isenum",{"_index":121,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isenum([\"credential_accepted",{"_index":2480,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["isenum([\"ec",{"_index":2288,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["isenum(['credential_accepted",{"_index":2478,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["isenum(['ec",{"_index":2284,"title":{},"body":{"classes/Key.html":{}}}],["isenum(authconfig",{"_index":139,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isenum(responsetype",{"_index":2510,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{}}}],["isglobal",{"_index":245,"title":{},"body":{"modules/AppModule.html":{}}}],["ishttploggerenabled",{"_index":2415,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isin",{"_index":73,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/StatusUpdateDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isin([\"aki",{"_index":911,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["isin([\"allowlist",{"_index":87,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isin([\"attestationbased",{"_index":104,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isin([\"auth",{"_index":586,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["isin([\"none",{"_index":98,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isin([\"presentationduringissuance",{"_index":585,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["isin([\"rootoftrust",{"_index":91,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isin(['undefined'])@isstring",{"_index":3752,"title":{},"body":{"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{}}}],["isin([0",{"_index":3571,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isin([authconfig.api_key",{"_index":132,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isin([authconfig.none",{"_index":137,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isnotempty",{"_index":894,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["isnull",{"_index":3406,"title":{},"body":{"injectables/SessionService.html":{}}}],["isnumber",{"_index":895,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/StatusUpdateDto.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["isnumber()@isin(['0",{"_index":3569,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isnumber()@isoptional()@column('int",{"_index":1998,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["isobject",{"_index":122,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isobject()@isoptional",{"_index":2768,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["isobject()@validatenested()@type(undefined",{"_index":565,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"classes/AuthenticationMethodPresentation.html":{}}}],["isoptional",{"_index":74,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizeQueries.html":{},"classes/ClaimsQuery.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{}}}],["isoptional()@column('boolean",{"_index":1163,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isoptional()@column('int",{"_index":1167,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isoptional()@isarray()@validatenested()@type(undefined)@column('json",{"_index":2713,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["isoptional()@isarray()@validatenested({each",{"_index":2705,"title":{},"body":{"classes/PolicyCredential.html":{}}}],["isoptional()@isboolean",{"_index":1364,"title":{},"body":{"classes/CredentialQuery.html":{}}}],["isoptional()@isstring",{"_index":678,"title":{},"body":{"classes/AuthorizeQueries.html":{},"entities/CredentialConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"classes/VCT.html":{}}}],["isoptional()@isstring({each",{"_index":2709,"title":{},"body":{"classes/PresentationAttachment.html":{}}}],["isoptional()@validatenested()@apiproperty({oneof",{"_index":1143,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isoptional()@validatenested()@type(undefined",{"_index":596,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{}}}],["isoptional()@validatenested()@type(undefined)@column('json",{"_index":1171,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["ispublic",{"_index":1892,"title":{},"body":{"injectables/FilesService.html":{},"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["iss",{"_index":555,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialsService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["issessionloggerenabled",{"_index":2416,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isstring",{"_index":75,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isstring()@column('varchar",{"_index":1140,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{}}}],["isstring()@isin(['aki",{"_index":3727,"title":{},"body":{"classes/TrustedAuthorityQuery.html":{}}}],["isstring()@isin(['allowlist",{"_index":64,"title":{},"body":{"classes/AllowListPolicy.html":{}}}],["isstring()@isin(['attestationbased",{"_index":310,"title":{},"body":{"classes/AttestationBasedPolicy.html":{}}}],["isstring()@isin(['auth",{"_index":567,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{}}}],["isstring()@isin(['none",{"_index":590,"title":{},"body":{"classes/AuthenticationMethodNone.html":{},"classes/NoneTrustPolicy.html":{}}}],["isstring()@isin(['presentationduringissuance",{"_index":593,"title":{},"body":{"classes/AuthenticationMethodPresentation.html":{}}}],["isstring()@isin(['rootoftrust",{"_index":3074,"title":{},"body":{"classes/RootOfTrustPolicy.html":{}}}],["isstring()@isoptional",{"_index":940,"title":{},"body":{"classes/ClientInitDto.html":{},"classes/KeyImportDto.html":{},"classes/StatusUpdateDto.html":{}}}],["isstring()@isoptional()@column('varchar",{"_index":2008,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["issuance",{"_index":582,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["issuance.credentialconfigs",{"_index":1160,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["issuance.service",{"_index":2038,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["issuance/credentials",{"_index":1265,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["issuance/entities/issuance",{"_index":1182,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{}}}],["issuance/issuance",{"_index":2071,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuance/issuance.controller",{"_index":2188,"title":{},"body":{"modules/IssuerModule.html":{}}}],["issuance/issuance.service",{"_index":731,"title":{},"body":{"injectables/AuthorizeService.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuanceconfig",{"_index":773,"title":{"entities/IssuanceConfig.html":{}},"body":{"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["issuanceconfig.authenticationconfig",{"_index":834,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuanceconfig.claimswebhook",{"_index":838,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuanceconfig.credentialconfigs.find",{"_index":1473,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["issuanceconfig.dpoprequired",{"_index":783,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuanceconfigid",{"_index":2059,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuanceconfigrepo",{"_index":2052,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuanceconfigs",{"_index":1128,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["issuancecontroller",{"_index":2027,"title":{"controllers/IssuanceController.html":{}},"body":{"controllers/IssuanceController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["issuancecounter",{"_index":3424,"title":{},"body":{"injectables/SessionService.html":{}}}],["issuancedto",{"_index":1212,"title":{"classes/IssuanceDto.html":{}},"body":{"classes/CredentialConfigMapping.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"coverage.html":{}}}],["issuanceid",{"_index":832,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{},"injectables/SessionService.html":{}}}],["issuanceservice",{"_index":701,"title":{"injectables/IssuanceService.html":{}},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{},"index.html":{}}}],["issue",{"_index":2522,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["issued",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/WellKnownService.html":{}}}],["issuer",{"_index":540,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["issuer/authorize/authorize.service",{"_index":3856,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["issuer/authorize/dto/authorize",{"_index":3173,"title":{},"body":{"entities/Session.html":{}}}],["issuer/issuer.module",{"_index":228,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["issuer/oid4vci/dto/offer",{"_index":2596,"title":{},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{}}}],["issuer/oid4vci/oid4vci.service",{"_index":2121,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"injectables/WellKnownService.html":{}}}],["issuer/status",{"_index":436,"title":{},"body":{"modules/AuthModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["issuer_state",{"_index":673,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["issuer_validation_schema",{"_index":3935,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["issuermanagementcontroller",{"_index":2104,"title":{"controllers/IssuerManagementController.html":{}},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["issuermetadata",{"_index":2158,"title":{"interfaces/IssuerMetadata.html":{}},"body":{"interfaces/IssuerMetadata.html":{},"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["issuermetadata(session",{"_index":3812,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["issuermetadatacredentialconfig",{"_index":1137,"title":{"classes/IssuerMetadataCredentialConfig.html":{}},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"coverage.html":{}}}],["issuermodule",{"_index":188,"title":{"modules/IssuerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"index.html":{},"modules.html":{}}}],["issues",{"_index":1437,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["issuing",{"_index":3338,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["isused",{"_index":1472,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["isused?.id",{"_index":1483,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["isusingexternaloidc",{"_index":1967,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["isuuid",{"_index":2509,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["isuuid()@isoptional",{"_index":2506,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["isverified",{"_index":4221,"title":{},"body":{"miscellaneous/variables.html":{}}}],["it's",{"_index":3777,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["item.name",{"_index":2995,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["itemnotes",{"_index":1109,"title":{},"body":{"injectables/ConfigPrinterService.html":{}}}],["itemnotes(i",{"_index":1026,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["items",{"_index":918,"title":{},"body":{"classes/ClaimsQuery.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["items.push",{"_index":1003,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["iterate",{"_index":1276,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["itself",{"_index":3643,"title":{},"body":{"controllers/TenantController.html":{}}}],["job",{"_index":3391,"title":{},"body":{"injectables/SessionService.html":{}}}],["joi",{"_index":4009,"title":{},"body":{"dependencies.html":{}}}],["joi.boolean",{"_index":4165,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.boolean().default(false",{"_index":4262,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.exist",{"_index":4126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.number",{"_index":4201,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.object",{"_index":4120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.objectschema",{"_index":4119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.optional",{"_index":4128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.required",{"_index":4127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string",{"_index":4121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().default(\"24h",{"_index":4148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().default(\"azp",{"_index":4133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().default(\"eudiplo",{"_index":4146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().default((parent",{"_index":4255,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().default(default_auth_client_id",{"_index":4153,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().default(default_auth_client_secret",{"_index":4150,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().min(32).default(default_jwt_secret",{"_index":4144,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().optional",{"_index":4143,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().valid(\"rs256",{"_index":4137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().when(\"db_type",{"_index":4199,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.when(\"oidc",{"_index":4132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["join",{"_index":220,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/CredentialConfigService.html":{},"modules/DatabaseModule.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{}}}],["join(__dirname",{"_index":308,"title":{},"body":{"modules/AppModule.html":{}}}],["join(configpath",{"_index":1279,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["join(folder",{"_index":307,"title":{},"body":{"modules/AppModule.html":{}}}],["join(parent.folder",{"_index":4256,"title":{},"body":{"miscellaneous/variables.html":{}}}],["join(this.basedir",{"_index":2390,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["jointable",{"_index":2016,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["jose",{"_index":1644,"title":{},"body":{"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"classes/Key.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"dependencies.html":{}}}],["joseheaderparameters",{"_index":2368,"title":{},"body":{"classes/KeyService.html":{}}}],["json",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/SchemaResponse.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["json.parse",{"_index":1283,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["json.stringify",{"_index":3180,"title":{},"body":{"entities/Session.html":{}}}],["json.stringify(data",{"_index":3269,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["json.stringify(model",{"_index":1072,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["json.stringify(presentationconfig.dcql_query).replace",{"_index":2615,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["json.stringify(presentationconfig.registrationcert).replace",{"_index":2617,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["json.stringify(value",{"_index":999,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["jsonwebkey",{"_index":1549,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["jwe",{"_index":1802,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwk",{"_index":725,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"miscellaneous/variables.html":{}}}],["jwk_ec_private",{"_index":1618,"title":{},"body":{"classes/DBKeyService.html":{}}}],["jwk_ec_public",{"_index":1775,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["jwks",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{},"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{}}}],["jwks_uri",{"_index":543,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["jwksrequestsperminute",{"_index":2254,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwksresponsedto",{"_index":1787,"title":{"classes/JwksResponseDto.html":{}},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["jwksuri",{"_index":2249,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwt",{"_index":786,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwt.service",{"_index":443,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["jwt.setaudience(options.audience",{"_index":1959,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.sign(secretkey",{"_index":1960,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.strategy",{"_index":444,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt/crypto",{"_index":1452,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["jwt/jwt",{"_index":1455,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["jwt/sd",{"_index":1457,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["jwt/types",{"_index":1639,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["jwt_alg_values",{"_index":2637,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["jwt_expires_in",{"_index":4147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_issuer",{"_index":2271,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["jwt_secret",{"_index":4142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtauthguard",{"_index":424,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AuthModule.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{},"coverage.html":{},"index.html":{}}}],["jwtdecrypt",{"_index":1810,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtdecrypt(response",{"_index":1823,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtfromrequest",{"_index":2226,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtheaderparameters",{"_index":1635,"title":{},"body":{"classes/DBKeyService.html":{}}}],["jwtpayload",{"_index":1634,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{}}}],["jwtservice",{"_index":425,"title":{"injectables/JwtService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{},"index.html":{}}}],["jwtstrategy",{"_index":426,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{}}}],["jwtstrategy.getexternaloidcconfig(configservice",{"_index":2240,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtstrategy.getintegratedoauth2config(configservice",{"_index":2241,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtverify",{"_index":1935,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/PresentationsService.html":{}}}],["jwtverify(`${data}.${signature",{"_index":2866,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["jwtverify(token",{"_index":1964,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwtwithstatuslistpayload",{"_index":1454,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/StatusListService.html":{}}}],["kb",{"_index":1466,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{}}}],["kbverifier",{"_index":2787,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keep",{"_index":1197,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["keepdiscriminatorproperty",{"_index":155,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["key",{"_index":23,"title":{"classes/Key.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"entities/CertEntity.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/StorageController.html":{},"classes/UpdateKeyDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["key).then",{"_index":2867,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["key.key",{"_index":1682,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.kid",{"_index":3071,"title":{},"body":{"injectables/ResolverService.html":{}}}],["key.service",{"_index":1653,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{}}}],["key.service.ts",{"_index":1592,"title":{},"body":{"classes/DBKeyService.html":{},"coverage.html":{}}}],["key.service.ts:118",{"_index":1614,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.service.ts:153",{"_index":1623,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.service.ts:158",{"_index":1624,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.service.ts:28",{"_index":1605,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.service.ts:62",{"_index":1619,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key/entities/cert.entity",{"_index":1585,"title":{},"body":{"modules/CryptoModule.html":{}}}],["key/entities/keys.entity",{"_index":1587,"title":{},"body":{"modules/CryptoModule.html":{},"injectables/EncryptionService.html":{}}}],["key/key.controller",{"_index":1588,"title":{},"body":{"modules/CryptoModule.html":{}}}],["key_ops",{"_index":1662,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key_validation_schema",{"_index":3911,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["keybinding",{"_index":1129,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/PresentationsService.html":{}}}],["keybindingnonce",{"_index":2816,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keybindings",{"_index":2828,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keycloak",{"_index":2260,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["keycloakissuerurl",{"_index":2247,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["keycloakissuerurl}/protocol/openid",{"_index":2250,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["keycontroller",{"_index":1582,"title":{"controllers/KeyController.html":{}},"body":{"modules/CryptoModule.html":{},"controllers/KeyController.html":{},"coverage.html":{}}}],["keydesc",{"_index":978,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"miscellaneous/functions.html":{}}}],["keydesc.flags",{"_index":981,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["keydesc.notes.join",{"_index":993,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["keyentity",{"_index":1586,"title":{"entities/KeyEntity.html":{}},"body":{"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"coverage.html":{}}}],["keyid",{"_index":1130,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/WellKnownService.html":{}}}],["keyimportdto",{"_index":1626,"title":{"classes/KeyImportDto.html":{}},"body":{"classes/DBKeyService.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"classes/UpdateKeyDto.html":{},"coverage.html":{}}}],["keymodule",{"_index":189,"title":{"modules/KeyModule.html":{}},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{},"index.html":{},"modules.html":{}}}],["keymodule.forroot",{"_index":298,"title":{},"body":{"modules/AppModule.html":{}}}],["keyobj",{"_index":2347,"title":{"classes/KeyObj.html":{}},"body":{"classes/KeyObj.html":{},"coverage.html":{}}}],["keypair",{"_index":1547,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["keypair.privatekey",{"_index":4213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keypair.publickey",{"_index":4212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keyrepository",{"_index":1604,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"modules/KeyModule.html":{}}}],["keyresponsedto",{"_index":339,"title":{"classes/KeyResponseDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/KeyResponseDto.html":{},"coverage.html":{}}}],["keys",{"_index":412,"title":{},"body":{"controllers/AuthController.html":{},"entities/CertEntity.html":{},"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyResponseDto.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"injectables/WellKnownService.html":{}}}],["keys.privatekey",{"_index":1669,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice",{"_index":1594,"title":{"classes/KeyService.html":{}},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"coverage.html":{}}}],["keyservice:109",{"_index":1632,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:136",{"_index":1611,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:152",{"_index":1622,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:195",{"_index":1636,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:46",{"_index":1627,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:77",{"_index":1629,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:85",{"_index":1638,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:86",{"_index":1607,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyusage",{"_index":2324,"title":{},"body":{"entities/KeyEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["kid",{"_index":2279,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["km_type",{"_index":2343,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["kmtype",{"_index":2342,"title":{},"body":{"modules/KeyModule.html":{}}}],["know",{"_index":3009,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["known",{"_index":3803,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["known.controller",{"_index":241,"title":{},"body":{"modules/AppModule.html":{}}}],["known.controller.ts",{"_index":3801,"title":{},"body":{"controllers/WellKnownController.html":{},"coverage.html":{}}}],["known.controller.ts:45",{"_index":3817,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:57",{"_index":3806,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:69",{"_index":3811,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.service",{"_index":242,"title":{},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{}}}],["known.service.ts",{"_index":3836,"title":{},"body":{"injectables/WellKnownService.html":{},"coverage.html":{}}}],["known.service.ts:16",{"_index":3841,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known.service.ts:39",{"_index":3846,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known.service.ts:77",{"_index":3843,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known.service.ts:87",{"_index":3855,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known/dto/credential",{"_index":1333,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"coverage.html":{}}}],["known/dto/jwks",{"_index":1648,"title":{},"body":{"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"coverage.html":{}}}],["known/dto/oauth",{"_index":2482,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"coverage.html":{}}}],["known/jwks.json",{"_index":407,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["known/jwks.json')@apioperation({summary",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{}}}],["known/jwt",{"_index":3066,"title":{},"body":{"injectables/ResolverService.html":{}}}],["known/oauth",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{}}}],["known/openid",{"_index":2962,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["known/well",{"_index":240,"title":{},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["kty",{"_index":1777,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["labelnames",{"_index":3349,"title":{},"body":{"modules/SessionModule.html":{}}}],["labs.github.io/eudiplo/latest",{"_index":171,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{}}}],["labs/eudiplo.git",{"_index":4091,"title":{},"body":{"properties.html":{}}}],["labs/eudiplo/issues",{"_index":4088,"title":{},"body":{"properties.html":{}}}],["last",{"_index":879,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["later",{"_index":416,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{}}}],["legend",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["length",{"_index":3270,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"controllers/StorageController.html":{}}}],["lessthan",{"_index":3407,"title":{},"body":{"injectables/SessionService.html":{}}}],["lessthan(new",{"_index":3446,"title":{},"body":{"injectables/SessionService.html":{}}}],["level",{"_index":263,"title":{},"body":{"modules/AppModule.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"miscellaneous/variables.html":{}}}],["levels",{"_index":2453,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["levels[level.tolowercase",{"_index":2459,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["license",{"_index":4089,"title":{},"body":{"properties.html":{}}}],["lifecycle",{"_index":1090,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["lifetime",{"_index":923,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"injectables/WellKnownService.html":{}}}],["line",{"_index":2983,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["link",{"_index":580,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["links",{"_index":2005,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["list",{"_index":1347,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/CredentialsService.html":{},"interfaces/IssuerMetadata.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/PresentationsService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"controllers/StorageController.html":{},"dependencies.html":{}}}],["list')@header('content",{"_index":3455,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.controller",{"_index":3487,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.controller.ts",{"_index":3450,"title":{},"body":{"controllers/StatusListController.html":{},"coverage.html":{}}}],["list.controller.ts:17",{"_index":3457,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.entity",{"_index":3484,"title":{},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["list.entity.ts",{"_index":3466,"title":{},"body":{"entities/StatusListEntity.html":{},"coverage.html":{}}}],["list.entity.ts:14",{"_index":3476,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:20",{"_index":3475,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:26",{"_index":3471,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:32",{"_index":3473,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:38",{"_index":3470,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:44",{"_index":3472,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.module",{"_index":438,"title":{},"body":{"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/SessionModule.html":{}}}],["list.module.ts",{"_index":3482,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.service",{"_index":1462,"title":{},"body":{"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["list.service.ts",{"_index":3489,"title":{},"body":{"injectables/StatusListService.html":{},"coverage.html":{}}}],["list.service.ts:114",{"_index":3502,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:124",{"_index":3498,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:176",{"_index":3510,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:192",{"_index":3512,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:20",{"_index":3496,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:36",{"_index":3504,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:60",{"_index":3503,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:68",{"_index":3501,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list/dto/status",{"_index":3198,"title":{},"body":{"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["list/entities/status",{"_index":3465,"title":{},"body":{"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"coverage.html":{}}}],["list/status",{"_index":437,"title":{},"body":{"modules/AuthModule.html":{},"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{}}}],["listen",{"_index":3684,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["literal",{"_index":467,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"miscellaneous/typealiases.html":{}}}],["live",{"_index":4249,"title":{},"body":{"miscellaneous/variables.html":{}}}],["load",{"_index":2687,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["loadconfiguration",{"_index":2417,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loadtenants",{"_index":3660,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["loadtypemetadataformat",{"_index":1503,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["local",{"_index":1866,"title":{},"body":{"interfaces/FileStorage.html":{},"modules/StorageModule.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["local_storage_dir",{"_index":4253,"title":{},"body":{"miscellaneous/variables.html":{}}}],["locale",{"_index":1187,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["localfilestorage",{"_index":2372,"title":{"classes/LocalFileStorage.html":{}},"body":{"classes/LocalFileStorage.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["log",{"_index":2456,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["log_debug_mode",{"_index":2451,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"miscellaneous/variables.html":{}}}],["log_enable_http_logger",{"_index":253,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"miscellaneous/variables.html":{}}}],["log_enable_session_logger",{"_index":2450,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["log_format",{"_index":2452,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"miscellaneous/variables.html":{}}}],["log_level",{"_index":4231,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log_validation_schema",{"_index":3968,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logauthorizationrequest",{"_index":3289,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logauthorizationrequest(context",{"_index":3302,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcontext",{"_index":2603,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["logcredentialissuance",{"_index":3290,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialissuance(context",{"_index":3305,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification",{"_index":3291,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification(context",{"_index":3308,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowcomplete",{"_index":3292,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowcomplete(context",{"_index":3310,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror",{"_index":3293,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror(context",{"_index":3313,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart",{"_index":3294,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart(context",{"_index":3315,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logformat",{"_index":2444,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["logged",{"_index":3217,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["logger",{"_index":951,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger.decorator",{"_index":2534,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["logger.decorator.ts",{"_index":3971,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger.interceptor",{"_index":2177,"title":{},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["logger.interceptor.ts",{"_index":3220,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{}}}],["logger.interceptor.ts:136",{"_index":3237,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:19",{"_index":3226,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:44",{"_index":3229,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.log(`wrote",{"_index":1107,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["logger.log(out",{"_index":1108,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["logger.service",{"_index":2178,"title":{},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["logger.service.ts",{"_index":3286,"title":{},"body":{"injectables/SessionLoggerService.html":{},"coverage.html":{}}}],["logger.service.ts:102",{"_index":3307,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:12",{"_index":3301,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:124",{"_index":3309,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:146",{"_index":3304,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:163",{"_index":3324,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:180",{"_index":3318,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:202",{"_index":3320,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:221",{"_index":3322,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:30",{"_index":3325,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:37",{"_index":3316,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:56",{"_index":3311,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:75",{"_index":3314,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger/session",{"_index":3761,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["loggerconfigservice",{"_index":2409,"title":{"injectables/LoggerConfigService.html":{}},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["loggerconfiguration",{"_index":2423,"title":{"interfaces/LoggerConfiguration.html":{}},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["loggermodule",{"_index":216,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loggermodule.forrootasync",{"_index":247,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":257,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["loglevel",{"_index":2426,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["lognotification",{"_index":3295,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["lognotification(context",{"_index":3317,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logo",{"_index":1191,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["logs",{"_index":2588,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["logsession",{"_index":3296,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsession(context",{"_index":3319,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror",{"_index":3297,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror(context",{"_index":3321,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtokenexchange",{"_index":3298,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtokenexchange(context",{"_index":3323,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["long",{"_index":924,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["made",{"_index":922,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["main",{"_index":161,"title":{},"body":{"controllers/AppController.html":{}}}],["maintain",{"_index":464,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["make",{"_index":526,"title":{},"body":{"injectables/AuthService.html":{}}}],["makegaugeprovider",{"_index":433,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionModule.html":{}}}],["makes",{"_index":1151,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/WellKnownService.html":{}}}],["making",{"_index":2799,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["manage",{"_index":853,"title":{},"body":{"entities/CertEntity.html":{},"entities/IssuanceConfig.html":{}}}],["management",{"_index":1392,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/TenantController.html":{},"miscellaneous/variables.html":{}}}],["management.controller",{"_index":2189,"title":{},"body":{"modules/IssuerModule.html":{}}}],["management.controller.ts",{"_index":2107,"title":{},"body":{"controllers/IssuerManagementController.html":{},"coverage.html":{}}}],["management.controller.ts:83",{"_index":2117,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["management/credentials",{"_index":1375,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["management/issuance",{"_index":2029,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["management/issuer",{"_index":2106,"title":{},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["managing",{"_index":1222,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"modules/SessionModule.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["manually",{"_index":1064,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["manytomany",{"_index":1178,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["manytomany(undefined",{"_index":1159,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{}}}],["manytoone",{"_index":882,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["manytoone(undefined",{"_index":868,"title":{},"body":{"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"entities/DisplayEntity.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{}}}],["map",{"_index":1006,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/Oid4vpService.html":{}}}],["map(([name",{"_index":1012,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["map((_",{"_index":3524,"title":{},"body":{"injectables/StatusListService.html":{}}}],["map((error",{"_index":2089,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["mapping",{"_index":1208,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity",{"_index":3486,"title":{},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity.ts",{"_index":3556,"title":{},"body":{"entities/StatusMapping.html":{},"coverage.html":{}}}],["mapping.entity.ts:13",{"_index":3564,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:16",{"_index":3563,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:19",{"_index":3562,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:22",{"_index":3561,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:25",{"_index":3559,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:7",{"_index":3565,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mark",{"_index":4243,"title":{},"body":{"miscellaneous/variables.html":{}}}],["markdown",{"_index":1076,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"miscellaneous/variables.html":{}}}],["marks",{"_index":3399,"title":{},"body":{"injectables/SessionService.html":{}}}],["match",{"_index":3060,"title":{},"body":{"injectables/ResolverService.html":{}}}],["matching",{"_index":32,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":2321,"title":{},"body":{"entities/KeyEntity.html":{}}}],["math.floor(date.now",{"_index":2643,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{}}}],["math.floor(new",{"_index":2644,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["math.min(m",{"_index":1020,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["math.random",{"_index":3526,"title":{},"body":{"injectables/StatusListService.html":{}}}],["math.round(new",{"_index":1509,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["max",{"_index":2144,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["maybe",{"_index":3025,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["md",{"_index":1077,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["media",{"_index":3851,"title":{},"body":{"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mediatype",{"_index":3813,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{}}}],["mediatype.application_jwt",{"_index":3827,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["mediatype.application_jwt)@get('openid",{"_index":3816,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["memorystorage",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["message",{"_index":3275,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["messages",{"_index":2078,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["messages.join",{"_index":2093,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["messages.length",{"_index":2091,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["messages.push",{"_index":2081,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["meta",{"_index":915,"title":{},"body":{"classes/ClaimsQuery.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["meta.advanced",{"_index":988,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["meta.group",{"_index":983,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["meta.secret",{"_index":989,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["metadata",{"_index":1336,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsMetadataController.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/IssuerMetadata.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["metadata+jwt",{"_index":3860,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["metadata.'})@apiproduces(mediatype.application_json",{"_index":3815,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["metadata.controller",{"_index":2184,"title":{},"body":{"modules/IssuerModule.html":{}}}],["metadata.controller.ts",{"_index":1407,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"coverage.html":{}}}],["metadata.controller.ts:15",{"_index":1414,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["metadata.controller.ts:25",{"_index":1411,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["metadata.credential_issuer",{"_index":3861,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["metadata.dto",{"_index":3048,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/WellKnownService.html":{}}}],["metadata.dto.ts",{"_index":1334,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"coverage.html":{}}}],["metadata.dto.ts:12",{"_index":1346,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:16",{"_index":1352,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:20",{"_index":1357,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:24",{"_index":1349,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:33",{"_index":1355,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:37",{"_index":1351,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:41",{"_index":1344,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:8",{"_index":1353,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata/credentials",{"_index":1406,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["metadata/dto/schema",{"_index":1180,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/SchemaResponse.html":{},"coverage.html":{}}}],["metadata/dto/vct.dto",{"_index":1181,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["metadata/dto/vct.dto.ts",{"_index":3732,"title":{},"body":{"classes/VCT.html":{},"coverage.html":{}}}],["metadata/dto/vct.dto.ts:12",{"_index":3739,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:15",{"_index":3736,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:18",{"_index":3737,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:21",{"_index":3738,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:24",{"_index":3740,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:27",{"_index":3741,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:9",{"_index":3744,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/vct/${credentialconfig.id",{"_index":1527,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["metadata/vct/${credentialconfigurationid",{"_index":1518,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["metadata/vct/${value.id",{"_index":1479,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["method",{"_index":284,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["methods",{"_index":39,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/ConfigPrinterService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["metric/metric.module",{"_index":229,"title":{},"body":{"modules/AppModule.html":{}}}],["metricmodule",{"_index":190,"title":{"modules/MetricModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetricModule.html":{},"index.html":{},"modules.html":{}}}],["metrics",{"_index":2470,"title":{},"body":{"modules/MetricModule.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["middleware",{"_index":4083,"title":{},"body":{"properties.html":{}}}],["mirko",{"_index":4093,"title":{},"body":{"properties.html":{}}}],["miscellaneous",{"_index":4030,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["misused",{"_index":2986,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["mkdirsync",{"_index":2384,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["mkdirsync(dirname(fullpath",{"_index":2391,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["mm",{"_index":274,"title":{},"body":{"modules/AppModule.html":{},"injectables/WellKnownService.html":{}}}],["mode",{"_index":4123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["model",{"_index":968,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["model.groups",{"_index":1049,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["modify",{"_index":2148,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["modifying",{"_index":3279,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["module",{"_index":172,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":174,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["mollik",{"_index":4094,"title":{},"body":{"properties.html":{}}}],["more",{"_index":167,"title":{},"body":{"controllers/AppController.html":{},"entities/Session.html":{}}}],["move",{"_index":2698,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["mso_mdoc",{"_index":2635,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["multer",{"_index":215,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["multermodule",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["multermodule.register",{"_index":299,"title":{},"body":{"modules/AppModule.html":{}}}],["multi",{"_index":3168,"title":{},"body":{"entities/Session.html":{}}}],["multiple",{"_index":914,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["mustermann",{"_index":2513,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["mysql2",{"_index":4014,"title":{},"body":{"dependencies.html":{}}}],["n${out.join(\"\\n\")}\\n",{"_index":1057,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["name",{"_index":46,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["name)?.id",{"_index":2996,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["namedcurve",{"_index":4207,"title":{},"body":{"miscellaneous/variables.html":{}}}],["necessary",{"_index":930,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["need",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CredentialConfigService.html":{},"injectables/RegistrarService.html":{}}}],["needed",{"_index":93,"title":{},"body":{"classes/AllowListPolicy.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{}}}],["needs",{"_index":826,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/TenantController.html":{}}}],["nestinterceptor",{"_index":3242,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["nestjs",{"_index":217,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["nestjs/axios",{"_index":2174,"title":{},"body":{"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"modules/VerifierModule.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":50,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"modules/VerifierModule.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":205,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":2203,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":3987,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":52,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":207,"title":{},"body":{"modules/AppModule.html":{},"controllers/StorageController.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":210,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionService.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":212,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":120,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/FileUploadDto.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"controllers/KeyController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":1982,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":432,"title":{},"body":{"modules/AuthModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["new",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":2982,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/StatusListService.html":{}}}],["next.handle",{"_index":3248,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["next.handle().pipe",{"_index":3263,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["node:crypto",{"_index":633,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{}}}],["node:fs",{"_index":949,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["node:path",{"_index":950,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["nodejs",{"_index":1453,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["non",{"_index":1092,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["noncce",{"_index":3172,"title":{},"body":{"entities/Session.html":{}}}],["nonce",{"_index":2518,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["nonce(@sessionentity",{"_index":2546,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["nonce(session",{"_index":2523,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["none",{"_index":84,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/StatusListService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["nonetrustpolicy",{"_index":97,"title":{"classes/NoneTrustPolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["not(isnull",{"_index":3426,"title":{},"body":{"injectables/SessionService.html":{}}}],["notes",{"_index":1066,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["notfoundexception",{"_index":3358,"title":{},"body":{"injectables/SessionPipe.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["notfoundexception(`tenant",{"_index":3700,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["notification",{"_index":1358,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["notification_endpoint",{"_index":1343,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["notification_id",{"_index":2476,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["notificationevent",{"_index":2477,"title":{},"body":{"classes/NotificationRequestDto.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["notificationrequestdto",{"_index":2474,"title":{"classes/NotificationRequestDto.html":{}},"body":{"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"coverage.html":{}}}],["notifications",{"_index":146,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/Oid4vciController.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["notifications(body",{"_index":2526,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["notifywebhook",{"_index":1995,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/Session.html":{}}}],["now",{"_index":409,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["null",{"_index":1073,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/RegistrarService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["nullable",{"_index":864,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["number",{"_index":455,"title":{},"body":{"modules/AuthModule.html":{},"classes/ClaimsQuery.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"interfaces/FileStorage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/ParResponseDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"modules/SessionModule.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["number(meta.order",{"_index":985,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["number.isfinite(meta.order",{"_index":984,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["oauth",{"_index":2647,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["oauth2",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/RegistrarService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["oauth2authorizationserver",{"_index":709,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["oauth2authorizationserverresponse",{"_index":2481,"title":{"classes/Oauth2AuthorizationServerResponse.html":{}},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["oauth2client",{"_index":2902,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["obj",{"_index":3116,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["obj.body",{"_index":3117,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["obj.contentlength",{"_index":3119,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["obj.contenttype",{"_index":3118,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["object",{"_index":873,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"entities/RegistrarEntity.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.dto.ts",{"_index":2348,"title":{},"body":{"classes/KeyObj.html":{},"coverage.html":{}}}],["object.dto.ts:11",{"_index":2350,"title":{},"body":{"classes/KeyObj.html":{}}}],["object.dto.ts:15",{"_index":2351,"title":{},"body":{"classes/KeyObj.html":{}}}],["object.dto.ts:19",{"_index":2349,"title":{},"body":{"classes/KeyObj.html":{}}}],["object.entries(params",{"_index":2668,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["object.hasown.call(flags",{"_index":1001,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["object.keys(desckeys",{"_index":975,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["object.keys(res.vp_token",{"_index":2868,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["object.values",{"_index":2082,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["objects",{"_index":1302,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"classes/SchemaResponse.html":{}}}],["observable",{"_index":3234,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["offer",{"_index":831,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["offerrequestdto",{"_index":2110,"title":{"classes/OfferRequestDto.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"entities/Session.html":{},"coverage.html":{}}}],["offerresponse",{"_index":2113,"title":{"classes/OfferResponse.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"coverage.html":{}}}],["offerurl",{"_index":3137,"title":{},"body":{"entities/Session.html":{}}}],["oid4vci",{"_index":570,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"miscellaneous/variables.html":{}}}],["oid4vci/dto/offer",{"_index":2124,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["oid4vci/oid4vci.controller",{"_index":2190,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/oid4vci.service",{"_index":2191,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/util",{"_index":733,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["oid4vcicontroller",{"_index":2172,"title":{"controllers/Oid4vciController.html":{}},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"coverage.html":{}}}],["oid4vciservice",{"_index":2120,"title":{},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["oid4vp",{"_index":577,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"interfaces/SessionLogContext.html":{},"miscellaneous/variables.html":{}}}],["oid4vp.controller",{"_index":2578,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["oid4vp.service",{"_index":2565,"title":{},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["oid4vp/dto/presentation",{"_index":2747,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vp/oid4vp.module",{"_index":2780,"title":{},"body":{"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{}}}],["oid4vp/oid4vp.service",{"_index":2748,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vpcontroller",{"_index":2552,"title":{"controllers/Oid4vpController.html":{}},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"coverage.html":{}}}],["oid4vpmodule",{"_index":2167,"title":{"modules/Oid4vpModule.html":{}},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["oid4vpservice",{"_index":700,"title":{"injectables/Oid4vpService.html":{}},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"coverage.html":{},"index.html":{}}}],["oidc",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["oidc_algorithm",{"_index":4136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["oidc_internal_issuer_url",{"_index":4124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["oidc_sub",{"_index":4131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["oidcdiscoverydto",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["oidcissuerurl",{"_index":2952,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/.well",{"_index":2961,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/protocol/openid",{"_index":2958,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["old",{"_index":1289,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["older",{"_index":3401,"title":{},"body":{"injectables/SessionService.html":{}}}],["omittype",{"_index":1204,"title":{},"body":{"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"classes/DisplayCreateDto.html":{},"classes/IssuanceDto.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/UpdateKeyDto.html":{}}}],["omittype(credentialconfig",{"_index":1203,"title":{},"body":{"classes/CredentialConfigCreate.html":{}}}],["omittype(displayentity",{"_index":1747,"title":{},"body":{"classes/DisplayCreateDto.html":{}}}],["omittype(issuanceconfig",{"_index":1213,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{}}}],["omittype(keyimportdto",{"_index":3731,"title":{},"body":{"classes/UpdateKeyDto.html":{}}}],["omittype(presentationconfig",{"_index":2730,"title":{},"body":{"classes/PresentationConfigCreateDto.html":{}}}],["on(\"error",{"_index":2401,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["on(\"finish",{"_index":2399,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["onapplicationbootstrap",{"_index":2048,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["once",{"_index":2915,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["ondelete",{"_index":870,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["one",{"_index":1612,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"miscellaneous/variables.html":{}}}],["oneof",{"_index":148,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["ones",{"_index":1486,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["onmoduleinit",{"_index":952,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/RegistrarService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["ontenantdelete",{"_index":1225,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["ontenantdelete(tenantid",{"_index":1246,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["ontenantinit",{"_index":1795,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["ontenantinit(tenantid",{"_index":1808,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["openid",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["openid4vc/oauth2",{"_index":728,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"dependencies.html":{}}}],["openid4vc/openid4vci",{"_index":1448,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["openid4vc/openid4vp",{"_index":3998,"title":{},"body":{"dependencies.html":{}}}],["openid4vc/utils",{"_index":3999,"title":{},"body":{"dependencies.html":{}}}],["openid4vci",{"_index":606,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/WellKnownController.html":{}}}],["openid4vp://?${(await",{"_index":813,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["openid4vp://?${querystring",{"_index":2677,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["openid4vp://?${values.uri",{"_index":2759,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["openid_federation",{"_index":913,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["openidvci",{"_index":3859,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["operation",{"_index":1238,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["operations",{"_index":1568,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"controllers/Oid4vpController.html":{},"injectables/RegistrarService.html":{}}}],["optional",{"_index":17,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientInitDto.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"classes/OfferRequestDto.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["options",{"_index":269,"title":{},"body":{"modules/AppModule.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["options.audience",{"_index":1958,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["options.dto",{"_index":2602,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["options.dto.ts",{"_index":2772,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{},"coverage.html":{}}}],["options.expiresin",{"_index":1947,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["opts",{"_index":1850,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["opts?.acl",{"_index":3103,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["opts?.checksum",{"_index":3106,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["opts?.contenttype",{"_index":2405,"title":{},"body":{"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["opts?.metadata",{"_index":3102,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["order",{"_index":945,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"miscellaneous/variables.html":{}}}],["original",{"_index":3280,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["originalname",{"_index":1918,"title":{},"body":{"injectables/FilesService.html":{}}}],["otherwhise",{"_index":2125,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["otherwise",{"_index":2925,"title":{},"body":{"injectables/RegistrarService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":199,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["out.join(\"\\n",{"_index":1070,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["out.push",{"_index":1053,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["out.push(`\\n",{"_index":1050,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["output",{"_index":4237,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ov",{"_index":260,"title":{},"body":{"modules/AppModule.html":{}}}],["over",{"_index":1277,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["override",{"_index":1094,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["overrides",{"_index":2500,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["overview",{"_index":4070,"title":{"index.html":{}},"body":{"index.html":{}}}],["overwrite",{"_index":2065,"title":{},"body":{"injectables/IssuanceService.html":{},"miscellaneous/variables.html":{}}}],["overwritten",{"_index":1253,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["owns",{"_index":872,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["p",{"_index":1814,"title":{},"body":{"injectables/EncryptionService.html":{},"miscellaneous/variables.html":{}}}],["package",{"_index":3981,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pairs",{"_index":472,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["par",{"_index":612,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["par(@body",{"_index":651,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["par(body",{"_index":622,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["param",{"_index":389,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["param(\"id",{"_index":1402,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/KeyController.html":{},"controllers/SessionController.html":{}}}],["param(\"tenantid",{"_index":1419,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["parameter",{"_index":463,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/SessionPipe.html":{}}}],["parameterdecorator",{"_index":4069,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parameters",{"_index":45,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/ConfigPrinterService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":2664,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["parresponsedto",{"_index":644,"title":{"classes/ParResponseDto.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/ParResponseDto.html":{},"coverage.html":{}}}],["parse",{"_index":2818,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parseaccesstokenrequest",{"_index":770,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsechallengerequest",{"_index":693,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsechallengerequest(body",{"_index":710,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["parsed",{"_index":2819,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parsedaccesstokenauthorizationcoderequestgrant",{"_index":734,"title":{"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["parsedaccesstokenpreauthorizedcoderequestgrant",{"_index":736,"title":{"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["parsedaccesstokenrequest",{"_index":769,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.accesstokenrequest",{"_index":782,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.dpop?.jwt",{"_index":787,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant",{"_index":781,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.granttype",{"_index":778,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.preauthorizedcode",{"_index":789,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.txcode",{"_index":791,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parseloglevel",{"_index":2418,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["parseloglevel(level",{"_index":2432,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["parseresponse",{"_index":2793,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parseresponse(res",{"_index":2814,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["part",{"_index":2832,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parties",{"_index":2900,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["party",{"_index":2921,"title":{},"body":{"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["pass",{"_index":2147,"title":{},"body":{"controllers/IssuerManagementController.html":{},"injectables/RegistrarService.html":{}}}],["passed",{"_index":1485,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{}}}],["passport",{"_index":2237,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportjwtsecret",{"_index":2233,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportmodule",{"_index":430,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":2232,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":2217,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":1715,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":221,"title":{},"body":{"modules/AppModule.html":{},"classes/ClaimsQuery.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/variables.html":{}}}],["path.dirname(filepath",{"_index":1085,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["payload",{"_index":522,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["payload.admin",{"_index":2276,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.cnf",{"_index":2863,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["payload.id",{"_index":1286,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["payload.iss",{"_index":3049,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.iss}/.well",{"_index":3065,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.sub",{"_index":1956,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["payloads",{"_index":3039,"title":{},"body":{"injectables/ResolverService.html":{}}}],["peculiar/x509",{"_index":4000,"title":{},"body":{"dependencies.html":{}}}],["pem",{"_index":24,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/DBKeyService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{}}}],["perform",{"_index":1975,"title":{},"body":{"controllers/HealthController.html":{}}}],["periodically",{"_index":2936,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["pg",{"_index":4017,"title":{},"body":{"dependencies.html":{}}}],["pid",{"_index":2134,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{}}}],["pid,hostname",{"_index":278,"title":{},"body":{"modules/AppModule.html":{}}}],["pino",{"_index":218,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"dependencies.html":{}}}],["pino?tab=readme",{"_index":259,"title":{},"body":{"modules/AppModule.html":{}}}],["pinohttp",{"_index":262,"title":{},"body":{"modules/AppModule.html":{}}}],["pinologger",{"_index":1229,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["pipetransform",{"_index":3359,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["pkcecodechallengemethod",{"_index":726,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["pkcecodechallengemethod.s256",{"_index":756,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["plain",{"_index":1301,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["plaintoclass",{"_index":1256,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["plaintoclass(issuancedto",{"_index":2074,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["png",{"_index":2127,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["point",{"_index":1494,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["policies.dto",{"_index":1183,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["policy",{"_index":61,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["policycredential",{"_index":99,"title":{"classes/PolicyCredential.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["policytype",{"_index":83,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["port",{"_index":1711,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["positives",{"_index":1300,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["post",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{}}}],["post(\"challenge",{"_index":665,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post(\"credential",{"_index":2538,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post(\"nonce",{"_index":2544,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post(\"notification",{"_index":2541,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post(\"oauth2/token",{"_index":390,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"offer",{"_index":2145,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["post(\"par",{"_index":650,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post(\"request",{"_index":2754,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["post(\"revoke",{"_index":3209,"title":{},"body":{"controllers/SessionController.html":{}}}],["post(\"token",{"_index":662,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post('challenge",{"_index":615,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post('credential')@sessionlogger('session",{"_index":2520,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('nonce')@sessionlogger('nonce",{"_index":2524,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('notification')@sessionlogger('notification_id",{"_index":2527,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('oauth2/token')@apibody({type",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('revoke",{"_index":3196,"title":{},"body":{"controllers/SessionController.html":{}}}],["post('token",{"_index":628,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post()@sessionlogger('session",{"_index":2562,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["postgres",{"_index":1709,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["pre",{"_index":2508,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["preauthorizedcode",{"_index":737,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["preauthorizedcodegrantidentifier",{"_index":727,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["predefined",{"_index":2811,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["preferred",{"_index":1345,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["prefix",{"_index":604,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/DisplayController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"controllers/WellKnownController.html":{}}}],["preheader",{"_index":3535,"title":{},"body":{"injectables/StatusListService.html":{}}}],["prepayload",{"_index":3534,"title":{},"body":{"injectables/StatusListService.html":{}}}],["presence",{"_index":957,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["present",{"_index":1292,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["presentation",{"_index":470,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["presentation_during_issuance",{"_index":589,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"miscellaneous/enumerations.html":{}}}],["presentationattachment",{"_index":900,"title":{"classes/PresentationAttachment.html":{}},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["presentationconfig",{"_index":921,"title":{"entities/PresentationConfig.html":{}},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["presentationconfig.lifetime",{"_index":2672,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationconfig.webhook",{"_index":2675,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationconfigcreatedto",{"_index":2728,"title":{"classes/PresentationConfigCreateDto.html":{}},"body":{"classes/PresentationConfigCreateDto.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"coverage.html":{}}}],["presentationduringissuance",{"_index":576,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"miscellaneous/enumerations.html":{}}}],["presentationduringissuanceconfig",{"_index":579,"title":{"classes/PresentationDuringIssuanceConfig.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["presentationexists",{"_index":2842,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["presentationmanagementcontroller",{"_index":2733,"title":{"controllers/PresentationManagementController.html":{}},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"coverage.html":{}}}],["presentationrequest",{"_index":2741,"title":{"classes/PresentationRequest.html":{}},"body":{"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"coverage.html":{}}}],["presentationrequestoptions",{"_index":2591,"title":{"interfaces/PresentationRequestOptions.html":{}},"body":{"injectables/Oid4vpService.html":{},"interfaces/PresentationRequestOptions.html":{},"coverage.html":{}}}],["presentations",{"_index":906,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"controllers/Oid4vpController.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["presentations.controller",{"_index":2782,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["presentations.service",{"_index":2749,"title":{},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{}}}],["presentations/dto/auth",{"_index":2599,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentations/presentations.module",{"_index":2577,"title":{},"body":{"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["presentations/presentations.service",{"_index":2600,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationsmodule",{"_index":2576,"title":{"modules/PresentationsModule.html":{}},"body":{"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["presentationsservice",{"_index":2583,"title":{"injectables/PresentationsService.html":{}},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"coverage.html":{},"index.html":{}}}],["presigned",{"_index":1864,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["presigner",{"_index":3098,"title":{},"body":{"classes/S3FileStorage.html":{},"dependencies.html":{}}}],["pretty",{"_index":268,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["primary",{"_index":866,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["primarycolumn",{"_index":1830,"title":{},"body":{"entities/FileEntity.html":{},"entities/Session.html":{},"entities/TenantEntity.html":{}}}],["primarycolumn(\"uuid",{"_index":3178,"title":{},"body":{"entities/Session.html":{}}}],["primarycolumn('uuid",{"_index":3149,"title":{},"body":{"entities/Session.html":{}}}],["print",{"_index":1091,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["printer.service",{"_index":237,"title":{},"body":{"modules/AppModule.html":{}}}],["printer.service.ts",{"_index":944,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["printer.service.ts:130",{"_index":1117,"title":{},"body":{"injectables/ConfigPrinterService.html":{}}}],["printer.service.ts:149",{"_index":1122,"title":{},"body":{"injectables/ConfigPrinterService.html":{}}}],["printer.service.ts:162",{"_index":1121,"title":{},"body":{"injectables/ConfigPrinterService.html":{}}}],["printer.service.ts:181",{"_index":1120,"title":{},"body":{"injectables/ConfigPrinterService.html":{}}}],["printer.service.ts:185",{"_index":1119,"title":{},"body":{"injectables/ConfigPrinterService.html":{}}}],["printer.service.ts:198",{"_index":1124,"title":{},"body":{"injectables/ConfigPrinterService.html":{}}}],["printer.service.ts:209",{"_index":1118,"title":{},"body":{"injectables/ConfigPrinterService.html":{}}}],["printer.service.ts:37",{"_index":1115,"title":{},"body":{"injectables/ConfigPrinterService.html":{}}}],["printer.service.ts:41",{"_index":1116,"title":{},"body":{"injectables/ConfigPrinterService.html":{}}}],["printer/combined.schema",{"_index":235,"title":{},"body":{"modules/AppModule.html":{}}}],["printer/combined.schema.ts",{"_index":3957,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["printer/config",{"_index":236,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["printer/helpers.ts",{"_index":3960,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["printer/validation.schema.ts",{"_index":3965,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["printing",{"_index":4167,"title":{},"body":{"miscellaneous/variables.html":{}}}],["private",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{}}}],["private_key",{"_index":3282,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["privateencryptionkey",{"_index":1820,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["privatekey",{"_index":1558,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/UpdateKeyDto.html":{},"miscellaneous/variables.html":{}}}],["privatekey.alg",{"_index":1672,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekey.ext",{"_index":1675,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekey.key_ops",{"_index":1676,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekey.kid",{"_index":1659,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekeyinstance",{"_index":1688,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekeyjwk",{"_index":1552,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"miscellaneous/variables.html":{}}}],["proceed",{"_index":3233,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["process",{"_index":583,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{}}}],["process.env",{"_index":1000,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["process.env.doc_generate",{"_index":1104,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["process_presentation_response",{"_index":2684,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["processes",{"_index":2594,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["prod",{"_index":1093,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["production",{"_index":1098,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"miscellaneous/variables.html":{}}}],["progress",{"_index":3219,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["prom",{"_index":3405,"title":{},"body":{"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["prometheus",{"_index":435,"title":{},"body":{"modules/AuthModule.html":{},"modules/MetricModule.html":{},"modules/SessionModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["prometheus/dist/injector",{"_index":3404,"title":{},"body":{"injectables/SessionService.html":{}}}],["prometheusmodule",{"_index":2467,"title":{},"body":{"modules/MetricModule.html":{}}}],["prometheusmodule.register",{"_index":2471,"title":{},"body":{"modules/MetricModule.html":{}}}],["promise",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["promise((resolve",{"_index":2392,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["promise.all(att",{"_index":2876,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["promise.all(files.map((file",{"_index":1930,"title":{},"body":{"injectables/FilesService.html":{}}}],["promise.resolve",{"_index":1927,"title":{},"body":{"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["promise.resolve(existssync(join(this.basedir",{"_index":2408,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["promise.resolve(rmsync(join(this.basedir",{"_index":2407,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["promise.resolve(this.storage.delete(key",{"_index":1924,"title":{},"body":{"injectables/FilesService.html":{}}}],["promise.resolve(this.storage.getstream(key",{"_index":1923,"title":{},"body":{"injectables/FilesService.html":{}}}],["promises",{"_index":947,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/RegistrarService.html":{}}}],["proof_signing_alg_values_supported",{"_index":1468,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["proof_types_supported",{"_index":1467,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["properties",{"_index":14,"title":{"properties.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/FileEntity.html":{},"classes/FileUploadDto.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"properties.html":{}}}],["property",{"_index":153,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/PresentationsService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["protect",{"_index":2469,"title":{},"body":{"modules/MetricModule.html":{}}}],["protected",{"_index":1601,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["provide",{"_index":2341,"title":{},"body":{"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["provided",{"_index":147,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["provider",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/RegistrarService.html":{}}}],["providers",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["provides",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{},"injectables/IssuanceService.html":{},"modules/RegistrarModule.html":{}}}],["providing",{"_index":1972,"title":{},"body":{"controllers/HealthController.html":{}}}],["ps256",{"_index":4138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":22,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"controllers/KeyController.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public.decorator",{"_index":2205,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["public_url",{"_index":4224,"title":{},"body":{"miscellaneous/variables.html":{}}}],["publicbaseurl",{"_index":3083,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["publicjwk",{"_index":800,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["publickey",{"_index":1557,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/KeyObj.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["publickeyinstance",{"_index":1693,"title":{},"body":{"classes/DBKeyService.html":{}}}],["publickeyjwk",{"_index":1556,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["publicly",{"_index":1899,"title":{},"body":{"injectables/FilesService.html":{}}}],["publicurl",{"_index":538,"title":{},"body":{"injectables/AuthService.html":{}}}],["publicurl}/.well",{"_index":544,"title":{},"body":{"injectables/AuthService.html":{}}}],["publicurl}/oauth2/token",{"_index":542,"title":{},"body":{"injectables/AuthService.html":{}}}],["purpose",{"_index":3010,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["pushed",{"_index":624,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{}}}],["pushed_authorization_request_endpoint",{"_index":753,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["put",{"_index":1838,"title":{},"body":{"interfaces/FileStorage.html":{},"controllers/KeyController.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["put(\":id",{"_index":2314,"title":{},"body":{"controllers/KeyController.html":{}}}],["put(':id",{"_index":2303,"title":{},"body":{"controllers/KeyController.html":{}}}],["put(key",{"_index":1847,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["putobjectcommand",{"_index":3094,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["putoptions",{"_index":1851,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["qr",{"_index":2131,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["qrcode",{"_index":2119,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["qrcode.tobuffer(values.uri",{"_index":2153,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["qrcodebuffer",{"_index":2152,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["queries",{"_index":621,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["queries.request_uri",{"_index":760,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["query",{"_index":634,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["querydeeppartialentity",{"_index":3373,"title":{},"body":{"injectables/SessionService.html":{}}}],["querystring",{"_index":2667,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["r",{"_index":1019,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/ResolverService.html":{}}}],["r.data",{"_index":3067,"title":{},"body":{"injectables/ResolverService.html":{}}}],["r.order",{"_index":1021,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["random",{"_index":1670,"title":{},"body":{"classes/DBKeyService.html":{}}}],["randomness",{"_index":3508,"title":{},"body":{"injectables/StatusListService.html":{}}}],["randomuuid",{"_index":632,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/FilesService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["randomuuid()}${safeext",{"_index":1911,"title":{},"body":{"injectables/FilesService.html":{}}}],["ratelimit",{"_index":2253,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["raw",{"_index":4056,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rawenv",{"_index":4052,"title":{},"body":{"miscellaneous/functions.html":{}}}],["re",{"_index":811,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["reachable",{"_index":3069,"title":{},"body":{"injectables/ResolverService.html":{}}}],["react",{"_index":3685,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["read",{"_index":3104,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["readable",{"_index":1849,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["readable.from(body",{"_index":2397,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["readdirsync",{"_index":1257,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["readdirsync(configpath",{"_index":1270,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["readdirsync(path",{"_index":1282,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readfilesync",{"_index":1258,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readfilesync(join(path",{"_index":1284,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readonly",{"_index":647,"title":{},"body":{"controllers/AuthorizeController.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/TenantController.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["receive",{"_index":932,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vpController.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["received",{"_index":3781,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["receives",{"_index":3361,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["record",{"_index":962,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"interfaces/FileStorage.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/SchemaResponse.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/functions.html":{}}}],["recursive",{"_index":1087,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"classes/LocalFileStorage.html":{}}}],["recursively",{"_index":2083,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["redacted",{"_index":3285,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["redirect_uri",{"_index":674,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["redirected",{"_index":573,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["ref",{"_index":149,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["reference",{"_index":1671,"title":{},"body":{"classes/DBKeyService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["reflect",{"_index":4023,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":2200,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["refresh",{"_index":2929,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["refresh_token",{"_index":533,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TokenResponse.html":{}}}],["refreshaccesstoken",{"_index":2908,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["refreshes",{"_index":2935,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["regcert",{"_index":2614,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["region",{"_index":3613,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["register",{"_index":3388,"title":{},"body":{"injectables/SessionService.html":{}}}],["registrar",{"_index":2890,"title":{},"body":{"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar.service",{"_index":2893,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["registrar/generated",{"_index":3032,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["registrar/registrar.module",{"_index":230,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["registrar/registrar.service",{"_index":2597,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["registrar_oidc_client_id",{"_index":2955,"title":{},"body":{"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar_oidc_client_secret",{"_index":2956,"title":{},"body":{"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar_oidc_url",{"_index":4239,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registrar_url",{"_index":4238,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registrar_validation_schema",{"_index":3946,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["registrarentity",{"_index":2877,"title":{"entities/RegistrarEntity.html":{}},"body":{"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"coverage.html":{}}}],["registrarmodule",{"_index":191,"title":{"modules/RegistrarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["registrarrepository",{"_index":2909,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["registrarservice",{"_index":2582,"title":{"injectables/RegistrarService.html":{}},"body":{"injectables/Oid4vpService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{},"index.html":{}}}],["registration",{"_index":929,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["registrationcert",{"_index":931,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["registrationcertid",{"_index":2825,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["registrationcertificatecontrollerall",{"_index":2945,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["registrationcertificatecontrollerregister",{"_index":2946,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["registrationcertificatecreation",{"_index":3030,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["registrationcertificaterequest",{"_index":896,"title":{"classes/RegistrationCertificateRequest.html":{}},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["reject",{"_index":2393,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["related",{"_index":3222,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"miscellaneous/variables.html":{}}}],["relations",{"_index":1328,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{}}}],["relevant",{"_index":581,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/Oid4vciController.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["reload",{"_index":2436,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["reloadconfiguration",{"_index":2419,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["relying",{"_index":2899,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerfindall",{"_index":2947,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerregister",{"_index":2948,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["relyingpartyid",{"_index":2880,"title":{},"body":{"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{}}}],["remove",{"_index":1199,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/DBKeyService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["removed",{"_index":1291,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["render",{"_index":1110,"title":{},"body":{"injectables/ConfigPrinterService.html":{}}}],["render(model",{"_index":1075,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["renderers",{"_index":1025,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["renderjson",{"_index":1111,"title":{},"body":{"injectables/ConfigPrinterService.html":{}}}],["renderjson(model",{"_index":1071,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["rendermarkdown",{"_index":1112,"title":{},"body":{"injectables/ConfigPrinterService.html":{}}}],["rendermarkdown(model",{"_index":1058,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["rendertext",{"_index":1113,"title":{},"body":{"injectables/ConfigPrinterService.html":{}}}],["rendertext(model",{"_index":1047,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["replace(\"https",{"_index":2999,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["repository",{"_index":1228,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"properties.html":{}}}],["representation",{"_index":4061,"title":{},"body":{"miscellaneous/functions.html":{}}}],["representing",{"_index":473,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"interfaces/IssuerMetadata.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/functions.html":{}}}],["represents",{"_index":1335,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyObj.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"entities/Session.html":{},"entities/TenantEntity.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["repsonse",{"_index":10,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{}}}],["req",{"_index":280,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/JwtStrategy.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"miscellaneous/functions.html":{}}}],["req+jwt",{"_index":2649,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["req.body",{"_index":3021,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["req.headers[\"content",{"_index":292,"title":{},"body":{"modules/AppModule.html":{}}}],["req.headers[\"user",{"_index":290,"title":{},"body":{"modules/AppModule.html":{}}}],["req.id",{"_index":3018,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["req.method",{"_index":285,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["req.params?.session",{"_index":282,"title":{},"body":{"modules/AppModule.html":{}}}],["req.params?.tenantid",{"_index":294,"title":{},"body":{"modules/AppModule.html":{}}}],["req.url",{"_index":286,"title":{},"body":{"modules/AppModule.html":{}}}],["request",{"_index":12,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["request.'})@isenum(responsetype",{"_index":2504,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto",{"_index":643,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["request.dto.ts",{"_index":668,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["request.dto.ts:12",{"_index":680,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:13",{"_index":3031,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["request.dto.ts:15",{"_index":685,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:18",{"_index":687,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["request.dto.ts:21",{"_index":689,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:24",{"_index":681,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:25",{"_index":2505,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:26",{"_index":2767,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["request.dto.ts:27",{"_index":682,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:30",{"_index":683,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:31",{"_index":2501,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:32",{"_index":2766,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["request.dto.ts:33",{"_index":686,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:36",{"_index":679,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:38",{"_index":2499,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:40",{"_index":2769,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["request.dto.ts:58",{"_index":2496,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:6",{"_index":684,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.dto.ts:66",{"_index":2498,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:73",{"_index":2507,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:77",{"_index":2515,"title":{},"body":{"classes/OfferResponse.html":{}}}],["request.dto.ts:78",{"_index":2514,"title":{},"body":{"classes/OfferResponse.html":{}}}],["request.dto.ts:9",{"_index":688,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.header",{"_index":2651,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.headers[\"accept",{"_index":4189,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.headers[\"content",{"_index":3259,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.headers[\"user",{"_index":3258,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.method",{"_index":3254,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.params?.tenantid",{"_index":3253,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.params[sessionidparam",{"_index":3252,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.payload",{"_index":2654,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.url",{"_index":3255,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.user",{"_index":3722,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["request/response",{"_index":2441,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["request_error",{"_index":3273,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_start",{"_index":3257,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_success",{"_index":3266,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_uri",{"_index":652,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["requested",{"_index":2550,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["requestid",{"_index":2560,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{}}}],["requesting",{"_index":3668,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["requests",{"_index":609,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["requesturl",{"_index":2676,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["require_pushed_authorization_requests",{"_index":752,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["required",{"_index":134,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/SchemaResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["requiredclaimkeys",{"_index":2872,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requiredfields",{"_index":2815,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requires",{"_index":2491,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["res",{"_index":295,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/EncryptionService.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["res.data",{"_index":2862,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["res.data![\"crt",{"_index":3006,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.data![\"id",{"_index":3007,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.data![\"jwt",{"_index":3028,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.data?.filter",{"_index":3016,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.error",{"_index":3002,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.payload",{"_index":1824,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["res.redirect(`${values.redirect_uri}?code=${code",{"_index":767,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.send",{"_index":847,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.send(qrcodebuffer",{"_index":2156,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.send(values",{"_index":2157,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.setheader(\"content",{"_index":2154,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.state",{"_index":2681,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["res.status(400).send(response",{"_index":840,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.statuscode",{"_index":297,"title":{},"body":{"modules/AppModule.html":{}}}],["reset",{"_index":198,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["resolve",{"_index":2400,"title":{},"body":{"classes/LocalFileStorage.html":{},"injectables/ResolverService.html":{}}}],["resolvepublickey",{"_index":3040,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolvepublickey(payload",{"_index":3042,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolver.service",{"_index":3037,"title":{},"body":{"modules/ResolverModule.html":{}}}],["resolver/resolver.module",{"_index":2781,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["resolver/resolver.service",{"_index":2835,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["resolvermodule",{"_index":2778,"title":{"modules/ResolverModule.html":{}},"body":{"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"index.html":{},"modules.html":{}}}],["resolverservice",{"_index":2796,"title":{"injectables/ResolverService.html":{}},"body":{"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"coverage.html":{},"index.html":{}}}],["resolves",{"_index":1236,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/FilesService.html":{},"injectables/PresentationsService.html":{}}}],["resolving",{"_index":2800,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{}}}],["resource",{"_index":675,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["response",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["response.data!.find((item",{"_index":2994,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["response.data![\"id",{"_index":2992,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["response.dto",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["response.dto.ts",{"_index":459,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{},"coverage.html":{}}}],["response.dto.ts:11",{"_index":600,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{}}}],["response.dto.ts:13",{"_index":2484,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:14",{"_index":3125,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["response.dto.ts:15",{"_index":1780,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:16",{"_index":3130,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["response.dto.ts:17",{"_index":2489,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:18",{"_index":3127,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["response.dto.ts:19",{"_index":1784,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:2",{"_index":3725,"title":{},"body":{"classes/TokenResponse.html":{}}}],["response.dto.ts:20",{"_index":3128,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["response.dto.ts:21",{"_index":2486,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:23",{"_index":1786,"title":{},"body":{"classes/EC_Public.html":{},"classes/SchemaResponse.html":{}}}],["response.dto.ts:25",{"_index":2487,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:26",{"_index":3126,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["response.dto.ts:29",{"_index":2490,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:3",{"_index":3726,"title":{},"body":{"classes/TokenResponse.html":{}}}],["response.dto.ts:33",{"_index":2197,"title":{},"body":{"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:37",{"_index":2483,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:4",{"_index":2352,"title":{},"body":{"classes/KeyResponseDto.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:5",{"_index":2488,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:9",{"_index":2492,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{}}}],["response.error",{"_index":2990,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["response.jwks.keys.find((key",{"_index":3070,"title":{},"body":{"injectables/ResolverService.html":{}}}],["response.key",{"_index":1922,"title":{},"body":{"injectables/FilesService.html":{}}}],["response.statuscode",{"_index":3267,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["response.ts",{"_index":8,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"coverage.html":{}}}],["response_mode",{"_index":2630,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_processing",{"_index":2683,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_type",{"_index":676,"title":{},"body":{"classes/AuthorizeQueries.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["response_types_supported",{"_index":545,"title":{},"body":{"injectables/AuthService.html":{},"injectables/Oid4vpService.html":{}}}],["response_uri",{"_index":2628,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["responses",{"_index":3223,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsesize",{"_index":3268,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsestatus",{"_index":3783,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["responsetype",{"_index":2122,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["responsetype.qrcode",{"_index":2133,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsetype.uri",{"_index":2135,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsible",{"_index":1593,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/HealthController.html":{},"controllers/KeyController.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/SessionModule.html":{}}}],["restart",{"_index":1038,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["result",{"_index":1237,"title":{},"body":{"injectables/CredentialConfigService.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{}}}],["result.payload",{"_index":2873,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["results",{"_index":31,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieval",{"_index":3837,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["retrieve",{"_index":656,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/EncryptionService.html":{},"injectables/PresentationsService.html":{}}}],["retrieves",{"_index":1241,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["return",{"_index":54,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":2771,"title":{},"body":{"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"injectables/WellKnownService.html":{}}}],["returning",{"_index":2246,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["returns",{"_index":48,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/ConfigPrinterService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["reusable",{"_index":967,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["reuse",{"_index":2700,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["review",{"_index":3862,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["revokeall",{"_index":3186,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(@body",{"_index":3210,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(value",{"_index":3194,"title":{},"body":{"controllers/SessionController.html":{}}}],["revoked",{"_index":18,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/StatusUpdateDto.html":{}}}],["right",{"_index":1153,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["rmsync",{"_index":2385,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["root",{"_index":394,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["rootoftrust",{"_index":85,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/typealiases.html":{}}}],["rootoftrustpolicy",{"_index":90,"title":{"classes/RootOfTrustPolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["rootpath",{"_index":305,"title":{},"body":{"modules/AppModule.html":{}}}],["rp",{"_index":3001,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["rp_name",{"_index":4160,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rpid",{"_index":2989,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["rsa",{"_index":2234,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["rules",{"_index":1157,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["run",{"_index":3392,"title":{},"body":{"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["running",{"_index":166,"title":{},"body":{"controllers/AppController.html":{}}}],["runs",{"_index":1155,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["rxjs",{"_index":2834,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":3245,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["s",{"_index":4064,"title":{},"body":{"miscellaneous/functions.html":{}}}],["s3",{"_index":3085,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["s3_access_key_id",{"_index":3620,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_bucket",{"_index":4259,"title":{},"body":{"miscellaneous/variables.html":{}}}],["s3_endpoint",{"_index":4260,"title":{},"body":{"miscellaneous/variables.html":{}}}],["s3_force_path_style",{"_index":3618,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_public_base_url",{"_index":4266,"title":{},"body":{"miscellaneous/variables.html":{}}}],["s3_region",{"_index":4258,"title":{},"body":{"miscellaneous/variables.html":{}}}],["s3_secret_access_key",{"_index":3622,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3client",{"_index":3081,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{}}}],["s3filestorage",{"_index":3078,"title":{"classes/S3FileStorage.html":{}},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["safeext",{"_index":1906,"title":{},"body":{"injectables/FilesService.html":{}}}],["saltgenerator",{"_index":1502,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["same",{"_index":809,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sanitize",{"_index":3240,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody",{"_index":3225,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody(body",{"_index":3236,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized",{"_index":3241,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized[field",{"_index":3284,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizes",{"_index":3238,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["save",{"_index":654,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/DBKeyService.html":{}}}],["saves",{"_index":1894,"title":{},"body":{"injectables/FilesService.html":{}}}],["saveuserupload",{"_index":1878,"title":{},"body":{"injectables/FilesService.html":{}}}],["saveuserupload(tenantid",{"_index":1890,"title":{},"body":{"injectables/FilesService.html":{}}}],["schedulemodule",{"_index":209,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":301,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulerregistry",{"_index":3367,"title":{},"body":{"injectables/SessionService.html":{}}}],["schema",{"_index":1131,"title":{},"body":{"entities/CredentialConfig.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/SchemaResponse.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["schema(@param(\"id",{"_index":1422,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["schema(id",{"_index":1409,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["schema.org/draft/2020",{"_index":3123,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["schema_uri",{"_index":3734,"title":{},"body":{"classes/VCT.html":{}}}],["schema_uri#integrity",{"_index":3735,"title":{},"body":{"classes/VCT.html":{}}}],["schemaresponse",{"_index":1170,"title":{"classes/SchemaResponse.html":{}},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/SchemaResponse.html":{},"coverage.html":{}}}],["scope",{"_index":677,"title":{},"body":{"classes/AuthorizeQueries.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["scopes_supported",{"_index":553,"title":{},"body":{"injectables/AuthService.html":{}}}],["sd",{"_index":1451,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["sdjwt",{"_index":1495,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwt.issue",{"_index":1517,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwtinstance",{"_index":2788,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["sdjwtvcinstance",{"_index":1456,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["sdk/client",{"_index":3096,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"dependencies.html":{}}}],["sdk/s3",{"_index":3097,"title":{},"body":{"classes/S3FileStorage.html":{},"dependencies.html":{}}}],["seconds",{"_index":537,"title":{},"body":{"injectables/AuthService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/ParResponseDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"miscellaneous/variables.html":{}}}],["secretaccesskey",{"_index":3621,"title":{},"body":{"modules/StorageModule.html":{}}}],["secretkey",{"_index":1949,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["secretorkey",{"_index":2265,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secretorkeyprovider",{"_index":2225,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":1939,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["self",{"_index":3651,"title":{},"body":{"controllers/TenantController.html":{}}}],["send",{"_index":145,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["sendauthorizationcode",{"_index":694,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sendauthorizationcode(res",{"_index":714,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sendauthorizationresponse",{"_index":695,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sendauthorizationresponse(queries",{"_index":716,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sending",{"_index":3770,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["sends",{"_index":3682,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["sendwebhook",{"_index":3764,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["sendwebhook(session",{"_index":3797,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sendwebhooknotification",{"_index":3788,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["sendwebhooknotification(session",{"_index":3799,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sense",{"_index":3864,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["sensitive",{"_index":3239,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields",{"_index":3281,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields.foreach((field",{"_index":3283,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sent",{"_index":115,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["serializers",{"_index":283,"title":{},"body":{"modules/AppModule.html":{}}}],["server",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server')@apioperation({summary",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{}}}],["server's",{"_index":2485,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["servers",{"_index":1348,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["servestaticmodule",{"_index":211,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forrootasync",{"_index":302,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerService.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["service.db",{"_index":1720,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["service_documentation",{"_index":559,"title":{},"body":{"injectables/AuthService.html":{}}}],["services",{"_index":141,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/variables.html":{}}}],["session",{"_index":518,"title":{"entities/Session.html":{}},"body":{"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["session.auth_queries",{"_index":764,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.authorization_code",{"_index":794,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.claimswebhook",{"_index":2686,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.claimswebhook!.auth",{"_index":3765,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.claimswebhook!.auth.config.value",{"_index":3768,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.claimswebhook!.auth.type",{"_index":3766,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.claimswebhook!.auth?.type",{"_index":3774,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.claimswebhook!.url",{"_index":3772,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.controller",{"_index":3347,"title":{},"body":{"modules/SessionModule.html":{}}}],["session.credentialpayload",{"_index":3782,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.credentialpayload!.claims",{"_index":3780,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.credentialpayload?.claims?.[credentialconfigurationid",{"_index":1489,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["session.credentials",{"_index":824,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.id",{"_index":742,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.issuanceid",{"_index":775,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["session.notifywebhook",{"_index":3789,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.pipe",{"_index":3201,"title":{},"body":{"controllers/SessionController.html":{}}}],["session.requestid",{"_index":2608,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.service",{"_index":3202,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{}}}],["session.tenantid",{"_index":744,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["session.vp_nonce",{"_index":2690,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session/.well",{"_index":3802,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["session/authorize",{"_index":605,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["session/entities/session.entity",{"_index":635,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["session/oid4vp",{"_index":2554,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["session/session.decorator",{"_index":637,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{}}}],["session/session.module",{"_index":231,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["session/session.service",{"_index":639,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session/vci",{"_index":2517,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["session_id",{"_index":2551,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["session_logger_key",{"_index":3246,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["session_tidy_up_interval",{"_index":3394,"title":{},"body":{"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["session_ttl",{"_index":4246,"title":{},"body":{"miscellaneous/variables.html":{}}}],["session_type",{"_index":3351,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["session_validation_schema",{"_index":3949,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessioncontroller",{"_index":3181,"title":{"controllers/SessionController.html":{}},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"coverage.html":{}}}],["sessionentity",{"_index":636,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["sessionid",{"_index":281,"title":{},"body":{"modules/AppModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionPipe.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["sessionidparam",{"_index":3249,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["sessionlogcontext",{"_index":2598,"title":{"interfaces/SessionLogContext.html":{}},"body":{"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{}}}],["sessionlogger",{"_index":2532,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessionlogger(\"nonce",{"_index":2545,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["sessionlogger(\"notification_id",{"_index":2542,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["sessionlogger(\"session",{"_index":2539,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["sessionloggerinterceptor",{"_index":2168,"title":{"injectables/SessionLoggerInterceptor.html":{}},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{},"index.html":{}}}],["sessionloggerservice",{"_index":2169,"title":{"injectables/SessionLoggerService.html":{}},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"index.html":{}}}],["sessionmodule",{"_index":192,"title":{"modules/SessionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/SessionModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["sessionpipe",{"_index":3200,"title":{"injectables/SessionPipe.html":{}},"body":{"controllers/SessionController.html":{},"injectables/SessionPipe.html":{},"coverage.html":{}}}],["sessionrepository",{"_index":3371,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessions",{"_index":3177,"title":{},"body":{"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["sessionscounter",{"_index":3368,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionservice",{"_index":638,"title":{"injectables/SessionService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"index.html":{}}}],["sessionstatus",{"_index":3161,"title":{},"body":{"entities/Session.html":{},"injectables/SessionService.html":{},"miscellaneous/enumerations.html":{}}}],["sessionstatus.active",{"_index":3419,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus.completed",{"_index":3421,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus.expired",{"_index":3422,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus.failed",{"_index":3423,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus.fetched",{"_index":3420,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus})@column('varchar",{"_index":3163,"title":{},"body":{"entities/Session.html":{}}}],["sessiontype",{"_index":3436,"title":{},"body":{"injectables/SessionService.html":{}}}],["set",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{},"classes/ClaimsQuery.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"classes/EC_Public.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["set+json",{"_index":3832,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["set+json')@get('jwks.json",{"_index":3810,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["setauthcode",{"_index":696,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["setauthcode(issuer_state",{"_index":718,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["setentry",{"_index":3492,"title":{},"body":{"injectables/StatusListService.html":{}}}],["setentry(id",{"_index":3509,"title":{},"body":{"injectables/StatusListService.html":{}}}],["setexpirationtime(expiresin",{"_index":1957,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setglobalconfig",{"_index":2175,"title":{},"body":{"modules/IssuerModule.html":{}}}],["setinterval(callback",{"_index":3416,"title":{},"body":{"injectables/SessionService.html":{}}}],["setissuedat",{"_index":1953,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setissuer(issuer",{"_index":1954,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setmetadata(is_public_key",{"_index":4223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(session_logger_key",{"_index":4242,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setprotectedheader",{"_index":1951,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setprotectedheader(header",{"_index":1696,"title":{},"body":{"classes/DBKeyService.html":{}}}],["setstate",{"_index":3364,"title":{},"body":{"injectables/SessionService.html":{}}}],["setstate(session",{"_index":3397,"title":{},"body":{"injectables/SessionService.html":{}}}],["setsubject(options.subject",{"_index":1955,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["settimeout",{"_index":2979,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["setuptenant",{"_index":3661,"title":{},"body":{"injectables/TenantService.html":{}}}],["setuptenant(id",{"_index":3680,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["sha",{"_index":1500,"title":{},"body":{"injectables/CredentialsService.html":{},"miscellaneous/variables.html":{}}}],["sha256",{"_index":1857,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["shape",{"_index":4063,"title":{},"body":{"miscellaneous/functions.html":{}}}],["shouldenableautologging",{"_index":2420,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["shouldlog",{"_index":3299,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["showadvanced",{"_index":976,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["shown",{"_index":958,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["shuffel",{"_index":3521,"title":{},"body":{"injectables/StatusListService.html":{}}}],["shuffled",{"_index":3507,"title":{},"body":{"injectables/StatusListService.html":{}}}],["sign",{"_index":2325,"title":{},"body":{"entities/KeyEntity.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/S3FileStorage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["sign(privatekeyinstance",{"_index":1697,"title":{},"body":{"classes/DBKeyService.html":{}}}],["signalg",{"_index":1497,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["signature",{"_index":1559,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{},"miscellaneous/variables.html":{}}}],["signature).catch((err",{"_index":2859,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["signaturebase64url",{"_index":4218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signed",{"_index":3852,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["signedjwt",{"_index":2652,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwt.length",{"_index":2658,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwtlength",{"_index":2657,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signer",{"_index":798,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["signer(tenantid",{"_index":1631,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["signing",{"_index":418,"title":{},"body":{"controllers/AuthController.html":{},"entities/CertEntity.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/StatusListService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["signjwt",{"_index":1600,"title":{},"body":{"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{}}}],["signjwt(payload",{"_index":1633,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["simplicity",{"_index":2874,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["singleline",{"_index":271,"title":{},"body":{"modules/AppModule.html":{}}}],["size",{"_index":1862,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"injectables/StatusListService.html":{}}}],["skip",{"_index":1288,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["slice(1",{"_index":1908,"title":{},"body":{"injectables/FilesService.html":{}}}],["someone",{"_index":3026,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["sort",{"_index":1004,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/StatusListService.html":{}}}],["sort((a",{"_index":1022,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["specific",{"_index":414,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/FilesService.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["specified",{"_index":3847,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["sqlite",{"_index":1719,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["sqlite3",{"_index":4026,"title":{},"body":{"dependencies.html":{}}}],["src",{"_index":2396,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src.pipe(write",{"_index":2398,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/.../auth",{"_index":4104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.module.ts",{"_index":4107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../authentication",{"_index":4033,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../cert.entity.ts",{"_index":4097,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../combined.schema.ts",{"_index":4118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../config",{"_index":4102,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../crypto",{"_index":4098,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../crypto.service.ts",{"_index":4108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database",{"_index":4106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../ed25519.ts",{"_index":4109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../helpers.ts",{"_index":4042,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../issuer",{"_index":4111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../key",{"_index":4112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../keys.entity.ts",{"_index":4100,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../log",{"_index":4113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":4041,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../media",{"_index":4034,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../policies.dto.ts",{"_index":4101,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../presentation",{"_index":4036,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../public.decorator.ts",{"_index":4110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../registrar",{"_index":4114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session",{"_index":4115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session.decorator.ts",{"_index":4044,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../session.entity.ts",{"_index":4037,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../storage",{"_index":4116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../storage.module.ts",{"_index":4099,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../storage.types.ts",{"_index":4103,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../token.decorator.ts",{"_index":4117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../util.ts",{"_index":4043,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../validation.schema.ts",{"_index":4105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../webhook.dto.ts",{"_index":4032,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.module.ts",{"_index":200,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/app.controller.ts",{"_index":160,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app/app.controller.ts:8",{"_index":162,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app/dto/oidc",{"_index":3871,"title":{},"body":{"coverage.html":{}}}],["src/auth/admin.guard.ts",{"_index":36,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"coverage.html":{}}}],["src/auth/admin.guard.ts:6",{"_index":44,"title":{},"body":{"injectables/AdminAuthGuard.html":{}}}],["src/auth/auth",{"_index":3874,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.controller.ts",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:103",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:64",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:86",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.guard.ts",{"_index":2198,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/auth.guard.ts:12",{"_index":2202,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.guard.ts:7",{"_index":2201,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.module.ts",{"_index":428,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.service.ts",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:115",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:13",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:32",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/client",{"_index":934,"title":{},"body":{"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"coverage.html":{}}}],["src/auth/dto/oidc",{"_index":3880,"title":{},"body":{"coverage.html":{}}}],["src/auth/dto/token",{"_index":3724,"title":{},"body":{"classes/TokenResponse.html":{},"coverage.html":{}}}],["src/auth/entitites/tenant.entity.ts",{"_index":3653,"title":{},"body":{"entities/TenantEntity.html":{},"coverage.html":{}}}],["src/auth/entitites/tenant.entity.ts:12",{"_index":3654,"title":{},"body":{"entities/TenantEntity.html":{}}}],["src/auth/entitites/tenant.entity.ts:18",{"_index":3656,"title":{},"body":{"entities/TenantEntity.html":{}}}],["src/auth/jwt.service.ts",{"_index":1934,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{}}}],["src/auth/jwt.service.ts:14",{"_index":2211,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:28",{"_index":2213,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:65",{"_index":2215,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:91",{"_index":2214,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":2216,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:20",{"_index":2222,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:27",{"_index":2224,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:55",{"_index":2228,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:79",{"_index":2230,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:9",{"_index":2220,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/public.decorator.ts",{"_index":3887,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/tenant/tenant.controller.ts",{"_index":3626,"title":{},"body":{"controllers/TenantController.html":{},"coverage.html":{}}}],["src/auth/tenant/tenant.controller.ts:32",{"_index":3635,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/auth/tenant/tenant.controller.ts:46",{"_index":3633,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/auth/tenant/tenant.controller.ts:55",{"_index":3631,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/auth/tenant/tenant.service.ts",{"_index":3657,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{}}}],["src/auth/tenant/tenant.service.ts:114",{"_index":3689,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant/tenant.service.ts:127",{"_index":3670,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant/tenant.service.ts:135",{"_index":3681,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant/tenant.service.ts:149",{"_index":3667,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant/tenant.service.ts:31",{"_index":3665,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant/tenant.service.ts:47",{"_index":3679,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant/tenant.service.ts:61",{"_index":3678,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant/tenant.service.ts:71",{"_index":3676,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant/tenant.service.ts:76",{"_index":3674,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant/tenant.service.ts:88",{"_index":3672,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant/tenant.service.ts:98",{"_index":3677,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/token.decorator.ts",{"_index":3718,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/crypto.module.ts",{"_index":1581,"title":{},"body":{"modules/CryptoModule.html":{}}}],["src/crypto/crypto.service.ts",{"_index":3892,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/encryption/encryption.service.ts",{"_index":1789,"title":{},"body":{"injectables/EncryptionService.html":{},"coverage.html":{}}}],["src/crypto/encryption/encryption.service.ts:12",{"_index":1797,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:26",{"_index":1809,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:44",{"_index":1807,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:54",{"_index":1799,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:74",{"_index":1806,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/key/adapters/db",{"_index":1591,"title":{},"body":{"classes/DBKeyService.html":{},"coverage.html":{}}}],["src/crypto/key/adapters/vault",{"_index":3899,"title":{},"body":{"coverage.html":{}}}],["src/crypto/key/crypto",{"_index":1534,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/key/dto/key",{"_index":2277,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/UpdateKeyDto.html":{},"coverage.html":{}}}],["src/crypto/key/entities/cert.entity.ts",{"_index":852,"title":{},"body":{"entities/CertEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/key/entities/cert.entity.ts:21",{"_index":867,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:27",{"_index":874,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:33",{"_index":871,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:39",{"_index":863,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:45",{"_index":876,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:51",{"_index":865,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:57",{"_index":859,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:63",{"_index":878,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts",{"_index":2318,"title":{},"body":{"entities/KeyEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/key/entities/keys.entity.ts:16",{"_index":2319,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts:22",{"_index":2323,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts:28",{"_index":2322,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts:34",{"_index":2320,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts:40",{"_index":2326,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/key",{"_index":3910,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/key/key.controller.ts",{"_index":2290,"title":{},"body":{"controllers/KeyController.html":{},"coverage.html":{}}}],["src/crypto/key/key.controller.ts:39",{"_index":2300,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.controller.ts:51",{"_index":2296,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.controller.ts:67",{"_index":2304,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.controller.ts:82",{"_index":2298,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.module.ts",{"_index":2331,"title":{},"body":{"modules/KeyModule.html":{}}}],["src/crypto/key/key.module.ts:16",{"_index":2333,"title":{},"body":{"modules/KeyModule.html":{}}}],["src/crypto/key/key.service.ts",{"_index":2353,"title":{},"body":{"classes/KeyService.html":{},"coverage.html":{}}}],["src/crypto/key/key.service.ts:12",{"_index":2355,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:23",{"_index":2364,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:30",{"_index":2356,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:37",{"_index":2362,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:43",{"_index":2366,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:49",{"_index":2358,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:55",{"_index":2359,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:60",{"_index":2360,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:65",{"_index":2361,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:72",{"_index":2369,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:85",{"_index":2357,"title":{},"body":{"classes/KeyService.html":{}}}],["src/database/database",{"_index":3914,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/database.module.ts",{"_index":1701,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/health/health.controller.ts",{"_index":1970,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:25",{"_index":1979,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":1987,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/issuer/authorize/authorize.controller.ts",{"_index":603,"title":{},"body":{"controllers/AuthorizeController.html":{},"coverage.html":{}}}],["src/issuer/authorize/authorize.controller.ts:30",{"_index":619,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:44",{"_index":626,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:65",{"_index":629,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:81",{"_index":616,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.service.ts",{"_index":690,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["src/issuer/authorize/authorize.service.ts:103",{"_index":721,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:206",{"_index":711,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:224",{"_index":703,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:296",{"_index":715,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:303",{"_index":719,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:37",{"_index":702,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:48",{"_index":708,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:55",{"_index":705,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:78",{"_index":717,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/dto/authorize",{"_index":667,"title":{},"body":{"classes/AuthorizeQueries.html":{},"coverage.html":{}}}],["src/issuer/authorize/dto/par",{"_index":2704,"title":{},"body":{"classes/ParResponseDto.html":{},"coverage.html":{}}}],["src/issuer/credentials",{"_index":1405,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"classes/SchemaResponse.html":{},"classes/VCT.html":{},"coverage.html":{}}}],["src/issuer/credentials/credential",{"_index":1219,"title":{},"body":{"injectables/CredentialConfigService.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.controller.ts",{"_index":1374,"title":{},"body":{"controllers/CredentialsController.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.controller.ts:35",{"_index":1383,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:45",{"_index":1385,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:58",{"_index":1381,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.service.ts",{"_index":1424,"title":{},"body":{"injectables/CredentialsService.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.service.ts:107",{"_index":1436,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:203",{"_index":1445,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:229",{"_index":1443,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:23",{"_index":1433,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:46",{"_index":1441,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/dto/credential",{"_index":1201,"title":{},"body":{"classes/CredentialConfigCreate.html":{},"coverage.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts",{"_index":1126,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"coverage.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:100",{"_index":1136,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:105",{"_index":1142,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:111",{"_index":1177,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:116",{"_index":1165,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:120",{"_index":1166,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:123",{"_index":1162,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:128",{"_index":1173,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:133",{"_index":1169,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:139",{"_index":1172,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:172",{"_index":1146,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:179",{"_index":1161,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:34",{"_index":1757,"title":{},"body":{"classes/DisplayImage.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:38",{"_index":1727,"title":{},"body":{"classes/Display.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:40",{"_index":1724,"title":{},"body":{"classes/Display.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:42",{"_index":1725,"title":{},"body":{"classes/Display.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:44",{"_index":1721,"title":{},"body":{"classes/Display.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:46",{"_index":1728,"title":{},"body":{"classes/Display.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:49",{"_index":1723,"title":{},"body":{"classes/Display.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:52",{"_index":1726,"title":{},"body":{"classes/Display.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:57",{"_index":2161,"title":{},"body":{"classes/IssuerMetadataCredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:60",{"_index":2160,"title":{},"body":{"classes/IssuerMetadataCredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:63",{"_index":2162,"title":{},"body":{"classes/IssuerMetadataCredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:76",{"_index":1158,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:80",{"_index":1141,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:84",{"_index":1176,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:90",{"_index":1174,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:95",{"_index":1139,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts",{"_index":58,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:24",{"_index":1788,"title":{},"body":{"classes/EmbeddedDisclosurePolicy.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:35",{"_index":69,"title":{},"body":{"classes/AllowListPolicy.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:47",{"_index":3077,"title":{},"body":{"classes/RootOfTrustPolicy.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:62",{"_index":2706,"title":{},"body":{"classes/PolicyCredential.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:68",{"_index":2708,"title":{},"body":{"classes/PolicyCredential.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:74",{"_index":2707,"title":{},"body":{"classes/PolicyCredential.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:86",{"_index":314,"title":{},"body":{"classes/AttestationBasedPolicy.html":{}}}],["src/issuer/display/display.controller.ts",{"_index":1730,"title":{},"body":{"controllers/DisplayController.html":{},"coverage.html":{}}}],["src/issuer/display/display.controller.ts:27",{"_index":1738,"title":{},"body":{"controllers/DisplayController.html":{}}}],["src/issuer/display/display.controller.ts:38",{"_index":1736,"title":{},"body":{"controllers/DisplayController.html":{}}}],["src/issuer/display/display.service.ts",{"_index":1762,"title":{},"body":{"injectables/DisplayService.html":{},"coverage.html":{}}}],["src/issuer/display/display.service.ts:11",{"_index":1764,"title":{},"body":{"injectables/DisplayService.html":{}}}],["src/issuer/display/display.service.ts:26",{"_index":1767,"title":{},"body":{"injectables/DisplayService.html":{}}}],["src/issuer/display/display.service.ts:38",{"_index":1766,"title":{},"body":{"injectables/DisplayService.html":{}}}],["src/issuer/display/dto/display",{"_index":1746,"title":{},"body":{"classes/DisplayCreateDto.html":{},"coverage.html":{}}}],["src/issuer/display/entities/display.entity.ts",{"_index":1750,"title":{},"body":{"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"coverage.html":{}}}],["src/issuer/display/entities/display.entity.ts:13",{"_index":1760,"title":{},"body":{"classes/DisplayInfo.html":{}}}],["src/issuer/display/entities/display.entity.ts:15",{"_index":1758,"title":{},"body":{"classes/DisplayInfo.html":{}}}],["src/issuer/display/entities/display.entity.ts:19",{"_index":1759,"title":{},"body":{"classes/DisplayInfo.html":{}}}],["src/issuer/display/entities/display.entity.ts:26",{"_index":1752,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["src/issuer/display/entities/display.entity.ts:32",{"_index":1751,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["src/issuer/display/entities/display.entity.ts:40",{"_index":1755,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["src/issuer/display/entities/display.entity.ts:9",{"_index":1761,"title":{},"body":{"classes/DisplayLogo.html":{}}}],["src/issuer/issuance/dto/authentication",{"_index":561,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts",{"_index":1207,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"coverage.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:13",{"_index":1210,"title":{},"body":{"classes/CredentialConfigMapping.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:30",{"_index":2044,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/entities/issuance",{"_index":1990,"title":{},"body":{"entities/IssuanceConfig.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.controller.ts",{"_index":2028,"title":{},"body":{"controllers/IssuanceController.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.controller.ts:28",{"_index":2034,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.controller.ts:38",{"_index":2036,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.controller.ts:54",{"_index":2032,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.service.ts",{"_index":2045,"title":{},"body":{"injectables/IssuanceService.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.service.ts:159",{"_index":2062,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:168",{"_index":2056,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:181",{"_index":2058,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:197",{"_index":2064,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:21",{"_index":2051,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:221",{"_index":2054,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:39",{"_index":2061,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:48",{"_index":2060,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuer",{"_index":2105,"title":{},"body":{"controllers/IssuerManagementController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/issuer/issuer.module.ts",{"_index":2171,"title":{},"body":{"modules/IssuerModule.html":{}}}],["src/issuer/oid4vci/dto/notification",{"_index":2475,"title":{},"body":{"classes/NotificationRequestDto.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/dto/offer",{"_index":2493,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts",{"_index":2516,"title":{},"body":{"controllers/Oid4vciController.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:29",{"_index":2521,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:43",{"_index":2528,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:53",{"_index":2525,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts",{"_index":3938,"title":{},"body":{"coverage.html":{}}}],["src/issuer/oid4vci/util.ts",{"_index":3941,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/issuer/status",{"_index":3449,"title":{},"body":{"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":3944,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/metric/metric.module.ts",{"_index":2466,"title":{},"body":{"modules/MetricModule.html":{}}}],["src/registrar/dto/access",{"_index":6,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"coverage.html":{}}}],["src/registrar/entities/registrar.entity.ts",{"_index":2878,"title":{},"body":{"entities/RegistrarEntity.html":{},"coverage.html":{}}}],["src/registrar/entities/registrar.entity.ts:13",{"_index":2883,"title":{},"body":{"entities/RegistrarEntity.html":{}}}],["src/registrar/entities/registrar.entity.ts:16",{"_index":2882,"title":{},"body":{"entities/RegistrarEntity.html":{}}}],["src/registrar/entities/registrar.entity.ts:19",{"_index":2881,"title":{},"body":{"entities/RegistrarEntity.html":{}}}],["src/registrar/entities/registrar.entity.ts:7",{"_index":2884,"title":{},"body":{"entities/RegistrarEntity.html":{}}}],["src/registrar/registrar",{"_index":3945,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/registrar/registrar.module.ts",{"_index":2889,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["src/registrar/registrar.service.ts",{"_index":2895,"title":{},"body":{"injectables/RegistrarService.html":{},"coverage.html":{}}}],["src/registrar/registrar.service.ts:100",{"_index":2926,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:111",{"_index":2933,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:133",{"_index":2931,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:141",{"_index":2934,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:158",{"_index":2919,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:181",{"_index":2923,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:198",{"_index":2914,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:240",{"_index":2917,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:32",{"_index":2940,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:36",{"_index":2938,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:40",{"_index":2910,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:59",{"_index":2930,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:92",{"_index":2924,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/session/entities/session.entity.ts",{"_index":3135,"title":{},"body":{"entities/Session.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/session/entities/session.entity.ts:105",{"_index":3152,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:111",{"_index":3142,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:117",{"_index":3170,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:120",{"_index":3148,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:126",{"_index":3156,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:132",{"_index":3157,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:138",{"_index":3143,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:143",{"_index":3140,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:148",{"_index":3154,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:153",{"_index":3153,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:158",{"_index":3167,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:164",{"_index":3166,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:171",{"_index":3165,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:58",{"_index":3150,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:61",{"_index":3151,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:67",{"_index":3159,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:73",{"_index":3160,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:79",{"_index":3145,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:84",{"_index":3139,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:89",{"_index":3158,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:94",{"_index":3138,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:99",{"_index":3171,"title":{},"body":{"entities/Session.html":{}}}],["src/session/session",{"_index":3948,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/session/session.controller.ts",{"_index":3182,"title":{},"body":{"controllers/SessionController.html":{},"coverage.html":{}}}],["src/session/session.controller.ts:33",{"_index":3189,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:43",{"_index":3193,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:54",{"_index":3188,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:67",{"_index":3197,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.decorator.ts",{"_index":3950,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/session/session.module.ts",{"_index":3346,"title":{},"body":{"modules/SessionModule.html":{}}}],["src/session/session.pipe.ts",{"_index":3352,"title":{},"body":{"injectables/SessionPipe.html":{},"coverage.html":{}}}],["src/session/session.pipe.ts:6",{"_index":3355,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["src/session/session.pipe.ts:9",{"_index":3357,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["src/session/session.service.ts",{"_index":3362,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["src/session/session.service.ts:118",{"_index":3398,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:144",{"_index":3374,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:152",{"_index":3382,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:163",{"_index":3381,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:172",{"_index":3385,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:179",{"_index":3400,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:19",{"_index":3370,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:192",{"_index":3379,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:34",{"_index":3387,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:89",{"_index":3396,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:98",{"_index":3377,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/storage/adapters/local.storage.ts",{"_index":2373,"title":{},"body":{"classes/LocalFileStorage.html":{},"coverage.html":{}}}],["src/storage/adapters/local.storage.ts:13",{"_index":2375,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:16",{"_index":2380,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:37",{"_index":2379,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:42",{"_index":2377,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:46",{"_index":2378,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts",{"_index":3079,"title":{},"body":{"classes/S3FileStorage.html":{},"coverage.html":{}}}],["src/storage/adapters/s3.storage.ts:13",{"_index":3084,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:20",{"_index":3090,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:56",{"_index":3089,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:68",{"_index":3086,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:74",{"_index":3087,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:85",{"_index":3088,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/dto/file",{"_index":1870,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["src/storage/entities/files.entity.ts",{"_index":1829,"title":{},"body":{"entities/FileEntity.html":{},"coverage.html":{}}}],["src/storage/entities/files.entity.ts:13",{"_index":1833,"title":{},"body":{"entities/FileEntity.html":{}}}],["src/storage/entities/files.entity.ts:19",{"_index":1832,"title":{},"body":{"entities/FileEntity.html":{}}}],["src/storage/entities/files.entity.ts:7",{"_index":1831,"title":{},"body":{"entities/FileEntity.html":{}}}],["src/storage/files.service.ts",{"_index":1875,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{}}}],["src/storage/files.service.ts:15",{"_index":1881,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:30",{"_index":1893,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:64",{"_index":1889,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:73",{"_index":1882,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:77",{"_index":1888,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:88",{"_index":1885,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/storage",{"_index":3955,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/storage/storage.controller.ts",{"_index":3573,"title":{},"body":{"controllers/StorageController.html":{},"coverage.html":{}}}],["src/storage/storage.controller.ts:44",{"_index":3583,"title":{},"body":{"controllers/StorageController.html":{}}}],["src/storage/storage.controller.ts:52",{"_index":3577,"title":{},"body":{"controllers/StorageController.html":{}}}],["src/storage/storage.module.ts",{"_index":3605,"title":{},"body":{"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/storage/storage.module.ts:17",{"_index":3606,"title":{},"body":{"modules/StorageModule.html":{}}}],["src/storage/storage.types.ts",{"_index":1835,"title":{},"body":{"interfaces/FileStorage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/storage/storage.types.ts:21",{"_index":1852,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:27",{"_index":1846,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:31",{"_index":1840,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:33",{"_index":1842,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:35",{"_index":1844,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/utils/config",{"_index":943,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/utils/logger/log",{"_index":3967,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/logger/logger",{"_index":2410,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["src/utils/logger/session",{"_index":3212,"title":{},"body":{"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/mediatype/media",{"_index":3974,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/utils/webhook/webhook.dto.ts",{"_index":106,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/utils/webhook/webhook.dto.ts:105",{"_index":3756,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:19",{"_index":113,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:24",{"_index":116,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:44",{"_index":3753,"title":{},"body":{"classes/WebHookAuthConfigHeader.html":{}}}],["src/utils/webhook/webhook.dto.ts:51",{"_index":3751,"title":{},"body":{"classes/WebHookAuthConfigHeader.html":{}}}],["src/utils/webhook/webhook.dto.ts:60",{"_index":3754,"title":{},"body":{"classes/WebHookAuthConfigNone.html":{}}}],["src/utils/webhook/webhook.dto.ts:65",{"_index":3749,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:77",{"_index":3757,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/utils/webhook/webhook.service.ts",{"_index":3759,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{}}}],["src/utils/webhook/webhook.service.ts:111",{"_index":3800,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/utils/webhook/webhook.service.ts:12",{"_index":3760,"title":{},"body":{"classes/WebhookResponse.html":{}}}],["src/utils/webhook/webhook.service.ts:20",{"_index":3796,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/utils/webhook/webhook.service.ts:40",{"_index":3798,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/verifier/oid4vp/dto/authorization",{"_index":599,"title":{},"body":{"classes/AuthorizationResponse.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/dto/presentation",{"_index":2765,"title":{},"body":{"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts",{"_index":2553,"title":{},"body":{"controllers/Oid4vpController.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:32",{"_index":2559,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:43",{"_index":2563,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.module.ts",{"_index":2574,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts",{"_index":2579,"title":{},"body":{"injectables/Oid4vpService.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:20",{"_index":2584,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:205",{"_index":2592,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:264",{"_index":2593,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:41",{"_index":2586,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/presentations/dto/auth",{"_index":458,"title":{},"body":{"interfaces/AuthResponse.html":{},"coverage.html":{}}}],["src/verifier/presentations/dto/presentation",{"_index":2729,"title":{},"body":{"classes/PresentationConfigCreateDto.html":{},"coverage.html":{}}}],["src/verifier/presentations/dto/vp",{"_index":3029,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{},"coverage.html":{}}}],["src/verifier/presentations/entities/presentation",{"_index":886,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.controller.ts",{"_index":2734,"title":{},"body":{"controllers/PresentationManagementController.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.controller.ts:111",{"_index":2738,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:121",{"_index":2746,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:137",{"_index":2740,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:79",{"_index":2744,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.module.ts",{"_index":2779,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["src/verifier/presentations/presentations.service.ts",{"_index":2784,"title":{},"body":{"injectables/PresentationsService.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.service.ts:147",{"_index":2809,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:160",{"_index":2822,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:176",{"_index":2803,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:186",{"_index":2807,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:207",{"_index":2824,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:220",{"_index":2831,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:243",{"_index":2829,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:258",{"_index":2827,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:275",{"_index":2817,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:33",{"_index":2798,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:53",{"_index":2813,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:66",{"_index":2810,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/resolver/dto/issuer",{"_index":2159,"title":{},"body":{"interfaces/IssuerMetadata.html":{},"coverage.html":{}}}],["src/verifier/resolver/resolver.module.ts",{"_index":3036,"title":{},"body":{"modules/ResolverModule.html":{}}}],["src/verifier/resolver/resolver.service.ts",{"_index":3038,"title":{},"body":{"injectables/ResolverService.html":{},"coverage.html":{}}}],["src/verifier/resolver/resolver.service.ts:12",{"_index":3041,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/resolver/resolver.service.ts:21",{"_index":3043,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/verifier.module.ts",{"_index":3748,"title":{},"body":{"modules/VerifierModule.html":{}}}],["src/well",{"_index":1332,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["st",{"_index":2402,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["st.size",{"_index":2404,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["stack",{"_index":3276,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["stage",{"_index":2605,"title":{},"body":{"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{}}}],["start",{"_index":2589,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["started",{"_index":3329,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["starting",{"_index":3261,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["starts",{"_index":2928,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["startswith(\"http",{"_index":2195,"title":{},"body":{"modules/IssuerModule.html":{}}}],["starttime",{"_index":3262,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["startup",{"_index":4183,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state",{"_index":461,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["statements",{"_index":3869,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":3418,"title":{},"body":{"injectables/SessionService.html":{}}}],["static",{"_index":213,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{},"dependencies.html":{}}}],["statsync",{"_index":2386,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["statsync(fullpath",{"_index":2403,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["status",{"_index":395,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["status_list",{"_index":3547,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuscode",{"_index":296,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["statuslist",{"_index":3514,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslist(entry.elements",{"_index":3531,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslist+jwt",{"_index":3536,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslistcontroller",{"_index":3448,"title":{"controllers/StatusListController.html":{}},"body":{"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"coverage.html":{}}}],["statuslistentity",{"_index":3464,"title":{"entities/StatusListEntity.html":{}},"body":{"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"coverage.html":{}}}],["statuslistfetcher",{"_index":2789,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["statuslistjwtheaderparameters",{"_index":3515,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslistmodule",{"_index":423,"title":{"modules/StatusListModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"index.html":{},"modules.html":{}}}],["statuslistrepository",{"_index":3495,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslistservice",{"_index":1430,"title":{"injectables/StatusListService.html":{}},"body":{"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{},"index.html":{}}}],["statusmanagement",{"_index":1132,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["statusmapping",{"_index":3485,"title":{"entities/StatusMapping.html":{}},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"coverage.html":{}}}],["statusmappingrepository",{"_index":3494,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statusupdatedto",{"_index":3195,"title":{"classes/StatusUpdateDto.html":{}},"body":{"controllers/SessionController.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["step",{"_index":658,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/SessionLoggerService.html":{}}}],["still",{"_index":521,"title":{},"body":{"injectables/AuthService.html":{}}}],["stopatfirsterror",{"_index":1304,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["storage",{"_index":300,"title":{},"body":{"modules/AppModule.html":{},"injectables/FilesService.html":{},"controllers/StorageController.html":{},"miscellaneous/variables.html":{}}}],["storage.controller",{"_index":3609,"title":{},"body":{"modules/StorageModule.html":{}}}],["storage.types",{"_index":2388,"title":{},"body":{"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"modules/StorageModule.html":{}}}],["storage/files.service",{"_index":3692,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["storage/storage.module",{"_index":232,"title":{},"body":{"modules/AppModule.html":{}}}],["storage/storage.types",{"_index":1902,"title":{},"body":{"injectables/FilesService.html":{}}}],["storage_driver",{"_index":4250,"title":{},"body":{"miscellaneous/variables.html":{}}}],["storage_validation_schema",{"_index":3956,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["storagecontroller",{"_index":3572,"title":{"controllers/StorageController.html":{}},"body":{"controllers/StorageController.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["storagemodule",{"_index":193,"title":{"modules/StorageModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StorageModule.html":{},"index.html":{},"modules.html":{}}}],["storagemodule.forroot",{"_index":309,"title":{},"body":{"modules/AppModule.html":{}}}],["store",{"_index":1226,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"controllers/Oid4vciController.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/variables.html":{}}}],["store(tenantid",{"_index":1248,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["storecredentialconfiguration",{"_index":1378,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["storecredentialconfiguration(config",{"_index":1384,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["stored",{"_index":1254,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/FilesService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{}}}],["storedobject",{"_index":1858,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["storeissuanceconfiguration",{"_index":2031,"title":{},"body":{"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["storeissuanceconfiguration(config",{"_index":2035,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["storeissuanceconfiguration(tenantid",{"_index":2063,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["storepresentationconfig",{"_index":2736,"title":{},"body":{"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["storepresentationconfig(config",{"_index":2745,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["storepresentationconfig(tenantid",{"_index":2820,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid",{"_index":2794,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid(registrationcertid",{"_index":2823,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["stores",{"_index":1250,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["strategy",{"_index":2236,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["stream",{"_index":1853,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"controllers/StorageController.html":{}}}],["stream.contenttype",{"_index":3603,"title":{},"body":{"controllers/StorageController.html":{}}}],["stream.size",{"_index":3604,"title":{},"body":{"controllers/StorageController.html":{}}}],["streamablefile",{"_index":3586,"title":{},"body":{"controllers/StorageController.html":{}}}],["streamablefile(stream.stream",{"_index":3600,"title":{},"body":{"controllers/StorageController.html":{}}}],["string",{"_index":19,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AttestationBasedPolicy.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["string(i.shown).padend(24",{"_index":1055,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["string(i.shown).replace(/\\|/g",{"_index":1068,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["strings",{"_index":4046,"title":{},"body":{"miscellaneous/functions.html":{}}}],["string})@get(':id",{"_index":3192,"title":{},"body":{"controllers/SessionController.html":{}}}],["structure",{"_index":833,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{}}}],["structured",{"_index":3288,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["style",{"_index":4264,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sub",{"_index":523,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{}}}],["subclass",{"_index":1154,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["subclass’s",{"_index":1156,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["subfolder",{"_index":1264,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["subject",{"_index":802,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["subject_types_supported",{"_index":550,"title":{},"body":{"injectables/AuthService.html":{}}}],["subtypes",{"_index":154,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["succeeded",{"_index":3340,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["success",{"_index":396,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SessionService.html":{}}}],["successful",{"_index":397,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SessionService.html":{}}}],["successfully",{"_index":2656,"title":{},"body":{"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["such",{"_index":1782,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"entities/Session.html":{}}}],["summarize",{"_index":4060,"title":{},"body":{"miscellaneous/functions.html":{}}}],["summarizeflags",{"_index":3962,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["summarizeflags(flags",{"_index":4058,"title":{},"body":{"miscellaneous/functions.html":{}}}],["summarizes",{"_index":4059,"title":{},"body":{"miscellaneous/functions.html":{}}}],["summarizeschemashape",{"_index":3963,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["summarizeschemashape(s",{"_index":4062,"title":{},"body":{"miscellaneous/functions.html":{}}}],["summarizewhenentry",{"_index":3964,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["summarizewhenentry(w",{"_index":4065,"title":{},"body":{"miscellaneous/functions.html":{}}}],["summary",{"_index":392,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/WellKnownController.html":{}}}],["super",{"_index":2206,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["super(config",{"_index":2242,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super(configservice",{"_index":1654,"title":{},"body":{"classes/DBKeyService.html":{}}}],["super.authenticate(req",{"_index":2244,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":55,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/JwtAuthGuard.html":{}}}],["supersecret",{"_index":448,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["support",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/Session.html":{},"modules.html":{}}}],["supported",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["supportedauthenticationscheme.clientattestationjwt",{"_index":759,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["supports",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{}}}],["svg",{"_index":4078,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":3825,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["switch",{"_index":835,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/CryptoImplementationService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["symbol(\"file_storage",{"_index":1868,"title":{},"body":{"interfaces/FileStorage.html":{},"miscellaneous/variables.html":{}}}],["symmetric",{"_index":2267,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["synchronize",{"_index":1707,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["system",{"_index":1609,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"injectables/StatusListService.html":{},"entities/TenantEntity.html":{}}}],["t",{"_index":1800,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["table",{"_index":3980,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3979,"title":{},"body":{"coverage.html":{}}}],["tamper",{"_index":1912,"title":{},"body":{"injectables/FilesService.html":{}}}],["tap",{"_index":3244,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["tap((data",{"_index":3264,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["target",{"_index":267,"title":{},"body":{"modules/AppModule.html":{}}}],["tell",{"_index":1318,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/Oid4vpService.html":{}}}],["temp",{"_index":4158,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tenancy",{"_index":3169,"title":{},"body":{"entities/Session.html":{}}}],["tenant",{"_index":413,"title":{},"body":{"controllers/AuthController.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["tenant.isdirectory",{"_index":1273,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenant.name",{"_index":1280,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenant.secret",{"_index":3708,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenant.service",{"_index":3638,"title":{},"body":{"controllers/TenantController.html":{}}}],["tenant/2025/08/14/uuid.ext",{"_index":1860,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["tenant/tenant.controller",{"_index":445,"title":{},"body":{"modules/AuthModule.html":{}}}],["tenant/tenant.service",{"_index":446,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["tenant_id",{"_index":3350,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["tenant_total",{"_index":452,"title":{},"body":{"modules/AuthModule.html":{}}}],["tenantcontroller",{"_index":429,"title":{"controllers/TenantController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/TenantController.html":{},"coverage.html":{}}}],["tenantentity",{"_index":441,"title":{"entities/TenantEntity.html":{}},"body":{"modules/AuthModule.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["tenantfolders",{"_index":1269,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenanthost",{"_index":2611,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["tenantid",{"_index":293,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["tenantid)).uri",{"_index":815,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["tenantid/credentials",{"_index":1408,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["tenantid/status",{"_index":3451,"title":{},"body":{"controllers/StatusListController.html":{}}}],["tenantrepository",{"_index":3663,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenants",{"_index":456,"title":{"interfaces/Tenants.html":{}},"body":{"modules/AuthModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{}}}],["tenantsecret",{"_index":3688,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenantservice",{"_index":427,"title":{"injectables/TenantService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{},"index.html":{}}}],["tenanttotal",{"_index":3664,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["terminusmodule",{"_index":1988,"title":{},"body":{"modules/HealthModule.html":{}}}],["test",{"_index":4055,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tests",{"_index":4053,"title":{},"body":{"miscellaneous/functions.html":{}}}],["text",{"_index":1080,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["text_color",{"_index":1189,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["textencoder().encode(data",{"_index":4216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["textencoder().encode(secret",{"_index":1950,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["then((cert",{"_index":1684,"title":{},"body":{"classes/DBKeyService.html":{}}}],["then((entry",{"_index":1825,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["then((file",{"_index":3539,"title":{},"body":{"injectables/StatusListService.html":{}}}],["then((key",{"_index":1681,"title":{},"body":{"classes/DBKeyService.html":{}}}],["then((res",{"_index":3015,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["then((response",{"_index":2993,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["then((session",{"_index":763,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["then(async",{"_index":1815,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{}}}],["think",{"_index":520,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.accesstoken",{"_index":2967,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.addaccesscertificate",{"_index":2972,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.addrp(name",{"_index":2971,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.authorizeservice.authorizationchallengeendpoint",{"_index":666,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.authzmetadata",{"_index":3865,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["this.authorizeservice.sendauthorizationresponse(queries",{"_index":649,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.validatetokenrequest(body",{"_index":664,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authservice.getoauth2token(body",{"_index":404,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.getoidcdiscovery",{"_index":406,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authzmetadata(session",{"_index":776,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.bucket",{"_index":3101,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.buildmodel",{"_index":1100,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["this.certrepository",{"_index":1683,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["this.cfg.get(\"config_print_advanced",{"_index":977,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["this.cfg.get(\"config_print_file",{"_index":1105,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["this.cfg.get(\"config_print_format",{"_index":1101,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["this.cfg.get(\"config_print_in_prod",{"_index":1099,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["this.cfg.get(\"node_env",{"_index":1097,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["this.cfg.get(key",{"_index":995,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["this.client",{"_index":2963,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.client.setconfig",{"_index":2964,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.config",{"_index":2446,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enabledebugmode",{"_index":2462,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enablehttplogger",{"_index":2461,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enablesessionlogger",{"_index":2460,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.level",{"_index":2463,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.logformat",{"_index":2464,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.configservice",{"_index":2998,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.get",{"_index":2449,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.configservice.get(\"config_import",{"_index":1268,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.configservice.get(\"config_import_force",{"_index":1267,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["this.configservice.get(\"jwt_secret",{"_index":1937,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.get(\"log_level",{"_index":2448,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.configservice.get(\"oidc",{"_index":1968,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["this.configservice.get(\"public_url\")}/storage/${key",{"_index":1928,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.configservice.get(\"registrar_url",{"_index":2968,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow",{"_index":2954,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.configservice.getorthrow(\"auth_client_id",{"_index":3704,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.configservice.getorthrow(\"config_folder",{"_index":1263,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.configservice.getorthrow(\"jwt_expires_in",{"_index":1948,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow(\"jwt_issuer",{"_index":1946,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow(\"jwt_secret",{"_index":1945,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow(\"oidc_sub",{"_index":2274,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.configservice.getorthrow(\"public_url",{"_index":539,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/StatusListService.html":{}}}],["this.configservice.getorthrow(\"public_url\")}${req.url",{"_index":768,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.configservice.getorthrow(\"public_url\")}/${session.id",{"_index":797,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.configservice.getorthrow(\"public_url\")}/${session.tenantid}/credentials",{"_index":1478,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.configservice.getorthrow(\"public_url\")}/${values.session}/oid4vp",{"_index":2666,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.configservice.getorthrow(\"registrar_oidc_url",{"_index":2953,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow(\"registrar_url",{"_index":2966,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow(\"rp_name",{"_index":2642,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow(\"session_tidy_up_interval",{"_index":3414,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.configservice.getorthrow(\"session_ttl",{"_index":3445,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.configservie.get(\"crypto_alg",{"_index":1574,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["this.create(tenant",{"_index":1667,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.create(tenantid",{"_index":1680,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.createlist(entry",{"_index":3528,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.credentialconfigrepo",{"_index":1521,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepo.findby",{"_index":1463,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepo.findonebyorfail",{"_index":1528,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepository.delete",{"_index":1293,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.find",{"_index":1327,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.findonebyorfail",{"_index":1329,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.save",{"_index":1330,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialsconfigservice.getbyid",{"_index":2101,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.credentialsconfigservice.import",{"_index":2069,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.credentialsservice.delete(user.sub",{"_index":1403,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.get(user.sub",{"_index":1399,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.getschema(id",{"_index":1423,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["this.credentialsservice.getvct(id",{"_index":1420,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["this.credentialsservice.store(user.sub",{"_index":1400,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.crypto",{"_index":1655,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.crypto.alg",{"_index":1673,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.crypto.generatekeypair",{"_index":1668,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.crypto.getsigner(privatekey",{"_index":1678,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.cryptoimplementationservice.getalg",{"_index":1469,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.deletekey(token.sub",{"_index":2317,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.cryptoservice.getalg",{"_index":1689,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.cryptoservice.getcallbackcontext(tenantid",{"_index":740,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.cryptoservice.getcertchain",{"_index":1520,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.getcertentry",{"_index":1307,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.cryptoservice.getcerts(tenantid",{"_index":2312,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.cryptoservice.getjwks(tenantid).then((key",{"_index":3866,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["this.cryptoservice.import",{"_index":2068,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.cryptoservice.importkey(tenantid",{"_index":2313,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.cryptoservice.keyservice.getkid",{"_index":1493,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.keyservice.getkid(tenantid",{"_index":2997,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.cryptoservice.keyservice.getpublickey",{"_index":801,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{}}}],["this.cryptoservice.keyservice.signer",{"_index":1496,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.cryptoservice.ontenantinit(id",{"_index":3709,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.cryptoservice.signjwt",{"_index":2653,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.storeaccesscertificate",{"_index":3005,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.cryptoservice.updatecert(tenantid",{"_index":2315,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.db.pingcheck(\"database",{"_index":1986,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.displayrepository.create",{"_index":1770,"title":{},"body":{"injectables/DisplayService.html":{}}}],["this.displayrepository.findone",{"_index":1769,"title":{},"body":{"injectables/DisplayService.html":{}}}],["this.displayrepository.save(displayentity",{"_index":1771,"title":{},"body":{"injectables/DisplayService.html":{}}}],["this.displayservice.create(user.sub",{"_index":1745,"title":{},"body":{"controllers/DisplayController.html":{}}}],["this.displayservice.get(user.sub",{"_index":1744,"title":{},"body":{"controllers/DisplayController.html":{}}}],["this.encryptionservice.decryptjwe",{"_index":2679,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.encryptionservice.getencryptionpublickey",{"_index":2633,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.encryptionservice.ontenantinit(id",{"_index":3710,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.filerepository.delete",{"_index":1932,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.filerepository.find",{"_index":1929,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.filerepository.save",{"_index":1920,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.filesservice.deletebytenant(tenantid",{"_index":3715,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.filesservice.getstream(key).then",{"_index":3599,"title":{},"body":{"controllers/StorageController.html":{}}}],["this.filesservice.saveuserupload(user.sub",{"_index":3596,"title":{},"body":{"controllers/StorageController.html":{}}}],["this.getauthorizationserver",{"_index":743,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.getauthorizationserver(tenantid).createaccesstokenresponse",{"_index":796,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.getbyid",{"_index":1287,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.getdownloadurl(response.key",{"_index":1921,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.getexistingrp(name",{"_index":2991,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.getissuanceconfigurationbyid",{"_index":2072,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.getkid(tenant).catch(async",{"_index":1666,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.getkid(tenantid).catch",{"_index":1679,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.getpresentationconfig",{"_index":2843,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.getprivatekey(tenantid",{"_index":1677,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.getpubfromprivatekey(privatekeyjwk",{"_index":1692,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.gettenants().find((c",{"_index":3706,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.health.check",{"_index":1985,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.httpservice.get",{"_index":3064,"title":{},"body":{"injectables/ResolverService.html":{}}}],["this.httpservice.post",{"_index":3775,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.import",{"_index":2070,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["this.isenabled",{"_index":2951,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.ishttploggerenabled",{"_index":2465,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.issuanceconfigrepo.delete",{"_index":2073,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.find",{"_index":2097,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.findoneorfail",{"_index":2098,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.save",{"_index":2103,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceservice.deleteissuanceconfiguration(user.sub",{"_index":2043,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.issuanceservice.getissuanceconfiguration(user.sub",{"_index":2040,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.issuanceservice.getissuanceconfigurationbyid",{"_index":774,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.issuanceservice.storeissuanceconfiguration",{"_index":2041,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.isusingexternaloidc",{"_index":1943,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.itemnotes(i",{"_index":1056,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["this.itemnotes(i).replace(/\\|/g",{"_index":1067,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["this.jwtservice.generatetoken(payload",{"_index":530,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.isusingexternaloidc",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.kbverifier.bind(this",{"_index":2840,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.keyrepository",{"_index":1658,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{}}}],["this.keyrepository.delete",{"_index":1819,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.keyrepository.save",{"_index":1817,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.loadconfiguration",{"_index":2445,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.loadtenants",{"_index":3702,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.logger.error",{"_index":1308,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.logger.info",{"_index":1325,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.logger.setcontext(\"sessionlogger",{"_index":3256,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.logger.setcontext(\"sessionloggerservice",{"_index":3326,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["this.oauth2client",{"_index":2957,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.oauth2client.clientcredentials().then((token",{"_index":2975,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.oid4vciservice.createoffer",{"_index":2150,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["this.oid4vciservice.getcredential(req",{"_index":2540,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.handlenotification(req",{"_index":2543,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.issuermetadata(session",{"_index":3857,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["this.oid4vciservice.noncerequest(session",{"_index":2547,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.ontenantinit(id",{"_index":3713,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.oid4vpservice.createauthorizationrequest(session",{"_index":2568,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.oid4vpservice.createrequest",{"_index":2755,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.oid4vpservice.createrequest(\"pid",{"_index":814,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.oid4vpservice.getresponse(body",{"_index":2569,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.ontenantinit(session.tenantid).then",{"_index":3541,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.parsechallengerequest",{"_index":839,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.parseloglevel",{"_index":2447,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.presentationsservice.deletepresentationconfig(id",{"_index":2764,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.getpresentationconfig",{"_index":2613,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.getpresentationconfigs(user.sub",{"_index":2761,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.parseresponse",{"_index":2689,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.storepresentationconfig",{"_index":2762,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.storercid",{"_index":3027,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.publicbaseurl",{"_index":3109,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.publicbaseurl.replace",{"_index":3110,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.reflector.get",{"_index":3247,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.reflector.getallandoverride",{"_index":2207,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.refreshaccesstoken",{"_index":2969,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.registrarrepository.delete",{"_index":2974,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.registrarrepository.findonebyorfail",{"_index":3011,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.registrarrepository.save",{"_index":2973,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.registrarservice.addregistrationcertificate",{"_index":2618,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.registrarservice.isenabled",{"_index":2616,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.registrarservice.ontenantinit(id",{"_index":3712,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.render(model",{"_index":1103,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["this.renderjson(model",{"_index":1079,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["this.rendermarkdown(model",{"_index":1078,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["this.rendertext(model",{"_index":1081,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["this.resolverservice.resolvepublickey",{"_index":2856,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.s3",{"_index":3120,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.s3.send",{"_index":3100,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.sanitizebody(request.body",{"_index":3260,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.schedulerregistry.addinterval(\"tidyupsessions",{"_index":3417,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sdjwtinstance",{"_index":2838,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.sendauthorizationcode(res",{"_index":825,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionlogger.logauthorizationrequest(logcontext",{"_index":2621,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logcredentialverification",{"_index":2691,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowcomplete(logcontext",{"_index":2702,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowerror(logcontext",{"_index":2661,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowstart(logcontext",{"_index":2607,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logsession",{"_index":2655,"title":{},"body":{"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.sessionlogger.logsession(logcontext",{"_index":3769,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.sessionlogger.logsessionerror",{"_index":3786,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.sessionrepository.countby",{"_index":3425,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.delete",{"_index":3429,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.find",{"_index":3441,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail",{"_index":3442,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail(where",{"_index":3443,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.save(session",{"_index":3431,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.update",{"_index":3437,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionscounter.dec",{"_index":3440,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionscounter.inc",{"_index":3433,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionscounter.set",{"_index":3427,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionservice",{"_index":761,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.add(body.issuer_state",{"_index":659,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.sessionservice.add(issuer_state",{"_index":848,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.add(res.state",{"_index":2695,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.add(session.id",{"_index":2619,"title":{},"body":{"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.sessionservice.add(values.session",{"_index":2678,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.create",{"_index":2673,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.delete(id",{"_index":3208,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.get(body.auth_session",{"_index":821,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.get(body.issuer_state",{"_index":829,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.get(sessionid",{"_index":3360,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["this.sessionservice.getall",{"_index":3205,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.setauthcode(issuer_state",{"_index":846,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.setauthcode(values.issuer_state",{"_index":766,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.setentry(entry.index",{"_index":3554,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.setuptenant(id",{"_index":3698,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.shouldlog",{"_index":3327,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["this.statuslistfetcher.bind(this",{"_index":2841,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.statuslistrepository",{"_index":3538,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistrepository.delete",{"_index":3529,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistrepository.findonebyorfail",{"_index":3542,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistrepository.save",{"_index":3527,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistrepository.update",{"_index":3537,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistservice.createentry",{"_index":1508,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.statuslistservice.getlist(tenantid",{"_index":3463,"title":{},"body":{"controllers/StatusListController.html":{}}}],["this.statuslistservice.ontenantinit(id",{"_index":3711,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.statuslistservice.updatestatus(value",{"_index":3211,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.statusmappingrepository.delete",{"_index":3530,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statusmappingrepository.findby",{"_index":3550,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statusmappingrepository.save",{"_index":3546,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.storage.delete(file.id",{"_index":1931,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storage.getsignedurl",{"_index":1925,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storage.getsignedurl(key",{"_index":1926,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storage.put(key",{"_index":1915,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.store(tenant.name",{"_index":1321,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.storeissuanceconfiguration",{"_index":2096,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.storepresentationconfig(tenant.name",{"_index":2845,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.tenantrepository.count",{"_index":3696,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenantrepository.delete",{"_index":3717,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenantrepository.findoneby",{"_index":3699,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenantrepository.save",{"_index":3695,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenantrepository.update",{"_index":3714,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenants",{"_index":3701,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenantservice.deletetenant(id",{"_index":3652,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantservice.gettenantstatus(user.sub",{"_index":3649,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantservice.inittenant(values.id",{"_index":3647,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantservice.validatetenant",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.tenanttotal.set",{"_index":3697,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tidyupsessions",{"_index":3412,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.verifier.bind(this",{"_index":2839,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository",{"_index":2849,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.delete",{"_index":2844,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.find",{"_index":2846,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.save",{"_index":2848,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.update",{"_index":2851,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.webhookservice.sendwebhook",{"_index":2701,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.wellknownservice.getauthzmetadata(session",{"_index":3831,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.wellknownservice.getissuermetadata(session",{"_index":3829,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.wellknownservice.getjwks(session.tenantid",{"_index":3835,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.writefilesafely(string(file",{"_index":1106,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["throw",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionPipe.html":{},"injectables/StatusListService.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["tidy",{"_index":3389,"title":{},"body":{"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["tidyupsessions",{"_index":3365,"title":{},"body":{"injectables/SessionService.html":{}}}],["time",{"_index":1513,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/ParResponseDto.html":{}}}],["timestamp",{"_index":860,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["title",{"_index":3121,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["todo",{"_index":255,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/FilesService.html":{},"controllers/IssuerManagementController.html":{},"classes/KeyService.html":{},"modules/MetricModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["token",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/KeyController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"entities/StatusListEntity.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["token(body",{"_index":627,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["token.accesstoken",{"_index":2976,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["token.decorator",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["token.sub",{"_index":2311,"title":{},"body":{"controllers/KeyController.html":{}}}],["token_endpoint",{"_index":541,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["token_endpoint_auth_methods_supported",{"_index":547,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["token_exchange",{"_index":3341,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["token_type",{"_index":400,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/TokenResponse.html":{}}}],["tokenpayload",{"_index":483,"title":{"interfaces/TokenPayload.html":{}},"body":{"injectables/AuthService.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tokenresponse",{"_index":347,"title":{"classes/TokenResponse.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/TokenResponse.html":{},"coverage.html":{}}}],["tokens",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["tolowercase",{"_index":1102,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/FilesService.html":{}}}],["toodo",{"_index":2075,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["tostring(\"ascii",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{}}}],["total",{"_index":454,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["tracking",{"_index":2773,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{}}}],["transform",{"_index":3353,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["transform(sessionid",{"_index":3356,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["transformer",{"_index":70,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["translatetime",{"_index":272,"title":{},"body":{"modules/AppModule.html":{}}}],["transport",{"_index":266,"title":{},"body":{"modules/AppModule.html":{}}}],["trim",{"_index":1046,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["true",{"_index":68,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"classes/LocalFileStorage.html":{},"classes/NoneTrustPolicy.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"controllers/StorageController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["true})@column('json",{"_index":1145,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["true})@isnumber",{"_index":1168,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["true})@isoptional()@isobject",{"_index":1135,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["true})@isoptional()@isstring",{"_index":2717,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@isoptional()@validate(webhookconfig)@type(undefined",{"_index":2726,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@isstring",{"_index":2719,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@type(undefined",{"_index":313,"title":{},"body":{"classes/AttestationBasedPolicy.html":{},"classes/CredentialQuery.html":{},"classes/DCQL.html":{},"classes/PolicyCredential.html":{}}}],["trust",{"_index":3053,"title":{},"body":{"injectables/ResolverService.html":{}}}],["trusted",{"_index":908,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["trusted_authorities",{"_index":916,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["trustedauthorityquery",{"_index":910,"title":{"classes/TrustedAuthorityQuery.html":{}},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["try",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/Oid4vpService.html":{},"classes/S3FileStorage.html":{}}}],["ttl",{"_index":3444,"title":{},"body":{"injectables/SessionService.html":{}}}],["two",{"_index":3848,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["txcode",{"_index":738,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["typ",{"_index":2646,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["type",{"_index":20,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthService.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type(undefined)@isobject",{"_index":3750,"title":{},"body":{"classes/WebHookAuthConfigHeader.html":{}}}],["type.decorator",{"_index":3819,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["type.decorator.ts",{"_index":3975,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":3820,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["type.enum.ts",{"_index":4035,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typealiases",{"_index":4095,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":998,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/RegistrarService.html":{}}}],["typeorm",{"_index":883,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"entities/FileEntity.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{},"dependencies.html":{}}}],["typeorm/query",{"_index":3408,"title":{},"body":{"injectables/SessionService.html":{}}}],["typeorm/repository/repository",{"_index":1645,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"modules/KeyModule.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["typeormhealthindicator",{"_index":1981,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormmodule",{"_index":431,"title":{},"body":{"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{}}}],["typeormmodule.forfeature",{"_index":2192,"title":{},"body":{"modules/IssuerModule.html":{}}}],["typeormmodule.forfeature([certentity",{"_index":1589,"title":{},"body":{"modules/CryptoModule.html":{},"modules/KeyModule.html":{}}}],["typeormmodule.forfeature([fileentity",{"_index":3611,"title":{},"body":{"modules/StorageModule.html":{}}}],["typeormmodule.forfeature([presentationconfig",{"_index":2783,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["typeormmodule.forfeature([registrarentity",{"_index":2894,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["typeormmodule.forfeature([session",{"_index":3348,"title":{},"body":{"modules/SessionModule.html":{}}}],["typeormmodule.forfeature([statusmapping",{"_index":3488,"title":{},"body":{"modules/StatusListModule.html":{}}}],["typeormmodule.forfeature([tenantentity",{"_index":451,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forrootasync",{"_index":1703,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeormmoduleoptions",{"_index":1702,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":2327,"title":{},"body":{"entities/KeyEntity.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":2984,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["typically",{"_index":1354,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{}}}],["unauthorizedexception",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception(\"invalid",{"_index":517,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":996,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/OfferRequestDto.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"classes/WebhookConfig.html":{},"miscellaneous/variables.html":{}}}],["undefined})@apiproduces('application/json",{"_index":2114,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["undefined})@apiresponse({status",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@isarray",{"_index":1369,"title":{},"body":{"classes/CredentialSetQuery.html":{}}}],["undefined})@isobject()@isoptional",{"_index":2495,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["undefined})@post('offer",{"_index":2116,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["undefined})@post('request",{"_index":2743,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["undefined})@type(undefined",{"_index":1144,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"classes/WebhookConfig.html":{}}}],["union",{"_index":1150,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["unique",{"_index":26,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"entities/KeyEntity.html":{},"classes/KeyObj.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["unknown",{"_index":713,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/IssuanceService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["unknown(true",{"_index":4154,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unsecure",{"_index":2193,"title":{},"body":{"modules/IssuerModule.html":{}}}],["unset",{"_index":997,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["unsigned",{"_index":3850,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["unsupported",{"_index":843,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["up",{"_index":165,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"miscellaneous/variables.html":{}}}],["update",{"_index":2826,"title":{},"body":{"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["update.dto",{"_index":2307,"title":{},"body":{"controllers/KeyController.html":{},"controllers/SessionController.html":{},"injectables/StatusListService.html":{}}}],["update.dto.ts",{"_index":3566,"title":{},"body":{"classes/StatusUpdateDto.html":{},"classes/UpdateKeyDto.html":{},"coverage.html":{}}}],["update.dto.ts:16",{"_index":3567,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:24",{"_index":3570,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:8",{"_index":3568,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["updated",{"_index":880,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["updatedat",{"_index":856,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["updatedatecolumn",{"_index":877,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["updatekey",{"_index":2294,"title":{},"body":{"controllers/KeyController.html":{}}}],["updatekey(token",{"_index":2301,"title":{},"body":{"controllers/KeyController.html":{}}}],["updatekeydto",{"_index":2302,"title":{"classes/UpdateKeyDto.html":{}},"body":{"controllers/KeyController.html":{},"classes/UpdateKeyDto.html":{},"coverage.html":{}}}],["updates",{"_index":2305,"title":{},"body":{"controllers/KeyController.html":{}}}],["updatestatus",{"_index":3493,"title":{},"body":{"injectables/StatusListService.html":{}}}],["updatestatus(value",{"_index":3511,"title":{},"body":{"injectables/StatusListService.html":{}}}],["upload",{"_index":1897,"title":{},"body":{"injectables/FilesService.html":{},"controllers/StorageController.html":{}}}],["upload(user",{"_index":3578,"title":{},"body":{"controllers/StorageController.html":{}}}],["upload.dto",{"_index":3591,"title":{},"body":{"controllers/StorageController.html":{}}}],["upload.dto.ts",{"_index":1871,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["upload.dto.ts:5",{"_index":1873,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["uploaded",{"_index":1895,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadedfile",{"_index":3587,"title":{},"body":{"controllers/StorageController.html":{}}}],["uploading",{"_index":1896,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploads",{"_index":4257,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uri",{"_index":1185,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["url",{"_index":144,"title":{},"body":{"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/IssuerMetadata.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/variables.html":{}}}],["url(payload.iss).hostname",{"_index":3058,"title":{},"body":{"injectables/ResolverService.html":{}}}],["urls",{"_index":4265,"title":{},"body":{"miscellaneous/variables.html":{}}}],["urn:${randomuuid",{"_index":653,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["usage",{"_index":1818,"title":{},"body":{"injectables/EncryptionService.html":{},"entities/KeyEntity.html":{},"miscellaneous/typealiases.html":{}}}],["use",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/EC_Public.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":124,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CryptoImplementationService.html":{},"classes/DCQL.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["usedclaims",{"_index":1487,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["useddefault",{"_index":960,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["useexternaloidc",{"_index":2238,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["usefactory",{"_index":249,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["useful",{"_index":3218,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["useguards",{"_index":1386,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{}}}],["useguards(adminauthguard",{"_index":3639,"title":{},"body":{"controllers/TenantController.html":{}}}],["useguards(jwtauthguard",{"_index":1393,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{}}}],["useinterceptors",{"_index":2529,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/StorageController.html":{}}}],["useinterceptors(fileinterceptor(\"file",{"_index":3594,"title":{},"body":{"controllers/StorageController.html":{}}}],["useinterceptors(sessionloggerinterceptor",{"_index":2537,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["useinterceptors(undefined)@useguards(jwtauthguard)@apisecurity('oauth2')@apiconsumes('multipart/form",{"_index":3579,"title":{},"body":{"controllers/StorageController.html":{}}}],["user",{"_index":288,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"modules/SessionModule.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["user.admin",{"_index":3645,"title":{},"body":{"controllers/TenantController.html":{}}}],["user.sub",{"_index":2042,"title":{},"body":{"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["username",{"_index":1713,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":574,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/TenantController.html":{}}}],["uses",{"_index":1973,"title":{},"body":{"controllers/HealthController.html":{},"injectables/SessionLoggerService.html":{}}}],["using",{"_index":368,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthorizeService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["utf8",{"_index":1089,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["utility",{"_index":4067,"title":{},"body":{"miscellaneous/functions.html":{}}}],["utils/config",{"_index":234,"title":{},"body":{"modules/AppModule.html":{}}}],["utils/logger//session",{"_index":2533,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["utils/logger/session",{"_index":2176,"title":{},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["utils/mediatype/media",{"_index":3818,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["utils/webhook/webhook.dto",{"_index":569,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["utils/webhook/webhook.service",{"_index":2179,"title":{},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["uuid",{"_index":1647,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"dependencies.html":{}}}],["v4",{"_index":1646,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["valid",{"_index":823,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/StatusUpdateDto.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["valid(\"db",{"_index":4226,"title":{},"body":{"miscellaneous/variables.html":{}}}],["valid(\"es256",{"_index":4192,"title":{},"body":{"miscellaneous/variables.html":{}}}],["valid(\"json",{"_index":4235,"title":{},"body":{"miscellaneous/variables.html":{}}}],["valid(\"local",{"_index":4251,"title":{},"body":{"miscellaneous/variables.html":{}}}],["valid(\"sqlite",{"_index":4195,"title":{},"body":{"miscellaneous/variables.html":{}}}],["valid(\"text",{"_index":4169,"title":{},"body":{"miscellaneous/variables.html":{}}}],["valid(\"trace",{"_index":4232,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":630,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/ClaimsQuery.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["validate(config",{"_index":1296,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/PresentationsService.html":{}}}],["validate(issuancedto",{"_index":2076,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["validate(payload",{"_index":2229,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(webhookconfig",{"_index":933,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["validated",{"_index":2231,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatenested",{"_index":76,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["validatenested()@apiproperty({oneof",{"_index":3755,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["validatenested()@type(undefined",{"_index":1722,"title":{},"body":{"classes/Display.html":{},"classes/DisplayInfo.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/KeyImportDto.html":{}}}],["validatenested()@type(undefined)@column('json",{"_index":1754,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["validatenested()@type(undefined)@isoptional",{"_index":2497,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["validatetenant",{"_index":3662,"title":{},"body":{"injectables/TenantService.html":{}}}],["validatetenant(tenantid",{"_index":3687,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["validatetokenrequest",{"_index":697,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["validatetokenrequest(body",{"_index":720,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["validation",{"_index":1314,"title":{},"body":{"injectables/CredentialConfigService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/PresentationsService.html":{},"miscellaneous/variables.html":{}}}],["validation.schema.ts",{"_index":3875,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["validation_schema",{"_index":233,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["validation_schema.describe",{"_index":971,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["validationerror",{"_index":1310,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationerrors",{"_index":1295,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationerrors.length",{"_index":1317,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationerrors.map((error",{"_index":2094,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationschema",{"_index":244,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":77,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["value",{"_index":112,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.config",{"_index":1476,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.credentialconfigids",{"_index":2100,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.credentialconfigurationid",{"_index":3552,"title":{},"body":{"injectables/StatusListService.html":{}}}],["value.embeddeddisclosurepolicy",{"_index":1480,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.id",{"_index":1475,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.sessionid",{"_index":3551,"title":{},"body":{"injectables/StatusListService.html":{}}}],["value.status",{"_index":3555,"title":{},"body":{"injectables/StatusListService.html":{}}}],["values",{"_index":62,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"controllers/IssuerManagementController.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/SessionService.html":{},"controllers/TenantController.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["values.id",{"_index":3644,"title":{},"body":{"controllers/TenantController.html":{}}}],["values.session",{"_index":2663,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["values.uri",{"_index":2758,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["values.webhook",{"_index":2674,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["varchar",{"_index":3558,"title":{},"body":{"entities/StatusMapping.html":{}}}],["variable",{"_index":3395,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["variables",{"_index":4057,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":140,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["vault",{"_index":2344,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["vault_token",{"_index":4230,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vault_url",{"_index":4228,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vaultkeyservice",{"_index":2338,"title":{},"body":{"modules/KeyModule.html":{},"coverage.html":{}}}],["vc",{"_index":1458,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["vcs",{"_index":2786,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vct",{"_index":1133,"title":{"classes/VCT.html":{}},"body":{"entities/CredentialConfig.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/VCT.html":{},"coverage.html":{}}}],["vct(@param(\"id",{"_index":1418,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["vct(id",{"_index":1412,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["verbose",{"_index":2454,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"miscellaneous/variables.html":{}}}],["verifiable",{"_index":905,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["verification",{"_index":408,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{}}}],["verification.'})@apiresponse({status",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{}}}],["verificationcounter",{"_index":3428,"title":{},"body":{"injectables/SessionService.html":{}}}],["verificationresult",{"_index":3144,"title":{},"body":{"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["verified",{"_index":3146,"title":{},"body":{"entities/Session.html":{}}}],["verifier",{"_index":1555,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["verifier/oid4vp/dto/presentation",{"_index":2123,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["verifier/oid4vp/oid4vp.module",{"_index":2180,"title":{},"body":{"modules/IssuerModule.html":{}}}],["verifier/oid4vp/oid4vp.service",{"_index":730,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifier/presentations/dto/vp",{"_index":2942,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["verifier/presentations/entities/presentation",{"_index":81,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["verifier/presentations/presentations.module",{"_index":2891,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["verifier/presentations/presentations.service",{"_index":2943,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["verifier/verifier.module",{"_index":238,"title":{},"body":{"modules/AppModule.html":{}}}],["verifier_attestations",{"_index":2645,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["verifiermodule",{"_index":194,"title":{"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["verify",{"_index":751,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"miscellaneous/variables.html":{}}}],["verify(data",{"_index":2858,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verify(res.vp_token[att",{"_index":2871,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verifyauthorizationcodeaccesstokenrequest",{"_index":792,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifying",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifypreauthorizedcodeaccesstokenrequest",{"_index":780,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifytoken",{"_index":2210,"title":{},"body":{"injectables/JwtService.html":{}}}],["verifytoken(token",{"_index":1962,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["version",{"_index":4081,"title":{},"body":{"properties.html":{}}}],["via",{"_index":657,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/KeyService.html":{},"injectables/SessionService.html":{},"controllers/WellKnownController.html":{}}}],["void",{"_index":2431,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["vp",{"_index":468,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["vp_formats",{"_index":2634,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["vp_nonce",{"_index":2620,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["vp_token",{"_index":462,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["vprequest",{"_index":2821,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vprequestrepository",{"_index":2797,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vps",{"_index":2785,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["w",{"_index":4066,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wallet",{"_index":808,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"properties.html":{}}}],["want",{"_index":94,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/FilesService.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["warn",{"_index":2457,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"miscellaneous/variables.html":{}}}],["we'll",{"_index":2146,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["web",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"entities/StatusListEntity.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["webhook",{"_index":128,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.auth",{"_index":3790,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.auth.config.value",{"_index":3793,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.auth.type",{"_index":3791,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.auth?.type",{"_index":3795,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.url",{"_index":3794,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhookauthconfig",{"_index":131,"title":{"classes/WebHookAuthConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookauthconfigheader",{"_index":129,"title":{"classes/WebHookAuthConfigHeader.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookauthconfignone",{"_index":136,"title":{"classes/WebHookAuthConfigNone.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookconfig",{"_index":143,"title":{"classes/WebhookConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookresponse",{"_index":3758,"title":{"classes/WebhookResponse.html":{}},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{}}}],["webhookresponse.data",{"_index":3779,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhookresponse.status",{"_index":3784,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhooks",{"_index":110,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["webhooksent",{"_index":2703,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webhookservice",{"_index":2170,"title":{"injectables/WebhookService.html":{}},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"index.html":{}}}],["webhookurl",{"_index":3771,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webook",{"_index":2697,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["well",{"_index":239,"title":{},"body":{"modules/AppModule.html":{},"classes/DBKeyService.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["wellknowncontroller",{"_index":201,"title":{"controllers/WellKnownController.html":{}},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["wellknownservice",{"_index":196,"title":{"injectables/WellKnownService.html":{}},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["when(\"db_type",{"_index":4202,"title":{},"body":{"miscellaneous/variables.html":{}}}],["when(\"km_type",{"_index":4229,"title":{},"body":{"miscellaneous/variables.html":{}}}],["when(\"oidc",{"_index":4125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["when(\"registrar_url",{"_index":4240,"title":{},"body":{"miscellaneous/variables.html":{}}}],["when(joi.ref(\"storage_driver",{"_index":4254,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whether",{"_index":1898,"title":{},"body":{"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["whitelist",{"_index":1297,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["whose",{"_index":1886,"title":{},"body":{"injectables/FilesService.html":{}}}],["willsoto/nestjs",{"_index":434,"title":{},"body":{"modules/AuthModule.html":{},"modules/MetricModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["withfiletypes",{"_index":1271,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["working",{"_index":4157,"title":{},"body":{"miscellaneous/variables.html":{}}}],["write",{"_index":2394,"title":{},"body":{"classes/LocalFileStorage.html":{},"injectables/RegistrarService.html":{}}}],["writefilesafely",{"_index":1082,"title":{},"body":{"interfaces/ConfigGroup.html":{},"interfaces/ConfigItem.html":{},"interfaces/ConfigModel.html":{},"injectables/ConfigPrinterService.html":{}}}],["writefilesafely(filepath",{"_index":1123,"title":{},"body":{"injectables/ConfigPrinterService.html":{}}}],["writing",{"_index":3023,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["wrong",{"_index":1319,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["wrtites",{"_index":1608,"title":{},"body":{"classes/DBKeyService.html":{}}}],["x",{"_index":1778,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["x509_san_dns",{"_index":2627,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509_san_dns:${hostname",{"_index":2665,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509certificate",{"_index":3046,"title":{},"body":{"injectables/ResolverService.html":{}}}],["x509certificate(buffer.from(cert",{"_index":3055,"title":{},"body":{"injectables/ResolverService.html":{}}}],["x5c",{"_index":1519,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["y",{"_index":1779,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["yes",{"_index":712,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"interfaces/FileStorage.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{},"miscellaneous/functions.html":{}}}],["yyyy",{"_index":273,"title":{},"body":{"modules/AppModule.html":{}}}],["zoom",{"_index":197,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AccessCertificateResponse.html":{"url":"interfaces/AccessCertificateResponse.html","title":"interface - AccessCertificateResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccessCertificateResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/dto/access-certificate-response.ts\n        \n\n\n            \n                Description\n            \n            \n                Repsonse of access certificate request.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            crt\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            revoked\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        crt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        crt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The public key in PEM format.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier of the access certificate.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        revoked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        revoked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Indicates if the access certificate is revoked.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AccessCertificateResponse {\n    /**\n     * Unique identifier of the access certificate.\n     */\n    id: string;\n    /**\n     * The public key in PEM format.\n     */\n    crt: string;\n    /**\n     * Indicates if the access certificate is revoked.\n     */\n    revoked?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminAuthGuard.html":{"url":"injectables/AdminAuthGuard.html","title":"injectable - AdminAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/admin.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard(\"jwt\")\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/admin.guard.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class AdminAuthGuard extends AuthGuard(\"jwt\") {\n    canActivate(context: ExecutionContext) {\n        return super.canActivate(context);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllowListPolicy.html":{"url":"classes/AllowListPolicy.html","title":"class - AllowListPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllowListPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                allowList\n\n            \n\n            \n                Extends\n            \n            \n                            EmbeddedDisclosurePolicy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                policy\n                            \n                            \n                                    \n                                    \n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['allowList'])\n                        \n                    \n                \n                        \n                            \n                                Inherited from         EmbeddedDisclosurePolicy\n\n                            \n                        \n                    \n                        \n                                Defined in         EmbeddedDisclosurePolicy:31\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApiKeyConfig.html":{"url":"classes/ApiKeyConfig.html","title":"class - ApiKeyConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiKeyConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for API key authentication in webhooks.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                headerName\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        headerName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:19\n                        \n                    \n\n            \n                \n                    The name of the header where the API key will be sent.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:24\n                        \n                    \n\n            \n                \n                    The value of the API key to be sent in the header.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, ApiProperty, getSchemaPath } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsEnum,\n    IsIn,\n    IsObject,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport enum AuthConfig {\n    API_KEY = \"apiKey\",\n    NONE = \"none\",\n}\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfigHeader implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.API_KEY])\n    @IsString()\n    type: AuthConfig.API_KEY;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\nexport class WebHookAuthConfigNone implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.NONE])\n    @IsString()\n    type: AuthConfig.NONE;\n}\n\nexport class WebHookAuthConfig {\n    @IsEnum(AuthConfig)\n    type: AuthConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\n@ApiExtraModels(WebHookAuthConfigNone, WebHookAuthConfigHeader)\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(WebHookAuthConfigNone) },\n            { $ref: getSchemaPath(WebHookAuthConfigHeader) },\n        ],\n    })\n    @Type(() => WebHookAuthConfig, {\n        discriminator: {\n            property: \"type\",\n            subTypes: [\n                {\n                    name: AuthConfig.NONE,\n                    value: WebHookAuthConfigNone,\n                },\n                {\n                    name: AuthConfig.API_KEY,\n                    value: WebHookAuthConfigHeader,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    auth?: WebHookAuthConfigNone | WebHookAuthConfigHeader;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                main\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        main\n                        \n                    \n                \n            \n            \n                \n                        \n                    main()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app/app.controller.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport { ApiExcludeController } from \"@nestjs/swagger\";\n\n@ApiExcludeController()\n@Controller()\nexport class AppController {\n    @Get()\n    main(): string {\n        return 'EUDIPLO is up and running, more information at https://openwallet-foundation-labs.github.io/eudiplo/latest/';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\n\n\nMetricModule\n\nMetricModule\n\nAppModule -->\n\nMetricModule->AppModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\n\n\nStorageModule\n\nStorageModule\n\nAppModule -->\n\nStorageModule->AppModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\nConfigPrinterService\n\nConfigPrinterService\n\nAppModule -->\n\nConfigPrinterService->AppModule\n\n\n\n\n\nWellKnownService\n\nWellKnownService\n\nAppModule -->\n\nWellKnownService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConfigPrinterService\n                        \n                        \n                            WellKnownService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            WellKnownController\n                        \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CryptoModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            IssuerModule\n                        \n                        \n                            KeyModule\n                        \n                        \n                            MetricModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            StorageModule\n                        \n                        \n                            VerifierModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { MulterModule } from \"@nestjs/platform-express\";\nimport { ScheduleModule } from \"@nestjs/schedule\";\nimport { ServeStaticModule } from \"@nestjs/serve-static\";\nimport { memoryStorage } from \"multer\";\nimport { LoggerModule } from \"nestjs-pino\";\nimport { isAbsolute, join } from \"path\";\nimport { AppController } from \"./app/app.controller\";\nimport { AuthModule } from \"./auth/auth.module\";\nimport { CryptoModule } from \"./crypto/crypto.module\";\nimport { KeyModule } from \"./crypto/key/key.module\";\nimport { DatabaseModule } from \"./database/database.module\";\nimport { HealthModule } from \"./health/health.module\";\nimport { IssuerModule } from \"./issuer/issuer.module\";\nimport { MetricModule } from \"./metric/metric.module\";\nimport { RegistrarModule } from \"./registrar/registrar.module\";\nimport { SessionModule } from \"./session/session.module\";\nimport { StorageModule } from \"./storage/storage.module\";\nimport { VALIDATION_SCHEMA } from \"./utils/config-printer/combined.schema\";\nimport { ConfigPrinterService } from \"./utils/config-printer/config-printer.service\";\nimport { VerifierModule } from \"./verifier/verifier.module\";\nimport { WellKnownController } from \"./well-known/well-known.controller\";\nimport { WellKnownService } from \"./well-known/well-known.service\";\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            validationSchema: VALIDATION_SCHEMA,\n            isGlobal: true,\n            expandVariables: true,\n        }),\n        LoggerModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const enableHttpLogger = configService.get(\n                    \"LOG_ENABLE_HTTP_LOGGER\",\n                    false,\n                );\n                //TODO: check if logging to file is needed: https://github.com/iamolegga/nestjs-pino?tab=readme-ov-file#asynchronous-logging\n                return {\n                    pinoHttp: {\n                        level: configService.get(\"LOG_LEVEL\", \"info\"),\n                        autoLogging: enableHttpLogger,\n                        transport: {\n                            target: \"pino-pretty\",\n                            options: {\n                                colorize: true,\n                                singleLine: false,\n                                translateTime: \"yyyy-mm-dd HH:MM:ss\",\n                                ignore: \"pid,hostname\",\n                            },\n                        },\n                        customProps: (req: any) => ({\n                            sessionId: req.params?.session,\n                        }),\n                        serializers: {\n                            req: (req: any) => ({\n                                method: req.method,\n                                url: req.url,\n                                headers: {\n                                    \"user-agent\": req.headers[\"user-agent\"],\n                                    \"content-type\": req.headers[\"content-type\"],\n                                },\n                                sessionId: req.params?.session,\n                                tenantId: req.params?.tenantId,\n                            }),\n                            res: (res: any) => ({\n                                statusCode: res.statusCode,\n                            }),\n                        },\n                    },\n                };\n            },\n        }),\n        AuthModule,\n        KeyModule.forRoot(),\n        MulterModule.register({\n            storage: memoryStorage(),\n        }),\n        CryptoModule,\n        IssuerModule,\n        VerifierModule,\n        RegistrarModule,\n        ScheduleModule.forRoot(),\n        ServeStaticModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const folder = configService.getOrThrow(\"FOLDER\");\n                const rootPath = isAbsolute(folder)\n                    ? join(folder, \"public\")\n                    : join(__dirname, \"../\", folder, \"public\");\n                return [\n                    {\n                        rootPath,\n                    },\n                ];\n            },\n        }),\n        DatabaseModule,\n        SessionModule,\n        DatabaseModule,\n        HealthModule,\n        MetricModule,\n        StorageModule.forRoot(),\n    ],\n    controllers: [WellKnownController, AppController],\n    providers: [WellKnownService, ConfigPrinterService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AttestationBasedPolicy.html":{"url":"classes/AttestationBasedPolicy.html","title":"class - AttestationBasedPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AttestationBasedPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            EmbeddedDisclosurePolicy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                policy\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['attestationBased'])\n                        \n                    \n                \n                        \n                            \n                                Inherited from         EmbeddedDisclosurePolicy\n\n                            \n                        \n                    \n                        \n                                Defined in         EmbeddedDisclosurePolicy:80\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PolicyCredential[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:86\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Authentication Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                getGlobalJwks\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                getOAuth2Token\n                            \n                            \n                                    \n                                    \n                                    \n                                getOidcDiscovery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getGlobalJwks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGlobalJwks()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('.well-known/jwks.json')@ApiOperation({summary: 'JSON Web Key Set', description: 'Returns the JSON Web Key Set for token verification.'})@ApiResponse({status: 200, description: 'JSON Web Key Set'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:103\n                        \n                    \n\n\n            \n                \n                        Global JWKS endpoint for client credentials flow.\nThis provides the JSON Web Key Set for verifying tokens issued by this server.\n\n\n                        \n                            Returns :         KeyResponseDto\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        getOAuth2Token\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOAuth2Token(body: any, headers: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('oauth2/token')@ApiBody({type: ClientCredentialsDto, examples: undefined})@ApiResponse({status: 200, description: 'OAuth2 token response', type: TokenResponse, examples: undefined})@ApiResponse({status: 401, description: 'Invalid client credentials'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:64\n                        \n                    \n\n\n            \n                \n                        OAuth2 Token endpoint - supports client credentials flow only\nAccepts client credentials either in Authorization header (Basic auth) or request body\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                headers\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getOidcDiscovery\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOidcDiscovery()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('.well-known/oauth-authorization-server')@ApiOperation({summary: 'OIDC Discovery Configuration', description: 'Returns the OpenID Connect discovery configuration for client credentials authentication.'})@ApiResponse({status: 200, description: 'OIDC Discovery Configuration'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:86\n                        \n                    \n\n\n            \n                \n                        OIDC Discovery endpoint for client credentials flow.\nThis endpoint provides the OpenID Connect configuration for applications\nthat need to authenticate using client_id and client_secret.\n\n\n                        \n                            Returns :         OidcDiscoveryDto\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Headers, Post } from \"@nestjs/common\";\nimport {\n    ApiBody,\n    ApiExcludeController,\n    ApiOperation,\n    ApiResponse,\n    ApiTags,\n} from \"@nestjs/swagger\";\nimport { KeyResponseDto } from \"../crypto/key/dto/key-response.dto\";\nimport { AuthService } from \"./auth.service\";\nimport { ClientCredentialsDto } from \"./dto/client-credentials.dto\";\nimport { OidcDiscoveryDto } from \"./dto/oidc-discovery.dto\";\nimport { TokenResponse } from \"./dto/token-response.dto\";\n\n/**\n * Authentication Controller\n */\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@ApiTags(\"Authentication\")\n@Controller()\nexport class AuthController {\n    constructor(private authService: AuthService) {}\n\n    /**\n     * OAuth2 Token endpoint - supports client credentials flow only\n     * Accepts client credentials either in Authorization header (Basic auth) or request body\n     * @param body\n     * @param headers\n     * @returns\n     */\n    @Post(\"oauth2/token\")\n    @ApiBody({\n        type: ClientCredentialsDto,\n        examples: {\n            client_credentials: {\n                summary: \"Client Credentials Flow\",\n                value: {\n                    grant_type: \"client_credentials\",\n                    client_id: \"root\",\n                    client_secret: \"root\",\n                },\n            },\n        },\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"OAuth2 token response\",\n        type: TokenResponse,\n        examples: {\n            success: {\n                summary: \"Successful response\",\n                value: {\n                    access_token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n                    token_type: \"Bearer\",\n                    expires_in: 86400,\n                },\n            },\n        },\n    })\n    @ApiResponse({\n        status: 401,\n        description: \"Invalid client credentials\",\n    })\n    getOAuth2Token(\n        @Body() body: any,\n        @Headers() headers: any,\n    ): Promise {\n        return this.authService.getOAuth2Token(body, headers);\n    }\n\n    /**\n     * OIDC Discovery endpoint for client credentials flow.\n     * This endpoint provides the OpenID Connect configuration for applications\n     * that need to authenticate using client_id and client_secret.\n     */\n    @Get(\".well-known/oauth-authorization-server\")\n    @ApiOperation({\n        summary: \"OIDC Discovery Configuration\",\n        description:\n            \"Returns the OpenID Connect discovery configuration for client credentials authentication.\",\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"OIDC Discovery Configuration\",\n    })\n    getOidcDiscovery(): OidcDiscoveryDto {\n        return this.authService.getOidcDiscovery();\n    }\n\n    /**\n     * Global JWKS endpoint for client credentials flow.\n     * This provides the JSON Web Key Set for verifying tokens issued by this server.\n     */\n    @Get(\".well-known/jwks.json\")\n    @ApiOperation({\n        summary: \"JSON Web Key Set\",\n        description: \"Returns the JSON Web Key Set for token verification.\",\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"JSON Web Key Set\",\n    })\n    getGlobalJwks(): KeyResponseDto {\n        // For now, return an empty key set since the actual keys are tenant-specific\n        // This can be enhanced later to include global signing keys if needed\n        return {\n            keys: [],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCryptoModule->AuthModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nAuthModule -->\n\nIssuerModule->AuthModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nAuthModule -->\n\nRegistrarModule->AuthModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAuthModule -->\n\nSessionModule->AuthModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nAuthModule -->\n\nStatusListModule->AuthModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nJwtService \n\nJwtService \n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nTenantService\n\nTenantService\n\nAuthModule -->\n\nTenantService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            TenantService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            TenantController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            IssuerModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { makeGaugeProvider } from \"@willsoto/nestjs-prometheus\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { IssuerModule } from \"../issuer/issuer.module\";\nimport { StatusListModule } from \"../issuer/status-list/status-list.module\";\nimport { RegistrarModule } from \"../registrar/registrar.module\";\nimport { SessionModule } from \"../session/session.module\";\nimport { AuthController } from \"./auth.controller\";\nimport { JwtAuthGuard } from \"./auth.guard\";\nimport { AuthService } from \"./auth.service\";\nimport { TenantEntity } from \"./entitites/tenant.entity\";\nimport { JwtService } from \"./jwt.service\";\nimport { JwtStrategy } from \"./jwt.strategy\";\nimport { TenantController } from \"./tenant/tenant.controller\";\nimport { TenantService } from \"./tenant/tenant.service\";\n\nexport const DEFAULT_JWT_SECRET = \"supersecret\";\nexport const DEFAULT_AUTH_CLIENT_ID = \"root\";\nexport const DEFAULT_AUTH_CLIENT_SECRET = \"root\";\n\n@Module({\n    imports: [\n        PassportModule,\n        ConfigModule,\n        CryptoModule,\n        StatusListModule,\n        RegistrarModule,\n        SessionModule,\n        IssuerModule,\n        TypeOrmModule.forFeature([TenantEntity]),\n    ],\n    providers: [\n        JwtStrategy,\n        JwtAuthGuard,\n        JwtService,\n        TenantService,\n        makeGaugeProvider({\n            name: \"tenant_total\",\n            help: \"Total number of tenants\",\n        }),\n        AuthService,\n    ],\n    controllers: [AuthController, TenantController],\n    exports: [PassportModule, JwtStrategy, JwtAuthGuard, JwtService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthResponse.html":{"url":"interfaces/AuthResponse.html","title":"interface - AuthResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/auth-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                AuthResponse DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            state\n                                        \n                                \n                                \n                                        \n                                            vp_token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The state parameter to maintain state between the request and callback.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        vp_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        vp_token:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The VP token containing the presentation data.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AuthResponse {\n    /**\n     * The VP token containing the presentation data.\n     */\n    vp_token: {\n        /**\n         * Key-value pairs representing the VP token data.\n         */\n        [key: string]: string;\n    };\n    /**\n     * The state parameter to maintain state between the request and callback.\n     */\n    state: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Authentication Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getOAuth2Token\n                            \n                            \n                                getOidcDiscovery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, tenantService: TenantService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor for AuthService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                        JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tenantService\n                                                  \n                                                        \n                                                                        TenantService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOAuth2Token\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOAuth2Token(body: any, headers: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:32\n                        \n                    \n\n\n            \n                \n                        Get OAuth2 token\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                headers\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOidcDiscovery\n                        \n                    \n                \n            \n            \n                \ngetOidcDiscovery()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:115\n                        \n                    \n\n\n            \n                \n                        Get OIDC Discovery configuration\n\n\n                        \n                            Returns :         OidcDiscoveryDto\n\n                        \n                            \n                                OIDC Discovery configuration\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { OidcDiscoveryDto } from \"./dto/oidc-discovery.dto\";\nimport { TokenResponse } from \"./dto/token-response.dto\";\nimport { JwtService } from \"./jwt.service\";\nimport { TenantService } from \"./tenant/tenant.service\";\nimport { TokenPayload } from \"./token.decorator\";\n\n/**\n * Authentication Service\n */\n@Injectable()\nexport class AuthService {\n    /**\n     * Constructor for AuthService\n     * @param jwtService\n     * @param tenantService\n     * @param configService\n     */\n    constructor(\n        private jwtService: JwtService,\n        private tenantService: TenantService,\n        private configService: ConfigService,\n    ) {}\n\n    /**\n     * Get OAuth2 token\n     * @param body\n     * @param headers\n     * @returns\n     */\n    async getOAuth2Token(body: any, headers: any): Promise {\n        if (this.jwtService.isUsingExternalOIDC()) {\n            throw new UnauthorizedException(\n                \"OAuth2 token endpoint is not available when using external OIDC provider. Use your external OIDC provider for authentication.\",\n            );\n        }\n\n        // Only support client credentials flow\n        if (body.grant_type !== \"client_credentials\") {\n            throw new UnauthorizedException(\n                \"Only client_credentials grant type is supported\",\n            );\n        }\n\n        let clientId: string;\n        let clientSecret: string;\n\n        // Try to extract credentials from Authorization header (Basic auth)\n        const authHeader = headers.authorization;\n        if (authHeader && authHeader.startsWith(\"Basic \")) {\n            try {\n                const base64Credentials = authHeader.substring(6);\n                const credentials = Buffer.from(\n                    base64Credentials,\n                    \"base64\",\n                ).toString(\"ascii\");\n                const [id, secret] = credentials.split(\":\");\n                clientId = id;\n                clientSecret = secret;\n            } catch {\n                throw new UnauthorizedException(\n                    \"Invalid Authorization header format\",\n                );\n            }\n        } else {\n            // Fall back to request body\n            clientId = body.client_id;\n            clientSecret = body.client_secret;\n        }\n\n        if (!clientId || !clientSecret) {\n            throw new UnauthorizedException(\n                \"Client credentials must be provided either in Authorization header (Basic auth) or request body\",\n            );\n        }\n\n        const client = this.tenantService.validateTenant(\n            clientId,\n            clientSecret,\n        );\n        if (!client) {\n            throw new UnauthorizedException(\"Invalid client credentials\");\n        }\n\n        //TODO: check if the access token should only include the session id or also e.g. the credentials that should be issued. I would think this is not required since we still need the claims for it.\n        const payload: TokenPayload = {\n            sub: client.id,\n            admin: true,\n        };\n\n        //TODO: make expiresIn configurable?\n        const access_token = await this.jwtService.generateToken(payload, {\n            expiresIn: \"24h\",\n            audience: \"eudiplo-service\",\n        });\n\n        const refresh_token = await this.jwtService.generateToken(payload, {\n            expiresIn: \"30d\",\n            audience: \"eudiplo-service\",\n        });\n\n        return {\n            access_token,\n            refresh_token,\n            token_type: \"Bearer\",\n            expires_in: 86400, // 24 hours in seconds\n        };\n    }\n\n    /**\n     * Get OIDC Discovery configuration\n     * @returns OIDC Discovery configuration\n     */\n    getOidcDiscovery(): OidcDiscoveryDto {\n        const publicUrl = this.configService.getOrThrow(\"PUBLIC_URL\");\n\n        return {\n            issuer: publicUrl,\n            token_endpoint: `${publicUrl}/oauth2/token`,\n            jwks_uri: `${publicUrl}/.well-known/jwks.json`,\n            response_types_supported: [\"token\"],\n            grant_types_supported: [\"client_credentials\"],\n            token_endpoint_auth_methods_supported: [\n                \"client_secret_basic\",\n                \"client_secret_post\",\n            ],\n            subject_types_supported: [\"public\"],\n            id_token_signing_alg_values_supported: [\"ES256\"],\n            scopes_supported: [\"openid\"],\n            claims_supported: [\"iss\", \"sub\", \"aud\", \"exp\", \"iat\"],\n            service_documentation:\n                \"https://openwallet-foundation-labs.github.io/eudiplo/latest/\",\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationMethodAuth.html":{"url":"classes/AuthenticationMethodAuth.html","title":"class - AuthenticationMethodAuth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationMethodAuth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            AuthenticationMethodInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                    \n                                method\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthenticationUrlConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['auth'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:59\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthenticationMethodInterface.html":{"url":"interfaces/AuthenticationMethodInterface.html","title":"interface - AuthenticationMethodInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthenticationMethodInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            method\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:     \"none\" | \"auth\" | \"presentationDuringIssuance\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"none\" | \"auth\" | \"presentationDuringIssuance\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationMethodNone.html":{"url":"classes/AuthenticationMethodNone.html","title":"class - AuthenticationMethodNone","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationMethodNone\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            AuthenticationMethodInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                method\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['none'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:69\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationMethodPresentation.html":{"url":"classes/AuthenticationMethodPresentation.html","title":"class - AuthenticationMethodPresentation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationMethodPresentation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            AuthenticationMethodInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                    \n                                method\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PresentationDuringIssuanceConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['presentationDuringIssuance'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:49\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationUrlConfig.html":{"url":"classes/AuthenticationUrlConfig.html","title":"class - AuthenticationUrlConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationUrlConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for authentication method 'auth'\nUsed for OID4VCI authorized code flow where the user will be redirected for authentication\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                url\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:21\n                        \n                    \n\n            \n                \n                    The URL used in the OID4VCI authorized code flow.\nThis URL is where users will be redirected for authentication.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:29\n                        \n                    \n\n            \n                \n                    Optional webhook configuration for authentication callbacks\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizationResponse.html":{"url":"classes/AuthorizationResponse.html","title":"class - AuthorizationResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizationResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/authorization-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the authorization response containing the VP token.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                response\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/authorization-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The response string containing the authorization details.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from \"class-validator\";\n\n/**\n * DTO for the authorization response containing the VP token.\n */\nexport class AuthorizationResponse {\n    /**\n     * The response string containing the authorization details.\n     */\n    @IsString()\n    response: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthorizeController.html":{"url":"controllers/AuthorizeController.html","title":"controller - AuthorizeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthorizeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/authorize\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI authorization endpoints.\nThis controller handles the authorization requests, token requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authorizationChallengeEndpoint\n                            \n                            \n                                    \n                                authorize\n                            \n                            \n                                    \n                                    \n                                    Async\n                                par\n                            \n                            \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(res: Response, body: AuthorizeQueries, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('challenge')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:81\n                        \n                    \n\n\n            \n                \n                        Endpoint for the authorization challenge.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorize\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorize(queries: AuthorizeQueries, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:30\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Authorization Request.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        par\n                        \n                    \n                \n            \n            \n                \n                        \n                    par(body: AuthorizeQueries)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({description: 'Pushed Authorization Request', type: AuthorizeQueries})@Post('par')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:44\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Pushed Authorization Request (PAR).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token\n                        \n                    \n                \n            \n            \n                \n                        \n                    token(body: any, req: Request, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('token')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:65\n                        \n                    \n\n\n            \n                \n                        Endpoint to validate the token request.\nThis endpoint is used to exchange the authorization code for an access token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { Body, Controller, Get, Post, Query, Req, Res } from \"@nestjs/common\";\nimport { ApiBody, ApiExcludeController } from \"@nestjs/swagger\";\nimport type { Request, Response } from \"express\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionEntity } from \"../../session/session.decorator\";\nimport { SessionService } from \"../../session/session.service\";\nimport { AuthorizeService } from \"./authorize.service\";\nimport { AuthorizeQueries } from \"./dto/authorize-request.dto\";\nimport { ParResponseDto } from \"./dto/par-response.dto\";\n\n/**\n * Controller for the OpenID4VCI authorization endpoints.\n * This controller handles the authorization requests, token requests.\n */\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@Controller(\":session/authorize\")\nexport class AuthorizeController {\n    constructor(\n        private readonly authorizeService: AuthorizeService,\n        private sessionService: SessionService,\n    ) {}\n\n    /**\n     * Endpoint to handle the Authorization Request.\n     * @param queries\n     * @param res\n     */\n    @Get()\n    authorize(@Query() queries: AuthorizeQueries, @Res() res: Response) {\n        return this.authorizeService.sendAuthorizationResponse(queries, res);\n    }\n\n    /**\n     * Endpoint to handle the Pushed Authorization Request (PAR).\n     * @param body\n     * @returns\n     */\n    @ApiBody({\n        description: \"Pushed Authorization Request\",\n        type: AuthorizeQueries,\n    })\n    @Post(\"par\")\n    async par(@Body() body: AuthorizeQueries): Promise {\n        const request_uri = `urn:${randomUUID()}`;\n        // save both so we can retrieve the session also via the request_uri in the authorize step.\n        await this.sessionService.add(body.issuer_state!, {\n            request_uri,\n            auth_queries: body,\n        });\n        return {\n            expires_in: 500,\n            request_uri,\n        };\n    }\n\n    /**\n     * Endpoint to validate the token request.\n     * This endpoint is used to exchange the authorization code for an access token.\n     * @param body\n     * @param req\n     * @returns\n     */\n    @Post(\"token\")\n    token(\n        @Body() body: any,\n        @Req() req: Request,\n        @SessionEntity() session: Session,\n    ): Promise {\n        //TODO: define body\n        return this.authorizeService.validateTokenRequest(body, req, session);\n    }\n\n    /**\n     * Endpoint for the authorization challenge.\n     * @param res\n     * @param body\n     * @returns\n     */\n    @Post(\"challenge\")\n    authorizationChallengeEndpoint(\n        @Res() res: Response,\n        @Body() body: AuthorizeQueries,\n        @SessionEntity() session: Session,\n    ) {\n        return this.authorizeService.authorizationChallengeEndpoint(\n            res,\n            body,\n            session,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizeQueries.html":{"url":"classes/AuthorizeQueries.html","title":"class - AuthorizeQueries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizeQueries\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/authorize-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                auth_session\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                client_id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge_method\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                dpop_jkt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                issuer_state\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                redirect_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                resource\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                scope\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        auth_session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge_method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        dpop_jkt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        issuer_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        redirect_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\";\n\nexport class AuthorizeQueries {\n    @IsOptional()\n    @IsString()\n    issuer_state?: string;\n    @IsOptional()\n    @IsString()\n    response_type?: string;\n    @IsOptional()\n    @IsString()\n    client_id?: string;\n    @IsOptional()\n    @IsString()\n    redirect_uri?: string;\n    @IsOptional()\n    @IsString()\n    resource?: string;\n    @IsOptional()\n    @IsString()\n    scope?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge_method?: string;\n    @IsOptional()\n    @IsString()\n    dpop_jkt?: string;\n    @IsOptional()\n    @IsString()\n    request_uri?: string;\n    @IsOptional()\n    @IsString()\n    auth_session?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthorizeService.html":{"url":"injectables/AuthorizeService.html","title":"injectable - AuthorizeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthorizeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authorizationChallengeEndpoint\n                            \n                            \n                                authzMetadata\n                            \n                            \n                                getAuthorizationServer\n                            \n                            \n                                    Async\n                                parseChallengeRequest\n                            \n                            \n                                    Private\n                                    Async\n                                sendAuthorizationCode\n                            \n                            \n                                    Async\n                                sendAuthorizationResponse\n                            \n                            \n                                    Async\n                                setAuthCode\n                            \n                            \n                                    Async\n                                validateTokenRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, oid4vpService: Oid4vpService, sessionService: SessionService, issuanceService: IssuanceService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/authorize/authorize.service.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oid4vpService\n                                                  \n                                                        \n                                                                        Oid4vpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        issuanceService\n                                                  \n                                                        \n                                                                        IssuanceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(res: Response>, body: AuthorizeQueries, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:224\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \nauthzMetadata(session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     AuthorizationServerMetadata\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAuthorizationServer\n                        \n                    \n                \n            \n            \n                \ngetAuthorizationServer(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Oauth2AuthorizationServer\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        parseChallengeRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseChallengeRequest(body: AuthorizeQueries, tenantId: string, webhook?: WebhookConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:206\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                webhook\n                                            \n                                                            WebhookConfig\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        sendAuthorizationCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationCode(res: Response, issuer_state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:296\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendAuthorizationResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationResponse(queries: AuthorizeQueries, res: Response>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setAuthCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAuthCode(issuer_state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:303\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateTokenRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateTokenRequest(body: any, req: Request, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    authorizationCodeGrantIdentifier,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from \"@openid4vc/oauth2\";\nimport type { Request, Response } from \"express\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { WebhookConfig } from \"../../utils/webhook/webhook.dto\";\nimport { Oid4vpService } from \"../../verifier/oid4vp/oid4vp.service\";\nimport { IssuanceService } from \"../issuance/issuance.service\";\nimport { getHeadersFromRequest } from \"../oid4vci/util\";\nimport { AuthorizeQueries } from \"./dto/authorize-request.dto\";\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(session: Session): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow(\"PUBLIC_URL\") +\n            `/${session.id}`;\n        return this.getAuthorizationServer(\n            session.tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: [\"ES256\"],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        \"request_uri not found or not provided in the request\",\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                \"request_uri not found or not provided in the request\",\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        session: Session,\n    ): Promise {\n        const url = `${this.configService.getOrThrow(\"PUBLIC_URL\")}${req.url}`;\n        const tenantId = session.tenantId;\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                session.issuanceId!,\n                session.tenantId,\n            );\n\n        const authorizationServerMetadata = this.authzMetadata(session);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n        //const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.id}`,\n            signer: {\n                method: \"jwk\",\n                alg: \"ES256\",\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    \"jwk\",\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            /* cNonce,\n            cNonceExpiresIn: 100, */\n            clientId: \"wallet\", // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest(\"pid\", { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: \"insufficient_authorization\",\n            auth_session,\n            presentation,\n            error_description:\n                \"Presentation of credential required before issuance\",\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        session: Session,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            /* const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n */\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(res, body.auth_session);\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    \"Session does not have valid credentials for issuance\",\n                );\n            }\n        }\n\n        /* const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        } */\n        const issuanceId = session.issuanceId!;\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                issuanceId,\n                session.tenantId,\n            );\n\n        // Use the new authentication configuration structure\n        const authConfig = issuanceConfig.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                \"No authentication configuration found for issuance config\",\n            );\n        }\n\n        switch (authConfig.method) {\n            case \"presentationDuringIssuance\": {\n                // OID4VP flow - credential presentation required\n                const webhook = issuanceConfig.claimsWebhook;\n                const response = await this.parseChallengeRequest(\n                    body,\n                    session.tenantId,\n                    webhook,\n                );\n                res.status(400).send(response);\n                break;\n            }\n            case \"auth\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            case \"none\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            default:\n                throw new Error(\n                    `Unsupported authentication method: ${(authConfig as any).method}`,\n                );\n        }\n    }\n\n    private async sendAuthorizationCode(res: Response, issuer_state: string) {\n        const authorization_code = await this.setAuthCode(issuer_state);\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CertEntity.html":{"url":"entities/CertEntity.html","title":"entity - CertEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CertEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/entities/cert.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity to manage certificates for keys.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                crt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:57\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        crt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:39\n                        \n                    \n\n            \n                \n                    Certificate in PEM format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:51\n                        \n                    \n\n            \n                \n                    Description of the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:21\n                        \n                    \n\n            \n                \n                    Unique identifier for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:33\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:27\n                        \n                    \n\n            \n                \n                    Tenant ID for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CertificateType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {default: 'signing', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:45\n                        \n                    \n\n            \n                \n                    Type of the certificate (access or signing).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:63\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was last updated.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\n\nexport type CertificateType = \"access\" | \"signing\";\n\n/**\n * Entity to manage certificates for keys.\n */\n@Entity()\nexport class CertEntity {\n    /**\n     * Unique identifier for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    id: string;\n\n    /**\n     * Tenant ID for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Certificate in PEM format.\n     */\n    @Column(\"varchar\")\n    crt: string;\n\n    /**\n     * Type of the certificate (access or signing).\n     */\n    @Column(\"varchar\", { default: \"signing\", primary: true })\n    type: CertificateType;\n\n    /**\n     * Description of the key.\n     */\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClaimsQuery.html":{"url":"classes/ClaimsQuery.html","title":"class - ClaimsQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClaimsQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                path\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:84\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsOptional()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities?: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClientCredentialsDto.html":{"url":"classes/ClientCredentialsDto.html","title":"class - ClientCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClientCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/client-credentials.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                client_id\n                            \n                            \n                                    \n                                client_secret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_secret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from \"class-validator\";\n\nexport class ClientCredentialsDto {\n    @IsString()\n    client_id: string;\n    @IsString()\n    client_secret: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClientInitDto.html":{"url":"classes/ClientInitDto.html","title":"class - ClientInitDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClientInitDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/client-init.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-init.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\";\n\nexport class ClientInitDto {\n    @IsString()\n    @IsOptional()\n    id?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ConfigGroup.html":{"url":"interfaces/ConfigGroup.html","title":"interface - ConfigGroup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ConfigGroup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/config-printer/config-printer.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            items\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            order\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        items:         ConfigItem[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ConfigItem[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        order\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        order:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { promises as fs } from \"node:fs\";\nimport * as path from \"node:path\";\nimport { Injectable, Logger, OnModuleInit } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { VALIDATION_SCHEMA } from \"./combined.schema\";\nimport { extractConditionsFromKeyDesc, flattenMetas } from \"./helpers\";\n\ntype Presence = \"required\" | \"optional\" | \"\";\n\nexport interface ConfigItem {\n    key: string;\n    value: unknown;\n    shown: string;\n    group: string;\n    order: number;\n    description: string;\n    presence: Presence;\n    usedDefault: boolean;\n    secret: boolean;\n    conditions: string[];\n    meta: Record;\n}\n\nexport interface ConfigGroup {\n    name: string;\n    order: number;\n    items: ConfigItem[];\n}\n\nexport interface ConfigModel {\n    createdAt: string;\n    groups: ConfigGroup[];\n    all: ConfigItem[];\n}\n\n@Injectable()\nexport class ConfigPrinterService implements OnModuleInit {\n    constructor(private readonly cfg: ConfigService) {}\n\n    /** Build a reusable model of your config (values + meta + conditions). */\n    public buildModel(): ConfigModel {\n        const described = VALIDATION_SCHEMA.describe() as any;\n        const descKeys: Record = described.keys ?? {};\n        const allKeys = Object.keys(descKeys);\n        const showAdvanced = this.cfg.get(\"CONFIG_PRINT_ADVANCED\") === \"true\";\n\n        const items: ConfigItem[] = [];\n        for (const key of allKeys) {\n            const keyDesc = descKeys[key] ?? {};\n            const flags = keyDesc.flags ?? {};\n            const meta = flattenMetas(keyDesc);\n\n            const group = meta.group ?? \"Other\";\n            const order = Number.isFinite(meta.order)\n                ? Number(meta.order)\n                : 999;\n            const advanced = meta.advanced === true;\n            const secret = meta.secret === true;\n            if (advanced && !showAdvanced) continue;\n\n            const description =\n                flags.description ||\n                (Array.isArray(keyDesc.notes) ? keyDesc.notes.join(\" \") : \"\") ||\n                \"\";\n\n            const presence: Presence =\n                flags.presence === \"required\"\n                    ? \"required\"\n                    : flags.presence === \"optional\"\n                      ? \"optional\"\n                      : \"\";\n\n            const value = this.cfg.get(key);\n            const shown =\n                value === undefined\n                    ? \"(unset)\"\n                    : secret\n                      ? \"***\"\n                      : typeof value === \"string\"\n                        ? value\n                        : JSON.stringify(value);\n\n            const usedDefault =\n                !(key in process.env) && Object.hasOwn.call(flags, \"default\");\n\n            const conditions = extractConditionsFromKeyDesc(keyDesc);\n\n            items.push({\n                key,\n                value,\n                shown,\n                group,\n                order,\n                description,\n                presence,\n                usedDefault,\n                secret,\n                conditions,\n                meta,\n            });\n        }\n\n        // Group and sort\n        const groupsMap = new Map();\n        for (const i of items) {\n            const arr = groupsMap.get(i.group) ?? [];\n            arr.push(i);\n            groupsMap.set(i.group, arr);\n        }\n\n        const groups: ConfigGroup[] = Array.from(groupsMap.entries())\n            .map(([name, arr]) => {\n                arr.sort(\n                    (a, b) => a.order - b.order || a.key.localeCompare(b.key),\n                );\n                const order = arr.reduce((m, r) => Math.min(m, r.order), 999);\n                return { name, order, items: arr };\n            })\n            .sort((a, b) => a.order - b.order || a.name.localeCompare(b.name));\n\n        return {\n            createdAt: new Date().toISOString(),\n            groups,\n            all: items,\n        };\n    }\n\n    /* ---------- renderers ---------- */\n\n    private itemNotes(i: ConfigItem): string {\n        const presence = i.presence ? ` [${i.presence}]` : \"\";\n        const defTag = i.usedDefault ? \" (default)\" : \"\";\n        const conds = i.conditions.map((c) => `[${c}]`).join(\" \");\n        const extra = [\n            i.meta?.deprecated ? `(deprecated: ${i.meta.deprecated})` : \"\",\n            i.meta?.restartRequired ? \"(restart required)\" : \"\",\n            i.meta?.docUrl ? `(docs: ${i.meta.docUrl})` : \"\",\n            i.meta?.example ? `(e.g. ${i.meta.example})` : \"\",\n        ]\n            .filter(Boolean)\n            .join(\" \");\n\n        return [i.description, presence, defTag, conds, extra]\n            .filter(Boolean)\n            .join(\" \")\n            .trim();\n    }\n\n    private renderText(model: ConfigModel): string {\n        const out: string[] = [];\n        for (const g of model.groups) {\n            out.push(`\\n=== ${g.name} ===`);\n            for (const i of g.items) {\n                out.push(\n                    `${i.key.padEnd(28)} = ${String(i.shown).padEnd(24)}  # ${this.itemNotes(i)}`,\n                );\n            }\n        }\n        return `\\n${out.join(\"\\n\")}\\n`;\n    }\n\n    private renderMarkdown(model: ConfigModel): string {\n        const out: string[] = [\n            ``,\n            `# Configuration`,\n            `This file gets auto-generated by the application. Do not edit it manually.`,\n        ];\n        for (const g of model.groups) {\n            out.push(`\\n## ${g.name}\\n`);\n            out.push(`| Key | Value | Notes |`);\n            out.push(`| --- | ----- | ----- |`);\n            for (const i of g.items) {\n                const notes = this.itemNotes(i).replace(/\\|/g, \"\\\\|\");\n                const shown = String(i.shown).replace(/\\|/g, \"\\\\|\");\n                out.push(`| \\`${i.key}\\` | \\`${shown}\\` | ${notes} |`);\n            }\n        }\n        return out.join(\"\\n\");\n    }\n\n    private renderJson(model: ConfigModel): string {\n        return JSON.stringify(model, null, 2);\n    }\n\n    private render(model: ConfigModel, format: string): string {\n        switch (format) {\n            case \"markdown\":\n            case \"md\":\n                return this.renderMarkdown(model);\n            case \"json\":\n                return this.renderJson(model);\n            case \"text\":\n            default:\n                return this.renderText(model);\n        }\n    }\n\n    private async writeFileSafely(\n        filePath: string,\n        content: string,\n    ): Promise {\n        const dir = path.dirname(filePath);\n        await fs.mkdir(dir, { recursive: true });\n        await fs.writeFile(filePath, content, \"utf8\");\n    }\n\n    /* ---------- lifecycle ---------- */\n\n    async onModuleInit(): Promise {\n        // Only print in non-prod by default (override with CONFIG_PRINT_IN_PROD=true)\n        const inProd = this.cfg.get(\"NODE_ENV\") === \"production\";\n        if (inProd && this.cfg.get(\"CONFIG_PRINT_IN_PROD\") !== \"true\") return;\n\n        const model = this.buildModel();\n        const format = String(\n            this.cfg.get(\"CONFIG_PRINT_FORMAT\") || \"text\",\n        ).toLowerCase();\n        const out = this.render(model, format);\n        if (process.env.DOC_GENERATE) {\n            const out = this.render(model, \"markdown\");\n            const file = this.cfg.get(\"CONFIG_PRINT_FILE\");\n            await this.writeFileSafely(String(file), out);\n            Logger.log(`Wrote config to ${file}`, \"Config\");\n        } else {\n            Logger.log(out, \"Config\");\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ConfigItem.html":{"url":"interfaces/ConfigItem.html","title":"interface - ConfigItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ConfigItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/config-printer/config-printer.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            conditions\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            group\n                                        \n                                \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                                \n                                        \n                                            order\n                                        \n                                \n                                \n                                        \n                                            presence\n                                        \n                                \n                                \n                                        \n                                            secret\n                                        \n                                \n                                \n                                        \n                                            shown\n                                        \n                                \n                                \n                                        \n                                            usedDefault\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        conditions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        conditions:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        group\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        group:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        order\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        order:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        presence\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        presence:         Presence\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Presence\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secret:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shown\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        shown:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        usedDefault\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        usedDefault:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { promises as fs } from \"node:fs\";\nimport * as path from \"node:path\";\nimport { Injectable, Logger, OnModuleInit } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { VALIDATION_SCHEMA } from \"./combined.schema\";\nimport { extractConditionsFromKeyDesc, flattenMetas } from \"./helpers\";\n\ntype Presence = \"required\" | \"optional\" | \"\";\n\nexport interface ConfigItem {\n    key: string;\n    value: unknown;\n    shown: string;\n    group: string;\n    order: number;\n    description: string;\n    presence: Presence;\n    usedDefault: boolean;\n    secret: boolean;\n    conditions: string[];\n    meta: Record;\n}\n\nexport interface ConfigGroup {\n    name: string;\n    order: number;\n    items: ConfigItem[];\n}\n\nexport interface ConfigModel {\n    createdAt: string;\n    groups: ConfigGroup[];\n    all: ConfigItem[];\n}\n\n@Injectable()\nexport class ConfigPrinterService implements OnModuleInit {\n    constructor(private readonly cfg: ConfigService) {}\n\n    /** Build a reusable model of your config (values + meta + conditions). */\n    public buildModel(): ConfigModel {\n        const described = VALIDATION_SCHEMA.describe() as any;\n        const descKeys: Record = described.keys ?? {};\n        const allKeys = Object.keys(descKeys);\n        const showAdvanced = this.cfg.get(\"CONFIG_PRINT_ADVANCED\") === \"true\";\n\n        const items: ConfigItem[] = [];\n        for (const key of allKeys) {\n            const keyDesc = descKeys[key] ?? {};\n            const flags = keyDesc.flags ?? {};\n            const meta = flattenMetas(keyDesc);\n\n            const group = meta.group ?? \"Other\";\n            const order = Number.isFinite(meta.order)\n                ? Number(meta.order)\n                : 999;\n            const advanced = meta.advanced === true;\n            const secret = meta.secret === true;\n            if (advanced && !showAdvanced) continue;\n\n            const description =\n                flags.description ||\n                (Array.isArray(keyDesc.notes) ? keyDesc.notes.join(\" \") : \"\") ||\n                \"\";\n\n            const presence: Presence =\n                flags.presence === \"required\"\n                    ? \"required\"\n                    : flags.presence === \"optional\"\n                      ? \"optional\"\n                      : \"\";\n\n            const value = this.cfg.get(key);\n            const shown =\n                value === undefined\n                    ? \"(unset)\"\n                    : secret\n                      ? \"***\"\n                      : typeof value === \"string\"\n                        ? value\n                        : JSON.stringify(value);\n\n            const usedDefault =\n                !(key in process.env) && Object.hasOwn.call(flags, \"default\");\n\n            const conditions = extractConditionsFromKeyDesc(keyDesc);\n\n            items.push({\n                key,\n                value,\n                shown,\n                group,\n                order,\n                description,\n                presence,\n                usedDefault,\n                secret,\n                conditions,\n                meta,\n            });\n        }\n\n        // Group and sort\n        const groupsMap = new Map();\n        for (const i of items) {\n            const arr = groupsMap.get(i.group) ?? [];\n            arr.push(i);\n            groupsMap.set(i.group, arr);\n        }\n\n        const groups: ConfigGroup[] = Array.from(groupsMap.entries())\n            .map(([name, arr]) => {\n                arr.sort(\n                    (a, b) => a.order - b.order || a.key.localeCompare(b.key),\n                );\n                const order = arr.reduce((m, r) => Math.min(m, r.order), 999);\n                return { name, order, items: arr };\n            })\n            .sort((a, b) => a.order - b.order || a.name.localeCompare(b.name));\n\n        return {\n            createdAt: new Date().toISOString(),\n            groups,\n            all: items,\n        };\n    }\n\n    /* ---------- renderers ---------- */\n\n    private itemNotes(i: ConfigItem): string {\n        const presence = i.presence ? ` [${i.presence}]` : \"\";\n        const defTag = i.usedDefault ? \" (default)\" : \"\";\n        const conds = i.conditions.map((c) => `[${c}]`).join(\" \");\n        const extra = [\n            i.meta?.deprecated ? `(deprecated: ${i.meta.deprecated})` : \"\",\n            i.meta?.restartRequired ? \"(restart required)\" : \"\",\n            i.meta?.docUrl ? `(docs: ${i.meta.docUrl})` : \"\",\n            i.meta?.example ? `(e.g. ${i.meta.example})` : \"\",\n        ]\n            .filter(Boolean)\n            .join(\" \");\n\n        return [i.description, presence, defTag, conds, extra]\n            .filter(Boolean)\n            .join(\" \")\n            .trim();\n    }\n\n    private renderText(model: ConfigModel): string {\n        const out: string[] = [];\n        for (const g of model.groups) {\n            out.push(`\\n=== ${g.name} ===`);\n            for (const i of g.items) {\n                out.push(\n                    `${i.key.padEnd(28)} = ${String(i.shown).padEnd(24)}  # ${this.itemNotes(i)}`,\n                );\n            }\n        }\n        return `\\n${out.join(\"\\n\")}\\n`;\n    }\n\n    private renderMarkdown(model: ConfigModel): string {\n        const out: string[] = [\n            ``,\n            `# Configuration`,\n            `This file gets auto-generated by the application. Do not edit it manually.`,\n        ];\n        for (const g of model.groups) {\n            out.push(`\\n## ${g.name}\\n`);\n            out.push(`| Key | Value | Notes |`);\n            out.push(`| --- | ----- | ----- |`);\n            for (const i of g.items) {\n                const notes = this.itemNotes(i).replace(/\\|/g, \"\\\\|\");\n                const shown = String(i.shown).replace(/\\|/g, \"\\\\|\");\n                out.push(`| \\`${i.key}\\` | \\`${shown}\\` | ${notes} |`);\n            }\n        }\n        return out.join(\"\\n\");\n    }\n\n    private renderJson(model: ConfigModel): string {\n        return JSON.stringify(model, null, 2);\n    }\n\n    private render(model: ConfigModel, format: string): string {\n        switch (format) {\n            case \"markdown\":\n            case \"md\":\n                return this.renderMarkdown(model);\n            case \"json\":\n                return this.renderJson(model);\n            case \"text\":\n            default:\n                return this.renderText(model);\n        }\n    }\n\n    private async writeFileSafely(\n        filePath: string,\n        content: string,\n    ): Promise {\n        const dir = path.dirname(filePath);\n        await fs.mkdir(dir, { recursive: true });\n        await fs.writeFile(filePath, content, \"utf8\");\n    }\n\n    /* ---------- lifecycle ---------- */\n\n    async onModuleInit(): Promise {\n        // Only print in non-prod by default (override with CONFIG_PRINT_IN_PROD=true)\n        const inProd = this.cfg.get(\"NODE_ENV\") === \"production\";\n        if (inProd && this.cfg.get(\"CONFIG_PRINT_IN_PROD\") !== \"true\") return;\n\n        const model = this.buildModel();\n        const format = String(\n            this.cfg.get(\"CONFIG_PRINT_FORMAT\") || \"text\",\n        ).toLowerCase();\n        const out = this.render(model, format);\n        if (process.env.DOC_GENERATE) {\n            const out = this.render(model, \"markdown\");\n            const file = this.cfg.get(\"CONFIG_PRINT_FILE\");\n            await this.writeFileSafely(String(file), out);\n            Logger.log(`Wrote config to ${file}`, \"Config\");\n        } else {\n            Logger.log(out, \"Config\");\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ConfigModel.html":{"url":"interfaces/ConfigModel.html","title":"interface - ConfigModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ConfigModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/config-printer/config-printer.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            all\n                                        \n                                \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            groups\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        all\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        all:         ConfigItem[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ConfigItem[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        groups\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        groups:         ConfigGroup[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ConfigGroup[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { promises as fs } from \"node:fs\";\nimport * as path from \"node:path\";\nimport { Injectable, Logger, OnModuleInit } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { VALIDATION_SCHEMA } from \"./combined.schema\";\nimport { extractConditionsFromKeyDesc, flattenMetas } from \"./helpers\";\n\ntype Presence = \"required\" | \"optional\" | \"\";\n\nexport interface ConfigItem {\n    key: string;\n    value: unknown;\n    shown: string;\n    group: string;\n    order: number;\n    description: string;\n    presence: Presence;\n    usedDefault: boolean;\n    secret: boolean;\n    conditions: string[];\n    meta: Record;\n}\n\nexport interface ConfigGroup {\n    name: string;\n    order: number;\n    items: ConfigItem[];\n}\n\nexport interface ConfigModel {\n    createdAt: string;\n    groups: ConfigGroup[];\n    all: ConfigItem[];\n}\n\n@Injectable()\nexport class ConfigPrinterService implements OnModuleInit {\n    constructor(private readonly cfg: ConfigService) {}\n\n    /** Build a reusable model of your config (values + meta + conditions). */\n    public buildModel(): ConfigModel {\n        const described = VALIDATION_SCHEMA.describe() as any;\n        const descKeys: Record = described.keys ?? {};\n        const allKeys = Object.keys(descKeys);\n        const showAdvanced = this.cfg.get(\"CONFIG_PRINT_ADVANCED\") === \"true\";\n\n        const items: ConfigItem[] = [];\n        for (const key of allKeys) {\n            const keyDesc = descKeys[key] ?? {};\n            const flags = keyDesc.flags ?? {};\n            const meta = flattenMetas(keyDesc);\n\n            const group = meta.group ?? \"Other\";\n            const order = Number.isFinite(meta.order)\n                ? Number(meta.order)\n                : 999;\n            const advanced = meta.advanced === true;\n            const secret = meta.secret === true;\n            if (advanced && !showAdvanced) continue;\n\n            const description =\n                flags.description ||\n                (Array.isArray(keyDesc.notes) ? keyDesc.notes.join(\" \") : \"\") ||\n                \"\";\n\n            const presence: Presence =\n                flags.presence === \"required\"\n                    ? \"required\"\n                    : flags.presence === \"optional\"\n                      ? \"optional\"\n                      : \"\";\n\n            const value = this.cfg.get(key);\n            const shown =\n                value === undefined\n                    ? \"(unset)\"\n                    : secret\n                      ? \"***\"\n                      : typeof value === \"string\"\n                        ? value\n                        : JSON.stringify(value);\n\n            const usedDefault =\n                !(key in process.env) && Object.hasOwn.call(flags, \"default\");\n\n            const conditions = extractConditionsFromKeyDesc(keyDesc);\n\n            items.push({\n                key,\n                value,\n                shown,\n                group,\n                order,\n                description,\n                presence,\n                usedDefault,\n                secret,\n                conditions,\n                meta,\n            });\n        }\n\n        // Group and sort\n        const groupsMap = new Map();\n        for (const i of items) {\n            const arr = groupsMap.get(i.group) ?? [];\n            arr.push(i);\n            groupsMap.set(i.group, arr);\n        }\n\n        const groups: ConfigGroup[] = Array.from(groupsMap.entries())\n            .map(([name, arr]) => {\n                arr.sort(\n                    (a, b) => a.order - b.order || a.key.localeCompare(b.key),\n                );\n                const order = arr.reduce((m, r) => Math.min(m, r.order), 999);\n                return { name, order, items: arr };\n            })\n            .sort((a, b) => a.order - b.order || a.name.localeCompare(b.name));\n\n        return {\n            createdAt: new Date().toISOString(),\n            groups,\n            all: items,\n        };\n    }\n\n    /* ---------- renderers ---------- */\n\n    private itemNotes(i: ConfigItem): string {\n        const presence = i.presence ? ` [${i.presence}]` : \"\";\n        const defTag = i.usedDefault ? \" (default)\" : \"\";\n        const conds = i.conditions.map((c) => `[${c}]`).join(\" \");\n        const extra = [\n            i.meta?.deprecated ? `(deprecated: ${i.meta.deprecated})` : \"\",\n            i.meta?.restartRequired ? \"(restart required)\" : \"\",\n            i.meta?.docUrl ? `(docs: ${i.meta.docUrl})` : \"\",\n            i.meta?.example ? `(e.g. ${i.meta.example})` : \"\",\n        ]\n            .filter(Boolean)\n            .join(\" \");\n\n        return [i.description, presence, defTag, conds, extra]\n            .filter(Boolean)\n            .join(\" \")\n            .trim();\n    }\n\n    private renderText(model: ConfigModel): string {\n        const out: string[] = [];\n        for (const g of model.groups) {\n            out.push(`\\n=== ${g.name} ===`);\n            for (const i of g.items) {\n                out.push(\n                    `${i.key.padEnd(28)} = ${String(i.shown).padEnd(24)}  # ${this.itemNotes(i)}`,\n                );\n            }\n        }\n        return `\\n${out.join(\"\\n\")}\\n`;\n    }\n\n    private renderMarkdown(model: ConfigModel): string {\n        const out: string[] = [\n            ``,\n            `# Configuration`,\n            `This file gets auto-generated by the application. Do not edit it manually.`,\n        ];\n        for (const g of model.groups) {\n            out.push(`\\n## ${g.name}\\n`);\n            out.push(`| Key | Value | Notes |`);\n            out.push(`| --- | ----- | ----- |`);\n            for (const i of g.items) {\n                const notes = this.itemNotes(i).replace(/\\|/g, \"\\\\|\");\n                const shown = String(i.shown).replace(/\\|/g, \"\\\\|\");\n                out.push(`| \\`${i.key}\\` | \\`${shown}\\` | ${notes} |`);\n            }\n        }\n        return out.join(\"\\n\");\n    }\n\n    private renderJson(model: ConfigModel): string {\n        return JSON.stringify(model, null, 2);\n    }\n\n    private render(model: ConfigModel, format: string): string {\n        switch (format) {\n            case \"markdown\":\n            case \"md\":\n                return this.renderMarkdown(model);\n            case \"json\":\n                return this.renderJson(model);\n            case \"text\":\n            default:\n                return this.renderText(model);\n        }\n    }\n\n    private async writeFileSafely(\n        filePath: string,\n        content: string,\n    ): Promise {\n        const dir = path.dirname(filePath);\n        await fs.mkdir(dir, { recursive: true });\n        await fs.writeFile(filePath, content, \"utf8\");\n    }\n\n    /* ---------- lifecycle ---------- */\n\n    async onModuleInit(): Promise {\n        // Only print in non-prod by default (override with CONFIG_PRINT_IN_PROD=true)\n        const inProd = this.cfg.get(\"NODE_ENV\") === \"production\";\n        if (inProd && this.cfg.get(\"CONFIG_PRINT_IN_PROD\") !== \"true\") return;\n\n        const model = this.buildModel();\n        const format = String(\n            this.cfg.get(\"CONFIG_PRINT_FORMAT\") || \"text\",\n        ).toLowerCase();\n        const out = this.render(model, format);\n        if (process.env.DOC_GENERATE) {\n            const out = this.render(model, \"markdown\");\n            const file = this.cfg.get(\"CONFIG_PRINT_FILE\");\n            await this.writeFileSafely(String(file), out);\n            Logger.log(`Wrote config to ${file}`, \"Config\");\n        } else {\n            Logger.log(out, \"Config\");\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConfigPrinterService.html":{"url":"injectables/ConfigPrinterService.html","title":"injectable - ConfigPrinterService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConfigPrinterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/config-printer/config-printer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                buildModel\n                            \n                            \n                                    Private\n                                itemNotes\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Private\n                                render\n                            \n                            \n                                    Private\n                                renderJson\n                            \n                            \n                                    Private\n                                renderMarkdown\n                            \n                            \n                                    Private\n                                renderText\n                            \n                            \n                                    Private\n                                    Async\n                                writeFileSafely\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cfg: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/config-printer/config-printer.service.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cfg\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        buildModel\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildModel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/config-printer/config-printer.service.ts:41\n                        \n                    \n\n\n            \n                \n                        Build a reusable model of your config (values + meta + conditions).\n\n\n                        \n                            Returns :         ConfigModel\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        itemNotes\n                        \n                    \n                \n            \n            \n                \n                        \n                    itemNotes(i: ConfigItem)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/config-printer/config-printer.service.ts:130\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                i\n                                            \n                                                            ConfigItem\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/config-printer/config-printer.service.ts:209\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        render\n                        \n                    \n                \n            \n            \n                \n                        \n                    render(model: ConfigModel, format: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/config-printer/config-printer.service.ts:185\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                model\n                                            \n                                                            ConfigModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                format\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    renderJson(model: ConfigModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/config-printer/config-printer.service.ts:181\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                model\n                                            \n                                                            ConfigModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderMarkdown\n                        \n                    \n                \n            \n            \n                \n                        \n                    renderMarkdown(model: ConfigModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/config-printer/config-printer.service.ts:162\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                model\n                                            \n                                                            ConfigModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderText\n                        \n                    \n                \n            \n            \n                \n                        \n                    renderText(model: ConfigModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/config-printer/config-printer.service.ts:149\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                model\n                                            \n                                                            ConfigModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        writeFileSafely\n                        \n                    \n                \n            \n            \n                \n                        \n                    writeFileSafely(filePath: string, content: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/config-printer/config-printer.service.ts:198\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filePath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                content\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { promises as fs } from \"node:fs\";\nimport * as path from \"node:path\";\nimport { Injectable, Logger, OnModuleInit } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { VALIDATION_SCHEMA } from \"./combined.schema\";\nimport { extractConditionsFromKeyDesc, flattenMetas } from \"./helpers\";\n\ntype Presence = \"required\" | \"optional\" | \"\";\n\nexport interface ConfigItem {\n    key: string;\n    value: unknown;\n    shown: string;\n    group: string;\n    order: number;\n    description: string;\n    presence: Presence;\n    usedDefault: boolean;\n    secret: boolean;\n    conditions: string[];\n    meta: Record;\n}\n\nexport interface ConfigGroup {\n    name: string;\n    order: number;\n    items: ConfigItem[];\n}\n\nexport interface ConfigModel {\n    createdAt: string;\n    groups: ConfigGroup[];\n    all: ConfigItem[];\n}\n\n@Injectable()\nexport class ConfigPrinterService implements OnModuleInit {\n    constructor(private readonly cfg: ConfigService) {}\n\n    /** Build a reusable model of your config (values + meta + conditions). */\n    public buildModel(): ConfigModel {\n        const described = VALIDATION_SCHEMA.describe() as any;\n        const descKeys: Record = described.keys ?? {};\n        const allKeys = Object.keys(descKeys);\n        const showAdvanced = this.cfg.get(\"CONFIG_PRINT_ADVANCED\") === \"true\";\n\n        const items: ConfigItem[] = [];\n        for (const key of allKeys) {\n            const keyDesc = descKeys[key] ?? {};\n            const flags = keyDesc.flags ?? {};\n            const meta = flattenMetas(keyDesc);\n\n            const group = meta.group ?? \"Other\";\n            const order = Number.isFinite(meta.order)\n                ? Number(meta.order)\n                : 999;\n            const advanced = meta.advanced === true;\n            const secret = meta.secret === true;\n            if (advanced && !showAdvanced) continue;\n\n            const description =\n                flags.description ||\n                (Array.isArray(keyDesc.notes) ? keyDesc.notes.join(\" \") : \"\") ||\n                \"\";\n\n            const presence: Presence =\n                flags.presence === \"required\"\n                    ? \"required\"\n                    : flags.presence === \"optional\"\n                      ? \"optional\"\n                      : \"\";\n\n            const value = this.cfg.get(key);\n            const shown =\n                value === undefined\n                    ? \"(unset)\"\n                    : secret\n                      ? \"***\"\n                      : typeof value === \"string\"\n                        ? value\n                        : JSON.stringify(value);\n\n            const usedDefault =\n                !(key in process.env) && Object.hasOwn.call(flags, \"default\");\n\n            const conditions = extractConditionsFromKeyDesc(keyDesc);\n\n            items.push({\n                key,\n                value,\n                shown,\n                group,\n                order,\n                description,\n                presence,\n                usedDefault,\n                secret,\n                conditions,\n                meta,\n            });\n        }\n\n        // Group and sort\n        const groupsMap = new Map();\n        for (const i of items) {\n            const arr = groupsMap.get(i.group) ?? [];\n            arr.push(i);\n            groupsMap.set(i.group, arr);\n        }\n\n        const groups: ConfigGroup[] = Array.from(groupsMap.entries())\n            .map(([name, arr]) => {\n                arr.sort(\n                    (a, b) => a.order - b.order || a.key.localeCompare(b.key),\n                );\n                const order = arr.reduce((m, r) => Math.min(m, r.order), 999);\n                return { name, order, items: arr };\n            })\n            .sort((a, b) => a.order - b.order || a.name.localeCompare(b.name));\n\n        return {\n            createdAt: new Date().toISOString(),\n            groups,\n            all: items,\n        };\n    }\n\n    /* ---------- renderers ---------- */\n\n    private itemNotes(i: ConfigItem): string {\n        const presence = i.presence ? ` [${i.presence}]` : \"\";\n        const defTag = i.usedDefault ? \" (default)\" : \"\";\n        const conds = i.conditions.map((c) => `[${c}]`).join(\" \");\n        const extra = [\n            i.meta?.deprecated ? `(deprecated: ${i.meta.deprecated})` : \"\",\n            i.meta?.restartRequired ? \"(restart required)\" : \"\",\n            i.meta?.docUrl ? `(docs: ${i.meta.docUrl})` : \"\",\n            i.meta?.example ? `(e.g. ${i.meta.example})` : \"\",\n        ]\n            .filter(Boolean)\n            .join(\" \");\n\n        return [i.description, presence, defTag, conds, extra]\n            .filter(Boolean)\n            .join(\" \")\n            .trim();\n    }\n\n    private renderText(model: ConfigModel): string {\n        const out: string[] = [];\n        for (const g of model.groups) {\n            out.push(`\\n=== ${g.name} ===`);\n            for (const i of g.items) {\n                out.push(\n                    `${i.key.padEnd(28)} = ${String(i.shown).padEnd(24)}  # ${this.itemNotes(i)}`,\n                );\n            }\n        }\n        return `\\n${out.join(\"\\n\")}\\n`;\n    }\n\n    private renderMarkdown(model: ConfigModel): string {\n        const out: string[] = [\n            ``,\n            `# Configuration`,\n            `This file gets auto-generated by the application. Do not edit it manually.`,\n        ];\n        for (const g of model.groups) {\n            out.push(`\\n## ${g.name}\\n`);\n            out.push(`| Key | Value | Notes |`);\n            out.push(`| --- | ----- | ----- |`);\n            for (const i of g.items) {\n                const notes = this.itemNotes(i).replace(/\\|/g, \"\\\\|\");\n                const shown = String(i.shown).replace(/\\|/g, \"\\\\|\");\n                out.push(`| \\`${i.key}\\` | \\`${shown}\\` | ${notes} |`);\n            }\n        }\n        return out.join(\"\\n\");\n    }\n\n    private renderJson(model: ConfigModel): string {\n        return JSON.stringify(model, null, 2);\n    }\n\n    private render(model: ConfigModel, format: string): string {\n        switch (format) {\n            case \"markdown\":\n            case \"md\":\n                return this.renderMarkdown(model);\n            case \"json\":\n                return this.renderJson(model);\n            case \"text\":\n            default:\n                return this.renderText(model);\n        }\n    }\n\n    private async writeFileSafely(\n        filePath: string,\n        content: string,\n    ): Promise {\n        const dir = path.dirname(filePath);\n        await fs.mkdir(dir, { recursive: true });\n        await fs.writeFile(filePath, content, \"utf8\");\n    }\n\n    /* ---------- lifecycle ---------- */\n\n    async onModuleInit(): Promise {\n        // Only print in non-prod by default (override with CONFIG_PRINT_IN_PROD=true)\n        const inProd = this.cfg.get(\"NODE_ENV\") === \"production\";\n        if (inProd && this.cfg.get(\"CONFIG_PRINT_IN_PROD\") !== \"true\") return;\n\n        const model = this.buildModel();\n        const format = String(\n            this.cfg.get(\"CONFIG_PRINT_FORMAT\") || \"text\",\n        ).toLowerCase();\n        const out = this.render(model, format);\n        if (process.env.DOC_GENERATE) {\n            const out = this.render(model, \"markdown\");\n            const file = this.cfg.get(\"CONFIG_PRINT_FILE\");\n            await this.writeFileSafely(String(file), out);\n            Logger.log(`Wrote config to ${file}`, \"Config\");\n        } else {\n            Logger.log(out, \"Config\");\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CredentialConfig.html":{"url":"entities/CredentialConfig.html","title":"entity - CredentialConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CredentialConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                claims\n                            \n                            \n                                    \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                disclosureFrame\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                embeddedDisclosurePolicy\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                issuanceConfigs\n                            \n                            \n                                    \n                                key\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                keyBinding\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                keyId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lifeTime\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                statusManagement\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsOptional()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IssuerMetadataCredentialConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        disclosureFrame\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsOptional()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:105\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        embeddedDisclosurePolicy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EmbeddedDisclosurePolicy\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@ApiProperty({oneOf: undefined})@Type(undefined, {discriminator: undefined, keepDiscriminatorProperty: true})@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:172\n                        \n                    \n\n            \n                \n                    Embedded disclosure policy (discriminated union by policy).\nThe discriminator makes class-transformer instantiate the right subclass,\nand then class-validator runs that subclass’s rules.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        issuanceConfigs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IssuanceConfig[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, issuance => issuance.credentialConfigs, {cascade: undefined, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:179\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CertEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        keyBinding\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Column('boolean', {default: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        keyId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:120\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lifeTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Column('int', {nullable: true})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:133\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SchemaResponse\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:139\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        statusManagement\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Column('boolean', {default: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:90\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         VCT\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:111\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        // --- credential-config.entity.ts ---\n\nimport {\n    ApiExtraModels,\n    ApiHideProperty,\n    ApiProperty,\n    getSchemaPath,\n} from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsBoolean,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { Column, Entity, ManyToMany, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { CertEntity } from \"../../../crypto/key/entities/cert.entity\";\nimport { SchemaResponse } from \"../../credentials-metadata/dto/schema-response.dto\";\nimport { VCT } from \"../../credentials-metadata/dto/vct.dto\";\nimport { IssuanceConfig } from \"../../issuance/entities/issuance-config.entity\";\nimport {\n    AllowListPolicy,\n    AttestationBasedPolicy,\n    EmbeddedDisclosurePolicy,\n    NoneTrustPolicy,\n    RootOfTrustPolicy,\n} from \"./policies.dto\";\n\nexport class DisplayImage {\n    @IsString()\n    uri: string;\n}\nexport class Display {\n    @IsString()\n    name: string;\n    @IsString()\n    description: string;\n    @IsString()\n    locale: string;\n    @IsString()\n    background_color?: string;\n    @IsString()\n    text_color?: string;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    background_image?: DisplayImage;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    logo?: DisplayImage;\n}\n\nexport class IssuerMetadataCredentialConfig {\n    @IsString()\n    format: string;\n    @ValidateNested()\n    @Type(() => Display)\n    display: Display[];\n    @IsOptional()\n    @IsString()\n    scope?: string;\n}\n\n@ApiExtraModels(\n    AttestationBasedPolicy,\n    NoneTrustPolicy,\n    AllowListPolicy,\n    RootOfTrustPolicy,\n)\n@Entity()\nexport class CredentialConfig {\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id!: string;\n\n    @IsString()\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId!: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => IssuerMetadataCredentialConfig)\n    config!: IssuerMetadataCredentialConfig;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    claims?: Record;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    disclosureFrame?: Record;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => VCT)\n    @Column(\"json\", { nullable: true })\n    vct?: VCT;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    keyBinding?: boolean;\n\n    @IsOptional()\n    @IsString()\n    keyId?: string;\n\n    @ManyToOne(() => CertEntity)\n    key!: CertEntity;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    statusManagement?: boolean;\n\n    @IsOptional()\n    @Column(\"int\", { nullable: true })\n    @IsNumber()\n    lifeTime?: number;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => SchemaResponse)\n    @Column(\"json\", { nullable: true })\n    schema?: SchemaResponse;\n\n    /**\n     * Embedded disclosure policy (discriminated union by `policy`).\n     * The discriminator makes class-transformer instantiate the right subclass,\n     * and then class-validator runs that subclass’s rules.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(AttestationBasedPolicy) },\n            { $ref: getSchemaPath(NoneTrustPolicy) },\n            { $ref: getSchemaPath(AllowListPolicy) },\n            { $ref: getSchemaPath(RootOfTrustPolicy) },\n        ],\n    })\n    @Type(() => AttestationBasedPolicy, {\n        discriminator: {\n            property: \"policy\",\n            subTypes: [\n                { name: \"none\", value: NoneTrustPolicy },\n                { name: \"allowList\", value: AllowListPolicy },\n                { name: \"rootOfTrust\", value: RootOfTrustPolicy },\n                {\n                    name: \"attestationBased\",\n                    value: AttestationBasedPolicy,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true, // keep `policy` on the instance\n    })\n    @Column(\"json\", { nullable: true })\n    embeddedDisclosurePolicy?: EmbeddedDisclosurePolicy;\n\n    @ManyToMany(\n        () => IssuanceConfig,\n        (issuance) => issuance.credentialConfigs,\n        { cascade: [\"remove\"], onDelete: \"CASCADE\" },\n    )\n    issuanceConfigs!: IssuanceConfig[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialConfigCreate.html":{"url":"classes/CredentialConfigCreate.html","title":"class - CredentialConfigCreate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialConfigCreate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/dto/credential-config-create.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(CredentialConfig, [\n    \"tenantId\",\n    \"tenant\",\n    \"issuanceConfigs\",\n    \"key\",\n])\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { CredentialConfig } from \"../entities/credential.entity\";\n\nexport class CredentialConfigCreate extends OmitType(CredentialConfig, [\n    \"tenantId\",\n    \"tenant\",\n    \"issuanceConfigs\",\n    \"key\",\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialConfigMapping.html":{"url":"classes/CredentialConfigMapping.html","title":"class - CredentialConfigMapping","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialConfigMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/issuance.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for mapping credential configurations in issuance.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:13\n                        \n                    \n\n            \n                \n                    Unique identifier for the credential configuration.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { IsArray, IsString } from \"class-validator\";\nimport { IssuanceConfig } from \"../entities/issuance-config.entity\";\n\n/**\n * DTO for mapping credential configurations in issuance.\n */\nexport class CredentialConfigMapping {\n    /**\n     * Unique identifier for the credential configuration.\n     */\n    @IsString()\n    id: string;\n}\n\n/**\n * DTO for mapping issuance configurations.\n */\nexport class IssuanceDto extends OmitType(IssuanceConfig, [\n    \"tenantId\",\n    \"tenant\",\n    \"createdAt\",\n    \"updatedAt\",\n    \"credentialConfigs\",\n] as const) {\n    /**\n     * Ids of the credential configurations associated with this issuance configuration.\n     */\n    @IsArray()\n    credentialConfigIds: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CredentialConfigService.html":{"url":"injectables/CredentialConfigService.html","title":"injectable - CredentialConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CredentialConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credential-config/credential-config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing credential configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                getById\n                            \n                            \n                                    Public\n                                    Async\n                                import\n                            \n                            \n                                    Async\n                                onTenantDelete\n                            \n                            \n                                store\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(credentialConfigRepository: Repository, configService: ConfigService, logger: PinoLogger, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/credentials/credential-config/credential-config.service.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor for CredentialConfigService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        credentialConfigRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for CredentialConfig entity.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:198\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the CredentialConfig entity to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the result of the delete operation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:158\n                        \n                    \n\n\n            \n                \n                        Retrieves all credential configurations for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to an array of CredentialConfig entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getById\n                        \n                    \n                \n            \n            \n                \ngetById(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:171\n                        \n                    \n\n\n            \n                \n                        Retrieves a credential configuration by its ID for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Imports the configs\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:149\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n            \n                \nstore(tenantId: string, config: CredentialConfigCreate)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:185\n                        \n                    \n\n\n            \n                \n                        Stores a credential configuration for a given tenant.\nIf the configuration already exists, it will be overwritten.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                        \n                                                config\n                                            \n                                                            CredentialConfigCreate\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe CredentialConfig entity to store.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the stored CredentialConfig entity.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { plainToClass } from \"class-transformer\";\nimport { validate } from \"class-validator\";\nimport { readdirSync, readFileSync } from \"fs\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { join } from \"path\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../../../crypto/crypto.service\";\nimport { CredentialConfigCreate } from \"../dto/credential-config-create.dto\";\nimport { CredentialConfig } from \"../entities/credential.entity\";\n\n/**\n * Service for managing credential configurations.\n */\n@Injectable()\nexport class CredentialConfigService {\n    /**\n     * Constructor for CredentialConfigService.\n     * @param credentialConfigRepository - Repository for CredentialConfig entity.\n     */\n    constructor(\n        @InjectRepository(CredentialConfig)\n        private readonly credentialConfigRepository: Repository,\n        private configService: ConfigService,\n        private logger: PinoLogger,\n        private cryptoService: CryptoService,\n    ) {}\n\n    /**\n     * Imports the configs\n     */\n    public async import() {\n        const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n        const subfolder = \"issuance/credentials\";\n        const force = this.configService.get(\"CONFIG_IMPORT_FORCE\");\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            for (const tenant of tenantFolders) {\n                let counter = 0;\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const files = readdirSync(path);\n                for (const file of files) {\n                    try {\n                        const payload = JSON.parse(\n                            readFileSync(join(path, file), \"utf8\"),\n                        );\n\n                        const id = file.replace(\".json\", \"\");\n                        payload.id = id;\n                        const exists = await this.getById(\n                            tenant.name,\n                            id,\n                        ).catch(() => false);\n                        if (exists && !force) {\n                            continue; // Skip if config already exists and force is not set\n                        } else if (exists && force) {\n                            //delete old element so removed elements are not present\n                            await this.credentialConfigRepository.delete({\n                                id,\n                                tenantId: tenant.name,\n                            });\n                        }\n\n                        // Validate the payload against CredentialConfig\n                        const config = plainToClass(\n                            CredentialConfigCreate,\n                            payload,\n                        );\n                        const validationErrors = await validate(config, {\n                            whitelist: true,\n                            forbidUnknownValues: false, // avoid false positives on plain objects\n                            forbidNonWhitelisted: false,\n                            stopAtFirstError: false,\n                        });\n\n                        // Check if keyId is provided and if the certificate exists\n                        if (config.keyId) {\n                            const cert = await this.cryptoService.getCertEntry(\n                                tenant.name,\n                                config.keyId,\n                            );\n                            if (!cert) {\n                                this.logger.error(\n                                    {\n                                        event: \"ValidationError\",\n                                        file,\n                                        tenant: tenant.name,\n                                        errors: [\n                                            {\n                                                property: \"keyId\",\n                                                constraints: {\n                                                    isDefined:\n                                                        \"Key ID must be defined in the crypto service.\",\n                                                },\n                                                value: config.keyId,\n                                            },\n                                        ],\n                                    },\n                                    `Validation failed for credentials config ${file} in tenant ${tenant.name}`,\n                                );\n                                continue; // Skip this invalid config\n                            }\n                            (config as CredentialConfig).key = cert;\n                        }\n\n                        if (validationErrors.length > 0) {\n                            this.logger.error(\n                                {\n                                    event: \"ValidationError\",\n                                    file,\n                                    tenant: tenant.name,\n                                    //we need to extract the constraints because they tell what is wrong, also from the children elements\n                                    errors: validationErrors,\n                                },\n                                `Validation failed for credentials config ${file} in tenant ${tenant.name}`,\n                            );\n                            continue; // Skip this invalid config\n                        }\n\n                        await this.store(tenant.name, config);\n                        counter++;\n                    } catch (e) {\n                        this.logger.error(\n                            {\n                                event: \"ImportError\",\n                                file,\n                                tenant: tenant.name,\n                                error: e.message,\n                            },\n                            `Failed to import credentials config ${file} in tenant ${tenant.name}`,\n                        );\n                    }\n                }\n                this.logger.info(\n                    {\n                        event: \"Import\",\n                    },\n                    `${counter} credential configs imported for ${tenant.name}`,\n                );\n            }\n        }\n    }\n\n    async onTenantDelete(tenantId: string) {\n        await this.credentialConfigRepository.delete({ tenantId });\n    }\n\n    /**\n     * Retrieves all credential configurations for a given tenant.\n     * @param tenantId - The ID of the tenant.\n     * @returns A promise that resolves to an array of CredentialConfig entities.\n     */\n    get(tenantId: string) {\n        return this.credentialConfigRepository.find({\n            where: { tenantId },\n            relations: [\"key\"],\n        });\n    }\n\n    /**\n     * Retrieves a credential configuration by its ID for a given tenant.\n     * @param tenantId\n     * @param id\n     * @returns\n     */\n    getById(tenantId: string, id: string) {\n        return this.credentialConfigRepository.findOneByOrFail({\n            id,\n            tenantId,\n        });\n    }\n\n    /**\n     * Stores a credential configuration for a given tenant.\n     * If the configuration already exists, it will be overwritten.\n     * @param tenantId - The ID of the tenant.\n     * @param config - The CredentialConfig entity to store.\n     * @returns A promise that resolves to the stored CredentialConfig entity.\n     */\n    store(tenantId: string, config: CredentialConfigCreate) {\n        return this.credentialConfigRepository.save({\n            ...config,\n            tenantId,\n        });\n    }\n\n    /**\n     * Deletes a credential configuration for a given tenant.\n     * @param tenantId - The ID of the tenant.\n     * @param id - The ID of the CredentialConfig entity to delete.\n     * @returns A promise that resolves to the result of the delete operation.\n     */\n    delete(tenantId: string, id: string) {\n        return this.credentialConfigRepository.delete({\n            id,\n            tenantId,\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialIssuerMetadataDto.html":{"url":"classes/CredentialIssuerMetadataDto.html","title":"class - CredentialIssuerMetadataDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialIssuerMetadataDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/credential-issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the metadata for a credential issuer.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_server\n                            \n                            \n                                authorization_servers\n                            \n                            \n                                batch_credential_issuance\n                            \n                            \n                                credential_configurations_supported\n                            \n                            \n                                credential_endpoint\n                            \n                            \n                                credential_issuer\n                            \n                            \n                                display\n                            \n                            \n                                notification_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_server\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:41\n                        \n                    \n\n            \n                \n                    The URL of the preferred authorization server.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_servers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:12\n                        \n                    \n\n            \n                \n                    List of authorization servers that support the credential issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        batch_credential_issuance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:24\n                        \n                    \n\n            \n                \n                    Information about batch credential issuance.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_configurations_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:37\n                        \n                    \n\n            \n                \n                    Object of credentials configurations supported by the issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:16\n                        \n                    \n\n            \n                \n                    The URL of the credential issuance endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:8\n                        \n                    \n\n            \n                \n                    The issuer identifier, typically a URL.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        display\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:33\n                        \n                    \n\n            \n                \n                    Display information for the credentials that are getting issued.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notification_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:20\n                        \n                    \n\n            \n                \n                    The URL of the notification endpoint for credential issuance.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CredentialIssuerMetadataDto {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    credential_issuer: string;\n    /**\n     * List of authorization servers that support the credential issuer.\n     */\n    authorization_servers: string[];\n    /**\n     * The URL of the credential issuance endpoint.\n     */\n    credential_endpoint: string;\n    /**\n     * The URL of the notification endpoint for credential issuance.\n     */\n    notification_endpoint: string;\n    /**\n     * Information about batch credential issuance.\n     */\n    batch_credential_issuance: {\n        /**\n         * Amount of elements in a batch.\n         */\n        batch_size: number;\n    };\n    /**\n     * Display information for the credentials that are getting issued.\n     */\n    display: Array;\n    /**\n     * Object of credentials configurations supported by the issuer.\n     */\n    credential_configurations_supported: any;\n    /**\n     * The URL of the preferred authorization server.\n     */\n    authorization_server: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialQuery.html":{"url":"classes/CredentialQuery.html","title":"class - CredentialQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                format\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                meta\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                multiple\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                trusted_authorities\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        format\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        multiple\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        trusted_authorities\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TrustedAuthorityQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:71\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsOptional()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities?: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialSetQuery.html":{"url":"classes/CredentialSetQuery.html","title":"class - CredentialSetQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialSetQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                options\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                required\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[][]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'array', items: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        required\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:98\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsOptional()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities?: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CredentialsController.html":{"url":"controllers/CredentialsController.html","title":"controller - CredentialsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CredentialsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management/credentials\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing credential configurations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    \n                                getConfigs\n                            \n                            \n                                    \n                                storeCredentialConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteIssuanceConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:58\n                        \n                    \n\n\n            \n                \n                        Deletes an credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getConfigs\n                        \n                    \n                \n            \n            \n                \n                        \n                    getConfigs(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:35\n                        \n                    \n\n\n            \n                \n                        Returns the credential configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storeCredentialConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeCredentialConfiguration(config: CredentialConfigCreate, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:45\n                        \n                    \n\n\n            \n                \n                        Stores the credential configuration for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            CredentialConfigCreate\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { ApiSecurity, ApiTags } from \"@nestjs/swagger\";\nimport { JwtAuthGuard } from \"../../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { CredentialConfigService } from \"./credential-config/credential-config.service\";\nimport { CredentialConfigCreate } from \"./dto/credential-config-create.dto\";\n\n/**\n * Controller for managing credential configurations.\n */\n@ApiTags(\"Issuer management\")\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"issuer-management/credentials\")\nexport class CredentialsController {\n    /**\n     * Initializes the CredentialsController with the CredentialConfigService.\n     * @param credentialsService\n     */\n    constructor(private readonly credentialsService: CredentialConfigService) {}\n\n    /**\n     * Returns the credential configurations for this tenant.\n     * @returns\n     */\n    @Get()\n    getConfigs(@Token() user: TokenPayload) {\n        return this.credentialsService.get(user.sub);\n    }\n\n    /**\n     * Stores the credential configuration for this tenant.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storeCredentialConfiguration(\n        @Body() config: CredentialConfigCreate,\n        @Token() user: TokenPayload,\n    ) {\n        return this.credentialsService.store(user.sub, config);\n    }\n\n    /**\n     * Deletes an credential configuration.\n     * @param id\n     * @returns\n     */\n    @Delete(\":id\")\n    deleteIssuanceConfiguration(\n        @Param(\"id\") id: string,\n        @Token() user: TokenPayload,\n    ) {\n        return this.credentialsService.delete(user.sub, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CredentialsMetadataController.html":{"url":"controllers/CredentialsMetadataController.html","title":"controller - CredentialsMetadataController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CredentialsMetadataController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/credentials-metadata.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/credentials-metadata\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n            \n                \n                        \n                    schema(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('schema/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials-metadata/credentials-metadata.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        vct\n                        \n                    \n                \n            \n            \n                \n                        \n                    vct(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('vct/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials-metadata/credentials-metadata.controller.ts:15\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe identifier of the credential configuration.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from \"@nestjs/common\";\nimport { ApiExcludeController } from \"@nestjs/swagger\";\nimport { CredentialsService } from \"../credentials/credentials.service\";\n\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@Controller(\":tenantId/credentials-metadata\")\nexport class CredentialsMetadataController {\n    constructor(private readonly credentialsService: CredentialsService) {}\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n     * @param id - The identifier of the credential configuration.\n     */\n    @Get(\"vct/:id\")\n    vct(@Param(\"id\") id: string, @Param(\"tenantId\") tenantId: string) {\n        return this.credentialsService.getVCT(id, tenantId);\n    }\n\n    /**\n     * Retrieves the schema for a specific credential\n     * @param id\n     * @returns\n     */\n    @Get(\"schema/:id\")\n    schema(@Param(\"id\") id: string, @Param(\"tenantId\") tenantId: string) {\n        return this.credentialsService.getSchema(id, tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CredentialsService.html":{"url":"injectables/CredentialsService.html","title":"injectable - CredentialsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CredentialsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing credentials and their configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getCredential\n                            \n                            \n                                    Async\n                                getCredentialConfigurationSupported\n                            \n                            \n                                    Async\n                                getSchema\n                            \n                            \n                                    Async\n                                getVCT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cryptoService: CryptoService, configService: ConfigService, statusListService: StatusListService, credentialConfigRepo: Repository, cryptoImplementationService: CryptoImplementationService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/credentials/credentials.service.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for CredentialsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusListService\n                                                  \n                                                        \n                                                                        StatusListService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialConfigRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoImplementationService\n                                                  \n                                                        \n                                                                        CryptoImplementationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredential\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredential(credentialConfigurationId: string, holderCnf: Jwk, session: Session, issuanceConfig: IssuanceConfig, claims?: Record>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:107\n                        \n                    \n\n\n            \n                \n                        Issues a credential based on the provided configuration and session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                holderCnf\n                                            \n                                                        Jwk\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuanceConfig\n                                            \n                                                            IssuanceConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                claims\n                                            \n                                                        Record>\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredentialConfigurationSupported\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredentialConfigurationSupported(session: Session, issuanceConfig: IssuanceConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Returns the credential configuration that is required for oid4vci\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuanceConfig\n                                            \n                                                            IssuanceConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSchema\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSchema(credentialConfigurationId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:229\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getVCT\n                        \n                    \n                \n            \n            \n                \n                        \n                    getVCT(credentialId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:203\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport type { Jwk } from \"@openid4vc/oauth2\";\nimport { CredentialConfigurationSupported } from \"@openid4vc/openid4vci\";\nimport { digest, generateSalt } from \"@sd-jwt/crypto-nodejs\";\nimport { JWTwithStatusListPayload } from \"@sd-jwt/jwt-status-list\";\nimport { SDJwtVcInstance } from \"@sd-jwt/sd-jwt-vc\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { CryptoImplementationService } from \"../../crypto/key/crypto-implementation/crypto-implementation.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SchemaResponse } from \"../credentials-metadata/dto/schema-response.dto\";\nimport { VCT } from \"../credentials-metadata/dto/vct.dto\";\nimport { IssuanceConfig } from \"../issuance/entities/issuance-config.entity\";\nimport { StatusListService } from \"../status-list/status-list.service\";\nimport { CredentialConfig } from \"./entities/credential.entity\";\n\n/**\n * Service for managing credentials and their configurations.\n */\n@Injectable()\nexport class CredentialsService {\n    /**\n     * Constructor for CredentialsService.\n     * @param cryptoService\n     * @param configService\n     * @param statusListService\n     * @param credentialConfigRepo\n     * @param cryptoImplementationService\n     */\n    constructor(\n        private cryptoService: CryptoService,\n        private configService: ConfigService,\n        private statusListService: StatusListService,\n        @InjectRepository(CredentialConfig)\n        private credentialConfigRepo: Repository,\n        private cryptoImplementationService: CryptoImplementationService,\n    ) {}\n\n    /**\n     * Returns the credential configuration that is required for oid4vci\n     * @param tenantId\n     * @returns\n     */\n    async getCredentialConfigurationSupported(\n        session: Session,\n        issuanceConfig: IssuanceConfig,\n    ): Promise> {\n        const credential_configurations_supported: Record = {};\n\n        const configs = await this.credentialConfigRepo.findBy({\n            tenantId: session.tenantId,\n        });\n\n        //add key binding when required:\n        const kb = {\n            proof_types_supported: {\n                jwt: {\n                    proof_signing_alg_values_supported: [\n                        this.cryptoImplementationService.getAlg(),\n                    ],\n                },\n            },\n            credential_signing_alg_values_supported: [\n                this.cryptoImplementationService.getAlg(),\n            ],\n            cryptographic_binding_methods_supported: [\"jwk\"],\n        };\n\n        for (const value of configs) {\n            const isUsed = issuanceConfig.credentialConfigs.find(\n                (config) => config.id === value.id,\n            );\n            (value.config as CredentialConfigurationSupported).vct =\n                `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.tenantId}/credentials-metadata/vct/${value.id}`;\n\n            if (value.embeddedDisclosurePolicy) {\n                delete (value.embeddedDisclosurePolicy as any).$schema;\n                (\n                    value.config as CredentialConfigurationSupported\n                ).disclosure_policy = value.embeddedDisclosurePolicy;\n            }\n\n            if (isUsed?.id)\n                value.config = {\n                    ...value.config,\n                    ...kb,\n                };\n            (\n                credential_configurations_supported as CredentialConfigurationSupported\n            )[value.id] = value.config;\n        }\n        return credential_configurations_supported;\n    }\n\n    /**\n     * Issues a credential based on the provided configuration and session.\n     * @param credentialConfigurationId\n     * @param holderCnf\n     * @param session\n     * @returns\n     */\n    async getCredential(\n        credentialConfigurationId: string,\n        holderCnf: Jwk,\n        session: Session,\n        issuanceConfig: IssuanceConfig,\n        claims?: Record>,\n    ) {\n        const credentialConfiguration = issuanceConfig.credentialConfigs.find(\n            (config) => config.id === credentialConfigurationId,\n        );\n        if (!credentialConfiguration)\n            throw new ConflictException(\n                `Credential configuration with id ${credentialConfigurationId} not found`,\n            );\n        //use passed claims, if not provided try the ones stored in the session and the use default ones from the config is provided\n        const usedClaims =\n            claims?.[credentialConfigurationId] ??\n            session.credentialPayload?.claims?.[credentialConfigurationId] ??\n            credentialConfiguration.claims;\n        const disclosureFrame = credentialConfiguration.disclosureFrame;\n\n        const keyId =\n            credentialConfiguration?.keyId ??\n            (await this.cryptoService.keyService.getKid(\n                session.tenantId,\n                \"signing\",\n            ));\n\n        //at this point it is sd-jwt specific.\n\n        const sdjwt = new SDJwtVcInstance({\n            signer: await this.cryptoService.keyService.signer(\n                session.tenantId,\n                keyId,\n            ),\n            signAlg: this.cryptoImplementationService.getAlg(),\n            hasher: digest,\n            hashAlg: \"sha-256\",\n            saltGenerator: generateSalt,\n            loadTypeMetadataFormat: true,\n        });\n\n        // If status management is enabled, create a status entry\n        let status: JWTwithStatusListPayload | undefined;\n        if (credentialConfiguration.statusManagement) {\n            status = await this.statusListService.createEntry(\n                session,\n                credentialConfigurationId,\n            );\n        }\n\n        const iat = Math.round(new Date().getTime() / 1000);\n        // Set expiration time if lifeTime is defined\n        let exp: number | undefined;\n        if (credentialConfiguration.lifeTime) {\n            exp = iat + credentialConfiguration.lifeTime;\n        }\n\n        // If key binding is enabled, include the JWK in the cnf\n        let cnf: { jwk: Jwk } | undefined;\n\n        if (credentialConfiguration.keyBinding) {\n            cnf = {\n                jwk: holderCnf,\n            };\n        }\n\n        return sdjwt.issue(\n            {\n                iss: this.configService.getOrThrow(\"PUBLIC_URL\"),\n                iat,\n                exp,\n                vct: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.tenantId}/credentials-metadata/vct/${credentialConfigurationId}`,\n                cnf,\n                ...usedClaims,\n                ...status,\n            },\n            disclosureFrame,\n            {\n                header: {\n                    x5c: await this.cryptoService.getCertChain(\n                        \"signing\",\n                        session.tenantId,\n                    ),\n                    alg: this.cryptoImplementationService.getAlg(),\n                },\n            },\n        );\n    }\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n     * @param credentialId\n     * @param tenantId\n     * @returns\n     */\n    async getVCT(credentialId: string, tenantId: string): Promise {\n        const credentialConfig = await this.credentialConfigRepo\n            .findOneByOrFail({\n                tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException(\n                    `Credential configuration with id ${credentialId} not found`,\n                );\n            });\n        if (!credentialConfig.vct) {\n            throw new ConflictException(\n                `VCT for credential configuration with id ${credentialId} not found`,\n            );\n        }\n        const host = this.configService.getOrThrow(\"PUBLIC_URL\");\n        credentialConfig.vct.vct = `${host}/${tenantId}/credentials-metadata/vct/${credentialConfig.id}`;\n        return credentialConfig.vct;\n    }\n\n    /**\n     * Retrieves the schema for a specific credential configuration.\n     * @param id\n     * @param tenantId\n     * @returns\n     */\n    async getSchema(\n        credentialConfigurationId: string,\n        tenantId: string,\n    ): Promise {\n        const credentialConfig =\n            await this.credentialConfigRepo.findOneByOrFail({\n                tenantId,\n            });\n        if (!credentialConfig) {\n            throw new ConflictException(\n                `Credential configuration with id ${credentialConfigurationId} not found`,\n            );\n        }\n        if (!credentialConfig.schema) {\n            throw new ConflictException(\n                `Schema for credential configuration with id ${credentialConfigurationId} not found`,\n            );\n        }\n        return credentialConfig.schema;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CryptoImplementatationModule.html":{"url":"modules/CryptoImplementatationModule.html","title":"module - CryptoImplementatationModule","body":"\n                   \n\n\n\n\n    Modules\n    CryptoImplementatationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CryptoImplementatationModule\n\n\n\ncluster_CryptoImplementatationModule_exports\n\n\n\ncluster_CryptoImplementatationModule_providers\n\n\n\n\nCryptoImplementationService \n\nCryptoImplementationService \n\n\n\nCryptoImplementatationModule\n\nCryptoImplementatationModule\n\nCryptoImplementationService  -->\n\nCryptoImplementatationModule->CryptoImplementationService \n\n\n\n\n\nCryptoImplementationService\n\nCryptoImplementationService\n\nCryptoImplementatationModule -->\n\nCryptoImplementationService->CryptoImplementatationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/key/crypto-implementation/crypto-implementation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CryptoImplementationService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CryptoImplementationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { CryptoImplementationService } from \"./crypto-implementation.service\";\n\n@Global()\n@Module({\n    imports: [ConfigModule],\n    providers: [CryptoImplementationService],\n    exports: [CryptoImplementationService],\n})\nexport class CryptoImplementatationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CryptoImplementation.html":{"url":"interfaces/CryptoImplementation.html","title":"interface - CryptoImplementation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CryptoImplementation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto-implementation/crypto-implementation.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface to imeplement different algorithms.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            alg\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        generateKeyPair\n                                    \n                                \n                                \n                                    \n                                        getSigner\n                                    \n                                \n                                \n                                    \n                                        getVerifier\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateKeyPair\n                        \n                    \n                \n            \n            \n                \ngenerateKeyPair()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.ts:19\n                        \n                    \n\n\n            \n                \n                        Generates a new keypair\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSigner\n                        \n                    \n                \n            \n            \n                \ngetSigner(privateKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.ts:24\n                        \n                    \n\n\n            \n                \n                        creates a signer based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                privateKeyJWK\n                                            \n                                                            JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getVerifier\n                        \n                    \n                \n            \n            \n                \ngetVerifier(publicKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.ts:29\n                        \n                    \n\n\n            \n                \n                        creates a verifier based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                publicKeyJWK\n                                            \n                                                            JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        alg\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        alg:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type KeyPair = {\n    publicKey: JsonWebKey;\n    privateKey: JsonWebKey;\n};\n\ntype Signer = (data: string) => Promise;\n\ntype Verifier = (data: string, signature: string) => Promise;\n\n/**\n * Generic interface to imeplement different algorithms.\n */\nexport interface CryptoImplementation {\n    //name of the algorithm\n    alg: string;\n    /**\n     * Generates a new keypair\n     */\n    generateKeyPair(): Promise;\n    /**\n     * creates a signer based on the passed key.\n     * @param privateKeyJWK\n     */\n    getSigner(privateKeyJWK: JsonWebKey): Promise;\n    /**\n     * creates a verifier based on the passed key.\n     * @param publicKeyJWK\n     */\n    getVerifier(publicKeyJWK: JsonWebKey): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CryptoImplementationService.html":{"url":"injectables/CryptoImplementationService.html","title":"injectable - CryptoImplementationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CryptoImplementationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAlg\n                            \n                            \n                                getCrypto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configServie: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/crypto-implementation/crypto-implementation.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configServie\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAlg\n                        \n                    \n                \n            \n            \n                \ngetAlg()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.service.ts:17\n                        \n                    \n\n\n            \n                \n                        Return the algorithm that is used for the crypto operations like signing.\n\n\n                        \n                            Returns :         CryptoType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCrypto\n                        \n                    \n                \n            \n            \n                \ngetCrypto(alg)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Returns the crypto implementation based on the configured algorithm.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                alg\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    this.configServie.get(\"CRYPTO_ALG\")\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CryptoImplementation\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { ES256 } from \"@sd-jwt/crypto-nodejs\";\nimport { CryptoImplementation } from \"./crypto-implementation\";\nimport { ED25519 } from \"./ed25519\";\n\nexport type CryptoType = \"ES256\" | \"Ed25519\";\n\n@Injectable()\nexport class CryptoImplementationService {\n    constructor(private configServie: ConfigService) {}\n\n    /**\n     * Return the algorithm that is used for the crypto operations like signing.\n     * @returns\n     */\n    getAlg(): CryptoType {\n        return this.configServie.get(\"CRYPTO_ALG\") as CryptoType;\n    }\n\n    /**\n     * Returns the crypto implementation based on the configured algorithm.\n     * @param alg\n     * @returns\n     */\n    getCrypto(\n        alg = this.configServie.get(\"CRYPTO_ALG\"),\n    ): CryptoImplementation {\n        switch (alg) {\n            case \"Ed25519\":\n                return ED25519;\n            case \"ES256\":\n                return ES256;\n            default:\n                throw new Error(`Unsupported algorithm ${alg}`);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CryptoModule.html":{"url":"modules/CryptoModule.html","title":"module - CryptoModule","body":"\n                   \n\n\n\n\n    Modules\n    CryptoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_exports\n\n\n\ncluster_CryptoModule_providers\n\n\n\n\nCryptoService \n\nCryptoService \n\n\n\nEncryptionService \n\nEncryptionService \n\n\n\nCryptoModule\n\nCryptoModule\n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/crypto.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            KeyController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { CryptoService } from \"./crypto.service\";\nimport { EncryptionService } from \"./encryption/encryption.service\";\nimport { CertEntity } from \"./key/entities/cert.entity\";\nimport { KeyEntity } from \"./key/entities/keys.entity\";\nimport { KeyController } from \"./key/key.controller\";\n\n@Module({\n    imports: [TypeOrmModule.forFeature([CertEntity, KeyEntity])],\n    controllers: [KeyController],\n    providers: [CryptoService, EncryptionService],\n    exports: [CryptoService, EncryptionService],\n})\nexport class CryptoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DBKeyService.html":{"url":"classes/DBKeyService.html","title":"class - DBKeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DBKeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/adapters/db-key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The key service is responsible for managing the keys of the issuer.\n\n            \n\n            \n                Extends\n            \n            \n                            KeyService\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                crypto\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                getKid\n                            \n                            \n                                    Private\n                                    Async\n                                getPrivateKey\n                            \n                            \n                                    Private\n                                getPubFromPrivateKey\n                            \n                            \n                                getPublicKey\n                            \n                            \n                                getPublicKey\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                import\n                            \n                            \n                                init\n                            \n                            \n                                    Async\n                                signer\n                            \n                            \n                                    Async\n                                signJWT\n                            \n                            \n                                    Protected\n                                getCertificate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoImplementationService, certRepository: Repository, keyRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/adapters/db-key.service.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoImplementationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        certRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        keyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        crypto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CryptoImplementation\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/adapters/db-key.service.ts:28\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:86\n\n                        \n                    \n\n\n            \n                \n                        Creates a new keypair and wrtites the private key to the file system.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                key id of the generated key.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getKid\n                        \n                    \n                \n            \n            \n                \ngetKid(tenantId: string, type: CertificateType)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:136\n\n                        \n                    \n\n\n            \n                \n                        Gets one key id for the tenant.\nIf no key exists, it will throw an error.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                type\n                                            \n                                                            CertificateType\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    \"signing\"\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        getPrivateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPrivateKey(tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/db-key.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Get the keys from the file system or generate them if they do not exist\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getPubFromPrivateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPubFromPrivateKey(privateKey: JWK_EC_Private)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/db-key.service.ts:62\n                        \n                    \n\n\n            \n                \n                        Get the public key from the private key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                privateKey\n                                            \n                                                        JWK_EC_Private\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         EC_Public\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \ngetPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:152\n\n                        \n                    \n\n\n            \n                \n                        Get the public key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \ngetPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/db-key.service.ts:153\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"pem\" | \"jwk\", tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/db-key.service.ts:158\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"pem\" | \"jwk\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        import\n                        \n                    \n                \n            \n            \n                \nimport(tenantId: string, body: KeyImportDto)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:46\n\n                        \n                    \n\n\n            \n                \n                        Import a key into the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            KeyImportDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        init\n                        \n                    \n                \n            \n            \n                \ninit(tenant: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:77\n\n                        \n                    \n\n\n            \n                \n                        Initialize the key service for a specific tenant.\nThis will create the keys if they do not exist.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenant\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signer\n                        \n                    \n                \n            \n            \n                \n                        \n                    signer(tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:109\n\n                        \n                    \n\n\n            \n                \n                        Get the signer for the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JWTPayload, header: JWTHeaderParameters, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:195\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWTHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCertificate(tenantId: string, keyId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:85\n\n                        \n                    \n\n\n            \n                \n                        Get the certificate for the given key id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConfigService } from \"@nestjs/config\";\nimport { Signer } from \"@sd-jwt/types\";\nimport {\n    CryptoKey,\n    exportJWK,\n    exportSPKI,\n    importJWK,\n    JWK,\n    JWK_EC_Private,\n    JWTHeaderParameters,\n    JWTPayload,\n    SignJWT,\n} from \"jose\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { v4 } from \"uuid\";\nimport { EC_Public } from \"../../../well-known/dto/jwks-response.dto\";\nimport { CryptoImplementation } from \"../crypto-implementation/crypto-implementation\";\nimport { CryptoImplementationService } from \"../crypto-implementation/crypto-implementation.service\";\nimport { KeyImportDto } from \"../dto/key-import.dto\";\nimport { CertEntity, CertificateType } from \"../entities/cert.entity\";\nimport { KeyEntity } from \"../entities/keys.entity\";\nimport { KeyService } from \"../key.service\";\n\n/**\n * The key service is responsible for managing the keys of the issuer.\n */\nexport class DBKeyService extends KeyService {\n    private crypto: CryptoImplementation;\n\n    constructor(\n        configService: ConfigService,\n        private cryptoService: CryptoImplementationService,\n        certRepository: Repository,\n        private keyRepository: Repository,\n    ) {\n        super(configService, certRepository);\n        this.crypto = cryptoService.getCrypto();\n    }\n\n    /**\n     * Import a key into the key service.\n     * @param tenantId\n     * @param body\n     * @returns\n     */\n    import(tenantId: string, body: KeyImportDto): Promise {\n        const privateKey = body.privateKey;\n        return this.keyRepository\n            .save({\n                id: privateKey.kid,\n                tenantId,\n                key: privateKey,\n            })\n            .then(() => privateKey.kid);\n    }\n\n    /**\n     * Get the public key from the private key.\n     * @param privateKey\n     * @returns\n     */\n    private getPubFromPrivateKey(privateKey: JWK_EC_Private): EC_Public {\n        const {\n            d: _d,\n            key_ops: _key_ops,\n            ext: _ext,\n            ...publicKey\n        } = privateKey;\n        return publicKey as EC_Public;\n    }\n\n    /**\n     * Initialize the key service for a specific tenant.\n     * This will create the keys if they do not exist.\n     * @param tenant\n     */\n    init(tenant: string): Promise {\n        return this.getKid(tenant).catch(async () => this.create(tenant));\n    }\n\n    /**\n     * Creates a new keypair and wrtites the private key to the file system.\n     * @param tenantId\n     * @returns key id of the generated key.\n     */\n    async create(tenantId: string): Promise {\n        const keys = await this.crypto.generateKeyPair();\n        const privateKey = keys.privateKey as JWK;\n        //add a random key id for reference\n        privateKey.kid = v4();\n        privateKey.alg = this.crypto.alg;\n\n        //remove exportable and key_ops from the private key\n        delete privateKey.ext;\n        delete privateKey.key_ops;\n\n        return this.keyRepository\n            .save({\n                id: privateKey.kid,\n                tenantId,\n                key: privateKey,\n            })\n            .then(() => privateKey.kid!);\n    }\n\n    /**\n     * Get the signer for the key service\n     */\n    async signer(tenantId: string, keyId?: string): Promise {\n        const privateKey = await this.getPrivateKey(tenantId, keyId);\n        return this.crypto.getSigner(privateKey);\n    }\n\n    /**\n     * Get the keys from the file system or generate them if they do not exist\n     * @returns\n     */\n    private async getPrivateKey(tenantId: string, keyId?: string) {\n        keyId =\n            keyId ||\n            (await this.getKid(tenantId).catch(() => this.create(tenantId)));\n\n        return this.keyRepository\n            .findOneByOrFail({\n                id: keyId,\n                tenantId,\n            })\n            .then((key) => key.key);\n    }\n\n    /**\n     * Gets one key id for the tenant.\n     * If no key exists, it will throw an error.\n     * @returns\n     */\n    getKid(\n        tenantId: string,\n        type: CertificateType = \"signing\",\n    ): Promise {\n        return this.certRepository\n            .findOneByOrFail({\n                tenantId,\n                type,\n            })\n            .then((cert) => cert.id);\n    }\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    getPublicKey(type: \"jwk\", tenantId: string, keyId?: string): Promise;\n    getPublicKey(\n        type: \"pem\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n    async getPublicKey(\n        type: \"pem\" | \"jwk\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise {\n        const privateKey = await this.getPrivateKey(tenantId, keyId);\n\n        // Convert the private key to a public key\n        // First import the private key as a CryptoKey\n        const privateKeyInstance = await importJWK(\n            privateKey,\n            this.cryptoService.getAlg(),\n            { extractable: true },\n        );\n\n        // Export it as a JWK to get the public key components\n        const privateKeyJWK = (await exportJWK(\n            privateKeyInstance,\n        )) as JWK_EC_Private;\n\n        // Remove private key components to get only the public key\n\n        const publicKey = this.getPubFromPrivateKey(privateKeyJWK);\n\n        if (type === \"pem\") {\n            // Import the public key and export as PEM\n            const publicKeyInstance = await importJWK(\n                publicKey,\n                this.cryptoService.getAlg(),\n                { extractable: true },\n            );\n            return exportSPKI(publicKeyInstance as CryptoKey);\n        } else {\n            return publicKey;\n        }\n    }\n\n    async signJWT(\n        payload: JWTPayload,\n        header: JWTHeaderParameters,\n        tenantId: string,\n        keyId?: string,\n    ): Promise {\n        const privateKey = await this.getPrivateKey(tenantId, keyId);\n        const privateKeyInstance = (await importJWK(privateKey)) as CryptoKey;\n        return new SignJWT(payload)\n            .setProtectedHeader(header)\n            .sign(privateKeyInstance);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DCQL.html":{"url":"classes/DCQL.html","title":"class - DCQL","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DCQL\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                credential_set\n                            \n                            \n                                    \n                                    \n                                    \n                                credentials\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        credential_set\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialSetQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        credentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:105\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsOptional()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities?: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { TypeOrmModule, TypeOrmModuleOptions } from \"@nestjs/typeorm\";\nimport { join } from \"path\";\n\n@Module({\n    imports: [\n        TypeOrmModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (\n                configService: ConfigService,\n            ): TypeOrmModuleOptions => {\n                const dbType = configService.get(\n                    \"DB_TYPE\",\n                );\n\n                const commonOptions = {\n                    synchronize: true,\n                    autoLoadEntities: true,\n                };\n\n                if (dbType === \"postgres\") {\n                    return {\n                        type: \"postgres\",\n                        host: configService.getOrThrow(\"DB_HOST\"),\n                        port: configService.getOrThrow(\"DB_PORT\"),\n                        username:\n                            configService.getOrThrow(\"DB_USERNAME\"),\n                        password:\n                            configService.getOrThrow(\"DB_PASSWORD\"),\n                        database:\n                            configService.getOrThrow(\"DB_DATABASE\"),\n                        ...commonOptions,\n                    };\n                }\n\n                return {\n                    type: \"sqlite\",\n                    database: join(\n                        configService.getOrThrow(\"FOLDER\"),\n                        \"service.db\",\n                    ),\n                    ...commonOptions,\n                };\n            },\n        }),\n    ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Display.html":{"url":"classes/Display.html","title":"class - Display","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Display\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                background_color\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                background_image\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                locale\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                logo\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    Optional\n                                text_color\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        background_color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        background_image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DisplayImage\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        locale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        logo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DisplayImage\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        text_color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ApiExtraModels,\n    ApiHideProperty,\n    ApiProperty,\n    getSchemaPath,\n} from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsBoolean,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { Column, Entity, ManyToMany, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { CertEntity } from \"../../../crypto/key/entities/cert.entity\";\nimport { SchemaResponse } from \"../../credentials-metadata/dto/schema-response.dto\";\nimport { VCT } from \"../../credentials-metadata/dto/vct.dto\";\nimport { IssuanceConfig } from \"../../issuance/entities/issuance-config.entity\";\nimport {\n    AllowListPolicy,\n    AttestationBasedPolicy,\n    EmbeddedDisclosurePolicy,\n    NoneTrustPolicy,\n    RootOfTrustPolicy,\n} from \"./policies.dto\";\n\nexport class DisplayImage {\n    @IsString()\n    uri: string;\n}\nexport class Display {\n    @IsString()\n    name: string;\n    @IsString()\n    description: string;\n    @IsString()\n    locale: string;\n    @IsString()\n    background_color?: string;\n    @IsString()\n    text_color?: string;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    background_image?: DisplayImage;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    logo?: DisplayImage;\n}\n\nexport class IssuerMetadataCredentialConfig {\n    @IsString()\n    format: string;\n    @ValidateNested()\n    @Type(() => Display)\n    display: Display[];\n    @IsOptional()\n    @IsString()\n    scope?: string;\n}\n\n@ApiExtraModels(\n    AttestationBasedPolicy,\n    NoneTrustPolicy,\n    AllowListPolicy,\n    RootOfTrustPolicy,\n)\n@Entity()\nexport class CredentialConfig {\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id!: string;\n\n    @IsString()\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId!: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => IssuerMetadataCredentialConfig)\n    config!: IssuerMetadataCredentialConfig;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    claims?: Record;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    disclosureFrame?: Record;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => VCT)\n    @Column(\"json\", { nullable: true })\n    vct?: VCT;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    keyBinding?: boolean;\n\n    @IsOptional()\n    @IsString()\n    keyId?: string;\n\n    @ManyToOne(() => CertEntity)\n    key!: CertEntity;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    statusManagement?: boolean;\n\n    @IsOptional()\n    @Column(\"int\", { nullable: true })\n    @IsNumber()\n    lifeTime?: number;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => SchemaResponse)\n    @Column(\"json\", { nullable: true })\n    schema?: SchemaResponse;\n\n    /**\n     * Embedded disclosure policy (discriminated union by `policy`).\n     * The discriminator makes class-transformer instantiate the right subclass,\n     * and then class-validator runs that subclass’s rules.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(AttestationBasedPolicy) },\n            { $ref: getSchemaPath(NoneTrustPolicy) },\n            { $ref: getSchemaPath(AllowListPolicy) },\n            { $ref: getSchemaPath(RootOfTrustPolicy) },\n        ],\n    })\n    @Type(() => AttestationBasedPolicy, {\n        discriminator: {\n            property: \"policy\",\n            subTypes: [\n                { name: \"none\", value: NoneTrustPolicy },\n                { name: \"allowList\", value: AllowListPolicy },\n                { name: \"rootOfTrust\", value: RootOfTrustPolicy },\n                {\n                    name: \"attestationBased\",\n                    value: AttestationBasedPolicy,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true, // keep `policy` on the instance\n    })\n    @Column(\"json\", { nullable: true })\n    embeddedDisclosurePolicy?: EmbeddedDisclosurePolicy;\n\n    @ManyToMany(\n        () => IssuanceConfig,\n        (issuance) => issuance.credentialConfigs,\n        { cascade: [\"remove\"], onDelete: \"CASCADE\" },\n    )\n    issuanceConfigs!: IssuanceConfig[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DisplayController.html":{"url":"controllers/DisplayController.html","title":"controller - DisplayController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DisplayController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/display.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                display\n            \n\n\n            \n                Description\n            \n            \n                Display Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDisplay\n                            \n                            \n                                    \n                                getDisplay\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDisplay\n                        \n                    \n                \n            \n            \n                \n                        \n                    createDisplay(user: TokenPayload, displayData: DisplayCreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/display/display.controller.ts:38\n                        \n                    \n\n\n            \n                \n                        Create a new display for a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user token payload\n\n                                            \n                                        \n                                        \n                                                displayData\n                                            \n                                                            DisplayCreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The display data to create\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created display information\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getDisplay\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDisplay(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/display/display.controller.ts:27\n                        \n                    \n\n\n            \n                \n                        Get display information for a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user token payload\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The display information\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiSecurity } from \"@nestjs/swagger\";\nimport { JwtAuthGuard } from \"../../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { DisplayService } from \"./display.service\";\nimport { DisplayCreateDto } from \"./dto/display-create.dto\";\n\n/**\n * Display Controller\n */\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"display\")\nexport class DisplayController {\n    /**\n     * Display Controller\n     * @param displayService\n     */\n    constructor(private readonly displayService: DisplayService) {}\n\n    /**\n     * Get display information for a user\n     * @param user The user token payload\n     * @returns The display information\n     */\n    @Get()\n    getDisplay(@Token() user: TokenPayload) {\n        return this.displayService.get(user.sub);\n    }\n\n    /**\n     * Create a new display for a user\n     * @param user The user token payload\n     * @param displayData The display data to create\n     * @returns The created display information\n     */\n    @Post()\n    createDisplay(\n        @Token() user: TokenPayload,\n        @Body() displayData: DisplayCreateDto,\n    ) {\n        return this.displayService.create(user.sub, displayData);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DisplayCreateDto.html":{"url":"classes/DisplayCreateDto.html","title":"class - DisplayCreateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DisplayCreateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/dto/display-create.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(DisplayEntity, [\n    \"tenant\",\n] as const)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { DisplayEntity } from \"../entities/display.entity\";\n\nexport class DisplayCreateDto extends OmitType(DisplayEntity, [\n    \"tenant\",\n] as const) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DisplayEntity.html":{"url":"entities/DisplayEntity.html","title":"entity - DisplayEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DisplayEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/entities/display.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:32\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DisplayInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)@Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:40\n                        \n                    \n\n            \n                \n                    The display information.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiHideProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsString, ValidateNested } from \"class-validator\";\nimport { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\n\nclass DisplayLogo {\n    @IsString()\n    url: string;\n}\nexport class DisplayInfo {\n    @IsString()\n    name: string;\n    @IsString()\n    locale: string;\n\n    @ValidateNested()\n    @Type(() => DisplayLogo)\n    logo: DisplayLogo;\n}\n\n@Entity()\nexport class DisplayEntity {\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * The display information.\n     */\n    @ValidateNested()\n    @Type(() => DisplayInfo)\n    @Column(\"json\")\n    value: DisplayInfo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DisplayImage.html":{"url":"classes/DisplayImage.html","title":"class - DisplayImage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DisplayImage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ApiExtraModels,\n    ApiHideProperty,\n    ApiProperty,\n    getSchemaPath,\n} from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsBoolean,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { Column, Entity, ManyToMany, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { CertEntity } from \"../../../crypto/key/entities/cert.entity\";\nimport { SchemaResponse } from \"../../credentials-metadata/dto/schema-response.dto\";\nimport { VCT } from \"../../credentials-metadata/dto/vct.dto\";\nimport { IssuanceConfig } from \"../../issuance/entities/issuance-config.entity\";\nimport {\n    AllowListPolicy,\n    AttestationBasedPolicy,\n    EmbeddedDisclosurePolicy,\n    NoneTrustPolicy,\n    RootOfTrustPolicy,\n} from \"./policies.dto\";\n\nexport class DisplayImage {\n    @IsString()\n    uri: string;\n}\nexport class Display {\n    @IsString()\n    name: string;\n    @IsString()\n    description: string;\n    @IsString()\n    locale: string;\n    @IsString()\n    background_color?: string;\n    @IsString()\n    text_color?: string;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    background_image?: DisplayImage;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    logo?: DisplayImage;\n}\n\nexport class IssuerMetadataCredentialConfig {\n    @IsString()\n    format: string;\n    @ValidateNested()\n    @Type(() => Display)\n    display: Display[];\n    @IsOptional()\n    @IsString()\n    scope?: string;\n}\n\n@ApiExtraModels(\n    AttestationBasedPolicy,\n    NoneTrustPolicy,\n    AllowListPolicy,\n    RootOfTrustPolicy,\n)\n@Entity()\nexport class CredentialConfig {\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id!: string;\n\n    @IsString()\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId!: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => IssuerMetadataCredentialConfig)\n    config!: IssuerMetadataCredentialConfig;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    claims?: Record;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    disclosureFrame?: Record;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => VCT)\n    @Column(\"json\", { nullable: true })\n    vct?: VCT;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    keyBinding?: boolean;\n\n    @IsOptional()\n    @IsString()\n    keyId?: string;\n\n    @ManyToOne(() => CertEntity)\n    key!: CertEntity;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    statusManagement?: boolean;\n\n    @IsOptional()\n    @Column(\"int\", { nullable: true })\n    @IsNumber()\n    lifeTime?: number;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => SchemaResponse)\n    @Column(\"json\", { nullable: true })\n    schema?: SchemaResponse;\n\n    /**\n     * Embedded disclosure policy (discriminated union by `policy`).\n     * The discriminator makes class-transformer instantiate the right subclass,\n     * and then class-validator runs that subclass’s rules.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(AttestationBasedPolicy) },\n            { $ref: getSchemaPath(NoneTrustPolicy) },\n            { $ref: getSchemaPath(AllowListPolicy) },\n            { $ref: getSchemaPath(RootOfTrustPolicy) },\n        ],\n    })\n    @Type(() => AttestationBasedPolicy, {\n        discriminator: {\n            property: \"policy\",\n            subTypes: [\n                { name: \"none\", value: NoneTrustPolicy },\n                { name: \"allowList\", value: AllowListPolicy },\n                { name: \"rootOfTrust\", value: RootOfTrustPolicy },\n                {\n                    name: \"attestationBased\",\n                    value: AttestationBasedPolicy,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true, // keep `policy` on the instance\n    })\n    @Column(\"json\", { nullable: true })\n    embeddedDisclosurePolicy?: EmbeddedDisclosurePolicy;\n\n    @ManyToMany(\n        () => IssuanceConfig,\n        (issuance) => issuance.credentialConfigs,\n        { cascade: [\"remove\"], onDelete: \"CASCADE\" },\n    )\n    issuanceConfigs!: IssuanceConfig[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DisplayInfo.html":{"url":"classes/DisplayInfo.html","title":"class - DisplayInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DisplayInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/entities/display.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                locale\n                            \n                            \n                                    \n                                    \n                                logo\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        locale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        logo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DisplayLogo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsString, ValidateNested } from \"class-validator\";\nimport { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\n\nclass DisplayLogo {\n    @IsString()\n    url: string;\n}\nexport class DisplayInfo {\n    @IsString()\n    name: string;\n    @IsString()\n    locale: string;\n\n    @ValidateNested()\n    @Type(() => DisplayLogo)\n    logo: DisplayLogo;\n}\n\n@Entity()\nexport class DisplayEntity {\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * The display information.\n     */\n    @ValidateNested()\n    @Type(() => DisplayInfo)\n    @Column(\"json\")\n    value: DisplayInfo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DisplayLogo.html":{"url":"classes/DisplayLogo.html","title":"class - DisplayLogo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DisplayLogo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/entities/display.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsString, ValidateNested } from \"class-validator\";\nimport { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\n\nclass DisplayLogo {\n    @IsString()\n    url: string;\n}\nexport class DisplayInfo {\n    @IsString()\n    name: string;\n    @IsString()\n    locale: string;\n\n    @ValidateNested()\n    @Type(() => DisplayLogo)\n    logo: DisplayLogo;\n}\n\n@Entity()\nexport class DisplayEntity {\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * The display information.\n     */\n    @ValidateNested()\n    @Type(() => DisplayInfo)\n    @Column(\"json\")\n    value: DisplayInfo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DisplayService.html":{"url":"injectables/DisplayService.html","title":"injectable - DisplayService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DisplayService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/display.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Display Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(displayRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/display/display.service.ts:11\n                            \n                        \n\n                \n                    \n                            Display Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        displayRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(tenantId: string, displayData: DisplayCreateDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/display/display.service.ts:38\n                        \n                    \n\n\n            \n                \n                        Create a new display for a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant\n\n                                            \n                                        \n                                        \n                                                displayData\n                                            \n                                                            DisplayCreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The display data to create\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created display information\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/display/display.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Get display information for a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The display information for the tenant\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { DisplayCreateDto } from \"./dto/display-create.dto\";\nimport { DisplayEntity } from \"./entities/display.entity\";\n\n/**\n * Display Service\n */\n@Injectable()\nexport class DisplayService {\n    /**\n     * Display Service\n     * @param displayRepository\n     */\n    constructor(\n        @InjectRepository(DisplayEntity)\n        private readonly displayRepository: Repository,\n    ) {}\n\n    /**\n     * Get display information for a user\n     * @param tenantId The ID of the tenant\n     * @returns The display information for the tenant\n     */\n    get(tenantId: string): Promise {\n        return this.displayRepository.findOne({\n            where: { tenantId },\n        });\n    }\n\n    /**\n     * Create a new display for a user\n     * @param tenantId The ID of the tenant\n     * @param displayData The display data to create\n     * @returns The created display information\n     */\n    create(\n        tenantId: string,\n        displayData: DisplayCreateDto,\n    ): Promise {\n        const displayEntity = this.displayRepository.create({\n            ...displayData,\n            tenantId,\n        });\n        return this.displayRepository.save(displayEntity);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EC_Public.html":{"url":"classes/EC_Public.html","title":"class - EC_Public","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EC_Public\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\nThis class is used to define the structure of EC public keys in JWK format.\n\n            \n\n\n            \n                Implements\n            \n            \n                            JWK_EC_Public\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                crv\n                            \n                            \n                                kty\n                            \n                            \n                                x\n                            \n                            \n                                y\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        crv\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:15\n                        \n                    \n\n            \n                \n                    The algorithm intended for use with the key, such as 'ES256'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        kty\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The key type, which is always 'EC' for Elliptic Curve keys.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        x\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:19\n                        \n                    \n\n            \n                \n                    The x coordinate of the EC public key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        y\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:23\n                        \n                    \n\n            \n                \n                    The y coordinate of the EC public key.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from \"jose\";\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: \"EC\";\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmbeddedDisclosurePolicy.html":{"url":"classes/EmbeddedDisclosurePolicy.html","title":"class - EmbeddedDisclosurePolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmbeddedDisclosurePolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                policy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EncryptionService.html":{"url":"injectables/EncryptionService.html","title":"injectable - EncryptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EncryptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/encryption/encryption.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling encryption and decryption operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decryptJwe\n                            \n                            \n                                getEncryptionPublicKey\n                            \n                            \n                                    Async\n                                onTenantDelete\n                            \n                            \n                                    Async\n                                onTenantInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(keyRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/encryption/encryption.service.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor for the EncryptionService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        keyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decryptJwe\n                        \n                    \n                \n            \n            \n                \n                        \n                    decryptJwe(response: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:54\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Encrypts a response using JWE (JSON Web Encryption).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe response to encrypt.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to encrypt the response.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The encrypted response as a JWE string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEncryptionPublicKey\n                        \n                    \n                \n            \n            \n                \ngetEncryptionPublicKey(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Retrieves the public encryption key for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve the public key.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The public encryption key as a JWK.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Deletes the encryption keys for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to delete the keys.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Initializes the encryption keys for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to initialize the keys.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { exportJWK, generateKeyPair, importJWK, JWK, jwtDecrypt } from \"jose\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { v4 } from \"uuid\";\nimport { KeyEntity } from \"../key/entities/keys.entity\";\n\n/**\n * Service for handling encryption and decryption operations.\n */\n@Injectable()\nexport class EncryptionService {\n    /**\n     * Constructor for the EncryptionService.\n     * @param configService\n     */\n    constructor(\n        @InjectRepository(KeyEntity)\n        private keyRepository: Repository,\n    ) {}\n\n    /**\n     * Initializes the encryption keys for a given tenant.\n     * @param tenantId - The ID of the tenant for which to initialize the keys.\n     */\n    async onTenantInit(tenantId: string) {\n        const privateKey = await generateKeyPair(\"ECDH-ES\", {\n            crv: \"P-256\",\n            extractable: true,\n        }).then(async (secret) => exportJWK(secret.privateKey));\n\n        this.keyRepository.save({\n            id: v4(),\n            tenantId,\n            key: privateKey,\n            usage: \"encrypt\",\n        });\n    }\n\n    /**\n     * Deletes the encryption keys for a given tenant.\n     * @param tenantId - The ID of the tenant for which to delete the keys.\n     */\n    async onTenantDelete(tenantId: string) {\n        await this.keyRepository.delete({ tenantId });\n    }\n\n    /**\n     * Encrypts a response using JWE (JSON Web Encryption).\n     * @param response - The response to encrypt.\n     * @param tenantId - The ID of the tenant for which to encrypt the response.\n     * @returns The encrypted response as a JWE string.\n     */\n    async decryptJwe(response: string, tenantId: string): Promise {\n        const privateEncryptionKey = await this.keyRepository\n            .findOneByOrFail({\n                tenantId,\n                usage: \"encrypt\",\n            })\n            .then(\n                (keyEntity) =>\n                    importJWK(keyEntity.key, \"ECDH-ES\") as Promise,\n            );\n\n        const res = await jwtDecrypt(response, privateEncryptionKey);\n        return res.payload;\n    }\n\n    /**\n     * Retrieves the public encryption key for a given tenant.\n     * @param tenantId - The ID of the tenant for which to retrieve the public key.\n     * @returns The public encryption key as a JWK.\n     */\n    getEncryptionPublicKey(tenantId: string): Promise {\n        return this.keyRepository\n            .findOneByOrFail({\n                tenantId,\n                usage: \"encrypt\",\n            })\n            .then((entry) => {\n                delete entry.key.d;\n                return entry.key;\n            });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/FileEntity.html":{"url":"entities/FileEntity.html","title":"entity - FileEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  FileEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/entities/files.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/storage/entities/files.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/storage/entities/files.entity.ts:19\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/storage/entities/files.entity.ts:13\n                        \n                    \n\n            \n                \n                    Tenant ID for the key.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryColumn } from \"typeorm\";\nimport { TenantEntity } from \"../../auth/entitites/tenant.entity\";\n\n@Entity()\nexport class FileEntity {\n    @PrimaryColumn()\n    id: string;\n\n    /**\n     * Tenant ID for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileStorage.html":{"url":"interfaces/FileStorage.html","title":"interface - FileStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FileStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/storage.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        delete\n                                    \n                                \n                                \n                                    \n                                        exists\n                                    \n                                \n                                \n                                        Optional\n                                    \n                                        getSignedUrl\n                                    \n                                \n                                \n                                    \n                                        getStream\n                                    \n                                \n                                \n                                    \n                                        put\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exists\n                        \n                    \n                \n            \n            \n                \nexists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        getSignedUrl\n                        \n                    \n                \n            \n            \n                \ngetSignedUrl(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStream\n                        \n                    \n                \n            \n            \n                \ngetStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(key: string, body: Buffer | Readable, opts?: PutOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        Buffer | Readable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            PutOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Readable } from \"stream\";\n\nexport type PutOptions = {\n    contentType?: string;\n    metadata?: Record;\n    acl?: \"private\" | \"public\";\n    checksum?: string; // e.g., sha256 base64\n};\n\nexport type StoredObject = {\n    key: string; // canonical key (e.g. \"tenant/2025/08/14/uuid.ext\")\n    etag?: string;\n    size?: number;\n    url?: string; // public URL if ACL=public or a presigned URL\n    contentType?: string;\n    metadata?: Record;\n};\n\nexport interface FileStorage {\n    put(\n        key: string,\n        body: Buffer | Readable,\n        opts?: PutOptions,\n    ): Promise;\n\n    getStream(\n        key: string,\n    ): Promise;\n\n    delete(key: string): Promise;\n\n    exists(key: string): Promise;\n\n    getSignedUrl?(key: string): Promise; // optional for local\n}\n\nexport const FILE_STORAGE = Symbol(\"FILE_STORAGE\");\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUploadDto.html":{"url":"classes/FileUploadDto.html","title":"class - FileUploadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUploadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/dto/file-upload.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', format: 'binary'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/storage/dto/file-upload.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\n\nexport class FileUploadDto {\n    @ApiProperty({ type: \"string\", format: \"binary\" })\n    file: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/files.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                    Async\n                                deleteByTenant\n                            \n                            \n                                getDownloadUrl\n                            \n                            \n                                getStream\n                            \n                            \n                                    Async\n                                saveUserUpload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(storage: FileStorage, fileRepository: Repository, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/storage/files.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        storage\n                                                  \n                                                        \n                                                                        FileStorage\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fileRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:73\n                        \n                    \n\n\n            \n                \n                        Deletes a file from the storage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The unique identifier of the file.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves when the file is deleted.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteByTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteByTenant(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:88\n                        \n                    \n\n\n            \n                \n                        Deletes all files associated with a specific tenant\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant whose files should be deleted.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDownloadUrl\n                        \n                    \n                \n            \n            \n                \ngetDownloadUrl(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStream\n                        \n                    \n                \n            \n            \n                \ngetStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:64\n                        \n                    \n\n\n            \n                \n                        Retrieves a readable stream of the file associated with the given key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The unique identifier of the file.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to a readable stream of the file.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        saveUserUpload\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveUserUpload(tenantId: string, file: Express.Multer.File, isPublic)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:30\n                        \n                    \n\n\n            \n                \n                        Saves a user-uploaded file to the storage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The ID of the tenant uploading the file.\n\n                                            \n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The file to upload.\n\n                                            \n                                        \n                                        \n                                                isPublic\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                            \n                                                    Whether the file should be publicly accessible.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The metadata of the stored file.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { randomUUID } from \"crypto\";\nimport { extname } from \"path\";\nimport { Repository } from \"typeorm\";\nimport {\n    FILE_STORAGE,\n    FileStorage,\n    StoredObject,\n} from \"../storage/storage.types\";\nimport { FileEntity } from \"./entities/files.entity\";\n\n@Injectable()\nexport class FilesService {\n    constructor(\n        @Inject(FILE_STORAGE) private storage: FileStorage,\n        @InjectRepository(FileEntity)\n        private fileRepository: Repository,\n        private configService: ConfigService,\n    ) {}\n\n    /**\n     * Saves a user-uploaded file to the storage.\n     * @param tenantId The ID of the tenant uploading the file.\n     * @param file The file to upload.\n     * @param isPublic Whether the file should be publicly accessible.\n     * @returns The metadata of the stored file.\n     */\n    async saveUserUpload(\n        tenantId: string,\n        file: Express.Multer.File,\n        isPublic = false,\n    ): Promise {\n        const safeExt = extname(file.originalname || \"\")\n            .toLowerCase()\n            .slice(1);\n        const key = `${new Date().toISOString().slice(0, 10)}-${randomUUID()}${safeExt ? \".\" + safeExt : \"\"}`;\n\n        // TODO: add checksum if you want tamper detection:\n        // const checksum = createHash('sha256').update(bufferOrStreamToBuffer(body)).digest('base64');\n\n        const response = await this.storage.put(key, file.buffer, {\n            contentType: file.mimetype,\n            acl: isPublic ? \"public\" : \"private\",\n            metadata: { originalName: file.originalname },\n        });\n        await this.fileRepository.save({\n            id: key,\n            tenantId,\n        });\n        const url = await this.getDownloadUrl(response.key);\n        return {\n            key: response.key,\n            url,\n        };\n    }\n\n    /**\n     * Retrieves a readable stream of the file associated with the given key.\n     * @param key The unique identifier of the file.\n     * @returns A promise that resolves to a readable stream of the file.\n     */\n    getStream(key: string) {\n        return Promise.resolve(this.storage.getStream(key));\n    }\n\n    /**\n     * Deletes a file from the storage.\n     * @param key The unique identifier of the file.\n     * @returns A promise that resolves when the file is deleted.\n     */\n    delete(key: string) {\n        return Promise.resolve(this.storage.delete(key));\n    }\n\n    getDownloadUrl(key: string) {\n        if (this.storage.getSignedUrl) return this.storage.getSignedUrl(key);\n        return Promise.resolve(\n            `${this.configService.get(\"PUBLIC_URL\")}/storage/${key}`,\n        );\n    }\n\n    /**\n     * Deletes all files associated with a specific tenant\n     * @param tenantId The ID of the tenant whose files should be deleted.\n     */\n    async deleteByTenant(tenantId: string) {\n        const files = await this.fileRepository.find({ where: { tenantId } });\n        await Promise.all(files.map((file) => this.storage.delete(file.id)));\n        await this.fileRepository.delete({ tenantId });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GenerateTokenOptions.html":{"url":"interfaces/GenerateTokenOptions.html","title":"interface - GenerateTokenOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GenerateTokenOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            audience\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expiresIn\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            subject\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresIn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresIn:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { jwtVerify, SignJWT } from \"jose\";\nimport { DEFAULT_JWT_SECRET } from \"./auth.module\";\nimport { TokenPayload } from \"./token.decorator\";\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject?: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {\n        if (\n            this.configService.get(\"JWT_SECRET\") === DEFAULT_JWT_SECRET\n        ) {\n            console.warn(\n                \"Using default JWT secret. This is not secure for production environments.\",\n            );\n        }\n    }\n\n    /**\n     * Generate a JWT token for integrated OAuth2 server\n     */\n    async generateToken(\n        payload: TokenPayload,\n        options: GenerateTokenOptions = {},\n    ): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                \"Token generation is not available when using external OIDC provider. Use your external OIDC provider for token generation.\",\n            );\n        }\n\n        const secret = this.configService.getOrThrow(\"JWT_SECRET\");\n        const issuer = this.configService.getOrThrow(\"JWT_ISSUER\");\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow(\"JWT_EXPIRES_IN\");\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: \"HS256\" })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject || payload.sub)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                \"Token verification is handled by external OIDC provider.\",\n            );\n        }\n\n        const secret = this.configService.getOrThrow(\"JWT_SECRET\");\n        const issuer = this.configService.getOrThrow(\"JWT_ISSUER\");\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = (await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: [\"HS256\"],\n            })) as { payload: TokenPayload };\n            return payload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Check if the service is using external OIDC provider\n     */\n    isUsingExternalOIDC(): boolean {\n        return this.configService.get(\"OIDC\") !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n            \n                Description\n            \n            \n                HealthController is responsible for providing health check endpoints.\nIt uses the HealthCheckService to perform checks on the database connection.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        check\n                        \n                    \n                \n            \n            \n                \n                        \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Endpoint to check the health of the service.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport {\n    HealthCheck,\n    HealthCheckService,\n    TypeOrmHealthIndicator,\n} from \"@nestjs/terminus\";\n\n/**\n * HealthController is responsible for providing health check endpoints.\n * It uses the HealthCheckService to perform checks on the database connection.\n */\n@Controller(\"health\")\nexport class HealthController {\n    constructor(\n        private health: HealthCheckService,\n        private db: TypeOrmHealthIndicator,\n    ) {}\n\n    /**\n     * Endpoint to check the health of the service.\n     * @returns\n     */\n    @Get()\n    @HealthCheck()\n    check() {\n        return this.health.check([() => this.db.pingCheck(\"database\")]);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { HealthController } from \"./health.controller\";\n\n@Module({\n    imports: [TerminusModule],\n    controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/IssuanceConfig.html":{"url":"entities/IssuanceConfig.html","title":"entity - IssuanceConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  IssuanceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/entities/issuance-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity to manage issuance configs\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                authenticationConfig\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                batchSize\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                claimsWebhook\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                credentialConfigs\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                dPopRequired\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                notifyWebhook\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        authenticationConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthenticationMethodNone | AuthenticationMethodAuth | AuthenticationMethodPresentation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@ValidateNested()@ApiProperty({oneOf: undefined})@Type(undefined, {discriminator: undefined, keepDiscriminatorProperty: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:114\n                        \n                    \n\n            \n                \n                    Authentication configuration for the issuance process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        batchSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@Column('int', {default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:156\n                        \n                    \n\n            \n                \n                    Value to determine the amount of credentials that are issued in a batch.\nDefault is 1.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        claimsWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:138\n                        \n                    \n\n            \n                \n                    Webhook to receive claims for the issuance process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:123\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credentialConfigs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialConfig[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, credential => credential.issuanceConfigs)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:80\n                        \n                    \n\n            \n                \n                    Links to all credential config bindings that are included in this issuance config.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:70\n                        \n                    \n\n            \n                \n                    Description of the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        dPopRequired\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()@Column('boolean', {default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:164\n                        \n                    \n\n            \n                \n                    Indicates whether DPoP is required for the issuance process. Default value is true.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:49\n                        \n                    \n\n            \n                \n                    Unique identifier for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        notifyWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:147\n                        \n                    \n\n            \n                \n                    Webhook to send the result of the notification response\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:62\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:56\n                        \n                    \n\n            \n                \n                    Tenant ID for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:129\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was last updated.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n    ApiExtraModels,\n    ApiHideProperty,\n    ApiProperty,\n    getSchemaPath,\n} from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsBoolean,\n    IsNumber,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    JoinTable,\n    ManyToMany,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { CredentialConfig } from \"../../credentials/entities/credential.entity\";\nimport {\n    AuthenticationMethod,\n    AuthenticationMethodAuth,\n    AuthenticationMethodNone,\n    AuthenticationMethodPresentation,\n} from \"../dto/authentication-config.dto\";\n\n/**\n * Entity to manage issuance configs\n */\n@ApiExtraModels(\n    AuthenticationMethodNone,\n    AuthenticationMethodAuth,\n    AuthenticationMethodPresentation,\n)\n@Entity()\nexport class IssuanceConfig {\n    /**\n     * Unique identifier for the issuance configuration.\n     */\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id: string;\n\n    /**\n     * Tenant ID for the issuance configuration.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the issuance configuration.\n     */\n    @IsString()\n    @IsOptional()\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    /**\n     * Links to all credential config bindings that are included in this issuance config.\n     */\n    @ManyToMany(\n        () => CredentialConfig,\n        (credential) => credential.issuanceConfigs,\n    )\n    @JoinTable()\n    credentialConfigs: CredentialConfig[];\n\n    /**\n     * Authentication configuration for the issuance process.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(AuthenticationMethodNone) },\n            { $ref: getSchemaPath(AuthenticationMethodAuth) },\n            { $ref: getSchemaPath(AuthenticationMethodPresentation) },\n        ],\n    })\n    @Type(() => AuthenticationMethodNone, {\n        discriminator: {\n            property: \"method\",\n            subTypes: [\n                {\n                    name: AuthenticationMethod.NONE,\n                    value: AuthenticationMethodNone,\n                },\n                {\n                    name: AuthenticationMethod.AUTH,\n                    value: AuthenticationMethodAuth,\n                },\n                {\n                    name: AuthenticationMethod.PRESENTATION_DURING_ISSUANCE,\n                    value: AuthenticationMethodPresentation,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    authenticationConfig:\n        | AuthenticationMethodNone\n        | AuthenticationMethodAuth\n        | AuthenticationMethodPresentation;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Webhook to receive claims for the issuance process.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    @Column(\"json\", { nullable: true })\n    claimsWebhook?: WebhookConfig;\n\n    /**\n     * Webhook to send the result of the notification response\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    @Column(\"json\", { nullable: true })\n    notifyWebhook?: WebhookConfig;\n\n    /**\n     * Value to determine the amount of credentials that are issued in a batch.\n     * Default is 1.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 1 })\n    batchSize?: number;\n\n    /**\n     * Indicates whether DPoP is required for the issuance process. Default value is true.\n     */\n    @IsBoolean()\n    @IsOptional()\n    @Column(\"boolean\", { default: true })\n    dPopRequired?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssuanceController.html":{"url":"controllers/IssuanceController.html","title":"controller - IssuanceController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssuanceController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/issuance.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management/issuance\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    \n                                getIssuanceConfigurations\n                            \n                            \n                                    \n                                storeIssuanceConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteIssuanceConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:54\n                        \n                    \n\n\n            \n                \n                        Deletes an issuance configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getIssuanceConfigurations\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuanceConfigurations(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:28\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storeIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeIssuanceConfiguration(config: IssuanceDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:38\n                        \n                    \n\n\n            \n                \n                        Stores the issuance configuration for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            IssuanceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { ApiSecurity, ApiTags } from \"@nestjs/swagger\";\nimport { JwtAuthGuard } from \"../../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { IssuanceDto } from \"./dto/issuance.dto\";\nimport { IssuanceService } from \"./issuance.service\";\n\n@ApiTags(\"Issuer management\")\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"issuer-management/issuance\")\nexport class IssuanceController {\n    constructor(private readonly issuanceService: IssuanceService) {}\n\n    /**\n     * Returns the issuance configurations for this tenant.\n     * @returns\n     */\n    @Get()\n    getIssuanceConfigurations(@Token() user: TokenPayload) {\n        return this.issuanceService.getIssuanceConfiguration(user.sub);\n    }\n\n    /**\n     * Stores the issuance configuration for this tenant.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storeIssuanceConfiguration(\n        @Body() config: IssuanceDto,\n        @Token() user: TokenPayload,\n    ) {\n        return this.issuanceService.storeIssuanceConfiguration(\n            user.sub,\n            config,\n        );\n    }\n\n    /**\n     * Deletes an issuance configuration.\n     * @param id\n     * @returns\n     */\n    @Delete(\":id\")\n    deleteIssuanceConfiguration(\n        @Param(\"id\") id: string,\n        @Token() user: TokenPayload,\n    ) {\n        return this.issuanceService.deleteIssuanceConfiguration(user.sub, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IssuanceDto.html":{"url":"classes/IssuanceDto.html","title":"class - IssuanceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IssuanceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/issuance.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for mapping issuance configurations.\n\n            \n\n            \n                Extends\n            \n            \n                            OmitType(IssuanceConfig, [\n    \"tenantId\",\n    \"tenant\",\n    \"createdAt\",\n    \"updatedAt\",\n    \"credentialConfigs\",\n] as const)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                credentialConfigIds\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:30\n                        \n                    \n\n            \n                \n                    Ids of the credential configurations associated with this issuance configuration.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { IsArray, IsString } from \"class-validator\";\nimport { IssuanceConfig } from \"../entities/issuance-config.entity\";\n\n/**\n * DTO for mapping credential configurations in issuance.\n */\nexport class CredentialConfigMapping {\n    /**\n     * Unique identifier for the credential configuration.\n     */\n    @IsString()\n    id: string;\n}\n\n/**\n * DTO for mapping issuance configurations.\n */\nexport class IssuanceDto extends OmitType(IssuanceConfig, [\n    \"tenantId\",\n    \"tenant\",\n    \"createdAt\",\n    \"updatedAt\",\n    \"credentialConfigs\",\n] as const) {\n    /**\n     * Ids of the credential configurations associated with this issuance configuration.\n     */\n    @IsArray()\n    credentialConfigIds: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IssuanceService.html":{"url":"injectables/IssuanceService.html","title":"injectable - IssuanceService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IssuanceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/issuance.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing issuance configurations.\nIt provides methods to get, store, and delete issuance configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    Public\n                                getIssuanceConfiguration\n                            \n                            \n                                getIssuanceConfigurationById\n                            \n                            \n                                    Private\n                                    Async\n                                import\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                    Async\n                                onTenantDelete\n                            \n                            \n                                    Async\n                                storeIssuanceConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(issuanceConfigRepo: Repository, credentialsConfigService: CredentialConfigService, configService: ConfigService, logger: PinoLogger, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/issuance/issuance.service.ts:21\n                            \n                        \n\n                \n                    \n                            Constructor for IssuanceService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        issuanceConfigRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialsConfigService\n                                                  \n                                                        \n                                                                        CredentialConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \ndeleteIssuanceConfiguration(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:221\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuanceConfiguration(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:168\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getIssuanceConfigurationById\n                        \n                    \n                \n            \n            \n                \ngetIssuanceConfigurationById(issuanceConfigId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:181\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configuration by ID for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuanceConfigId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Import issuance configurations from the configured folder.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Import issuance configurations and the credential configurations from the configured folder.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:159\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        storeIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeIssuanceConfiguration(tenantId: string, value: IssuanceDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:197\n                        \n                    \n\n\n            \n                \n                        Store the config. If it already exist, overwrite it.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            IssuanceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { plainToClass } from \"class-transformer\";\nimport { validate } from \"class-validator\";\nimport { readdirSync, readFileSync } from \"fs\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { join } from \"path\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { CredentialConfigService } from \"../credentials/credential-config/credential-config.service\";\nimport { CredentialConfig } from \"../credentials/entities/credential.entity\";\nimport { IssuanceDto } from \"./dto/issuance.dto\";\nimport { IssuanceConfig } from \"./entities/issuance-config.entity\";\n\n/**\n * Service for managing issuance configurations.\n * It provides methods to get, store, and delete issuance configurations.\n */\n@Injectable()\nexport class IssuanceService implements OnApplicationBootstrap {\n    /**\n     * Constructor for IssuanceService.\n     * @param issuanceConfigRepo\n     * @param credentialsConfigService\n     */\n    constructor(\n        @InjectRepository(IssuanceConfig)\n        private issuanceConfigRepo: Repository,\n        private credentialsConfigService: CredentialConfigService,\n        private configService: ConfigService,\n        private logger: PinoLogger,\n        private cryptoService: CryptoService,\n    ) {}\n\n    /**\n     * Import issuance configurations and the credential configurations from the configured folder.\n     */\n    async onApplicationBootstrap() {\n        await this.cryptoService.import();\n        await this.credentialsConfigService.import();\n        await this.import();\n    }\n\n    /**\n     * Import issuance configurations from the configured folder.\n     */\n    private async import() {\n        const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n        const subfolder = \"issuance/issuance\";\n        const force = this.configService.get(\"CONFIG_IMPORT_FORCE\");\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            for (const tenant of tenantFolders) {\n                let counter = 0;\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const files = readdirSync(path);\n                for (const file of files) {\n                    const payload = JSON.parse(\n                        readFileSync(join(path, file), \"utf8\"),\n                    );\n\n                    payload.id = file.replace(\".json\", \"\");\n                    const exists = await this.getIssuanceConfigurationById(\n                        payload.id,\n                        tenant.name,\n                    ).catch(() => false);\n                    if (exists && !force) {\n                        continue; // Skip if config already exists and force is not set.\n                    } else if (exists && force) {\n                        //delete old element so removed elements are not present\n                        await this.issuanceConfigRepo.delete({\n                            id: payload.id,\n                            tenantId: tenant.name,\n                        });\n                    }\n\n                    // Validate the payload against IssuanceDto\n                    const issuanceDto = plainToClass(IssuanceDto, payload);\n                    //TOODO: it does not validate the different config options\n                    const validationErrors = await validate(issuanceDto, {\n                        whitelist: true,\n                        forbidUnknownValues: false, // avoid false positives on plain objects\n                        forbidNonWhitelisted: false,\n                        stopAtFirstError: false,\n                    });\n\n                    if (validationErrors.length > 0) {\n                        const extractErrorMessages = (error: any): string[] => {\n                            const messages: string[] = [];\n\n                            // Add constraints from the current level\n                            if (error.constraints) {\n                                messages.push(\n                                    ...Object.values(\n                                        error.constraints as Record,\n                                    ),\n                                );\n                            }\n\n                            // Recursively add constraints from children\n                            if (error.children && error.children.length > 0) {\n                                for (const child of error.children) {\n                                    messages.push(\n                                        ...extractErrorMessages(child),\n                                    );\n                                }\n                            }\n\n                            return messages;\n                        };\n\n                        const errorMessages = validationErrors\n                            .map((error) => {\n                                const messages = extractErrorMessages(error);\n                                return messages.length > 0\n                                    ? `${error.property}: ${messages.join(\", \")}`\n                                    : error.property;\n                            })\n                            .join(\"; \");\n\n                        this.logger.error(\n                            {\n                                event: \"ValidationError\",\n                                file,\n                                tenant: tenant.name,\n                                errors: validationErrors.map((error) => ({\n                                    property: error.property,\n                                    constraints: error.constraints,\n                                    value: error.value,\n                                })),\n                            },\n                            `Validation failed for issuance config ${file} in tenant ${tenant.name}: ${errorMessages}`,\n                        );\n                        continue; // Skip this invalid config\n                    }\n                    await this.storeIssuanceConfiguration(\n                        tenant.name,\n                        issuanceDto,\n                    );\n                    counter++;\n                }\n                this.logger.info(\n                    {\n                        event: \"Import\",\n                    },\n                    `${counter} issuance configs imported for ${tenant.name}`,\n                );\n            }\n        }\n    }\n\n    async onTenantDelete(tenantId: string) {\n        await this.issuanceConfigRepo.delete({ tenantId });\n    }\n\n    /**\n     * Returns the issuance configurations for this tenant.\n     * @param tenantId\n     * @returns\n     */\n    public getIssuanceConfiguration(tenantId: string) {\n        return this.issuanceConfigRepo.find({\n            where: { tenantId },\n            relations: [\"credentialConfigs\"],\n        });\n    }\n\n    /**\n     * Returns the issuance configuration by ID for a given tenant.\n     * @param issuanceConfigId\n     * @param tenantId\n     * @returns\n     */\n    getIssuanceConfigurationById(\n        issuanceConfigId: string,\n        tenantId: string,\n    ): Promise {\n        return this.issuanceConfigRepo.findOneOrFail({\n            where: { id: issuanceConfigId, tenantId },\n            relations: [\"credentialConfigs\"],\n        });\n    }\n\n    /**\n     * Store the config. If it already exist, overwrite it.\n     * @param tenantId\n     * @param value\n     * @returns\n     */\n    async storeIssuanceConfiguration(tenantId: string, value: IssuanceDto) {\n        const credentials: CredentialConfig[] = [];\n        //check if all credential configs exist\n        for (const credentialConfigId of value.credentialConfigIds) {\n            const credential = await this.credentialsConfigService.getById(\n                tenantId,\n                credentialConfigId,\n            );\n            credentials.push(credential);\n        }\n        const issuanceConfig = await this.issuanceConfigRepo.save({\n            ...value,\n            tenantId,\n            credentialConfigs: credentials,\n        });\n        return issuanceConfig;\n    }\n\n    /**\n     * Deletes a credential configuration.\n     * @param tenantId\n     * @param id\n     * @returns\n     */\n    deleteIssuanceConfiguration(tenantId: string, id: string) {\n        return this.issuanceConfigRepo.delete({ tenantId, id });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssuerManagementController.html":{"url":"controllers/IssuerManagementController.html","title":"controller - IssuerManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssuerManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuer-management/issuer-management.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(res: Response, body: OfferRequestDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@ApiBody({type: OfferRequestDto, examples: undefined})@Post('offer')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuer-management/issuer-management.controller.ts:83\n                        \n                    \n\n\n            \n                \n                        Create an offer for a credential.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            OfferRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Res, UseGuards } from \"@nestjs/common\";\nimport {\n    ApiBody,\n    ApiProduces,\n    ApiResponse,\n    ApiSecurity,\n    ApiTags,\n} from \"@nestjs/swagger\";\nimport { Response } from \"express\";\nimport * as QRCode from \"qrcode\";\nimport { JwtAuthGuard } from \"../../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { Oid4vciService } from \"../../issuer/oid4vci/oid4vci.service\";\nimport { ResponseType } from \"../../verifier/oid4vp/dto/presentation-request.dto\";\nimport {\n    OfferRequestDto,\n    OfferResponse,\n} from \"../oid4vci/dto/offer-request.dto\";\n\n@ApiTags(\"Issuer management\")\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"issuer-management\")\nexport class IssuerManagementController {\n    constructor(private readonly oid4vciService: Oid4vciService) {}\n\n    /**\n     * Create an offer for a credential.\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: \"JSON response\",\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            \"application/json\": { schema: { type: \"object\" } },\n            \"image/png\": { schema: { type: \"string\", format: \"binary\" } },\n        },\n    })\n    @ApiProduces(\"application/json\", \"image/png\")\n    @ApiBody({\n        type: OfferRequestDto,\n        examples: {\n            qrcode: {\n                summary: \"QR-Code Example\",\n                value: {\n                    response_type: ResponseType.QRCode,\n                    issuanceId: \"pid\",\n                } as OfferRequestDto,\n            },\n            uri: {\n                summary: \"URI\",\n                value: {\n                    response_type: ResponseType.URI,\n                    issuanceId: \"pid\",\n                } as OfferRequestDto,\n            },\n            authfixed: {\n                summary: \"Auth flow with fixed session\",\n                value: {\n                    response_type: ResponseType.QRCode,\n                    issuanceId: \"pid\",\n                    session: \"fd3ebf28-8ad6-4909-8a7a-a739c2c412c0\",\n                } as OfferRequestDto,\n            },\n            override: {\n                summary: \"Override\",\n                value: {\n                    response_type: ResponseType.QRCode,\n                    issuanceId: \"pid-none\",\n                    claims: {\n                        pid: {\n                            given_name: \"Max\",\n                        },\n                    },\n                } as OfferRequestDto,\n            },\n        },\n    })\n    @Post(\"offer\")\n    async getOffer(\n        @Res() res: Response,\n        @Body() body: OfferRequestDto,\n        @Token() user: TokenPayload,\n    ) {\n        // For now, we'll just pass the body to the service as before\n        // You can modify the service later to accept user information if needed\n        const values = await this.oid4vciService.createOffer(\n            body,\n            user,\n            user.sub,\n        );\n\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader(\"Content-Type\", \"image/png\");\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IssuerMetadata.html":{"url":"interfaces/IssuerMetadata.html","title":"interface - IssuerMetadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IssuerMetadata\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/dto/issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the issuer metadata.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            issuer\n                                        \n                                \n                                \n                                        \n                                            jwks\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        issuer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        issuer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The issuer identifier, typically a URL.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwks\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwks:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { JWK } from \"jose\";\n\n/**\n * Interface representing the issuer metadata.\n */\nexport interface IssuerMetadata {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    issuer: string;\n    /**\n     * The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n     */\n    jwks: {\n        /**\n         * List of keys in the JWKS.\n         */\n        keys: JWK[];\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IssuerMetadataCredentialConfig.html":{"url":"classes/IssuerMetadataCredentialConfig.html","title":"class - IssuerMetadataCredentialConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IssuerMetadataCredentialConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                display\n                            \n                            \n                                    \n                                format\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                scope\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        display\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Display[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        format\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:63\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ApiExtraModels,\n    ApiHideProperty,\n    ApiProperty,\n    getSchemaPath,\n} from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsBoolean,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { Column, Entity, ManyToMany, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { CertEntity } from \"../../../crypto/key/entities/cert.entity\";\nimport { SchemaResponse } from \"../../credentials-metadata/dto/schema-response.dto\";\nimport { VCT } from \"../../credentials-metadata/dto/vct.dto\";\nimport { IssuanceConfig } from \"../../issuance/entities/issuance-config.entity\";\nimport {\n    AllowListPolicy,\n    AttestationBasedPolicy,\n    EmbeddedDisclosurePolicy,\n    NoneTrustPolicy,\n    RootOfTrustPolicy,\n} from \"./policies.dto\";\n\nexport class DisplayImage {\n    @IsString()\n    uri: string;\n}\nexport class Display {\n    @IsString()\n    name: string;\n    @IsString()\n    description: string;\n    @IsString()\n    locale: string;\n    @IsString()\n    background_color?: string;\n    @IsString()\n    text_color?: string;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    background_image?: DisplayImage;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    logo?: DisplayImage;\n}\n\nexport class IssuerMetadataCredentialConfig {\n    @IsString()\n    format: string;\n    @ValidateNested()\n    @Type(() => Display)\n    display: Display[];\n    @IsOptional()\n    @IsString()\n    scope?: string;\n}\n\n@ApiExtraModels(\n    AttestationBasedPolicy,\n    NoneTrustPolicy,\n    AllowListPolicy,\n    RootOfTrustPolicy,\n)\n@Entity()\nexport class CredentialConfig {\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id!: string;\n\n    @IsString()\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId!: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => IssuerMetadataCredentialConfig)\n    config!: IssuerMetadataCredentialConfig;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    claims?: Record;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    disclosureFrame?: Record;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => VCT)\n    @Column(\"json\", { nullable: true })\n    vct?: VCT;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    keyBinding?: boolean;\n\n    @IsOptional()\n    @IsString()\n    keyId?: string;\n\n    @ManyToOne(() => CertEntity)\n    key!: CertEntity;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    statusManagement?: boolean;\n\n    @IsOptional()\n    @Column(\"int\", { nullable: true })\n    @IsNumber()\n    lifeTime?: number;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => SchemaResponse)\n    @Column(\"json\", { nullable: true })\n    schema?: SchemaResponse;\n\n    /**\n     * Embedded disclosure policy (discriminated union by `policy`).\n     * The discriminator makes class-transformer instantiate the right subclass,\n     * and then class-validator runs that subclass’s rules.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(AttestationBasedPolicy) },\n            { $ref: getSchemaPath(NoneTrustPolicy) },\n            { $ref: getSchemaPath(AllowListPolicy) },\n            { $ref: getSchemaPath(RootOfTrustPolicy) },\n        ],\n    })\n    @Type(() => AttestationBasedPolicy, {\n        discriminator: {\n            property: \"policy\",\n            subTypes: [\n                { name: \"none\", value: NoneTrustPolicy },\n                { name: \"allowList\", value: AllowListPolicy },\n                { name: \"rootOfTrust\", value: RootOfTrustPolicy },\n                {\n                    name: \"attestationBased\",\n                    value: AttestationBasedPolicy,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true, // keep `policy` on the instance\n    })\n    @Column(\"json\", { nullable: true })\n    embeddedDisclosurePolicy?: EmbeddedDisclosurePolicy;\n\n    @ManyToMany(\n        () => IssuanceConfig,\n        (issuance) => issuance.credentialConfigs,\n        { cascade: [\"remove\"], onDelete: \"CASCADE\" },\n    )\n    issuanceConfigs!: IssuanceConfig[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IssuerModule.html":{"url":"modules/IssuerModule.html","title":"module - IssuerModule","body":"\n                   \n\n\n\n\n    Modules\n    IssuerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_providers\n\n\n\ncluster_IssuerModule_imports\n\n\n\ncluster_IssuerModule_exports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nCredentialConfigService \n\nCredentialConfigService \n\nCredentialConfigService  -->\n\nIssuerModule->CredentialConfigService \n\n\n\n\n\nIssuanceService \n\nIssuanceService \n\nIssuanceService  -->\n\nIssuerModule->IssuanceService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialConfigService\n\nCredentialConfigService\n\nIssuerModule -->\n\nCredentialConfigService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nDisplayService\n\nDisplayService\n\nIssuerModule -->\n\nDisplayService->IssuerModule\n\n\n\n\n\nIssuanceService\n\nIssuanceService\n\nIssuerModule -->\n\nIssuanceService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nIssuerModule -->\n\nSessionLoggerInterceptor->IssuerModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nIssuerModule -->\n\nSessionLoggerService->IssuerModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nIssuerModule -->\n\nWebhookService->IssuerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/issuer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            CredentialConfigService\n                        \n                        \n                            CredentialsService\n                        \n                        \n                            DisplayService\n                        \n                        \n                            IssuanceService\n                        \n                        \n                            Oid4vciService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                        \n                            WebhookService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vciController\n                        \n                        \n                            AuthorizeController\n                        \n                        \n                            CredentialsController\n                        \n                        \n                            IssuerManagementController\n                        \n                        \n                            IssuanceController\n                        \n                        \n                            CredentialsMetadataController\n                        \n                        \n                            DisplayController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            CredentialConfigService\n                        \n                        \n                            IssuanceService\n                        \n                        \n                            Oid4vciService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { Module } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { setGlobalConfig } from \"@openid4vc/openid4vci\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { SessionModule } from \"../session/session.module\";\nimport { SessionLoggerInterceptor } from \"../utils/logger/session-logger.interceptor\";\nimport { SessionLoggerService } from \"../utils/logger/session-logger.service\";\nimport { WebhookService } from \"../utils/webhook/webhook.service\";\nimport { Oid4vpModule } from \"../verifier/oid4vp/oid4vp.module\";\nimport { AuthorizeController } from \"./authorize/authorize.controller\";\nimport { AuthorizeService } from \"./authorize/authorize.service\";\nimport { CredentialConfigService } from \"./credentials/credential-config/credential-config.service\";\nimport { CredentialsController } from \"./credentials/credentials.controller\";\nimport { CredentialsService } from \"./credentials/credentials.service\";\nimport { CredentialConfig } from \"./credentials/entities/credential.entity\";\nimport { CredentialsMetadataController } from \"./credentials-metadata/credentials-metadata.controller\";\nimport { DisplayController } from \"./display/display.controller\";\nimport { DisplayService } from \"./display/display.service\";\nimport { DisplayEntity } from \"./display/entities/display.entity\";\nimport { IssuanceConfig } from \"./issuance/entities/issuance-config.entity\";\nimport { IssuanceController } from \"./issuance/issuance.controller\";\nimport { IssuanceService } from \"./issuance/issuance.service\";\nimport { IssuerManagementController } from \"./issuer-management/issuer-management.controller\";\nimport { Oid4vciController } from \"./oid4vci/oid4vci.controller\";\nimport { Oid4vciService } from \"./oid4vci/oid4vci.service\";\nimport { StatusListModule } from \"./status-list/status-list.module\";\n\n@Module({\n    imports: [\n        CryptoModule,\n        StatusListModule,\n        Oid4vpModule,\n        SessionModule,\n        HttpModule,\n        TypeOrmModule.forFeature([\n            IssuanceConfig,\n            CredentialConfig,\n            DisplayEntity,\n        ]),\n    ],\n    controllers: [\n        Oid4vciController,\n        AuthorizeController,\n        CredentialsController,\n        IssuerManagementController,\n        IssuanceController,\n        CredentialsMetadataController,\n        DisplayController,\n    ],\n    providers: [\n        AuthorizeService,\n        CredentialsService,\n        Oid4vciService,\n        SessionLoggerService,\n        SessionLoggerInterceptor,\n        IssuanceService,\n        CredentialConfigService,\n        WebhookService,\n        DisplayService,\n    ],\n    exports: [\n        AuthorizeService,\n        Oid4vciService,\n        IssuanceService,\n        CredentialConfigService,\n    ],\n})\nexport class IssuerModule {\n    constructor(configService: ConfigService) {\n        const unsecure = configService\n            .getOrThrow(\"PUBLIC_URL\")\n            .startsWith(\"http://\");\n        setGlobalConfig({ allowInsecureUrls: unsecure });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwksResponseDto.html":{"url":"classes/JwksResponseDto.html","title":"class - JwksResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwksResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                keys\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    An array of EC public keys in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from \"jose\";\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: \"EC\";\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard(\"jwt\")\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.guard.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { AuthGuard } from \"@nestjs/passport\";\nimport { IS_PUBLIC_KEY } from \"./public.decorator\";\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard(\"jwt\") {\n    constructor(private reflector: Reflector) {\n        super();\n    }\n\n    canActivate(context: ExecutionContext) {\n        const isPublic = this.reflector.getAllAndOverride(\n            IS_PUBLIC_KEY,\n            [context.getHandler(), context.getClass()],\n        );\n        if (isPublic) {\n            return true;\n        }\n        return super.canActivate(context);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtService.html":{"url":"injectables/JwtService.html","title":"injectable - JwtService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                isUsingExternalOIDC\n                            \n                            \n                                    Async\n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(payload: TokenPayload, options: GenerateTokenOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Generate a JWT token for integrated OAuth2 server\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                options\n                                            \n                                                            GenerateTokenOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isUsingExternalOIDC\n                        \n                    \n                \n            \n            \n                \nisUsingExternalOIDC()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:91\n                        \n                    \n\n\n            \n                \n                        Check if the service is using external OIDC provider\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:65\n                        \n                    \n\n\n            \n                \n                        Verify a JWT token (for additional validation if needed)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { jwtVerify, SignJWT } from \"jose\";\nimport { DEFAULT_JWT_SECRET } from \"./auth.module\";\nimport { TokenPayload } from \"./token.decorator\";\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject?: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {\n        if (\n            this.configService.get(\"JWT_SECRET\") === DEFAULT_JWT_SECRET\n        ) {\n            console.warn(\n                \"Using default JWT secret. This is not secure for production environments.\",\n            );\n        }\n    }\n\n    /**\n     * Generate a JWT token for integrated OAuth2 server\n     */\n    async generateToken(\n        payload: TokenPayload,\n        options: GenerateTokenOptions = {},\n    ): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                \"Token generation is not available when using external OIDC provider. Use your external OIDC provider for token generation.\",\n            );\n        }\n\n        const secret = this.configService.getOrThrow(\"JWT_SECRET\");\n        const issuer = this.configService.getOrThrow(\"JWT_ISSUER\");\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow(\"JWT_EXPIRES_IN\");\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: \"HS256\" })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject || payload.sub)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                \"Token verification is handled by external OIDC provider.\",\n            );\n        }\n\n        const secret = this.configService.getOrThrow(\"JWT_SECRET\");\n        const issuer = this.configService.getOrThrow(\"JWT_ISSUER\");\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = (await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: [\"HS256\"],\n            })) as { payload: TokenPayload };\n            return payload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Check if the service is using external OIDC provider\n     */\n    isUsingExternalOIDC(): boolean {\n        return this.configService.get(\"OIDC\") !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, \"jwt\")\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Private\n                                    Static\n                                getExternalOIDCConfig\n                            \n                            \n                                    Private\n                                    Static\n                                getIntegratedOAuth2Config\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(req: any, options?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getExternalOIDCConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getExternalOIDCConfig(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         { secretOrKeyProvider: any; jwtFromRequest: any; algorithms: {}; issuer: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getIntegratedOAuth2Config\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIntegratedOAuth2Config(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: TokenPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:79\n                        \n                    \n\n\n            \n                \n                        Validate the JWT payload. It will also check if the client is set up.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The JWT payload\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The validated payload or an error\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { passportJwtSecret } from \"jwks-rsa\";\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\nimport { TokenPayload } from \"./token.decorator\";\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, \"jwt\") {\n    constructor(private configService: ConfigService) {\n        const useExternalOIDC = configService.get(\"OIDC\");\n\n        const config = useExternalOIDC\n            ? JwtStrategy.getExternalOIDCConfig(configService)\n            : JwtStrategy.getIntegratedOAuth2Config(configService);\n        super(config);\n    }\n\n    // Override authenticate to add debugging\n    authenticate(req: any, options?: any) {\n        return super.authenticate(req, {\n            ...options,\n            failWithError: true, // This will throw errors instead of just returning 401\n        });\n    }\n\n    private static getExternalOIDCConfig(configService: ConfigService) {\n        const keycloakIssuerUrl = configService.get(\"OIDC_INTERNAL_ISSUER_URL\");\n        const jwksUri = `${keycloakIssuerUrl}/protocol/openid-connect/certs`;\n\n        return {\n            secretOrKeyProvider: passportJwtSecret({\n                cache: true,\n                rateLimit: true,\n                jwksRequestsPerMinute: 5,\n                jwksUri: jwksUri,\n                handleSigningKeyError: (err, cb) => {\n                    console.error(\"❌ Keycloak JWKS error:\", err);\n                    if (err instanceof Error) {\n                        return cb(err);\n                    }\n                    return cb(\n                        new Error(\n                            \"Could not get the signing key from Keycloak\",\n                        ),\n                    );\n                },\n            }),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: [configService.get(\"OIDC_ALGORITHM\")],\n            issuer: keycloakIssuerUrl,\n        };\n    }\n\n    private static getIntegratedOAuth2Config(\n        configService: ConfigService,\n    ): any {\n        const config = {\n            secretOrKey: configService.get(\"JWT_SECRET\"),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: [\"HS256\"], // Using symmetric key for integrated OAuth2\n            ignoreExpiration: false, // Ensure tokens expire\n        };\n\n        // Add issuer validation only if JWT_ISSUER is configured\n        const issuer = configService.get(\"JWT_ISSUER\");\n        if (issuer) {\n            (config as any).issuer = issuer;\n        }\n\n        return config;\n    }\n\n    /**\n     * Validate the JWT payload. It will also check if the client is set up.\n     * @param payload The JWT payload\n     * @returns The validated payload or an error\n     */\n    validate(payload: TokenPayload): any {\n        const useExternalOIDC =\n            this.configService.get(\"OIDC\") !== undefined;\n        let sub = payload.sub;\n        if (useExternalOIDC) {\n            const key = this.configService.getOrThrow(\"OIDC_SUB\");\n            sub = (payload as any)[key] as string;\n        }\n\n        return { sub, admin: payload.admin || false };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Key.html":{"url":"classes/Key.html","title":"class - Key","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Key\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-import.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        JWK\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                alg\n                            \n                            \n                                    \n                                crv\n                            \n                            \n                                    \n                                d\n                            \n                            \n                                    \n                                kid\n                            \n                            \n                                    \n                                kty\n                            \n                            \n                                    \n                                x\n                            \n                            \n                                    \n                                y\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        alg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        crv\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        d\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        kid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        kty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(['EC'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        x\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        y\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsEnum, IsOptional, IsString, ValidateNested } from \"class-validator\";\nimport { JWK } from \"jose\";\n\nclass Key implements JWK {\n    @IsString()\n    kid: string; // Key ID\n    @IsEnum([\"EC\"])\n    kty: string; // Key Type\n    @IsString()\n    x: string; // X coordinate for EC keys\n    @IsString()\n    y: string; // Y coordinate for EC keys\n    @IsString()\n    crv: string; // Curve name for EC keys\n    @IsString()\n    d: string; // Private key value for EC keys\n    @IsString()\n    alg: string; // Algorithm used with the key\n}\n\n/**\n * DTO for importing a key.\n */\nexport class KeyImportDto {\n    /**\n     * The private key in JWK format.\n     */\n    @ValidateNested()\n    @Type(() => Key)\n    privateKey: Key;\n\n    /**\n     * Optional certificate in PEM format.\n     */\n    @IsString()\n    @IsOptional()\n    crt?: string;\n\n    /**\n     * Description of the key.\n     */\n    @IsString()\n    @IsOptional()\n    description?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/KeyController.html":{"url":"controllers/KeyController.html","title":"controller - KeyController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  KeyController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/key.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                key\n            \n\n\n            \n                Description\n            \n            \n                KeyController is responsible for managing keys in the system.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                addKey\n                            \n                            \n                                    \n                                deleteKey\n                            \n                            \n                                    \n                                getKeys\n                            \n                            \n                                    \n                                    Async\n                                updateKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        addKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    addKey(token: TokenPayload, body: KeyImportDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:51\n                        \n                    \n\n\n            \n                \n                        Add a new key to the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            KeyImportDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteKey(token: TokenPayload, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:82\n                        \n                    \n\n\n            \n                \n                        Delete a key from the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getKeys\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKeys(token: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:39\n                        \n                    \n\n\n            \n                \n                        Get all keys for the tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateKey(token: TokenPayload, id: string, body: UpdateKeyDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:67\n                        \n                    \n\n\n            \n                \n                        Updates an existing key in the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            UpdateKeyDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Inject,\n    Param,\n    Post,\n    Put,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { ApiSecurity } from \"@nestjs/swagger\";\nimport { JwtAuthGuard } from \"../../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { CryptoService } from \"../crypto.service\";\nimport { KeyImportDto } from \"./dto/key-import.dto\";\nimport { UpdateKeyDto } from \"./dto/key-update.dto\";\nimport { CertEntity } from \"./entities/cert.entity\";\nimport { KeyService } from \"./key.service\";\n\n/**\n * KeyController is responsible for managing keys in the system.\n */\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"key\")\nexport class KeyController {\n    constructor(\n        @Inject(\"KeyService\") public readonly keyService: KeyService,\n        private cryptoService: CryptoService,\n    ) {}\n\n    /**\n     * Get all keys for the tenant.\n     * @param token\n     * @returns\n     */\n    @Get()\n    getKeys(@Token() token: TokenPayload): Promise {\n        const tenantId = token.sub;\n        return this.cryptoService.getCerts(tenantId);\n    }\n\n    /**\n     * Add a new key to the key service.\n     * @param token\n     * @param body\n     * @returns\n     */\n    @Post()\n    async addKey(\n        @Token() token: TokenPayload,\n        @Body() body: KeyImportDto,\n    ): Promise {\n        const tenantId = token.sub;\n        const id = await this.cryptoService.importKey(tenantId, body);\n        return { id };\n    }\n\n    /**\n     * Updates an existing key in the key service.\n     * @param token\n     * @param id\n     * @param body\n     */\n    @Put(\":id\")\n    async updateKey(\n        @Token() token: TokenPayload,\n        @Param(\"id\") id: string,\n        @Body() body: UpdateKeyDto,\n    ): Promise {\n        const tenantId = token.sub;\n        await this.cryptoService.updateCert(tenantId, id, body);\n    }\n\n    /**\n     * Delete a key from the key service.\n     * @param token\n     * @param id\n     */\n    @Delete(\":id\")\n    deleteKey(@Token() token: TokenPayload, @Param(\"id\") id: string) {\n        return this.cryptoService.deleteKey(token.sub, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/KeyEntity.html":{"url":"entities/KeyEntity.html","title":"entity - KeyEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  KeyEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/entities/keys.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                key\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                usage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:16\n                        \n                    \n\n            \n                \n                    Unique identifier for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JWK\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:34\n                        \n                    \n\n            \n                \n                    The key material.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:28\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:22\n                        \n                    \n\n            \n                \n                    Tenant ID for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        usage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KeyUsage\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {default: 'sign'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:40\n                        \n                    \n\n            \n                \n                    The usage type of the key.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { JWK } from \"jose\";\nimport { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\n\n/**\n * Key usage types.\n */\nexport type KeyUsage = \"sign\" | \"encrypt\";\n\n@Entity()\nexport class KeyEntity {\n    /**\n     * Unique identifier for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    id: string;\n\n    /**\n     * Tenant ID for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * The key material.\n     */\n    @Column(\"json\")\n    key: JWK;\n\n    /**\n     * The usage type of the key.\n     */\n    @Column(\"varchar\", { default: \"sign\" })\n    usage: KeyUsage;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyImportDto.html":{"url":"classes/KeyImportDto.html","title":"class - KeyImportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyImportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-import.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for importing a key.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                crt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                privateKey\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        crt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:38\n                        \n                    \n\n            \n                \n                    Optional certificate in PEM format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:45\n                        \n                    \n\n            \n                \n                    Description of the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        privateKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Key\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:31\n                        \n                    \n\n            \n                \n                    The private key in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsEnum, IsOptional, IsString, ValidateNested } from \"class-validator\";\nimport { JWK } from \"jose\";\n\nclass Key implements JWK {\n    @IsString()\n    kid: string; // Key ID\n    @IsEnum([\"EC\"])\n    kty: string; // Key Type\n    @IsString()\n    x: string; // X coordinate for EC keys\n    @IsString()\n    y: string; // Y coordinate for EC keys\n    @IsString()\n    crv: string; // Curve name for EC keys\n    @IsString()\n    d: string; // Private key value for EC keys\n    @IsString()\n    alg: string; // Algorithm used with the key\n}\n\n/**\n * DTO for importing a key.\n */\nexport class KeyImportDto {\n    /**\n     * The private key in JWK format.\n     */\n    @ValidateNested()\n    @Type(() => Key)\n    privateKey: Key;\n\n    /**\n     * Optional certificate in PEM format.\n     */\n    @IsString()\n    @IsOptional()\n    crt?: string;\n\n    /**\n     * Description of the key.\n     */\n    @IsString()\n    @IsOptional()\n    description?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KeyModule.html":{"url":"modules/KeyModule.html","title":"module - KeyModule","body":"\n                   \n\n\n\n\n    Modules\n    KeyModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/key/key.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.module.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { HttpModule, HttpService } from \"@nestjs/axios\";\nimport { DynamicModule, Global, Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { getRepositoryToken, TypeOrmModule } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { DBKeyService } from \"./adapters/db-key.service\";\nimport { VaultKeyService } from \"./adapters/vault-key.service\";\nimport { CryptoImplementatationModule } from \"./crypto-implementation/crypto-implementation.module\";\nimport { CryptoImplementationService } from \"./crypto-implementation/crypto-implementation.service\";\nimport { CertEntity } from \"./entities/cert.entity\";\nimport { KeyEntity } from \"./entities/keys.entity\";\n\n@Global()\n@Module({})\nexport class KeyModule {\n    static forRoot(): DynamicModule {\n        return {\n            module: KeyModule,\n            imports: [\n                HttpModule,\n                ConfigModule,\n                CryptoImplementatationModule,\n                TypeOrmModule.forFeature([CertEntity, KeyEntity]),\n            ],\n            providers: [\n                {\n                    provide: \"KeyService\",\n                    useFactory: (\n                        configService: ConfigService,\n                        httpService: HttpService,\n                        cryptoService: CryptoImplementationService,\n                        certRepository: Repository,\n                        keyRepository: Repository,\n                    ) => {\n                        const kmType = configService.get(\n                            \"KM_TYPE\",\n                        );\n                        if (kmType === \"vault\") {\n                            return new VaultKeyService(\n                                httpService,\n                                configService,\n                                cryptoService,\n                                certRepository,\n                            );\n                        }\n\n                        return new DBKeyService(\n                            configService,\n                            cryptoService,\n                            certRepository,\n                            keyRepository,\n                        );\n                    },\n                    inject: [\n                        ConfigService,\n                        HttpService,\n                        CryptoImplementationService,\n                        getRepositoryToken(CertEntity),\n                        getRepositoryToken(KeyEntity),\n                    ],\n                },\n            ],\n            exports: [\"KeyService\"],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyObj.html":{"url":"classes/KeyObj.html","title":"class - KeyObj","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyObj\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-object.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a key entity with its unique identifier, public key, and certificate.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                crt\n                            \n                            \n                                id\n                            \n                            \n                                publicKey\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        crt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-object.dto.ts:19\n                        \n                    \n\n            \n                \n                    Certificate in PEM format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-object.dto.ts:11\n                        \n                    \n\n            \n                \n                    Unique identifier for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        publicKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EC_Public\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-object.dto.ts:15\n                        \n                    \n\n            \n                \n                    Public key in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EC_Public } from \"../../../well-known/dto/jwks-response.dto\";\n\n/**\n * Represents a key entity with its unique identifier, public key, and certificate.\n */\n\nexport class KeyObj {\n    /**\n     * Unique identifier for the key.\n     */\n    id: string;\n    /**\n     * Public key in JWK format.\n     */\n    publicKey: EC_Public;\n    /**\n     * Certificate in PEM format.\n     */\n    crt: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyResponseDto.html":{"url":"classes/KeyResponseDto.html","title":"class - KeyResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                keys\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EC_Public[]\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EC_Public } from \"../../../well-known/dto/jwks-response.dto\";\n\nexport class KeyResponseDto {\n    keys: EC_Public[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyService.html":{"url":"classes/KeyService.html","title":"class - KeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface for a key service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                create\n                            \n                            \n                                    Protected\n                                getCertificate\n                            \n                            \n                                    Abstract\n                                getKid\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                import\n                            \n                            \n                                    Abstract\n                                init\n                            \n                            \n                                    Abstract\n                                signer\n                            \n                            \n                                    Abstract\n                                signJWT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, certRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/key.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        certRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(tenantId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:30\n                        \n                    \n\n\n            \n                \n                        Creates a new keypair\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                key id of the generated key.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCertificate(tenantId: string, keyId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:85\n                        \n                    \n\n\n            \n                \n                        Get the certificate for the given key id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getKid\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKid(tenantId: string, type?: CertificateType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Get the key id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                            CertificateType\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:55\n                        \n                    \n\n\n            \n                \n                        Get the public key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"pem\" | \"jwk\", tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"pem\" | \"jwk\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import(tenantId: string, body: KeyImportDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Import a key into the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            KeyImportDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:23\n                        \n                    \n\n\n            \n                \n                        Initialize the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                key id of the initialized key.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signer\n                        \n                    \n                \n            \n            \n                \n                        \n                    signer(tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:43\n                        \n                    \n\n\n            \n                \n                        Get the callback for the signer function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JWTPayload, header: JoseHeaderParameters, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JoseHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConflictException } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { Signer } from \"@sd-jwt/types\";\nimport { JoseHeaderParameters, JWK, JWTPayload } from \"jose\";\nimport { Repository } from \"typeorm\";\nimport { KeyImportDto } from \"./dto/key-import.dto\";\nimport { CertEntity, CertificateType } from \"./entities/cert.entity\";\n\n/**\n * Generic interface for a key service\n */\nexport abstract class KeyService {\n    constructor(\n        protected configService: ConfigService,\n        protected certRepository: Repository,\n    ) {}\n\n    /**\n     * Initialize the key service\n     * @param tenantId\n     * @returns key id of the initialized key.\n     */\n    abstract init(tenantId): Promise;\n\n    /**\n     * Creates a new keypair\n     * @param tenantId\n     * @return key id of the generated key.\n     */\n    abstract create(tenantId): Promise;\n\n    /**\n     * Import a key into the key service.\n     * @param tenantId\n     * @param body\n     */\n    abstract import(tenantId: string, body: KeyImportDto): Promise;\n\n    /**\n     * Get the callback for the signer function\n     * @param tenantId\n     */\n    abstract signer(tenantId: string, keyId?: string): Promise;\n\n    /**\n     * Get the key id\n     * @returns\n     */\n    abstract getKid(tenantId: string, type?: CertificateType): Promise;\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    abstract getPublicKey(\n        type: \"jwk\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n    abstract getPublicKey(\n        type: \"pem\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n    abstract getPublicKey(\n        type: \"pem\" | \"jwk\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n\n    //TODO: this can be handled via the signer callback\n    abstract signJWT(\n        payload: JWTPayload,\n        header: JoseHeaderParameters,\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n\n    /**\n     * Get the certificate for the given key id.\n     * @param tenantId\n     * @param keyId\n     * @returns\n     */\n    protected getCertificate(tenantId: string, keyId: string): Promise {\n        return this.certRepository\n            .findOneByOrFail({\n                tenantId,\n                id: keyId,\n            })\n            .then(\n                (cert) => cert.crt,\n                () => {\n                    throw new ConflictException(\"Certificate not found\");\n                },\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocalFileStorage.html":{"url":"classes/LocalFileStorage.html","title":"class - LocalFileStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocalFileStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/adapters/local.storage.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            FileStorage\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                exists\n                            \n                            \n                                getStream\n                            \n                            \n                                    Async\n                                put\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(baseDir: string)\n                    \n                \n                        \n                            \n                                Defined in src/storage/adapters/local.storage.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        baseDir\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exists\n                        \n                    \n                \n            \n            \n                \nexists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStream\n                        \n                    \n                \n            \n            \n                \ngetStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        put\n                        \n                    \n                \n            \n            \n                \n                        \n                    put(key: string, body: Buffer | Readable, opts?: PutOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        Buffer | Readable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            PutOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    createReadStream,\n    createWriteStream,\n    existsSync,\n    mkdirSync,\n    rmSync,\n    statSync,\n} from \"fs\";\nimport { dirname, join } from \"path\";\nimport { Readable } from \"stream\";\nimport { FileStorage, PutOptions, StoredObject } from \"../storage.types\";\n\nexport class LocalFileStorage implements FileStorage {\n    constructor(private baseDir: string) {}\n\n    async put(\n        key: string,\n        body: Buffer | Readable,\n        opts?: PutOptions,\n    ): Promise {\n        const fullPath = join(this.baseDir, key);\n        mkdirSync(dirname(fullPath), { recursive: true });\n\n        await new Promise((resolve, reject) => {\n            const write = createWriteStream(fullPath);\n            const src = body instanceof Readable ? body : Readable.from(body);\n            src.pipe(write)\n                .on(\"finish\", () => resolve())\n                .on(\"error\", reject);\n        });\n\n        const st = statSync(fullPath);\n\n        return { key, size: st.size, contentType: opts?.contentType };\n    }\n\n    getStream(key: string) {\n        const fullPath = join(this.baseDir, key);\n        return Promise.resolve({ stream: createReadStream(fullPath) });\n    }\n\n    delete(key: string) {\n        return Promise.resolve(rmSync(join(this.baseDir, key)));\n    }\n\n    exists(key: string) {\n        return Promise.resolve(existsSync(join(this.baseDir, key)));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerConfigService.html":{"url":"injectables/LoggerConfigService.html","title":"injectable - LoggerConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/logger-config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing logger configuration\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getConfiguration\n                            \n                            \n                                getLogFormat\n                            \n                            \n                                getLogLevel\n                            \n                            \n                                isDebugModeEnabled\n                            \n                            \n                                isHttpLoggerEnabled\n                            \n                            \n                                isSessionLoggerEnabled\n                            \n                            \n                                    Private\n                                loadConfiguration\n                            \n                            \n                                    Private\n                                parseLogLevel\n                            \n                            \n                                reloadConfiguration\n                            \n                            \n                                shouldEnableAutoLogging\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/logger-config.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getConfiguration\n                        \n                    \n                \n            \n            \n                \ngetConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         LoggerConfiguration\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLogFormat\n                        \n                    \n                \n            \n            \n                \ngetLogFormat()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     \"json\" | \"pretty\"\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLogLevel\n                        \n                    \n                \n            \n            \n                \ngetLogLevel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     LogLevel\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDebugModeEnabled\n                        \n                    \n                \n            \n            \n                \nisDebugModeEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isHttpLoggerEnabled\n                        \n                    \n                \n            \n            \n                \nisHttpLoggerEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSessionLoggerEnabled\n                        \n                    \n                \n            \n            \n                \nisSessionLoggerEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parseLogLevel\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseLogLevel(level: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                level\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     LogLevel\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reloadConfiguration\n                        \n                    \n                \n            \n            \n                \nreloadConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:86\n                        \n                    \n\n\n            \n                \n                        Hot reload configuration from environment\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        shouldEnableAutoLogging\n                        \n                    \n                \n            \n            \n                \nshouldEnableAutoLogging()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Check if automatic HTTP request/response logging should be enabled\nThis is used by the LoggerModule configuration\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LoggerConfiguration\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/logger-config.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, LogLevel } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\nexport interface LoggerConfiguration {\n    level: LogLevel;\n    enableSessionLogger: boolean;\n    enableHttpLogger: boolean;\n    enableDebugMode: boolean;\n    logFormat: \"json\" | \"pretty\";\n}\n\n/**\n * Service for managing logger configuration\n */\n@Injectable()\nexport class LoggerConfigService {\n    private config: LoggerConfiguration;\n\n    constructor(private readonly configService: ConfigService) {\n        this.loadConfiguration();\n    }\n\n    private loadConfiguration(): void {\n        this.config = {\n            level: this.parseLogLevel(\n                this.configService.get(\"LOG_LEVEL\", \"info\"),\n            ),\n            enableSessionLogger: this.configService.get(\n                \"LOG_ENABLE_SESSION_LOGGER\",\n                false,\n            ),\n            enableHttpLogger: this.configService.get(\n                \"LOG_ENABLE_HTTP_LOGGER\",\n                false,\n            ),\n            enableDebugMode: this.configService.get(\n                \"LOG_DEBUG_MODE\",\n                false,\n            ),\n            logFormat: this.configService.get(\n                \"LOG_FORMAT\",\n                \"pretty\",\n            ),\n        };\n    }\n\n    private parseLogLevel(level: string): LogLevel {\n        const levels: Record = {\n            verbose: \"verbose\",\n            debug: \"debug\",\n            log: \"log\",\n            warn: \"warn\",\n            error: \"error\",\n            fatal: \"fatal\",\n        };\n        return levels[level.toLowerCase()] || \"log\";\n    }\n\n    getConfiguration(): LoggerConfiguration {\n        return { ...this.config };\n    }\n\n    isSessionLoggerEnabled(): boolean {\n        return this.config.enableSessionLogger;\n    }\n\n    isHttpLoggerEnabled(): boolean {\n        return this.config.enableHttpLogger;\n    }\n\n    isDebugModeEnabled(): boolean {\n        return this.config.enableDebugMode;\n    }\n\n    getLogLevel(): LogLevel {\n        return this.config.level;\n    }\n\n    getLogFormat(): \"json\" | \"pretty\" {\n        return this.config.logFormat;\n    }\n\n    /**\n     * Hot reload configuration from environment\n     */\n    reloadConfiguration(): void {\n        this.loadConfiguration();\n    }\n\n    /**\n     * Check if automatic HTTP request/response logging should be enabled\n     * This is used by the LoggerModule configuration\n     */\n    shouldEnableAutoLogging(): boolean {\n        return this.isHttpLoggerEnabled();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoggerConfiguration.html":{"url":"interfaces/LoggerConfiguration.html","title":"interface - LoggerConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoggerConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/logger-config.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            enableDebugMode\n                                        \n                                \n                                \n                                        \n                                            enableHttpLogger\n                                        \n                                \n                                \n                                        \n                                            enableSessionLogger\n                                        \n                                \n                                \n                                        \n                                            level\n                                        \n                                \n                                \n                                        \n                                            logFormat\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enableDebugMode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableDebugMode:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableHttpLogger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableHttpLogger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableSessionLogger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableSessionLogger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:     LogLevel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     LogLevel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logFormat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logFormat:     \"json\" | \"pretty\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"json\" | \"pretty\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, LogLevel } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\nexport interface LoggerConfiguration {\n    level: LogLevel;\n    enableSessionLogger: boolean;\n    enableHttpLogger: boolean;\n    enableDebugMode: boolean;\n    logFormat: \"json\" | \"pretty\";\n}\n\n/**\n * Service for managing logger configuration\n */\n@Injectable()\nexport class LoggerConfigService {\n    private config: LoggerConfiguration;\n\n    constructor(private readonly configService: ConfigService) {\n        this.loadConfiguration();\n    }\n\n    private loadConfiguration(): void {\n        this.config = {\n            level: this.parseLogLevel(\n                this.configService.get(\"LOG_LEVEL\", \"info\"),\n            ),\n            enableSessionLogger: this.configService.get(\n                \"LOG_ENABLE_SESSION_LOGGER\",\n                false,\n            ),\n            enableHttpLogger: this.configService.get(\n                \"LOG_ENABLE_HTTP_LOGGER\",\n                false,\n            ),\n            enableDebugMode: this.configService.get(\n                \"LOG_DEBUG_MODE\",\n                false,\n            ),\n            logFormat: this.configService.get(\n                \"LOG_FORMAT\",\n                \"pretty\",\n            ),\n        };\n    }\n\n    private parseLogLevel(level: string): LogLevel {\n        const levels: Record = {\n            verbose: \"verbose\",\n            debug: \"debug\",\n            log: \"log\",\n            warn: \"warn\",\n            error: \"error\",\n            fatal: \"fatal\",\n        };\n        return levels[level.toLowerCase()] || \"log\";\n    }\n\n    getConfiguration(): LoggerConfiguration {\n        return { ...this.config };\n    }\n\n    isSessionLoggerEnabled(): boolean {\n        return this.config.enableSessionLogger;\n    }\n\n    isHttpLoggerEnabled(): boolean {\n        return this.config.enableHttpLogger;\n    }\n\n    isDebugModeEnabled(): boolean {\n        return this.config.enableDebugMode;\n    }\n\n    getLogLevel(): LogLevel {\n        return this.config.level;\n    }\n\n    getLogFormat(): \"json\" | \"pretty\" {\n        return this.config.logFormat;\n    }\n\n    /**\n     * Hot reload configuration from environment\n     */\n    reloadConfiguration(): void {\n        this.loadConfiguration();\n    }\n\n    /**\n     * Check if automatic HTTP request/response logging should be enabled\n     * This is used by the LoggerModule configuration\n     */\n    shouldEnableAutoLogging(): boolean {\n        return this.isHttpLoggerEnabled();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetricModule.html":{"url":"modules/MetricModule.html","title":"module - MetricModule","body":"\n                   \n\n\n\n\n    Modules\n    MetricModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/metric/metric.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PrometheusModule } from \"@willsoto/nestjs-prometheus\";\n\n@Module({\n    imports: [\n        //TODO: add a guard to protect the metrics endpoint\n        PrometheusModule.register({\n            defaultMetrics: {\n                enabled: false,\n            },\n        }),\n    ],\n})\nexport class MetricModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoneTrustPolicy.html":{"url":"classes/NoneTrustPolicy.html","title":"class - NoneTrustPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoneTrustPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                none\n\n            \n\n            \n                Extends\n            \n            \n                            EmbeddedDisclosurePolicy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                policy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['none'])\n                        \n                    \n                \n                        \n                            \n                                Inherited from         EmbeddedDisclosurePolicy\n\n                            \n                        \n                    \n                        \n                                Defined in         EmbeddedDisclosurePolicy:54\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotificationRequestDto.html":{"url":"classes/NotificationRequestDto.html","title":"class - NotificationRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotificationRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/notification-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                event\n                            \n                            \n                                    \n                                notification_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationEvent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(['credential_accepted', 'credential_revoked'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notification_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotificationEvent } from \"@openid4vc/openid4vci\";\nimport { IsEnum, IsString } from \"class-validator\";\n\nexport class NotificationRequestDto {\n    @IsString()\n    notification_id: string;\n\n    @IsEnum([\"credential_accepted\", \"credential_revoked\"])\n    event: NotificationEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Oauth2AuthorizationServerResponse.html":{"url":"classes/Oauth2AuthorizationServerResponse.html","title":"class - Oauth2AuthorizationServerResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Oauth2AuthorizationServerResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/oauth-authorization-server-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the response from an OAuth2 authorization server.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_challenge_endpoint\n                            \n                            \n                                authorization_endpoint\n                            \n                            \n                                code_challenge_methods_supported\n                            \n                            \n                                dpop_signing_alg_values_supported\n                            \n                            \n                                issuer\n                            \n                            \n                                jwks_uri\n                            \n                            \n                                pushed_authorization_request_endpoint\n                            \n                            \n                                require_pushed_authorization_requests\n                            \n                            \n                                token_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_challenge_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:37\n                        \n                    \n\n            \n                \n                    The URL of the authorization challenge endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:13\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's authorization endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        code_challenge_methods_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:21\n                        \n                    \n\n            \n                \n                    List of supported algorithms to sign the challenge\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dpop_signing_alg_values_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:25\n                        \n                    \n\n            \n                \n                    List of supported algorithms for DPoP signing.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jwks_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:17\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pushed_authorization_request_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    The URL of the pushed authorization request endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        require_pushed_authorization_requests\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:29\n                        \n                    \n\n            \n                \n                    Indicates whether the server requires pushed authorization requests.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's token endpoint.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Oauth2AuthorizationServerResponse {\n    issuer: string;\n    /**\n     * The URL of the OAuth2 authorization server's token endpoint.\n     */\n    token_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's authorization endpoint.\n     */\n    authorization_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n     */\n    jwks_uri: string;\n    /**\n     * List of supported algorithms to sign the challenge\n     */\n    code_challenge_methods_supported: string[];\n    /**\n     * List of supported algorithms for DPoP signing.\n     */\n    dpop_signing_alg_values_supported: string[];\n    /**\n     * Indicates whether the server requires pushed authorization requests.\n     */\n    require_pushed_authorization_requests: boolean;\n    /**\n     * The URL of the pushed authorization request endpoint.\n     */\n    pushed_authorization_request_endpoint: string;\n    /**\n     * The URL of the authorization challenge endpoint.\n     */\n    authorization_challenge_endpoint: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferRequestDto.html":{"url":"classes/OfferRequestDto.html","title":"class - OfferRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                claims\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                claimsWebhook\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                credentialConfigurationIds\n                            \n                            \n                                    \n                                issuanceId\n                            \n                            \n                                    \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                session\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record>\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'object', description: 'Override the default values for the credential claims.', properties: undefined, examples: undefined})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:58\n                        \n                    \n\n            \n                \n                    Override the default values for the credential claims.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        claimsWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:66\n                        \n                    \n\n            \n                \n                    Webhook configuration for claims\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credentialConfigurationIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:38\n                        \n                    \n\n            \n                \n                    Overrides the default values for the credential ids.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        issuanceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:31\n                        \n                    \n\n            \n                \n                    Issuance config id to reference the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({examples: undefined, description: 'The type of response expected for the offer request.'})@IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:73\n                        \n                    \n\n            \n                \n                    Pre defined session id\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n    IsUUID,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { ResponseType } from \"../../../verifier/oid4vp/dto/presentation-request.dto\";\n\nexport class OfferRequestDto {\n    @ApiProperty({\n        examples: [\n            {\n                value: \"qrcode\",\n            },\n        ],\n        description: \"The type of response expected for the offer request.\",\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Issuance config id to reference the issuance configuration.\n     */\n    @IsString()\n    issuanceId: string;\n\n    /**\n     * Overrides the default values for the credential ids.\n     */\n    @IsArray()\n    @IsOptional()\n    credentialConfigurationIds?: string[];\n\n    /**\n     * Override the default values for the credential claims.\n     */\n    @ApiProperty({\n        type: \"object\",\n        description: \"Override the default values for the credential claims.\",\n        properties: {},\n        examples: [\n            {\n                pid: {\n                    given_name: \"ERIKA\",\n                    family_name: \"MUSTERMANN\",\n                },\n            },\n        ],\n    })\n    @IsObject()\n    @IsOptional()\n    claims?: Record>;\n\n    /**\n     * Webhook configuration for claims\n     */\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    @IsOptional()\n    claimsWebhook?: WebhookConfig;\n\n    /**\n     * Pre defined session id\n     */\n    @IsUUID()\n    @IsOptional()\n    session?: string;\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferResponse.html":{"url":"classes/OfferResponse.html","title":"class - OfferResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                session\n                            \n                            \n                                uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:77\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n    IsUUID,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { ResponseType } from \"../../../verifier/oid4vp/dto/presentation-request.dto\";\n\nexport class OfferRequestDto {\n    @ApiProperty({\n        examples: [\n            {\n                value: \"qrcode\",\n            },\n        ],\n        description: \"The type of response expected for the offer request.\",\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Issuance config id to reference the issuance configuration.\n     */\n    @IsString()\n    issuanceId: string;\n\n    /**\n     * Overrides the default values for the credential ids.\n     */\n    @IsArray()\n    @IsOptional()\n    credentialConfigurationIds?: string[];\n\n    /**\n     * Override the default values for the credential claims.\n     */\n    @ApiProperty({\n        type: \"object\",\n        description: \"Override the default values for the credential claims.\",\n        properties: {},\n        examples: [\n            {\n                pid: {\n                    given_name: \"ERIKA\",\n                    family_name: \"MUSTERMANN\",\n                },\n            },\n        ],\n    })\n    @IsObject()\n    @IsOptional()\n    claims?: Record>;\n\n    /**\n     * Webhook configuration for claims\n     */\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    @IsOptional()\n    claimsWebhook?: WebhookConfig;\n\n    /**\n     * Pre defined session id\n     */\n    @IsUUID()\n    @IsOptional()\n    session?: string;\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vciController.html":{"url":"controllers/Oid4vciController.html","title":"controller - Oid4vciController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Oid4vciController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/oid4vci.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/vci\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling OID4VCI (OpenID for Verifiable Credential Issuance) requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                credential\n                            \n                            \n                                    \n                                    \n                                nonce\n                            \n                            \n                                    \n                                    \n                                notifications\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credential\n                        \n                    \n                \n            \n            \n                \n                        \n                    credential(req: Request, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('credential')@SessionLogger('session', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:29\n                        \n                    \n\n\n            \n                \n                        Endpoint to issue credentials\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        nonce\n                        \n                    \n                \n            \n            \n                \n                        \n                    nonce(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('nonce')@SessionLogger('nonce', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        notifications\n                        \n                    \n                \n            \n            \n                \n                        \n                    notifications(body: NotificationRequestDto, req: Request, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('notification')@SessionLogger('notification_id', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:43\n                        \n                    \n\n\n            \n                \n                        Notification endpoint\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            NotificationRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Req, UseInterceptors } from \"@nestjs/common\";\nimport { ApiExcludeController, ApiParam } from \"@nestjs/swagger\";\nimport type { CredentialResponse } from \"@openid4vc/openid4vci\";\nimport type { Request } from \"express\";\nimport { Oid4vciService } from \"../../issuer/oid4vci/oid4vci.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionEntity } from \"../../session/session.decorator\";\nimport { SessionLogger } from \"../../utils/logger//session-logger.decorator\";\nimport { SessionLoggerInterceptor } from \"../../utils/logger/session-logger.interceptor\";\nimport { NotificationRequestDto } from \"./dto/notification-request.dto\";\n\n/**\n * Controller for handling OID4VCI (OpenID for Verifiable Credential Issuance) requests.\n */\n@ApiParam({ name: \"session\", required: true })\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@Controller(\":session/vci\")\n@UseInterceptors(SessionLoggerInterceptor)\nexport class Oid4vciController {\n    constructor(private readonly oid4vciService: Oid4vciService) {}\n\n    /**\n     * Endpoint to issue credentials\n     * @param req\n     * @returns\n     */\n    @Post(\"credential\")\n    @SessionLogger(\"session\", \"OID4VCI\")\n    credential(\n        @Req() req: Request,\n        @SessionEntity() session: Session,\n    ): Promise {\n        return this.oid4vciService.getCredential(req, session);\n    }\n\n    /**\n     * Notification endpoint\n     * @param body\n     * @returns\n     */\n    @Post(\"notification\")\n    @SessionLogger(\"notification_id\", \"OID4VCI\")\n    notifications(\n        @Body() body: NotificationRequestDto,\n        @Req() req: Request,\n        @SessionEntity() session: Session,\n    ) {\n        return this.oid4vciService.handleNotification(req, body, session);\n    }\n\n    @Post(\"nonce\")\n    @SessionLogger(\"nonce\", \"OID4VCI\")\n    nonce(@SessionEntity() session: Session) {\n        return this.oid4vciService.nonceRequest(session);\n    }\n\n    //TODO: this endpoint may be relevant for the wallet attestation.\n    /* @Get('session')\n  session() {\n    console.log('Session requested');\n    //TODO store session and created at\n    const session = randomUUID();\n    return {\n      session_id: session,\n    };\n  } */\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vpController.html":{"url":"controllers/Oid4vpController.html","title":"controller - Oid4vpController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Oid4vpController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/oid4vp\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getRequestWithSession\n                            \n                            \n                                    \n                                    \n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getRequestWithSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRequestWithSession(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@SessionLogger('session', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:32\n                        \n                    \n\n\n            \n                \n                        Returns the authorization request for a given requestId and session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@SessionLogger('session', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:43\n                        \n                    \n\n\n            \n                \n                        Endpoint to receive the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, UseInterceptors } from \"@nestjs/common\";\nimport { ApiExcludeController, ApiParam } from \"@nestjs/swagger\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionEntity } from \"../../session/session.decorator\";\nimport { SessionLogger } from \"../../utils/logger/session-logger.decorator\";\nimport { SessionLoggerInterceptor } from \"../../utils/logger/session-logger.interceptor\";\nimport { AuthorizationResponse } from \"./dto/authorization-response.dto\";\nimport { Oid4vpService } from \"./oid4vp.service\";\n\n/**\n * Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n */\n@Controller(\":session/oid4vp\")\n@UseInterceptors(SessionLoggerInterceptor)\n@ApiParam({ name: \"session\", required: true })\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\nexport class Oid4vpController {\n    /**\n     * Constructor for the Oid4vpController.\n     * @param oid4vpService - Instance of Oid4vpService for handling OID4VP operations.\n     */\n    constructor(private readonly oid4vpService: Oid4vpService) {}\n\n    /**\n     * Returns the authorization request for a given requestId and session.\n     * @param requestId\n     * @param session\n     * @returns\n     */\n    @Get()\n    @SessionLogger(\"session\", \"OID4VP\")\n    getRequestWithSession(@SessionEntity() session: Session) {\n        return this.oid4vpService.createAuthorizationRequest(session);\n    }\n\n    /**\n     * Endpoint to receive the response from the wallet.\n     * @param body\n     * @returns\n     */\n    @Post()\n    @SessionLogger(\"session\", \"OID4VP\")\n    getResponse(\n        @Body() body: AuthorizationResponse,\n        @SessionEntity() session: Session,\n    ) {\n        return this.oid4vpService.getResponse(body, session);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/Oid4vpModule.html":{"url":"modules/Oid4vpModule.html","title":"module - Oid4vpModule","body":"\n                   \n\n\n\n\n    Modules\n    Oid4vpModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_imports\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nOid4vpModule -->\n\nSessionLoggerService->Oid4vpModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nOid4vpModule -->\n\nWebhookService->Oid4vpModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            Oid4vpService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                        \n                            WebhookService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vpController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            Oid4vpService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { forwardRef, Module } from \"@nestjs/common\";\nimport { CryptoModule } from \"../../crypto/crypto.module\";\nimport { RegistrarModule } from \"../../registrar/registrar.module\";\nimport { SessionModule } from \"../../session/session.module\";\nimport { SessionLoggerInterceptor } from \"../../utils/logger/session-logger.interceptor\";\nimport { SessionLoggerService } from \"../../utils/logger/session-logger.service\";\nimport { WebhookService } from \"../../utils/webhook/webhook.service\";\nimport { PresentationsModule } from \"../presentations/presentations.module\";\nimport { Oid4vpController } from \"./oid4vp.controller\";\nimport { Oid4vpService } from \"./oid4vp.service\";\n\n@Module({\n    imports: [\n        CryptoModule,\n        forwardRef(() => RegistrarModule),\n        forwardRef(() => PresentationsModule),\n        SessionModule,\n        HttpModule,\n    ],\n    controllers: [Oid4vpController],\n    providers: [\n        Oid4vpService,\n        SessionLoggerService,\n        SessionLoggerInterceptor,\n        WebhookService,\n    ],\n    exports: [Oid4vpService],\n})\nexport class Oid4vpModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Oid4vpService.html":{"url":"injectables/Oid4vpService.html","title":"injectable - Oid4vpService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Oid4vpService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAuthorizationRequest\n                            \n                            \n                                    Async\n                                createRequest\n                            \n                            \n                                    Async\n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cryptoService: CryptoService, encryptionService: EncryptionService, configService: ConfigService, registrarService: RegistrarService, presentationsService: PresentationsService, sessionService: SessionService, sessionLogger: SessionLoggerService, webhookService: WebhookService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/oid4vp/oid4vp.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        encryptionService\n                                                  \n                                                        \n                                                                        EncryptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registrarService\n                                                  \n                                                        \n                                                                        RegistrarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        webhookService\n                                                  \n                                                        \n                                                                        WebhookService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAuthorizationRequest(session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:41\n                        \n                    \n\n\n            \n                \n                        Creates an authorization request for the OID4VP flow.\nThis method generates a JWT that includes the necessary parameters for the authorization request.\nIt initializes the session logging context and logs the start of the flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRequest(requestId: string, values: PresentationRequestOptions, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:205\n                        \n                    \n\n\n            \n                \n                        Creates a request for the OID4VP flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            PresentationRequestOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:264\n                        \n                    \n\n\n            \n                \n                        Processes the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { v4 } from \"uuid\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { EncryptionService } from \"../../crypto/encryption/encryption.service\";\nimport { OfferResponse } from \"../../issuer/oid4vci/dto/offer-request.dto\";\nimport { RegistrarService } from \"../../registrar/registrar.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { SessionLoggerService } from \"../../utils/logger/session-logger.service\";\nimport { SessionLogContext } from \"../../utils/logger/session-logger-context\";\nimport { WebhookService } from \"../../utils/webhook/webhook.service\";\nimport { AuthResponse } from \"../presentations/dto/auth-response.dto\";\nimport { PresentationsService } from \"../presentations/presentations.service\";\nimport { AuthorizationResponse } from \"./dto/authorization-response.dto\";\nimport { PresentationRequestOptions } from \"./dto/presentation-request-options.dto\";\n\n@Injectable()\nexport class Oid4vpService {\n    constructor(\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private configService: ConfigService,\n        private registrarService: RegistrarService,\n        private presentationsService: PresentationsService,\n        private sessionService: SessionService,\n        private sessionLogger: SessionLoggerService,\n        private webhookService: WebhookService,\n    ) {}\n\n    /**\n     * Creates an authorization request for the OID4VP flow.\n     * This method generates a JWT that includes the necessary parameters for the authorization request.\n     * It initializes the session logging context and logs the start of the flow.\n     * @param requestId\n     * @param tenantId\n     * @param auth_session\n     * @returns\n     */\n    async createAuthorizationRequest(session: Session): Promise {\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: session.id,\n            tenantId: session.tenantId,\n            flowType: \"OID4VP\",\n            stage: \"authorization_request\",\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            requestId: session.requestId,\n            action: \"create_authorization_request\",\n        });\n\n        try {\n            const host = this.configService.getOrThrow(\"PUBLIC_URL\");\n            const tenantHost = `${host}/${session.tenantId}`;\n\n            const presentationConfig =\n                await this.presentationsService.getPresentationConfig(\n                    session.requestId!,\n                    session.tenantId,\n                );\n            let regCert: string | undefined = undefined;\n\n            const dcql_query = JSON.parse(\n                JSON.stringify(presentationConfig.dcql_query).replace(\n                    //g,\n                    tenantHost,\n                ),\n            );\n\n            if (this.registrarService.isEnabled()) {\n                const registrationCert = JSON.parse(\n                    JSON.stringify(presentationConfig.registrationCert).replace(\n                        //g,\n                        tenantHost,\n                    ),\n                );\n                regCert =\n                    await this.registrarService.addRegistrationCertificate(\n                        registrationCert,\n                        dcql_query,\n                        session.requestId!,\n                        session.tenantId,\n                    );\n            }\n            const nonce = randomUUID();\n            await this.sessionService.add(session.id, {\n                vp_nonce: nonce,\n            });\n\n            this.sessionLogger.logAuthorizationRequest(logContext, {\n                requestId: session.requestId,\n                nonce,\n                regCert,\n                dcqlQueryCount: Array.isArray(dcql_query)\n                    ? dcql_query.length\n                    : 1,\n            });\n\n            const hostname = new URL(\n                this.configService.getOrThrow(\"PUBLIC_URL\"),\n            ).hostname;\n\n            const lifeTime = 60 * 60;\n\n            const request = {\n                payload: {\n                    response_type: \"vp_token\",\n                    client_id: \"x509_san_dns:\" + hostname,\n                    response_uri: `${host}/${session.id}/oid4vp`,\n                    response_mode: \"direct_post.jwt\",\n                    nonce,\n                    dcql_query,\n                    client_metadata: {\n                        jwks: {\n                            keys: [\n                                await this.encryptionService.getEncryptionPublicKey(\n                                    session.tenantId,\n                                ),\n                            ],\n                        },\n                        vp_formats: {\n                            mso_mdoc: {\n                                alg: [\"ES256\"],\n                            },\n                            \"dc+sd-jwt\": {\n                                \"kb-jwt_alg_values\": [\"ES256\"],\n                                \"sd-jwt_alg_values\": [\"ES256\"],\n                            },\n                        },\n                        authorization_encrypted_response_alg: \"ECDH-ES\",\n                        authorization_encrypted_response_enc: \"A128GCM\",\n                        client_name:\n                            this.configService.getOrThrow(\"RP_NAME\"),\n                        response_types_supported: [\"vp_token\"],\n                    },\n                    state: session.id,\n                    aud: host,\n                    exp: Math.floor(Date.now() / 1000) + lifeTime,\n                    iat: Math.floor(new Date().getTime() / 1000),\n                    verifier_attestations: regCert\n                        ? [\n                              {\n                                  format: \"jwt\",\n                                  data: regCert,\n                              },\n                          ]\n                        : undefined,\n                },\n                header: {\n                    typ: \"oauth-authz-req+jwt\",\n                },\n            };\n\n            const accessCert = await this.cryptoService.getCertChain(\n                \"access\",\n                session.tenantId,\n            );\n\n            const header = {\n                ...request.header,\n                alg: \"ES256\",\n                x5c: accessCert,\n            };\n\n            const keyId = await this.cryptoService.keyService.getKid(\n                session.tenantId,\n                \"access\",\n            );\n            const signedJwt = await this.cryptoService.signJwt(\n                header,\n                request.payload,\n                session.tenantId,\n                keyId,\n            );\n\n            this.sessionLogger.logSession(\n                logContext,\n                \"Authorization request created successfully\",\n                {\n                    signedJwtLength: signedJwt.length,\n                    certificateChainLength: accessCert?.length || 0,\n                },\n            );\n\n            return signedJwt;\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                requestId: session.requestId,\n                action: \"create_authorization_request\",\n            });\n            throw error;\n        }\n    }\n\n    /**\n     * Creates a request for the OID4VP flow.\n     * @param requestId\n     * @param values\n     * @param tenantId\n     * @returns\n     */\n    async createRequest(\n        requestId: string,\n        values: PresentationRequestOptions,\n        tenantId: string,\n    ): Promise {\n        const presentationConfig =\n            await this.presentationsService.getPresentationConfig(\n                requestId,\n                tenantId,\n            );\n        const fresh = values.session === undefined;\n        values.session = values.session || v4();\n\n        const hostname = new URL(\n            this.configService.getOrThrow(\"PUBLIC_URL\"),\n        ).hostname;\n        const params = {\n            client_id: `x509_san_dns:${hostname}`,\n            request_uri: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${values.session}/oid4vp`,\n        };\n        const queryString = Object.entries(params)\n            .map(\n                ([key, value]) =>\n                    `${encodeURIComponent(key)}=${encodeURIComponent(value)}`,\n            )\n            .join(\"&\");\n\n        const expiresAt = new Date(\n            Date.now() + (presentationConfig.lifeTime ?? 300) * 1000,\n        );\n\n        if (fresh) {\n            await this.sessionService.create({\n                id: values.session,\n                claimsWebhook: values.webhook ?? presentationConfig.webhook,\n                tenantId,\n                requestId,\n                requestUrl: `openid4vp://?${queryString}`,\n                expiresAt,\n            });\n        } else {\n            await this.sessionService.add(values.session, {\n                claimsWebhook: values.webhook ?? presentationConfig.webhook,\n                requestUrl: `openid4vp://?${queryString}`,\n                expiresAt,\n            });\n        }\n\n        return {\n            uri: queryString,\n            session: values.session,\n        };\n    }\n\n    /**\n     * Processes the response from the wallet.\n     * @param body\n     * @param tenantId\n     */\n    async getResponse(body: AuthorizationResponse, session: Session) {\n        const res = await this.encryptionService.decryptJwe(\n            body.response,\n            session.tenantId,\n        );\n        if (!res.state) {\n            throw new ConflictException(\"No state found in the response\");\n        }\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: res.state,\n            tenantId: session.tenantId,\n            flowType: \"OID4VP\",\n            stage: \"response_processing\",\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            action: \"process_presentation_response\",\n            hasWebhook: !!session.claimsWebhook,\n        });\n\n        try {\n            //TODO: load required fields from the config\n            const credentials = await this.presentationsService.parseResponse(\n                res,\n                [],\n                session.vp_nonce as string,\n            );\n\n            this.sessionLogger.logCredentialVerification(\n                logContext,\n                !!credentials && credentials.length > 0,\n                {\n                    credentialCount: credentials?.length || 0,\n                    nonce: session.vp_nonce,\n                },\n            );\n\n            //tell the auth server the result of the session.\n            await this.sessionService.add(res.state, {\n                //TODO: not clear why it has to be any\n                credentials: credentials as any,\n            });\n            // if there a a webook URL, send the response there\n            //TODO: move to dedicated service to reuse it also in the oid4vci flow.\n            if (session.claimsWebhook) {\n                await this.webhookService.sendWebhook(\n                    session,\n                    logContext,\n                    credentials,\n                    false,\n                );\n            }\n\n            this.sessionLogger.logFlowComplete(logContext, {\n                credentialCount: credentials?.length || 0,\n                webhookSent: !!session.claimsWebhook,\n            });\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                action: \"process_presentation_response\",\n            });\n            throw error;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParResponseDto.html":{"url":"classes/ParResponseDto.html","title":"class - ParResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/par-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expires_in\n                            \n                            \n                                request_uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The expiration time for the request URI in seconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:5\n                        \n                    \n\n            \n                \n                    The request URI for the Pushed Authorization Request.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ParResponseDto {\n    /**\n     * The request URI for the Pushed Authorization Request.\n     */\n    request_uri: string;\n    /**\n     * The expiration time for the request URI in seconds.\n     */\n    expires_in: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{"url":"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html","title":"interface - ParsedAccessTokenAuthorizationCodeRequestGrant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParsedAccessTokenAuthorizationCodeRequestGrant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            code\n                                        \n                                \n                                \n                                        \n                                            grantType\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        grantType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        grantType:     AuthorizationCodeGrantIdentifier\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AuthorizationCodeGrantIdentifier\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    authorizationCodeGrantIdentifier,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from \"@openid4vc/oauth2\";\nimport type { Request, Response } from \"express\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { WebhookConfig } from \"../../utils/webhook/webhook.dto\";\nimport { Oid4vpService } from \"../../verifier/oid4vp/oid4vp.service\";\nimport { IssuanceService } from \"../issuance/issuance.service\";\nimport { getHeadersFromRequest } from \"../oid4vci/util\";\nimport { AuthorizeQueries } from \"./dto/authorize-request.dto\";\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(session: Session): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow(\"PUBLIC_URL\") +\n            `/${session.id}`;\n        return this.getAuthorizationServer(\n            session.tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: [\"ES256\"],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        \"request_uri not found or not provided in the request\",\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                \"request_uri not found or not provided in the request\",\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        session: Session,\n    ): Promise {\n        const url = `${this.configService.getOrThrow(\"PUBLIC_URL\")}${req.url}`;\n        const tenantId = session.tenantId;\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                session.issuanceId!,\n                session.tenantId,\n            );\n\n        const authorizationServerMetadata = this.authzMetadata(session);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n        //const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.id}`,\n            signer: {\n                method: \"jwk\",\n                alg: \"ES256\",\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    \"jwk\",\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            /* cNonce,\n            cNonceExpiresIn: 100, */\n            clientId: \"wallet\", // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest(\"pid\", { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: \"insufficient_authorization\",\n            auth_session,\n            presentation,\n            error_description:\n                \"Presentation of credential required before issuance\",\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        session: Session,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            /* const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n */\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(res, body.auth_session);\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    \"Session does not have valid credentials for issuance\",\n                );\n            }\n        }\n\n        /* const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        } */\n        const issuanceId = session.issuanceId!;\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                issuanceId,\n                session.tenantId,\n            );\n\n        // Use the new authentication configuration structure\n        const authConfig = issuanceConfig.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                \"No authentication configuration found for issuance config\",\n            );\n        }\n\n        switch (authConfig.method) {\n            case \"presentationDuringIssuance\": {\n                // OID4VP flow - credential presentation required\n                const webhook = issuanceConfig.claimsWebhook;\n                const response = await this.parseChallengeRequest(\n                    body,\n                    session.tenantId,\n                    webhook,\n                );\n                res.status(400).send(response);\n                break;\n            }\n            case \"auth\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            case \"none\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            default:\n                throw new Error(\n                    `Unsupported authentication method: ${(authConfig as any).method}`,\n                );\n        }\n    }\n\n    private async sendAuthorizationCode(res: Response, issuer_state: string) {\n        const authorization_code = await this.setAuthCode(issuer_state);\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{"url":"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html","title":"interface - ParsedAccessTokenPreAuthorizedCodeRequestGrant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParsedAccessTokenPreAuthorizedCodeRequestGrant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            grantType\n                                        \n                                \n                                \n                                        \n                                            preAuthorizedCode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            txCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        grantType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        grantType:     PreAuthorizedCodeGrantIdentifier\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     PreAuthorizedCodeGrantIdentifier\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        preAuthorizedCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        preAuthorizedCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        txCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        txCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    authorizationCodeGrantIdentifier,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from \"@openid4vc/oauth2\";\nimport type { Request, Response } from \"express\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { WebhookConfig } from \"../../utils/webhook/webhook.dto\";\nimport { Oid4vpService } from \"../../verifier/oid4vp/oid4vp.service\";\nimport { IssuanceService } from \"../issuance/issuance.service\";\nimport { getHeadersFromRequest } from \"../oid4vci/util\";\nimport { AuthorizeQueries } from \"./dto/authorize-request.dto\";\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(session: Session): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow(\"PUBLIC_URL\") +\n            `/${session.id}`;\n        return this.getAuthorizationServer(\n            session.tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: [\"ES256\"],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        \"request_uri not found or not provided in the request\",\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                \"request_uri not found or not provided in the request\",\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        session: Session,\n    ): Promise {\n        const url = `${this.configService.getOrThrow(\"PUBLIC_URL\")}${req.url}`;\n        const tenantId = session.tenantId;\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                session.issuanceId!,\n                session.tenantId,\n            );\n\n        const authorizationServerMetadata = this.authzMetadata(session);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n        //const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.id}`,\n            signer: {\n                method: \"jwk\",\n                alg: \"ES256\",\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    \"jwk\",\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            /* cNonce,\n            cNonceExpiresIn: 100, */\n            clientId: \"wallet\", // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest(\"pid\", { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: \"insufficient_authorization\",\n            auth_session,\n            presentation,\n            error_description:\n                \"Presentation of credential required before issuance\",\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        session: Session,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            /* const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n */\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(res, body.auth_session);\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    \"Session does not have valid credentials for issuance\",\n                );\n            }\n        }\n\n        /* const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        } */\n        const issuanceId = session.issuanceId!;\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                issuanceId,\n                session.tenantId,\n            );\n\n        // Use the new authentication configuration structure\n        const authConfig = issuanceConfig.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                \"No authentication configuration found for issuance config\",\n            );\n        }\n\n        switch (authConfig.method) {\n            case \"presentationDuringIssuance\": {\n                // OID4VP flow - credential presentation required\n                const webhook = issuanceConfig.claimsWebhook;\n                const response = await this.parseChallengeRequest(\n                    body,\n                    session.tenantId,\n                    webhook,\n                );\n                res.status(400).send(response);\n                break;\n            }\n            case \"auth\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            case \"none\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            default:\n                throw new Error(\n                    `Unsupported authentication method: ${(authConfig as any).method}`,\n                );\n        }\n    }\n\n    private async sendAuthorizationCode(res: Response, issuer_state: string) {\n        const authorization_code = await this.setAuthCode(issuer_state);\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PolicyCredential.html":{"url":"classes/PolicyCredential.html","title":"class - PolicyCredential","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PolicyCredential\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                attestationBased\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                claims\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                credential_sets\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                credentials\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClaimsQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        credential_sets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialSetQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        credentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:68\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationAttachment.html":{"url":"classes/PresentationAttachment.html","title":"class - PresentationAttachment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationAttachment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Attached attestations\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                credential_ids\n                            \n                            \n                                    \n                                data\n                            \n                            \n                                    \n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credential_ids\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        format\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsOptional()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities?: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PresentationConfig.html":{"url":"entities/PresentationConfig.html","title":"entity - PresentationConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PresentationConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a configuration for a Verifiable Presentation (VP) request.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                attached\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                    \n                                dcql_query\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lifeTime\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                registrationCert\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        attached\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PresentationAttachment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:199\n                        \n                    \n\n            \n                \n                    Attestation that should be attached\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:183\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        dcql_query\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DCQL\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:161\n                        \n                    \n\n            \n                \n                    The DCQL query to be used for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:145\n                        \n                    \n\n            \n                \n                    Description of the presentation configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:124\n                        \n                    \n\n            \n                \n                    Unique identifier for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lifeTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@Column('int', {default: 300})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:153\n                        \n                    \n\n            \n                \n                    Lifetime how long the presentation request is valid after creation, in seconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        registrationCert\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RegistrationCertificateRequest\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:169\n                        \n                    \n\n            \n                \n                    The registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:137\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:131\n                        \n                    \n\n            \n                \n                    The tenant ID for which the VP request is made.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:189\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was last updated.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsOptional()@Validate(WebhookConfig)@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:177\n                        \n                    \n\n            \n                \n                    Optional webhook URL to receive the response.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsOptional()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities?: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationConfigCreateDto.html":{"url":"classes/PresentationConfigCreateDto.html","title":"class - PresentationConfigCreateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationConfigCreateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/presentation-config-create.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(PresentationConfig, [\n    \"tenantId\",\n    \"createdAt\",\n    \"updatedAt\",\n] as const)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { PresentationConfig } from \"../entities/presentation-config.entity\";\n\nexport class PresentationConfigCreateDto extends OmitType(PresentationConfig, [\n    \"tenantId\",\n    \"createdAt\",\n    \"updatedAt\",\n] as const) {\n    // Define the properties for the presentation config create DTO\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationDuringIssuanceConfig.html":{"url":"classes/PresentationDuringIssuanceConfig.html","title":"class - PresentationDuringIssuanceConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationDuringIssuanceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for authentication method 'presentationDuringIssuance'\nUsed for OID4VP flow where a credential presentation request is sent\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:41\n                        \n                    \n\n            \n                \n                    Link to the presentation configuration that is relevant for the issuance process\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PresentationManagementController.html":{"url":"controllers/PresentationManagementController.html","title":"controller - PresentationManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PresentationManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                presentation-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                configuration\n                            \n                            \n                                    \n                                deleteConfiguration\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                            \n                                    \n                                storePresentationConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        configuration\n                        \n                    \n                \n            \n            \n                \n                        \n                    configuration(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:111\n                        \n                    \n\n\n            \n                \n                        Returns the presentation request configurations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:137\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation request configuration by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(res: Response, body: PresentationRequest, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@UseGuards(JwtAuthGuard)@ApiSecurity('oauth2')@ApiBody({type: PresentationRequest, examples: undefined})@Post('request')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:79\n                        \n                    \n\n\n            \n                \n                        Create an presentation request that can be sent to the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            PresentationRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    storePresentationConfig(config: PresentationConfigCreateDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:121\n                        \n                    \n\n\n            \n                \n                        Store a presentation request configuration. If it already exists, it will be updated.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            PresentationConfigCreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Res,\n    UseGuards,\n} from \"@nestjs/common\";\nimport {\n    ApiBody,\n    ApiProduces,\n    ApiResponse,\n    ApiSecurity,\n    ApiTags,\n} from \"@nestjs/swagger\";\nimport { Response } from \"express\";\nimport * as QRCode from \"qrcode\";\nimport { JwtAuthGuard } from \"../../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { OfferResponse } from \"../../issuer/oid4vci/dto/offer-request.dto\";\nimport {\n    PresentationRequest,\n    ResponseType,\n} from \"../oid4vp/dto/presentation-request.dto\";\nimport { Oid4vpService } from \"../oid4vp/oid4vp.service\";\nimport { PresentationConfigCreateDto } from \"./dto/presentation-config-create.dto\";\nimport { PresentationsService } from \"./presentations.service\";\n\n@ApiTags(\"Presentation management\")\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\", [\"api:read\", \"api:write\"])\n@Controller(\"presentation-management\")\nexport class PresentationManagementController {\n    constructor(\n        private readonly presentationsService: PresentationsService,\n        private readonly oid4vpService: Oid4vpService,\n    ) {}\n\n    /**\n     * Create an presentation request that can be sent to the user\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: \"JSON response\",\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            \"application/json\": { schema: { type: \"object\" } },\n            \"image/png\": { schema: { type: \"string\", format: \"binary\" } },\n        },\n    })\n    @ApiProduces(\"application/json\", \"image/png\")\n    @UseGuards(JwtAuthGuard)\n    @ApiSecurity(\"oauth2\")\n    @ApiBody({\n        type: PresentationRequest,\n        examples: {\n            qrcode: {\n                summary: \"QR-Code Example\",\n                value: {\n                    response_type: ResponseType.QRCode,\n                    requestId: \"pid\",\n                },\n            },\n            uri: {\n                summary: \"URI\",\n                value: {\n                    response_type: ResponseType.URI,\n                    requestId: \"pid\",\n                },\n            },\n        },\n    })\n    @Post(\"request\")\n    async getOffer(\n        @Res() res: Response,\n        @Body() body: PresentationRequest,\n        @Token() user: TokenPayload,\n    ) {\n        const values = await this.oid4vpService.createRequest(\n            body.requestId,\n            {\n                webhook: body.webhook,\n            },\n            user.sub,\n        );\n        values.uri = `openid4vp://?${values.uri}`;\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader(\"Content-Type\", \"image/png\");\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n\n    /**\n     * Returns the presentation request configurations.\n     * @returns\n     */\n    @Get()\n    configuration(@Token() user: TokenPayload) {\n        return this.presentationsService.getPresentationConfigs(user.sub);\n    }\n\n    /**\n     * Store a presentation request configuration. If it already exists, it will be updated.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storePresentationConfig(\n        @Body() config: PresentationConfigCreateDto,\n        @Token() user: TokenPayload,\n    ) {\n        return this.presentationsService.storePresentationConfig(\n            user.sub,\n            config,\n        );\n    }\n\n    /**\n     * Deletes a presentation request configuration by its ID.\n     * @param id\n     * @returns\n     */\n    @Delete(\":id\")\n    deleteConfiguration(@Param(\"id\") id: string, @Token() user: TokenPayload) {\n        return this.presentationsService.deletePresentationConfig(id, user.sub);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationRequest.html":{"url":"classes/PresentationRequest.html","title":"class - PresentationRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the presentation request containing the response type and request ID.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                requestId\n                            \n                            \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        requestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:32\n                        \n                    \n\n            \n                \n                    Identifier of the presentation configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:26\n                        \n                    \n\n            \n                \n                    The type of response expected from the presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:40\n                        \n                    \n\n            \n                \n                    Webhook configuration to receive the response.\nIf not provided, the configured webhook from the configuration will be used.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsObject, IsOptional, IsString } from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Enum for the type of response expected from the presentation request.\n */\nexport enum ResponseType {\n    /**\n     * Response type indicating a QR code will be returned.\n     */\n    QRCode = \"qrcode\",\n    /**\n     * Response type indicating a URI will be returned.\n     */\n    URI = \"uri\",\n}\n\n/**\n * DTO for the presentation request containing the response type and request ID.\n */\nexport class PresentationRequest {\n    /**\n     * The type of response expected from the presentation request.\n     */\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Identifier of the presentation configuration\n     */\n    @IsString()\n    requestId: string;\n\n    /**\n     * Webhook configuration to receive the response.\n     * If not provided, the configured webhook from the configuration will be used.\n     */\n    @IsObject()\n    @IsOptional()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PresentationRequestOptions.html":{"url":"interfaces/PresentationRequestOptions.html","title":"interface - PresentationRequestOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PresentationRequestOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PresentationRequestOptions DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            session\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            webhook\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        session\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        session:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional session identifier for tracking the request.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        webhook\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        webhook:         WebhookConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         WebhookConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional webhook configuration to receive the response.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * PresentationRequestOptions DTO\n */\nexport interface PresentationRequestOptions {\n    /**\n     * Optional session identifier for tracking the request.\n     */\n    session?: string;\n    /**\n     * Optional webhook configuration to receive the response.\n     */\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PresentationsModule.html":{"url":"modules/PresentationsModule.html","title":"module - PresentationsModule","body":"\n                   \n\n\n\n\n    Modules\n    PresentationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_exports\n\n\n\ncluster_PresentationsModule_imports\n\n\n\ncluster_PresentationsModule_providers\n\n\n\n\nResolverModule\n\nResolverModule\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/presentations/presentations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PresentationManagementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ResolverModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { forwardRef, Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { Oid4vpModule } from \"../oid4vp/oid4vp.module\";\nimport { ResolverModule } from \"../resolver/resolver.module\";\nimport { PresentationConfig } from \"./entities/presentation-config.entity\";\nimport { PresentationManagementController } from \"./presentations.controller\";\nimport { PresentationsService } from \"./presentations.service\";\n\n@Module({\n    imports: [\n        ResolverModule,\n        HttpModule,\n        forwardRef(() => Oid4vpModule),\n        TypeOrmModule.forFeature([PresentationConfig]),\n    ],\n    controllers: [PresentationManagementController],\n    providers: [PresentationsService],\n    exports: [PresentationsService],\n})\nexport class PresentationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PresentationsService.html":{"url":"injectables/PresentationsService.html","title":"injectable - PresentationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PresentationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                kbVerifier\n                            \n                            \n                                sdjwtInstance\n                            \n                            \n                                    Private\n                                statusListFetcher\n                            \n                            \n                                verifier\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deletePresentationConfig\n                            \n                            \n                                getPresentationConfig\n                            \n                            \n                                getPresentationConfigs\n                            \n                            \n                                    Private\n                                    Async\n                                import\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                parseResponse\n                            \n                            \n                                storePresentationConfig\n                            \n                            \n                                    Public\n                                storeRCID\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, resolverService: ResolverService, vpRequestRepository: Repository, configService: ConfigService, logger: PinoLogger)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/presentations/presentations.service.ts:33\n                            \n                        \n\n                \n                    \n                            Constructor for the PresentationsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of HttpService for making HTTP requests.\n\n\n                                                        \n                                                \n                                                \n                                                        resolverService\n                                                  \n                                                        \n                                                                        ResolverService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ResolverService for resolving DID documents.\n\n\n                                                        \n                                                \n                                                \n                                                        vpRequestRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for managing VP request configurations.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deletePresentationConfig\n                        \n                    \n                \n            \n            \n                \ndeletePresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:176\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to delete.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to delete the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves when the deletion is complete.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPresentationConfig\n                        \n                    \n                \n            \n            \n                \ngetPresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:186\n                        \n                    \n\n\n            \n                \n                        Retrieves a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to retrieve.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the requested PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPresentationConfigs\n                        \n                    \n                \n            \n            \n                \ngetPresentationConfigs(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:147\n                        \n                    \n\n\n            \n                \n                        Retrieves all presentation configurations for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve configurations.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to an array of PresentationConfig entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import()\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:66\n                        \n                    \n\n\n            \n                \n                        Imports presentation configurations from a predefined directory structure.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:53\n                        \n                    \n\n\n            \n                \n                        Imports presentation configurations from a predefined directory structure.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseResponse\n                        \n                    \n                \n            \n            \n                \nparseResponse(res: AuthResponse, requiredFields: string[], keyBindingNonce: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:275\n                        \n                    \n\n\n            \n                \n                        Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            AuthResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requiredFields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyBindingNonce\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \nstorePresentationConfig(tenantId: string, vprequest: PresentationConfigCreateDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:160\n                        \n                    \n\n\n            \n                \n                        Stores a new presentation configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the configuration.\n\n\n                                            \n                                        \n                                        \n                                                vprequest\n                                            \n                                                            PresentationConfigCreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe PresentationConfig entity to store.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the stored PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        storeRCID\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeRCID(registrationCertId: string, id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:207\n                        \n                    \n\n\n            \n                \n                        Stores the new registration certificate.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                registrationCertId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the registration certificate to store.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to update.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the registration certificate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        kbVerifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KbVerifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:258\n                        \n                    \n\n            \n                \n                    Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                            \n                                            \n                                                    signature\n                                            \n                                            \n                                                    payload\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sdjwtInstance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SDJwtVcInstance\n\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:33\n                        \n                    \n\n            \n                \n                    Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        statusListFetcher\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:243\n                        \n                    \n\n            \n                \n                    Fetch the status list from the uri.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    uri\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Verifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:220\n                        \n                    \n\n            \n                \n                    Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                                    \n                                                            \nThe data part of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                            \n                                                    signature\n                                                    \n                                                            \nThe signature of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from \"@nestjs/axios\";\nimport {\n    ConflictException,\n    Injectable,\n    OnApplicationBootstrap,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { digest, ES256 } from \"@sd-jwt/crypto-nodejs\";\nimport { SDJwtVcInstance } from \"@sd-jwt/sd-jwt-vc\";\nimport { KbVerifier, Verifier } from \"@sd-jwt/types\";\nimport { plainToClass } from \"class-transformer\";\nimport { validate } from \"class-validator\";\nimport { readdirSync, readFileSync } from \"fs\";\nimport { importJWK, JWK, JWTPayload, jwtVerify } from \"jose\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { join } from \"path\";\nimport { firstValueFrom } from \"rxjs\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { ResolverService } from \"../resolver/resolver.service\";\nimport { AuthResponse } from \"./dto/auth-response.dto\";\nimport { PresentationConfigCreateDto } from \"./dto/presentation-config-create.dto\";\nimport { PresentationConfig } from \"./entities/presentation-config.entity\";\n\n/**\n * Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n */\n@Injectable()\nexport class PresentationsService implements OnApplicationBootstrap {\n    /**\n     * Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n     */\n    sdjwtInstance: SDJwtVcInstance;\n\n    /**\n     * Constructor for the PresentationsService.\n     * @param httpService - Instance of HttpService for making HTTP requests.\n     * @param resolverService - Instance of ResolverService for resolving DID documents.\n     * @param vpRequestRepository - Repository for managing VP request configurations.\n     */\n    constructor(\n        private httpService: HttpService,\n        private resolverService: ResolverService,\n        @InjectRepository(PresentationConfig)\n        private vpRequestRepository: Repository,\n        private configService: ConfigService,\n        private logger: PinoLogger,\n    ) {}\n\n    /**\n     * Imports presentation configurations from a predefined directory structure.\n     */\n    async onApplicationBootstrap() {\n        this.sdjwtInstance = new SDJwtVcInstance({\n            hasher: digest,\n            verifier: this.verifier.bind(this),\n            kbVerifier: this.kbVerifier.bind(this),\n            statusListFetcher: this.statusListFetcher.bind(this),\n        });\n        await this.import();\n    }\n\n    /**\n     * Imports presentation configurations from a predefined directory structure.\n     */\n    private async import() {\n        const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n        const subfolder = \"presentation\";\n        const force = this.configService.get(\"CONFIG_IMPORT_FORCE\");\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            for (const tenant of tenantFolders) {\n                let counter = 0;\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const files = readdirSync(path);\n                for (const file of files) {\n                    const payload = JSON.parse(\n                        readFileSync(join(path, file), \"utf8\"),\n                    );\n\n                    const id = file.replace(\".json\", \"\");\n                    payload.id = id;\n                    const presentationExists = await this.getPresentationConfig(\n                        id,\n                        tenant.name,\n                    ).catch(() => false);\n                    if (presentationExists && !force) {\n                        continue; // Skip if config already exists and force is not set\n                    } else if (presentationExists && force) {\n                        //delete old element so removed elements are not present\n                        await this.vpRequestRepository.delete({\n                            id,\n                            tenantId: tenant.name,\n                        });\n                    }\n\n                    // Validate the payload against PresentationConfig\n                    const config = plainToClass(\n                        PresentationConfigCreateDto,\n                        payload,\n                    );\n                    const validationErrors = await validate(config, {\n                        whitelist: true,\n                        forbidUnknownValues: false, // avoid false positives on plain objects\n                        forbidNonWhitelisted: false,\n                        stopAtFirstError: false,\n                    });\n\n                    if (validationErrors.length > 0) {\n                        this.logger.error(\n                            {\n                                event: \"ValidationError\",\n                                file,\n                                tenant: tenant.name,\n                                errors: validationErrors.map((error) => ({\n                                    property: error.property,\n                                    constraints: error.constraints,\n                                    value: error.value,\n                                })),\n                            },\n                            `Validation failed for presentation config ${file} in tenant ${tenant.name}`,\n                        );\n                        continue; // Skip this invalid config\n                    }\n\n                    await this.storePresentationConfig(tenant.name, config);\n                    counter++;\n                }\n                this.logger.info(\n                    {\n                        event: \"Import\",\n                    },\n                    `${counter} presentation configs imported for ${tenant.name}`,\n                );\n            }\n        }\n    }\n\n    /**\n     * Retrieves all presentation configurations for a given tenant.\n     * @param tenantId - The ID of the tenant for which to retrieve configurations.\n     * @returns A promise that resolves to an array of PresentationConfig entities.\n     */\n    getPresentationConfigs(tenantId: string): Promise {\n        return this.vpRequestRepository.find({\n            where: { tenantId },\n            order: { createdAt: \"DESC\" },\n        });\n    }\n\n    /**\n     * Stores a new presentation configuration.\n     * @param tenantId - The ID of the tenant for which to store the configuration.\n     * @param vprequest - The PresentationConfig entity to store.\n     * @returns A promise that resolves to the stored PresentationConfig entity.\n     */\n    storePresentationConfig(\n        tenantId: string,\n        vprequest: PresentationConfigCreateDto,\n    ) {\n        return this.vpRequestRepository.save({\n            ...vprequest,\n            tenantId,\n        });\n    }\n\n    /**\n     * Deletes a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to delete.\n     * @param tenantId - The ID of the tenant for which to delete the configuration.\n     * @returns A promise that resolves when the deletion is complete.\n     */\n    deletePresentationConfig(id: string, tenantId: string) {\n        return this.vpRequestRepository.delete({ id, tenantId });\n    }\n\n    /**\n     * Retrieves a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to retrieve.\n     * @param tenantId - The ID of the tenant for which to retrieve the configuration.\n     * @returns A promise that resolves to the requested PresentationConfig entity.\n     */\n    getPresentationConfig(\n        id: string,\n        tenantId: string,\n    ): Promise {\n        return this.vpRequestRepository\n            .findOneByOrFail({\n                id,\n                tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException(`Request ID ${id} not found`);\n            });\n    }\n\n    /**\n     * Stores the new registration certificate.\n     * @param registrationCertId - The ID of the registration certificate to store.\n     * @param id - The ID of the presentation configuration to update.\n     * @param tenantId - The ID of the tenant for which to store the registration certificate.\n     * @returns\n     */\n    public storeRCID(registrationCertId: string, id: string, tenantId: string) {\n        return this.vpRequestRepository.update(\n            { id, tenantId },\n            { registrationCert: { id: registrationCertId } },\n        );\n    }\n\n    /**\n     * Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n     * @param data - The data part of the SD-JWT-VC.\n     * @param signature - The signature of the SD-JWT-VC.\n     * @returns\n     */\n    verifier: Verifier = async (data, signature) => {\n        const instance = new SDJwtVcInstance({\n            hasher: digest,\n        });\n        const decodedVC = await instance.decode(`${data}.${signature}`);\n        const payload = decodedVC.jwt?.payload as JWTPayload;\n        const header = decodedVC.jwt?.header as JWK;\n        const publicKey = await this.resolverService.resolvePublicKey(\n            payload,\n            header,\n        );\n        const verify = await ES256.getVerifier(publicKey);\n        return verify(data, signature).catch((err) => {\n            console.log(err);\n            return false;\n        });\n    };\n\n    /**\n     * Fetch the status list from the uri.\n     * @param uri\n     * @returns\n     */\n    private statusListFetcher: (uri: string) => Promise = (\n        uri: string,\n    ) => {\n        return firstValueFrom(this.httpService.get(uri)).then(\n            (res) => res.data,\n        );\n    };\n\n    /**\n     * Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n     * @param data\n     * @param signature\n     * @param payload\n     * @returns\n     */\n    private kbVerifier: KbVerifier = async (data, signature, payload) => {\n        if (!payload.cnf) {\n            throw new Error(\"No cnf found in the payload\");\n        }\n        const key = await importJWK(payload.cnf.jwk as JWK, \"ES256\");\n        return jwtVerify(`${data}.${signature}`, key).then(\n            () => true,\n            () => false,\n        );\n    };\n\n    /**\n     * Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n     * @param res\n     * @param requiredFields\n     * @returns\n     */\n    parseResponse(\n        res: AuthResponse,\n        requiredFields: string[],\n        keyBindingNonce: string,\n    ) {\n        const attestations = Object.keys(res.vp_token);\n        const att = attestations.map((att) =>\n            this.sdjwtInstance\n                .verify(res.vp_token[att], {\n                    requiredClaimKeys: requiredFields,\n                    keyBindingNonce,\n                })\n                .then(\n                    (result) => {\n                        return {\n                            id: att,\n                            values: {\n                                ...result.payload,\n                                cnf: undefined, // remove cnf for simplicity\n                                status: undefined, // remove status for simplicity\n                            },\n                        };\n                    },\n                    /* (err) => {\n                        throw new Error\n                        //(console.log(err);\n                        return {\n                            id: att,\n                            error: err.message,\n                        };\n                    }, */\n                ),\n        );\n        return Promise.all(att);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/RegistrarEntity.html":{"url":"entities/RegistrarEntity.html","title":"entity - RegistrarEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  RegistrarEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/entities/registrar.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accessCertificateId\n                            \n                            \n                                    \n                                relyingPartyId\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accessCertificateId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/registrar/entities/registrar.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        relyingPartyId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/registrar/entities/registrar.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/registrar/entities/registrar.entity.ts:13\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/registrar/entities/registrar.entity.ts:7\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../auth/entitites/tenant.entity\";\n\n@Entity()\nexport class RegistrarEntity {\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    @Column(\"varchar\")\n    relyingPartyId: string;\n\n    @Column(\"varchar\")\n    accessCertificateId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RegistrarModule.html":{"url":"modules/RegistrarModule.html","title":"module - RegistrarModule","body":"\n                   \n\n\n\n\n    Modules\n    RegistrarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_imports\n\n\n\ncluster_RegistrarModule_exports\n\n\n\ncluster_RegistrarModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/registrar/registrar.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            RegistrarModule is responsible for managing the registrar service.\nIt provides the RegistrarService and imports necessary modules.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            PresentationsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { PresentationsModule } from \"../verifier/presentations/presentations.module\";\nimport { RegistrarEntity } from \"./entities/registrar.entity\";\nimport { RegistrarService } from \"./registrar.service\";\n\n/**\n * RegistrarModule is responsible for managing the registrar service.\n * It provides the RegistrarService and imports necessary modules.\n */\n@Module({\n    imports: [\n        CryptoModule,\n        PresentationsModule,\n        TypeOrmModule.forFeature([RegistrarEntity]),\n    ],\n    providers: [RegistrarService],\n    exports: [RegistrarService],\n})\nexport class RegistrarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RegistrarService.html":{"url":"injectables/RegistrarService.html","title":"injectable - RegistrarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RegistrarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/registrar.service.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrarService is responsible for managing the interaction with the registrar,\nincluding adding relying parties, access certificates, and registration certificates.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                accessToken\n                            \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                oauth2Client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                addAccessCertificate\n                            \n                            \n                                    Async\n                                addRegistrationCertificate\n                            \n                            \n                                addRp\n                            \n                            \n                                    Private\n                                getExistingRp\n                            \n                            \n                                isEnabled\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                    Async\n                                onTenantDelete\n                            \n                            \n                                    Async\n                                onTenantInit\n                            \n                            \n                                    Async\n                                refreshAccessToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, presentationsService: PresentationsService, registrarRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/registrar/registrar.service.ts:40\n                            \n                        \n\n                \n                    \n                            Constructor for the RegistrarService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ConfigService for accessing configuration values.\n\n\n                                                        \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of CryptoService for cryptographic operations.\n\n\n                                                        \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of PresentationsService for handling presentations.\n\n\n                                                        \n                                                \n                                                \n                                                        registrarRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        addAccessCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addAccessCertificate(tenantId: string, relyingPartyId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:198\n                        \n                    \n\n\n            \n                \n                        Add a new access certificate to the registrar.\nThis is only needed once, when the access certificate is created.\nIf the access certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                relyingPartyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addRegistrationCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addRegistrationCertificate(req: RegistrationCertificateRequest, dcql_query: any, requestId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:240\n                        \n                    \n\n\n            \n                \n                        Add a new registration certificate to the registrar.\nThis is only needed once, when the registration certificate is created.\nIf the registration certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RegistrationCertificateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dcql_query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addRp\n                        \n                    \n                \n            \n            \n                \naddRp(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:158\n                        \n                    \n\n\n            \n                \n                        Adds a new relying party to the registrar.\nThis is only needed once, when the relying party is created.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getExistingRp\n                        \n                    \n                \n            \n            \n                \n                        \n                    getExistingRp(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:181\n                        \n                    \n\n\n            \n                \n                        Stores the existing relying party ID based on the name.\nThis is used when the relying party already exists in the registrar.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the relying party.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The ID of the existing relying party.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEnabled\n                        \n                    \n                \n            \n            \n                \nisEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:92\n                        \n                    \n\n\n            \n                \n                        Checks if the registrar service is enabled based on the configuration.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the registrar service is enabled, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:100\n                        \n                    \n\n\n            \n                \n                        This function is called when the application starts.\nIt will refresh the access token for the registrar.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:59\n                        \n                    \n\n\n            \n                \n                        Initializes the OAuth2 client and registrar client with the necessary configurations.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:133\n                        \n                    \n\n\n            \n                \n                        Deletes all registrar entries for a specific tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:111\n                        \n                    \n\n\n            \n                \n                        This function is called when a tenant is initialized.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshAccessToken()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:141\n                        \n                    \n\n\n            \n                \n                        Refreshes the access token for the registrar using client credentials.\nThis method is called periodically to ensure the access token is valid.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:40\n                        \n                    \n\n            \n                \n                    Access token for authenticating requests to the registrar.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:36\n                        \n                    \n\n            \n                \n                    Client for interacting with the registrar API.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oauth2Client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:32\n                        \n                    \n\n            \n                \n                    OAuth2 client for interacting with the OIDC provider.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { OAuth2Client } from \"@badgateway/oauth2-client\";\nimport {\n    Injectable,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../crypto/crypto.service\";\nimport { RegistrationCertificateRequest } from \"../verifier/presentations/dto/vp-request.dto\";\nimport { PresentationsService } from \"../verifier/presentations/presentations.service\";\nimport { RegistrarEntity } from \"./entities/registrar.entity\";\nimport {\n    accessCertificateControllerRegister,\n    registrationCertificateControllerAll,\n    registrationCertificateControllerRegister,\n    relyingPartyControllerFindAll,\n    relyingPartyControllerRegister,\n} from \"./generated\";\nimport { client } from \"./generated/client.gen\";\n\n/**\n * RegistrarService is responsible for managing the interaction with the registrar,\n * including adding relying parties, access certificates, and registration certificates.\n */\n@Injectable()\nexport class RegistrarService implements OnApplicationBootstrap, OnModuleInit {\n    /**\n     * OAuth2 client for interacting with the OIDC provider.\n     */\n    private oauth2Client: OAuth2Client;\n    /**\n     * Client for interacting with the registrar API.\n     */\n    private client: typeof client;\n    /**\n     * Access token for authenticating requests to the registrar.\n     */\n    private accessToken: string;\n\n    /**\n     * Constructor for the RegistrarService.\n     * @param configService - Instance of ConfigService for accessing configuration values.\n     * @param cryptoService - Instance of CryptoService for cryptographic operations.\n     * @param presentationsService - Instance of PresentationsService for handling presentations.\n     */\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private presentationsService: PresentationsService,\n        @InjectRepository(RegistrarEntity)\n        private registrarRepository: Repository,\n    ) {}\n\n    /**\n     * Initializes the OAuth2 client and registrar client with the necessary configurations.\n     */\n    onModuleInit() {\n        //when not set, we will not use the registrar\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const oidcIssuerUrl =\n            this.configService.getOrThrow(\"REGISTRAR_OIDC_URL\");\n        const clientId = this.configService.getOrThrow(\n            \"REGISTRAR_OIDC_CLIENT_ID\",\n        );\n        const clientSecret = this.configService.getOrThrow(\n            \"REGISTRAR_OIDC_CLIENT_SECRET\",\n        );\n\n        this.oauth2Client = new OAuth2Client({\n            server: `${oidcIssuerUrl}/protocol/openid-connect/token`,\n            clientId,\n            clientSecret,\n            discoveryEndpoint: `${oidcIssuerUrl}/.well-known/openid-configuration`,\n        });\n\n        this.client = client;\n        this.client.setConfig({\n            baseUrl: this.configService.getOrThrow(\"REGISTRAR_URL\"),\n            auth: () => this.accessToken,\n        });\n    }\n\n    /**\n     * Checks if the registrar service is enabled based on the configuration.\n     * @returns True if the registrar service is enabled, false otherwise.\n     */\n    isEnabled() {\n        return !!this.configService.get(\"REGISTRAR_URL\");\n    }\n\n    /**\n     * This function is called when the application starts.\n     * It will refresh the access token for the registrar.\n     */\n    async onApplicationBootstrap() {\n        if (!this.configService.get(\"REGISTRAR_URL\")) {\n            return;\n        }\n        await this.refreshAccessToken();\n    }\n\n    /**\n     * This function is called when a tenant is initialized.\n     * @param tenantId\n     */\n    async onTenantInit(tenantId: string) {\n        if (!this.isEnabled()) {\n            return;\n        }\n        //TODO: pass name by call\n        const name = this.configService.getOrThrow(\"RP_NAME\");\n        const relyingPartyId = await this.addRp(name);\n        const accessCertificateId = await this.addAccessCertificate(\n            tenantId,\n            relyingPartyId,\n        );\n        await this.registrarRepository.save({\n            tenantId,\n            relyingPartyId,\n            accessCertificateId,\n        });\n    }\n\n    /**\n     * Deletes all registrar entries for a specific tenant.\n     * @param tenantId\n     */\n    async onTenantDelete(tenantId: string) {\n        await this.registrarRepository.delete({ tenantId });\n    }\n\n    /**\n     * Refreshes the access token for the registrar using client credentials.\n     * This method is called periodically to ensure the access token is valid.\n     */\n    async refreshAccessToken() {\n        await this.oauth2Client.clientCredentials().then((token) => {\n            this.accessToken = token.accessToken;\n            const date = new Date();\n            const expirationDate = new Date(token.expiresAt as number);\n            setTimeout(\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                () => this.refreshAccessToken(),\n                expirationDate.getTime() - date.getTime() - 1000,\n            );\n        });\n    }\n\n    /**\n     * Adds a new relying party to the registrar.\n     * This is only needed once, when the relying party is created.\n     */\n    addRp(name: string): Promise {\n        return relyingPartyControllerRegister({\n            client: this.client,\n            body: {\n                name,\n            },\n        }).then(async (response) => {\n            let rpId: string;\n            if (response.error) {\n                rpId = await this.getExistingRp(name);\n            } else {\n                rpId = response.data![\"id\"];\n            }\n            return rpId;\n        });\n    }\n\n    /**\n     * Stores the existing relying party ID based on the name.\n     * This is used when the relying party already exists in the registrar.\n     * @param name - The name of the relying party.\n     * @returns The ID of the existing relying party.\n     */\n    private getExistingRp(name: string) {\n        return relyingPartyControllerFindAll({\n            client: this.client,\n            query: {\n                name,\n            },\n        }).then((response) => {\n            return response.data!.find((item) => item.name === name)?.id!;\n        });\n    }\n\n    /**\n     * Add a new access certificate to the registrar.\n     * This is only needed once, when the access certificate is created.\n     * If the access certificate already exists, it will be returned.\n     * @returns\n     */\n    private async addAccessCertificate(\n        tenantId: string,\n        relyingPartyId: string,\n    ): Promise {\n        const keyId = await this.cryptoService.keyService.getKid(tenantId);\n        const host = this.configService\n            .getOrThrow(\"PUBLIC_URL\")\n            .replace(\"https://\", \"\");\n        return accessCertificateControllerRegister({\n            client: this.client,\n            body: {\n                publicKey: await this.cryptoService.keyService.getPublicKey(\n                    \"pem\",\n                    tenantId,\n                    keyId,\n                ),\n                dns: [host],\n            },\n            path: {\n                rp: relyingPartyId,\n            },\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\"Error adding access certificate:\", res.error);\n                throw new Error(\"Error adding access certificate\");\n            }\n            //store the cert\n            await this.cryptoService.storeAccessCertificate(\n                res.data![\"crt\"],\n                tenantId,\n                keyId,\n            );\n            return res.data![\"id\"];\n        });\n    }\n\n    /**\n     * Add a new registration certificate to the registrar.\n     * This is only needed once, when the registration certificate is created.\n     * If the registration certificate already exists, it will be returned.\n     * @returns\n     */\n    async addRegistrationCertificate(\n        req: RegistrationCertificateRequest,\n        //TODO: check if the dcql_query is covered by the registration certificate. If not, we need to throw an error since we do not know the new purpose for it.\n        dcql_query: any,\n        requestId: string,\n        tenantId: string,\n    ) {\n        const entry = await this.registrarRepository.findOneByOrFail({\n            tenantId,\n        });\n\n        //TODO: need to check if the access certificate is bound to the access certificate with the subject. Also that the requested fields are matching.\n\n        const certs =\n            (await registrationCertificateControllerAll({\n                client: this.client,\n                path: {\n                    rp: entry.relyingPartyId,\n                },\n            }).then((res) =>\n                res.data?.filter(\n                    (cert) =>\n                        cert.revoked == null && cert.id === (req.id as string),\n                ),\n            )) || [];\n\n        if (certs?.length > 0) {\n            return certs[0].jwt;\n        }\n\n        return registrationCertificateControllerRegister({\n            client: this.client,\n            path: {\n                rp: entry.relyingPartyId,\n            },\n            body: req.body,\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\n                    \"Error adding registration certificate:\",\n                    res.error,\n                );\n                throw new Error(\"Error adding registration certificate\");\n            }\n\n            //TODO: write the ID to the config so its easier to use it. Easier than writing the comparison algorithm (any maybe someone wants to use a different one)\n            await this.presentationsService.storeRCID(\n                res.data![\"id\"],\n                requestId,\n                tenantId,\n            );\n            return res.data![\"jwt\"];\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistrationCertificateRequest.html":{"url":"classes/RegistrationCertificateRequest.html","title":"class - RegistrationCertificateRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistrationCertificateRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/vp-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrationCertificateRequest DTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                body\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RegistrationCertificateCreation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:18\n                        \n                    \n\n            \n                \n                    The body of the registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:13\n                        \n                    \n\n            \n                \n                    Identifier of the registration certificate that got issued.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsOptional, IsString } from \"class-validator\";\nimport { RegistrationCertificateCreation } from \"../../../registrar/generated\";\n\n/**\n * RegistrationCertificateRequest DTO\n */\nexport class RegistrationCertificateRequest {\n    /**\n     * Identifier of the registration certificate that got issued.\n     */\n    @IsOptional()\n    @IsString()\n    id?: string;\n    /**\n     * The body of the registration certificate request containing the necessary details.\n     */\n    @IsObject()\n    body: RegistrationCertificateCreation;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ResolverModule.html":{"url":"modules/ResolverModule.html","title":"module - ResolverModule","body":"\n                   \n\n\n\n\n    Modules\n    ResolverModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_exports\n\n\n\ncluster_ResolverModule_providers\n\n\n\n\nResolverService \n\nResolverService \n\n\n\nResolverModule\n\nResolverModule\n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/resolver/resolver.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { Module } from \"@nestjs/common\";\nimport { ResolverService } from \"./resolver.service\";\n\n@Module({\n    imports: [HttpModule],\n    providers: [ResolverService],\n    exports: [ResolverService],\n})\nexport class ResolverModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResolverService.html":{"url":"injectables/ResolverService.html","title":"injectable - ResolverService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResolverService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/resolver.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for resolving public keys from JWT payloads and headers.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                resolvePublicKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/resolver/resolver.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resolvePublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolvePublicKey(payload: JWTPayload, header: JWK)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/resolver/resolver.service.ts:21\n                        \n                    \n\n\n            \n                \n                        Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWK\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { X509Certificate } from \"node:crypto\";\nimport { HttpService } from \"@nestjs/axios\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { JWK, JWTPayload } from \"jose\";\nimport { firstValueFrom } from \"rxjs\";\nimport { IssuerMetadata } from \"./dto/issuer-metadata.dto\";\n\n/**\n * Service for resolving public keys from JWT payloads and headers.\n */\n@Injectable()\nexport class ResolverService {\n    constructor(private httpService: HttpService) {}\n\n    /**\n     * Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n     * @param payload\n     * @param header\n     * @returns\n     */\n    async resolvePublicKey(payload: JWTPayload, header: JWK): Promise {\n        if (!payload.iss) {\n            throw new Error(\"Issuer not found\");\n        }\n\n        if (header.x5c) {\n            //TODO: validate the certificate and the chain of trust!\n            const certs = header.x5c.map(\n                (cert) => new X509Certificate(Buffer.from(cert, \"base64\")),\n            );\n            const cert = certs[0];\n            if (!cert.subjectAltName?.includes(new URL(payload.iss).hostname)) {\n                throw new Error(\"Subject and issuer do not match\");\n            }\n            return cert.publicKey.export({ format: \"jwk\" }) as JWK;\n        }\n        //checl if the key is in the header as jwk\n        if (header[\"jwk\"]) {\n            return header[\"jwk\"] as JWK;\n        }\n\n        const response = await firstValueFrom(\n            this.httpService.get(\n                `${payload.iss}/.well-known/jwt-vc-issuer`,\n            ),\n        ).then(\n            (r) => r.data,\n            () => {\n                throw new ConflictException(\"Issuer not reachable\");\n            },\n        );\n        const key = response.jwks.keys.find((key) => key.kid === header.kid);\n        if (!key) {\n            throw new Error(\"Key not found\");\n        }\n        return key;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RootOfTrustPolicy.html":{"url":"classes/RootOfTrustPolicy.html","title":"class - RootOfTrustPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RootOfTrustPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                rootOfTrust\n\n            \n\n            \n                Extends\n            \n            \n                            EmbeddedDisclosurePolicy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                policy\n                            \n                            \n                                    \n                                    \n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['rootOfTrust'])\n                        \n                    \n                \n                        \n                            \n                                Inherited from         EmbeddedDisclosurePolicy\n\n                            \n                        \n                    \n                        \n                                Defined in         EmbeddedDisclosurePolicy:42\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:47\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/S3FileStorage.html":{"url":"classes/S3FileStorage.html","title":"class - S3FileStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  S3FileStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/adapters/s3.storage.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            FileStorage\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                exists\n                            \n                            \n                                getSignedUrl\n                            \n                            \n                                    Async\n                                getStream\n                            \n                            \n                                    Async\n                                put\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(s3: S3Client, bucket: string, publicBaseUrl?: string)\n                    \n                \n                        \n                            \n                                Defined in src/storage/adapters/s3.storage.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        s3\n                                                  \n                                                        \n                                                                    S3Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        bucket\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        publicBaseUrl\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        exists\n                        \n                    \n                \n            \n            \n                \n                        \n                    exists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSignedUrl\n                        \n                    \n                \n            \n            \n                \ngetSignedUrl(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStream\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        put\n                        \n                    \n                \n            \n            \n                \n                        \n                    put(key: string, body: Buffer | Readable, opts?: PutOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        Buffer | Readable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            PutOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    DeleteObjectCommand,\n    GetObjectCommand,\n    HeadObjectCommand,\n    PutObjectCommand,\n    S3Client,\n} from \"@aws-sdk/client-s3\";\nimport { getSignedUrl as sign } from \"@aws-sdk/s3-request-presigner\";\nimport { Readable } from \"stream\";\nimport { FileStorage, PutOptions, StoredObject } from \"../storage.types\";\n\nexport class S3FileStorage implements FileStorage {\n    constructor(\n        private s3: S3Client,\n        private bucket: string,\n        private publicBaseUrl?: string, // e.g. CloudFront URL (optional)\n    ) {}\n\n    async put(\n        key: string,\n        body: Buffer | Readable,\n        opts?: PutOptions,\n    ): Promise {\n        await this.s3.send(\n            new PutObjectCommand({\n                Bucket: this.bucket,\n                Key: key,\n                Body: body,\n                ContentType: opts?.contentType,\n                Metadata: opts?.metadata,\n                ACL: opts?.acl === \"public\" ? \"public-read\" : undefined,\n                ChecksumSHA256: opts?.checksum, // optional if you computed it\n            }),\n        );\n\n        const head = await this.s3.send(\n            new HeadObjectCommand({ Bucket: this.bucket, Key: key }),\n        );\n        const url =\n            opts?.acl === \"public\"\n                ? this.publicBaseUrl\n                    ? `${this.publicBaseUrl.replace(/\\/+$/, \"\")}/${encodeURI(key)}`\n                    : `https://${this.bucket}.s3.amazonaws.com/${encodeURI(key)}`\n                : undefined;\n\n        return {\n            key,\n            etag: head.ETag,\n            size: head.ContentLength,\n            url,\n            contentType: head.ContentType || opts?.contentType,\n        };\n    }\n\n    async getStream(key: string) {\n        const obj = await this.s3.send(\n            new GetObjectCommand({ Bucket: this.bucket, Key: key }),\n        );\n        const stream = obj.Body as Readable;\n        return {\n            stream,\n            contentType: obj.ContentType,\n            size: obj.ContentLength,\n        };\n    }\n\n    async delete(key: string) {\n        await this.s3.send(\n            new DeleteObjectCommand({ Bucket: this.bucket, Key: key }),\n        );\n    }\n\n    async exists(key: string) {\n        try {\n            await this.s3.send(\n                new HeadObjectCommand({ Bucket: this.bucket, Key: key }),\n            );\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    getSignedUrl(key: string) {\n        return Promise.resolve(\n            sign(\n                this.s3,\n                new GetObjectCommand({ Bucket: this.bucket, Key: key }),\n            ),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SchemaResponse.html":{"url":"classes/SchemaResponse.html","title":"class - SchemaResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SchemaResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/dto/schema-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Schema to validate other json objects.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                $schema\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                properties\n                            \n                            \n                                    \n                                    Optional\n                                required\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                title\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        $schema\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Equals('https://json-schema.org/draft/2020-12/schema')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        required\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Equals('object')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    Equals,\n    IsArray,\n    IsObject,\n    IsOptional,\n    IsString,\n} from \"class-validator\";\n\n/**\n * Schema to validate other json objects.\n */\nexport class SchemaResponse {\n    @Equals(\"https://json-schema.org/draft/2020-12/schema\")\n    $schema: \"https://json-schema.org/draft/2020-12/schema\";\n    @Equals(\"object\")\n    type: \"object\";\n    @IsObject()\n    properties: Record;\n    @IsArray()\n    required?: string[];\n    @IsOptional()\n    @IsString()\n    title?: string;\n    @IsOptional()\n    @IsString()\n    description?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Session.html":{"url":"entities/Session.html","title":"entity - Session","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Session\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/entities/session.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a user session in the application.\nIt includes various properties such as credentials, authorization code,\nrequest URI, authorization queries, and more.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                auth_queries\n                            \n                            \n                                    \n                                    Optional\n                                authorization_code\n                            \n                            \n                                    \n                                    Optional\n                                claimsWebhook\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                credentialPayload\n                            \n                            \n                                    \n                                    Optional\n                                credentials\n                            \n                            \n                                    \n                                    Optional\n                                expiresAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                issuanceId\n                            \n                            \n                                    \n                                    Optional\n                                nonce\n                            \n                            \n                                    \n                                notifications\n                            \n                            \n                                    \n                                    Optional\n                                notifyWebhook\n                            \n                            \n                                    \n                                    Optional\n                                offer\n                            \n                            \n                                    \n                                    Optional\n                                offerUrl\n                            \n                            \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                    Optional\n                                requestId\n                            \n                            \n                                    \n                                    Optional\n                                requestUrl\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    Optional\n                                vp_nonce\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        auth_queries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthorizeQueries\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:94\n                        \n                    \n\n            \n                \n                    Authorization queries associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        authorization_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:84\n                        \n                    \n\n            \n                \n                    Authorization code for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        claimsWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:143\n                        \n                    \n\n            \n                \n                    Webhook configuration to send result and may receive further information.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:111\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentialPayload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OfferRequestDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:138\n                        \n                    \n\n            \n                \n                    Credential payload containing the offer request details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :     VerificationResult[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:79\n                        \n                    \n\n            \n                \n                    Verified credentials from the verification process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        expiresAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('date', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:120\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:58\n                        \n                    \n\n            \n                \n                    Unique identifier for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        issuanceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        nonce\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:105\n                        \n                    \n\n            \n                \n                    Nonce used for the OID4VCI flow.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Notification[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:153\n                        \n                    \n\n            \n                \n                    Notifications associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        notifyWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:148\n                        \n                    \n\n            \n                \n                    Webhook configuration to send the result of the notification response.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        offer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CredentialOfferObject\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:126\n                        \n                    \n\n            \n                \n                    Credential offer object containing details about the credential offer or presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        offerUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:132\n                        \n                    \n\n            \n                \n                    Offer URL for the credential offer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:89\n                        \n                    \n\n            \n                \n                    Request URI from the authorization request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        requestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:67\n                        \n                    \n\n            \n                \n                    The ID of the presentation configuration associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        requestUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:73\n                        \n                    \n\n            \n                \n                    The URL of the presentation auth request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SessionStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: SessionStatus})@Column('varchar', {nullable: true, default: 'active'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:171\n                        \n                    \n\n            \n                \n                    Status of the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:164\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:158\n                        \n                    \n\n            \n                \n                    Tenant ID for multi-tenancy support.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:117\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was last updated.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        vp_nonce\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:99\n                        \n                    \n\n            \n                \n                    Noncce from the Verifiable Presentation request.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n    CredentialOfferObject,\n    NotificationEvent,\n} from \"@openid4vc/openid4vci\";\nimport { VerificationResult } from \"@sd-jwt/sd-jwt-vc\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    PrimaryColumn,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../auth/entitites/tenant.entity\";\nimport { AuthorizeQueries } from \"../../issuer/authorize/dto/authorize-request.dto\";\nimport { OfferRequestDto } from \"../../issuer/oid4vci/dto/offer-request.dto\";\nimport { WebhookConfig } from \"../../utils/webhook/webhook.dto\";\n\nexport enum SessionStatus {\n    Active = \"active\",\n    Fetched = \"fetched\",\n    Completed = \"completed\",\n    Expired = \"expired\",\n    Failed = \"failed\",\n}\n\n/**\n * Represents a session entity for managing user sessions in the application.\n */\nexport type Notification = {\n    /**\n     * Unique identifier for the notification.\n     */\n    id: string;\n    /**\n     * The type of notification.\n     */\n    event?: NotificationEvent;\n\n    /**\n     * The credential ID associated with the notification.\n     */\n    credentialConfigurationId: string;\n};\n\n/**\n * Entity representing a user session in the application.\n * It includes various properties such as credentials, authorization code,\n * request URI, authorization queries, and more.\n */\n@Entity()\nexport class Session {\n    /**\n     * Unique identifier for the session.\n     */\n    @PrimaryColumn(\"uuid\")\n    id: string;\n\n    @Column(\"varchar\", { nullable: true })\n    issuanceId?: string;\n\n    /**\n     * The ID of the presentation configuration associated with the session.\n     */\n    @Column(\"varchar\", { nullable: true })\n    requestId?: string;\n\n    /**\n     * The URL of the presentation auth request.\n     */\n    @Column(\"varchar\", { nullable: true })\n    requestUrl?: string;\n\n    /**\n     * Verified credentials from the verification process.\n     */\n    @Column(\"json\", { nullable: true })\n    credentials?: VerificationResult[];\n    /**\n     * Authorization code for the session.\n     */\n    @Column(\"varchar\", { nullable: true })\n    authorization_code?: string;\n    /**\n     * Request URI from the authorization request.\n     */\n    @Column(\"varchar\", { nullable: true })\n    request_uri?: string;\n    /**\n     * Authorization queries associated with the session.\n     */\n    @Column(\"json\", { nullable: true })\n    auth_queries?: AuthorizeQueries;\n    /**\n     * Noncce from the Verifiable Presentation request.\n     */\n    @Column(\"varchar\", { nullable: true })\n    vp_nonce?: string;\n\n    /**\n     * Nonce used for the OID4VCI flow.\n     */\n    @Column(\"varchar\", { nullable: true })\n    nonce?: string;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    @Column(\"date\", { nullable: true })\n    expiresAt?: Date;\n\n    /**\n     * Credential offer object containing details about the credential offer or presentation request.\n     */\n    @Column(\"json\", { nullable: true })\n    offer?: CredentialOfferObject;\n\n    /**\n     * Offer URL for the credential offer.\n     */\n    @Column(\"varchar\", { nullable: true })\n    offerUrl?: string;\n\n    /**\n     * Credential payload containing the offer request details.\n     */\n    @Column(\"json\", { nullable: true })\n    credentialPayload?: OfferRequestDto;\n    /**\n     * Webhook configuration to send result and may receive further information.\n     */\n    @Column(\"json\", { nullable: true })\n    claimsWebhook?: WebhookConfig;\n    /**\n     * Webhook configuration to send the result of the notification response.\n     */\n    @Column(\"json\", { nullable: true })\n    notifyWebhook?: WebhookConfig;\n    /**\n     * Notifications associated with the session.\n     */\n    @Column(\"json\", { default: JSON.stringify([]) })\n    notifications: Notification[];\n    /**\n     * Tenant ID for multi-tenancy support.\n     */\n    @Column(\"varchar\")\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Status of the session.\n     */\n    @ApiProperty({ enum: SessionStatus })\n    @Column(\"varchar\", { nullable: true, default: \"active\" })\n    status: SessionStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SessionController.html":{"url":"controllers/SessionController.html","title":"controller - SessionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SessionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                session\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteSession\n                            \n                            \n                                    \n                                getAllSessions\n                            \n                            \n                                    \n                                    \n                                getSession\n                            \n                            \n                                    \n                                revokeAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteSession(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:54\n                        \n                    \n\n\n            \n                \n                        Deletes a session by its ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getAllSessions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllSessions()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:33\n                        \n                    \n\n\n            \n                \n                        Retrieves all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSession(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiParam({name: 'id', description: 'The session ID', type: String})@Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:43\n                        \n                    \n\n\n            \n                \n                        Retrieves the session information for a given session ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Session\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        revokeAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    revokeAll(value: StatusUpdateDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('revoke')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:67\n                        \n                    \n\n\n            \n                \n                        Update the status of the credentials of a specific session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { ApiParam, ApiSecurity, ApiTags } from \"@nestjs/swagger\";\nimport { JwtAuthGuard } from \"../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../auth/token.decorator\";\nimport { StatusUpdateDto } from \"../issuer/status-list/dto/status-update.dto\";\nimport { StatusListService } from \"../issuer/status-list/status-list.service\";\nimport { Session } from \"./entities/session.entity\";\nimport { SessionPipe } from \"./session.pipe\";\nimport { SessionService } from \"./session.service\";\n\n@ApiTags(\"Session management\")\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"session\")\nexport class SessionController {\n    constructor(\n        private readonly sessionService: SessionService,\n        private readonly statusListService: StatusListService,\n    ) {}\n\n    /**\n     * Retrieves all sessions.\n     */\n    @Get()\n    getAllSessions(): Promise {\n        return this.sessionService.getAll();\n    }\n\n    /**\n     * Retrieves the session information for a given session ID.\n     * @param id - The identifier of the session.\n     */\n    @ApiParam({ name: \"id\", description: \"The session ID\", type: String })\n    @Get(\":id\")\n    getSession(@Param(\"id\", SessionPipe) session: Session): Session {\n        return session;\n    }\n\n    /**\n     * Deletes a session by its ID\n     * @param id\n     * @param user\n     * @returns\n     */\n    @Delete(\":id\")\n    deleteSession(\n        @Param(\"id\") id: string,\n        @Token() user: TokenPayload,\n    ): Promise {\n        return this.sessionService.delete(id, user.sub);\n    }\n\n    /**\n     * Update the status of the credentials of a specific session.\n     * @param value\n     * @returns\n     */\n    @Post(\"revoke\")\n    revokeAll(@Body() value: StatusUpdateDto, @Token() user: TokenPayload) {\n        return this.statusListService.updateStatus(value, user.sub);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SessionLogContext.html":{"url":"interfaces/SessionLogContext.html","title":"interface - SessionLogContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SessionLogContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger-context.ts\n        \n\n\n            \n                Description\n            \n            \n                Context for session logging, including session ID, tenant ID, flow type, and optional stage.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            flowType\n                                        \n                                \n                                \n                                        \n                                            sessionId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stage\n                                        \n                                \n                                \n                                        \n                                            tenantId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger-context.ts:21\n                            \n                        \n                \n                    \n                        Additional context information for the session.\n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        flowType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        flowType:     \"OID4VCI\" | \"OID4VP\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"OID4VCI\" | \"OID4VP\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Type of flow being logged (e.g., OID4VCI, OID4VP).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sessionId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sessionId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier for the session.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional stage of the flow, useful for tracking progress.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tenantId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tenantId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identifier for the tenant associated with the session.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SessionLogContext {\n    /**\n     * Unique identifier for the session.\n     */\n    sessionId: string;\n    /**\n     * Identifier for the tenant associated with the session.\n     */\n    tenantId: string;\n    /**\n     * Type of flow being logged (e.g., OID4VCI, OID4VP).\n     */\n    flowType: \"OID4VCI\" | \"OID4VP\";\n    /**\n     * Optional stage of the flow, useful for tracking progress.\n     */\n    stage?: string;\n    /**\n     * Additional context information for the session.\n     */\n    [key: string]: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerInterceptor.html":{"url":"injectables/SessionLoggerInterceptor.html","title":"injectable - SessionLoggerInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor for logging session-related requests and responses.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                isEnabled\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                            \n                                    Private\n                                sanitizeBody\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, logger: PinoLogger, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger.interceptor.ts:19\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerInterceptor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nReflector instance for accessing metadata.\n\n\n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPinoLogger instance for logging.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfigService for accessing configuration.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.interceptor.ts:44\n                        \n                    \n\n\n            \n                \n                        Intercepts the request and logs session-related information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nExecution context of the request.\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCall handler to proceed with the request.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that emits the response data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sanitizeBody\n                        \n                    \n                \n            \n            \n                \n                        \n                    sanitizeBody(body: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.interceptor.ts:136\n                        \n                    \n\n\n            \n                \n                        Sanitizes the request body to remove sensitive information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request body to sanitize.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Sanitized body.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        isEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/session-logger.interceptor.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    CallHandler,\n    ExecutionContext,\n    Injectable,\n    NestInterceptor,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { Reflector } from \"@nestjs/core\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { Observable } from \"rxjs\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport { SESSION_LOGGER_KEY } from \"./session-logger.decorator\";\n\n/**\n * Interceptor for logging session-related requests and responses.\n */\n@Injectable()\nexport class SessionLoggerInterceptor implements NestInterceptor {\n    private readonly isEnabled: boolean;\n\n    /**\n     * Constructor for SessionLoggerInterceptor.\n     * @param reflector - Reflector instance for accessing metadata.\n     * @param logger - PinoLogger instance for logging.\n     * @param configService - ConfigService for accessing configuration.\n     */\n    constructor(\n        private readonly reflector: Reflector,\n        private readonly logger: PinoLogger,\n        private readonly configService: ConfigService,\n    ) {\n        this.isEnabled = this.configService.get(\n            \"LOG_ENABLE_SESSION_LOGGER\",\n            false,\n        );\n    }\n\n    /**\n     * Intercepts the request and logs session-related information.\n     * @param context - Execution context of the request.\n     * @param next - Call handler to proceed with the request.\n     * @returns An observable that emits the response data.\n     */\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        const metadata = this.reflector.get(\n            SESSION_LOGGER_KEY,\n            context.getHandler(),\n        );\n\n        if (!metadata || !this.isEnabled) {\n            return next.handle();\n        }\n\n        const { sessionIdParam, flowType } = metadata;\n        const request = context.switchToHttp().getRequest();\n        const response = context.switchToHttp().getResponse();\n\n        const sessionId = request.params[sessionIdParam];\n\n        const tenantId = request.params?.tenantId;\n        const method = request.method;\n        const url = request.url;\n\n        // Set context for this logger instance\n        this.logger.setContext(\"SessionLogger\");\n\n        // Create log context\n        const logContext = {\n            sessionId,\n            tenantId,\n            flowType,\n            endpoint: `${method} ${url}`,\n        };\n\n        // Log the start of the request\n        this.logger.info(\n            {\n                ...logContext,\n                event: \"request_start\",\n                method,\n                url,\n                headers: {\n                    \"user-agent\": request.headers[\"user-agent\"],\n                    \"content-type\": request.headers[\"content-type\"],\n                },\n                body: this.sanitizeBody(request.body),\n            },\n            `[${flowType}] Starting ${method} ${url} for session ${sessionId}`,\n        );\n\n        const startTime = Date.now();\n\n        return next.handle().pipe(\n            tap((data) => {\n                const duration = Date.now() - startTime;\n                this.logger.info(\n                    {\n                        ...logContext,\n                        event: \"request_success\",\n                        method,\n                        url,\n                        statusCode: response.statusCode,\n                        duration,\n                        responseSize: JSON.stringify(data || {}).length,\n                    },\n                    `[${flowType}] Completed ${method} ${url} for session ${sessionId} in ${duration}ms`,\n                );\n            }),\n            catchError((error) => {\n                const duration = Date.now() - startTime;\n                this.logger.error(\n                    {\n                        ...logContext,\n                        event: \"request_error\",\n                        method,\n                        url,\n                        error: {\n                            name: error.name,\n                            message: error.message,\n                            stack: error.stack,\n                        },\n                        duration,\n                    },\n                    `[${flowType}] Error in ${method} ${url} for session ${sessionId}: ${error.message}`,\n                );\n                throw error;\n            }),\n        );\n    }\n\n    /**\n     * Sanitizes the request body to remove sensitive information.\n     * @param body - The request body to sanitize.\n     * @returns Sanitized body.\n     */\n    private sanitizeBody(body: any): any {\n        if (!body) return body;\n\n        // Create a copy to avoid modifying the original\n        const sanitized = { ...body };\n\n        // Remove sensitive fields\n        const sensitiveFields = [\n            \"password\",\n            \"token\",\n            \"secret\",\n            \"key\",\n            \"private_key\",\n            \"access_token\",\n            \"refresh_token\",\n        ];\n\n        sensitiveFields.forEach((field) => {\n            if (sanitized[field]) {\n                sanitized[field] = \"[REDACTED]\";\n            }\n        });\n\n        return sanitized;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerService.html":{"url":"injectables/SessionLoggerService.html","title":"injectable - SessionLoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for logging session-related events and errors.\nUses PinoLogger for structured logging.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                isEnabled\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logAuthorizationRequest\n                            \n                            \n                                logCredentialIssuance\n                            \n                            \n                                logCredentialVerification\n                            \n                            \n                                logFlowComplete\n                            \n                            \n                                logFlowError\n                            \n                            \n                                logFlowStart\n                            \n                            \n                                logNotification\n                            \n                            \n                                logSession\n                            \n                            \n                                logSessionError\n                            \n                            \n                                logTokenExchange\n                            \n                            \n                                    Private\n                                shouldLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: PinoLogger, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger.service.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPinoLogger instance for logging.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfigService for accessing environment configuration.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \nlogAuthorizationRequest(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:146\n                        \n                    \n\n\n            \n                \n                        Log authorization request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialIssuance\n                        \n                    \n                \n            \n            \n                \nlogCredentialIssuance(context: SessionLogContext, credentialType: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Log credential issuance step\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialVerification\n                        \n                    \n                \n            \n            \n                \nlogCredentialVerification(context: SessionLogContext, verificationResult: boolean, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Log credential presentation verification\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                verificationResult\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowComplete\n                        \n                    \n                \n            \n            \n                \nlogFlowComplete(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Log session flow completion\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowError\n                        \n                    \n                \n            \n            \n                \nlogFlowError(context: SessionLogContext, error: Error, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Log session flow error\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowStart\n                        \n                    \n                \n            \n            \n                \nlogFlowStart(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Log session flow start\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logNotification\n                        \n                    \n                \n            \n            \n                \nlogNotification(context: SessionLogContext, notificationEvent: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:180\n                        \n                    \n\n\n            \n                \n                        Log notification events\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                notificationEvent\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSession\n                        \n                    \n                \n            \n            \n                \nlogSession(context: SessionLogContext, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:202\n                        \n                    \n\n\n            \n                \n                        Generic session log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSessionError\n                        \n                    \n                \n            \n            \n                \nlogSessionError(context: SessionLogContext, error: Error, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:221\n                        \n                    \n\n\n            \n                \n                        Generic session error log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logTokenExchange\n                        \n                    \n                \n            \n            \n                \nlogTokenExchange(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:163\n                        \n                    \n\n\n            \n                \n                        Log token exchange\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldLog\n                        \n                    \n                \n            \n            \n                \n                        \n                    shouldLog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        isEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/session-logger.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { SessionLogContext } from \"./session-logger-context\";\n\n/**\n * Service for logging session-related events and errors.\n * Uses PinoLogger for structured logging.\n */\n@Injectable()\nexport class SessionLoggerService {\n    private readonly isEnabled: boolean;\n\n    /**\n     * Constructor for SessionLoggerService.\n     * @param logger - PinoLogger instance for logging.\n     * @param configService - ConfigService for accessing environment configuration.\n     */\n    constructor(\n        private readonly logger: PinoLogger,\n        private readonly configService: ConfigService,\n    ) {\n        this.logger.setContext(\"SessionLoggerService\");\n        this.isEnabled = this.configService.get(\n            \"LOG_ENABLE_SESSION_LOGGER\",\n            false,\n        );\n    }\n\n    private shouldLog(): boolean {\n        return this.isEnabled;\n    }\n\n    /**\n     * Log session flow start\n     */\n    logFlowStart(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow started for session ${context.sessionId} in tenant ${context.tenantId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"flow_start\",\n                stage: \"initialization\",\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow completion\n     */\n    logFlowComplete(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow completed for session ${context.sessionId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"flow_complete\",\n                stage: \"completion\",\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow error\n     */\n    logFlowError(\n        context: SessionLogContext,\n        error: Error,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow error for session ${context.sessionId}: ${error.message}`;\n\n        this.logger.error(\n            {\n                ...context,\n                event: \"flow_error\",\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log credential issuance step\n     */\n    logCredentialIssuance(\n        context: SessionLogContext,\n        credentialType: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"credential_issuance\",\n                stage: \"credential_creation\",\n                credentialType,\n                ...additionalData,\n            },\n            `[${context.flowType}] Issuing credential of type ${credentialType} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log credential presentation verification\n     */\n    logCredentialVerification(\n        context: SessionLogContext,\n        verificationResult: boolean,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"credential_verification\",\n                stage: \"verification\",\n                verificationResult,\n                ...additionalData,\n            },\n            `[${context.flowType}] Credential verification ${verificationResult ? \"succeeded\" : \"failed\"} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log authorization request\n     */\n    logAuthorizationRequest(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"authorization_request\",\n                stage: \"authorization\",\n                ...additionalData,\n            },\n            `[${context.flowType}] Authorization request created for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log token exchange\n     */\n    logTokenExchange(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"token_exchange\",\n                stage: \"token_exchange\",\n                ...additionalData,\n            },\n            `[${context.flowType}] Token exchange for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log notification events\n     */\n    logNotification(\n        context: SessionLogContext,\n        notificationEvent: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"notification\",\n                stage: \"notification\",\n                notificationEvent,\n                ...additionalData,\n            },\n            `[${context.flowType}] Notification ${notificationEvent} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Generic session log method\n     */\n    logSession(\n        context: SessionLogContext,\n        message: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}`,\n        );\n    }\n\n    /**\n     * Generic session error log method\n     */\n    logSessionError(\n        context: SessionLogContext,\n        error: Error,\n        message: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.error(\n            {\n                ...context,\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}: ${error.message}`,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SessionModule.html":{"url":"modules/SessionModule.html","title":"module - SessionModule","body":"\n                   \n\n\n\n\n    Modules\n    SessionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_SessionModule_exports\n\n\n\ncluster_SessionModule_imports\n\n\n\n\nStatusListModule\n\nStatusListModule\n\n\n\nSessionModule\n\nSessionModule\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/session/session.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            SessionModule is responsible for managing user sessions.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SessionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SessionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SessionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { makeGaugeProvider } from \"@willsoto/nestjs-prometheus\";\nimport { StatusListModule } from \"../issuer/status-list/status-list.module\";\nimport { Session } from \"./entities/session.entity\";\nimport { SessionController } from \"./session.controller\";\nimport { SessionService } from \"./session.service\";\n\n/**\n * SessionModule is responsible for managing user sessions.\n */\n@Module({\n    imports: [TypeOrmModule.forFeature([Session]), StatusListModule],\n    providers: [\n        SessionService,\n        makeGaugeProvider({\n            name: \"sessions\",\n            help: \"Total number of sessions by status\",\n            labelNames: [\"tenant_id\", \"session_type\", \"status\"],\n        }),\n    ],\n    exports: [SessionService],\n    controllers: [SessionController],\n})\nexport class SessionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionPipe.html":{"url":"injectables/SessionPipe.html","title":"injectable - SessionPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionService: SessionService)\n                    \n                \n                        \n                            \n                                Defined in src/session/session.pipe.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(sessionId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.pipe.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException, PipeTransform } from \"@nestjs/common\";\nimport { Session } from \"./entities/session.entity\";\nimport { SessionService } from \"./session.service\";\n\n@Injectable()\nexport class SessionPipe implements PipeTransform> {\n    constructor(private readonly sessionService: SessionService) {}\n\n    async transform(sessionId: string): Promise {\n        if (!sessionId) {\n            throw new NotFoundException(\n                \"Session ID not found in request parameters\",\n            );\n        }\n\n        const session = await this.sessionService.get(sessionId);\n        if (!session) {\n            throw new NotFoundException(\n                `Session with ID ${sessionId} not found`,\n            );\n        }\n\n        // Return the entity so the controller parameter receives it\n        return session;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionService.html":{"url":"injectables/SessionService.html","title":"injectable - SessionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                getAll\n                            \n                            \n                                getBy\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                    Async\n                                onTenantDelete\n                            \n                            \n                                    Async\n                                setState\n                            \n                            \n                                tidyUpSessions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionRepository: Repository, configService: ConfigService, schedulerRegistry: SchedulerRegistry, sessionsCounter: Gauge)\n                    \n                \n                        \n                            \n                                Defined in src/session/session.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schedulerRegistry\n                                                  \n                                                        \n                                                                    SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionsCounter\n                                                  \n                                                        \n                                                                    Gauge\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(issuer_state: string, values: QueryDeepPartialEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:144\n                        \n                    \n\n\n            \n                \n                        Update an existing session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            QueryDeepPartialEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(session: DeepPartial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:98\n                        \n                    \n\n\n            \n                \n                        Create a new session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string, sub: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:192\n                        \n                    \n\n\n            \n                \n                        Deletes a session by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                sub\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:163\n                        \n                    \n\n\n            \n                \n                        Get a session by its state.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAll\n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:152\n                        \n                    \n\n\n            \n                \n                        Get all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBy\n                        \n                    \n                \n            \n            \n                \ngetBy(where: FindOptionsWhere)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:172\n                        \n                    \n\n\n            \n                \n                        Get a session by a specific condition.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                            FindOptionsWhere\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Register the tidy up cron job on application bootstrap.\nThis will run every hour by default, but can be configured via the SESSION_TIDY_UP_INTERVAL config variable.\n\n\n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Deletes all sessions for a specific tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setState\n                        \n                    \n                \n            \n            \n                \n                        \n                    setState(session: Session, status: SessionStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Marks the session as successful or failed.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            SessionStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tidyUpSessions\n                        \n                    \n                \n            \n            \n                \ntidyUpSessions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:179\n                        \n                    \n\n\n            \n                \n                        Tidy up sessions that are older than 1 day.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { SchedulerRegistry } from \"@nestjs/schedule\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { InjectMetric } from \"@willsoto/nestjs-prometheus/dist/injector\";\nimport { Gauge } from \"prom-client\";\nimport {\n    DeepPartial,\n    FindOptionsWhere,\n    IsNull,\n    LessThan,\n    Not,\n    Repository,\n} from \"typeorm\";\nimport { QueryDeepPartialEntity } from \"typeorm/query-builder/QueryPartialEntity\";\nimport { Session, SessionStatus } from \"./entities/session.entity\";\n\n@Injectable()\nexport class SessionService implements OnApplicationBootstrap {\n    constructor(\n        @InjectRepository(Session)\n        private sessionRepository: Repository,\n        private readonly configService: ConfigService,\n        private readonly schedulerRegistry: SchedulerRegistry,\n        @InjectMetric(\"sessions\")\n        private sessionsCounter: Gauge,\n    ) {}\n\n    /**\n     * Register the tidy up cron job on application bootstrap.\n     * This will run every hour by default, but can be configured via the `SESSION_TIDY_UP_INTERVAL` config variable.\n     * @returns\n     */\n    async onApplicationBootstrap() {\n        const callback = () => {\n            void this.tidyUpSessions();\n        };\n        const intervalTime =\n            this.configService.getOrThrow(\"SESSION_TIDY_UP_INTERVAL\") *\n            1000;\n        const interval = setInterval(callback, intervalTime);\n        this.schedulerRegistry.addInterval(\"tidyUpSessions\", interval);\n\n        //set default values for session metrics\n        const tenantId = \"root\";\n        const states: SessionStatus[] = [\n            SessionStatus.Active,\n            SessionStatus.Fetched,\n            SessionStatus.Completed,\n            SessionStatus.Expired,\n            SessionStatus.Failed,\n        ];\n        for (const state of states) {\n            const issuanceCounter = await this.sessionRepository.countBy({\n                tenantId,\n                issuanceId: Not(IsNull()),\n                status: state,\n            });\n            this.sessionsCounter.set(\n                {\n                    tenant_id: tenantId,\n                    session_type: \"issuance\",\n                    status: state,\n                },\n                issuanceCounter,\n            );\n            const verificationCounter = await this.sessionRepository.countBy({\n                tenantId,\n                issuanceId: IsNull(),\n                status: state,\n            });\n            this.sessionsCounter.set(\n                {\n                    tenant_id: tenantId,\n                    session_type: \"verification\",\n                    status: state,\n                },\n                verificationCounter,\n            );\n        }\n\n        return this.tidyUpSessions();\n    }\n\n    /**\n     * Deletes all sessions for a specific tenant.\n     * @param tenantId\n     */\n    async onTenantDelete(tenantId: string) {\n        await this.sessionRepository.delete({ tenantId });\n    }\n\n    /**\n     * Create a new session.\n     * @param session\n     * @returns\n     */\n    async create(session: DeepPartial) {\n        const createdSession = await this.sessionRepository.save(session);\n\n        // Count total sessions created\n        this.sessionsCounter.inc({\n            tenant_id: createdSession.tenantId,\n            session_type: createdSession.issuanceId\n                ? \"issuance\"\n                : \"verification\",\n            status: \"active\",\n        });\n\n        return createdSession;\n    }\n\n    /**\n     * Marks the session as successful or failed.\n     * @param session\n     * @param status\n     */\n    async setState(session: Session, status: SessionStatus) {\n        const sessionType = session.issuanceId ? \"issuance\" : \"verification\";\n\n        await this.sessionRepository.update({ id: session.id }, { status });\n\n        // Count completed sessions (success or failure)\n        this.sessionsCounter.inc({\n            tenant_id: session.tenantId,\n            session_type: sessionType,\n            status,\n        });\n\n        // Decrease active sessions count\n        this.sessionsCounter.dec({\n            tenant_id: session.tenantId,\n            session_type: sessionType,\n            status: \"active\",\n        });\n    }\n\n    /**\n     * Update an existing session.\n     * @param issuer_state\n     * @param values\n     * @returns\n     */\n    add(issuer_state: string, values: QueryDeepPartialEntity) {\n        return this.sessionRepository.update({ id: issuer_state }, values);\n    }\n\n    /**\n     * Get all sessions.\n     * @returns\n     */\n    getAll(): Promise {\n        return this.sessionRepository.find({\n            order: { updatedAt: \"DESC\" },\n        });\n    }\n\n    /**\n     * Get a session by its state.\n     * @param state\n     * @returns\n     */\n    get(state: string) {\n        return this.sessionRepository.findOneByOrFail({ id: state });\n    }\n\n    /**\n     * Get a session by a specific condition.\n     * @param where\n     * @returns\n     */\n    getBy(where: FindOptionsWhere) {\n        return this.sessionRepository.findOneByOrFail(where);\n    }\n\n    /**\n     * Tidy up sessions that are older than 1 day.\n     */\n    tidyUpSessions() {\n        const ttl = this.configService.getOrThrow(\"SESSION_TTL\") * 1000;\n        return this.sessionRepository.delete({\n            createdAt: LessThan(new Date(Date.now() - ttl)),\n        });\n    }\n\n    /**\n     * Deletes a session by its ID and tenant ID.\n     * @param id\n     * @param sub\n     * @returns\n     */\n    delete(id: string, sub: string): Promise {\n        return this.sessionRepository.delete({ id, tenantId: sub });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StatusListController.html":{"url":"controllers/StatusListController.html","title":"controller - StatusListController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StatusListController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/status-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getList\n                        \n                    \n                \n            \n            \n                \n                        \n                    getList(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('status-list')@Header('Content-Type', 'application/statuslist+jwt')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.controller.ts:17\n                        \n                    \n\n\n            \n                \n                        Get the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header, Param } from \"@nestjs/common\";\nimport { ApiExcludeController, ApiTags } from \"@nestjs/swagger\";\nimport { StatusListService } from \"./status-list.service\";\n\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@ApiTags(\"Status management\")\n@Controller(\":tenantId/status-management\")\nexport class StatusListController {\n    constructor(private statusListService: StatusListService) {}\n\n    /**\n     * Get the status list\n     * @returns\n     */\n    @Get(\"status-list\")\n    @Header(\"Content-Type\", \"application/statuslist+jwt\")\n    getList(@Param(\"tenantId\") tenantId: string) {\n        return this.statusListService.getList(tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/StatusListEntity.html":{"url":"entities/StatusListEntity.html","title":"entity - StatusListEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  StatusListEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/entities/status-list.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing the status list for a tenant.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                bits\n                            \n                            \n                                    \n                                elements\n                            \n                            \n                                    \n                                    Optional\n                                jwt\n                            \n                            \n                                    \n                                stack\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        bits\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BitsPerStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:38\n                        \n                    \n\n            \n                \n                    The number of bits used for each status in the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        elements\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:26\n                        \n                    \n\n            \n                \n                    The elements of the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        jwt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:44\n                        \n                    \n\n            \n                \n                    The JSON Web Token (JWT) for the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        stack\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:32\n                        \n                    \n\n            \n                \n                    The stack of available indexes for the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:20\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:14\n                        \n                    \n\n            \n                \n                    The ID of the tenant to which the status list belongs.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { BitsPerStatus } from \"@sd-jwt/jwt-status-list\";\nimport { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\n\n/**\n * Entity representing the status list for a tenant.\n */\n@Entity()\nexport class StatusListEntity {\n    /**\n     * The ID of the tenant to which the status list belongs.\n     */\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * The elements of the status list.\n     */\n    @Column(\"json\")\n    elements: number[];\n\n    /**\n     * The stack of available indexes for the status list.\n     */\n    @Column(\"json\")\n    stack: number[];\n\n    /**\n     * The number of bits used for each status in the status list.\n     */\n    @Column(\"int\")\n    bits: BitsPerStatus;\n\n    /**\n     * The JSON Web Token (JWT) for the status list.\n     */\n    @Column(\"varchar\", { nullable: true })\n    jwt?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StatusListModule.html":{"url":"modules/StatusListModule.html","title":"module - StatusListModule","body":"\n                   \n\n\n\n\n    Modules\n    StatusListModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_providers\n\n\n\ncluster_StatusListModule_exports\n\n\n\ncluster_StatusListModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/status-list/status-list.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StatusListController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { CryptoModule } from \"../../crypto/crypto.module\";\nimport { StatusListEntity } from \"./entities/status-list.entity\";\nimport { StatusMapping } from \"./entities/status-mapping.entity\";\nimport { StatusListController } from \"./status-list.controller\";\nimport { StatusListService } from \"./status-list.service\";\n\n@Module({\n    imports: [\n        CryptoModule,\n        TypeOrmModule.forFeature([StatusMapping, StatusListEntity]),\n    ],\n    controllers: [StatusListController],\n    providers: [StatusListService],\n    exports: [StatusListService],\n})\nexport class StatusListModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StatusListService.html":{"url":"injectables/StatusListService.html","title":"injectable - StatusListService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StatusListService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEntry\n                            \n                            \n                                    Async\n                                createList\n                            \n                            \n                                getList\n                            \n                            \n                                onTenantDelete\n                            \n                            \n                                    Async\n                                onTenantInit\n                            \n                            \n                                    Private\n                                    Async\n                                setEntry\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, statusMappingRepository: Repository, statusListRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/status-list/status-list.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusMappingRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusListRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    createEntry(session: Session, credentialConfigurationId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Get the next free entry in the status list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createList\n                        \n                    \n                \n            \n            \n                \n                        \n                    createList(entry: StatusListEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:68\n                        \n                    \n\n\n            \n                \n                        Create a new status list and stored it in the file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entry\n                                            \n                                                            StatusListEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getList\n                        \n                    \n                \n            \n            \n                \ngetList(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:114\n                        \n                    \n\n\n            \n                \n                        Get the JWT for the status list of a tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The JWT for the status list.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \nonTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Delete the status list for a specific tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:36\n                        \n                    \n\n\n            \n                \n                        Initialize the status list service by checking if the status list file exists.\nIf it does not exist, create a new status list with 10,000 entries and a stack\nof 10,000 indexes. The stack is shuffled to ensure randomness in the order of\nentries. The status list is stored in the file system as a JSON file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        setEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    setEntry(id: number, value: number, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:176\n                        \n                    \n\n\n            \n                \n                        Update the value of an entry in the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(value: StatusUpdateDto, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:192\n                        \n                    \n\n\n            \n                \n                        Update the status of a session and its credential configuration\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport {\n    createHeaderAndPayload,\n    JWTwithStatusListPayload,\n    StatusList,\n    StatusListJWTHeaderParameters,\n} from \"@sd-jwt/jwt-status-list\";\nimport { JwtPayload } from \"@sd-jwt/types\";\nimport { join } from \"path\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { StatusUpdateDto } from \"./dto/status-update.dto\";\nimport { StatusListEntity } from \"./entities/status-list.entity\";\nimport { StatusMapping } from \"./entities/status-mapping.entity\";\n\n@Injectable()\nexport class StatusListService {\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        @InjectRepository(StatusMapping)\n        private statusMappingRepository: Repository,\n        @InjectRepository(StatusListEntity)\n        private statusListRepository: Repository,\n    ) {}\n\n    /**\n     * Initialize the status list service by checking if the status list file exists.\n     * If it does not exist, create a new status list with 10,000 entries and a stack\n     * of 10,000 indexes. The stack is shuffled to ensure randomness in the order of\n     * entries. The status list is stored in the file system as a JSON file.\n     */\n    async onTenantInit(tenantId: string) {\n        const size = 10000;\n        // create an empty array with the size of 1000\n        const elements = new Array(size).fill(0).map(() => 0);\n        // create a list of 1000 indexes and shuffel them\n        const stack = new Array(size)\n            .fill(0)\n            .map((_, i) => i)\n            .sort(() => 0.5 - Math.random());\n\n        const entry = await this.statusListRepository.save({\n            tenantId,\n            elements,\n            stack,\n            bits: 1,\n        });\n\n        await this.createList(entry);\n    }\n\n    /**\n     * Delete the status list for a specific tenant.\n     * @param tenantId The ID of the tenant.\n     */\n    onTenantDelete(tenantId: string) {\n        this.statusListRepository.delete({ tenantId });\n        this.statusMappingRepository.delete({ tenantId });\n    }\n\n    /**\n     * Create a new status list and stored it in the file\n     */\n    async createList(entry: StatusListEntity) {\n        const list = new StatusList(entry.elements, entry.bits);\n        const iss = `${this.configService.getOrThrow(\"PUBLIC_URL\")}`;\n\n        const sub = join(\n            this.configService.getOrThrow(\"PUBLIC_URL\"),\n            entry.tenantId,\n            \"status-management\",\n            \"status-list\",\n        );\n\n        const prePayload: JwtPayload = {\n            iss,\n            sub,\n            iat: Math.floor(Date.now() / 1000),\n        };\n        const preHeader: StatusListJWTHeaderParameters = {\n            alg: \"ES256\",\n            typ: \"statuslist+jwt\",\n            x5c: await this.cryptoService.getCertChain(\n                \"signing\",\n                entry.tenantId,\n            ),\n        };\n        const { header, payload } = createHeaderAndPayload(\n            list,\n            prePayload,\n            preHeader,\n        );\n\n        const jwt = await this.cryptoService.signJwt(\n            header,\n            payload,\n            entry.tenantId,\n        );\n        await this.statusListRepository.update(\n            { tenantId: entry.tenantId },\n            { jwt },\n        );\n    }\n\n    /**\n     * Get the JWT for the status list of a tenant.\n     * @param tenantId The ID of the tenant.\n     * @returns The JWT for the status list.\n     */\n    getList(tenantId: string) {\n        return this.statusListRepository\n            .findOneByOrFail({ tenantId })\n            .then((file) => file.jwt);\n    }\n\n    /**\n     * Get the next free entry in the status list.\n     * @returns\n     */\n    async createEntry(\n        session: Session,\n        credentialConfigurationId: string,\n    ): Promise {\n        const file = await this.statusListRepository\n            .findOneByOrFail({\n                tenantId: session.tenantId,\n            })\n            //if none if found, create one\n            .then(() =>\n                this.onTenantInit(session.tenantId).then(() =>\n                    this.statusListRepository.findOneByOrFail({\n                        tenantId: session.tenantId,\n                    }),\n                ),\n            );\n        // get the last element from the stack\n        const idx = file.stack.pop();\n        //TODO: what to do if the stack is empty\n        if (idx === undefined) {\n            throw new Error(\"Stack for status list is empty!!!\");\n        }\n        const sub = join(\n            this.configService.getOrThrow(\"PUBLIC_URL\"),\n            session.tenantId,\n            \"status-management\",\n            \"status-list\",\n        );\n        // store the index in the status mapping\n        await this.statusMappingRepository.save({\n            tenantId: session.tenantId,\n            sessionId: session.id,\n            index: idx,\n            list: sub,\n            credentialConfigurationId,\n        });\n\n        return {\n            status: {\n                status_list: {\n                    idx: idx,\n                    uri: sub,\n                },\n            },\n        };\n    }\n\n    /**\n     * Update the value of an entry in the status list\n     * @param id\n     * @param value\n     */\n    private async setEntry(id: number, value: number, tenantId: string) {\n        const entry = await this.statusListRepository.findOneByOrFail({\n            tenantId,\n        });\n        entry.elements[id] = value;\n        await this.statusListRepository.update(\n            { tenantId },\n            { elements: entry.elements },\n        );\n        return this.createList(entry);\n    }\n\n    /**\n     * Update the status of a session and its credential configuration\n     * @param value\n     */\n    async updateStatus(value: StatusUpdateDto, tenantId: string) {\n        const entries = await this.statusMappingRepository.findBy({\n            sessionId: value.sessionId,\n            credentialConfigurationId: value.credentialConfigurationId,\n        });\n        if (entries.length === 0) {\n            throw new ConflictException(\n                `No status mapping found for session ${value.sessionId} and credential configuration ${value.credentialConfigurationId}`,\n            );\n        }\n        for (const entry of entries) {\n            await this.setEntry(entry.index, value.status, tenantId);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/StatusMapping.html":{"url":"entities/StatusMapping.html","title":"entity - StatusMapping","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  StatusMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/entities/status-mapping.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                credentialConfigurationId\n                            \n                            \n                                    \n                                index\n                            \n                            \n                                    \n                                list\n                            \n                            \n                                    \n                                sessionId\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        list\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:13\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:7\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\n\n@Entity()\nexport class StatusMapping {\n    @Column({ type: \"varchar\", primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    @Column({ type: \"varchar\", primary: true })\n    sessionId: string;\n\n    @Column({ type: \"varchar\", primary: true })\n    list: string;\n\n    @Column({ type: \"int\", primary: true })\n    index: number;\n\n    @Column({ type: \"varchar\", primary: true })\n    credentialConfigurationId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StatusUpdateDto.html":{"url":"classes/StatusUpdateDto.html","title":"class - StatusUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StatusUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/dto/status-update.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                credentialConfigurationId\n                            \n                            \n                                    \n                                sessionId\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:16\n                        \n                    \n\n            \n                \n                    The ID of the credential configuration\nThis is optional, if not provided, all credentials will be revoked of the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:8\n                        \n                    \n\n            \n                \n                    The session ID of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsIn(['0', '1'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:24\n                        \n                    \n\n            \n                \n                    The status of the credential\n0 = valid, 1 = revoked\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsNumber, IsOptional, IsString } from \"class-validator\";\n\nexport class StatusUpdateDto {\n    /**\n     * The session ID of the user\n     */\n    @IsString()\n    sessionId: string;\n\n    /**\n     * The ID of the credential configuration\n     * This is optional, if not provided, all credentials will be revoked of the session.\n     */\n    @IsString()\n    @IsOptional()\n    credentialConfigurationId?: string;\n\n    /**\n     * The status of the credential\n     * 0 = valid, 1 = revoked\n     */\n    @IsNumber()\n    @IsIn([0, 1])\n    status: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StorageController.html":{"url":"controllers/StorageController.html","title":"controller - StorageController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StorageController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/storage.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                storage\n            \n\n\n            \n                Description\n            \n            \n                Storage Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                download\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        download\n                        \n                    \n                \n            \n            \n                \n                        \n                    download(key: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':key')\n                \n            \n\n                    \n                        \n                            Defined in src/storage/storage.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(user: TokenPayload, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(undefined)@UseGuards(JwtAuthGuard)@ApiSecurity('oauth2')@ApiConsumes('multipart/form-data')@ApiBody({description: 'List of cats', type: FileUploadDto})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/storage/storage.controller.ts:44\n                        \n                    \n\n\n            \n                \n                        Upload files that belong to a tenant like images\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Param,\n    Post,\n    StreamableFile,\n    UploadedFile,\n    UseGuards,\n    UseInterceptors,\n} from \"@nestjs/common\";\nimport { FileInterceptor } from \"@nestjs/platform-express\";\nimport { ApiBody, ApiConsumes, ApiSecurity } from \"@nestjs/swagger\";\nimport { JwtAuthGuard } from \"../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../auth/token.decorator\";\nimport { FileUploadDto } from \"./dto/file-upload.dto\";\nimport { FilesService } from \"./files.service\";\n\n/**\n * Storage Controller\n */\n@Controller(\"storage\")\nexport class StorageController {\n    /**\n     * Constructor\n     * @param filesService The files service\n     */\n    constructor(private filesService: FilesService) {}\n\n    /**\n     * Upload files that belong to a tenant like images\n     * @param user\n     * @param file\n     * @returns\n     */\n    @UseInterceptors(FileInterceptor(\"file\"))\n    @UseGuards(JwtAuthGuard)\n    @ApiSecurity(\"oauth2\")\n    @ApiConsumes(\"multipart/form-data\")\n    @ApiBody({\n        description: \"List of cats\",\n        type: FileUploadDto,\n    })\n    @Post()\n    upload(\n        @Token() user: TokenPayload,\n        @UploadedFile() file: Express.Multer.File,\n    ) {\n        return this.filesService.saveUserUpload(user.sub, file, true);\n    }\n\n    @Get(\":key\")\n    download(@Param(\"key\") key: string) {\n        return this.filesService.getStream(key).then(\n            (stream) =>\n                new StreamableFile(stream.stream, {\n                    disposition: \"attachment\",\n                    type: stream.contentType,\n                    length: stream.size,\n                }),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StorageModule.html":{"url":"modules/StorageModule.html","title":"module - StorageModule","body":"\n                   \n\n\n\n\n    Modules\n    StorageModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/storage/storage.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot()\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.module.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { S3Client } from \"@aws-sdk/client-s3\";\nimport { DynamicModule, Global, Module } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { LocalFileStorage } from \"./adapters/local.storage\";\nimport { S3FileStorage } from \"./adapters/s3.storage\";\nimport { FileEntity } from \"./entities/files.entity\";\nimport { FilesService } from \"./files.service\";\nimport { StorageController } from \"./storage.controller\";\nimport { FILE_STORAGE, FileStorage } from \"./storage.types\";\n\ntype Driver = \"local\" | \"s3\";\n\n@Global()\n@Module({})\nexport class StorageModule {\n    static forRoot(): DynamicModule {\n        return {\n            module: StorageModule,\n            imports: [TypeOrmModule.forFeature([FileEntity])],\n            controllers: [StorageController],\n            providers: [\n                FilesService,\n                {\n                    provide: FILE_STORAGE,\n                    inject: [ConfigService],\n                    useFactory: (cfg: ConfigService): FileStorage => {\n                        const driver = cfg.get(\"STORAGE_DRIVER\");\n                        if (driver === \"s3\") {\n                            return new S3FileStorage(\n                                new S3Client({\n                                    region: cfg.get(\"S3_REGION\"),\n                                    endpoint: cfg.get(\"S3_ENDPOINT\"),\n                                    forcePathStyle: cfg.get(\n                                        \"S3_FORCE_PATH_STYLE\",\n                                    ),\n                                    credentials: {\n                                        accessKeyId:\n                                            cfg.get(\n                                                \"S3_ACCESS_KEY_ID\",\n                                            )!,\n                                        secretAccessKey: cfg.get(\n                                            \"S3_SECRET_ACCESS_KEY\",\n                                        )!,\n                                    },\n                                }),\n                                cfg.get(\"S3_BUCKET\")!,\n                                cfg.get(\"S3_PUBLIC_BASE_URL\"),\n                            );\n                        }\n                        // local\n                        return new LocalFileStorage(\n                            cfg.getOrThrow(\"LOCAL_STORAGE_DIR\"),\n                        );\n                    },\n                },\n            ],\n            exports: [FilesService],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TenantController.html":{"url":"controllers/TenantController.html","title":"controller - TenantController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TenantController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/tenant/tenant.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tenant\n            \n\n\n            \n                Description\n            \n            \n                Tenant management controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteTenant\n                            \n                            \n                                    \n                                getTenantStatus\n                            \n                            \n                                    \n                                initTenant\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTenant(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.controller.ts:55\n                        \n                    \n\n\n            \n                \n                        Deletes a tenant by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant to delete\n\n                                            \n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getTenantStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTenantStatus(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('status')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.controller.ts:46\n                        \n                    \n\n\n            \n                \n                        Get the status of a tenant\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The status of the tenant\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        initTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    initTenant(user: TokenPayload, values: ClientInitDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.controller.ts:32\n                        \n                    \n\n\n            \n                \n                        Initialize a tenant for the given user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user to initialize the tenant for\n\n                                            \n                                        \n                                        \n                                                values\n                                            \n                                                            ClientInitDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    ConflictException,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { ApiSecurity } from \"@nestjs/swagger\";\nimport { AdminAuthGuard } from \"../admin.guard\";\nimport { ClientInitDto } from \"../dto/client-init.dto\";\nimport { Token, TokenPayload } from \"../token.decorator\";\nimport { TenantService } from \"./tenant.service\";\n\n/**\n * Tenant management controller\n */\n@UseGuards(AdminAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"tenant\")\nexport class TenantController {\n    constructor(private readonly tenantService: TenantService) {}\n\n    /**\n     * Initialize a tenant for the given user.\n     * @param user The user to initialize the tenant for\n     * @returns\n     */\n    @Post()\n    initTenant(@Token() user: TokenPayload, @Body() values: ClientInitDto) {\n        //only the admin is allowed to init new users. Or the user by itself.\n        if (values.id && !user.admin) {\n            throw new ConflictException(\"User is not an admin\");\n        }\n        return this.tenantService.initTenant(values.id || user.sub);\n    }\n\n    /**\n     * Get the status of a tenant\n     * @param id The ID of the tenant\n     * @returns The status of the tenant\n     */\n    @Get(\"status\")\n    getTenantStatus(@Token() user: TokenPayload) {\n        return this.tenantService.getTenantStatus(user.sub);\n    }\n\n    /**\n     * Deletes a tenant by ID\n     * @param id The ID of the tenant to delete\n     */\n    @Delete(\":id\")\n    deleteTenant(@Param(\"id\") id: string, @Token() user: TokenPayload) {\n        // either self delete or the user needs to be an admin.\n        if (id !== user.sub && !user.admin) {\n            throw new ConflictException(\n                \"User is not allowed to delete this tenant\",\n            );\n        }\n\n        return this.tenantService.deleteTenant(id, user);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/TenantEntity.html":{"url":"entities/TenantEntity.html","title":"entity - TenantEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  TenantEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entitites/tenant.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a tenant in the system.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entitites/tenant.entity.ts:12\n                        \n                    \n\n            \n                \n                    The unique identifier for the tenant.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entitites/tenant.entity.ts:18\n                        \n                    \n\n            \n                \n                    The current status of the tenant.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryColumn } from \"typeorm\";\n\n/**\n * Represents a tenant in the system.\n */\n@Entity()\nexport class TenantEntity {\n    /**\n     * The unique identifier for the tenant.\n     */\n    @PrimaryColumn()\n    id: string;\n\n    /**\n     * The current status of the tenant.\n     */\n    @Column({ nullable: true })\n    status: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TenantService.html":{"url":"injectables/TenantService.html","title":"injectable - TenantService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TenantService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/tenant/tenant.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                tenants\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteTenant\n                            \n                            \n                                findTenantById\n                            \n                            \n                                    Private\n                                getTenants\n                            \n                            \n                                    Async\n                                getTenantStatus\n                            \n                            \n                                    Async\n                                initTenant\n                            \n                            \n                                    Private\n                                loadTenants\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                setUpTenant\n                            \n                            \n                                validateTenant\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, encryptionService: EncryptionService, statusListService: StatusListService, registrarService: RegistrarService, oid4vciService: Oid4vciService, tenantRepository: Repository, tenantTotal: Gauge, filesService: FilesService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/tenant/tenant.service.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        encryptionService\n                                                  \n                                                        \n                                                                        EncryptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusListService\n                                                  \n                                                        \n                                                                        StatusListService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registrarService\n                                                  \n                                                        \n                                                                        RegistrarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oid4vciService\n                                                  \n                                                        \n                                                                        Oid4vciService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tenantRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tenantTotal\n                                                  \n                                                        \n                                                                    Gauge\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filesService\n                                                  \n                                                        \n                                                                        FilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTenant(tenantId: string, user: TokenPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.service.ts:149\n                        \n                    \n\n\n            \n                \n                        Deletes a tenant by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant to delete\n\n                                            \n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user requesting the deletion\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findTenantById\n                        \n                    \n                \n            \n            \n                \nfindTenantById(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.service.ts:127\n                        \n                    \n\n\n            \n                \n                        Find tenant by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Tenants | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getTenants\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTenants()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.service.ts:88\n                        \n                    \n\n\n            \n                \n                        Get tenants from configuration\n\n\n                        \n                            Returns :         Tenants[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getTenantStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTenantStatus(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        initTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    initTenant(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.service.ts:71\n                        \n                    \n\n\n            \n                \n                        Initialize a tenant for the given user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadTenants\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadTenants()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.service.ts:98\n                        \n                    \n\n\n            \n                \n                        Load tenants from configuration\n\n\n                        \n                            Returns :         Tenants[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setUpTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    setUpTenant(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.service.ts:135\n                        \n                    \n\n\n            \n                \n                        Sends an event to set up a tenant, allowing all other services to listen and react accordingly.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateTenant\n                        \n                    \n                \n            \n            \n                \nvalidateTenant(tenantId: string, tenantSecret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.service.ts:114\n                        \n                    \n\n\n            \n                \n                        Validate tenant credentials (OAuth2 Tenant Credentials flow)\nThis is the primary authentication method for service integration\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantSecret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Tenants | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        tenants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tenants[] | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/auth/tenant/tenant.service.ts:31\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    ForbiddenException,\n    Injectable,\n    NotFoundException,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { InjectMetric } from \"@willsoto/nestjs-prometheus\";\nimport { readdirSync } from \"fs\";\nimport { Gauge } from \"prom-client\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { EncryptionService } from \"../../crypto/encryption/encryption.service\";\nimport { Oid4vciService } from \"../../issuer/oid4vci/oid4vci.service\";\nimport { StatusListService } from \"../../issuer/status-list/status-list.service\";\nimport { RegistrarService } from \"../../registrar/registrar.service\";\nimport { FilesService } from \"../../storage/files.service\";\nimport { TenantEntity } from \"../entitites/tenant.entity\";\nimport { TokenPayload } from \"../token.decorator\";\n\n// Tenant interface for service integration\nexport interface Tenants {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class TenantService implements OnApplicationBootstrap, OnModuleInit {\n    private tenants: Tenants[] | null = null;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private statusListService: StatusListService,\n        private registrarService: RegistrarService,\n        private oid4vciService: Oid4vciService,\n        @InjectRepository(TenantEntity)\n        private tenantRepository: Repository,\n        @InjectMetric(\"tenant_total\")\n        private tenantTotal: Gauge,\n        private filesService: FilesService,\n    ) {}\n\n    async onModuleInit() {\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n            if (this.configService.get(\"CONFIG_IMPORT\")) {\n                const tenantFolders = readdirSync(configPath, {\n                    withFileTypes: true,\n                }).filter((tenant) => tenant.isDirectory());\n                for (const tenant of tenantFolders) {\n                    await this.tenantRepository.save({ id: tenant.name });\n                }\n            }\n        }\n    }\n\n    async onApplicationBootstrap() {\n        // Initialize the tenant metrics\n        const count = await this.tenantRepository.count();\n        this.tenantTotal.set({}, count);\n    }\n\n    /**\n     * Initialize a tenant for the given user.\n     * @param user The user to initialize the tenant for\n     */\n    async initTenant(id: string) {\n        await this.tenantRepository.save({ id });\n        return this.setUpTenant(id);\n    }\n\n    async getTenantStatus(id: string) {\n        const tenant = await this.tenantRepository.findOneBy({ id });\n        if (!tenant) {\n            throw new NotFoundException(`Tenant ${id} not found`);\n        }\n        return tenant;\n    }\n\n    /**\n     * Get tenants from configuration\n     * @returns\n     */\n    private getTenants(): Tenants[] {\n        if (!this.tenants) {\n            this.tenants = this.loadTenants();\n        }\n        return this.tenants;\n    }\n\n    /**\n     * Load tenants from configuration\n     */\n    private loadTenants(): Tenants[] {\n        // Default tenants for development/testing\n        return [\n            {\n                id: this.configService.getOrThrow(\"AUTH_CLIENT_ID\"),\n                secret: this.configService.getOrThrow(\n                    \"AUTH_CLIENT_SECRET\",\n                ),\n            },\n        ];\n    }\n\n    /**\n     * Validate tenant credentials (OAuth2 Tenant Credentials flow)\n     * This is the primary authentication method for service integration\n     */\n    validateTenant(tenantId: string, tenantSecret: string): Tenants | null {\n        const tenant = this.getTenants().find((c) => c.id === tenantId);\n\n        if (!tenant || tenant.secret !== tenantSecret) {\n            return null;\n        }\n\n        return tenant;\n    }\n\n    /**\n     * Find tenant by ID\n     */\n    findTenantById(tenantId: string): Tenants | null {\n        return this.getTenants().find((c) => c.id === tenantId) || null;\n    }\n\n    /**\n     * Sends an event to set up a tenant, allowing all other services to listen and react accordingly.\n     * @param id\n     */\n    async setUpTenant(id: string) {\n        await this.cryptoService.onTenantInit(id);\n        await this.encryptionService.onTenantInit(id);\n        await this.statusListService.onTenantInit(id);\n        await this.registrarService.onTenantInit(id);\n        await this.oid4vciService.onTenantInit(id);\n        await this.tenantRepository.update({ id }, { status: \"active\" });\n    }\n\n    /**\n     * Deletes a tenant by ID\n     * @param tenantId The ID of the tenant to delete\n     * @param user The user requesting the deletion\n     */\n    async deleteTenant(tenantId: string, user: TokenPayload) {\n        if (tenantId !== user.sub) {\n            throw new ForbiddenException(\n                `User ${user.sub} is not allowed to delete tenant ${tenantId}`,\n            );\n        }\n        //delete all files associated with the tenant\n        await this.filesService.deleteByTenant(tenantId);\n        //because of cascading, all related entities will be deleted.\n        await this.tenantRepository.delete({ id: tenantId });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Tenants.html":{"url":"interfaces/Tenants.html","title":"interface - Tenants","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Tenants\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/tenant/tenant.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            secret\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    ForbiddenException,\n    Injectable,\n    NotFoundException,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { InjectMetric } from \"@willsoto/nestjs-prometheus\";\nimport { readdirSync } from \"fs\";\nimport { Gauge } from \"prom-client\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { EncryptionService } from \"../../crypto/encryption/encryption.service\";\nimport { Oid4vciService } from \"../../issuer/oid4vci/oid4vci.service\";\nimport { StatusListService } from \"../../issuer/status-list/status-list.service\";\nimport { RegistrarService } from \"../../registrar/registrar.service\";\nimport { FilesService } from \"../../storage/files.service\";\nimport { TenantEntity } from \"../entitites/tenant.entity\";\nimport { TokenPayload } from \"../token.decorator\";\n\n// Tenant interface for service integration\nexport interface Tenants {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class TenantService implements OnApplicationBootstrap, OnModuleInit {\n    private tenants: Tenants[] | null = null;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private statusListService: StatusListService,\n        private registrarService: RegistrarService,\n        private oid4vciService: Oid4vciService,\n        @InjectRepository(TenantEntity)\n        private tenantRepository: Repository,\n        @InjectMetric(\"tenant_total\")\n        private tenantTotal: Gauge,\n        private filesService: FilesService,\n    ) {}\n\n    async onModuleInit() {\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n            if (this.configService.get(\"CONFIG_IMPORT\")) {\n                const tenantFolders = readdirSync(configPath, {\n                    withFileTypes: true,\n                }).filter((tenant) => tenant.isDirectory());\n                for (const tenant of tenantFolders) {\n                    await this.tenantRepository.save({ id: tenant.name });\n                }\n            }\n        }\n    }\n\n    async onApplicationBootstrap() {\n        // Initialize the tenant metrics\n        const count = await this.tenantRepository.count();\n        this.tenantTotal.set({}, count);\n    }\n\n    /**\n     * Initialize a tenant for the given user.\n     * @param user The user to initialize the tenant for\n     */\n    async initTenant(id: string) {\n        await this.tenantRepository.save({ id });\n        return this.setUpTenant(id);\n    }\n\n    async getTenantStatus(id: string) {\n        const tenant = await this.tenantRepository.findOneBy({ id });\n        if (!tenant) {\n            throw new NotFoundException(`Tenant ${id} not found`);\n        }\n        return tenant;\n    }\n\n    /**\n     * Get tenants from configuration\n     * @returns\n     */\n    private getTenants(): Tenants[] {\n        if (!this.tenants) {\n            this.tenants = this.loadTenants();\n        }\n        return this.tenants;\n    }\n\n    /**\n     * Load tenants from configuration\n     */\n    private loadTenants(): Tenants[] {\n        // Default tenants for development/testing\n        return [\n            {\n                id: this.configService.getOrThrow(\"AUTH_CLIENT_ID\"),\n                secret: this.configService.getOrThrow(\n                    \"AUTH_CLIENT_SECRET\",\n                ),\n            },\n        ];\n    }\n\n    /**\n     * Validate tenant credentials (OAuth2 Tenant Credentials flow)\n     * This is the primary authentication method for service integration\n     */\n    validateTenant(tenantId: string, tenantSecret: string): Tenants | null {\n        const tenant = this.getTenants().find((c) => c.id === tenantId);\n\n        if (!tenant || tenant.secret !== tenantSecret) {\n            return null;\n        }\n\n        return tenant;\n    }\n\n    /**\n     * Find tenant by ID\n     */\n    findTenantById(tenantId: string): Tenants | null {\n        return this.getTenants().find((c) => c.id === tenantId) || null;\n    }\n\n    /**\n     * Sends an event to set up a tenant, allowing all other services to listen and react accordingly.\n     * @param id\n     */\n    async setUpTenant(id: string) {\n        await this.cryptoService.onTenantInit(id);\n        await this.encryptionService.onTenantInit(id);\n        await this.statusListService.onTenantInit(id);\n        await this.registrarService.onTenantInit(id);\n        await this.oid4vciService.onTenantInit(id);\n        await this.tenantRepository.update({ id }, { status: \"active\" });\n    }\n\n    /**\n     * Deletes a tenant by ID\n     * @param tenantId The ID of the tenant to delete\n     * @param user The user requesting the deletion\n     */\n    async deleteTenant(tenantId: string, user: TokenPayload) {\n        if (tenantId !== user.sub) {\n            throw new ForbiddenException(\n                `User ${user.sub} is not allowed to delete tenant ${tenantId}`,\n            );\n        }\n        //delete all files associated with the tenant\n        await this.filesService.deleteByTenant(tenantId);\n        //because of cascading, all related entities will be deleted.\n        await this.tenantRepository.delete({ id: tenantId });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.decorator.ts\n        \n\n\n            \n                Description\n            \n            \n                Values of the user token\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            admin\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        admin\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        admin:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext } from \"@nestjs/common\";\n\nexport const Token = createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user as TokenPayload; // Access the token payload on the request object\n    },\n);\n\n/**\n * Values of the user token\n */\nexport interface TokenPayload {\n    sub: string; // Subject (client_id for client credentials)\n    admin: boolean; // Admin flag\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenResponse.html":{"url":"classes/TokenResponse.html","title":"class - TokenResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/token-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access_token\n                            \n                            \n                                expires_in\n                            \n                            \n                                    Optional\n                                refresh_token\n                            \n                            \n                                token_type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        refresh_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_type\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TokenResponse {\n    access_token: string;\n    refresh_token?: string;\n    token_type: \"Bearer\";\n    expires_in: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrustedAuthorityQuery.html":{"url":"classes/TrustedAuthorityQuery.html","title":"class - TrustedAuthorityQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TrustedAuthorityQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                type\n                            \n                            \n                                    \n                                    \n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['aki', 'etsi_tl', 'openid_federation'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsOptional()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities?: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateKeyDto.html":{"url":"classes/UpdateKeyDto.html","title":"class - UpdateKeyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateKeyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-update.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        OmitType(KeyImportDto, [\n    \"privateKey\",\n] as const)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { KeyImportDto } from \"./key-import.dto\";\n\nexport class UpdateKeyDto extends OmitType(KeyImportDto, [\n    \"privateKey\",\n] as const) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VCT.html":{"url":"classes/VCT.html","title":"class - VCT","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VCT\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/dto/vct.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                extends\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                extends#integrity\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                schema_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                schema_uri#integrity\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        extends\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        extends#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        schema_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        schema_uri#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmpty, IsOptional, IsString } from \"class-validator\";\n\nexport class VCT {\n    @ApiProperty({\n        required: false,\n    })\n    @IsEmpty()\n    vct?: string;\n    @IsOptional()\n    @IsString()\n    name?: string;\n    @IsOptional()\n    @IsString()\n    description?: string;\n    @IsOptional()\n    @IsString()\n    extends?: string;\n    @IsOptional()\n    @IsString()\n    \"extends#integrity\"?: string;\n    @IsOptional()\n    @IsString()\n    schema_uri?: string;\n    @IsOptional()\n    @IsString()\n    \"schema_uri#integrity\"?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VerifierModule.html":{"url":"modules/VerifierModule.html","title":"module - VerifierModule","body":"\n                   \n\n\n\n\n    Modules\n    VerifierModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VerifierModule\n\n\n\ncluster_VerifierModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/verifier.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            PresentationsModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { Module } from \"@nestjs/common\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { RegistrarModule } from \"../registrar/registrar.module\";\nimport { SessionModule } from \"../session/session.module\";\nimport { Oid4vpModule } from \"./oid4vp/oid4vp.module\";\nimport { PresentationsModule } from \"./presentations/presentations.module\";\n\n@Module({\n    imports: [\n        CryptoModule,\n        RegistrarModule,\n        SessionModule,\n        HttpModule,\n        PresentationsModule,\n        Oid4vpModule,\n    ],\n})\nexport class VerifierModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebHookAuthConfig.html":{"url":"classes/WebHookAuthConfig.html","title":"class - WebHookAuthConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebHookAuthConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(AuthConfig)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:65\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, ApiProperty, getSchemaPath } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsEnum,\n    IsIn,\n    IsObject,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport enum AuthConfig {\n    API_KEY = \"apiKey\",\n    NONE = \"none\",\n}\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfigHeader implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.API_KEY])\n    @IsString()\n    type: AuthConfig.API_KEY;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\nexport class WebHookAuthConfigNone implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.NONE])\n    @IsString()\n    type: AuthConfig.NONE;\n}\n\nexport class WebHookAuthConfig {\n    @IsEnum(AuthConfig)\n    type: AuthConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\n@ApiExtraModels(WebHookAuthConfigNone, WebHookAuthConfigHeader)\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(WebHookAuthConfigNone) },\n            { $ref: getSchemaPath(WebHookAuthConfigHeader) },\n        ],\n    })\n    @Type(() => WebHookAuthConfig, {\n        discriminator: {\n            property: \"type\",\n            subTypes: [\n                {\n                    name: AuthConfig.NONE,\n                    value: WebHookAuthConfigNone,\n                },\n                {\n                    name: AuthConfig.API_KEY,\n                    value: WebHookAuthConfigHeader,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    auth?: WebHookAuthConfigNone | WebHookAuthConfigHeader;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebHookAuthConfigHeader.html":{"url":"classes/WebHookAuthConfigHeader.html","title":"class - WebHookAuthConfigHeader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebHookAuthConfigHeader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhook authentication.\n\n            \n\n\n            \n                Implements\n            \n            \n                            WebHookAuthConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApiKeyConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:51\n                        \n                    \n\n            \n                \n                    Configuration for API key authentication.\nThis is required if the type is 'apiKey'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthConfig.API_KEY\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['undefined'])@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:44\n                        \n                    \n\n            \n                \n                    The type of authentication used for the webhook.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, ApiProperty, getSchemaPath } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsEnum,\n    IsIn,\n    IsObject,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport enum AuthConfig {\n    API_KEY = \"apiKey\",\n    NONE = \"none\",\n}\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfigHeader implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.API_KEY])\n    @IsString()\n    type: AuthConfig.API_KEY;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\nexport class WebHookAuthConfigNone implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.NONE])\n    @IsString()\n    type: AuthConfig.NONE;\n}\n\nexport class WebHookAuthConfig {\n    @IsEnum(AuthConfig)\n    type: AuthConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\n@ApiExtraModels(WebHookAuthConfigNone, WebHookAuthConfigHeader)\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(WebHookAuthConfigNone) },\n            { $ref: getSchemaPath(WebHookAuthConfigHeader) },\n        ],\n    })\n    @Type(() => WebHookAuthConfig, {\n        discriminator: {\n            property: \"type\",\n            subTypes: [\n                {\n                    name: AuthConfig.NONE,\n                    value: WebHookAuthConfigNone,\n                },\n                {\n                    name: AuthConfig.API_KEY,\n                    value: WebHookAuthConfigHeader,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    auth?: WebHookAuthConfigNone | WebHookAuthConfigHeader;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebHookAuthConfigNone.html":{"url":"classes/WebHookAuthConfigNone.html","title":"class - WebHookAuthConfigNone","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebHookAuthConfigNone\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            WebHookAuthConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthConfig.NONE\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['undefined'])@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:60\n                        \n                    \n\n            \n                \n                    The type of authentication used for the webhook.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, ApiProperty, getSchemaPath } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsEnum,\n    IsIn,\n    IsObject,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport enum AuthConfig {\n    API_KEY = \"apiKey\",\n    NONE = \"none\",\n}\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfigHeader implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.API_KEY])\n    @IsString()\n    type: AuthConfig.API_KEY;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\nexport class WebHookAuthConfigNone implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.NONE])\n    @IsString()\n    type: AuthConfig.NONE;\n}\n\nexport class WebHookAuthConfig {\n    @IsEnum(AuthConfig)\n    type: AuthConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\n@ApiExtraModels(WebHookAuthConfigNone, WebHookAuthConfigHeader)\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(WebHookAuthConfigNone) },\n            { $ref: getSchemaPath(WebHookAuthConfigHeader) },\n        ],\n    })\n    @Type(() => WebHookAuthConfig, {\n        discriminator: {\n            property: \"type\",\n            subTypes: [\n                {\n                    name: AuthConfig.NONE,\n                    value: WebHookAuthConfigNone,\n                },\n                {\n                    name: AuthConfig.API_KEY,\n                    value: WebHookAuthConfigHeader,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    auth?: WebHookAuthConfigNone | WebHookAuthConfigHeader;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebhookConfig.html":{"url":"classes/WebhookConfig.html","title":"class - WebhookConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebhookConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhooks used in various services.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                auth\n                            \n                            \n                                    \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        auth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebHookAuthConfigNone | WebHookAuthConfigHeader\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@ApiProperty({oneOf: undefined})@Type(undefined, {discriminator: undefined, keepDiscriminatorProperty: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:105\n                        \n                    \n\n            \n                \n                    Optional authentication configuration for the webhook.\nIf not provided, no authentication will be used.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:77\n                        \n                    \n\n            \n                \n                    The URL to which the webhook will send notifications.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, ApiProperty, getSchemaPath } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsEnum,\n    IsIn,\n    IsObject,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport enum AuthConfig {\n    API_KEY = \"apiKey\",\n    NONE = \"none\",\n}\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfigHeader implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.API_KEY])\n    @IsString()\n    type: AuthConfig.API_KEY;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\nexport class WebHookAuthConfigNone implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.NONE])\n    @IsString()\n    type: AuthConfig.NONE;\n}\n\nexport class WebHookAuthConfig {\n    @IsEnum(AuthConfig)\n    type: AuthConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\n@ApiExtraModels(WebHookAuthConfigNone, WebHookAuthConfigHeader)\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(WebHookAuthConfigNone) },\n            { $ref: getSchemaPath(WebHookAuthConfigHeader) },\n        ],\n    })\n    @Type(() => WebHookAuthConfig, {\n        discriminator: {\n            property: \"type\",\n            subTypes: [\n                {\n                    name: AuthConfig.NONE,\n                    value: WebHookAuthConfigNone,\n                },\n                {\n                    name: AuthConfig.API_KEY,\n                    value: WebHookAuthConfigHeader,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    auth?: WebHookAuthConfigNone | WebHookAuthConfigHeader;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebhookResponse.html":{"url":"classes/WebhookResponse.html","title":"class - WebhookResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebhookResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Response from a webhook to receive credentials.\n\n            \n\n\n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    Record\n\n                    \n                \n                        \n                            \n                                Defined in src/utils/webhook/webhook.service.ts:12\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpService } from \"@nestjs/axios\";\nimport { Injectable } from \"@nestjs/common\";\nimport { firstValueFrom } from \"rxjs\";\nimport { Notification, Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { SessionLoggerService } from \"../logger/session-logger.service\";\nimport { SessionLogContext } from \"../logger/session-logger-context\";\n\n/**\n * Response from a webhook to receive credentials.\n */\nexport class WebhookResponse {\n    [key: string]: Record;\n}\n\n/**\n * Service for handling webhooks in the application.\n */\n@Injectable()\nexport class WebhookService {\n    /**\n     * Constructor for WebhookService.\n     * @param httpService\n     * @param sessionService\n     * @param sessionLogger\n     */\n    constructor(\n        private httpService: HttpService,\n        private sessionService: SessionService,\n        private sessionLogger: SessionLoggerService,\n    ) {}\n\n    /**\n     * Sends a webhook with the optional provided credentials, return the response data.\n     * @param session\n     * @param logContext\n     * @param credentials\n     * @param expectResponse Whether to expect a response from the webhook\n     */\n    sendWebhook(\n        session: Session,\n        logContext: SessionLogContext,\n        credentials?: any[],\n        expectResponse = true,\n    ) {\n        const headers: Record = {};\n        if (\n            session.claimsWebhook!.auth &&\n            session.claimsWebhook!.auth.type === \"apiKey\"\n        ) {\n            headers[session.claimsWebhook!.auth.config.headerName] =\n                session.claimsWebhook!.auth.config.value;\n        }\n        this.sessionLogger.logSession(logContext, \"Sending webhook\", {\n            webhookUrl: session.claimsWebhook!.url,\n            authType: session.claimsWebhook!.auth?.type || \"none\",\n        });\n\n        return firstValueFrom(\n            this.httpService.post(\n                session.claimsWebhook!.url,\n                {\n                    credentials,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data && expectResponse) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    \"Webhook sent successfully\",\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n                return webhookResponse.data;\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    \"Error sending webhook\",\n                    {\n                        webhookUrl: session.claimsWebhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n\n    /**\n     * Sends a webhook notification for a session.\n     * @param session\n     * @param logContext\n     * @param notification\n     */\n    async sendWebhookNotification(\n        session: Session,\n        logContext: SessionLogContext,\n        notification: Notification,\n    ) {\n        const headers: Record = {};\n        const webhook = session.notifyWebhook!;\n\n        if (webhook.auth && webhook.auth.type === \"apiKey\") {\n            headers[webhook.auth.config.headerName] = webhook.auth.config.value;\n        }\n        this.sessionLogger.logSession(\n            logContext,\n            \"Sending webhook notification\",\n            {\n                webhookUrl: webhook.url,\n                authType: webhook.auth?.type || \"none\",\n            },\n        );\n\n        await firstValueFrom(\n            this.httpService.post(\n                webhook.url,\n                {\n                    notification,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    \"Webhook notification sent successfully\",\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    \"Error sending webhook\",\n                    {\n                        webhookUrl: session.claimsWebhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WebhookService.html":{"url":"injectables/WebhookService.html","title":"injectable - WebhookService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WebhookService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling webhooks in the application.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendWebhook\n                            \n                            \n                                    Async\n                                sendWebhookNotification\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, sessionService: SessionService, sessionLogger: SessionLoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/webhook/webhook.service.ts:20\n                            \n                        \n\n                \n                    \n                            Constructor for WebhookService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendWebhook\n                        \n                    \n                \n            \n            \n                \nsendWebhook(session: Session, logContext: SessionLogContext, credentials?: any[], expectResponse)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/webhook/webhook.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Sends a webhook with the optional provided credentials, return the response data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                logContext\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                credentials\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                expectResponse\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    Whether to expect a response from the webhook\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendWebhookNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendWebhookNotification(session: Session, logContext: SessionLogContext, notification: Notification)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/webhook/webhook.service.ts:111\n                        \n                    \n\n\n            \n                \n                        Sends a webhook notification for a session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                logContext\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                notification\n                                            \n                                                            Notification\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from \"@nestjs/axios\";\nimport { Injectable } from \"@nestjs/common\";\nimport { firstValueFrom } from \"rxjs\";\nimport { Notification, Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { SessionLoggerService } from \"../logger/session-logger.service\";\nimport { SessionLogContext } from \"../logger/session-logger-context\";\n\n/**\n * Response from a webhook to receive credentials.\n */\nexport class WebhookResponse {\n    [key: string]: Record;\n}\n\n/**\n * Service for handling webhooks in the application.\n */\n@Injectable()\nexport class WebhookService {\n    /**\n     * Constructor for WebhookService.\n     * @param httpService\n     * @param sessionService\n     * @param sessionLogger\n     */\n    constructor(\n        private httpService: HttpService,\n        private sessionService: SessionService,\n        private sessionLogger: SessionLoggerService,\n    ) {}\n\n    /**\n     * Sends a webhook with the optional provided credentials, return the response data.\n     * @param session\n     * @param logContext\n     * @param credentials\n     * @param expectResponse Whether to expect a response from the webhook\n     */\n    sendWebhook(\n        session: Session,\n        logContext: SessionLogContext,\n        credentials?: any[],\n        expectResponse = true,\n    ) {\n        const headers: Record = {};\n        if (\n            session.claimsWebhook!.auth &&\n            session.claimsWebhook!.auth.type === \"apiKey\"\n        ) {\n            headers[session.claimsWebhook!.auth.config.headerName] =\n                session.claimsWebhook!.auth.config.value;\n        }\n        this.sessionLogger.logSession(logContext, \"Sending webhook\", {\n            webhookUrl: session.claimsWebhook!.url,\n            authType: session.claimsWebhook!.auth?.type || \"none\",\n        });\n\n        return firstValueFrom(\n            this.httpService.post(\n                session.claimsWebhook!.url,\n                {\n                    credentials,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data && expectResponse) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    \"Webhook sent successfully\",\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n                return webhookResponse.data;\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    \"Error sending webhook\",\n                    {\n                        webhookUrl: session.claimsWebhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n\n    /**\n     * Sends a webhook notification for a session.\n     * @param session\n     * @param logContext\n     * @param notification\n     */\n    async sendWebhookNotification(\n        session: Session,\n        logContext: SessionLogContext,\n        notification: Notification,\n    ) {\n        const headers: Record = {};\n        const webhook = session.notifyWebhook!;\n\n        if (webhook.auth && webhook.auth.type === \"apiKey\") {\n            headers[webhook.auth.config.headerName] = webhook.auth.config.value;\n        }\n        this.sessionLogger.logSession(\n            logContext,\n            \"Sending webhook notification\",\n            {\n                webhookUrl: webhook.url,\n                authType: webhook.auth?.type || \"none\",\n            },\n        );\n\n        await firstValueFrom(\n            this.httpService.post(\n                webhook.url,\n                {\n                    notification,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    \"Webhook notification sent successfully\",\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    \"Error sending webhook\",\n                    {\n                        webhookUrl: session.claimsWebhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/WellKnownController.html":{"url":"controllers/WellKnownController.html","title":"controller - WellKnownController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  WellKnownController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/well-known.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/.well-known\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI well-known endpoints.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authzMetadata\n                            \n                            \n                                    \n                                    \n                                getJwks\n                            \n                            \n                                    \n                                    \n                                    \n                                issuerMetadata\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    authzMetadata(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('oauth-authorization-server')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:57\n                        \n                    \n\n\n            \n                \n                        Authorization Server Metadata\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Oauth2AuthorizationServerResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getJwks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getJwks(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Header('Content-Type', 'application/jwk-set+json')@Get('jwks.json')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:69\n                        \n                    \n\n\n            \n                \n                        Returns the JSON Web Key Set (JWKS) for the authorization server.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        issuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    issuerMetadata(session: Session, contentType: MediaType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get OpenID4VCI issuer metadata', description: 'Returns the OpenID4VCI issuer metadata.'})@ApiProduces(MediaType.APPLICATION_JSON, MediaType.APPLICATION_JWT)@Get('openid-credential-issuer')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:45\n                        \n                    \n\n\n            \n                \n                        Retrieves the OpenID4VCI issuer metadata for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                contentType\n                                            \n                                                            MediaType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header } from \"@nestjs/common\";\nimport {\n    ApiExcludeController,\n    ApiOperation,\n    ApiParam,\n    ApiProduces,\n} from \"@nestjs/swagger\";\nimport { Session } from \"../session/entities/session.entity\";\nimport { SessionEntity } from \"../session/session.decorator\";\nimport { ContentType } from \"../utils/mediaType/media-type.decorator\";\nimport { MediaType } from \"../utils/mediaType/media-type.enum\";\nimport { JwksResponseDto } from \"./dto/jwks-response.dto\";\nimport { Oauth2AuthorizationServerResponse } from \"./dto/oauth-authorization-server-response.dto\";\nimport { WellKnownService } from \"./well-known.service\";\n\n/**\n * Controller for the OpenID4VCI well-known endpoints.\n */\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@ApiParam({\n    name: \"session\",\n    required: true,\n})\n@Controller(\":session/.well-known\")\nexport class WellKnownController {\n    /**\n     * Constructor for WellKnownController.\n     * @param wellKnownService\n     */\n    constructor(private readonly wellKnownService: WellKnownService) {}\n\n    /**\n     * Retrieves the OpenID4VCI issuer metadata for a given tenant.\n     * @param tenantId\n     * @param contentType\n     * @returns\n     */\n    @ApiOperation({\n        summary: \"Get OpenID4VCI issuer metadata\",\n        description: \"Returns the OpenID4VCI issuer metadata.\",\n    })\n    //we can not set the accept in the apiheader via swagger.\n    @ApiProduces(MediaType.APPLICATION_JSON, MediaType.APPLICATION_JWT)\n    @Get(\"openid-credential-issuer\")\n    issuerMetadata(\n        @SessionEntity() session: Session,\n        @ContentType() contentType: MediaType,\n    ) {\n        return this.wellKnownService.getIssuerMetadata(session, contentType);\n    }\n\n    /**\n     * Authorization Server Metadata\n     * @returns\n     */\n    @Get(\"oauth-authorization-server\")\n    authzMetadata(\n        @SessionEntity() session: Session,\n    ): Oauth2AuthorizationServerResponse {\n        return this.wellKnownService.getAuthzMetadata(session);\n    }\n\n    /**\n     * Returns the JSON Web Key Set (JWKS) for the authorization server.\n     * @returns\n     */\n    @Header(\"Content-Type\", \"application/jwk-set+json\")\n    @Get(\"jwks.json\")\n    getJwks(@SessionEntity() session: Session): Promise {\n        return this.wellKnownService.getJwks(session.tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WellKnownService.html":{"url":"injectables/WellKnownService.html","title":"injectable - WellKnownService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WellKnownService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/well-known.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to handle well-known endpoints and metadata retrieval.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAuthzMetadata\n                            \n                            \n                                    Async\n                                getIssuerMetadata\n                            \n                            \n                                getJwks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(oid4vciService: Oid4vciService, cryptoService: CryptoService, authorizeService: AuthorizeService, cryptoImplementationService: CryptoImplementationService)\n                    \n                \n                        \n                            \n                                Defined in src/well-known/well-known.service.ts:16\n                            \n                        \n\n                \n                    \n                            Constructor for WellKnownService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        oid4vciService\n                                                  \n                                                        \n                                                                        Oid4vciService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authorizeService\n                                                  \n                                                        \n                                                                        AuthorizeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoImplementationService\n                                                  \n                                                        \n                                                                        CryptoImplementationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAuthzMetadata\n                        \n                    \n                \n            \n            \n                \ngetAuthzMetadata(session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/well-known/well-known.service.ts:77\n                        \n                    \n\n\n            \n                \n                        Returns the OAuth 2.0 Authorization Server metadata for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Oauth2AuthorizationServerResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getIssuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuerMetadata(session: Session, contentType: MediaType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/well-known/well-known.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Retrieves the issuer metadata for a given tenant for the specified content type.\nThe metadata can be returned in two formats:\n\nan unsigned JSON document using the media type application/json, or\na signed JSON Web Token (JWT) containing the Credential Issuer Metadata in its payload using the media type application/jwt.\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                contentType\n                                            \n                                                            MediaType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getJwks\n                        \n                    \n                \n            \n            \n                \ngetJwks(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/well-known/well-known.service.ts:87\n                        \n                    \n\n\n            \n                \n                        Returns the JSON Web Key Set (JWKS) for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { CryptoService } from \"../crypto/crypto.service\";\nimport { CryptoImplementationService } from \"../crypto/key/crypto-implementation/crypto-implementation.service\";\nimport { AuthorizeService } from \"../issuer/authorize/authorize.service\";\nimport { Oid4vciService } from \"../issuer/oid4vci/oid4vci.service\";\nimport { Session } from \"../session/entities/session.entity\";\nimport { MediaType } from \"../utils/mediaType/media-type.enum\";\nimport { CredentialIssuerMetadataDto } from \"./dto/credential-issuer-metadata.dto\";\nimport { JwksResponseDto } from \"./dto/jwks-response.dto\";\nimport { Oauth2AuthorizationServerResponse } from \"./dto/oauth-authorization-server-response.dto\";\n\n/**\n * Service to handle well-known endpoints and metadata retrieval.\n */\n@Injectable()\nexport class WellKnownService {\n    /**\n     * Constructor for WellKnownService.\n     * @param oid4vciService\n     * @param cryptoService\n     * @param authorizeService\n     */\n    constructor(\n        private readonly oid4vciService: Oid4vciService,\n        private readonly cryptoService: CryptoService,\n        private readonly authorizeService: AuthorizeService,\n        private readonly cryptoImplementationService: CryptoImplementationService,\n    ) {}\n\n    /**\n     * Retrieves the issuer metadata for a given tenant for the specified content type.\n     * The metadata can be returned in two formats:\n     * - an unsigned JSON document using the media type application/json, or\n     * - a signed JSON Web Token (JWT) containing the Credential Issuer Metadata in its payload using the media type application/jwt.\n     * @param tenantId\n     * @param contentType\n     * @returns\n     */\n    async getIssuerMetadata(session: Session, contentType: MediaType) {\n        const metadata = (await this.oid4vciService.issuerMetadata(session))\n            .credentialIssuer as unknown as CredentialIssuerMetadataDto;\n\n        if (contentType === MediaType.APPLICATION_JWT) {\n            const keyId = await this.cryptoService.keyService.getKid(\n                session.tenantId,\n                \"access\",\n            );\n            return this.cryptoService.signJwt(\n                {\n                    typ: \"openidvci-issuer-metadata+jwt\",\n                    alg: this.cryptoImplementationService.getAlg(),\n                    x5c: await this.cryptoService.getCertChain(\n                        \"access\",\n                        session.tenantId,\n                    ),\n                },\n                {\n                    ...metadata,\n                    iss: metadata.credential_issuer,\n                    sub: metadata.credential_issuer,\n                    iat: Math.floor(new Date().getTime() / 1000),\n                    // [Review]: should we add `exp` value here?\n                    //MM: the value makes sense when we cache the issuer metadata so it must not be signed on every request. Like when it is issued every hour, its lifetime is 1 hour and the jwt is in the cache.\n                },\n                session.tenantId,\n                keyId,\n            );\n        }\n\n        return metadata;\n    }\n\n    /**\n     * Returns the OAuth 2.0 Authorization Server metadata for a given tenant.\n     * @returns\n     */\n    getAuthzMetadata(session: Session): Oauth2AuthorizationServerResponse {\n        return this.authorizeService.authzMetadata(\n            session,\n        ) as Oauth2AuthorizationServerResponse;\n    }\n\n    /**\n     * Returns the JSON Web Key Set (JWKS) for a given tenant.\n     * @returns\n     */\n    getJwks(tenantId: string): Promise {\n        return this.cryptoService.getJwks(tenantId).then((key) => ({\n            keys: [key],\n        }));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/dto/oidc-discovery.dto.ts\n            \n            interface\n            OidcDiscoveryDto\n            \n                100 %\n                (36/36)\n            \n        \n        \n            \n                \n                src/auth/admin.guard.ts\n            \n            injectable\n            AdminAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/auth/auth-validation.schema.ts\n            \n            variable\n            AUTH_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/auth.module.ts\n            \n            variable\n            DEFAULT_AUTH_CLIENT_ID\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/auth.module.ts\n            \n            variable\n            DEFAULT_AUTH_CLIENT_SECRET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/auth.module.ts\n            \n            variable\n            DEFAULT_JWT_SECRET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/dto/client-credentials.dto.ts\n            \n            class\n            ClientCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/client-init.dto.ts\n            \n            class\n            ClientInitDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/oidc-discovery.dto.ts\n            \n            interface\n            OidcDiscoveryDto\n            \n                100 %\n                (36/36)\n            \n        \n        \n            \n                \n                src/auth/dto/token-response.dto.ts\n            \n            class\n            TokenResponse\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/entitites/tenant.entity.ts\n            \n            entity\n            TenantEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.service.ts\n            \n            injectable\n            JwtService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/auth/jwt.service.ts\n            \n            interface\n            GenerateTokenOptions\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                        src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/tenant/tenant.controller.ts\n            \n            controller\n            TenantController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/tenant/tenant.service.ts\n            \n            injectable\n            TenantService\n            \n                53 %\n                (7/13)\n            \n        \n        \n            \n                \n                src/auth/tenant/tenant.service.ts\n            \n            interface\n            Tenants\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/token.decorator.ts\n            \n            interface\n            TokenPayload\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                        src/auth/token.decorator.ts\n            \n            variable\n            Token\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/crypto.service.ts\n            \n            injectable\n            CryptoService\n            \n                90 %\n                (20/22)\n            \n        \n        \n            \n                \n                        src/crypto/crypto.service.ts\n            \n            variable\n            ECDSA_P256\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/encryption/encryption.service.ts\n            \n            injectable\n            EncryptionService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/crypto/key/adapters/db-key.service.ts\n            \n            class\n            DBKeyService\n            \n                66 %\n                (10/15)\n            \n        \n        \n            \n                \n                src/crypto/key/adapters/vault-key.service.ts\n            \n            class\n            VaultKeyService\n            \n                47 %\n                (9/19)\n            \n        \n        \n            \n                \n                src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n            \n            injectable\n            CryptoImplementationService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n            \n            type alias\n            CryptoType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            interface\n            CryptoImplementation\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            type alias\n            KeyPair\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            type alias\n            Signer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            type alias\n            Verifier\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-validation.schema.ts\n            \n            variable\n            CRYPTO_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/ed25519.ts\n            \n            variable\n            ED25519\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-import.dto.ts\n            \n            class\n            Key\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-import.dto.ts\n            \n            class\n            KeyImportDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-object.dto.ts\n            \n            class\n            KeyObj\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-response.dto.ts\n            \n            class\n            KeyResponseDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-update.dto.ts\n            \n            class\n            UpdateKeyDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/entities/cert.entity.ts\n            \n            entity\n            CertEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/entities/cert.entity.ts\n            \n            type alias\n            CertificateType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/entities/keys.entity.ts\n            \n            entity\n            KeyEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/entities/keys.entity.ts\n            \n            type alias\n            KeyUsage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/key-validation.schema.ts\n            \n            variable\n            KEY_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/key.controller.ts\n            \n            controller\n            KeyController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/crypto/key/key.service.ts\n            \n            class\n            KeyService\n            \n                66 %\n                (8/12)\n            \n        \n        \n            \n                \n                        src/database/database-validation.schema.ts\n            \n            variable\n            DB_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.controller.ts\n            \n            controller\n            AuthorizeController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.service.ts\n            \n            injectable\n            AuthorizeService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.service.ts\n            \n            interface\n            ParsedAccessTokenAuthorizationCodeRequestGrant\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.service.ts\n            \n            interface\n            ParsedAccessTokenPreAuthorizedCodeRequestGrant\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/issuer/authorize/dto/authorize-request.dto.ts\n            \n            class\n            AuthorizeQueries\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/issuer/authorize/dto/par-response.dto.ts\n            \n            class\n            ParResponseDto\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/credentials-metadata.controller.ts\n            \n            controller\n            CredentialsMetadataController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/dto/schema-response.dto.ts\n            \n            class\n            SchemaResponse\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/dto/vct.dto.ts\n            \n            class\n            VCT\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/issuer/credentials/credential-config/credential-config.service.ts\n            \n            injectable\n            CredentialConfigService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                src/issuer/credentials/credentials.controller.ts\n            \n            controller\n            CredentialsController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/issuer/credentials/credentials.service.ts\n            \n            injectable\n            CredentialsService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/issuer/credentials/dto/credential-config-create.dto.ts\n            \n            class\n            CredentialConfigCreate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/credential.entity.ts\n            \n            entity\n            CredentialConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/credential.entity.ts\n            \n            class\n            CredentialConfig\n            \n                11 %\n                (2/17)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/credential.entity.ts\n            \n            class\n            Display\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/credential.entity.ts\n            \n            class\n            DisplayImage\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/credential.entity.ts\n            \n            class\n            IssuerMetadataCredentialConfig\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            AllowListPolicy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            AttestationBasedPolicy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            EmbeddedDisclosurePolicy\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            NoneTrustPolicy\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            PolicyCredential\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            RootOfTrustPolicy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                        src/issuer/credentials/entities/policies.dto.ts\n            \n            type alias\n            PolicyType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/display/display.controller.ts\n            \n            controller\n            DisplayController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/issuer/display/display.service.ts\n            \n            injectable\n            DisplayService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/issuer/display/dto/display-create.dto.ts\n            \n            class\n            DisplayCreateDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/display/entities/display.entity.ts\n            \n            entity\n            DisplayEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/display/entities/display.entity.ts\n            \n            class\n            DisplayInfo\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/issuer/display/entities/display.entity.ts\n            \n            class\n            DisplayLogo\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationMethodAuth\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationMethodNone\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationMethodPresentation\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationUrlConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            PresentationDuringIssuanceConfig\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            interface\n            AuthenticationMethodInterface\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/issuance.dto.ts\n            \n            class\n            CredentialConfigMapping\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/issuance.dto.ts\n            \n            class\n            IssuanceDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/entities/issuance-config.entity.ts\n            \n            entity\n            IssuanceConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/issuance/entities/issuance-config.entity.ts\n            \n            class\n            IssuanceConfig\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/issuer/issuance/issuance.controller.ts\n            \n            controller\n            IssuanceController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/issuer/issuance/issuance.service.ts\n            \n            injectable\n            IssuanceService\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/issuer/issuer-management/issuer-management.controller.ts\n            \n            controller\n            IssuerManagementController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/issuer/issuer-validation.schema.ts\n            \n            variable\n            ISSUER_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/dto/notification-request.dto.ts\n            \n            class\n            NotificationRequestDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/dto/offer-request.dto.ts\n            \n            class\n            OfferRequestDto\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/dto/offer-request.dto.ts\n            \n            class\n            OfferResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/oid4vci.controller.ts\n            \n            controller\n            Oid4vciController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/oid4vci.service.ts\n            \n            injectable\n            Oid4vciService\n            \n                83 %\n                (10/12)\n            \n        \n        \n            \n                \n                        src/issuer/oid4vci/util.ts\n            \n            function\n            getHeadersFromRequest\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/status-list/dto/status-update.dto.ts\n            \n            class\n            StatusUpdateDto\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/issuer/status-list/entities/status-list.entity.ts\n            \n            entity\n            StatusListEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/status-list/entities/status-mapping.entity.ts\n            \n            entity\n            StatusMapping\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/status-list/status-list.controller.ts\n            \n            controller\n            StatusListController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/issuer/status-list/status-list.service.ts\n            \n            injectable\n            StatusListService\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/registrar/dto/access-certificate-response.ts\n            \n            interface\n            AccessCertificateResponse\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/registrar/entities/registrar.entity.ts\n            \n            entity\n            RegistrarEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/registrar/registrar-validation.schema.ts\n            \n            variable\n            REGISTRAR_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/registrar/registrar.service.ts\n            \n            injectable\n            RegistrarService\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/session/entities/session.entity.ts\n            \n            entity\n            Session\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/session/entities/session.entity.ts\n            \n            type alias\n            Notification\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/session/session-validation.schema.ts\n            \n            variable\n            SESSION_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/session/session.controller.ts\n            \n            controller\n            SessionController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                        src/session/session.decorator.ts\n            \n            function\n            SessionEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/session/session.pipe.ts\n            \n            injectable\n            SessionPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/session/session.service.ts\n            \n            injectable\n            SessionService\n            \n                83 %\n                (10/12)\n            \n        \n        \n            \n                \n                src/storage/adapters/local.storage.ts\n            \n            class\n            LocalFileStorage\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/storage/adapters/s3.storage.ts\n            \n            class\n            S3FileStorage\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/storage/dto/file-upload.dto.ts\n            \n            class\n            FileUploadDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/storage/entities/files.entity.ts\n            \n            entity\n            FileEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/storage/files.service.ts\n            \n            injectable\n            FilesService\n            \n                57 %\n                (4/7)\n            \n        \n        \n            \n                \n                        src/storage/storage-validation.schema.ts\n            \n            variable\n            STORAGE_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/storage/storage.controller.ts\n            \n            controller\n            StorageController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                        src/storage/storage.module.ts\n            \n            type alias\n            Driver\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/storage/storage.types.ts\n            \n            interface\n            FileStorage\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/storage/storage.types.ts\n            \n            variable\n            FILE_STORAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/storage/storage.types.ts\n            \n            type alias\n            PutOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/storage/storage.types.ts\n            \n            type alias\n            StoredObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/utils/config-printer/combined.schema.ts\n            \n            variable\n            VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/config-printer/config-printer.service.ts\n            \n            injectable\n            ConfigPrinterService\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/utils/config-printer/config-printer.service.ts\n            \n            interface\n            ConfigGroup\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/utils/config-printer/config-printer.service.ts\n            \n            interface\n            ConfigItem\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/utils/config-printer/config-printer.service.ts\n            \n            interface\n            ConfigModel\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/utils/config-printer/config-printer.service.ts\n            \n            type alias\n            Presence\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/utils/config-printer/config-validation.schema.ts\n            \n            variable\n            CONFIG_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/config-printer/helpers.ts\n            \n            function\n            extractConditionsFromKeyDesc\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/config-printer/helpers.ts\n            \n            function\n            flattenMetas\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/config-printer/helpers.ts\n            \n            function\n            isEffectivelyRequired\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/config-printer/helpers.ts\n            \n            function\n            summarizeFlags\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/config-printer/helpers.ts\n            \n            function\n            summarizeSchemaShape\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/config-printer/helpers.ts\n            \n            function\n            summarizeWhenEntry\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/config-printer/validation.schema.ts\n            \n            variable\n            BASE_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/logger/log-validation.schema.ts\n            \n            variable\n            LOG_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/logger/logger-config.service.ts\n            \n            injectable\n            LoggerConfigService\n            \n                23 %\n                (3/13)\n            \n        \n        \n            \n                \n                src/utils/logger/logger-config.service.ts\n            \n            interface\n            LoggerConfiguration\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/utils/logger/session-logger-context.ts\n            \n            interface\n            SessionLogContext\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/utils/logger/session-logger.decorator.ts\n            \n            variable\n            SESSION_LOGGER_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/logger/session-logger.decorator.ts\n            \n            variable\n            SessionLogger\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/logger/session-logger.interceptor.ts\n            \n            injectable\n            SessionLoggerInterceptor\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/utils/logger/session-logger.service.ts\n            \n            injectable\n            SessionLoggerService\n            \n                85 %\n                (12/14)\n            \n        \n        \n            \n                \n                        src/utils/mediaType/media-type.decorator.ts\n            \n            variable\n            ContentType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            ApiKeyConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebHookAuthConfig\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebHookAuthConfigHeader\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebHookAuthConfigNone\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebhookConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.service.ts\n            \n            class\n            WebhookResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.service.ts\n            \n            injectable\n            WebhookService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/dto/authorization-response.dto.ts\n            \n            class\n            AuthorizationResponse\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/dto/presentation-request-options.dto.ts\n            \n            interface\n            PresentationRequestOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/dto/presentation-request.dto.ts\n            \n            class\n            PresentationRequest\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/oid4vp.controller.ts\n            \n            controller\n            Oid4vpController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/oid4vp.service.ts\n            \n            injectable\n            Oid4vpService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/verifier/presentations/dto/auth-response.dto.ts\n            \n            interface\n            AuthResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/dto/presentation-config-create.dto.ts\n            \n            class\n            PresentationConfigCreateDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/verifier/presentations/dto/vp-request.dto.ts\n            \n            class\n            RegistrationCertificateRequest\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            entity\n            PresentationConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            ClaimsQuery\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            CredentialQuery\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            CredentialSetQuery\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            DCQL\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            PresentationAttachment\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            TrustedAuthorityQuery\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/presentations.controller.ts\n            \n            controller\n            PresentationManagementController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/verifier/presentations/presentations.service.ts\n            \n            injectable\n            PresentationsService\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/verifier/resolver/dto/issuer-metadata.dto.ts\n            \n            interface\n            IssuerMetadata\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/resolver/resolver.service.ts\n            \n            injectable\n            ResolverService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/well-known/dto/credential-issuer-metadata.dto.ts\n            \n            class\n            CredentialIssuerMetadataDto\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/well-known/dto/jwks-response.dto.ts\n            \n            class\n            EC_Public\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/well-known/dto/jwks-response.dto.ts\n            \n            class\n            JwksResponseDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/well-known/dto/oauth-authorization-server-response.dto.ts\n            \n            class\n            Oauth2AuthorizationServerResponse\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/well-known/well-known.controller.ts\n            \n            controller\n            WellKnownController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/well-known/well-known.service.ts\n            \n            injectable\n            WellKnownService\n            \n                100 %\n                (5/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws-sdk/client-s3 : ^3.864.0\n        \n            @aws-sdk/s3-request-presigner : ^3.864.0\n        \n            @badgateway/oauth2-client : ^3.3.0\n        \n            @nestjs/axios : ^4.0.1\n        \n            @nestjs/common : ^11.1.6\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.6\n        \n            @nestjs/event-emitter : ^3.0.1\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.6\n        \n            @nestjs/schedule : ^6.0.0\n        \n            @nestjs/serve-static : ^5.0.3\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/terminus : ^11.0.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @openid4vc/oauth2 : 0.3.0-alpha-20250714110838\n        \n            @openid4vc/openid4vci : 0.3.0-alpha-20250714110838\n        \n            @openid4vc/openid4vp : 0.3.0-alpha-20250714110838\n        \n            @openid4vc/utils : 0.3.0-alpha-20250714110838\n        \n            @peculiar/x509 : ^1.13.0\n        \n            @sd-jwt/crypto-nodejs : ^0.14.0\n        \n            @sd-jwt/jwt-status-list : ^0.14.0\n        \n            @sd-jwt/sd-jwt-vc : ^0.14.1\n        \n            @sd-jwt/types : ^0.14.0\n        \n            @willsoto/nestjs-prometheus : ^6.0.2\n        \n            axios : ^1.11.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            joi : ^18.0.0\n        \n            jose : ^6.0.12\n        \n            jwks-rsa : ^3.2.0\n        \n            multer : ^2.0.2\n        \n            mysql2 : ^3.14.3\n        \n            nestjs-pino : ^4.4.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.16.3\n        \n            pino-http : ^10.5.0\n        \n            pino-pretty : ^13.1.1\n        \n            prom-client : ^15.1.3\n        \n            qrcode : ^1.5.4\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            sqlite3 : ^5.1.7\n        \n            typeorm : ^0.3.25\n        \n            uuid : ^11.1.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthConfig   (src/.../webhook.dto.ts)\n                        \n                        \n                            AuthenticationMethod   (src/.../authentication-config.dto.ts)\n                        \n                        \n                            MediaType   (src/.../media-type.enum.ts)\n                        \n                        \n                            ResponseType   (src/.../presentation-request.dto.ts)\n                        \n                        \n                            SessionStatus   (src/.../session.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/webhook/webhook.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthConfig\n                    \n                \n                    \n                        \n                            Enum for the type of authentication used in webhooks.\n\n                        \n                    \n                        \n                            \n                                 API_KEY\n                            \n                        \n                        \n                            \n                                Value : apiKey\n                            \n                        \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                Value : none\n                            \n                        \n            \n        \n\n    src/issuer/issuance/dto/authentication-config.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthenticationMethod\n                    \n                \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                Value : none\n                            \n                        \n                        \n                            \n                                 AUTH\n                            \n                        \n                        \n                            \n                                Value : auth\n                            \n                        \n                        \n                            \n                                 PRESENTATION_DURING_ISSUANCE\n                            \n                        \n                        \n                            \n                                Value : presentationDuringIssuance\n                            \n                        \n            \n        \n\n    src/utils/mediaType/media-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        MediaType\n                    \n                \n                    \n                        \n                            Represents the media types used in the application.\n\n                        \n                    \n                        \n                            \n                                 APPLICATION_JSON\n                            \n                        \n                        \n                            \n                                Value : application/json\n                            \n                        \n                        \n                            \n                                 APPLICATION_JWT\n                            \n                        \n                        \n                            \n                                Value : application/jwt\n                            \n                        \n            \n        \n\n    src/verifier/oid4vp/dto/presentation-request.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ResponseType\n                    \n                \n                    \n                        \n                            Enum for the type of response expected from the presentation request.\n\n                        \n                    \n                        \n                            \n                                 QRCode\n                            \n                        \n                        \n                            \n                                Value : qrcode\n                            \n                        \n                        \n                            \n                                 URI\n                            \n                        \n                        \n                            \n                                Value : uri\n                            \n                        \n            \n        \n\n    src/session/entities/session.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        SessionStatus\n                    \n                \n                        \n                            \n                                 Active\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 Fetched\n                            \n                        \n                        \n                            \n                                Value : fetched\n                            \n                        \n                        \n                            \n                                 Completed\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n                        \n                            \n                                 Expired\n                            \n                        \n                        \n                            \n                                Value : expired\n                            \n                        \n                        \n                            \n                                 Failed\n                            \n                        \n                        \n                            \n                                Value : failed\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            extractConditionsFromKeyDesc   (src/.../helpers.ts)\n                        \n                        \n                            flattenMetas   (src/.../helpers.ts)\n                        \n                        \n                            getHeadersFromRequest   (src/.../util.ts)\n                        \n                        \n                            isEffectivelyRequired   (src/.../helpers.ts)\n                        \n                        \n                            SessionEntity   (src/.../session.decorator.ts)\n                        \n                        \n                            summarizeFlags   (src/.../helpers.ts)\n                        \n                        \n                            summarizeSchemaShape   (src/.../helpers.ts)\n                        \n                        \n                            summarizeWhenEntry   (src/.../helpers.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Bootstrap function to initialize the NestJS application.\n\n\n                \n            \n        \n    \n    src/utils/config-printer/helpers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        extractConditionsFromKeyDesc\n                        \n                    \n                \n            \n            \n                \nextractConditionsFromKeyDesc(keyDesc: any)\n                \n            \n\n\n\n\n            \n                \n                        Extracts the conditions from a given key description.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                keyDesc\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The key description object to extract conditions from.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                An array of strings representing the extracted conditions.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flattenMetas\n                        \n                    \n                \n            \n            \n                \nflattenMetas(desc: any)\n                \n            \n\n\n\n\n            \n                \n                        Flattens the meta information from a given description object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                desc\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The description object to extract meta information from.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Record\n\n                        \n                            \n                                A record containing the flattened meta information.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEffectivelyRequired\n                        \n                    \n                \n            \n            \n                \nisEffectivelyRequired(key: string, rawEnv: Record)\n                \n            \n\n\n\n\n            \n                \n                        Tests if a config key is effectively required in the current environment.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The config key to test.\n\n                                            \n                                        \n                                        \n                                                rawEnv\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The raw environment variables.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the key is effectively required, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        summarizeFlags\n                        \n                    \n                \n            \n            \n                \nsummarizeFlags(flags?: any)\n                \n            \n\n\n\n\n            \n                \n                        Summarizes the flags for a given configuration key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                flags\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The flags object to summarize.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string representation of the flags.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        summarizeSchemaShape\n                        \n                    \n                \n            \n            \n                \nsummarizeSchemaShape(s?: any)\n                \n            \n\n\n\n\n            \n                \n                        Summarizes the shape of a given schema.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                s\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The schema object to summarize.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string representation of the schema shape.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        summarizeWhenEntry\n                        \n                    \n                \n            \n            \n                \nsummarizeWhenEntry(w: any)\n                \n            \n\n\n\n\n            \n                \n                        Summarizes the conditions for a given \"when\" entry.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                w\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The \"when\" entry object to summarize.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string representation of the \"when\" entry.\n\n                            \n                \n            \n        \n    \n    src/issuer/oid4vci/util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getHeadersFromRequest\n                        \n                    \n                \n            \n            \n                \ngetHeadersFromRequest(req: Request)\n                \n            \n\n\n\n\n            \n                \n                        Utility function to extract headers from an Express request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     globalThis.Headers\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/session/session.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SessionEntity\n                        \n                    \n                \n            \n            \n                \nSessionEntity()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     ParameterDecorator\n\n                        \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CryptoImplementatationModule\n\n\n\ncluster_CryptoImplementatationModule_exports\n\n\n\ncluster_CryptoImplementatationModule_providers\n\n\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_exports\n\n\n\ncluster_CryptoModule_providers\n\n\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_imports\n\n\n\ncluster_IssuerModule_exports\n\n\n\ncluster_IssuerModule_providers\n\n\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_imports\n\n\n\ncluster_PresentationsModule_exports\n\n\n\ncluster_PresentationsModule_providers\n\n\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_exports\n\n\n\ncluster_RegistrarModule_providers\n\n\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_exports\n\n\n\ncluster_ResolverModule_providers\n\n\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_exports\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_exports\n\n\n\ncluster_StatusListModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nJwtService \n\nJwtService \n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\nAuthModule -->\n\nCryptoModule->AuthModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nCryptoService \n\nCryptoService \n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\n\n\nEncryptionService \n\nEncryptionService \n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\nAuthModule -->\n\nIssuerModule->AuthModule\n\n\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nCredentialConfigService \n\nCredentialConfigService \n\nCredentialConfigService  -->\n\nIssuerModule->CredentialConfigService \n\n\n\n\n\nIssuanceService \n\nIssuanceService \n\nIssuanceService  -->\n\nIssuerModule->IssuanceService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\n\n\nMetricModule\n\nMetricModule\n\nAppModule -->\n\nMetricModule->AppModule\n\n\n\nAuthModule -->\n\nRegistrarModule->AuthModule\n\n\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAuthModule -->\n\nSessionModule->AuthModule\n\n\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\n\n\nStorageModule\n\nStorageModule\n\nAppModule -->\n\nStorageModule->AppModule\n\n\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\nConfigPrinterService\n\nConfigPrinterService\n\nAppModule -->\n\nConfigPrinterService->AppModule\n\n\n\n\n\nWellKnownService\n\nWellKnownService\n\nAppModule -->\n\nWellKnownService->AppModule\n\n\n\nAuthModule -->\n\nStatusListModule->AuthModule\n\n\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nTenantService\n\nTenantService\n\nAuthModule -->\n\nTenantService->AuthModule\n\n\n\n\n\nCryptoImplementationService \n\nCryptoImplementationService \n\n\n\nCryptoImplementatationModule\n\nCryptoImplementatationModule\n\nCryptoImplementationService  -->\n\nCryptoImplementatationModule->CryptoImplementationService \n\n\n\n\n\nCryptoImplementationService\n\nCryptoImplementationService\n\nCryptoImplementatationModule -->\n\nCryptoImplementationService->CryptoImplementatationModule\n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialConfigService\n\nCredentialConfigService\n\nIssuerModule -->\n\nCredentialConfigService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nDisplayService\n\nDisplayService\n\nIssuerModule -->\n\nDisplayService->IssuerModule\n\n\n\n\n\nIssuanceService\n\nIssuanceService\n\nIssuerModule -->\n\nIssuanceService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nIssuerModule -->\n\nSessionLoggerInterceptor->IssuerModule\n\n\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nIssuerModule -->\n\nSessionLoggerService->IssuerModule\n\n\n\nOid4vpModule -->\n\nSessionLoggerService->Oid4vpModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nIssuerModule -->\n\nWebhookService->IssuerModule\n\n\n\nOid4vpModule -->\n\nWebhookService->Oid4vpModule\n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nResolverModule\n\nResolverModule\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nResolverService \n\nResolverService \n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        17 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    18 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    29 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    64 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    19 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoImplementatationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IssuerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KeyModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetricModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        Oid4vpModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PresentationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RegistrarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ResolverModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SessionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StatusListModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StorageModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VerifierModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : a middleware to interact with the EUDI Wallet\n        \n            Bugs : https://github.com/openwallet-foundation-labs/eudiplo/issues\n        \n            License : Apache-2.0\n        \n            Repository : https://github.com/openwallet-foundation-labs/eudiplo.git\n        \n            Author : Mirko Mollik \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CertificateType   (src/.../cert.entity.ts)\n                        \n                        \n                            CryptoType   (src/.../crypto-implementation.service.ts)\n                        \n                        \n                            Driver   (src/.../storage.module.ts)\n                        \n                        \n                            KeyPair   (src/.../crypto-implementation.ts)\n                        \n                        \n                            KeyUsage   (src/.../keys.entity.ts)\n                        \n                        \n                            Notification   (src/.../session.entity.ts)\n                        \n                        \n                            PolicyType   (src/.../policies.dto.ts)\n                        \n                        \n                            Presence   (src/.../config-printer.service.ts)\n                        \n                        \n                            PutOptions   (src/.../storage.types.ts)\n                        \n                        \n                            Signer   (src/.../crypto-implementation.ts)\n                        \n                        \n                            StoredObject   (src/.../storage.types.ts)\n                        \n                        \n                            Verifier   (src/.../crypto-implementation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/crypto/key/entities/cert.entity.ts\n    \n    \n        \n            \n                \n                    \n                    CertificateType\n                \n            \n            \n                \n                        \"access\" | \"signing\"\n\n                \n            \n        \n    \n    src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n    \n    \n        \n            \n                \n                    \n                    CryptoType\n                \n            \n            \n                \n                        \"ES256\" | \"Ed25519\"\n\n                \n            \n        \n    \n    src/storage/storage.module.ts\n    \n    \n        \n            \n                \n                    \n                    Driver\n                \n            \n            \n                \n                        \"local\" | \"s3\"\n\n                \n            \n        \n    \n    src/crypto/key/crypto-implementation/crypto-implementation.ts\n    \n    \n        \n            \n                \n                    \n                    KeyPair\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Signer\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Verifier\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/crypto/key/entities/keys.entity.ts\n    \n    \n        \n            \n                \n                    \n                    KeyUsage\n                \n            \n            \n                \n                    Key usage types.\n\n                \n            \n            \n                \n                        \"sign\" | \"encrypt\"\n\n                \n            \n        \n    \n    src/session/entities/session.entity.ts\n    \n    \n        \n            \n                \n                    \n                    Notification\n                \n            \n            \n                \n                    Represents a session entity for managing user sessions in the application.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/issuer/credentials/entities/policies.dto.ts\n    \n    \n        \n            \n                \n                    \n                    PolicyType\n                \n            \n            \n                \n                        \"none\" | \"allowList\" | \"rootOfTrust\" | \"attestationBased\"\n\n                \n            \n        \n    \n    src/utils/config-printer/config-printer.service.ts\n    \n    \n        \n            \n                \n                    \n                    Presence\n                \n            \n            \n                \n                        \"required\" | \"optional\" | string\n\n                \n            \n        \n    \n    src/storage/storage.types.ts\n    \n    \n        \n            \n                \n                    \n                    PutOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StoredObject\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AUTH_VALIDATION_SCHEMA   (src/.../auth-validation.schema.ts)\n                        \n                        \n                            BASE_VALIDATION_SCHEMA   (src/.../validation.schema.ts)\n                        \n                        \n                            CONFIG_VALIDATION_SCHEMA   (src/.../config-validation.schema.ts)\n                        \n                        \n                            ContentType   (src/.../media-type.decorator.ts)\n                        \n                        \n                            CRYPTO_VALIDATION_SCHEMA   (src/.../crypto-validation.schema.ts)\n                        \n                        \n                            DB_VALIDATION_SCHEMA   (src/.../database-validation.schema.ts)\n                        \n                        \n                            DEFAULT_AUTH_CLIENT_ID   (src/.../auth.module.ts)\n                        \n                        \n                            DEFAULT_AUTH_CLIENT_SECRET   (src/.../auth.module.ts)\n                        \n                        \n                            DEFAULT_JWT_SECRET   (src/.../auth.module.ts)\n                        \n                        \n                            ECDSA_P256   (src/.../crypto.service.ts)\n                        \n                        \n                            ED25519   (src/.../ed25519.ts)\n                        \n                        \n                            FILE_STORAGE   (src/.../storage.types.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            ISSUER_VALIDATION_SCHEMA   (src/.../issuer-validation.schema.ts)\n                        \n                        \n                            KEY_VALIDATION_SCHEMA   (src/.../key-validation.schema.ts)\n                        \n                        \n                            LOG_VALIDATION_SCHEMA   (src/.../log-validation.schema.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            REGISTRAR_VALIDATION_SCHEMA   (src/.../registrar-validation.schema.ts)\n                        \n                        \n                            SESSION_LOGGER_KEY   (src/.../session-logger.decorator.ts)\n                        \n                        \n                            SESSION_VALIDATION_SCHEMA   (src/.../session-validation.schema.ts)\n                        \n                        \n                            SessionLogger   (src/.../session-logger.decorator.ts)\n                        \n                        \n                            STORAGE_VALIDATION_SCHEMA   (src/.../storage-validation.schema.ts)\n                        \n                        \n                            Token   (src/.../token.decorator.ts)\n                        \n                        \n                            VALIDATION_SCHEMA   (src/.../combined.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Joi.ObjectSchema\n\n                    \n                \n                \n                    \n                        Default value : Joi.object({\n    OIDC: Joi.string()\n        .description(\"Enable OIDC mode\")\n        .meta({ group: \"auth\", order: 10 }),\n\n    OIDC_INTERNAL_ISSUER_URL: Joi.string()\n        .uri()\n        .when(\"OIDC\", {\n            is: Joi.exist(),\n            then: Joi.required(),\n            otherwise: Joi.optional(),\n        })\n        .description(\"Internal issuer URL in OIDC mode\")\n        .meta({ group: \"auth\", order: 20 }),\n\n    OIDC_SUB: Joi.when(\"OIDC\", {\n        is: Joi.exist(),\n        then: Joi.string().default(\"azp\"),\n        otherwise: Joi.optional(),\n    })\n        .description(\"Claim to use as subject\")\n        .meta({ group: \"auth\", order: 30 }),\n\n    OIDC_ALGORITHM: Joi.when(\"OIDC\", {\n        is: Joi.exist(),\n        then: Joi.string().valid(\"RS256\", \"PS256\", \"ES256\").default(\"RS256\"),\n        otherwise: Joi.optional(),\n    })\n        .description(\"Expected JWT alg\")\n        .meta({ group: \"auth\", order: 40 }),\n\n    JWT_SECRET: Joi.when(\"OIDC\", {\n        is: Joi.exist(),\n        then: Joi.string().optional(),\n        otherwise: Joi.string().min(32).default(DEFAULT_JWT_SECRET),\n    })\n        .description(\"Local JWT secret (when OIDC is off)\")\n        .meta({ group: \"auth\", order: 50 }),\n\n    JWT_ISSUER: Joi.when(\"OIDC\", {\n        is: Joi.exist(),\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(\"eudiplo-service\"),\n    })\n        .description(\"Local JWT issuer\")\n        .meta({ group: \"auth\", order: 60 }),\n\n    JWT_EXPIRES_IN: Joi.when(\"OIDC\", {\n        is: Joi.exist(),\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(\"24h\"),\n    })\n        .description(\"Local JWT expiration\")\n        .meta({ group: \"auth\", order: 70 }),\n\n    AUTH_CLIENT_SECRET: Joi.when(\"OIDC\", {\n        is: Joi.exist(),\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_AUTH_CLIENT_SECRET),\n    })\n        .description(\"Client secret (local auth)\")\n        .meta({ group: \"auth\", order: 80 }),\n\n    AUTH_CLIENT_ID: Joi.when(\"OIDC\", {\n        is: Joi.exist(),\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_AUTH_CLIENT_ID),\n    })\n        .description(\"Client ID (local auth)\")\n        .meta({ group: \"auth\", order: 90 }),\n}).unknown(true)\n                    \n                \n\n\n        \n    \n\n    src/utils/config-printer/validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BASE_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    FOLDER: Joi.string()\n        .default(\"../../tmp\")\n        .description(\"Root working folder for temp files\")\n        .meta({ group: \"general\", order: 10 }),\n    RP_NAME: Joi.string()\n        .default(\"EUDIPLO\")\n        .description(\"Relying Party display name\")\n        .meta({ group: \"general\", order: 20 }),\n}).unknown(true)\n                    \n                \n\n            \n                \n                    Validation schema for base configuration\n\n                \n            \n\n        \n    \n\n    src/utils/config-printer/config-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CONFIG_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    CONFIG_PRINT: Joi.boolean()\n        .default(false)\n        .description(\"Enable config printing\")\n        .meta({ group: \"config\", order: 0 }),\n\n    CONFIG_PRINT_FORMAT: Joi.string()\n        .valid(\"text\", \"json\", \"markdown\")\n        .default(\"text\")\n        .description(\"Format for printing config\")\n        .meta({ group: \"config\", order: 1 }),\n\n    CONFIG_PRINT_ADVANCED: Joi.boolean()\n        .default(true)\n        .description(\"Enable advanced config printing\")\n        .meta({ group: \"config\", order: 2 }),\n\n    CONFIG_PRINT_IN_PROD: Joi.boolean()\n        .default(false)\n        .description(\"Allow config printing in production environments\")\n        .meta({ group: \"config\", order: 3 }),\n\n    CONFIG_PRINT_FILE: Joi.string()\n        .default(\"../../docs/architecture/environment-config.md\")\n        .description(\"Output file path for the documentation\")\n        .meta({ group: \"config\", order: 5 }),\n\n    CONFIG_IMPORT: Joi.boolean()\n        .default(false)\n        .description(\"Run one-off config import on startup\")\n        .meta({ group: \"config\", order: 10 }),\n\n    CONFIG_IMPORT_FORCE: Joi.boolean()\n        .default(false)\n        .description(\"Force overwrite on config import\")\n        .meta({ group: \"config\", order: 20 }),\n\n    CONFIG_FOLDER: Joi.string()\n        .default(\"../../assets/config\")\n        .description(\"Path to config import folder\")\n        .meta({ group: \"config\", order: 30 }),\n})\n                    \n                \n\n            \n                \n                    Validation schema for configuration\n\n                \n            \n\n        \n    \n\n    src/utils/mediaType/media-type.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ContentType\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.headers[\"accept\"] as string | undefined;\n    },\n)\n                    \n                \n\n            \n                \n                    Decorator to extract the content type from the request headers.\nThis decorator can be used to determine the media type of the request.\n\n                \n            \n\n        \n    \n\n    src/crypto/key/crypto-implementation/crypto-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CRYPTO_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    CRYPTO_ALG: Joi.string()\n        .valid(\"ES256\")\n        .default(\"ES256\")\n        .description(\"The signing algorithm to use\")\n        .meta({ group: \"crypto\", order: 10 }),\n})\n                    \n                \n\n\n        \n    \n\n    src/database/database-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DB_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    DB_TYPE: Joi.string()\n        .valid(\"sqlite\", \"postgres\")\n        .default(\"sqlite\")\n        .description(\"Database type\")\n        .meta({ group: \"database\", order: 10 }),\n    DB_HOST: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PORT: Joi.number()\n        .when(\"DB_TYPE\", {\n            is: \"sqlite\",\n            then: Joi.optional(),\n            otherwise: Joi.required(),\n        })\n        .description(\"Database port\")\n        .meta({ group: \"database\", order: 20 }),\n    DB_USERNAME: Joi.string()\n        .when(\"DB_TYPE\", {\n            is: \"sqlite\",\n            then: Joi.optional(),\n            otherwise: Joi.required(),\n        })\n        .description(\"Database username\")\n        .meta({ group: \"database\", order: 30 }),\n    DB_PASSWORD: Joi.string()\n        .when(\"DB_TYPE\", {\n            is: \"sqlite\",\n            then: Joi.optional(),\n            otherwise: Joi.required(),\n        })\n        .description(\"Database password\")\n        .meta({ group: \"database\", order: 40 }),\n    DB_DATABASE: Joi.string()\n        .when(\"DB_TYPE\", {\n            is: \"sqlite\",\n            then: Joi.optional(),\n            otherwise: Joi.required(),\n        })\n        .description(\"Database name\")\n        .meta({ group: \"database\", order: 50 }),\n})\n                    \n                \n\n\n        \n    \n\n    src/auth/auth.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DEFAULT_AUTH_CLIENT_ID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"root\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_AUTH_CLIENT_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"root\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_JWT_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"supersecret\"\n                    \n                \n\n\n        \n    \n\n    src/crypto/crypto.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ECDSA_P256\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    name: \"ECDSA\",\n    namedCurve: \"P-256\",\n    hash: \"SHA-256\" as const,\n}\n                    \n                \n\n\n        \n    \n\n    src/crypto/key/crypto-implementation/ed25519.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ED25519\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CryptoImplementation\n\n                    \n                \n                \n                    \n                        Default value : {\n    alg: \"EdDSA\",\n    async generateKeyPair() {\n        const keyPair = await crypto.webcrypto.subtle.generateKey(\n            {\n                name: \"EdDSA\",\n                namedCurve: \"Ed25519\",\n            },\n            true,\n            [\"sign\", \"verify\"],\n        );\n\n        const publicKey = await crypto.webcrypto.subtle.exportKey(\n            \"jwk\",\n            keyPair.publicKey,\n        );\n        const privateKey = await crypto.webcrypto.subtle.exportKey(\n            \"jwk\",\n            keyPair.privateKey,\n        );\n\n        return { publicKey, privateKey };\n    },\n    async getSigner(privateKeyJWK: object) {\n        const privateKey = await crypto.webcrypto.subtle.importKey(\n            \"jwk\",\n            privateKeyJWK,\n            {\n                name: \"EdDSA\",\n                namedCurve: \"Ed25519\",\n            },\n            false,\n            [\"sign\"],\n        );\n\n        return async (data: string) => {\n            const signature = await crypto.webcrypto.subtle.sign(\n                \"EdDSA\",\n                privateKey,\n                new TextEncoder().encode(data),\n            );\n\n            return Buffer.from(signature).toString(\"base64url\");\n        };\n    },\n    async getVerifier(publicKeyJWK: object) {\n        const publicKey = await crypto.webcrypto.subtle.importKey(\n            \"jwk\",\n            publicKeyJWK,\n            {\n                name: \"EdDSA\",\n                namedCurve: \"Ed25519\",\n            },\n            false,\n            [\"verify\"],\n        );\n\n        return async (data: string, signatureBase64url: string) => {\n            const signature = Buffer.from(signatureBase64url, \"base64url\");\n            const isVerified = await crypto.webcrypto.subtle.verify(\n                \"EdDSA\",\n                publicKey,\n                signature,\n                new TextEncoder().encode(data),\n            );\n\n            return isVerified;\n        };\n    },\n}\n                    \n                \n\n\n        \n    \n\n    src/storage/storage.types.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FILE_STORAGE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol(\"FILE_STORAGE\")\n                    \n                \n\n\n        \n    \n\n    src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"isPublic\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/issuer/issuer-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ISSUER_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    PUBLIC_URL: Joi.string()\n        .default(\"http://localhost:3000\")\n        .description(\"The public URL of the issuer\")\n        .meta({ group: \"general\", order: 10 }),\n})\n                    \n                \n\n\n        \n    \n\n    src/crypto/key/key-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        KEY_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    KM_TYPE: Joi.string()\n        .valid(\"db\", \"vault\")\n        .default(\"db\")\n        .description(\"The key management type\")\n        .meta({ group: \"key\", order: 10 }),\n\n    // Vault-related config\n    VAULT_URL: Joi.string()\n        .uri()\n        .when(\"KM_TYPE\", {\n            is: \"vault\",\n            then: Joi.required(),\n            otherwise: Joi.optional(),\n        })\n        .description(\"The URL of the Vault server\")\n        .meta({ group: \"key\", order: 20 }),\n    VAULT_TOKEN: Joi.string()\n        .when(\"KM_TYPE\", {\n            is: \"vault\",\n            then: Joi.required(),\n            otherwise: Joi.optional(),\n        })\n        .description(\"The token for accessing the Vault\")\n        .meta({ group: \"key\", order: 30 }),\n})\n                    \n                \n\n\n        \n    \n\n    src/utils/logger/log-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LOG_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    LOG_LEVEL: Joi.string()\n        .valid(\"trace\", \"debug\", \"info\", \"warn\", \"error\", \"fatal\")\n        .default(process.env.NODE_ENV === \"production\" ? \"warn\" : \"debug\")\n        .description(\"Application log level\")\n        .meta({ group: \"log\", order: 10 }),\n    LOG_ENABLE_HTTP_LOGGER: Joi.boolean()\n        .default(false)\n        .description(\"Enable HTTP request logging\")\n        .meta({ group: \"log\", order: 20 }),\n    LOG_ENABLE_SESSION_LOGGER: Joi.boolean()\n        .default(false)\n        .description(\"Enable session flow logging\")\n        .meta({ group: \"log\", order: 30 }),\n    LOG_DEBUG_MODE: Joi.boolean()\n        .default(false)\n        .description(\"Enable verbose debug logs\")\n        .meta({ group: \"log\", order: 40 }),\n    LOG_FORMAT: Joi.string()\n        .valid(\"json\", \"pretty\")\n        .default(process.env.NODE_ENV === \"production\" ? \"json\" : \"pretty\")\n        .description(\"Log output format\")\n        .meta({ group: \"log\", order: 50 }),\n})\n                    \n                \n\n            \n                \n                    Validation schema for logging configuration\n\n                \n            \n\n        \n    \n\n    src/registrar/registrar-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REGISTRAR_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    REGISTRAR_URL: Joi.string()\n        .description(\"The URL of the registrar\")\n        .meta({ group: \"registrar\", order: 10 }),\n    REGISTRAR_OIDC_URL: Joi.string()\n        .when(\"REGISTRAR_URL\", {\n            is: Joi.exist(),\n            then: Joi.required(),\n        })\n        .description(\"The OIDC URL of the registrar\")\n        .meta({ group: \"registrar\", order: 20 }),\n    REGISTRAR_OIDC_CLIENT_ID: Joi.string()\n        .when(\"REGISTRAR_URL\", {\n            is: Joi.exist(),\n            then: Joi.required(),\n        })\n        .description(\"The OIDC client ID of the registrar\")\n        .meta({ group: \"registrar\", order: 30 }),\n    REGISTRAR_OIDC_CLIENT_SECRET: Joi.string()\n        .when(\"REGISTRAR_URL\", {\n            is: Joi.exist(),\n            then: Joi.required(),\n        })\n        .description(\"The OIDC client secret of the registrar\")\n        .meta({ group: \"registrar\", order: 40 }),\n})\n                    \n                \n\n            \n                \n                    Validation schema for the registrar module.\nDefines the required environment variables and their types.\n\n                \n            \n\n        \n    \n\n    src/utils/logger/session-logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SESSION_LOGGER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"session-logger\"\n                    \n                \n\n            \n                \n                    Key for session logger metadata.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SessionLogger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n    sessionIdParam: string,\n    flowType: \"OID4VCI\" | \"OID4VP\",\n) => SetMetadata(SESSION_LOGGER_KEY, { sessionIdParam, flowType })\n                    \n                \n\n            \n                \n                    Decorator to mark methods that should have session-based logging\n\n                \n            \n\n        \n    \n\n    src/session/session-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SESSION_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    SESSION_TIDY_UP_INTERVAL: Joi.number()\n        .default(60 * 60)\n        .description(\"Interval in seconds to run session tidy up\")\n        .meta({ group: \"session\", order: 10 }),\n    SESSION_TTL: Joi.number()\n        .default(24 * 60 * 60)\n        .description(\"Time to live for sessions in seconds\")\n        .meta({ group: \"session\", order: 20 }),\n})\n                    \n                \n\n            \n                \n                    Module for managing user sessions.\n\n                \n            \n\n        \n    \n\n    src/storage/storage-validation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        STORAGE_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n    STORAGE_DRIVER: Joi.string()\n        .valid(\"local\", \"s3\")\n        .default(\"local\")\n        .description(\"The storage driver to use\")\n        .meta({ group: \"storage\", order: 10 }),\n    LOCAL_STORAGE_DIR: Joi.string()\n        .when(Joi.ref(\"STORAGE_DRIVER\"), {\n            is: \"local\",\n            then: Joi.string().default((parent) =>\n                join(parent.FOLDER, \"uploads\"),\n            ),\n        })\n        .description(\"The directory to store files in when using local storage\")\n        .meta({ group: \"storage\", order: 20 }),\n    S3_REGION: Joi.string()\n        .when(Joi.ref(\"STORAGE_DRIVER\"), {\n            is: \"s3\",\n            then: Joi.required(),\n        })\n        .description(\"The AWS region for the S3 bucket\")\n        .meta({ group: \"storage\", order: 30 }),\n    S3_BUCKET: Joi.string()\n        .when(Joi.ref(\"STORAGE_DRIVER\"), {\n            is: \"s3\",\n            then: Joi.required(),\n        })\n        .description(\"The name of the S3 bucket\")\n        .meta({ group: \"storage\", order: 40 }),\n    S3_ACCESS_KEY_ID: Joi.string()\n        .when(Joi.ref(\"STORAGE_DRIVER\"), {\n            is: \"s3\",\n            then: Joi.required(),\n        })\n        .description(\"The access key ID for the S3 bucket\")\n        .meta({ group: \"storage\", order: 50 }),\n    S3_SECRET_ACCESS_KEY: Joi.string()\n        .when(Joi.ref(\"STORAGE_DRIVER\"), {\n            is: \"s3\",\n            then: Joi.required(),\n        })\n        .description(\"The secret access key for the S3 bucket\")\n        .meta({ group: \"storage\", order: 60 }),\n    S3_ENDPOINT: Joi.string()\n        .when(Joi.ref(\"STORAGE_DRIVER\"), {\n            is: \"s3\",\n            then: Joi.optional(),\n        })\n        .description(\n            \"The endpoint URL for the S3 service (for S3-compatible services)\",\n        )\n        .meta({ group: \"storage\", order: 70 }),\n    S3_FORCE_PATH_STYLE: Joi.boolean()\n        .when(Joi.ref(\"STORAGE_DRIVER\"), {\n            is: \"s3\",\n            then: Joi.boolean().default(false),\n        })\n        .description(\"Whether to force path-style URLs for S3\")\n        .meta({ group: \"storage\", order: 80 }),\n    S3_PUBLIC_BASE_URL: Joi.string()\n        .when(Joi.ref(\"STORAGE_DRIVER\"), {\n            is: \"s3\",\n            then: Joi.required(),\n        })\n        .description(\"The public base URL for the S3 bucket\")\n        .meta({ group: \"storage\", order: 90 }),\n})\n                    \n                \n\n\n        \n    \n\n    src/auth/token.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Token\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user as TokenPayload; // Access the token payload on the request object\n    },\n)\n                    \n                \n\n\n        \n    \n\n    src/utils/config-printer/combined.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : BASE_VALIDATION_SCHEMA.concat(\n    AUTH_VALIDATION_SCHEMA,\n)\n    .concat(DB_VALIDATION_SCHEMA)\n    .concat(CONFIG_VALIDATION_SCHEMA)\n    .concat(LOG_VALIDATION_SCHEMA)\n    .concat(REGISTRAR_VALIDATION_SCHEMA)\n    .concat(KEY_VALIDATION_SCHEMA)\n    .concat(CRYPTO_VALIDATION_SCHEMA)\n    .concat(ISSUER_VALIDATION_SCHEMA)\n    .concat(SESSION_VALIDATION_SCHEMA)\n    .concat(STORAGE_VALIDATION_SCHEMA)\n                    \n                \n\n            \n                \n                    Combined validation schema for the application configuration\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
