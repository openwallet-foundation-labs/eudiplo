var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AccessCertificateResponse.html",[0,0.574,1,3.559]],["body/interfaces/AccessCertificateResponse.html",[0,0.313,1,3.871,2,0.72,3,0.053,4,0.043,5,0.097,6,2.13,7,0.504,8,3.4,9,5.052,10,5.103,11,0.905,12,0.115,13,0.473,14,4.419,15,2.038,16,0.542,17,5.611,18,0.623,19,0.218,20,0.009,21,1.623,22,0.949,23,3.37,24,1.903,25,2.7,26,1.971,27,2.152,28,3.102,29,0.49,30,0.824,31,3.37,32,2.887,33,0.426,34,2.196,35,0.838,36,4.845,37,1.943,38,2.949,39,2.13,40,3.4,41,3.4,42,3.4,43,3.4,44,3.4,45,3.4,46,1.803,47,2.454,48,1.192,49,2.7,50,2.13,51,1.152,52,3.602,53,2.13,54,1.387,55,1.449,56,1.332,57,1.692,58,5.014,59,6.074,60,2.439,61,2.295,62,1.692,63,1.599,64,1.332,65,1.387,66,1.449,67,1.599,68,1.387,69,3.185,70,1.519,71,1.449,72,2.13,73,1.803,74,5.644,75,5.403,76,2.13,77,3.4,78,4.703,79,0.053,80,0.032,81,1.152,82,2.7,83,3.4,84,1.692,85,1.943,86,2.493,87,1.115,88,1.192,89,1.957,90,2.13,91,1.281,92,2.13,93,1.044,94,2.214,95,2.552,96,1.943,97,1.929,98,0.838,99,1.943,100,1.803,101,1.692,102,1.803,103,1.803,104,1.387,105,1.692,106,1.192,107,1.967,108,3.4,109,1.287,110,1.528,111,2.13,112,2.13,113,2.425,114,2.13,115,2.878,116,2.13,117,2.13,118,2.126,119,1.332,120,2.13,121,2.13,122,2.13,123,2.13,124,2.13,125,5.923,126,2.13,127,1.387,128,2.13,129,0.933,130,3.4,131,1.803,132,1.41,133,3.102,134,2.552,135,1.377,136,1.019,137,1.152,138,1.599,139,2.13,140,3.4,141,1.576,142,3.026,143,1.387,144,2.13,145,2.13,146,2.158,147,2.369,148,3.4,149,1.08,150,2.13,151,2.501,152,1.803,153,1.599,154,3.4,155,5.644,156,2.13,157,2.13,158,2.13,159,1.152,160,1.017,161,1.017,162,2.13,163,1.192,164,3.185,165,2.13,166,2.13,167,2.13,168,1.971,169,2.13,170,2.13,171,1.281,172,2.13,173,1.943,174,1.943,175,1.281,176,1.943,177,1.943,178,1.943,179,2.13,180,2.13,181,2.13,182,2.13,183,1.449,184,2.13,185,4.778,186,3.37,187,4.244,188,2.764,189,2.13,190,0.972,191,1.184,192,1.803,193,1.546,194,2.7,195,0.639,196,2.13,197,2.13,198,3.4,199,3.4,200,1.803,201,2.7,202,1.048,203,3.185,204,2.887,205,2.13,206,1.017,207,2.13,208,2.13,209,2.13,210,2.13,211,2.864,212,4.778,213,3.029,214,3.102,215,2.13,216,3.37,217,4.244,218,3.4,219,2.182,220,5.295,221,3.871,222,5.644,223,3.102,224,2.13,225,0.959,226,1.943,227,2.13,228,2.13,229,2.126,230,2.13,231,2.7,232,1.803,233,1.803,234,1.803,235,1.599,236,1.803,237,2.13,238,1.586,239,3.4,240,1.332,241,2.552,242,2.13,243,2.13,244,4.244,245,2.13,246,1.192,247,2.025,248,2.878,249,2.13,250,1.304,251,2.13,252,1.943,253,2.552,254,2.13,255,2.13,256,1.387,257,1.692,258,1.192,259,0.005,260,1.943,261,2.13,262,2.13,263,1.912,264,2.13,265,2.13,266,2.13,267,1.519,268,2.13,269,1.943,270,1.017,271,2.13,272,2.13,273,3.102,274,1.943,275,2.13,276,1.519,277,2.13,278,2.13,279,1.803,280,2.13,281,2.13,282,1.692,283,2.13,284,3.4,285,2.126,286,3.4,287,2.13,288,1.519,289,1.192,290,1.803,291,3.4,292,3.4,293,2.13,294,2.126,295,1.692,296,2.13,297,1.449,298,1.449,299,1.943,300,2.13,301,2.13,302,0.004]],["title/classes/ApiKeyConfig.html",[80,0.059,303,3.303]],["body/classes/ApiKeyConfig.html",[3,0.114,4,0.091,5,0.091,7,1.074,12,0.246,13,0.821,16,0.723,18,0.624,19,0.398,20,0.009,22,2.095,29,0.421,60,1.575,79,0.174,80,0.109,87,3.929,97,2.687,129,1.99,191,1.238,202,3.413,259,0.007,302,0.007,303,5.875,304,1.787,305,3.845,306,5.178,307,5.875,308,5.98,309,2.106,310,1.856,311,3.739,312,0.821,313,5.149,314,2.879,315,4.722,316,3.413,317,5.149,318,3.845,319,3.845,320,3.943,321,3.844,322,2.234,323,2.234,324,3.409,325,4.143,326,3.409,327,4.996,328,4.675,329,3.52,330,5.55,331,4.143,332,2.633,333,4.143,334,2.84,335,3.607,336,3.607,337,2.633,338,2.151,339,3.091,340,3.409,341,2.732]],["title/controllers/AppController.html",[342,1.576,343,3.559]],["body/controllers/AppController.html",[3,0.146,4,0.117,5,0.117,12,0.316,18,0.599,20,0.009,29,0.493,33,1.168,79,0.146,80,0.089,109,1.058,135,1.519,259,0.008,302,0.008,310,1.838,312,0.813,342,2.787,343,6.294,344,2.56,345,6.624,346,1.881,347,8.598,348,6.624,349,7.821,350,3.161,351,5.331,352,4.641,353,6.624,354,4.641,355,3.976,356,5.844]],["title/modules/AppModule.html",[357,1.387,358,3.303]],["body/modules/AppModule.html",[3,0.144,4,0.07,5,0.07,15,1.52,19,0.254,20,0.009,21,2.362,29,0.562,33,0.701,34,2.91,35,1.379,61,1.896,64,2.191,79,0.088,80,0.053,109,0.635,110,1.064,136,1.72,137,1.896,151,1.759,161,1.673,219,1.579,246,3.211,250,1.344,259,0.006,270,2.362,302,0.006,338,1.277,343,5.234,344,2.168,357,2.039,358,6.736,359,1.724,360,1.896,361,2.032,362,2.032,363,1.896,364,2.77,365,1.961,366,3.505,367,3.505,368,5.421,369,4.106,370,5.786,371,5.421,372,5.421,373,5.223,374,4.868,375,4.645,376,5.421,377,2.869,378,2.032,379,1.896,380,3.973,381,5.234,382,3.373,383,4.858,384,3.368,385,2.499,386,3.197,387,3.505,388,3.973,389,4.95,390,3.973,391,3.973,392,4.95,393,3.197,394,3.973,395,3.505,396,2.783,397,3.973,398,4.95,399,3.973,400,5.611,401,3.973,402,3.973,403,4.95,404,2.967,405,3.973,406,3.197,407,3.973,408,3.973,409,4.95,410,3.973,411,3.973,412,3.973,413,3.973,414,3.973,415,2.783,416,4.19,417,3.973,418,3.973,419,3.973,420,3.904,421,3.973,422,3.973,423,3.973,424,3.973,425,3.197,426,3.973,427,5.611,428,5.611,429,3.973,430,1.185,431,5.611,432,4.95,433,3.973,434,3.973,435,3.973,436,4.19,437,4.515,438,3.973,439,3.973,440,3.973,441,3.973,442,1.85,443,3.973,444,3.505,445,1.896,446,3.973,447,3.973,448,3.973,449,3.973,450,3.973,451,3.973,452,3.973,453,3.973,454,3.973,455,3.973,456,3.224,457,5.611,458,1.999,459,5.611,460,3.973,461,5.611,462,2.499,463,3.973,464,2.63,465,3.973,466,2.783,467,3.973,468,2.967,469,3.973,470,1.535,471,1.835,472,4.95,473,3.973,474,1.896,475,3.973,476,3.505,477,3.973,478,3.973,479,3.973,480,3.973,481,3.505,482,5.611,483,3.973,484,2.63,485,3.973,486,3.973]],["title/interfaces/Auth.html",[0,0.574,129,1.709]],["body/interfaces/Auth.html",[0,0.691,2,1.589,3,0.117,4,0.094,5,0.094,11,1.606,12,0.254,13,0.839,16,1.185,18,0.61,19,0.397,20,0.009,79,0.167,88,2.629,89,2.839,107,2.796,109,1.273,110,1.296,129,3.356,141,2.177,146,1.712,147,1.712,190,1.724,191,1.561,206,3.47,259,0.007,302,0.007,309,1.765,314,3.138,323,2.966,324,5.456,328,4.75,339,4.104,430,2.378,442,1.756,487,4.698,488,7.967,489,5.639,490,5.501,491,5.106,492,8.24,493,4.999,494,5.639,495,3.977,496,5.29,497,5.325,498,6.836,499,5.325]],["title/controllers/AuthController.html",[342,1.576,500,3.559]],["body/controllers/AuthController.html",[3,0.104,4,0.083,5,0.083,7,1.586,12,0.225,16,0.663,19,0.344,20,0.009,21,2.658,29,0.533,33,0.831,38,3.097,46,4.714,79,0.104,80,0.063,85,3.794,86,2.135,89,2.906,93,1.277,94,1.555,98,1.637,107,1.928,109,0.753,110,1.35,118,1.751,129,1.822,132,2.31,133,5.08,135,1.448,146,2.288,147,1.516,149,3.184,159,3.012,160,3.433,190,1.592,191,0.873,193,2.443,201,3.303,238,2.081,259,0.006,302,0.006,306,2.83,309,1.218,310,1.308,312,0.579,316,2.739,324,4.179,342,1.68,344,1.822,346,1.518,350,2.25,351,3.794,462,2.966,500,5.08,501,4.715,502,2.328,503,6.312,504,4.715,505,6.562,506,4.715,507,4.422,508,6.312,509,5.08,510,3.2,511,5.569,512,5.727,513,5.08,514,5.08,515,4.711,516,5.727,517,4.715,518,1.247,519,2.411,520,6.312,521,3.122,522,5.727,523,4.714,524,4.711,525,4.16,526,4.711,527,4.16,528,4.16,529,4.715,530,4.715,531,3.482,532,3.521,533,4.715,534,2.709,535,4.715,536,3.521,537,4.715,538,4.16,539,6.116,540,3.521,541,4.715,542,3.122,543,3.794,544,2.824,545,5.08,546,4.715,547,5.569,548,4.714,549,7.116,550,4.715,551,4.715,552,2.966,553,4.715,554,4.715,555,4.715,556,4.715,557,4.715,558,2.046,559,3.521,560,4.715,561,4.715,562,3.794,563,4.715,564,4.16,565,4.715,566,3.122]],["title/modules/AuthModule.html",[357,1.387,368,3.099]],["body/modules/AuthModule.html",[3,0.114,4,0.092,5,0.092,20,0.009,29,0.55,33,0.913,35,1.797,79,0.148,80,0.069,84,3.628,110,0.982,132,1.895,138,5.641,259,0.007,302,0.007,344,2.595,357,2.336,359,2.247,360,2.471,361,2.648,362,2.648,363,2.471,364,3.679,365,3.679,368,6.332,377,3.434,378,2.648,379,2.471,382,2.471,383,5.015,384,4.031,409,4.569,500,5.997,524,5.906,525,4.569,526,5.542,527,4.569,567,4.569,568,4.569,569,4.569,570,5.612,571,6.662,572,5.178,573,7.451,574,3.867,575,5.178,576,5.178,577,5.178,578,8.636,579,5.178,580,8.52,581,8.169,582,5.178,583,5.178,584,4.569,585,5.178,586,5.178,587,5.178,588,4.167,589,5.178]],["title/interfaces/AuthResponse.html",[0,0.574,590,3.303]],["body/interfaces/AuthResponse.html",[0,0.807,2,1.857,3,0.137,4,0.11,5,0.11,7,1.298,11,1.769,12,0.297,13,0.925,18,0.66,19,0.381,20,0.009,22,1.855,79,0.137,89,2.887,225,3.22,259,0.008,302,0.008,309,1.607,491,5.626,496,5.278,590,6.052,591,6.221,592,3.735,593,4.359,594,5.925,595,6.777,596,7.534,597,7.534,598,4.522,599,5.365,600,3.997,601,3.853,602,6.221,603,4.646]],["title/classes/AuthorizationResponse.html",[80,0.059,604,3.303]],["body/classes/AuthorizationResponse.html",[3,0.142,4,0.114,5,0.114,7,1.34,12,0.306,13,0.943,18,0.651,19,0.291,20,0.009,29,0.404,79,0.142,80,0.103,89,2.736,195,2.361,259,0.008,302,0.008,304,2.229,310,1.782,311,3.675,312,0.789,322,2.786,323,3.693,592,3.855,593,5.38,599,5.084,600,4.516,604,5.735,605,7.679,606,5.666,607,5.735]],["title/controllers/AuthorizeController.html",[342,1.576,608,3.559]],["body/controllers/AuthorizeController.html",[3,0.087,4,0.07,5,0.07,7,1.168,9,3.36,11,2.006,12,0.189,16,0.992,18,0.654,19,0.359,20,0.009,29,0.511,33,0.698,51,1.889,79,0.087,80,0.053,86,1.893,89,2.941,91,3.745,93,1.072,94,2.676,109,1.127,110,0.751,135,1.823,146,2.653,147,1.273,151,2.751,190,1.78,191,1.306,193,2.834,195,2.101,202,2.428,206,2.357,246,3.922,247,1.667,259,0.006,270,3.597,299,3.186,302,0.006,310,1.958,312,0.866,323,3.763,342,2.653,344,1.53,346,1.346,350,1.889,458,1.411,502,1.955,518,1.866,519,2.025,523,4.18,534,2.275,538,4.938,548,2.957,608,4.504,609,3.959,610,3.959,611,4.938,612,4.504,613,5.597,614,5.225,615,7.057,616,7.445,617,3.493,618,5.602,619,5.597,620,3.959,621,4.808,622,4.938,623,3.959,624,3.959,625,4.236,626,5.27,627,1.489,628,3.959,629,3.959,630,5.679,631,3.959,632,3.959,633,3.959,634,3.959,635,3.706,636,4.938,637,3.216,638,2.774,639,2.621,640,2.184,641,3.897,642,3.959,643,3.186,644,3.581,645,2.774,646,3.186,647,3.959,648,3.959,649,1.955,650,4.944,651,3.959,652,3.959,653,4.44,654,3.959,655,3.186,656,3.493,657,2.957,658,2.957,659,3.959,660,3.493,661,3.959,662,2.957,663,3.959,664,3.959]],["title/classes/AuthorizeQueries.html",[80,0.059,618,2.928]],["body/classes/AuthorizeQueries.html",[3,0.112,4,0.09,5,0.09,12,0.243,13,0.816,16,1.29,18,0.703,19,0.4,20,0.009,29,0.321,79,0.112,80,0.089,259,0.007,302,0.007,304,1.769,310,2.454,311,3.982,312,1.086,321,5.114,322,2.212,542,4.896,618,4.4,653,4.652,665,8.899,666,3.207,667,5.523,668,7.395,669,7.395,670,7.395,671,5.181,672,7.395,673,7.395,674,4.652,675,7.395,676,8.845,677,4.497,678,4.497,679,5.097,680,4.497,681,5.097,682,4.497,683,5.097,684,4.497,685,5.097,686,4.497,687,5.097]],["title/injectables/AuthorizeService.html",[30,0.945,641,2.655]],["body/injectables/AuthorizeService.html",[0,0.367,3,0.062,4,0.05,5,0.05,11,1.774,12,0.135,16,1.061,18,0.68,19,0.365,20,0.009,21,1.191,29,0.502,30,0.932,33,0.499,34,2.503,35,0.982,38,1.035,47,2.915,48,1.396,51,1.35,60,0.865,79,0.096,80,0.038,86,2.49,93,1.182,98,1.515,109,1.092,110,1.618,113,1.779,118,1.897,119,1.56,129,2.059,135,1.688,136,1.154,146,2.711,147,2.595,151,2.792,159,1.35,161,2.243,164,1.872,190,1.1,191,1.398,193,2.428,195,2.108,213,1.56,236,2.112,238,2.134,246,2.63,247,1.837,250,0.957,256,1.625,259,0.004,270,3.18,302,0.004,309,0.73,312,0.927,329,3.06,334,2.407,337,3.063,338,1.713,341,2.827,346,1.049,458,2.84,468,3.259,470,1.686,510,1.191,518,1.997,566,1.872,594,2.889,601,3.063,614,4.287,617,2.495,618,5.107,625,1.698,626,3.979,627,1.64,637,3.93,638,3.732,639,1.872,640,1.56,641,2.619,643,2.276,644,3.931,645,1.981,653,3.352,667,4.473,671,4.534,688,1.093,689,2.495,690,3.85,691,4.363,692,4.7,693,4.7,694,4.7,695,4.363,696,4.7,697,1.625,698,4.279,699,4.096,700,2.828,701,2.828,702,3.511,703,2.828,704,5.208,705,3.85,706,2.828,707,5.71,708,2.828,709,2.828,710,2.276,711,2.828,712,2.828,713,2.828,714,2.828,715,3.85,716,2.828,717,2.828,718,2.828,719,3.595,720,3.511,721,4.287,722,2.957,723,2.495,724,1.872,725,1.981,726,2.495,727,2.495,728,2.112,729,1.698,730,3.511,731,2.495,732,3.85,733,3.511,734,2.495,735,3.85,736,1.779,737,4.7,738,2.495,739,2.384,740,2.276,741,2.495,742,2.276,743,2.495,744,2.276,745,2.495,746,2.495,747,2.276,748,2.231,749,1.981,750,2.276,751,2.276,752,2.495,753,2.276,754,2.495,755,2.276,756,2.495,757,2.495,758,2.495,759,3.85,760,2.495,761,2.276,762,2.495,763,2.495,764,1.625,765,3.629,766,2.495,767,2.495,768,2.495,769,2.495,770,2.495,771,3.85,772,3.057,773,2.495,774,4.82,775,2.495,776,2.495,777,2.495,778,4.287,779,2.495,780,2.276,781,2.495,782,2.495,783,2.495,784,2.495,785,2.495,786,2.495,787,2.495,788,3.511,789,2.495,790,2.495,791,1.625,792,1.501,793,2.276,794,1.981,795,2.495,796,2.276,797,2.276,798,2.495,799,2.495,800,1.625,801,2.889,802,2.276,803,2.495,804,3.85,805,2.495,806,2.495,807,2.495,808,2.495,809,2.495,810,1.191,811,1.981,812,1.981,813,3.85,814,2.495,815,2.889,816,1.981,817,3.85,818,2.495,819,2.495,820,1.698,821,2.495,822,2.495,823,2.495,824,2.495,825,2.495,826,2.495,827,2.495,828,2.495,829,2.495,830,2.495,831,2.495]],["title/interfaces/Client.html",[0,0.574,38,1.618]],["body/interfaces/Client.html",[0,0.798,2,1.354,3,0.1,4,0.08,5,0.08,12,0.216,13,0.755,15,2.303,18,0.658,19,0.278,20,0.009,29,0.508,30,1.314,31,4.888,33,0.8,34,2.553,35,1.574,38,3.254,54,2.606,56,3.392,61,2.935,64,2.502,65,2.606,66,2.723,68,2.606,79,0.136,80,0.061,81,2.164,82,3.178,86,2.645,93,1.229,94,1.495,97,1.977,106,2.239,109,1.249,110,1.419,113,3.869,115,4.593,132,2.25,135,1.04,136,1.2,149,2.029,160,2.589,161,1.91,191,0.84,202,1.968,216,3.178,219,1.803,259,0.006,263,3.277,282,3.178,285,2.502,294,2.502,302,0.006,306,2.723,336,3.178,338,1.458,352,3.178,420,2.723,430,1.354,462,2.854,484,3.003,526,3.003,588,3.65,635,3.003,800,2.606,816,3.178,832,4.002,833,4.919,834,4.949,835,3.388,836,3.003,837,4.949,838,7.113,839,3.65,840,4.002,841,4.002,842,4.002,843,4.002,844,4.002,845,4.002,846,3.65,847,4.002,848,4.002,849,4.002,850,4.002,851,6.156,852,4.002,853,4.002,854,4.002,855,4.002,856,3.65,857,3.003,858,4.002,859,5.426,860,5.426,861,4.002,862,4.002,863,4.002,864,4.002,865,2.723,866,4.002,867,4.002,868,4.002,869,4.002,870,4.002,871,3.388,872,3.388,873,3.388,874,4.002,875,3.65,876,4.002,877,4.002,878,5.426,879,4.002,880,2.029,881,5.426,882,3.65,883,4.002,884,4.002]],["title/interfaces/Client-1.html",[0,0.479,38,1.35,885,1.704]],["body/interfaces/Client-1.html",[0,0.744,2,1.223,3,0.09,4,0.073,5,0.073,11,2.019,12,0.196,13,0.704,19,0.397,20,0.009,29,0.361,38,2.099,60,2.307,79,0.127,87,1.893,89,2.044,119,2.261,129,3.101,135,1.316,141,3.483,161,2.786,163,2.832,168,2.097,190,1.807,193,1.318,195,1.75,202,2.489,206,1.726,225,3.189,229,3.164,259,0.006,263,1.629,302,0.006,309,1.059,312,0.503,315,2.461,338,1.844,354,4.019,430,1.712,445,3.599,470,2.557,471,1.893,491,3.062,493,2.714,494,4.941,507,2.872,518,1.084,519,3.997,558,1.779,600,2.175,627,2.487,811,2.872,886,3.617,887,5.021,888,6.655,889,4.745,890,5.352,891,6.655,892,6.07,893,6.655,894,4.509,895,6.655,896,4.163,897,5.061,898,5.724,899,4.163,900,5.352,901,3.511,902,3.609,903,2.714,904,3.617,905,3.617,906,2.356,907,2.097,908,5.061,909,4.509,910,2.872,911,1.94,912,3.972,913,3.617,914,3.617,915,3.617,916,4.284,917,3.617,918,1.461,919,3.617,920,3.617,921,5.061,922,2.097,923,3.296,924,5.061,925,2.261,926,3.617,927,3.617,928,3.299,929,3.617,930,2.714,931,3.617,932,3.617,933,3.299,934,3.617,935,3.617,936,5.061,937,3.972,938,5.061,939,5.061,940,5.061,941,5.061,942,3.617,943,3.617,944,3.299,945,3.617,946,3.299,947,3.617,948,3.617,949,3.617,950,3.617,951,3.062,952,3.617,953,3.617]],["title/classes/ClientCredentialsDto.html",[80,0.059,505,3.559]],["body/classes/ClientCredentialsDto.html",[3,0.146,4,0.117,5,0.117,12,0.315,13,0.958,18,0.657,19,0.353,20,0.009,29,0.416,79,0.146,80,0.105,259,0.008,302,0.008,304,2.291,310,2.165,311,3.921,312,0.958,322,2.863,505,6.28,542,5.502,543,6.687,954,8.31,955,6.6,956,6.6,957,6.6]],["title/interfaces/ClientOptions.html",[0,0.574,958,2.541]],["body/interfaces/ClientOptions.html",[0,0.865,2,1.044,3,0.077,4,0.062,5,0.062,11,1.844,12,0.167,13,0.629,16,1.041,18,0.567,19,0.392,20,0.009,24,1.727,27,2.71,29,0.381,38,2.802,60,2.17,79,0.18,87,1.616,91,1.857,95,1.857,97,1.125,98,1.215,107,2.477,109,0.818,127,4.077,129,1.352,136,0.925,137,1.67,141,1.431,142,2.201,159,1.67,161,2.807,163,1.727,175,3.537,190,1.291,193,2.575,195,2.118,206,2.807,211,1.67,219,2.407,225,3.12,229,1.93,238,1.154,250,2.255,258,2.99,259,0.005,302,0.005,314,1.28,316,1.518,338,2.617,346,0.842,430,2.117,442,1.997,445,3.537,470,2.864,474,1.67,627,2.667,894,2.201,896,2.201,898,2.201,899,2.201,903,2.317,906,2.943,909,3.811,911,1.184,912,3.636,918,2.641,930,2.317,937,2.1,958,2.943,959,2.451,960,5.703,961,5.535,962,2.201,963,3.825,964,3.825,965,2.613,966,2.943,967,2.613,968,3.954,969,4.67,970,2.613,971,2.317,972,2.613,973,4.194,974,2.317,975,2.201,976,1.93,977,2.613,978,2.613,979,2.613,980,2.613,981,3.588,982,3.588,983,2.613,984,2.613,985,2.451,986,2.613,987,3.825,988,2.613,989,4.01,990,2.613,991,2.451,992,2.613,993,3.811,994,2.613,995,2.451,996,3.222,997,2.613,998,2.613,999,3.222,1000,2.451,1001,2.201,1002,2.613,1003,2.1,1004,2.1,1005,1.518,1006,2.1,1007,2.451,1008,2.451,1009,2.613,1010,2.1,1011,2.613,1012,2.613,1013,2.201,1014,4.244,1015,4.979,1016,6.472,1017,4.524,1018,2.613,1019,4.259,1020,2.1,1021,3.588,1022,2.317,1023,2.451,1024,2.451,1025,2.451,1026,1.93,1027,2.201,1028,2.317,1029,2.451,1030,2.201,1031,2.1,1032,1.727,1033,2.451,1034,5.193,1035,2.451]],["title/injectables/ClientService.html",[30,0.945,526,2.928]],["body/injectables/ClientService.html",[0,0.716,3,0.086,4,0.069,5,0.069,12,0.185,13,0.678,15,2.187,16,0.983,18,0.662,19,0.334,20,0.009,29,0.484,30,1.179,31,5.38,33,0.685,34,2.81,35,1.348,38,3.285,54,2.231,56,3.045,61,2.634,64,2.141,65,2.231,66,2.33,68,2.231,79,0.122,80,0.052,81,1.853,82,3.867,86,2.851,93,1.495,94,1.28,97,2.249,106,2.725,109,1.18,110,1.327,113,4.401,115,5.224,132,2.35,135,1.812,136,1.027,149,1.737,160,2.945,161,2.324,191,1.368,202,1.684,216,2.72,219,1.543,259,0.006,263,3.35,282,3.867,285,2.141,294,2.141,302,0.006,306,3.313,309,1.002,312,0.991,336,3.867,338,1.248,346,1.327,352,3.867,420,2.33,430,1.647,462,3.473,484,2.57,518,1.85,526,3.655,588,3.124,635,3.655,688,1.5,697,2.231,800,2.231,816,2.72,832,3.425,833,3.473,834,5.629,835,2.899,836,2.57,837,5.169,838,7.35,839,5.169,840,3.425,841,3.425,842,3.425,843,3.425,844,3.425,845,3.425,846,3.124,847,3.425,848,3.425,849,3.425,850,6.172,851,5.667,852,3.425,853,6.172,854,3.425,855,3.425,856,3.124,857,3.655,858,4.87,859,4.87,860,4.87,861,3.425,862,4.87,863,4.87,864,4.87,865,3.313,866,4.87,867,4.87,868,4.87,869,4.87,870,4.87,871,2.899,872,2.899,873,2.899,874,3.425,875,3.124,876,3.425,877,3.425,878,4.87,879,3.425,880,1.737,881,4.87,882,3.124,883,3.425,884,3.425,1036,5.52,1037,5.52,1038,5.52,1039,5.52,1040,3.882,1041,3.882,1042,3.882,1043,3.882,1044,3.045,1045,3.882,1046,3.882]],["title/interfaces/Config.html",[0,0.574,60,1.353]],["body/interfaces/Config.html",[0,0.812,2,0.919,3,0.068,4,0.055,5,0.055,11,1.776,12,0.147,13,0.572,16,1.142,18,0.479,19,0.393,20,0.009,24,2.3,27,1.378,29,0.354,38,2.833,60,2.163,79,0.174,87,2.151,91,2.472,95,2.472,97,0.99,98,1.069,107,2.75,109,1,127,3.864,129,1.191,136,0.815,137,2.223,141,2.297,142,1.938,159,1.47,161,2.831,163,1.521,175,4.108,190,1.175,193,2.537,195,2.196,206,2.636,211,1.47,219,2.232,225,3.229,229,1.699,238,1.536,250,2.392,258,3.32,259,0.005,302,0.005,309,1.617,314,1.705,316,1.337,338,2.577,346,1.12,430,2.355,442,1.852,445,3.505,470,2.733,474,2.223,627,2.528,894,1.938,896,1.938,898,1.938,899,1.938,903,3.084,906,2.677,909,3.534,911,1.042,912,3.759,918,2.52,930,3.084,937,1.849,958,1.77,959,2.158,960,5.528,961,5.282,962,1.938,963,3.479,964,4.195,965,2.301,966,2.677,967,2.301,968,3.895,969,4.711,970,3.479,971,3.084,972,2.301,973,4.964,974,3.084,975,2.931,976,2.57,977,3.479,978,3.479,979,2.301,980,3.479,981,4.387,982,3.935,983,3.479,984,3.479,985,3.264,986,2.301,987,4.195,988,3.479,989,4.452,990,4.195,991,3.264,992,3.479,993,4.621,994,3.479,995,3.264,996,3.534,997,3.479,998,3.479,999,4.23,1000,3.264,1001,3.939,1002,4.195,1003,3.372,1004,3.372,1005,2.437,1006,3.372,1007,3.264,1008,3.264,1009,2.301,1010,1.849,1011,2.301,1012,2.301,1013,1.938,1014,3.935,1015,4.676,1016,6.346,1017,4.195,1018,2.301,1019,4.036,1020,1.849,1021,3.264,1022,2.04,1023,2.158,1024,2.158,1025,2.158,1026,1.699,1027,1.938,1028,2.04,1029,2.158,1030,1.938,1031,1.849,1032,3.32,1033,2.158,1034,4.955,1035,2.158]],["title/interfaces/Config-1.html",[0,0.479,60,1.128,885,1.704]],["body/interfaces/Config-1.html",[0,0.672,2,1.061,3,0.078,4,0.063,5,0.063,11,2.001,12,0.17,13,0.636,16,1.214,19,0.37,20,0.009,29,0.326,38,1.301,60,2.279,79,0.114,87,2.393,89,2.393,119,2.857,129,3.235,135,0.815,141,3.6,161,3.32,163,3.316,168,2.649,190,1.694,193,1.665,195,1.971,202,2.914,206,2.181,225,3.29,229,3.705,259,0.005,263,2.429,302,0.005,309,1.338,312,0.636,315,3.11,338,1.143,354,4.705,430,2.004,445,3.205,470,3.047,471,2.393,491,3.869,493,3.43,494,5.332,507,3.629,518,1.37,519,3.811,558,2.248,600,2.749,627,2.298,811,3.629,886,3.136,887,2.49,888,5.926,889,4.225,890,2.655,891,5.926,892,5.405,893,5.926,894,2.236,895,5.926,896,2.236,897,3.136,898,5.059,899,2.236,900,6.005,901,4.184,902,4.225,903,3.43,904,4.571,905,4.571,906,2.977,907,2.649,908,5.926,909,4.225,910,3.629,911,2.272,912,4.474,913,4.571,914,4.571,915,3.136,916,5.016,917,3.136,918,2.178,919,3.136,920,4.571,921,5.926,922,2.649,923,3.86,924,5.926,925,2.857,926,4.571,927,4.571,928,4.169,929,4.571,930,3.43,931,4.571,932,4.571,933,4.169,934,3.136,935,4.571,936,5.926,937,4.474,938,5.926,939,5.926,940,5.926,941,5.926,942,5.926,943,4.571,944,4.169,945,4.571,946,4.169,947,4.571,948,4.571,949,4.571,950,5.926,951,3.869,952,4.571,953,5.926]],["title/classes/CredentialIssuerMetadataDto.html",[80,0.059,1047,3.559]],["body/classes/CredentialIssuerMetadataDto.html",[3,0.11,4,0.088,5,0.088,7,1.041,12,0.238,13,0.805,18,0.67,19,0.392,20,0.009,26,3.352,79,0.11,80,0.067,105,4.592,119,3.616,160,3.273,171,2.648,259,0.007,302,0.007,304,1.732,312,1.052,323,3.372,332,3.352,338,2.755,355,4.666,598,2.996,621,4.467,739,4.041,810,3.65,812,5.805,907,3.352,911,2.217,1047,5.275,1048,6.072,1049,8.668,1050,4.403,1051,3.14,1052,3.14,1053,6.458,1054,6.458,1055,6.458,1056,5.89,1057,6.458,1058,6.458,1059,6.497,1060,6.458,1061,4.991,1062,5.783,1063,4.991,1064,3.616,1065,6.555,1066,4.34,1067,4.991,1068,7.32,1069,4.991,1070,4.991,1071,4.991,1072,5.783,1073,4.991,1074,4.895,1075,5.783,1076,4.991,1077,4.124,1078,4.991,1079,4.016,1080,4.403]],["title/controllers/CredentialsController.html",[342,1.576,1081,3.559]],["body/controllers/CredentialsController.html",[3,0.123,4,0.098,5,0.098,7,1.161,12,0.265,15,2.31,16,0.988,18,0.69,19,0.366,20,0.009,26,3.596,29,0.485,33,0.981,79,0.123,80,0.075,94,2.541,97,2.26,109,1.123,132,2.573,135,1.768,151,2.747,160,2.96,191,1.302,259,0.007,302,0.007,310,1.951,312,0.863,342,1.983,344,2.15,346,1.691,350,2.655,502,2.747,518,1.859,521,3.684,649,2.747,650,4.926,699,4.429,810,3.591,1081,5.658,1082,5.564,1083,5.564,1084,4.861,1085,5.362,1086,5.564,1087,7.031,1088,5.564,1089,6.048,1090,4.423,1091,5.564,1092,7.031,1093,5.564,1094,4.655,1095,5.564,1096,5.564,1097,5.564,1098,2.846,1099,5.564,1100,5.564,1101,5.564,1102,5.564]],["title/injectables/CredentialsService.html",[30,0.945,699,2.541]],["body/injectables/CredentialsService.html",[3,0.069,4,0.056,5,0.056,12,0.15,15,2.236,16,1.094,18,0.692,19,0.369,20,0.009,21,2.395,29,0.52,30,1.011,33,0.555,34,2.707,35,1.092,47,2.588,48,1.553,60,1.447,79,0.069,80,0.042,86,2.14,93,1.282,94,2.615,97,2.55,109,1.216,110,1.443,118,1.578,135,1.943,136,0.832,146,2.757,147,2.292,151,2.783,183,1.888,190,1.919,191,1.441,203,3.133,231,2.204,238,1.56,240,2.61,259,0.005,288,2.977,302,0.005,309,1.634,312,0.956,314,1.151,334,2.61,346,1.138,458,2.712,464,3.133,510,1.325,518,2.059,534,1.808,544,1.408,627,2.139,688,1.216,699,2.719,719,3.415,722,3.35,724,2.083,736,2.977,748,2.42,765,2.511,791,1.808,792,1.669,810,3.437,890,3.534,918,1.121,1056,3.808,1084,3.415,1085,4.19,1089,4.726,1090,3.981,1094,3.133,1103,3.146,1104,4.732,1105,5.689,1106,5.019,1107,5.689,1108,4.732,1109,4.732,1110,5.689,1111,3.146,1112,4.44,1113,5.689,1114,4.433,1115,3.146,1116,4.732,1117,4.732,1118,3.146,1119,3.534,1120,3.808,1121,3.146,1122,3.146,1123,3.146,1124,7.397,1125,3.146,1126,5.461,1127,3.146,1128,4.19,1129,3.146,1130,3.146,1131,4.732,1132,3.146,1133,4.732,1134,3.146,1135,3.146,1136,4.433,1137,3.146,1138,4.732,1139,3.808,1140,4.732,1141,2.42,1142,2.349,1143,2.349,1144,4.175,1145,2.349,1146,4.19,1147,1.888,1148,2.349,1149,2.776,1150,1.979,1151,2.532,1152,2.349,1153,2.776,1154,2.204,1155,1.669,1156,3.146,1157,2.083,1158,1.735,1159,3.146,1160,3.146,1161,5.689,1162,3.146,1163,3.146,1164,3.146,1165,3.146,1166,3.146,1167,3.146,1168,3.146,1169,4.578,1170,3.808,1171,3.146,1172,3.146,1173,4.175,1174,3.146,1175,3.146,1176,3.146,1177,3.146,1178,2.776,1179,3.146,1180,3.146,1181,2.776,1182,3.146,1183,3.146,1184,3.146,1185,2.532,1186,2.349,1187,3.146,1188,2.776,1189,3.146,1190,3.146,1191,2.204,1192,3.146,1193,1.888,1194,4.732,1195,3.146,1196,3.146,1197,4.732]],["title/interfaces/CryptoImplementation.html",[0,0.574,1198,3.303]],["body/interfaces/CryptoImplementation.html",[0,0.993,2,1.638,3,0.121,4,0.097,5,0.097,7,1.145,12,0.262,13,0.856,16,0.979,18,0.651,19,0.385,20,0.009,22,1.984,79,0.121,94,2.298,118,1.934,134,5.334,135,1.757,190,2.204,191,1.418,225,2.77,235,3.633,259,0.007,276,3.452,279,5.205,302,0.007,312,0.94,346,1.676,518,1.843,791,4.401,792,4.275,951,6.017,1198,5.205,1199,7.109,1200,4.842,1201,5.609,1202,6.969,1203,4.883,1204,7.109,1205,6.969,1206,6.969,1207,5.488,1208,6.149,1209,6.163,1210,6.969,1211,7.71,1212,5.488,1213,6.484,1214,6.969,1215,6.969,1216,5.488,1217,6.163,1218,6.969,1219,4.416,1220,4.416]],["title/modules/CryptoModule.html",[357,1.387,369,2.347]],["body/modules/CryptoModule.html",[3,0.138,4,0.11,5,0.11,20,0.009,29,0.511,33,1.099,47,3.738,79,0.138,80,0.084,259,0.008,302,0.008,357,2.542,359,2.704,360,2.974,361,3.187,362,3.187,363,2.974,364,4.003,365,4.003,369,4.81,377,3.857,378,3.187,379,2.974,382,2.974,1221,5.499,1222,5.499,1223,5.499,1224,6.405,1225,6.232,1226,6.232,1227,6.232]],["title/injectables/CryptoService.html",[30,0.945,47,1.809]],["body/injectables/CryptoService.html",[3,0.05,4,0.04,5,0.065,9,3.932,10,4.227,11,1.245,12,0.108,13,0.451,14,3.716,15,0.615,16,1.039,18,0.669,19,0.372,20,0.009,21,2.758,22,1.734,29,0.482,30,0.784,32,3.737,33,0.401,34,2.278,35,0.789,38,0.831,47,1.501,54,1.306,55,2.772,56,2.025,57,1.592,61,1.084,62,1.592,63,1.504,64,1.253,65,1.306,66,1.364,67,1.504,68,1.306,79,0.05,80,0.03,81,1.084,86,1.793,93,0.994,104,1.306,109,1.181,110,1.612,113,2.905,118,2.006,131,2.741,135,1.696,136,1.732,137,1.752,146,2.463,147,2.325,151,2.686,153,2.43,159,1.084,161,1.944,183,2.203,188,2.109,190,1.57,191,1.369,192,1.697,204,1.364,225,0.903,232,1.697,233,1.697,234,1.697,238,1.748,241,3.058,246,2.618,247,0.957,250,1.242,256,1.306,259,0.004,263,0.903,276,2.309,289,2.873,294,2.025,297,2.203,298,2.203,302,0.004,309,1.503,310,1.018,312,0.954,314,1.94,332,1.877,346,0.883,352,1.592,379,2.777,386,1.828,420,3.494,430,0.678,436,1.697,442,1.523,470,1.785,484,4.662,496,1.592,510,1.545,518,1.993,534,1.306,552,2.905,558,3.055,639,1.504,640,1.253,649,2.873,658,5.259,688,0.878,697,1.306,710,1.828,722,3.65,724,1.504,725,2.572,739,2.066,748,1.162,764,2.109,772,2.572,791,2.109,792,1.206,793,1.828,796,2.954,834,4.267,835,1.697,839,3.716,871,1.697,872,1.697,873,3.449,880,1.017,885,1.049,918,1.646,969,2.572,1028,1.504,1044,2.547,1139,1.828,1193,4.093,1228,2.005,1229,4.788,1230,4.618,1231,3.671,1232,3.238,1233,3.671,1234,3.671,1235,2.741,1236,3.853,1237,3.671,1238,5.302,1239,3.671,1240,2.272,1241,2.272,1242,3.671,1243,4.678,1244,2.272,1245,2.272,1246,3.238,1247,3.238,1248,2.272,1249,3.671,1250,2.272,1251,4.618,1252,3.671,1253,2.272,1254,2.272,1255,3.238,1256,2.272,1257,2.272,1258,2.272,1259,3.671,1260,2.272,1261,2.272,1262,2.272,1263,4.618,1264,3.671,1265,2.272,1266,2.272,1267,2.272,1268,2.005,1269,2.272,1270,2.272,1271,4.618,1272,4.618,1273,3.671,1274,2.741,1275,1.697,1276,1.122,1277,2.272,1278,1.697,1279,1.828,1280,2.272,1281,2.272,1282,2.005,1283,2.272,1284,2.272,1285,3.671,1286,5.302,1287,2.925,1288,2.272,1289,2.272,1290,2.272,1291,3.671,1292,1.828,1293,5.82,1294,2.272,1295,5.302,1296,2.272,1297,5.82,1298,2.272,1299,5.302,1300,2.272,1301,3.671,1302,6.225,1303,4.618,1304,2.272,1305,2.272,1306,2.272,1307,2.272,1308,2.272,1309,3.671,1310,4.892,1311,2.272,1312,2.272,1313,2.272,1314,2.272,1315,2.272,1316,2.272,1317,3.671,1318,2.272,1319,3.671,1320,3.671,1321,3.058,1322,2.272,1323,5.82,1324,3.671,1325,2.954,1326,3.671,1327,3.671,1328,1.828,1329,2.272,1330,2.272,1331,3.671,1332,3.671,1333,3.671,1334,3.671,1335,4.618,1336,3.671,1337,3.671,1338,2.005,1339,2.272,1340,1.697,1341,2.272,1342,2.272,1343,2.272,1344,2.005,1345,1.828,1346,2.272,1347,2.272,1348,2.272,1349,2.272,1350,2.272,1351,2.005,1352,2.005,1353,2.272,1354,2.272,1355,1.828,1356,2.272,1357,2.005,1358,3.671,1359,2.272,1360,2.272,1361,2.272,1362,3.238,1363,4.074,1364,2.272,1365,2.005,1366,2.272,1367,2.272,1368,2.272,1369,3.671,1370,2.272,1371,2.43,1372,3.671,1373,3.671,1374,3.671,1375,3.671,1376,4.678,1377,2.272,1378,2.272,1379,2.272,1380,2.272,1381,2.272,1382,2.005,1383,2.272,1384,2.272,1385,3.238,1386,2.272,1387,2.272,1388,3.671,1389,3.671,1390,3.671,1391,5.302,1392,2.272,1393,3.671,1394,4.618,1395,2.272,1396,3.671,1397,3.671,1398,3.671,1399,3.671,1400,2.272,1401,2.272,1402,2.272,1403,2.272,1404,2.272,1405,1.592,1406,2.025,1407,2.272,1408,2.272]],["title/injectables/CryptoService-1.html",[30,0.788,47,1.509,885,1.704]],["body/injectables/CryptoService-1.html",[3,0.125,4,0.1,5,0.1,12,0.27,16,0.998,19,0.321,20,0.009,29,0.528,30,1.517,33,0.997,34,2.98,35,1.962,47,2.904,79,0.157,80,0.076,93,1.531,100,5.303,109,1.34,118,1.568,135,1.781,191,1.314,202,3.081,238,1.864,259,0.007,276,4.884,302,0.007,309,1.46,312,0.953,346,1.708,430,2.119,518,1.878,688,2.184,748,4.165,792,4.321,974,3.742,1098,2.891,1141,2.891,1142,4.221,1143,4.221,1193,4.262,1198,5.798,1409,4.987,1410,8.144,1411,7.764,1412,5.652,1413,5.652,1414,7.101,1415,5.652,1416,6.85,1417,6.554,1418,5.652,1419,5.652,1420,7.764,1421,6.752,1422,3.393,1423,4.08,1424,5.652]],["title/modules/DatabaseModule.html",[357,1.387,370,3.099]],["body/modules/DatabaseModule.html",[3,0.122,4,0.098,5,0.098,19,0.317,20,0.009,29,0.525,33,0.978,34,2.96,35,1.925,61,3.349,79,0.155,80,0.074,109,1.121,110,1.46,136,1.856,138,5.524,219,2.204,231,3.886,259,0.007,302,0.007,357,2.2,359,2.407,370,4.916,382,3.349,383,5.241,384,4.212,436,4.143,437,4.464,481,4.894,1155,2.943,1425,5.547,1426,3.673,1427,7.017,1428,5.547,1429,7.017,1430,5.547,1431,5.547,1432,5.547,1433,8.089,1434,8.523,1435,7.361,1436,6.715,1437,5.547,1438,5.547,1439,5.547,1440,5.547,1441,5.547,1442,5.547,1443,7.017,1444,4.894,1445,7.697,1446,5.547,1447,5.547,1448,7.017,1449,5.547,1450,5.547,1451,5.547,1452,5.547,1453,5.547,1454,4.894,1455,5.547,1456,5.647,1457,5.547,1458,5.547]],["title/classes/EC_Public.html",[80,0.059,1278,3.303]],["body/classes/EC_Public.html",[3,0.114,4,0.092,5,0.092,7,1.081,12,0.247,13,0.824,18,0.641,19,0.37,20,0.009,21,3.707,22,2.208,24,3.679,29,0.326,79,0.148,80,0.106,81,3.204,106,2.556,107,2.746,195,1.369,202,2.913,259,0.007,276,4.224,302,0.007,304,1.797,312,0.968,592,3.108,600,2.748,606,4.569,662,5.015,722,4.033,748,3.434,907,3.811,1005,3.233,1030,4.224,1048,5.723,1051,4.688,1276,2.556,1278,5.015,1279,6.574,1287,4.699,1325,7.215,1459,5.22,1460,6.956,1461,6.956,1462,5.404,1463,6.574,1464,5.997,1465,6.574,1466,6.101,1467,7.207,1468,5.178,1469,5.924,1470,5.015,1471,5.178,1472,6.956,1473,5.178,1474,3.108,1475,3.867]],["title/injectables/EncryptionService.html",[30,0.945,1224,3.099]],["body/injectables/EncryptionService.html",[3,0.099,4,0.08,5,0.08,12,0.215,13,0.752,16,1.048,18,0.673,19,0.384,20,0.009,21,1.898,22,1.11,29,0.518,30,1.308,33,0.795,34,2.945,35,1.565,54,2.59,55,2.706,56,3.836,61,2.922,63,2.984,64,2.486,65,2.59,66,2.706,67,2.984,68,2.59,79,0.099,80,0.06,86,2.973,93,1.221,109,0.978,110,1.161,135,1.712,136,1.839,146,2.786,147,2.399,151,2.181,153,4.054,190,1.544,191,1.381,194,3.158,195,1.192,219,1.791,259,0.006,263,2.434,270,1.898,285,2.486,294,3.378,295,3.158,297,3.676,298,3.676,302,0.006,310,1.251,312,1.043,346,1.473,420,2.706,484,4.054,518,2.063,688,1.742,697,2.59,722,3.852,833,2.836,836,2.984,1032,2.225,1098,2.305,1181,3.977,1204,3.977,1224,4.29,1235,4.573,1255,5.403,1274,4.573,1276,2.225,1287,2.486,1464,3.627,1476,4.507,1477,6.955,1478,6.955,1479,6.955,1480,6.955,1481,6.124,1482,7.461,1483,4.29,1484,6.124,1485,6.124,1486,4.507,1487,4.507,1488,4.29,1489,4.507,1490,4.507,1491,6.136,1492,4.507,1493,4.507,1494,4.507,1495,3.627,1496,4.507,1497,3.627,1498,6.124,1499,6.124,1500,6.124,1501,4.507,1502,4.507,1503,5.403,1504,3.977,1505,3.977,1506,6.124,1507,4.507,1508,4.507,1509,4.507,1510,3.977,1511,4.507,1512,6.124,1513,6.124,1514,4.507,1515,4.507,1516,4.507]],["title/interfaces/Fields.html",[0,0.574,258,2.183]],["body/interfaces/Fields.html",[0,0.778,2,1.304,3,0.096,4,0.077,5,0.077,12,0.286,13,0.736,16,1.035,18,0.564,19,0.361,20,0.009,22,1.901,60,2.438,79,0.163,88,2.157,109,0.958,110,1.699,118,1.212,191,1.11,193,2.368,206,3.101,219,2.927,258,3.81,259,0.006,302,0.006,309,2.108,442,1.441,470,2.846,502,2.157,627,1.643,889,2.749,911,1.478,918,2.841,1013,4.856,1517,3.517,1518,6.498,1519,6.81,1520,6.038,1521,6.416,1522,5.927,1523,3.061,1524,6.038,1525,3.061,1526,5.508,1527,3.855,1528,3.855,1529,3.855,1530,3.855,1531,3.855,1532,3.855,1533,3.855,1534,5.508,1535,3.855,1536,6.038,1537,3.855,1538,3.855,1539,3.855,1540,3.855,1541,3.855,1542,5.954,1543,3.855,1544,3.517,1545,3.855,1546,6.038,1547,3.855,1548,3.855,1549,3.855,1550,6.038,1551,3.855,1552,5.29,1553,3.061,1554,3.855,1555,5.29,1556,5.29,1557,5.29,1558,3.855,1559,3.855,1560,3.855,1561,6.038,1562,3.855,1563,3.855,1564,3.855,1565,5.29,1566,3.855,1567,3.855,1568,3.061,1569,3.855]],["title/injectables/FileSystemKeyService.html",[30,0.945,1570,3.559]],["body/injectables/FileSystemKeyService.html",[3,0.069,4,0.055,5,0.1,7,0.648,12,0.148,13,0.576,15,1.703,16,1.09,18,0.677,19,0.385,20,0.009,21,2.648,22,1.947,23,4.729,29,0.498,30,1.002,32,3.775,33,0.548,34,2.597,35,1.079,47,3.012,48,1.534,54,1.786,55,1.865,56,3.115,57,2.177,61,2.238,62,2.177,70,2.95,71,2.815,79,0.069,80,0.042,81,1.483,86,2.859,93,1.27,109,1.211,110,1.346,118,1.301,132,2.47,135,1.867,136,1.24,146,2.752,147,2.647,149,2.098,151,2.65,190,2.097,191,1.437,211,1.483,235,4.469,238,1.025,241,2.058,259,0.005,285,1.714,288,3.552,289,1.534,297,2.815,298,2.815,302,0.005,309,1.211,312,1.011,314,2.066,346,1.128,420,1.865,430,1.399,484,3.105,518,2.052,558,2.034,627,1.168,688,1.201,697,1.786,722,3.831,739,2.098,765,1.649,791,3.879,835,2.321,871,2.321,872,2.321,873,2.321,974,2.058,1026,1.714,1090,1.955,1141,1.589,1198,4.217,1219,5.432,1229,3.105,1236,4.164,1274,4.217,1276,1.534,1287,4.362,1292,5.061,1321,3.105,1357,4.137,1385,2.742,1416,4.982,1483,3.285,1491,5.955,1495,4.544,1505,2.742,1570,3.773,1571,8.316,1572,2.742,1573,5.647,1574,5.647,1575,4.689,1576,3.773,1577,5.928,1578,4.689,1579,4.689,1580,3.108,1581,3.773,1582,3.773,1583,3.108,1584,5.432,1585,3.108,1586,3.108,1587,3.108,1588,4.689,1589,3.108,1590,3.108,1591,3.773,1592,3.108,1593,3.773,1594,3.957,1595,5.549,1596,3.108,1597,3.108,1598,3.108,1599,3.108,1600,4.689,1601,4.689,1602,4.137,1603,3.773,1604,2.321,1605,2.501,1606,1.955,1607,3.108,1608,3.108,1609,3.108,1610,3.108,1611,5.647,1612,3.108,1613,5.647,1614,5.647,1615,3.108,1616,4.689,1617,4.689,1618,2.742,1619,4.689,1620,3.108,1621,4.689,1622,6.75,1623,3.108,1624,3.108,1625,3.108,1626,3.108,1627,3.108,1628,4.689,1629,1.955,1630,3.108,1631,4.689,1632,2.742,1633,2.742,1634,3.108,1635,3.108,1636,3.108,1637,3.108]],["title/interfaces/GenerateTokenOptions.html",[0,0.574,1638,3.559]],["body/interfaces/GenerateTokenOptions.html",[0,0.607,2,1.396,3,0.103,4,0.083,5,0.083,12,0.223,13,0.771,16,1.143,18,0.668,19,0.321,20,0.009,27,2.093,29,0.477,30,1.342,33,0.825,34,2.594,35,1.624,79,0.139,80,0.063,89,2.961,107,1.913,109,1.262,110,1.623,118,2.257,132,1.712,146,2.019,147,2.019,149,3.39,186,3.277,190,1.583,213,2.58,238,2.337,250,2.397,256,4.353,259,0.006,263,2.495,302,0.006,442,1.542,445,2.232,510,2.984,515,4.693,516,6.096,524,3.097,531,4.359,532,3.494,552,2.943,558,3.287,562,6.359,566,5.016,739,3.171,749,3.277,764,3.608,792,2.482,833,3.95,1098,2.392,1203,3.277,1236,4.157,1275,3.494,1276,2.309,1321,3.097,1371,4.157,1638,5.704,1639,4.127,1640,4.127,1641,3.765,1642,4.127,1643,5.54,1644,5.053,1645,4.689,1646,5.54,1647,5.54,1648,4.127,1649,4.127,1650,6.253,1651,5.54,1652,4.127,1653,5.053,1654,4.127,1655,4.127,1656,4.127,1657,4.127,1658,4.127,1659,4.127,1660,4.127,1661,4.127,1662,3.494,1663,3.494,1664,4.127,1665,4.399,1666,3.765,1667,4.127,1668,4.127,1669,3.494,1670,4.127,1671,3.765,1672,4.127,1673,4.127,1674,4.127,1675,4.127,1676,3.765]],["title/controllers/HealthController.html",[342,1.576,1677,3.559]],["body/controllers/HealthController.html",[3,0.134,4,0.107,5,0.107,7,1.263,12,0.289,20,0.009,29,0.467,33,1.067,70,4.661,79,0.134,80,0.081,86,2.506,93,1.64,109,0.967,131,5.533,132,2.711,135,1.7,213,4.912,259,0.007,302,0.007,310,1.679,312,0.743,342,2.157,344,2.339,346,1.782,502,2.988,612,5.962,621,4.257,1456,5.962,1677,6.714,1678,6.053,1679,8.709,1680,6.537,1681,6.537,1682,8.343,1683,6.537,1684,7.409,1685,6.053,1686,6.053,1687,7.409,1688,7.409,1689,4.871,1690,6.053,1691,5.341,1692,6.053,1693,6.053]],["title/modules/HealthModule.html",[357,1.387,371,3.099]],["body/modules/HealthModule.html",[3,0.15,4,0.12,5,0.12,20,0.009,29,0.53,33,1.199,79,0.15,80,0.091,259,0.008,302,0.008,344,3.069,357,2.49,359,2.95,371,5.565,382,3.245,1677,6.771,1689,5.472,1694,6.8,1695,6.8,1696,7.943]],["title/classes/Interceptors.html",[80,0.059,1020,2.655]],["body/classes/Interceptors.html",[0,0.465,3,0.049,4,0.039,5,0.039,11,1.347,12,0.249,13,0.44,15,1.753,16,0.806,18,0.572,19,0.365,20,0.01,22,0.883,27,0.988,29,0.361,38,0.808,60,2.063,79,0.158,80,0.03,88,3.195,89,1.858,93,1.227,107,2.647,109,1.332,110,1.668,118,1.447,127,2.996,129,0.853,135,1.409,136,1.625,137,2.488,141,0.903,143,1.269,146,0.71,147,0.71,171,4.237,190,1.142,191,1.478,193,0.71,195,1.625,204,2.153,206,2.414,211,1.053,219,2.572,225,0.877,246,2.574,250,1.532,259,0.004,263,2.572,270,1.907,302,0.004,304,0.766,309,2.204,312,0.828,314,2.369,323,0.958,338,2.591,341,1.903,346,0.862,430,0.659,442,1.719,445,3.218,470,2.694,474,2.488,489,1.649,495,1.649,518,1.516,801,1.462,815,1.462,885,2.648,887,1.547,901,3.579,902,2.256,906,2.602,907,2.316,911,2.358,918,2.043,922,2.316,923,4.213,925,1.978,958,1.269,962,1.389,966,2.061,975,1.389,993,1.389,996,2.256,999,2.256,1001,2.256,1003,1.325,1004,1.325,1005,1.556,1006,1.325,1010,1.325,1019,3.442,1020,3.442,1032,2.236,1044,1.978,1405,3.173,1406,1.978,1422,1.325,1423,2.602,1523,1.547,1553,4.535,1568,3.173,1697,1.649,1698,4.196,1699,3.894,1700,4.615,1701,3.586,1702,2.153,1703,3.586,1704,6.155,1705,2.208,1706,2.886,1707,2.208,1708,2.886,1709,2.208,1710,2.886,1711,2.208,1712,2.886,1713,4.944,1714,2.208,1715,2.886,1716,2.208,1717,2.886,1718,2.678,1719,2.849,1720,2.849,1721,2.718,1722,1.777,1723,1.462,1724,2.512,1725,1.777,1726,1.547,1727,2.061,1728,1.325,1729,1.325,1730,2.153,1731,2.718,1732,2.718,1733,2.061,1734,2.153,1735,2.886,1736,4.615,1737,3.644,1738,1.777,1739,3.894,1740,4.243,1741,1.777,1742,1.777,1743,1.777,1744,1.777,1745,1.777,1746,2.886,1747,2.886,1748,1.777,1749,3.644,1750,1.389,1751,2.886,1752,1.777,1753,1.777,1754,2.886,1755,3.442,1756,4.196,1757,4.615,1758,1.777,1759,2.886,1760,1.777,1761,2.886,1762,1.777,1763,2.886,1764,1.777,1765,1.777,1766,1.777,1767,1.777,1768,2.886,1769,1.777,1770,1.649,1771,1.777,1772,3.644,1773,1.777,1774,1.777,1775,1.777,1776,1.777,1777,1.777,1778,1.547,1779,1.777,1780,1.777,1781,1.777,1782,1.777,1783,1.777,1784,1.777,1785,1.777,1786,1.777,1787,3.644,1788,1.777,1789,1.777,1790,1.777,1791,1.777,1792,1.777,1793,2.886,1794,1.777,1795,1.777,1796,2.886,1797,1.777,1798,1.777,1799,2.886,1800,1.777,1801,1.777,1802,1.777,1803,1.777,1804,1.777,1805,2.678,1806,1.777,1807,1.777,1808,1.777,1809,1.777,1810,1.777,1811,1.777,1812,1.777,1813,1.777,1814,1.777,1815,2.886,1816,2.886,1817,1.269,1818,1.777,1819,1.777,1820,1.777,1821,1.777,1822,2.886,1823,1.777,1824,1.777,1825,1.777,1826,1.777,1827,2.374,1828,1.777,1829,1.649,1830,1.649,1831,2.374,1832,1.649,1833,1.649,1834,4.196,1835,1.777,1836,1.777,1837,3.644,1838,4.615,1839,1.777,1840,2.886,1841,1.649,1842,1.777,1843,1.777,1844,1.777,1845,2.886,1846,2.886,1847,1.777]],["title/entities/IssuanceConfig.html",[1136,3.099,1848,2.183]],["body/entities/IssuanceConfig.html",[3,0.106,4,0.085,5,0.085,11,1.5,12,0.229,13,0.784,15,1.944,16,1.151,18,0.586,19,0.393,20,0.009,29,0.516,60,2.195,79,0.106,80,0.086,98,1.665,136,2.167,151,2.25,168,3.913,188,3.669,202,2.081,259,0.006,302,0.006,310,2.386,311,2.857,312,1.056,320,4.438,321,4.397,322,2.081,350,2.289,430,2.142,534,2.757,599,4.228,857,5.067,918,2.727,1084,4.309,1085,5.426,1136,4.474,1149,6.333,1150,3.018,1152,5.361,1153,4.232,1158,2.646,1170,5.776,1173,6.333,1848,3.152,1849,2.88,1850,8.687,1851,4.232,1852,5.029,1853,7.178,1854,6.333,1855,4.797,1856,4.797,1857,3.583,1858,5.139,1859,4.797,1860,5.634,1861,4.797,1862,5.361,1863,4.232,1864,4.797,1865,5.361,1866,6.423,1867,6.594,1868,7.178,1869,4.797,1870,4.797,1871,4.232,1872,4.797,1873,4.797,1874,4.474,1875,4.232,1876,4.797,1877,5.634]],["title/controllers/IssuerManagementController.html",[342,1.576,1878,3.559]],["body/controllers/IssuerManagementController.html",[3,0.082,4,0.066,5,0.066,7,0.774,12,0.177,15,2.049,16,0.963,18,0.524,19,0.382,20,0.009,24,1.831,29,0.526,33,0.654,51,2.55,60,2.095,79,0.082,80,0.05,86,1.807,89,2.441,93,1.005,94,2.394,97,2.565,98,1.288,106,1.831,107,1.517,109,1,110,1.013,132,1.955,135,1.864,146,2.013,147,1.718,160,2.25,186,2.599,191,1.268,193,2.612,195,2.149,200,3.99,203,3.537,204,3.207,247,1.562,259,0.005,270,3.057,289,2.638,302,0.005,309,1.38,310,1.901,312,0.841,316,1.609,332,2.732,339,2.227,342,1.322,344,1.433,346,1.285,350,1.77,355,2.227,471,3.933,474,2.988,502,1.831,507,3.743,518,1.812,519,3.202,521,2.456,522,4.3,523,3.99,531,4.697,536,2.77,540,3.99,544,2.39,570,2.334,621,3.07,637,3.598,640,2.046,649,2.638,655,2.985,674,3.361,699,3.598,728,2.77,739,1.66,810,3.359,811,2.599,816,2.599,820,3.207,846,2.985,880,2.39,889,2.334,911,1.255,1005,2.717,1084,3.207,1119,3.99,1136,4.8,1157,2.456,1321,2.456,1778,2.599,1827,2.456,1878,4.3,1879,7.261,1880,6.407,1881,3.709,1882,3.759,1883,4.714,1884,5.525,1885,6.262,1886,3.273,1887,3.709,1888,3.273,1889,5.343,1890,3.709,1891,3.273,1892,5.282,1893,3.273,1894,4.714,1895,3.939,1896,3.273,1897,3.709,1898,3.709,1899,3.709,1900,5.343,1901,3.709,1902,3.709,1903,4.714,1904,2.985,1905,3.273,1906,2.985,1907,2.985,1908,2.77,1909,3.709,1910,3.939,1911,2.985,1912,3.709,1913,2.456,1914,2.985,1915,3.939,1916,3.709,1917,2.985,1918,2.985,1919,3.709,1920,3.273,1921,3.273,1922,4.714,1923,6.045,1924,3.273,1925,3.273,1926,5.039,1927,4.714,1928,3.99,1929,3.537,1930,3.273,1931,3.709,1932,3.709,1933,3.709,1934,3.273,1935,3.709,1936,3.709,1937,4.677,1938,3.273,1939,2.985,1940,3.273,1941,3.273,1942,3.273,1943,3.273,1944,3.273,1945,3.273,1946,3.709,1947,3.709,1948,3.273,1949,3.709]],["title/interfaces/IssuerMetadata.html",[0,0.574,1950,3.099]],["body/interfaces/IssuerMetadata.html",[0,1.042,2,1.822,3,0.135,4,0.108,5,0.108,7,1.274,12,0.291,13,0.914,18,0.615,19,0.379,20,0.009,21,3.136,22,1.834,26,3.809,29,0.384,79,0.135,106,3.677,259,0.007,302,0.007,338,2.394,598,4.47,600,3.952,603,5.562,722,3.677,739,4.043,1005,3.231,1050,5.386,1052,4.685,1064,3.367,1072,6.571,1276,3.014,1287,4.615,1459,5.218,1474,5.304,1950,5.218,1951,6.105]],["title/modules/IssuerModule.html",[357,1.387,372,3.099]],["body/modules/IssuerModule.html",[3,0.108,4,0.087,5,0.087,20,0.009,29,0.569,33,0.862,79,0.143,80,0.066,110,0.927,259,0.006,302,0.006,344,2.499,357,2.272,359,2.121,360,2.333,361,2.5,362,2.5,363,2.333,364,3.577,365,3.577,369,4.371,372,6.433,375,4.945,377,3.307,378,2.5,379,2.333,382,3.086,384,3.881,385,3.076,389,4.313,404,3.651,425,3.934,544,2.187,608,5.831,641,5.309,699,4.734,728,3.651,739,2.187,1081,5.831,1136,3.425,1147,2.935,1155,2.594,1157,3.237,1426,3.237,1878,5.831,1880,4.313,1910,5.564,1952,4.313,1953,4.313,1954,4.313,1955,4.313,1956,5.183,1957,5.455,1958,5.183,1959,5.183,1960,4.889,1961,5.831,1962,4.313,1963,4.889,1964,4.889,1965,4.889,1966,4.313,1967,4.889,1968,4.889,1969,4.889,1970,4.889,1971,4.281,1972,3.651,1973,3.651,1974,4.313,1975,4.889]],["title/classes/JwksResponseDto.html",[80,0.059,1475,3.303]],["body/classes/JwksResponseDto.html",[3,0.123,4,0.099,5,0.099,7,1.165,12,0.266,13,0.865,18,0.591,19,0.319,20,0.009,21,3.692,22,2.159,24,3.811,29,0.352,79,0.155,80,0.103,81,2.664,106,3.478,107,2.283,195,1.863,202,2.422,259,0.007,276,3.512,302,0.007,304,1.937,312,0.685,592,3.351,600,3.738,662,4.169,722,4.002,748,2.855,907,4.365,1005,3.349,1030,3.512,1048,4.935,1051,4.856,1276,2.756,1278,4.169,1279,5.669,1287,4.881,1325,7.173,1459,5.408,1460,6.215,1461,6.215,1462,4.492,1463,6.215,1464,4.492,1465,4.925,1466,5.261,1467,6.215,1469,4.925,1470,4.169,1472,6.215,1474,4.229,1475,5.261,1976,4.925]],["title/injectables/JwtAuthGuard.html",[30,0.945,570,2.782]],["body/injectables/JwtAuthGuard.html",[3,0.135,4,0.108,5,0.108,12,0.292,16,1.048,19,0.337,20,0.009,29,0.527,30,1.593,33,1.078,79,0.135,80,0.082,93,1.656,109,1.191,110,1.16,135,1.403,136,1.617,191,1.38,259,0.007,302,0.007,312,0.915,346,1.793,518,1.972,528,5.395,570,4.69,574,4.567,688,2.363,968,3.68,1098,3.127,1977,6.115,1978,7.455,1979,7.455,1980,5.395,1981,7.703,1982,6.115,1983,7.455,1984,6.738,1985,6.115,1986,4.049,1987,4.921,1988,6.115,1989,7.455,1990,4.921,1991,7.455,1992,6.115,1993,5.395,1994,6.115,1995,6.115]],["title/injectables/JwtService.html",[30,0.945,524,2.928]],["body/injectables/JwtService.html",[0,0.552,3,0.094,4,0.075,5,0.075,12,0.203,16,1.023,18,0.642,19,0.33,20,0.009,27,2.634,29,0.459,30,1.258,33,0.75,34,2.894,35,1.477,79,0.13,80,0.057,89,3.082,93,1.153,107,1.74,109,1.221,110,1.591,118,2.194,132,2.154,135,1.671,146,2.542,147,1.893,149,3.538,186,4.124,190,1.837,191,1.348,213,3.247,238,2.225,250,2.283,256,2.445,259,0.006,263,2.682,302,0.006,309,1.099,312,0.939,346,1.416,430,1.27,442,1.403,445,3.221,510,3.219,515,4.822,516,6.364,518,1.926,524,3.898,531,4.558,532,3.178,552,2.677,558,3.317,562,4.738,566,2.818,688,1.645,697,2.445,739,3.02,749,4.124,764,3.383,792,2.258,833,3.704,1098,2.176,1203,2.981,1236,3.898,1275,3.178,1276,2.101,1321,3.898,1371,3.898,1638,5.861,1639,3.755,1640,3.755,1641,4.738,1642,5.955,1643,5.194,1644,4.738,1645,4.397,1646,5.194,1647,5.194,1648,3.755,1649,3.755,1650,5.955,1651,5.194,1652,3.755,1653,4.738,1654,3.755,1655,3.755,1656,3.755,1657,3.755,1658,3.755,1659,3.755,1660,3.755,1661,3.755,1662,4.397,1663,4.397,1664,5.194,1665,4.729,1666,3.425,1667,3.755,1668,3.755,1669,3.178,1670,5.194,1671,4.738,1672,5.194,1673,5.194,1674,3.755,1675,6.426,1676,3.425,1996,5.887,1997,5.887,1998,4.256,1999,4.256,2000,4.256,2001,4.256,2002,4.256,2003,4.256]],["title/injectables/JwtStrategy.html",[30,0.945,571,3.303]],["body/injectables/JwtStrategy.html",[3,0.137,4,0.081,5,0.081,12,0.219,16,1.057,19,0.34,20,0.009,22,1.529,29,0.51,30,1.327,33,0.811,34,3.244,35,1.597,60,2.149,79,0.101,80,0.062,84,5.271,86,2.738,89,1.639,93,1.246,109,1.293,110,1.427,118,1.276,135,1.424,136,1.642,137,2.195,149,2.778,159,2.195,163,2.271,191,1.393,211,2.963,247,1.937,250,2.377,259,0.006,302,0.006,312,0.924,346,1.493,396,5.672,442,1.517,471,2.124,510,3.308,515,3.046,518,1.99,531,4.15,532,3.435,558,3.049,566,4.111,571,4.637,574,3.435,584,4.058,627,1.729,635,4.111,688,1.778,697,2.643,739,3.622,912,2.761,968,3.065,1084,2.761,1098,2.352,1193,2.761,1203,4.923,1340,3.435,1474,3.727,1525,3.223,1641,3.702,1645,4.637,1653,3.702,1663,5.248,1676,3.702,1733,3.568,1817,2.643,1831,4.653,1990,3.702,2004,4.6,2005,6.208,2006,6.208,2007,6.208,2008,4.6,2009,6.208,2010,4.6,2011,6.208,2012,7.028,2013,6.208,2014,4.6,2015,6.208,2016,4.6,2017,4.6,2018,4.6,2019,4.6,2020,4.058,2021,6.208,2022,4.058,2023,4.6,2024,4.6,2025,4.6,2026,4.058,2027,4.6,2028,4.6,2029,4.6,2030,4.6,2031,4.6,2032,4.6,2033,4.6,2034,6.208,2035,4.6,2036,4.6,2037,6.208,2038,4.6,2039,4.6,2040,4.6,2041,4.6,2042,4.6,2043,4.6,2044,4.6,2045,4.6,2046,4.6,2047,3.702,2048,4.6,2049,4.6]],["title/entities/KeyEntity.html",[1848,2.183,2050,3.559]],["body/entities/KeyEntity.html",[3,0.145,4,0.116,5,0.116,12,0.312,13,0.954,18,0.595,19,0.352,20,0.009,29,0.413,79,0.145,80,0.088,136,2.055,151,2.597,259,0.008,302,0.008,310,2.156,312,0.954,857,5.145,1158,3.614,1211,6.856,1219,6.667,1848,3.836,1849,3.933,1862,5.803,1866,5.803,1874,4.59,2050,6.253,2051,6.551,2052,6.551,2053,6.551]],["title/modules/KeyModule.html",[357,1.387,373,3.099]],["body/modules/KeyModule.html",[3,0.117,4,0.094,5,0.094,15,1.438,20,0.009,29,0.557,33,0.936,34,3.083,35,1.843,47,3.446,48,2.621,60,1.624,79,0.151,80,0.071,109,1.204,110,1.294,118,1.893,135,1.218,138,4.992,259,0.007,302,0.007,312,0.652,346,1.277,357,2.364,359,2.303,364,2.621,365,2.621,369,3.621,373,5.283,382,2.533,383,5.096,384,4.096,385,3.34,396,4.78,398,4.684,436,3.965,437,4.272,976,2.928,1229,4.518,1426,3.515,1435,6.653,1436,5.491,1444,4.684,1570,5.491,1605,5.491,2050,4.272,2054,5.309,2055,7.54,2056,5.309,2057,7.54,2058,6.823,2059,5.309,2060,5.491,2061,7.434,2062,4.78,2063,5.768,2064,2.928,2065,5.309,2066,5.309,2067,6.823,2068,5.309,2069,5.309,2070,4.272,2071,5.309,2072,5.309,2073,4.684,2074,6.823,2075,5.309,2076,5.309,2077,5.309,2078,6.823]],["title/classes/KeyService.html",[80,0.059,1229,2.928]],["body/classes/KeyService.html",[0,0.816,3,0.103,4,0.083,5,0.083,7,0.979,12,0.224,15,1.704,16,1.169,18,0.691,19,0.391,20,0.009,21,2.649,22,2.082,23,5.313,29,0.396,79,0.103,80,0.063,94,1.546,132,2.775,135,1.964,141,2.572,151,2.811,190,2.242,191,1.54,247,1.975,259,0.006,302,0.006,304,1.628,312,1.021,314,2.597,346,1.513,496,4.972,518,2.199,558,2.729,657,3.503,722,3.904,791,4.679,1026,3.47,1141,2.399,1201,5.062,1229,4.165,1236,4.699,1276,2.315,1483,4.407,1488,4.407,1576,5.062,1577,6.693,1582,5.062,1584,6.365,1591,5.062,1593,3.774,1594,4.771,1606,2.951,1666,3.774,2079,4.69,2080,9.118,2081,4.69,2082,4.69,2083,4.69,2084,4.69,2085,4.69,2086,4.69,2087,7.584,2088,4.69]],["title/interfaces/Middleware.html",[0,0.574,966,2.541]],["body/interfaces/Middleware.html",[0,0.485,2,0.694,3,0.051,4,0.041,5,0.041,11,1.615,12,0.256,13,0.459,15,1.271,18,0.58,19,0.358,20,0.01,22,0.921,29,0.371,38,0.851,60,2.103,79,0.161,80,0.031,88,3.264,89,1.915,93,0.63,107,3.044,109,1.343,110,1.677,118,1.491,127,3.088,129,0.898,136,1.664,137,2.238,141,0.951,143,1.336,146,0.747,147,0.747,171,3.338,190,1.183,191,1.404,193,0.747,195,1.877,206,2.48,211,1.11,219,2.628,225,0.924,246,2.653,250,2.128,259,0.004,263,2.5,270,1.975,302,0.004,309,2.219,314,2.42,323,1.009,338,2.617,341,1.984,430,0.694,442,1.772,445,3.282,470,2.743,474,2.564,489,1.736,495,1.736,801,1.539,815,1.539,885,2.72,887,1.629,901,3.649,902,2.353,906,2.695,907,2.399,911,2.401,918,2.098,922,2.399,923,4.278,925,2.063,958,1.336,962,1.463,966,2.695,975,1.463,993,1.463,996,2.353,999,2.353,1001,2.353,1003,1.396,1004,1.396,1005,1.622,1006,1.396,1010,1.396,1019,4.469,1020,3.226,1032,2.316,1405,3.286,1406,2.063,1422,1.396,1423,2.695,1523,1.629,1553,4.633,1568,3.286,1697,1.736,1698,3.009,1699,1.736,1700,5.712,1704,4.939,1706,1.871,1708,1.871,1710,1.871,1712,1.871,1713,3.775,1715,1.871,1717,3.009,1718,2.793,1719,2.951,1720,2.951,1721,2.816,1722,1.871,1723,1.539,1724,2.62,1725,1.871,1726,1.629,1727,2.149,1728,1.396,1729,1.396,1730,2.245,1731,2.816,1732,2.816,1733,2.149,1734,2.245,1735,3.009,1736,4.739,1737,3.775,1738,1.871,1739,4.013,1740,4.326,1741,1.871,1742,1.871,1743,1.871,1744,1.871,1745,1.871,1746,3.009,1747,3.009,1748,1.871,1749,3.775,1750,1.463,1751,3.009,1752,1.871,1753,1.871,1754,3.009,1755,3.535,1756,4.325,1757,4.739,1758,1.871,1759,3.009,1760,1.871,1761,3.009,1762,1.871,1763,3.009,1764,1.871,1765,1.871,1766,1.871,1767,1.871,1768,3.009,1769,1.871,1770,1.736,1771,1.871,1772,3.775,1773,1.871,1774,1.871,1775,1.871,1776,1.871,1777,1.871,1778,1.629,1779,1.871,1780,1.871,1781,1.871,1782,1.871,1783,1.871,1784,1.871,1785,1.871,1786,1.871,1787,3.775,1788,1.871,1789,1.871,1790,1.871,1791,1.871,1792,1.871,1793,3.009,1794,1.871,1795,1.871,1796,3.009,1797,1.871,1798,1.871,1799,3.009,1800,1.871,1801,1.871,1802,1.871,1803,1.871,1804,1.871,1805,2.793,1806,1.871,1807,1.871,1808,1.871,1809,1.871,1810,1.871,1811,1.871,1812,1.871,1813,1.871,1814,1.871,1815,3.009,1816,3.009,1817,1.336,1818,1.871,1819,1.871,1820,1.871,1821,1.871,1822,3.009,1823,1.871,1824,1.871,1825,1.871,1826,1.871,1827,2.476,1828,1.871,1829,1.736,1830,1.736,1831,2.476,1832,1.736,1833,1.736,1834,4.325,1835,1.871,1836,1.871,1837,3.775,1838,4.739,1839,1.871,1840,3.009,1841,1.736,1842,1.871,1843,1.871,1844,1.871,1845,3.009,1846,3.009,1847,1.871]],["title/classes/NotificationRequestDto.html",[80,0.059,2089,3.303]],["body/classes/NotificationRequestDto.html",[3,0.143,4,0.115,5,0.115,12,0.31,13,0.95,18,0.592,19,0.35,20,0.009,29,0.487,79,0.143,80,0.104,259,0.008,302,0.008,304,2.258,310,2.147,311,3.695,312,0.95,322,2.822,666,4.092,682,5.738,686,5.738,865,4.958,1150,4.092,2089,5.778,2090,8.259,2091,8.259,2092,6.646,2093,7.737,2094,7.737,2095,4.857]],["title/classes/Oauth2AuthorizationServerResponse.html",[80,0.059,2096,3.559]],["body/classes/Oauth2AuthorizationServerResponse.html",[3,0.105,4,0.084,5,0.084,7,0.99,11,1.489,12,0.226,13,0.778,18,0.687,19,0.388,20,0.009,22,1.561,27,2.837,28,5.102,79,0.105,80,0.064,82,5.844,89,2.259,91,3.364,106,3.13,119,4.886,195,1.255,259,0.006,302,0.006,304,1.647,312,1.054,323,3.981,332,3.897,338,2.787,592,2.849,621,4.982,622,6.723,630,6.132,739,3.194,740,5.746,742,5.746,744,5.746,747,5.746,750,5.746,751,5.746,753,5.746,755,5.746,778,5.102,1005,2.751,1048,6.074,1051,2.986,1064,4.203,1193,3.806,1203,5.338,1345,5.102,1459,4.442,1474,3.806,1976,4.187,2096,5.102,2097,8.67,2098,4.746,2099,4.746,2100,8.17,2101,4.746,2102,4.746,2103,3.819,2104,4.746,2105,4.746,2106,5.594,2107,6.34,2108,4.187]],["title/classes/OfferRequest.html",[80,0.059,1892,2.928]],["body/classes/OfferRequest.html",[3,0.127,4,0.101,5,0.101,7,1.495,11,1.347,12,0.273,13,0.88,16,1.007,18,0.645,19,0.389,20,0.009,22,1.412,29,0.492,51,2.736,79,0.158,80,0.105,98,2.712,136,1.895,195,1.895,259,0.007,302,0.007,304,1.99,310,2.168,311,3.206,312,0.959,316,3.656,320,3.802,321,4.117,322,2.488,350,2.736,458,2.043,598,3.442,666,3.607,674,4.916,680,5.059,820,4.301,880,2.565,918,2.043,1892,4.744,1895,3.607,1913,5.174,1914,4.614,1915,4.916,1928,5.836,1929,3.796,2095,4.282,2109,7.222,2110,5.734,2111,5.734,2112,5.351,2113,5.734,2114,5.734,2115,5.059,2116,5.734,2117,6.321,2118,6.321,2119,4.614,2120,4.282]],["title/classes/OfferResponse.html",[80,0.059,1895,2.782]],["body/classes/OfferResponse.html",[3,0.133,4,0.107,5,0.107,7,1.261,11,1.419,12,0.288,13,0.909,18,0.666,19,0.362,20,0.009,22,1.488,29,0.504,51,2.884,79,0.163,80,0.107,98,2.098,136,1.598,195,1.598,259,0.007,302,0.007,304,2.098,311,3.311,312,0.909,316,3.471,320,3.927,321,4.253,322,2.622,350,2.884,458,2.851,666,3.802,674,3.802,677,5.332,820,3.627,880,3.58,918,2.153,1892,4.001,1895,4.656,1913,4.9,1914,4.863,1915,4.656,1928,4.513,1929,4.001,2095,4.513,2109,7.059,2112,4.513,2117,6.53,2118,6.53,2119,4.863,2120,4.513,2121,6.043]],["title/controllers/Oid4vciController.html",[342,1.576,1961,3.559]],["body/controllers/Oid4vciController.html",[3,0.113,4,0.09,5,0.09,11,1.994,12,0.243,16,0.935,18,0.638,19,0.355,20,0.009,29,0.535,33,0.9,51,2.436,79,0.113,80,0.068,94,2.44,109,1.182,110,0.968,135,1.799,151,2.7,160,2.801,188,2.933,190,1.677,191,1.232,193,2.68,240,2.816,246,4.297,247,2.801,257,3.576,259,0.007,302,0.007,310,1.846,312,0.817,340,4.9,342,1.819,344,1.973,346,1.6,458,2.794,464,5.191,502,2.52,518,1.759,519,2.61,621,4.673,638,3.576,640,2.816,649,2.52,650,4.661,800,2.933,802,4.108,810,3.116,1077,4.185,1098,2.61,1150,3.211,1910,4.656,1911,4.108,1958,3.211,1961,5.353,1971,4.404,1973,3.812,2089,5.856,2122,5.105,2123,5.105,2124,5.105,2125,5.105,2126,5.105,2127,5.869,2128,5.105,2129,5.105,2130,5.105,2131,4.504,2132,4.504,2133,4.504,2134,3.812,2135,4.108,2136,5.105,2137,4.504,2138,5.105,2139,4.504,2140,5.105,2141,5.105,2142,5.105,2143,5.105,2144,5.105,2145,5.105,2146,5.105,2147,5.105]],["title/injectables/Oid4vciService.html",[30,0.945,1910,2.782]],["body/injectables/Oid4vciService.html",[3,0.058,4,0.046,5,0.046,11,1.772,12,0.274,13,0.504,15,1.793,16,0.876,18,0.641,19,0.354,20,0.009,21,2.133,29,0.524,30,0.877,32,3.974,33,0.461,34,2.533,35,0.907,47,2.831,48,1.29,51,1.958,55,2.463,57,1.831,61,1.958,62,1.831,79,0.058,80,0.035,81,1.247,86,2.425,93,1.111,94,1.353,97,0.84,109,0.917,110,1.643,118,1.837,134,2.717,135,1.431,136,0.691,146,2.513,147,2.608,149,1.169,151,2.609,160,1.728,161,1.728,190,1.669,191,1.155,193,2.226,194,1.831,195,0.691,213,1.442,238,2.183,240,2.263,246,3.079,247,1.1,250,2.425,257,1.831,259,0.004,267,1.644,269,2.103,285,1.442,289,2.026,295,2.875,297,1.569,298,1.569,302,0.004,312,0.905,338,1.319,340,3.354,346,0.987,442,1.67,456,2.358,458,2.741,464,2.717,468,3.065,470,2.218,471,2.34,510,1.728,514,2.103,518,1.65,531,3.651,621,1.502,625,1.569,640,1.442,641,3.446,644,3.819,645,1.831,649,3.539,671,4.021,688,1.01,699,4.336,704,3.302,719,2.463,720,3.302,721,4.077,724,1.73,725,1.831,733,4.077,736,1.644,739,2.568,764,2.358,765,2.177,772,2.875,788,2.103,794,2.875,797,3.302,810,1.728,820,2.463,856,2.103,865,1.569,880,1.169,882,2.103,885,1.895,918,0.931,951,1.952,1007,1.831,1031,1.569,1044,1.442,1052,1.644,1053,2.306,1054,2.306,1055,2.306,1056,2.103,1057,2.306,1058,3.621,1059,3.302,1060,2.306,1077,3.924,1080,2.306,1106,4.47,1126,3.302,1128,2.717,1150,1.644,1363,2.306,1371,2.717,1423,1.502,1603,4.077,1604,1.952,1629,1.644,1726,1.831,1892,3.8,1895,2.582,1908,1.952,1910,2.582,1928,1.952,1937,1.952,1950,5.023,1959,3.611,1962,2.306,1971,2.717,1972,1.952,1974,2.306,1986,3.354,2089,4.287,2132,2.306,2133,2.306,2134,3.784,2148,2.613,2149,6.237,2150,5.066,2151,5.066,2152,2.613,2153,4.104,2154,4.104,2155,2.613,2156,2.613,2157,2.613,2158,2.613,2159,2.613,2160,2.613,2161,4.104,2162,3.621,2163,2.613,2164,2.613,2165,2.613,2166,5.74,2167,2.613,2168,5.74,2169,4.104,2170,2.613,2171,4.104,2172,2.613,2173,2.613,2174,2.613,2175,2.613,2176,3.55,2177,1.73,2178,2.613,2179,2.613,2180,4.104,2181,2.613,2182,2.613,2183,4.47,2184,2.613,2185,2.613,2186,2.613,2187,2.613,2188,2.613,2189,2.613,2190,5.066,2191,2.613,2192,2.613,2193,2.613,2194,2.613,2195,2.613,2196,2.613,2197,2.613,2198,5.74,2199,2.613,2200,2.613,2201,2.306,2202,2.306,2203,2.613,2204,2.103,2205,2.613,2206,4.104,2207,2.613,2208,4.104,2209,2.613,2210,2.306,2211,4.104,2212,4.104,2213,4.104,2214,4.104,2215,4.104,2216,4.104,2217,4.104,2218,4.104,2219,2.875,2220,4.619,2221,3.065,2222,3.065,2223,2.613,2224,2.306,2225,5.74,2226,2.613,2227,2.613,2228,2.613,2229,2.613,2230,2.613,2231,2.306,2232,2.613,2233,2.613,2234,4.104,2235,2.613,2236,2.613,2237,2.613,2238,2.613,2239,2.613,2240,2.613,2241,2.613,2242,2.613,2243,6.62,2244,2.613,2245,4.104,2246,4.104,2247,2.306,2248,2.613,2249,2.306,2250,2.613,2251,2.613,2252,2.613,2253,2.613,2254,2.613,2255,2.306,2256,2.613,2257,2.613,2258,2.613,2259,5.74,2260,2.613,2261,4.104,2262,2.613,2263,2.613,2264,2.306,2265,2.306]],["title/controllers/Oid4vpController.html",[342,1.576,2266,3.559]],["body/controllers/Oid4vpController.html",[3,0.112,4,0.09,5,0.09,7,1.058,11,1.555,12,0.242,16,0.93,18,0.681,19,0.3,20,0.009,29,0.511,33,0.894,79,0.112,80,0.068,91,3.513,93,1.373,94,2.675,95,2.689,100,3.785,101,5.167,102,4.945,109,1.058,135,1.909,151,2.658,191,1.226,193,2.608,195,1.751,253,5.612,259,0.007,302,0.007,310,1.837,312,0.813,323,2.873,342,2.628,344,1.959,346,1.592,458,3.021,466,5.939,502,2.502,518,1.751,519,2.592,534,2.913,604,5.84,621,3.805,649,2.502,650,4.639,698,4.87,800,3.805,1094,4.384,1098,2.592,1958,3.189,1971,4.384,1973,3.785,2131,4.472,2134,3.785,2135,4.079,2137,4.472,2139,4.472,2266,5.935,2267,5.068,2268,5.068,2269,6.622,2270,7.375,2271,6.507,2272,5.068,2273,5.068,2274,5.068,2275,4.945,2276,4.472,2277,5.068,2278,5.068,2279,4.384,2280,4.472,2281,4.472,2282,5.068,2283,5.068,2284,5.068,2285,5.068,2286,5.068,2287,5.068,2288,5.068,2289,5.068]],["title/modules/Oid4vpModule.html",[357,1.387,1956,2.782]],["body/modules/Oid4vpModule.html",[3,0.121,4,0.097,5,0.097,20,0.009,29,0.56,33,0.969,79,0.121,80,0.074,259,0.007,302,0.007,344,2.696,357,2.403,359,2.385,360,2.623,361,2.811,362,2.811,363,2.623,364,3.783,365,3.783,369,4.512,374,5.349,375,5.104,377,3.568,378,2.811,379,2.623,382,3.329,385,3.458,393,4.423,404,4.105,698,5.399,1956,5.782,1958,5.349,1959,5.349,1971,4.619,1972,4.105,1973,4.105,2062,4.887,2064,3.032,2266,6.168,2280,4.849,2290,4.849,2291,4.849,2292,4.849,2293,4.849,2294,5.349,2295,5.496,2296,5.496,2297,4.849]],["title/injectables/Oid4vpService.html",[30,0.945,698,2.655]],["body/injectables/Oid4vpService.html",[3,0.054,4,0.044,5,0.044,9,1.477,11,1.699,12,0.117,15,0.667,16,0.78,18,0.643,19,0.251,20,0.009,22,0.606,24,1.215,29,0.514,30,0.836,33,0.434,34,2.475,35,0.854,47,2.638,48,1.215,51,1.174,52,4.06,60,0.753,61,1.174,69,4.479,79,0.054,80,0.033,86,2.374,93,1.06,94,2.315,98,2.103,103,2.922,104,2.249,109,0.625,110,1.572,118,0.683,119,1.357,129,0.951,135,1.39,146,2.383,147,2.513,151,2.684,160,2.551,161,1.648,173,1.98,174,1.98,175,1.306,176,1.98,177,1.98,178,1.98,183,2.349,188,1.414,190,1.4,191,1.028,192,1.838,193,1.258,195,1.468,225,0.978,231,3.413,232,1.838,233,1.838,234,1.838,238,1.606,240,2.158,247,2.051,248,3.638,250,2.559,253,5.098,258,1.215,259,0.004,267,3.492,270,1.648,282,1.724,289,1.932,295,2.741,302,0.004,309,0.635,312,0.682,314,1.783,315,1.477,323,2.628,328,1.548,329,3.027,334,1.357,338,0.791,339,1.477,346,0.941,442,1.997,456,2.249,458,2.501,462,4.058,466,4.519,470,1.512,510,2.337,511,3.452,518,1.706,534,2.249,542,2.591,558,1.068,590,1.838,594,1.629,595,3.149,601,1.258,604,4.146,638,2.741,639,1.629,644,3.731,645,1.724,653,1.548,667,4.818,674,1.548,688,0.951,698,2.349,736,1.548,748,2.839,764,2.799,792,2.076,800,2.249,812,1.724,880,1.101,885,1.137,918,0.877,944,1.98,1077,2.462,1141,1.258,1186,1.838,1188,2.171,1191,1.724,1193,1.477,1208,3.452,1213,4.467,1224,4.739,1287,1.357,1340,1.838,1371,3.225,1474,1.477,1503,2.171,1510,2.171,1524,1.724,1542,1.838,1544,1.98,1603,3.149,1604,1.838,1699,1.838,1726,2.741,1831,3.675,1895,1.548,1959,3.492,1971,2.591,1972,1.838,1986,4.011,2063,4.739,2064,1.357,2134,3.638,2176,3.413,2177,1.629,2202,2.171,2204,1.98,2219,3.889,2220,5.444,2221,2.922,2222,2.922,2224,3.452,2231,5.345,2247,2.171,2249,2.171,2255,3.452,2264,2.171,2271,3.452,2276,3.452,2281,2.171,2298,2.461,2299,4.871,2300,4.871,2301,2.461,2302,2.461,2303,2.461,2304,2.461,2305,3.149,2306,3.149,2307,2.922,2308,2.461,2309,4.467,2310,2.461,2311,2.461,2312,3.913,2313,2.461,2314,2.461,2315,2.461,2316,2.461,2317,2.922,2318,1.629,2319,1.98,2320,2.461,2321,2.461,2322,2.171,2323,5.551,2324,3.913,2325,4.871,2326,2.461,2327,3.913,2328,6.058,2329,2.461,2330,2.461,2331,3.149,2332,2.461,2333,2.461,2334,2.461,2335,2.171,2336,2.461,2337,2.461,2338,2.461,2339,2.461,2340,2.461,2341,2.461,2342,2.461,2343,2.461,2344,2.461,2345,2.461,2346,2.461,2347,2.461,2348,2.461,2349,2.461,2350,4.871,2351,4.871,2352,2.461,2353,2.461,2354,3.913,2355,3.913,2356,2.461,2357,2.461,2358,2.461,2359,2.461,2360,2.461,2361,2.461,2362,2.461,2363,1.98,2364,2.171,2365,2.461,2366,2.461,2367,1.98,2368,2.171,2369,2.461,2370,2.461,2371,5.551,2372,3.913,2373,2.461,2374,2.461,2375,2.461,2376,3.913,2377,2.461,2378,2.461,2379,4.871,2380,2.461,2381,2.461,2382,2.461,2383,2.461,2384,1.629,2385,5.551,2386,3.913,2387,3.913,2388,2.461,2389,2.461,2390,2.461,2391,3.913,2392,2.461,2393,2.461,2394,2.461,2395,2.461,2396,3.913,2397,2.461,2398,3.913,2399,2.461,2400,4.871,2401,2.461,2402,3.913,2403,2.461,2404,3.913,2405,3.913,2406,2.461,2407,1.838,2408,3.913,2409,2.461,2410,2.461,2411,2.461,2412,2.461,2413,2.461,2414,2.461,2415,4.871,2416,3.913,2417,3.913,2418,2.461,2419,2.461,2420,2.461,2421,2.171,2422,2.461,2423,2.461,2424,2.171,2425,4.871,2426,2.461,2427,2.171,2428,2.461,2429,2.461,2430,2.461,2431,2.461,2432,2.461,2433,2.171,2434,2.461]],["title/classes/ParResponseDto.html",[80,0.059,646,3.559]],["body/classes/ParResponseDto.html",[3,0.142,4,0.114,5,0.114,11,2.077,12,0.308,13,0.946,18,0.59,19,0.349,20,0.009,79,0.142,80,0.087,171,4.088,259,0.008,302,0.008,304,2.241,312,0.946,323,3.342,548,6.149,564,6.797,592,3.876,630,6.199,646,6.199,653,5.18,880,3.815,2103,5.196,2108,5.697,2435,8.233,2436,7.704,2437,7.704]],["title/interfaces/Params.html",[0,0.574,1542,3.303]],["body/interfaces/Params.html",[0,0.774,2,1.295,3,0.096,4,0.077,5,0.077,12,0.285,13,0.732,18,0.562,19,0.369,20,0.009,22,1.896,60,2.433,79,0.162,88,2.142,109,0.953,110,1.697,118,1.204,191,1.104,193,2.62,206,3.431,219,3.238,258,3.625,259,0.006,302,0.006,309,2.104,442,1.43,470,3.149,502,2.142,627,1.631,889,2.729,911,1.467,918,3.092,1013,4.289,1517,3.491,1518,3.827,1519,5.263,1520,3.827,1521,6.402,1522,5.909,1523,3.039,1524,6.03,1525,3.039,1526,5.487,1527,3.827,1528,3.827,1529,3.827,1530,3.827,1531,3.827,1532,3.827,1533,3.827,1534,5.487,1535,3.827,1536,6.015,1537,3.827,1538,3.827,1539,3.827,1540,3.827,1541,3.827,1542,6.086,1543,3.827,1544,3.491,1545,3.827,1546,6.015,1547,3.827,1548,3.827,1549,3.827,1550,6.015,1551,3.827,1552,5.263,1553,3.039,1554,3.827,1555,5.263,1556,5.263,1557,5.263,1558,3.827,1559,3.827,1560,3.827,1561,6.015,1562,3.827,1563,3.827,1564,3.827,1565,5.263,1566,3.827,1567,3.827,1568,3.039,1569,3.827]],["title/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,0.574,730,3.559]],["body/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,0.434,2,0.998,3,0.074,4,0.059,5,0.059,11,1.773,12,0.16,13,0.608,18,0.645,19,0.33,20,0.009,21,1.409,29,0.521,30,1.059,33,0.59,34,2.159,35,1.161,38,1.224,47,2.413,48,1.652,51,1.597,60,1.023,79,0.109,80,0.045,86,2.467,93,0.906,98,1.72,109,1.165,110,1.657,113,2.105,118,2.024,119,1.845,129,2.28,136,1.31,146,2.345,147,2.686,151,2.727,159,1.597,161,2.485,164,2.215,190,0.844,193,2.239,195,1.929,213,1.845,236,2.499,238,2.296,246,1.652,247,2.086,250,1.132,256,1.923,259,0.005,270,2.933,302,0.005,309,0.864,329,2.919,334,2.733,337,2.534,338,1.897,341,3.131,458,2.947,468,3.7,470,1.915,510,1.409,566,2.215,594,3.281,601,3.336,614,2.692,618,4.319,625,2.008,626,3.7,637,4.549,638,4.134,639,2.215,640,1.845,641,2.008,643,2.692,644,3.255,645,2.344,653,3.712,667,4.872,671,3.471,689,2.952,692,2.952,693,2.952,694,2.952,696,2.952,698,3.542,699,3.391,702,2.692,704,5.25,705,2.952,707,5.756,715,2.952,719,3.916,720,5.25,721,4.749,722,3.221,723,2.952,724,2.215,725,2.344,726,2.952,727,2.952,728,2.499,729,2.008,730,4.749,731,5.756,732,4.372,733,3.987,734,2.952,735,4.372,736,2.105,737,5.206,738,2.952,739,2.64,740,2.692,741,2.952,742,2.692,743,2.952,744,2.692,745,2.952,746,2.952,747,2.692,748,2.534,749,2.344,750,2.692,751,2.692,752,2.952,753,2.692,754,2.952,755,2.692,756,2.952,757,2.952,758,2.952,759,4.372,760,2.952,761,2.692,762,2.952,763,2.952,764,1.923,765,3.87,766,2.952,767,2.952,768,2.952,769,2.952,770,2.952,771,4.372,772,3.471,773,2.952,774,5.25,775,2.952,776,2.952,777,2.952,778,4.749,779,2.952,780,2.692,781,2.952,782,2.952,783,2.952,784,2.952,785,2.952,786,2.952,787,2.952,788,3.987,789,2.952,790,2.952,791,1.923,792,1.775,793,2.692,794,2.344,795,2.952,796,2.692,797,2.692,798,2.952,799,2.952,800,1.923,801,3.281,802,2.692,803,2.952,804,4.372,805,2.952,806,2.952,807,2.952,808,2.952,809,2.952,810,1.409,811,2.344,812,2.344,813,4.372,814,2.952,815,3.281,816,2.344,817,4.372,818,2.952,819,2.952,820,2.008,821,2.952,822,2.952,823,2.952,824,2.952,825,2.952,826,2.952,827,2.952,828,2.952,829,2.952,830,2.952,831,2.952]],["title/interfaces/PathSerializer.html",[0,0.574,1724,3.099]],["body/interfaces/PathSerializer.html",[0,0.493,2,0.708,3,0.052,4,0.042,5,0.042,11,1.397,12,0.259,13,0.467,15,1.288,18,0.601,19,0.355,20,0.01,22,0.936,29,0.375,38,0.868,60,2.119,79,0.162,80,0.032,88,3.291,89,1.937,93,0.643,107,2.433,109,1.348,110,1.68,118,1.509,127,3.124,129,0.917,136,1.679,137,2.269,141,0.97,143,1.364,146,0.763,147,0.763,171,3.368,190,1.199,191,1.412,193,0.763,195,1.679,206,2.505,211,1.132,219,2.913,225,0.943,246,2.684,250,1.608,259,0.004,263,2.523,270,2.002,302,0.004,309,2.225,314,2.44,323,1.029,338,2.683,341,2.017,430,0.708,442,1.793,445,3.306,470,2.761,474,2.595,489,1.772,495,1.772,801,1.571,815,1.571,885,2.748,887,1.662,901,3.676,902,2.391,906,2.732,907,2.432,911,2.417,918,2.376,922,2.432,923,4.303,925,2.097,958,1.364,962,1.493,966,2.184,975,1.493,993,1.493,996,2.391,999,2.391,1001,2.391,1003,1.424,1004,1.424,1005,1.649,1006,1.424,1010,1.424,1019,3.571,1020,3.264,1032,2.347,1405,3.331,1406,2.097,1422,1.424,1423,2.732,1523,1.662,1553,4.671,1568,3.331,1697,1.772,1698,3.059,1699,1.772,1700,3.826,1704,4.979,1706,1.91,1708,1.91,1710,1.91,1712,1.91,1713,3.826,1715,1.91,1717,3.059,1718,2.839,1719,2.991,1720,2.991,1721,2.854,1722,1.91,1723,1.571,1724,3.331,1725,1.91,1726,1.662,1727,2.184,1728,1.424,1729,1.424,1730,2.282,1731,2.854,1732,2.854,1733,2.184,1734,2.282,1735,3.059,1736,4.788,1737,3.826,1738,1.91,1739,4.061,1740,4.359,1741,1.91,1742,1.91,1743,1.91,1744,1.91,1745,1.91,1746,3.059,1747,3.059,1748,1.91,1749,3.826,1750,1.493,1751,3.059,1752,1.91,1753,1.91,1754,3.059,1755,3.571,1756,4.376,1757,4.788,1758,1.91,1759,3.059,1760,1.91,1761,3.059,1762,1.91,1763,3.059,1764,1.91,1765,1.91,1766,1.91,1767,1.91,1768,3.059,1769,1.91,1770,1.772,1771,1.91,1772,3.826,1773,1.91,1774,1.91,1775,1.91,1776,1.91,1777,1.91,1778,1.662,1779,1.91,1780,1.91,1781,1.91,1782,1.91,1783,1.91,1784,1.91,1785,1.91,1786,1.91,1787,3.826,1788,1.91,1789,1.91,1790,1.91,1791,1.91,1792,1.91,1793,3.059,1794,1.91,1795,1.91,1796,3.059,1797,1.91,1798,1.91,1799,3.059,1800,1.91,1801,1.91,1802,1.91,1803,1.91,1804,1.91,1805,2.839,1806,1.91,1807,1.91,1808,1.91,1809,1.91,1810,1.91,1811,1.91,1812,1.91,1813,1.91,1814,1.91,1815,3.059,1816,3.059,1817,1.364,1818,1.91,1819,1.91,1820,1.91,1821,1.91,1822,3.059,1823,1.91,1824,1.91,1825,1.91,1826,1.91,1827,2.517,1828,1.91,1829,1.772,1830,1.772,1831,2.517,1832,1.772,1833,1.772,1834,4.376,1835,1.91,1836,1.91,1837,3.826,1838,4.788,1839,1.91,1840,3.059,1841,1.772,1842,1.91,1843,1.91,1844,1.91,1845,3.059,1846,3.059,1847,1.91]],["title/entities/PresentationConfig.html",[1848,2.183,2384,2.928]],["body/entities/PresentationConfig.html",[3,0.104,4,0.084,5,0.084,7,0.988,10,3.799,11,2.067,12,0.226,13,0.777,15,2.149,16,1.07,18,0.583,19,0.377,20,0.009,25,4.434,26,3.237,29,0.5,49,4.995,51,2.259,78,4.434,79,0.104,80,0.085,97,2.035,104,3.637,136,2.013,149,2.832,151,2.235,168,3.893,188,3.637,195,1.674,202,2.746,206,3.002,247,1.993,248,5.325,259,0.006,302,0.006,310,2.265,311,2.832,312,1.002,320,4.039,322,2.054,329,3.55,337,3.646,338,2.035,350,2.259,430,1.889,599,5.737,600,3.358,601,3.237,603,4.727,607,4.727,662,3.535,729,2.841,857,5.04,971,4.19,1094,4.19,1158,2.611,1462,3.809,1848,3.758,1849,2.841,1851,4.176,1852,4.995,1854,4.176,1857,3.535,1858,5.093,1860,5.584,1862,5.325,1863,4.176,1866,5.685,1867,5.093,1871,4.176,1874,4.434,1877,5.584,2279,4.19,2331,5.738,2384,4.19,2438,8.336,2439,4.734,2440,4.734,2441,7.13,2442,4.734,2443,4.734,2444,4.734,2445,4.734,2446,4.734,2447,4.734,2448,4.734]],["title/classes/PresentationDuringIssuance.html",[80,0.059,1865,3.303]],["body/classes/PresentationDuringIssuance.html",[3,0.137,4,0.11,5,0.11,7,1.296,12,0.296,13,0.924,16,1.057,18,0.69,19,0.39,20,0.009,29,0.474,79,0.166,80,0.109,191,1.15,259,0.008,302,0.008,304,2.156,310,2.088,311,4.054,312,0.924,320,4.296,322,2.695,329,3.623,337,4.141,729,3.728,968,3.066,1085,4.983,1865,5.62,2449,7.144,2450,5.48,2451,6.211,2452,6.211,2453,5.48,2454,5.48,2455,5.48]],["title/controllers/PresentationManagementController.html",[342,1.576,2456,3.559]],["body/controllers/PresentationManagementController.html",[3,0.083,4,0.067,5,0.067,7,0.79,11,1.884,12,0.18,15,1.982,16,0.972,18,0.529,19,0.383,20,0.009,24,1.868,29,0.528,33,0.667,51,2.586,52,3.801,60,2.115,79,0.083,80,0.051,86,1.833,89,2.464,93,1.025,94,2.413,97,2.448,98,1.313,105,3.797,106,1.868,107,1.547,109,1.011,110,1.028,135,1.873,146,2.036,147,1.742,191,1.28,193,2.521,195,2.159,203,3.588,204,3.253,240,2.989,247,1.593,253,3.588,259,0.005,270,3.081,289,2.675,302,0.005,309,1.4,310,1.918,312,0.849,315,3.253,316,1.642,329,1.693,339,2.271,342,1.348,344,1.462,346,1.303,350,1.806,471,3.947,474,3.022,502,1.868,507,3.797,518,1.829,519,3.238,521,2.505,522,4.361,523,4.047,531,4.714,536,2.826,540,4.047,544,2.425,570,2.38,601,4.176,637,3.639,640,2.087,649,2.675,655,3.045,674,3.41,698,3.801,880,2.425,889,2.38,911,1.28,1005,2.747,1084,3.253,1119,4.047,1157,2.505,1321,2.505,1778,2.651,1827,2.505,1882,3.801,1883,4.782,1884,5.587,1886,3.338,1888,3.338,1891,3.338,1893,3.338,1894,4.782,1895,3.984,1896,3.338,1903,4.782,1904,3.045,1905,3.338,1906,3.045,1907,3.045,1908,2.826,1913,2.505,1915,3.984,1917,4.361,1918,4.361,1920,3.338,1921,3.338,1922,4.782,1923,6.1,1924,3.338,1925,3.338,1926,5.096,1927,4.782,1929,3.588,1930,3.338,1937,4.729,1938,3.338,1939,3.045,1940,3.338,1941,3.338,1942,3.338,1943,3.338,1944,3.338,1945,3.338,1948,3.338,2319,3.045,2384,4.578,2456,4.361,2457,3.784,2458,5.587,2459,3.784,2460,5.42,2461,3.784,2462,6.127,2463,3.784,2464,3.784,2465,3.784,2466,3.784,2467,3.784,2468,3.338,2469,3.045,2470,3.784,2471,3.784,2472,3.784,2473,3.784,2474,3.784,2475,3.784,2476,3.784,2477,3.784,2478,3.784,2479,3.784,2480,3.784,2481,3.784,2482,3.784]],["title/classes/PresentationRequest.html",[80,0.059,2462,3.559]],["body/classes/PresentationRequest.html",[3,0.118,4,0.095,5,0.095,7,1.119,11,1.94,12,0.256,13,0.843,15,1.861,16,0.965,18,0.526,19,0.394,20,0.009,26,3.513,29,0.433,79,0.152,80,0.092,97,2.716,195,2.272,202,2.98,229,3.789,253,5.017,259,0.007,302,0.007,304,1.862,310,2.102,311,3.39,312,0.93,316,3.466,320,3.645,321,3.947,322,2.327,326,4.548,329,3.843,337,3.875,341,3.645,593,4.812,600,3.645,601,4.224,637,3.083,666,3.375,674,4.767,684,4.733,729,3.22,880,3.39,1913,5.017,1915,4.767,1926,4.317,1929,3.552,2047,5.528,2095,4.006,2112,4.006,2115,4.733,2119,5.528,2279,4.548,2462,5.528,2483,6.43,2484,5.364,2485,5.364,2486,6.869]],["title/interfaces/PresentationRequestOptions.html",[0,0.574,2309,3.559]],["body/interfaces/PresentationRequestOptions.html",[0,0.814,2,1.873,3,0.138,4,0.111,5,0.111,7,1.31,11,1.91,12,0.299,13,0.93,16,1.259,18,0.623,19,0.343,20,0.009,26,3.873,29,0.395,79,0.138,97,2.435,195,2.003,259,0.008,302,0.008,329,3.93,337,4.319,458,3.13,593,5.306,729,3.767,2279,5.014,2309,6.797,2483,5.051,2487,6.276,2488,6.095]],["title/modules/PresentationsModule.html",[357,1.387,2294,2.782]],["body/modules/PresentationsModule.html",[3,0.13,4,0.105,5,0.105,20,0.009,29,0.558,33,1.043,52,5.452,79,0.13,80,0.079,259,0.007,302,0.007,344,2.822,357,2.484,359,2.566,360,2.822,361,3.024,362,3.024,363,2.822,364,3.912,365,3.912,377,3.735,378,3.024,379,2.822,382,3.485,1155,3.138,1157,3.915,1426,3.915,1956,4.595,2062,5.117,2064,3.262,2294,5.622,2384,3.915,2456,6.377,2468,5.217,2469,4.759,2489,5.217,2490,5.217,2491,5.217,2492,5.217,2493,6.067,2494,5.913,2495,7.303,2496,5.913,2497,5.913,2498,5.217,2499,5.913]],["title/injectables/PresentationsService.html",[30,0.945,52,2.655]],["body/injectables/PresentationsService.html",[3,0.051,4,0.041,5,0.041,7,1.428,10,3.754,11,0.869,12,0.109,13,0.454,15,2.405,16,0.924,18,0.67,19,0.336,20,0.009,21,1.958,22,0.565,29,0.476,30,0.791,32,3.754,33,0.405,52,3.202,71,3.202,78,4.381,79,0.051,80,0.031,81,1.095,86,2.39,91,1.964,93,1.445,94,2.736,95,3.49,97,2.611,98,0.797,101,3.737,102,2.764,103,2.764,104,2.127,105,4.795,109,1.297,110,1.34,118,1.899,132,1.354,135,1.829,136,1.547,137,1.766,141,0.939,146,2.01,147,1.715,149,3.567,151,2.632,164,3.532,190,1.937,191,1.343,195,0.979,200,3.984,225,2.72,226,1.847,235,1.52,238,1.22,240,3.775,250,1.252,257,2.593,259,0.004,270,2.246,302,0.004,309,1.201,312,0.928,314,1.354,346,0.89,430,1.388,442,1.22,490,2.978,493,2.45,510,3.32,514,1.847,518,1.919,534,1.319,544,2.387,558,2.713,590,3.984,595,2.978,599,2.45,601,3.983,656,5.518,688,0.887,719,1.378,722,2.296,748,1.893,749,4.608,764,1.319,765,1.964,800,2.127,880,2.798,889,3.356,907,1.893,911,0.776,973,2.328,991,2.593,1000,2.593,1044,1.266,1064,2.041,1089,3.984,1094,2.45,1114,4.381,1119,2.764,1126,3.742,1139,3.742,1141,4.117,1142,1.714,1143,1.714,1144,6.235,1145,1.714,1146,4.355,1154,1.608,1155,1.218,1157,1.52,1178,3.265,1217,5.969,1220,6.082,1274,1.714,1275,1.714,1276,1.133,1594,2.328,1606,1.444,1629,2.328,1665,1.608,1702,2.222,1831,2.45,1848,3.087,1849,2.222,1852,1.608,2063,4.951,2064,1.266,2275,2.764,2317,1.714,2318,1.52,2331,1.847,2384,5.004,2407,1.714,2433,2.025,2458,3.265,2469,1.847,2500,2.295,2501,3.701,2502,6.844,2503,6.578,2504,4.65,2505,5.334,2506,3.701,2507,4.65,2508,3.701,2509,4.65,2510,3.701,2511,1.847,2512,5.083,2513,5.334,2514,3.701,2515,3.265,2516,3.265,2517,3.701,2518,3.701,2519,2.295,2520,6.844,2521,3.701,2522,3.701,2523,2.295,2524,2.295,2525,3.701,2526,2.295,2527,2.295,2528,2.295,2529,5.85,2530,5.334,2531,2.295,2532,4.65,2533,3.701,2534,2.295,2535,3.701,2536,3.701,2537,2.295,2538,4.65,2539,2.295,2540,3.701,2541,3.701,2542,2.295,2543,2.295,2544,2.295,2545,2.295,2546,2.295,2547,2.295,2548,3.701,2549,2.295,2550,2.295,2551,2.295,2552,2.295,2553,1.847,2554,2.295,2555,2.295,2556,2.295,2557,2.295,2558,2.295,2559,2.295,2560,2.295,2561,2.295,2562,2.295,2563,2.295,2564,2.295,2565,2.295,2566,2.295,2567,2.295,2568,2.295,2569,2.295,2570,2.295,2571,2.295,2572,2.295,2573,2.295,2574,2.295,2575,2.295,2576,2.295,2577,2.295,2578,4.65,2579,2.295,2580,2.295,2581,2.295,2582,2.295,2583,2.978,2584,3.701,2585,2.295,2586,2.295]],["title/interfaces/PresentedData.html",[0,0.574,2587,3.559]],["body/interfaces/PresentedData.html",[0,0.893,2,1.606,3,0.119,4,0.095,5,0.095,7,1.123,11,1.264,12,0.257,13,0.845,15,1.457,18,0.581,19,0.343,20,0.009,22,1.325,79,0.119,87,2.485,98,1.868,109,1.278,110,1.604,118,2.219,141,2.2,146,1.73,147,2.212,160,3.481,190,1.357,195,1.423,259,0.007,263,2.138,270,2.266,294,2.968,302,0.007,328,4.33,329,2.407,338,1.73,430,1.606,509,5.538,513,4.33,519,3.52,544,3.579,598,4.131,765,2.855,810,2.266,973,3.385,1629,3.385,1929,3.562,2279,3.562,2587,6.107,2588,4.33,2589,5.381,2590,6.072,2591,5.381,2592,5.381,2593,4.747,2594,6.695,2595,5.538,2596,6.072,2597,4.33,2598,4.747,2599,5.538,2600,6.072,2601,4.33,2602,6.072,2603,6.072,2604,4.747,2605,4.747,2606,4.747,2607,6.072,2608,6.072,2609,4.747,2610,4.747,2611,4.747,2612,4.747,2613,4.747,2614,4.747,2615,4.747,2616,4.747,2617,4.747,2618,4.747,2619,4.747,2620,4.747,2621,4.33]],["title/interfaces/ProcessResponse.html",[0,0.574,2595,3.559]],["body/interfaces/ProcessResponse.html",[0,0.896,2,1.615,3,0.119,4,0.096,5,0.096,7,1.129,11,1.271,12,0.258,13,0.848,15,1.466,18,0.582,19,0.344,20,0.009,22,1.333,79,0.119,87,2.5,98,1.879,109,1.28,110,1.606,118,2.224,141,2.214,146,1.74,147,2.221,160,2.279,190,1.365,195,1.827,259,0.007,263,2.151,270,2.279,294,2.986,302,0.007,328,4.346,329,2.422,338,1.74,430,1.615,509,5.56,513,4.356,519,3.533,544,3.587,598,4.147,765,2.872,810,2.909,973,3.405,1629,3.405,2587,5.56,2588,4.356,2590,4.776,2593,4.776,2594,7.594,2595,6.124,2596,6.096,2597,4.356,2598,4.776,2599,5.56,2600,6.096,2601,4.356,2602,6.096,2603,6.096,2604,4.776,2605,4.776,2606,4.776,2607,6.096,2608,6.096,2609,4.776,2610,4.776,2611,4.776,2612,4.776,2613,4.776,2614,4.776,2615,4.776,2616,4.776,2617,4.776,2618,4.776,2619,4.776,2620,4.776,2621,4.356]],["title/interfaces/QuerySerializerOptions.html",[0,0.574,902,2.782]],["body/interfaces/QuerySerializerOptions.html",[0,0.62,2,1.426,3,0.105,4,0.085,5,0.085,12,0.228,13,0.782,16,1.15,18,0.64,19,0.37,20,0.009,22,2.016,27,3.205,29,0.301,79,0.181,88,3.536,109,1.22,110,1.585,118,1.767,193,2.456,206,2.012,225,3.163,259,0.006,263,2.531,302,0.006,309,2.336,442,2.1,627,2.394,900,5.706,901,2.535,902,4.007,907,4.186,911,2.584,918,1.702,1003,2.868,1004,4.3,1032,3.536,1044,3.513,1405,4.462,1406,3.513,1718,3.568,1724,3.347,1727,2.746,1755,4.586,1817,2.746,1829,4.756,2622,4.215,2623,5.532,2624,3.163,2625,4.778,2626,7.64,2627,4.778,2628,6.368,2629,4.778,2630,6.368,2631,6.368,2632,6.368,2633,4.778,2634,4.778,2635,4.778,2636,4.778,2637,4.778,2638,6.368,2639,4.778]],["title/classes/RegistrarConfig.html",[58,3.303,80,0.059]],["body/classes/RegistrarConfig.html",[3,0.142,4,0.114,5,0.114,7,1.34,9,4.609,10,4.609,12,0.306,13,0.943,15,2.418,16,1.196,18,0.651,19,0.347,20,0.009,58,6.135,59,4.796,75,6.18,79,0.142,80,0.103,97,2.065,132,2.35,185,5.735,259,0.008,302,0.008,304,2.229,312,0.943,1051,4.04,2640,8.215,2641,6.422,2642,8.215,2643,6.422,2644,6.422]],["title/modules/RegistrarModule.html",[357,1.387,374,2.782]],["body/modules/RegistrarModule.html",[3,0.122,4,0.098,5,0.098,7,1.152,20,0.009,29,0.525,33,0.974,59,5.736,69,6.008,70,4.402,71,4.2,79,0.154,80,0.074,104,4.02,110,1.047,132,2.56,259,0.007,302,0.007,334,3.046,357,2.532,359,3.332,360,2.635,361,2.824,362,2.824,363,2.635,364,3.792,365,3.792,369,4.517,374,5.687,377,3.578,378,2.824,379,2.635,382,3.853,384,4.2,385,3.474,392,4.872,425,4.443,1084,3.314,1436,6.181,1663,4.124,1723,3.656,2294,5.355,2645,4.872,2646,5.522,2647,4.872,2648,4.872,2649,5.522,2650,6.173,2651,5.522,2652,5.522,2653,5.522,2654,5.522,2655,5.522,2656,5.522,2657,5.522,2658,7.68,2659,7.68,2660,5.522,2661,5.522]],["title/injectables/RegistrarService.html",[30,0.945,69,2.928]],["body/injectables/RegistrarService.html",[0,0.248,1,2.567,3,0.042,4,0.034,5,0.102,6,1.69,7,0.856,8,1.69,9,5.038,10,5.038,11,0.45,12,0.091,13,0.392,14,1.541,15,1.941,16,0.93,17,4.275,18,0.65,19,0.317,20,0.009,21,0.806,22,0.472,23,2.235,24,0.945,25,1.342,26,0.979,27,1.427,28,1.541,29,0.46,30,0.682,31,4.019,32,3.443,33,0.338,34,2.421,35,0.665,36,5.367,37,1.541,38,2.978,39,1.69,40,2.815,41,2.815,42,2.815,43,2.815,44,2.815,45,2.815,46,1.43,47,2.791,48,0.945,49,3.35,50,1.69,51,0.914,52,4.098,53,1.69,54,1.1,55,1.15,56,1.056,57,1.342,58,5.55,59,6.34,60,2.454,61,1.957,62,1.342,63,1.268,64,1.056,65,1.1,66,1.15,67,1.268,68,1.1,69,3.798,70,2.007,71,1.915,72,2.815,73,2.382,74,5.367,75,5.98,76,2.815,77,4.219,78,4.91,79,0.042,80,0.026,81,0.914,82,3.35,83,4.219,84,2.235,85,2.567,86,2.769,87,1.473,88,0.945,89,2.271,90,2.815,91,1.693,92,3.617,93,1.295,94,2.006,95,3.044,96,2.567,97,2.127,98,1.107,99,2.567,100,2.382,101,2.235,102,2.382,103,2.382,104,1.833,105,2.235,106,0.945,107,1.677,108,2.815,109,1.221,110,1.449,111,1.69,112,1.69,113,2.007,114,1.69,115,2.382,116,1.69,117,1.69,118,2.146,119,1.056,120,1.69,121,1.69,122,1.69,123,1.69,124,1.69,125,5.367,126,1.69,127,1.1,128,1.69,129,0.74,130,2.815,131,2.382,132,1.75,133,3.848,134,3.166,135,1.774,136,1.265,137,1.522,138,2.112,139,4.219,140,2.815,141,1.956,142,3.609,143,1.833,144,2.815,145,2.815,146,2.559,147,2.194,148,2.815,149,1.427,150,2.815,151,2.595,152,2.382,153,2.112,154,2.815,155,5.061,156,1.69,157,1.69,158,2.815,159,1.522,160,1.343,161,1.343,162,2.815,163,1.575,164,3.517,165,4.219,166,1.69,167,1.69,168,1.631,169,1.69,170,1.69,171,1.016,172,1.69,173,1.541,174,1.541,175,1.016,176,1.541,177,1.541,178,1.541,179,1.69,180,1.69,181,1.69,182,1.69,183,1.15,184,2.815,185,5.352,186,4.019,187,5.061,188,3.296,189,2.815,190,1.206,191,1.447,192,1.43,193,1.318,194,2.235,195,0.506,196,1.69,197,1.69,198,2.815,199,2.815,200,2.382,201,3.35,202,1.384,203,3.798,204,3.443,205,2.815,206,0.806,207,1.69,208,1.69,209,1.69,210,1.69,211,3.158,212,4.942,213,2.93,214,3.3,215,2.815,216,2.872,217,3.617,218,2.815,219,1.9,220,4.687,221,3.3,222,5.061,223,2.567,224,1.69,225,0.761,226,1.541,227,1.69,228,1.69,229,2.638,230,3.617,231,2.235,232,1.43,233,1.43,234,1.43,235,1.268,236,1.43,237,1.69,238,1.352,239,2.815,240,1.056,241,2.112,242,1.69,243,1.69,244,3.617,245,3.617,246,1.575,247,1.726,248,3.571,249,1.69,250,1.079,251,1.69,252,1.541,253,3.166,254,1.69,255,1.69,256,1.1,257,1.342,258,0.945,259,0.004,260,1.541,261,1.69,262,1.69,263,1.629,264,1.69,265,1.69,266,1.69,267,1.205,268,1.69,269,1.541,270,0.806,271,1.69,272,1.69,273,2.567,274,1.541,275,1.69,276,1.205,277,1.69,278,1.69,279,1.43,280,1.69,281,1.69,282,2.235,283,2.815,284,2.815,285,1.76,286,2.815,287,1.69,288,1.205,289,0.945,290,1.43,291,2.815,292,2.815,293,1.69,294,1.76,295,1.342,296,1.69,297,1.15,298,1.15,299,2.567,300,2.815,301,1.69,302,0.003,310,0.531,312,0.938,346,0.767,518,1.75,627,0.72,688,0.74,697,1.1,1044,1.76,1235,2.382,2662,3.19,2663,3.19,2664,3.19,2665,3.19,2666,3.19,2667,3.19,2668,1.915,2669,1.915,2670,1.915,2671,1.915,2672,1.915,2673,1.915,2674,1.915,2675,1.915,2676,1.915,2677,1.915,2678,1.915,2679,1.915,2680,1.915,2681,1.915,2682,1.915,2683,1.915]],["title/classes/RegistrationCertificateRequest.html",[49,3.099,80,0.059]],["body/classes/RegistrationCertificateRequest.html",[3,0.135,4,0.108,5,0.108,7,1.274,10,5.023,11,1.749,12,0.291,13,0.914,15,2.177,16,1.046,18,0.57,19,0.337,20,0.009,26,3.809,29,0.469,49,5.862,78,5.862,79,0.135,80,0.1,104,4.28,193,2.758,259,0.007,302,0.007,304,2.119,310,2.066,311,3.596,312,0.914,320,4.264,322,2.649,593,5.218,600,3.952,607,5.562,666,3.841,678,5.386,1075,6.571,2684,8.036,2685,7.09,2686,6.105,2687,6.105]],["title/interfaces/RequestOptions.html",[0,0.574,1010,2.655]],["body/interfaces/RequestOptions.html",[0,0.856,2,1.021,3,0.076,4,0.061,5,0.061,11,1.902,12,0.163,13,0.619,16,1.096,18,0.505,19,0.393,20,0.009,24,1.689,27,1.531,29,0.377,38,2.782,60,2.249,79,0.179,87,1.581,91,1.816,95,1.816,97,1.1,98,1.188,107,2.697,109,0.805,127,2.895,129,1.322,136,0.905,137,1.633,141,1.399,142,2.153,159,1.633,161,2.777,163,1.689,175,3.5,190,1.271,193,2.698,195,2.106,206,3.201,211,2.404,219,2.922,225,3.1,229,1.888,238,1.128,250,2.231,258,2.952,259,0.005,302,0.005,314,1.252,316,1.485,338,2.742,346,0.823,430,2.098,442,1.972,445,3.509,470,2.842,474,1.633,627,2.643,894,2.153,896,2.153,898,2.153,899,2.153,903,2.266,906,4.226,909,3.762,911,1.158,912,3.959,918,2.885,930,2.266,937,2.054,958,1.967,959,2.398,960,4.925,961,4.466,962,2.153,963,3.763,964,3.763,965,2.556,966,2.895,967,2.556,968,3.998,969,4.621,970,2.556,971,2.266,972,2.556,973,4.15,974,2.266,975,2.153,976,1.888,977,2.556,978,2.556,979,2.556,980,2.556,981,3.53,982,3.53,983,2.556,984,2.556,985,2.398,986,2.556,987,3.763,988,2.556,989,3.959,990,2.556,991,2.398,992,2.556,993,3.762,994,2.556,995,2.398,996,3.17,997,2.556,998,2.556,999,3.17,1000,2.398,1001,2.153,1002,2.556,1003,2.054,1004,2.054,1005,1.485,1006,2.054,1007,2.398,1008,2.398,1009,2.556,1010,3.024,1011,3.763,1012,3.763,1013,3.762,1014,4.189,1015,4.926,1016,6.451,1017,4.466,1018,2.556,1019,4.22,1020,2.054,1021,3.53,1022,2.266,1023,2.398,1024,2.398,1025,2.398,1026,1.888,1027,2.153,1028,2.266,1029,2.398,1030,2.153,1031,2.054,1032,1.689,1033,2.398,1034,5.152,1035,2.398]],["title/modules/ResolverModule.html",[357,1.387,2493,3.099]],["body/modules/ResolverModule.html",[3,0.141,4,0.113,5,0.113,20,0.009,29,0.517,33,1.131,79,0.141,80,0.086,259,0.008,302,0.008,357,2.574,359,2.781,360,3.059,361,3.278,362,3.278,363,3.059,364,4.052,365,4.052,377,3.923,378,3.278,379,3.059,382,3.059,2062,5.374,2064,3.536,2493,6.252,2512,6.426,2688,5.656,2689,5.656,2690,5.656,2691,6.411,2692,6.411]],["title/injectables/ResolverService.html",[30,0.945,2512,3.099]],["body/injectables/ResolverService.html",[3,0.107,4,0.086,5,0.086,7,1.016,10,2.923,12,0.232,16,0.906,19,0.292,20,0.009,21,3.241,22,2.026,24,2.404,29,0.518,30,1.378,33,0.859,79,0.107,80,0.065,93,1.319,94,2.126,109,1.155,110,1.46,118,2.222,132,2.36,135,1.479,141,2.637,146,2.325,147,1.565,190,1.626,191,1.194,195,1.288,213,3.557,238,2.538,241,4.27,247,2.05,259,0.006,260,3.918,302,0.006,312,0.792,314,3.072,346,1.551,470,2.492,510,2.715,518,1.705,558,2.798,635,3.224,639,3.224,688,1.881,719,2.923,722,4.208,739,3.682,765,3.422,1052,4.057,1098,2.49,1146,3.224,1191,4.518,1268,4.296,1276,2.404,1287,3.557,1362,4.296,1594,4.843,1632,4.296,1739,3.636,1950,3.411,2063,5.765,2064,2.685,2317,4.816,2318,3.224,2511,3.918,2512,4.518,2516,5.69,2693,4.869,2694,6.449,2695,6.449,2696,4.869,2697,6.449,2698,4.869,2699,6.449,2700,6.449,2701,5.69,2702,6.449,2703,4.869,2704,4.296,2705,4.869,2706,4.869,2707,4.869,2708,4.869,2709,4.869,2710,4.869,2711,3.918,2712,4.869,2713,4.869,2714,4.869,2715,4.869,2716,4.869,2717,6.449,2718,4.296,2719,4.869,2720,4.869,2721,4.296,2722,4.869,2723,4.869,2724,4.869,2725,4.869,2726,4.869,2727,4.869]],["title/classes/SchemaResponse.html",[80,0.059,1152,3.303]],["body/classes/SchemaResponse.html",[3,0.14,4,0.113,5,0.113,12,0.304,13,1.066,18,0.65,19,0.403,20,0.009,79,0.14,80,0.085,259,0.008,302,0.008,304,2.209,309,1.972,312,1.042,334,4.514,430,2.279,592,3.821,911,2.583,918,2.722,1084,4.912,1152,5.704,2103,5.122,2728,8.679,2729,7.638,2730,7.638,2731,7.638,2732,5.616,2733,5.616,2734,5.616]],["title/interfaces/SerializeOptions.html",[0,0.574,2735,3.099]],["body/interfaces/SerializeOptions.html",[0,0.899,2,1.134,3,0.084,4,0.067,5,0.067,18,0.626,19,0.332,20,0.009,22,1.339,27,2.84,79,0.183,88,1.876,98,2.203,109,1.444,110,1.608,118,1.054,136,1.005,168,2.78,191,1.412,238,1.253,250,1.285,259,0.005,263,1.51,302,0.005,309,2.239,332,1.943,430,2.275,442,1.253,625,2.281,627,1.429,901,2.016,911,1.285,918,1.354,922,3.543,923,5.082,925,3.501,968,3.133,976,2.096,1032,1.876,1406,4.206,1422,4.4,1423,4.984,1719,2.391,1720,2.391,1721,4.4,1727,3.124,1728,3.263,1729,3.263,1730,3.81,1731,4.82,1732,4.713,1733,4.212,1734,3.81,1740,4.611,1750,3.993,1755,4.906,1817,2.184,2623,4.202,2624,3.599,2735,4.853,2736,2.662,2737,4.853,2738,3.808,2739,2.838,2740,2.838,2741,2.516,2742,2.838,2743,6.332,2744,2.838,2745,4.74,2746,2.838,2747,5.174,2748,5.174,2749,2.838,2750,2.838,2751,4.06,2752,2.838,2753,2.838,2754,2.838,2755,2.838,2756,2.838,2757,2.838,2758,2.838,2759,2.838,2760,2.838,2761,2.838,2762,2.838,2763,2.838,2764,2.838,2765,2.838]],["title/interfaces/SerializePrimitiveOptions.html",[0,0.574,2737,3.099]],["body/interfaces/SerializePrimitiveOptions.html",[0,0.892,2,1.115,3,0.082,4,0.066,5,0.066,12,0.178,13,0.659,16,0.755,18,0.64,19,0.353,20,0.009,22,1.323,27,3.258,79,0.182,88,1.845,98,2.182,109,1.442,110,1.603,118,1.037,136,0.988,168,2.747,191,1.507,238,1.232,250,1.264,259,0.005,263,1.485,302,0.005,309,2.234,332,1.911,430,2.262,442,1.232,625,2.243,627,1.405,901,1.983,911,1.264,918,1.331,922,3.516,923,5.071,925,3.468,968,2.651,976,2.061,1032,1.845,1406,4.182,1422,4.371,1423,4.971,1719,2.351,1720,2.351,1721,4.371,1727,3.086,1728,3.224,1729,3.224,1730,3.774,1731,4.798,1732,4.689,1733,4.185,1734,3.774,1740,4.581,1750,3.956,1755,5.073,1817,2.147,2623,3.556,2624,3.556,2735,4.405,2736,2.618,2737,4.816,2738,3.763,2739,2.79,2740,2.79,2741,2.474,2742,2.79,2743,6.312,2744,2.79,2745,4.696,2746,2.79,2747,5.134,2748,5.134,2749,2.79,2750,2.79,2751,4.011,2752,2.79,2753,2.79,2754,2.79,2755,2.79,2756,2.79,2757,2.79,2758,2.79,2759,2.79,2760,2.79,2761,2.79,2762,2.79,2763,2.79,2764,2.79,2765,2.79]],["title/interfaces/SerializePrimitiveParam.html",[0,0.574,1721,2.655]],["body/interfaces/SerializePrimitiveParam.html",[0,0.895,2,1.123,3,0.083,4,0.067,5,0.067,12,0.18,13,0.663,18,0.641,19,0.344,20,0.009,22,1.33,27,2.825,79,0.183,88,1.858,98,2.191,109,1.443,110,1.605,118,1.044,136,0.995,168,2.761,191,1.407,238,1.241,250,1.273,259,0.005,263,1.496,302,0.005,309,2.271,332,1.925,430,2.268,442,1.241,625,2.259,627,1.415,901,1.997,911,1.273,918,1.341,922,3.527,923,5.076,925,3.482,968,3.117,976,2.076,1032,1.858,1406,4.192,1422,4.384,1423,4.976,1719,2.368,1720,2.368,1721,4.562,1727,3.103,1728,3.241,1729,3.241,1730,3.79,1731,4.807,1732,4.699,1733,4.196,1734,3.79,1740,4.594,1750,3.972,1755,4.895,1817,2.163,2623,3.575,2624,3.575,2735,4.423,2736,2.637,2737,4.832,2738,3.783,2739,2.811,2740,2.811,2741,2.492,2742,2.811,2743,6.321,2744,2.811,2745,4.715,2746,2.811,2747,5.151,2748,5.151,2749,2.811,2750,2.811,2751,4.032,2752,2.811,2753,2.811,2754,2.811,2755,2.811,2756,2.811,2757,2.811,2758,2.811,2759,2.811,2760,2.811,2761,2.811,2762,2.811,2763,2.811,2764,2.811,2765,2.811]],["title/interfaces/SerializerOptions.html",[0,0.574,2623,2.928]],["body/interfaces/SerializerOptions.html",[0,0.891,2,1.113,3,0.082,4,0.066,5,0.066,12,0.178,13,0.658,18,0.623,19,0.353,20,0.009,22,1.321,27,3.255,79,0.182,88,1.841,98,2.18,109,1.442,110,1.602,118,1.034,136,1.418,168,2.743,191,1.403,238,1.229,250,1.261,259,0.005,263,1.482,302,0.005,309,2.246,332,1.907,430,2.33,442,1.229,625,2.238,627,1.402,901,1.978,911,1.261,918,1.329,922,3.512,923,5.123,925,3.464,968,2.647,976,2.057,1032,3.1,1406,4.179,1422,4.368,1423,4.969,1719,2.346,1720,2.346,1721,4.368,1727,3.082,1728,3.219,1729,3.219,1730,3.77,1731,4.795,1732,4.686,1733,4.181,1734,3.77,1740,5.026,1750,3.951,1755,4.884,1817,2.143,2623,4.158,2624,3.551,2735,4.4,2736,2.612,2737,4.4,2738,3.757,2739,2.785,2740,2.785,2741,2.469,2742,2.785,2743,6.309,2744,2.785,2745,4.69,2746,2.785,2747,5.129,2748,5.129,2749,2.785,2750,2.785,2751,4.005,2752,2.785,2753,2.785,2754,2.785,2755,2.785,2756,2.785,2757,2.785,2758,2.785,2759,2.785,2760,2.785,2761,2.785,2762,2.785,2763,2.785,2764,2.785,2765,2.785]],["title/entities/Session.html",[458,1.576,1848,2.183]],["body/entities/Session.html",[3,0.078,4,0.063,5,0.063,7,0.738,11,2,12,0.169,13,0.823,15,2.015,16,1.213,18,0.633,19,0.388,20,0.009,25,4.27,26,3.117,29,0.469,51,2.463,71,2.123,79,0.078,80,0.047,97,1.659,136,2.282,143,3.502,149,2.31,151,1.911,160,3.235,168,3.427,259,0.005,302,0.005,310,2.32,312,1.027,323,3.54,329,3.188,335,3.616,337,3.117,339,3.099,340,4.718,354,3.616,355,3.099,430,2,442,1.166,458,3.009,471,2.815,510,1.489,515,3.418,558,2.24,600,3.948,601,3.805,603,3.855,607,5.556,618,4.035,626,5.004,637,3.851,653,3.834,660,5.378,729,2.123,774,4.905,810,3.436,820,5.068,865,2.123,880,2.998,910,2.478,911,2.266,1051,2.225,1066,3.418,1077,4.483,1094,3.418,1141,1.809,1145,2.642,1146,2.342,1150,2.225,1158,1.951,1376,4.554,1470,3.855,1665,3.616,1848,3.518,1849,2.123,1852,4.27,1857,2.642,1858,4.154,1862,5.881,1866,6.246,1867,6.945,1874,3.616,1892,4.035,2092,4.154,2204,4.905,2279,3.418,2305,4.154,2319,2.847,2335,5.378,2407,3.855,2601,4.154,2766,3.121,2767,3.537,2768,5.392,2769,3.537,2770,3.537,2771,3.537,2772,5.378,2773,3.537,2774,5.162,2775,3.537,2776,3.537,2777,6.095,2778,3.537,2779,3.537,2780,3.537,2781,5.162,2782,3.537,2783,5.162,2784,3.537,2785,5.162,2786,3.537,2787,3.537,2788,2.478]],["title/controllers/SessionController.html",[342,1.576,2789,3.559]],["body/controllers/SessionController.html",[3,0.112,4,0.09,5,0.09,7,1.061,12,0.242,15,2.2,16,0.932,18,0.565,19,0.3,20,0.009,26,3.393,29,0.542,33,0.896,79,0.112,80,0.068,86,2.244,89,2.364,93,1.377,94,2.435,109,1.18,135,1.796,160,2.793,190,1.974,191,1.228,193,1.634,259,0.007,302,0.007,309,1.907,310,2.049,312,0.907,342,1.811,344,1.964,346,1.595,350,2.426,355,3.982,458,3.127,471,3.411,502,2.509,518,1.754,519,2.599,521,3.365,531,4.318,536,3.796,544,2.968,570,3.198,644,4.073,649,3.275,1089,5.846,1090,4.173,1112,4.433,1147,3.051,1148,3.796,1702,3.982,1882,3.051,1904,4.09,1906,4.09,1907,4.09,1908,3.796,1917,5.339,1918,5.339,1937,3.796,2275,4.954,2788,4.648,2789,5.339,2790,5.083,2791,7.828,2792,6.634,2793,6.634,2794,5.083,2795,5.083,2796,6.634,2797,5.083,2798,5.083,2799,5.484,2800,5.083,2801,5.083,2802,4.485,2803,4.09,2804,5.853,2805,4.485,2806,4.09,2807,5.083,2808,5.083,2809,5.083,2810,5.083,2811,5.083,2812,5.083,2813,5.083,2814,5.083]],["title/interfaces/SessionLogContext.html",[0,0.574,2176,3.099]],["body/interfaces/SessionLogContext.html",[0,0.727,2,1.673,3,0.124,4,0.099,5,0.099,7,1.17,12,0.267,13,0.868,15,1.914,16,1.176,18,0.687,19,0.393,20,0.009,22,1.74,25,4.95,26,4.153,73,4.188,79,0.124,149,3.461,151,2.546,259,0.007,302,0.007,312,0.689,355,4.241,456,4.667,458,3.127,462,5.266,464,5.542,466,5.865,937,4.241,946,5.686,1662,5.277,1986,5.122,2176,4.95,2177,4.678,2219,3.929,2221,6.065,2222,6.48,2488,5.686,2768,5.686,2815,5.686,2816,5.608,2817,5.608,2818,5.608,2819,7.066,2820,7.066,2821,7.066]],["title/injectables/SessionLoggerInterceptor.html",[30,0.945,1958,2.782]],["body/injectables/SessionLoggerInterceptor.html",[3,0.081,4,0.065,5,0.065,7,1.424,11,1.979,12,0.175,15,1.439,16,0.876,19,0.327,20,0.009,22,0.906,29,0.475,30,1.135,33,0.649,79,0.081,80,0.049,81,1.756,86,2.448,89,1.311,91,2.818,93,1.849,94,2.386,95,3.841,96,4.274,106,1.816,109,1.09,110,1.625,135,1.566,151,1.665,161,3.352,175,3.622,191,1.264,193,2.709,195,1.648,225,2.111,238,1.213,250,2.108,258,1.816,259,0.005,289,2.622,302,0.005,312,0.765,335,2.577,338,2.559,346,1.277,355,4.097,415,2.577,416,2.747,456,4.159,458,2.934,470,1.422,471,1.699,472,4.686,474,1.756,476,3.246,518,1.648,545,2.961,621,2.114,649,2.622,688,1.422,833,2.314,865,3.741,1052,4.553,1454,3.246,1525,2.577,1669,3.966,1704,3.966,1958,4.294,1980,3.246,1981,7.155,1984,5.493,1986,4.993,1987,2.961,1993,3.246,2070,5.493,2135,2.961,2177,4.792,2219,4.782,2220,5.493,2221,5.405,2306,4.274,2307,2.747,2318,2.436,2583,5.016,2599,2.961,2815,5.493,2822,3.679,2823,5.311,2824,5.311,2825,5.311,2826,6.654,2827,3.679,2828,5.311,2829,6.825,2830,3.679,2831,5.311,2832,5.311,2833,5.311,2834,5.311,2835,5.311,2836,7.238,2837,5.311,2838,5.311,2839,3.679,2840,5.311,2841,6.233,2842,5.311,2843,6.825,2844,5.311,2845,3.679,2846,3.679,2847,3.679,2848,5.311,2849,3.679,2850,3.679,2851,3.679,2852,3.679,2853,3.679,2854,3.679,2855,3.679,2856,3.679,2857,3.679,2858,3.679,2859,3.679,2860,3.679,2861,3.679,2862,4.686,2863,4.686,2864,3.679,2865,3.679,2866,3.679,2867,3.679,2868,3.679,2869,6.233,2870,6.233,2871,3.679,2872,3.679,2873,6.825,2874,3.679,2875,3.679,2876,3.679,2877,3.679,2878,3.246,2879,3.246,2880,3.679,2881,3.679,2882,3.246,2883,3.679,2884,3.246,2885,3.246,2886,2.577,2887,3.246,2888,3.246,2889,3.679,2890,3.246,2891,3.246,2892,3.679,2893,3.679,2894,3.679,2895,3.679,2896,5.311,2897,3.679]],["title/injectables/SessionLoggerService.html",[30,0.945,1959,2.782]],["body/injectables/SessionLoggerService.html",[3,0.067,4,0.054,5,0.054,7,0.962,11,1.308,12,0.145,16,1.123,18,0.62,19,0.367,20,0.009,27,2.492,29,0.351,30,0.985,33,0.536,68,3.573,79,0.067,80,0.041,89,1.985,93,1.509,94,1.002,95,2.446,110,1.056,132,1.687,135,1.804,149,1.36,161,2.618,188,1.746,191,1.517,250,2.902,259,0.005,302,0.005,312,0.981,323,2.698,346,1.109,415,2.129,416,2.27,458,3.087,462,4.852,518,2.113,601,2.358,636,4.915,649,1.5,658,3.443,688,1.174,710,6.328,810,2.962,812,3.23,865,4.521,1022,2.012,1044,4.337,1077,4.205,1098,1.554,1201,5.004,1665,4.356,1669,4.644,1681,4.068,1959,3.912,1986,5.856,2070,3.71,2092,5.379,2176,6.256,2177,4.117,2219,4.929,2222,5.46,2265,2.681,2307,3.443,2322,2.681,2772,5.897,2815,6.519,2826,6.645,2862,7.608,2863,6.645,2879,2.681,2882,4.068,2884,4.068,2885,7.429,2886,3.23,2887,4.068,2898,3.039,2899,4.611,2900,4.611,2901,4.611,2902,5.571,2903,5.571,2904,4.611,2905,5.571,2906,4.611,2907,5.571,2908,5.571,2909,5.571,2910,4.611,2911,3.039,2912,3.039,2913,4.611,2914,9.062,2915,3.039,2916,3.039,2917,6.684,2918,3.039,2919,3.039,2920,3.039,2921,4.611,2922,3.039,2923,5.571,2924,3.039,2925,3.039,2926,4.611,2927,3.039,2928,3.039,2929,3.039,2930,3.039,2931,3.039,2932,3.039,2933,3.039,2934,4.611,2935,3.039,2936,3.039,2937,7.863,2938,2.27,2939,7.531,2940,3.039,2941,3.039,2942,3.039,2943,3.039,2944,3.039,2945,3.039,2946,3.039,2947,3.039,2948,3.039,2949,4.611]],["title/modules/SessionModule.html",[357,1.387,375,2.655]],["body/modules/SessionModule.html",[3,0.124,4,0.099,5,0.099,7,1.172,20,0.009,29,0.547,33,0.99,70,4.449,71,4.647,79,0.156,80,0.075,110,1.065,259,0.007,302,0.007,344,2.733,357,2.548,359,2.437,360,2.68,361,2.872,362,2.872,363,2.68,364,3.822,365,3.822,375,5.388,377,3.617,378,2.872,379,2.68,382,3.375,384,4.245,403,4.956,430,2.111,458,2.001,471,3.575,644,4.976,1147,3.372,1155,2.98,1426,3.719,1957,5.661,1966,4.956,2364,6.83,2788,5.423,2789,6.23,2802,4.956,2803,4.52,2804,4.956,2950,4.956,2951,5.617,2952,4.956,2953,4.956,2954,5.617,2955,5.617,2956,4.956,2957,5.617,2958,4.956,2959,5.617,2960,5.617,2961,4.52,2962,5.617,2963,5.617]],["title/injectables/SessionService.html",[30,0.945,644,2.439]],["body/injectables/SessionService.html",[3,0.09,4,0.072,5,0.072,12,0.195,15,1.551,16,1.059,18,0.636,19,0.341,20,0.009,29,0.505,30,1.224,31,5.472,33,0.721,34,2.934,35,1.42,60,1.752,79,0.09,80,0.055,81,1.952,86,2.235,93,1.551,94,2.485,98,2.616,109,1.281,110,1.358,118,1.589,135,1.986,143,3.291,151,2.245,183,3.438,190,1.444,191,1.395,201,4.012,211,3.154,259,0.006,289,3.534,302,0.006,312,1.005,346,1.377,352,5.016,363,2.733,406,3.292,430,1.709,458,3.034,496,2.866,518,1.993,594,4.99,644,3.159,649,2.827,657,4.277,671,5.016,688,1.581,761,4.609,885,2.645,1044,2.256,1090,3.603,1114,5.016,1154,2.866,1155,2.17,1158,2.256,1310,4.277,1702,3.438,1852,2.866,2047,4.609,2788,5.016,2803,3.292,2956,5.053,2958,5.053,2964,4.09,2965,7.159,2966,7.159,2967,4.09,2968,8.019,2969,4.09,2970,5.727,2971,4.09,2972,7.159,2973,4.09,2974,5.727,2975,7.159,2976,4.09,2977,5.727,2978,4.09,2979,4.09,2980,5.727,2981,7.159,2982,4.09,2983,5.727,2984,4.09,2985,5.727,2986,7.159,2987,5.727,2988,5.727,2989,5.727,2990,4.09,2991,5.727,2992,5.727,2993,4.09,2994,4.09,2995,4.09,2996,4.09,2997,5.727,2998,5.727,2999,4.09,3000,5.727,3001,4.09,3002,4.09,3003,4.09,3004,4.09,3005,4.09,3006,4.09,3007,4.09,3008,5.727,3009,4.09,3010,4.09,3011,4.09,3012,4.09]],["title/controllers/StatusListController.html",[342,1.576,3013,3.559]],["body/controllers/StatusListController.html",[3,0.136,4,0.109,5,0.109,12,0.293,16,0.864,18,0.617,19,0.365,20,0.009,29,0.508,33,1.084,79,0.136,80,0.082,94,2.027,109,0.982,135,1.715,151,2.345,191,1.138,259,0.008,302,0.008,310,1.705,312,0.755,314,2.249,342,2.19,344,2.375,346,1.799,350,2.933,502,3.034,518,1.626,521,4.07,544,3.606,1064,4.446,1098,3.143,1112,4.839,1147,4.489,1148,4.591,1882,4.839,3013,6.018,3014,4.951,3015,6.147,3016,6.147,3017,6.598,3018,4.947,3019,7.478,3020,6.147,3021,7.478,3022,6.147,3023,6.147,3024,6.147,3025,5.423,3026,6.147,3027,6.147]],["title/interfaces/StatusListFile.html",[0,0.574,3028,3.559]],["body/interfaces/StatusListFile.html",[0,0.431,2,0.992,3,0.073,4,0.059,5,0.146,12,0.28,13,0.605,15,0.9,16,0.693,18,0.639,19,0.294,20,0.009,29,0.53,30,1.054,32,3.529,33,0.586,34,2.151,35,1.154,47,2.404,48,1.641,54,1.91,55,1.995,56,2.72,61,3.472,63,2.201,64,1.833,65,1.91,66,1.995,67,2.201,68,1.91,79,0.073,80,0.045,81,1.586,86,2.617,93,0.9,94,1.938,97,1.585,109,1.109,110,1.656,118,2.09,132,1.216,135,0.762,136,0.879,146,2.233,147,2.233,151,2.589,152,2.482,153,2.201,163,1.641,171,4.105,175,1.764,183,3.529,190,0.838,204,1.995,219,1.321,238,1.626,240,1.833,247,1.4,259,0.005,267,3.102,285,3.242,288,2.091,289,3.21,290,4.39,297,1.995,298,1.995,302,0.005,309,1.794,314,1.216,442,1.096,456,2.834,458,2.475,510,3.064,544,3.869,558,2.139,559,5.187,719,2.96,736,3.698,748,1.7,765,1.764,792,1.764,794,2.329,810,2.076,836,2.201,880,1.487,885,1.535,907,1.7,910,2.329,1005,1.442,1026,1.833,1064,4.682,1079,5.856,1112,1.995,1114,3.455,1120,2.675,1128,3.892,1141,2.522,1147,1.995,1151,2.675,1154,2.329,1155,1.764,1158,1.833,1169,3.968,1185,3.968,1186,2.482,1191,2.329,1355,2.675,1488,2.329,1497,2.675,1581,2.675,1594,3.102,1606,2.091,1629,3.102,1702,2.96,1882,2.96,2363,2.675,2367,2.675,2553,2.675,2799,3.455,2806,2.675,2886,5.634,3014,2.201,3018,2.675,3028,5.59,3029,2.933,3030,6.128,3031,5.738,3032,4.351,3033,2.933,3034,2.933,3035,4.351,3036,2.675,3037,2.329,3038,2.675,3039,2.675,3040,2.933,3041,2.933,3042,2.933,3043,2.933,3044,2.933,3045,2.933,3046,4.351,3047,5.738,3048,4.351,3049,2.933,3050,2.933,3051,5.186,3052,4.351,3053,2.933,3054,2.933,3055,2.933,3056,2.933,3057,2.933,3058,2.933,3059,2.933,3060,2.933,3061,2.933,3062,4.351,3063,2.933,3064,4.351,3065,2.933,3066,2.933,3067,4.351,3068,4.351,3069,2.933,3070,2.933,3071,2.933,3072,2.933,3073,5.186,3074,2.933,3075,2.933,3076,2.933,3077,2.933,3078,2.933,3079,2.675,3080,5.186,3081,2.933,3082,2.933,3083,2.933,3084,2.933,3085,6.128,3086,2.933,3087,2.933,3088,4.351,3089,2.933,3090,2.933,3091,2.933,3092,2.933,3093,2.933,3094,2.933,3095,4.351,3096,4.351,3097,2.933,3098,2.933,3099,2.933]],["title/modules/StatusListModule.html",[357,1.387,1957,2.928]],["body/modules/StatusListModule.html",[3,0.133,4,0.107,5,0.107,20,0.009,29,0.548,33,1.066,79,0.133,80,0.081,259,0.007,302,0.007,344,2.86,357,2.508,359,2.622,360,2.884,361,3.09,362,3.09,363,2.884,364,3.95,365,3.95,369,4.619,377,3.785,378,3.09,379,2.884,382,3.532,385,3.802,544,3.311,1112,5.467,1147,3.627,1148,4.513,1155,3.207,1426,4.001,1957,5.938,3013,6.438,3014,4.001,3037,4.234,3038,4.863,3039,4.863,3100,5.332,3101,5.332,3102,5.332,3103,6.043,3104,6.043,3105,6.043,3106,6.043]],["title/injectables/StatusListService.html",[30,0.945,1112,2.655]],["body/injectables/StatusListService.html",[0,0.345,3,0.059,4,0.047,5,0.145,12,0.244,13,0.51,15,1.126,16,1.065,18,0.674,19,0.35,20,0.009,29,0.507,30,0.888,32,4.001,33,0.468,34,2.439,35,0.922,47,2.848,48,1.311,54,1.526,55,1.594,56,2.292,61,3.181,63,1.759,64,1.465,65,1.526,66,1.594,67,1.759,68,1.526,79,0.059,80,0.036,81,1.267,86,2.822,93,1.126,94,1.688,97,1.646,109,1.004,110,1.603,118,2.056,132,1.521,135,1.772,136,1.099,146,2.589,147,2.021,151,2.69,152,3.104,153,2.752,163,2.052,171,3.825,175,2.205,183,3.073,190,1.048,191,1.403,204,2.495,219,1.056,238,1.37,240,1.465,247,1.118,259,0.004,267,2.615,285,2.824,288,2.615,289,3.29,290,3.823,297,1.594,298,1.594,302,0.004,309,1.957,310,0.737,312,0.964,314,0.972,346,0.999,430,0.793,442,0.876,456,2.388,458,2.641,474,1.267,510,2.156,518,2.005,544,3.897,558,1.803,559,4.694,688,1.026,697,1.526,719,2.495,736,3.221,748,1.358,765,1.409,792,1.409,794,1.861,810,2.156,836,1.759,880,1.188,885,1.227,890,3.104,907,1.358,910,1.861,1005,1.803,1026,2.292,1044,2.292,1064,4.71,1079,4.12,1112,2.495,1114,4.057,1120,3.344,1128,4.162,1141,2.125,1147,4.777,1151,2.137,1154,1.861,1155,1.409,1158,1.465,1169,3.344,1185,3.344,1186,1.984,1191,1.861,1235,3.104,1355,2.137,1483,2.912,1488,2.912,1497,2.137,1581,3.344,1594,2.615,1606,1.671,1629,3.643,1702,3.476,1882,2.495,2363,2.137,2367,2.137,2553,3.344,2799,4.057,2806,2.137,2886,5.192,3014,5.269,3017,3.667,3018,3.344,3028,5.605,3029,2.343,3030,3.667,3031,3.667,3032,3.667,3033,2.343,3034,2.343,3035,3.667,3036,2.137,3037,1.861,3038,2.137,3039,2.137,3040,2.343,3041,4.517,3042,3.667,3043,2.343,3044,4.517,3045,3.667,3046,5.109,3047,5.88,3048,4.517,3049,3.667,3050,3.667,3051,4.517,3052,3.667,3053,2.343,3054,2.343,3055,2.343,3056,2.343,3057,2.343,3058,2.343,3059,2.343,3060,2.343,3061,2.343,3062,3.667,3063,3.667,3064,3.667,3065,2.343,3066,2.343,3067,3.667,3068,3.667,3069,2.343,3070,2.343,3071,2.343,3072,2.343,3073,4.517,3074,2.343,3075,2.343,3076,3.667,3077,2.343,3078,2.343,3079,3.344,3080,5.546,3081,4.517,3082,2.343,3083,2.343,3084,2.343,3085,5.546,3086,2.343,3087,2.343,3088,3.667,3089,2.343,3090,2.343,3091,3.667,3092,2.343,3093,3.667,3094,2.343,3095,3.667,3096,3.667,3097,2.343,3098,2.343,3099,2.343,3107,4.156,3108,4.156,3109,4.156,3110,4.156,3111,4.156,3112,2.656,3113,2.656,3114,2.656,3115,2.656,3116,2.656,3117,2.656,3118,2.656,3119,2.656,3120,2.656,3121,2.656,3122,2.656]],["title/entities/StatusMapping.html",[1848,2.183,3037,3.099]],["body/entities/StatusMapping.html",[3,0.13,4,0.104,5,0.104,12,0.394,13,0.894,18,0.662,19,0.401,20,0.009,29,0.371,79,0.13,80,0.079,136,2.343,171,3.863,259,0.007,302,0.007,310,2.292,312,1.014,456,4.543,857,5.865,1064,4.361,1128,5.235,1158,3.246,1848,3.594,1849,3.532,1857,6.17,1874,5.948,3014,5.621,3037,5.101,3123,8.49,3124,5.884,3125,8.65,3126,5.884,3127,7.281,3128,5.884,3129,5.884,3130,5.884]],["title/classes/StatusUpdateDto.html",[80,0.059,2799,3.099]],["body/classes/StatusUpdateDto.html",[3,0.128,4,0.102,5,0.102,12,0.276,13,0.885,15,2.225,16,1.154,17,6.61,18,0.629,19,0.355,20,0.009,29,0.365,79,0.128,80,0.097,97,2.317,160,3.035,164,4.772,171,3.824,259,0.007,267,4.534,302,0.007,304,2.009,310,2.178,311,3.675,312,0.964,319,4.324,321,4.142,322,2.512,341,3.824,456,4.51,458,2.927,471,3.329,544,3.781,810,3.459,885,3.793,1128,5.197,2799,5.05,2805,7.247,3014,5.438,3131,5.789,3132,5.789,3133,5.789,3134,5.789,3135,5.789,3136,5.789,3137,7.208,3138,5.789]],["title/interfaces/TDataShape.html",[0,0.574,1033,3.099]],["body/interfaces/TDataShape.html",[0,0.865,2,1.044,3,0.077,4,0.062,5,0.062,11,1.844,12,0.167,13,0.629,16,1.103,18,0.567,19,0.387,20,0.009,24,1.727,27,1.566,29,0.381,38,2.802,60,2.17,79,0.18,87,1.616,91,1.857,95,1.857,97,1.125,98,1.215,107,2.477,109,0.818,127,2.943,129,1.352,136,0.925,137,1.67,141,1.431,142,2.201,159,1.67,161,2.807,163,1.727,175,3.537,190,1.291,193,2.683,195,2.118,206,3.224,211,1.67,219,2.945,225,3.12,229,1.93,238,1.154,250,2.255,258,2.99,259,0.005,302,0.005,314,1.28,316,1.518,338,2.709,346,0.842,430,2.117,442,1.997,445,3.537,470,3.095,474,1.67,627,2.667,894,2.201,896,2.201,898,2.201,899,2.201,903,2.317,906,2.943,909,3.811,911,1.184,912,3.636,918,2.641,930,2.317,937,2.1,958,2.011,959,2.451,960,4.97,961,4.524,962,2.201,963,3.825,964,3.825,965,2.613,966,2.943,967,2.613,968,3.954,969,4.67,970,2.613,971,2.317,972,2.613,973,4.194,974,2.317,975,2.201,976,1.93,977,2.613,978,2.613,979,2.613,980,2.613,981,3.588,982,3.588,983,2.613,984,2.613,985,2.451,986,2.613,987,3.825,988,2.613,989,4.01,990,2.613,991,2.451,992,2.613,993,3.811,994,2.613,995,2.451,996,3.222,997,2.613,998,2.613,999,3.222,1000,2.451,1001,2.201,1002,2.613,1003,2.1,1004,2.1,1005,1.518,1006,2.1,1007,2.451,1008,2.451,1009,2.613,1010,2.1,1011,2.613,1012,2.613,1013,2.201,1014,4.244,1015,4.979,1016,6.472,1017,4.524,1018,2.613,1019,4.259,1020,2.1,1021,3.588,1022,2.317,1023,2.451,1024,2.451,1025,2.451,1026,1.93,1027,2.201,1028,2.317,1029,2.451,1030,2.201,1031,2.1,1032,1.727,1033,3.588,1034,5.193,1035,2.451]],["title/interfaces/TokenPayload.html",[0,0.574,531,2.439]],["body/interfaces/TokenPayload.html",[0,0.824,2,1.896,3,0.14,4,0.112,5,0.112,7,1.326,9,3.814,11,1.792,12,0.303,13,0.937,18,0.626,19,0.287,20,0.009,29,0.4,33,1.12,38,2.325,79,0.168,89,3.022,98,2.648,109,1.015,110,1.447,160,2.675,225,2.525,256,3.651,259,0.008,302,0.008,471,3.524,531,4.51,542,4.207,558,2.757,559,6.334,627,2.389,911,2.149,1984,6.14,3139,6.354,3140,7.63,3141,6.354,3142,6.354,3143,6.354]],["title/classes/TokenResponse.html",[80,0.059,512,3.559]],["body/classes/TokenResponse.html",[3,0.148,4,0.118,5,0.118,12,0.319,13,0.966,18,0.66,19,0.356,20,0.009,79,0.148,80,0.09,259,0.008,302,0.008,304,2.321,312,1.026,324,4.427,512,6.329,545,6.724,547,7.372,548,6.24,592,4.013,2732,5.899,2733,5.899,2734,5.899,3144,8.624]],["title/classes/VCT.html",[80,0.059,1085,2.928]],["body/classes/VCT.html",[3,0.123,4,0.099,5,0.099,7,1.611,12,0.266,13,0.865,16,1.267,18,0.698,19,0.397,20,0.009,29,0.444,79,0.155,80,0.103,191,1.429,259,0.007,302,0.007,304,1.937,310,2.405,311,4.09,312,1.064,320,3.738,322,2.422,329,2.497,337,3.603,729,3.351,968,3.811,1085,5.535,1865,4.169,2449,7.736,2450,4.925,2453,6.81,2454,6.81,2455,6.81,3145,5.582,3146,5.582,3147,5.582,3148,5.582,3149,5.582,3150,5.582,3151,5.582]],["title/injectables/VaultKeyService.html",[30,0.945,2060,3.559]],["body/injectables/VaultKeyService.html",[3,0.054,4,0.043,5,0.043,11,0.574,12,0.117,13,0.478,15,1.742,16,1.08,18,0.689,19,0.382,20,0.009,21,2.042,22,1.822,23,4.23,29,0.466,30,0.832,33,0.431,34,2.469,35,0.848,47,2.759,48,1.207,56,1.348,61,1.857,79,0.054,80,0.033,86,2.705,87,1.129,89,1.387,93,1.054,94,2.379,95,1.297,104,1.404,109,1.182,110,1.48,118,1.675,132,1.424,135,1.835,137,1.166,146,2.642,147,2.068,151,2.702,163,1.921,188,1.404,190,2.037,191,1.423,194,2.727,213,2.675,216,1.712,219,0.971,221,3.132,223,1.967,235,1.618,238,1.599,241,1.618,247,2.042,250,1.64,259,0.004,270,2.042,285,1.348,289,1.921,294,2.675,302,0.004,309,1.559,312,0.982,314,2.023,338,0.786,346,0.936,420,2.911,470,2.485,471,2.24,510,2.542,518,2.033,558,2.104,598,1.467,627,0.919,635,1.618,658,4.13,688,0.944,722,3.563,764,1.404,791,3.469,836,1.618,885,1.129,911,1.316,922,1.25,968,1.921,1027,1.538,1031,1.467,1141,1.25,1193,2.911,1209,3.132,1213,4.45,1220,5.953,1229,4.637,1236,3.211,1276,1.207,1282,2.156,1287,1.348,1292,1.967,1328,1.967,1338,2.156,1345,3.132,1371,1.618,1382,3.434,1417,1.967,1421,1.967,1466,2.907,1483,2.727,1488,2.727,1495,1.967,1524,2.727,1525,1.712,1572,2.156,1576,3.132,1577,5.429,1582,3.132,1584,4.859,1591,3.132,1593,1.967,1594,3.479,1595,4.879,1602,2.156,1605,1.967,1606,1.538,1633,2.156,1702,1.467,1723,1.618,1770,2.907,1939,3.132,1990,1.967,2060,3.132,2061,6.975,2063,4.506,2064,1.348,2073,2.156,2120,2.907,2210,3.434,2275,2.907,2317,4.13,2318,1.618,2421,3.434,2511,1.967,2711,3.132,2718,2.156,2721,6.179,2878,5.327,3152,7.552,3153,4.849,3154,3.892,3155,3.892,3156,3.892,3157,3.892,3158,2.444,3159,3.892,3160,2.444,3161,5.53,3162,6.432,3163,3.892,3164,3.892,3165,2.444,3166,6.038,3167,2.444,3168,2.444,3169,3.892,3170,3.892,3171,2.444,3172,2.444,3173,2.444,3174,3.892,3175,2.444,3176,3.892,3177,2.444,3178,2.444,3179,3.892,3180,3.892,3181,2.444,3182,2.444,3183,2.444,3184,2.444,3185,5.53,3186,2.444,3187,2.444,3188,2.444,3189,2.444,3190,2.444,3191,2.444,3192,2.444,3193,2.444,3194,2.444,3195,2.444,3196,2.444,3197,2.444,3198,3.892,3199,2.444,3200,2.444,3201,2.444,3202,2.444,3203,2.444,3204,2.444,3205,3.892,3206,2.444,3207,2.444,3208,2.444,3209,2.444,3210,2.444,3211,2.444,3212,2.444,3213,2.444,3214,2.444,3215,2.444,3216,2.444,3217,2.156,3218,2.444,3219,2.444,3220,4.849,3221,2.444,3222,2.444,3223,2.444,3224,2.444,3225,2.444,3226,2.444,3227,6.746,3228,2.444,3229,3.892,3230,2.444,3231,3.892,3232,4.849,3233,4.849,3234,2.444,3235,3.892,3236,3.892,3237,2.444,3238,4.879,3239,2.444,3240,2.444,3241,4.849,3242,5.53,3243,4.849,3244,3.892,3245,2.444,3246,3.892,3247,2.444,3248,3.892,3249,4.849,3250,2.444,3251,2.444,3252,2.444,3253,3.892,3254,2.444,3255,2.444,3256,2.444,3257,2.444,3258,2.444,3259,2.444,3260,2.444]],["title/modules/VerifierModule.html",[357,1.387,376,3.099]],["body/modules/VerifierModule.html",[3,0.132,4,0.106,5,0.106,20,0.009,29,0.554,33,1.051,79,0.132,80,0.08,259,0.007,302,0.007,357,2.494,359,2.587,360,2.845,361,3.049,362,3.049,363,2.845,364,2.944,365,2.944,369,4.604,374,5.459,375,5.209,376,6.413,377,3.754,378,3.049,379,2.845,382,3.503,385,3.751,393,4.798,404,4.453,1956,5.459,2062,5.143,2064,3.289,2294,5.459,2297,5.261,2498,5.261,3261,5.963,3262,5.963,3263,5.963]],["title/classes/WebHookAuthConfig.html",[80,0.059,330,3.303]],["body/classes/WebHookAuthConfig.html",[3,0.114,4,0.091,5,0.091,7,1.077,12,0.246,13,0.823,16,0.726,18,0.57,19,0.407,20,0.009,22,2.01,29,0.422,60,2.276,79,0.174,80,0.109,87,3.769,97,2.737,129,1.995,191,0.956,202,3.541,259,0.007,302,0.007,303,5.882,304,1.792,305,3.856,306,5.282,307,5.557,308,4.155,309,1.731,310,1.859,311,3.524,312,0.823,314,2.452,315,4.023,316,2.908,318,3.856,319,3.856,320,3.948,321,3.851,322,2.24,323,2.24,324,3.419,325,4.155,326,3.419,327,5.557,328,5.134,329,3.742,330,5.882,331,5.393,332,3.427,333,5.393,334,3.697,335,3.617,336,3.617,337,2.641,338,2.155,339,3.099,340,3.419,341,2.74,3264,5.163,3265,5.163,3266,5.163]],["title/classes/WebhookConfig.html",[80,0.059,337,2.262]],["body/classes/WebhookConfig.html",[3,0.114,4,0.091,5,0.091,7,1.076,12,0.246,13,0.822,16,1.106,18,0.602,19,0.398,20,0.009,22,1.938,29,0.422,60,1.577,79,0.174,80,0.109,87,3.635,97,2.736,129,2.873,191,0.955,202,3.627,259,0.007,302,0.007,303,5.553,304,1.79,305,3.851,306,5.235,307,5.878,308,4.149,309,1.729,310,1.858,311,3.65,312,0.822,314,2.45,315,4.019,316,2.905,318,3.851,319,3.851,320,3.946,321,3.848,322,2.237,323,2.237,324,3.414,325,4.149,326,3.414,327,5.001,328,4.678,329,3.741,330,5.878,331,4.149,332,2.637,333,4.149,334,2.844,335,4.691,336,4.691,337,3.424,338,2.622,339,4.019,340,4.433,341,3.553,3267,5.156,3268,5.156,3269,5.156]],["title/controllers/WellKnownController.html",[342,1.576,381,3.559]],["body/controllers/WellKnownController.html",[3,0.103,4,0.082,5,0.082,7,1.476,12,0.222,16,0.994,18,0.654,19,0.357,20,0.009,22,1.742,29,0.532,33,0.822,47,2.893,48,2.3,79,0.103,80,0.062,86,2.393,93,1.262,94,1.536,106,3.092,109,1.13,119,4.58,135,1.961,146,2.612,147,1.498,151,2.603,190,1.784,191,1.31,259,0.006,302,0.006,310,1.963,312,0.869,314,1.705,323,3.602,342,2.521,344,1.801,346,1.506,350,2.224,381,5.04,386,5.04,387,6.673,502,2.3,518,1.871,534,3.599,540,3.48,611,7.17,612,5.04,627,2.354,641,4.246,649,3.492,650,4.388,690,6.241,702,3.75,739,3.715,810,2.637,1005,2.717,1047,3.75,1048,5.299,1052,4.965,1232,6.241,1247,4.111,1287,2.57,1459,4.388,1474,3.759,1475,3.48,1875,4.111,1910,4.45,1911,3.75,1950,4.388,2096,6.087,2162,4.111,2183,4.111,2704,4.111,3025,5.525,3270,4.66,3271,4.66,3272,7.564,3273,6.263,3274,4.66,3275,6.263,3276,4.66,3277,4.66,3278,4.66,3279,4.66,3280,4.66,3281,4.66,3282,4.66,3283,4.66,3284,6.263,3285,4.66,3286,4.66,3287,4.66,3288,4.66,3289,4.66,3290,4.66,3291,4.66,3292,4.66]],["title/changelog.html",[1074,2.755,2938,2.755,3293,3.689]],["body/changelog.html",[5,0.092,20,0.007,22,1.284,60,1.595,84,3.654,101,3.654,106,3.691,107,2.133,129,2.016,149,2.334,211,4.127,212,3.896,259,0.007,294,2.877,302,0.008,316,2.263,329,3.018,338,2.169,396,3.654,420,3.131,445,2.489,515,3.454,539,4.198,599,3.454,601,2.667,985,3.654,989,3.454,1027,3.281,1031,4.488,1066,3.454,1328,4.198,1344,4.602,1351,4.602,1644,4.198,1645,3.896,1691,4.602,1702,3.131,2026,5.952,2177,3.454,2306,4.198,2583,6.017,2741,3.454,3294,5.216,3295,7.631,3296,8.649,3297,8.649,3298,8.649,3299,9.012,3300,6.746,3301,5.584,3302,5.216,3303,6.597,3304,6.746,3305,5.216,3306,6.746,3307,5.216,3308,5.216,3309,5.216,3310,5.216,3311,5.216,3312,5.216,3313,5.216,3314,6.746,3315,7.477,3316,5.216,3317,6.746,3318,5.216,3319,5.216,3320,5.216,3321,5.216,3322,5.216,3323,5.216,3324,5.216,3325,5.216,3326,5.216,3327,5.216,3328,5.216,3329,5.216,3330,5.952,3331,5.216,3332,5.216,3333,5.216,3334,5.216,3335,4.602,3336,5.216,3337,5.216,3338,5.216,3339,5.216,3340,5.216,3341,5.216,3342,5.216,3343,5.216,3344,5.216,3345,5.216,3346,5.216,3347,4.602,3348,5.216,3349,5.216,3350,5.216,3351,5.216,3352,5.216,3353,5.216,3354,5.216,3355,5.216,3356,5.216,3357,5.216,3358,5.216,3359,5.216,3360,5.216,3361,5.216,3362,5.216,3363,5.216,3364,5.216,3365,5.216,3366,5.216,3367,5.216,3368,4.602,3369,5.216,3370,4.602,3371,5.216,3372,4.602,3373,5.216,3374,5.216,3375,5.216,3376,5.216,3377,5.216]],["title/dependencies.html",[360,2.54,3378,3.255]],["body/dependencies.html",[20,0.009,33,0.986,35,1.94,37,4.499,38,2.046,64,3.084,65,3.213,80,0.095,259,0.007,302,0.007,318,4.175,322,2.425,350,2.668,360,2.668,384,3.356,395,4.932,396,3.917,406,4.499,415,3.917,416,5.769,444,4.932,493,3.701,510,2.969,544,2.501,574,4.175,640,3.084,724,3.701,933,4.499,1052,3.517,1064,3.084,1141,4.148,1142,4.175,1143,4.175,1145,4.175,1146,3.701,1150,3.517,1155,2.966,1158,3.084,1276,2.76,1474,3.356,1604,4.175,1606,3.517,1689,4.499,1915,3.517,1987,4.499,2020,4.932,2022,4.932,2064,3.084,2318,3.701,3036,4.499,3379,7.052,3380,5.59,3381,7.725,3382,5.59,3383,5.59,3384,5.59,3385,5.59,3386,5.59,3387,5.59,3388,5.59,3389,7.052,3390,8.112,3391,8.112,3392,8.112,3393,5.59,3394,5.59,3395,8.112,3396,5.59,3397,5.59,3398,5.59,3399,5.59,3400,5.59,3401,5.59,3402,5.59,3403,5.59,3404,5.59,3405,5.59,3406,5.59,3407,5.59,3408,5.59,3409,5.59,3410,5.59,3411,5.59,3412,5.59,3413,5.59,3414,5.59,3415,5.59,3416,5.59]],["title/miscellaneous/enumerations.html",[3417,2.443,3418,4.695]],["body/miscellaneous/enumerations.html",[11,1.628,12,0.331,19,0.314,20,0.009,195,1.833,259,0.008,302,0.008,309,2.074,326,4.589,601,3.545,666,5.053,880,3.594,1913,5.318,1915,5.053,2112,5.177,2483,5.578,3417,4.589,3418,6.116,3419,6.932]],["title/miscellaneous/functions.html",[3417,2.443,3420,4.695]],["body/miscellaneous/functions.html",[11,2.091,12,0.303,16,1.148,19,0.37,20,0.009,135,1.748,141,2.594,143,3.645,175,4.044,190,1.599,191,1.513,195,2.016,246,3.763,259,0.008,270,3.209,302,0.008,363,4.045,415,4.444,518,2.161,725,5.34,772,4.444,1026,3.498,1246,5.596,1310,6.102,2588,5.104,2597,5.104,2621,6.133,3417,4.199,3420,5.596,3421,6.343,3422,6.343,3423,6.343,3424,7.622,3425,6.343,3426,5.596,3427,6.343,3428,6.343,3429,6.343,3430,6.343,3431,7.622,3432,5.596]],["title/index.html",[12,0.176,1074,2.755,2938,2.755]],["body/index.html",[4,0.109,19,0.206,20,0.009,22,1.722,38,1.666,60,1.393,87,3.616,89,2.197,97,1.464,99,3.664,132,1.666,134,4.082,159,2.942,160,1.917,201,3.19,203,3.015,214,3.664,259,0.006,288,2.864,302,0.006,306,3.701,316,1.975,332,2.328,351,6.301,356,4.017,432,5.44,464,3.015,466,3.19,474,2.173,493,4.082,510,1.917,519,2.328,539,4.962,542,3.015,543,3.664,544,2.037,552,2.864,637,2.616,657,3.4,739,2.037,800,4.305,810,1.917,833,3.879,837,5.626,875,6.301,892,3.664,916,3.4,966,2.616,1005,1.975,1008,3.19,1064,2.511,1066,3.015,1090,2.864,1141,2.328,1146,3.015,1310,3.4,1352,4.017,1406,2.511,1456,3.664,1466,3.4,1504,4.017,1618,4.017,1680,4.017,1827,3.015,1841,3.4,1882,3.701,2307,5.221,2368,4.017,2424,4.017,2711,4.962,2886,3.19,2961,3.664,3238,5.44,3301,3.4,3303,4.017,3330,5.44,3335,6.61,3368,6.168,3370,4.017,3433,4.553,3434,6.166,3435,4.553,3436,4.553,3437,6.991,3438,6.166,3439,4.553,3440,4.553,3441,6.166,3442,3.664,3443,4.553,3444,4.553,3445,6.166,3446,4.553,3447,4.553,3448,4.553,3449,4.553,3450,6.166,3451,4.553,3452,4.553,3453,4.553,3454,4.553,3455,4.553,3456,4.553,3457,4.553,3458,4.553,3459,4.553,3460,4.553,3461,4.553,3462,4.553,3463,4.553,3464,4.553,3465,4.553,3466,4.553,3467,4.553,3468,4.553,3469,4.553,3470,6.166,3471,4.553,3472,4.553,3473,4.017,3474,4.553,3475,4.553,3476,6.166,3477,4.017,3478,4.553,3479,4.553,3480,4.553,3481,4.553,3482,4.553,3483,6.166,3484,4.553,3485,6.166,3486,4.553,3487,4.553,3488,4.553,3489,4.553,3490,4.553,3491,6.166,3492,4.553,3493,4.553,3494,4.553,3495,4.553,3496,4.553,3497,4.553,3498,6.166,3499,6.166,3500,4.553,3501,4.553,3502,4.553,3503,4.553,3504,4.553,3505,6.166,3506,4.553,3507,6.166,3508,4.553,3509,4.553,3510,6.991,3511,4.553,3512,4.553,3513,4.017,3514,4.553,3515,4.553,3516,4.553,3517,4.553,3518,4.553,3519,4.553,3520,4.017,3521,4.553,3522,4.553,3523,4.553,3524,4.553,3525,4.553,3526,6.61,3527,4.017,3528,6.166,3529,4.553,3530,4.553,3531,4.553,3532,6.166,3533,4.553,3534,4.553,3535,4.553,3536,4.553,3537,4.553,3538,4.017,3539,4.553,3540,4.553,3541,4.553,3542,4.553,3543,4.553,3544,4.553,3545,4.553,3546,4.553,3547,4.553,3548,4.553,3549,4.553,3550,4.605,3551,4.017,3552,4.017,3553,3.664,3554,3.664]],["title/license.html",[1074,2.755,2938,2.755,3550,2.755]],["body/license.html",[2,0.766,4,0.138,5,0.126,7,0.536,20,0.007,24,1.267,29,0.162,46,3.021,70,1.615,73,5.475,80,0.034,97,0.825,107,3.069,132,0.939,134,1.699,138,4.349,159,1.225,168,1.313,185,3.021,191,0.749,211,1.931,212,1.917,252,4.03,256,2.325,258,1.267,259,0.004,273,2.065,274,4.573,279,1.917,302,0.004,312,0.315,315,1.541,316,2.466,334,3.135,341,3.281,354,1.798,355,1.541,379,1.225,474,1.225,490,4.573,552,1.615,594,1.699,637,2.877,640,2.231,780,4.03,801,1.699,815,1.699,820,2.428,865,1.541,885,1.185,909,1.615,911,2.222,916,1.917,922,4.038,928,2.065,971,2.679,976,1.416,981,1.798,995,1.798,1006,3.411,1059,3.256,1062,2.265,1066,1.699,1090,1.615,1170,3.256,1365,2.265,1470,6.194,1662,4.618,1671,4.976,1683,2.265,1723,1.699,1805,1.917,1848,3.705,1849,1.541,1882,1.541,1934,3.569,2106,5.014,2120,4.244,2127,2.265,2201,3.569,2305,2.065,2407,1.917,2427,2.265,2488,2.065,2515,2.265,2650,3.569,2701,2.265,2768,2.065,2888,4.418,2890,2.265,2891,3.569,3079,3.256,3217,2.265,3295,2.265,3301,3.74,3347,2.265,3372,2.265,3473,3.569,3477,2.265,3513,2.265,3520,2.265,3526,4.418,3527,2.265,3538,2.265,3550,6.602,3551,2.265,3552,6.468,3553,4.573,3554,4.03,3555,2.567,3556,2.567,3557,2.567,3558,7.331,3559,7.895,3560,5.683,3561,6.184,3562,2.567,3563,8.082,3564,7.506,3565,2.567,3566,2.567,3567,7.506,3568,7.783,3569,6.184,3570,4.046,3571,2.567,3572,6.184,3573,2.567,3574,2.567,3575,5.683,3576,2.567,3577,2.567,3578,5.683,3579,4.046,3580,4.046,3581,2.567,3582,5.007,3583,4.046,3584,4.046,3585,2.567,3586,4.046,3587,2.567,3588,4.046,3589,2.567,3590,2.567,3591,2.567,3592,2.567,3593,2.567,3594,2.567,3595,5.007,3596,2.567,3597,5.007,3598,4.046,3599,6.569,3600,5.683,3601,4.046,3602,5.007,3603,2.567,3604,2.567,3605,2.567,3606,2.567,3607,2.567,3608,2.567,3609,2.567,3610,8.84,3611,5.007,3612,2.567,3613,7.331,3614,4.046,3615,2.567,3616,4.046,3617,2.567,3618,8.294,3619,8.351,3620,2.567,3621,2.567,3622,2.567,3623,2.567,3624,2.567,3625,2.567,3626,4.046,3627,5.007,3628,2.567,3629,2.567,3630,2.567,3631,2.567,3632,5.683,3633,6.184,3634,2.567,3635,4.046,3636,5.683,3637,4.046,3638,2.567,3639,6.184,3640,2.567,3641,2.567,3642,5.007,3643,2.567,3644,2.567,3645,2.567,3646,4.046,3647,2.567,3648,2.567,3649,2.567,3650,5.007,3651,2.567,3652,2.567,3653,2.567,3654,7.506,3655,2.567,3656,4.046,3657,7.125,3658,4.046,3659,4.046,3660,4.046,3661,5.007,3662,4.046,3663,5.007,3664,4.046,3665,4.046,3666,4.046,3667,4.046,3668,2.567,3669,6.184,3670,6.876,3671,5.007,3672,4.046,3673,2.567,3674,4.046,3675,2.567,3676,2.567,3677,5.007,3678,2.567,3679,2.567,3680,2.567,3681,5.007,3682,2.567,3683,2.567,3684,2.567,3685,4.046,3686,4.046,3687,2.567,3688,2.567,3689,2.567,3690,2.567,3691,2.567,3692,2.567,3693,2.567,3694,4.046,3695,2.567,3696,2.567,3697,2.567,3698,2.567,3699,2.567,3700,2.567,3701,2.567,3702,5.007,3703,2.567,3704,2.567,3705,2.567,3706,2.567,3707,2.567,3708,7.125,3709,2.567,3710,2.567,3711,2.567,3712,2.567,3713,2.567,3714,5.683,3715,4.046,3716,2.567,3717,2.567,3718,2.567,3719,5.007,3720,2.567,3721,2.567,3722,4.046,3723,2.567,3724,2.567,3725,2.567,3726,2.567,3727,2.567,3728,2.567,3729,2.567,3730,2.567,3731,2.567,3732,2.567,3733,5.007,3734,5.683,3735,2.567,3736,2.567,3737,2.567,3738,2.567,3739,2.567,3740,2.567,3741,2.567,3742,2.567,3743,2.567,3744,2.567,3745,4.046,3746,2.567,3747,2.567,3748,4.046,3749,2.567,3750,2.567,3751,2.567,3752,2.567,3753,2.567,3754,2.567,3755,2.567,3756,2.567,3757,5.683,3758,5.007,3759,5.007,3760,5.007,3761,4.046,3762,5.007,3763,4.046,3764,4.046,3765,4.046,3766,2.567,3767,2.567,3768,2.567,3769,2.567,3770,2.567,3771,2.567,3772,2.567,3773,4.046,3774,2.567,3775,2.567,3776,6.184,3777,2.567,3778,2.567,3779,2.567,3780,2.567,3781,2.567,3782,2.567,3783,2.567,3784,2.567,3785,6.184,3786,2.567,3787,2.567,3788,2.567,3789,2.567,3790,2.567,3791,2.567,3792,2.567,3793,2.567,3794,2.567,3795,2.567,3796,2.567,3797,2.567,3798,2.567,3799,2.567,3800,2.567,3801,5.007,3802,2.567,3803,2.567,3804,2.567,3805,4.046,3806,2.567,3807,2.567,3808,2.567,3809,2.567,3810,2.567,3811,2.567,3812,2.567,3813,2.567,3814,2.567,3815,2.567,3816,2.567,3817,2.567,3818,2.567,3819,2.567,3820,4.046,3821,2.567,3822,2.567,3823,4.046,3824,4.046,3825,2.567,3826,2.567,3827,2.567,3828,2.567,3829,2.567,3830,2.567,3831,2.567,3832,2.567,3833,2.265,3834,2.265,3835,2.567,3836,2.567,3837,2.567,3838,2.567,3839,2.567,3840,2.567]],["title/modules.html",[359,2.623]],["body/modules.html",[20,0.008,259,0.008,302,0.008,358,4.72,359,2.742,368,4.428,369,4.036,370,4.428,371,4.428,372,4.428,373,4.428,374,3.976,375,3.794,376,4.428,552,5.133,1066,6.063,1956,3.976,1957,4.185,2294,3.976,2493,4.428,3841,9.157,3842,9.157,3843,9.233,3844,8.158]],["title/overview.html",[3442,4.865]],["body/overview.html",[2,1.207,20,0.009,47,3.436,52,4.798,69,5.292,259,0.006,302,0.006,304,1.404,344,1.563,357,1.268,358,6.715,359,1.755,360,1.93,361,2.068,362,2.068,363,1.93,364,1.997,365,1.997,366,3.568,367,3.568,368,6.096,369,4.69,370,4.991,371,4.602,372,6.315,373,4.602,374,5.394,375,5.1,376,6.055,377,2.906,378,2.068,379,1.93,524,5.292,526,4.349,567,3.568,568,3.568,569,3.568,570,5.029,571,5.97,641,4.798,644,4.409,688,1.563,698,4.798,699,3.774,1112,4.798,1221,3.568,1222,3.568,1223,3.568,1224,5.6,1340,3.02,1849,2.428,1910,5.029,1952,3.568,1953,3.568,1954,3.568,1955,3.568,1956,5.605,1957,5.491,1958,4.482,1959,4.482,2290,3.568,2291,3.568,2292,3.568,2293,3.568,2294,5.287,2489,3.568,2490,3.568,2491,3.568,2492,3.568,2493,5.452,2512,5.6,2645,3.568,2647,3.568,2648,3.568,2688,3.568,2689,3.568,2690,3.568,2741,2.678,2950,3.568,2952,3.568,2953,3.568,2961,3.255,3100,3.568,3101,3.568,3102,3.568,3442,3.255,3845,4.044,3846,4.044,3847,4.044]],["title/properties.html",[13,0.653,3378,3.255]],["body/properties.html",[7,1.472,13,0.866,20,0.009,259,0.008,302,0.008,3301,5.269,3550,5.269,3553,5.677,3554,5.677,3833,6.224,3834,6.224,3848,7.055,3849,7.055]],["title/miscellaneous/typealiases.html",[3417,2.443,3850,5.322]],["body/miscellaneous/typealiases.html",[9,1.845,12,0.147,18,0.235,19,0.419,20,0.009,38,2.765,71,1.845,97,1.495,98,1.614,141,3.393,142,2.925,143,1.766,159,2.219,163,2.295,193,0.988,202,1.333,206,1.294,219,1.221,225,1.221,229,2.565,258,1.517,259,0.005,302,0.005,305,2.295,306,1.845,307,2.295,316,2.017,326,2.035,327,3.472,442,1.013,445,2.984,458,1.095,470,1.187,471,1.419,487,2.711,494,3.472,598,5.556,748,1.572,791,2.672,810,1.958,894,2.925,896,2.925,898,2.925,899,2.925,900,3.472,901,2.467,911,1.573,912,2.791,922,2.868,925,1.695,937,2.791,958,2.672,959,2.153,960,3.257,982,3.257,989,3.078,1013,1.933,1014,3.257,1019,1.845,1021,4.95,1022,3.078,1023,3.257,1024,3.257,1025,3.257,1026,2.565,1027,2.925,1028,3.078,1029,3.257,1030,2.925,1031,2.791,1034,3.257,1035,3.257,1051,1.933,1077,2.925,1193,1.845,1199,2.711,1200,5.517,1209,3.742,1217,3.742,1228,2.711,1243,4.102,1409,2.711,1417,3.742,1421,2.473,1517,2.473,1521,3.742,1522,3.742,1524,2.153,1526,3.742,1534,3.742,1697,2.295,1727,4.06,1728,2.791,1729,2.791,1730,4.405,1731,2.791,1732,2.791,1733,2.672,1734,3.754,1830,3.472,1832,3.472,1833,3.472,1848,1.517,2622,2.711,2624,3.713,2685,4.102,2736,2.153,2738,3.257,2766,2.711,2788,2.153,3417,2.035,3426,2.711,3432,2.711,3851,3.073,3852,4.649,3853,9.305,3854,4.649,3855,4.649,3856,5.608,3857,4.649,3858,4.649,3859,4.649,3860,4.649,3861,4.649,3862,5.608,3863,4.649,3864,4.649,3865,4.649,3866,5.608,3867,4.649,3868,4.649,3869,7.066,3870,6.717,3871,3.073,3872,3.073,3873,4.649,3874,7.886,3875,4.649,3876,4.649,3877,3.073,3878,4.649,3879,4.649,3880,4.649,3881,5.608,3882,4.649,3883,5.608,3884,4.649,3885,6.253,3886,4.649,3887,4.649,3888,5.608,3889,4.649,3890,5.608,3891,4.649,3892,5.608,3893,4.649,3894,4.649,3895,3.073,3896,4.649,3897,4.649,3898,4.649,3899,4.649,3900,5.608,3901,4.649,3902,4.649,3903,5.608,3904,4.649,3905,4.649,3906,4.649,3907,4.649,3908,5.608,3909,4.649,3910,3.073,3911,4.649,3912,4.649,3913,4.649,3914,5.608,3915,4.649,3916,4.649,3917,4.649,3918,4.649,3919,4.649,3920,5.608,3921,4.649,3922,5.608,3923,4.649,3924,5.608,3925,4.649,3926,4.649,3927,5.608,3928,4.649,3929,4.649,3930,4.649,3931,5.608,3932,4.649,3933,4.649,3934,5.608,3935,4.649,3936,4.649,3937,4.649,3938,4.649,3939,3.073,3940,4.649,3941,4.649,3942,5.608,3943,4.649,3944,4.649,3945,5.608,3946,3.073,3947,3.073,3948,3.073,3949,3.073]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":267,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{}}}],["0.0.1",{"_index":3848,"title":{},"body":{"properties.html":{}}}],["0.14.0",{"_index":3395,"title":{},"body":{"dependencies.html":{}}}],["0.14.2",{"_index":3398,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":3411,"title":{},"body":{"dependencies.html":{}}}],["0.3.0",{"_index":3390,"title":{},"body":{"dependencies.html":{}}}],["0.3.25",{"_index":3415,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":3060,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["0.5.1",{"_index":3397,"title":{},"body":{"dependencies.html":{}}}],["07",{"_index":3296,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":3351,"title":{},"body":{"changelog.html":{}}}],["0x00",{"_index":3246,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["1",{"_index":885,"title":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService-1.html":{}},"body":{"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"injectables/VaultKeyService.html":{},"license.html":{}}}],["1.0.0",{"_index":3350,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":3338,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":3332,"title":{},"body":{"changelog.html":{}}}],["1.10.0",{"_index":3396,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":3318,"title":{},"body":{"changelog.html":{}}}],["1.2.1",{"_index":3314,"title":{},"body":{"changelog.html":{}}}],["1.2.2",{"_index":3309,"title":{},"body":{"changelog.html":{}}}],["1.2.3",{"_index":3294,"title":{},"body":{"changelog.html":{}}}],["1.5.4",{"_index":3409,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":3339,"title":{},"body":{"changelog.html":{}}}],["10,000",{"_index":3046,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["10.5.0",{"_index":3407,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":799,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["1000",{"_index":183,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["10000",{"_index":3053,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["11",{"_index":3333,"title":{},"body":{"changelog.html":{}}}],["11.0.0",{"_index":3389,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":3384,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":3416,"title":{},"body":{"dependencies.html":{}}}],["11.1.3",{"_index":3381,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":3388,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":3846,"title":{},"body":{"overview.html":{}}}],["12/schema",{"_index":2731,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["12395c8",{"_index":3358,"title":{},"body":{"changelog.html":{}}}],["13.0.0",{"_index":3408,"title":{},"body":{"dependencies.html":{}}}],["15",{"_index":3845,"title":{},"body":{"overview.html":{}}}],["17.13.3",{"_index":3399,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":3315,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":3310,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":294,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["2.0",{"_index":3554,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["20",{"_index":2741,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"changelog.html":{},"overview.html":{}}}],["200",{"_index":509,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["2004",{"_index":3556,"title":{},"body":{"license.html":{}}}],["201",{"_index":1894,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["2025",{"_index":3295,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["20250602121005",{"_index":3392,"title":{},"body":{"dependencies.html":{}}}],["24",{"_index":2961,"title":{},"body":{"modules/SessionModule.html":{},"index.html":{},"overview.html":{}}}],["24h",{"_index":549,"title":{},"body":{"controllers/AuthController.html":{}}}],["256",{"_index":1181,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{}}}],["259ab39",{"_index":3302,"title":{},"body":{"changelog.html":{}}}],["2742ec4",{"_index":3377,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":3847,"title":{},"body":{"overview.html":{}}}],["2913417",{"_index":3308,"title":{},"body":{"changelog.html":{}}}],["295428b",{"_index":3313,"title":{},"body":{"changelog.html":{}}}],["2a71850",{"_index":3362,"title":{},"body":{"changelog.html":{}}}],["2aa727a",{"_index":3307,"title":{},"body":{"changelog.html":{}}}],["2f07af2",{"_index":3361,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":1328,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["3.0.1",{"_index":3383,"title":{},"body":{"dependencies.html":{}}}],["3.14.1",{"_index":3402,"title":{},"body":{"dependencies.html":{}}}],["3.2.0",{"_index":3379,"title":{},"body":{"dependencies.html":{}}}],["300",{"_index":796,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["3000:3000",{"_index":3509,"title":{},"body":{"index.html":{}}}],["32",{"_index":3238,"title":{},"body":{"injectables/VaultKeyService.html":{},"index.html":{}}}],["32fbd8e",{"_index":3323,"title":{},"body":{"changelog.html":{}}}],["33",{"_index":3244,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["33ac2c7",{"_index":3364,"title":{},"body":{"changelog.html":{}}}],["35f4d1e",{"_index":3336,"title":{},"body":{"changelog.html":{}}}],["3600",{"_index":2252,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["365",{"_index":1337,"title":{},"body":{"injectables/CryptoService.html":{}}}],["3ac47ec",{"_index":3355,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":1338,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/VaultKeyService.html":{}}}],["4.0.0",{"_index":3380,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":3404,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":3382,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":3403,"title":{},"body":{"dependencies.html":{}}}],["401",{"_index":513,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["404",{"_index":2620,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["40ccd32",{"_index":3357,"title":{},"body":{"changelog.html":{}}}],["45f3f7f",{"_index":3359,"title":{},"body":{"changelog.html":{}}}],["46c9ce6",{"_index":3331,"title":{},"body":{"changelog.html":{}}}],["4be0171",{"_index":3360,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":1340,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vpService.html":{},"overview.html":{}}}],["5.0.3",{"_index":3387,"title":{},"body":{"dependencies.html":{}}}],["5.1.7",{"_index":3414,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":3590,"title":{},"body":{"license.html":{}}}],["500",{"_index":661,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["54e8a4e",{"_index":3367,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":1344,"title":{},"body":{"injectables/CryptoService.html":{},"changelog.html":{}}}],["6.0.0",{"_index":3386,"title":{},"body":{"dependencies.html":{}}}],["6.0.11",{"_index":3400,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":2364,"title":{},"body":{"injectables/Oid4vpService.html":{},"modules/SessionModule.html":{}}}],["6a6cdb6",{"_index":3348,"title":{},"body":{"changelog.html":{}}}],["6bb4aa9",{"_index":3312,"title":{},"body":{"changelog.html":{}}}],["6d31de0",{"_index":3343,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":1351,"title":{},"body":{"injectables/CryptoService.html":{},"changelog.html":{}}}],["7.8.2",{"_index":3412,"title":{},"body":{"dependencies.html":{}}}],["7a6a69c",{"_index":3305,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":298,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["8.16.3",{"_index":3406,"title":{},"body":{"dependencies.html":{}}}],["892b30e",{"_index":3356,"title":{},"body":{"changelog.html":{}}}],["8f9498a",{"_index":3316,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":3566,"title":{},"body":{"license.html":{}}}],["905e17c",{"_index":3317,"title":{},"body":{"changelog.html":{}}}],["9104df3",{"_index":3320,"title":{},"body":{"changelog.html":{}}}],["91b5499",{"_index":3334,"title":{},"body":{"changelog.html":{}}}],["937603a",{"_index":3337,"title":{},"body":{"changelog.html":{}}}],["98303c1",{"_index":3369,"title":{},"body":{"changelog.html":{}}}],["_",{"_index":3259,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["_fns",{"_index":1698,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["_key",{"_index":2634,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["_url",{"_index":1736,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["_url.match(path_param_re",{"_index":1738,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["_url.startswith",{"_index":1800,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["a128gcm",{"_index":2358,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["above",{"_index":3737,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":2080,"title":{},"body":{"classes/KeyService.html":{}}}],["abstraction",{"_index":3460,"title":{},"body":{"index.html":{}}}],["ac4ee24",{"_index":3366,"title":{},"body":{"changelog.html":{}}}],["accept",{"_index":1935,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["acceptance",{"_index":3803,"title":{},"body":{"license.html":{}}}],["accepting",{"_index":3801,"title":{},"body":{"license.html":{}}}],["access",{"_index":9,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/typealiases.html":{}}}],["access_token",{"_index":545,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TokenResponse.html":{}}}],["accesscert",{"_index":2371,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscert?.length",{"_index":2383,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscertificate",{"_index":3852,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrolleraccesscertificatesdata",{"_index":3854,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrolleraccesscertificatesresponse",{"_index":3855,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrolleraccesscertificatesresponses",{"_index":3856,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerdeletedata",{"_index":3857,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerdeleteresponses",{"_index":3858,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerfindone",{"_index":40,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["accesscertificatecontrollerfindonedata",{"_index":3859,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerfindoneparseddata",{"_index":3860,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerfindoneparsedresponse",{"_index":3861,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerfindoneparsedresponses",{"_index":3862,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerfindoneresponses",{"_index":3863,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerregister",{"_index":41,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["accesscertificatecontrollerregisterdata",{"_index":3864,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerregisterresponse",{"_index":3865,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificatecontrollerregisterresponses",{"_index":3866,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificateid",{"_index":2642,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["accesscertificateregistration",{"_index":3867,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificateregistrationresponse",{"_index":3868,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["accesscertificateresponse",{"_index":1,"title":{"interfaces/AccessCertificateResponse.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["accessing",{"_index":96,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["accesstoken",{"_index":92,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["accesstokenrequest",{"_index":771,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["accordingly",{"_index":869,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["accounts",{"_index":565,"title":{},"body":{"controllers/AuthController.html":{}}}],["act",{"_index":3809,"title":{},"body":{"license.html":{}}}],["acting",{"_index":3574,"title":{},"body":{"license.html":{}}}],["action",{"_index":2323,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["acts",{"_index":3783,"title":{},"body":{"license.html":{}}}],["add",{"_index":211,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionService.html":{},"interfaces/TDataShape.html":{},"changelog.html":{},"license.html":{}}}],["add(issuer_state",{"_index":2971,"title":{},"body":{"injectables/SessionService.html":{}}}],["addaccesscertificate",{"_index":230,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["addaccesscertificate(config",{"_index":2668,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["added",{"_index":905,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["addendum",{"_index":3728,"title":{},"body":{"license.html":{}}}],["addext",{"_index":1334,"title":{},"body":{"injectables/CryptoService.html":{}}}],["adding",{"_index":74,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["additional",{"_index":1662,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/SessionLogContext.html":{},"license.html":{}}}],["additionaldata",{"_index":2914,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["additions",{"_index":3634,"title":{},"body":{"license.html":{}}}],["addregistrationcertificate",{"_index":245,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["addregistrationcertificate(req",{"_index":2670,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["address",{"_index":2590,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["addrp",{"_index":2662,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addrp(tenantid",{"_index":189,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["adds",{"_index":184,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["adjust",{"_index":3354,"title":{},"body":{"changelog.html":{}}}],["admin",{"_index":536,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["advancing",{"_index":3547,"title":{},"body":{"index.html":{}}}],["advised",{"_index":3799,"title":{},"body":{"license.html":{}}}],["against",{"_index":3686,"title":{},"body":{"license.html":{}}}],["agent",{"_index":472,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["agree",{"_index":3812,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":3760,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":3742,"title":{},"body":{"license.html":{}}}],["alg",{"_index":792,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["algorithm",{"_index":276,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/RegistrarService.html":{}}}],["algorithms",{"_index":1203,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["aliases",{"_index":3851,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":2178,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["alleging",{"_index":3691,"title":{},"body":{"license.html":{}}}],["allowed",{"_index":1565,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["allowedauthenticationschemes",{"_index":2215,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["allowedsigningalgs",{"_index":785,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["allowextra",{"_index":1518,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["allowing",{"_index":866,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["allowreserved",{"_index":1755,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["alone",{"_index":3682,"title":{},"body":{"license.html":{}}}],["along",{"_index":3720,"title":{},"body":{"license.html":{}}}],["alongside",{"_index":3727,"title":{},"body":{"license.html":{}}}],["alpha",{"_index":3391,"title":{},"body":{"dependencies.html":{}}}],["already",{"_index":203,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"index.html":{}}}],["always",{"_index":1030,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["amount",{"_index":1078,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["and/or",{"_index":3806,"title":{},"body":{"license.html":{}}}],["animo",{"_index":3481,"title":{},"body":{"index.html":{}}}],["annotations",{"_index":3623,"title":{},"body":{"license.html":{}}}],["any).issuer",{"_index":2049,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["anymore",{"_index":841,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["apache",{"_index":3553,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["api",{"_index":87,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"index.html":{}}}],["api/client",{"_index":987,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["apibody",{"_index":523,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apibody({description",{"_index":629,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["apiexcludecontroller",{"_index":349,"title":{},"body":{"controllers/AppController.html":{}}}],["apihideproperty",{"_index":1877,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["apihideproperty()@column('varchar",{"_index":1871,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["apikey",{"_index":328,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"injectables/Oid4vpService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["apikeyconfig",{"_index":303,"title":{"classes/ApiKeyConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["apioperation",{"_index":3284,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apioperation({summary",{"_index":3278,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apiproduces",{"_index":1905,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiproduces('application/json",{"_index":1925,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiproperty",{"_index":2118,"title":{},"body":{"classes/OfferRequest.html":{},"classes/OfferResponse.html":{}}}],["apiproperty({example",{"_index":2111,"title":{},"body":{"classes/OfferRequest.html":{}}}],["apiresponse",{"_index":522,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiresponse({description",{"_index":1893,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apisecurity",{"_index":1906,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["apisecurity('bearer",{"_index":1918,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["apitags",{"_index":521,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CredentialsController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{}}}],["apitags('authentication",{"_index":535,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('credentials",{"_index":1096,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["apitags('issuer",{"_index":1916,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["apitags('presentation",{"_index":2472,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["apitags('session",{"_index":2807,"title":{},"body":{"controllers/SessionController.html":{}}}],["apitags('status",{"_index":3023,"title":{},"body":{"controllers/StatusListController.html":{}}}],["app/app.controller",{"_index":402,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":343,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appear",{"_index":3724,"title":{},"body":{"license.html":{}}}],["appendix",{"_index":3616,"title":{},"body":{"license.html":{}}}],["applicable",{"_index":3758,"title":{},"body":{"license.html":{}}}],["application",{"_index":143,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["application/json",{"_index":1827,"title":{},"body":{"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"index.html":{}}}],["application/jwk",{"_index":3275,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["application/statuslist+jwt",{"_index":3021,"title":{},"body":{"controllers/StatusListController.html":{}}}],["applications",{"_index":983,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["applies",{"_index":3676,"title":{},"body":{"license.html":{}}}],["apply",{"_index":3820,"title":{},"body":{"license.html":{}}}],["appmodule",{"_index":358,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":995,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["appropriateness",{"_index":3772,"title":{},"body":{"license.html":{}}}],["architecture",{"_index":3539,"title":{},"body":{"index.html":{}}}],["archives",{"_index":3832,"title":{},"body":{"license.html":{}}}],["aren’t",{"_index":2755,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["arg",{"_index":1550,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["args",{"_index":1519,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["args.entries",{"_index":1551,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["arising",{"_index":3789,"title":{},"body":{"license.html":{}}}],["array",{"_index":907,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/Interceptors.html":{},"classes/JwksResponseDto.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["array(size",{"_index":3056,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["array(size).fill(0).map",{"_index":3054,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["array.isarray(dcql_query",{"_index":2338,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["array.isarray(value",{"_index":1405,"title":{},"body":{"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{}}}],["array['headers",{"_index":1814,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["arraybuffer",{"_index":1002,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["arraynotempty",{"_index":2117,"title":{},"body":{"classes/OfferRequest.html":{},"classes/OfferResponse.html":{}}}],["arraynotempty()@isstring({each",{"_index":2110,"title":{},"body":{"classes/OfferRequest.html":{}}}],["arrays",{"_index":920,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["arrays/objects",{"_index":2754,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["arrayseparatorstyle",{"_index":1734,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["arraystyle",{"_index":1727,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["asserted",{"_index":3818,"title":{},"body":{"license.html":{}}}],["associated",{"_index":2768,"title":{},"body":{"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"license.html":{}}}],["assume",{"_index":815,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"license.html":{}}}],["assuming",{"_index":2589,"title":{},"body":{"interfaces/PresentedData.html":{}}}],["async",{"_index":146,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["att",{"_index":2578,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attach",{"_index":3821,"title":{},"body":{"license.html":{}}}],["attached",{"_index":3615,"title":{},"body":{"license.html":{}}}],["attestation",{"_index":802,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["attestations",{"_index":2532,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attestations.map((att",{"_index":2579,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attestations—issuing",{"_index":3475,"title":{},"body":{"index.html":{}}}],["attribute",{"_index":3474,"title":{},"body":{"index.html":{}}}],["attribution",{"_index":3714,"title":{},"body":{"license.html":{}}}],["aud",{"_index":2361,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["audience",{"_index":566,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["audio",{"_index":1777,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["auth",{"_index":129,"title":{"interfaces/Auth.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{}}}],["auth.controller",{"_index":577,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":576,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.in",{"_index":1786,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["auth.name",{"_index":1785,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["auth.scheme",{"_index":498,"title":{},"body":{"interfaces/Auth.html":{}}}],["auth/auth.guard",{"_index":1907,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["auth/auth.module",{"_index":410,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/tenant",{"_index":67,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["auth/token.decorator",{"_index":1908,"title":{},"body":{"controllers/IssuerManagementController.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["auth_client_id",{"_index":589,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth_client_secret",{"_index":588,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["auth_client_secret=$(openssl",{"_index":3508,"title":{},"body":{"index.html":{}}}],["auth_client_secret=your",{"_index":3514,"title":{},"body":{"index.html":{}}}],["auth_queries",{"_index":660,"title":{},"body":{"controllers/AuthorizeController.html":{},"entities/Session.html":{}}}],["auth_session",{"_index":667,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["auth_validation_schema",{"_index":409,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["authconfig",{"_index":327,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/typealiases.html":{}}}],["authcontroller",{"_index":500,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["authenticating",{"_index":90,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["authentication",{"_index":306,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["authguard",{"_index":1988,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":1978,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":368,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":3849,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":323,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/PathSerializer.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["authorization_challenge_endpoint",{"_index":755,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorization_code",{"_index":774,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/Session.html":{}}}],["authorization_encrypted_response_alg",{"_index":2356,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_encrypted_response_enc",{"_index":2357,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_endpoint",{"_index":742,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorization_request",{"_index":2322,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerService.html":{}}}],["authorization_server",{"_index":1053,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["authorization_servers",{"_index":1054,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["authorizationchallengeendpoint",{"_index":614,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorizationchallengeendpoint(res",{"_index":617,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{}}}],["authorizationcodegrantidentifier",{"_index":720,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorizationresponse",{"_index":604,"title":{"classes/AuthorizationResponse.html":{}},"body":{"classes/AuthorizationResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["authorizationserver",{"_index":732,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorizationservermetadata",{"_index":704,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorizationservermetadata.dpop_signing_alg_values_supported",{"_index":786,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorizationservermetadata.issuer",{"_index":797,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authorizationservers",{"_index":2190,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["authorize",{"_index":615,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize(queries",{"_index":623,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize.service",{"_index":642,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize/authorize.controller",{"_index":1965,"title":{},"body":{"modules/IssuerModule.html":{}}}],["authorize/authorize.service",{"_index":1962,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{}}}],["authorizecontroller",{"_index":608,"title":{"controllers/AuthorizeController.html":{}},"body":{"controllers/AuthorizeController.html":{},"modules/IssuerModule.html":{}}}],["authorized",{"_index":3570,"title":{},"body":{"license.html":{}}}],["authorizequeries",{"_index":618,"title":{"classes/AuthorizeQueries.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/Session.html":{}}}],["authorizequeries})@post('par",{"_index":631,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorizeservice",{"_index":641,"title":{"injectables/AuthorizeService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/WellKnownController.html":{},"overview.html":{}}}],["authorship",{"_index":3611,"title":{},"body":{"license.html":{}}}],["authresponse",{"_index":590,"title":{"interfaces/AuthResponse.html":{}},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["authserver",{"_index":735,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authserver}/.well",{"_index":745,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authserver}/authorize",{"_index":743,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authserver}/authorize/challenge",{"_index":756,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authserver}/authorize/par",{"_index":752,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authserver}/authorize/token",{"_index":741,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["authtoken",{"_index":494,"title":{},"body":{"interfaces/Auth.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"miscellaneous/typealiases.html":{}}}],["authtype",{"_index":2418,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authz",{"_index":2369,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authzmetadata",{"_index":690,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/WellKnownController.html":{}}}],["authzmetadata(tenantid",{"_index":702,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/WellKnownController.html":{}}}],["authzservice",{"_index":2154,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["auto",{"_index":993,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["autoloadentities",{"_index":1447,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["available",{"_index":552,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"index.html":{},"license.html":{},"modules.html":{}}}],["avoid",{"_index":2889,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["await",{"_index":147,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["axios",{"_index":933,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"dependencies.html":{}}}],["b",{"_index":1805,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"license.html":{}}}],["b.headers",{"_index":1812,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["b3abd57",{"_index":3374,"title":{},"body":{"changelog.html":{}}}],["b989c6c",{"_index":3325,"title":{},"body":{"changelog.html":{}}}],["backend",{"_index":3437,"title":{},"body":{"index.html":{}}}],["badgateway/oauth2",{"_index":37,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"dependencies.html":{}}}],["badrequestexception",{"_index":2169,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["badrequestexception('session",{"_index":2256,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["bar",{"_index":2610,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["base",{"_index":970,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["base64",{"_index":2711,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"index.html":{}}}],["base64url",{"_index":3220,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["based",{"_index":134,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"index.html":{},"license.html":{}}}],["baseurl",{"_index":127,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["basic",{"_index":492,"title":{},"body":{"interfaces/Auth.html":{}}}],["basis",{"_index":3761,"title":{},"body":{"license.html":{}}}],["batch",{"_index":1068,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["batch_credential_issuance",{"_index":1055,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["batch_size",{"_index":1080,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["bearer",{"_index":324,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"classes/TokenResponse.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["become",{"_index":1023,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["beef4d2",{"_index":3329,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":811,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["begin",{"_index":1364,"title":{},"body":{"injectables/CryptoService.html":{}}}],["behalf",{"_index":3639,"title":{},"body":{"license.html":{}}}],["behavior",{"_index":997,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["being",{"_index":2819,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["below",{"_index":3617,"title":{},"body":{"license.html":{}}}],["beneficial",{"_index":3594,"title":{},"body":{"license.html":{}}}],["best",{"_index":1769,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["better",{"_index":2423,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["between",{"_index":597,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["bigint",{"_index":2635,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["binary",{"_index":1924,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["bind",{"_index":3631,"title":{},"body":{"license.html":{}}}],["bits",{"_index":3030,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["bitsperstatus",{"_index":3031,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["blob",{"_index":1003,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["body",{"_index":193,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["body.auth_session",{"_index":813,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["body.client_id",{"_index":555,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.client_secret",{"_index":556,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.code",{"_index":775,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["body.credentialconfigurationids",{"_index":2200,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.credentialconfigurationids.map((id",{"_index":2196,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.event",{"_index":2261,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.issuer_state",{"_index":804,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["body.notification_id",{"_index":2259,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.requestid",{"_index":2476,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["body.response",{"_index":2394,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["body.response_type",{"_index":1938,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["body.webhook",{"_index":2477,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["body_",{"_index":1528,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["bodyserializer",{"_index":900,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"interfaces/QuerySerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["boilerplate",{"_index":3822,"title":{},"body":{"license.html":{}}}],["boolean",{"_index":27,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{}}}],["bootstrap",{"_index":363,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":655,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["bound",{"_index":255,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["boundaries",{"_index":3487,"title":{},"body":{"index.html":{}}}],["brackets",{"_index":3824,"title":{},"body":{"license.html":{}}}],["branch",{"_index":3534,"title":{},"body":{"index.html":{}}}],["break",{"_index":1568,"title":{},"body":{"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{}}}],["bridges",{"_index":3436,"title":{},"body":{"index.html":{}}}],["browse",{"_index":3843,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3841,"title":{},"body":{"modules.html":{}}}],["btoa(token",{"_index":499,"title":{},"body":{"interfaces/Auth.html":{}}}],["buffer",{"_index":1939,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/VaultKeyService.html":{}}}],["buffer.concat([buffer.alloc(32",{"_index":3248,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.concat([rpadded",{"_index":3254,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.from(dersignature",{"_index":3228,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.from(json.stringify(header)).tostring",{"_index":3219,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.from(json.stringify(payload)).tostring",{"_index":3222,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.from(value).tostring('base64",{"_index":3214,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["bug",{"_index":3297,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":3373,"title":{},"body":{"changelog.html":{}}}],["buildclientparams",{"_index":1547,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["builder/querypartialentity",{"_index":2995,"title":{},"body":{"injectables/SessionService.html":{}}}],["buildkeymap",{"_index":1535,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["buildkeymap(config.args",{"_index":1541,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["buildkeymap(fields",{"_index":1548,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["buildurl",{"_index":887,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["buildurlfn",{"_index":896,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["built",{"_index":3484,"title":{},"body":{"index.html":{}}}],["business",{"_index":3467,"title":{},"body":{"index.html":{}}}],["byte",{"_index":3236,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["bytes",{"_index":1382,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/VaultKeyService.html":{}}}],["c",{"_index":3711,"title":{},"body":{"license.html":{}}}],["c.id",{"_index":860,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["c3b1b48",{"_index":3340,"title":{},"body":{"changelog.html":{}}}],["c805439",{"_index":3353,"title":{},"body":{"changelog.html":{}}}],["ca",{"_index":1347,"title":{},"body":{"injectables/CryptoService.html":{}}}],["cache",{"_index":2027,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cacreateserial",{"_index":1349,"title":{},"body":{"injectables/CryptoService.html":{}}}],["cakey",{"_index":1348,"title":{},"body":{"injectables/CryptoService.html":{}}}],["calculatejwkthumbprint",{"_index":1272,"title":{},"body":{"injectables/CryptoService.html":{}}}],["call",{"_index":2833,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["callback",{"_index":496,"title":{},"body":{"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"injectables/CryptoService.html":{},"classes/KeyService.html":{},"injectables/SessionService.html":{}}}],["callback(auth",{"_index":497,"title":{},"body":{"interfaces/Auth.html":{}}}],["callbackcontext",{"_index":1270,"title":{},"body":{"injectables/CryptoService.html":{}}}],["callbacks",{"_index":733,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["called",{"_index":142,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["callhandler",{"_index":2829,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["calling",{"_index":1028,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["calls",{"_index":3494,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":1979,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate(context",{"_index":1983,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["carry",{"_index":3706,"title":{},"body":{"license.html":{}}}],["case",{"_index":1423,"title":{},"body":{"injectables/CryptoService-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["catch",{"_index":764,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/VaultKeyService.html":{}}}],["catch(async",{"_index":3189,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["catcherror",{"_index":2846,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["catcherror((error",{"_index":2881,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["cause",{"_index":3584,"title":{},"body":{"license.html":{}}}],["cb",{"_index":2034,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cb(err",{"_index":2036,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cd",{"_index":3502,"title":{},"body":{"index.html":{}}}],["cert",{"_index":241,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["cert.id",{"_index":264,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["cert.publickey.export",{"_index":2715,"title":{},"body":{"injectables/ResolverService.html":{}}}],["cert.revoked",{"_index":262,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["cert.subjectaltname?.includes(payload.iss.split('://')[1",{"_index":2713,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certificate",{"_index":10,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{}}}],["certificate.pem",{"_index":1302,"title":{},"body":{"injectables/CryptoService.html":{}}}],["certificatechainlength",{"_index":2382,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["certificates",{"_index":77,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["certificatetype",{"_index":1243,"title":{},"body":{"injectables/CryptoService.html":{},"miscellaneous/typealiases.html":{}}}],["certout",{"_index":1301,"title":{},"body":{"injectables/CryptoService.html":{}}}],["certs",{"_index":260,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["certs?.length",{"_index":266,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["certs[0",{"_index":2712,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certs[0].jwt",{"_index":268,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["chain",{"_index":1362,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/ResolverService.html":{}}}],["challenge",{"_index":622,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["changed",{"_index":3710,"title":{},"body":{"license.html":{}}}],["changelog",{"_index":3293,"title":{"changelog.html":{}},"body":{}}],["character",{"_index":3513,"title":{},"body":{"index.html":{},"license.html":{}}}],["characters",{"_index":927,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["charge",{"_index":3663,"title":{},"body":{"license.html":{}}}],["check",{"_index":213,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"injectables/JwtService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["checking",{"_index":3045,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["checks",{"_index":131,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"controllers/HealthController.html":{},"injectables/RegistrarService.html":{}}}],["checl",{"_index":2716,"title":{},"body":{"injectables/ResolverService.html":{}}}],["choice",{"_index":3448,"title":{},"body":{"index.html":{}}}],["choose",{"_index":3527,"title":{},"body":{"index.html":{},"license.html":{}}}],["ci",{"_index":3299,"title":{},"body":{"changelog.html":{}}}],["citizen",{"_index":2594,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["claim",{"_index":3688,"title":{},"body":{"license.html":{}}}],["claims",{"_index":1170,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"license.html":{}}}],["class",{"_index":80,"title":{"classes/ApiKeyConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/Interceptors.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"classes/RegistrarConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"injectables/ClientService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{},"license.html":{}}}],["classes",{"_index":304,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/Interceptors.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"classes/RegistrarConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"overview.html":{}}}],["clean",{"_index":1352,"title":{},"body":{"injectables/CryptoService.html":{},"index.html":{}}}],["cleancontent",{"_index":1772,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["cleancontent.endswith('+json",{"_index":1775,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["cleancontent.startswith('application/json",{"_index":1774,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["cleancontent.startswith('text",{"_index":1781,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["cleancontent.startswith(type",{"_index":1780,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["cleanup",{"_index":844,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["clear",{"_index":1699,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{}}}],["client",{"_index":38,"title":{"interfaces/Client.html":{},"interfaces/Client-1.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["client's",{"_index":1024,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["client.id",{"_index":560,"title":{},"body":{"controllers/AuthController.html":{}}}],["client.secret",{"_index":861,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["client.service",{"_index":527,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["client['buildurl",{"_index":1792,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["client_id",{"_index":542,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/TokenPayload.html":{},"index.html":{}}}],["client_metadata",{"_index":2346,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_name",{"_index":2359,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_secret",{"_index":543,"title":{},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{},"index.html":{}}}],["clientauthentication",{"_index":1384,"title":{},"body":{"injectables/CryptoService.html":{}}}],["clientauthenticationnone",{"_index":1273,"title":{},"body":{"injectables/CryptoService.html":{}}}],["clientcredentialsdto",{"_index":505,"title":{"classes/ClientCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{}}}],["clientid",{"_index":113,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{}}}],["clientoptions",{"_index":958,"title":{"interfaces/ClientOptions.html":{}},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["clients",{"_index":838,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["clients.foreach((client",{"_index":848,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["clientsecret",{"_index":115,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/RegistrarService.html":{}}}],["clientservice",{"_index":526,"title":{"injectables/ClientService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"overview.html":{}}}],["clone",{"_index":3498,"title":{},"body":{"index.html":{}}}],["cloudflare",{"_index":3341,"title":{},"body":{"changelog.html":{}}}],["cluster_appmodule",{"_index":366,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":367,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":567,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":568,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":569,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_cryptomodule",{"_index":1221,"title":{},"body":{"modules/CryptoModule.html":{},"overview.html":{}}}],["cluster_cryptomodule_exports",{"_index":1222,"title":{},"body":{"modules/CryptoModule.html":{},"overview.html":{}}}],["cluster_cryptomodule_providers",{"_index":1223,"title":{},"body":{"modules/CryptoModule.html":{},"overview.html":{}}}],["cluster_issuermodule",{"_index":1952,"title":{},"body":{"modules/IssuerModule.html":{},"overview.html":{}}}],["cluster_issuermodule_exports",{"_index":1953,"title":{},"body":{"modules/IssuerModule.html":{},"overview.html":{}}}],["cluster_issuermodule_imports",{"_index":1955,"title":{},"body":{"modules/IssuerModule.html":{},"overview.html":{}}}],["cluster_issuermodule_providers",{"_index":1954,"title":{},"body":{"modules/IssuerModule.html":{},"overview.html":{}}}],["cluster_oid4vpmodule",{"_index":2290,"title":{},"body":{"modules/Oid4vpModule.html":{},"overview.html":{}}}],["cluster_oid4vpmodule_exports",{"_index":2292,"title":{},"body":{"modules/Oid4vpModule.html":{},"overview.html":{}}}],["cluster_oid4vpmodule_imports",{"_index":2291,"title":{},"body":{"modules/Oid4vpModule.html":{},"overview.html":{}}}],["cluster_oid4vpmodule_providers",{"_index":2293,"title":{},"body":{"modules/Oid4vpModule.html":{},"overview.html":{}}}],["cluster_presentationsmodule",{"_index":2489,"title":{},"body":{"modules/PresentationsModule.html":{},"overview.html":{}}}],["cluster_presentationsmodule_exports",{"_index":2492,"title":{},"body":{"modules/PresentationsModule.html":{},"overview.html":{}}}],["cluster_presentationsmodule_imports",{"_index":2491,"title":{},"body":{"modules/PresentationsModule.html":{},"overview.html":{}}}],["cluster_presentationsmodule_providers",{"_index":2490,"title":{},"body":{"modules/PresentationsModule.html":{},"overview.html":{}}}],["cluster_registrarmodule",{"_index":2645,"title":{},"body":{"modules/RegistrarModule.html":{},"overview.html":{}}}],["cluster_registrarmodule_exports",{"_index":2648,"title":{},"body":{"modules/RegistrarModule.html":{},"overview.html":{}}}],["cluster_registrarmodule_imports",{"_index":2646,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["cluster_registrarmodule_providers",{"_index":2647,"title":{},"body":{"modules/RegistrarModule.html":{},"overview.html":{}}}],["cluster_resolvermodule",{"_index":2688,"title":{},"body":{"modules/ResolverModule.html":{},"overview.html":{}}}],["cluster_resolvermodule_exports",{"_index":2689,"title":{},"body":{"modules/ResolverModule.html":{},"overview.html":{}}}],["cluster_resolvermodule_providers",{"_index":2690,"title":{},"body":{"modules/ResolverModule.html":{},"overview.html":{}}}],["cluster_sessionmodule",{"_index":2950,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_sessionmodule_exports",{"_index":2952,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_sessionmodule_imports",{"_index":2951,"title":{},"body":{"modules/SessionModule.html":{}}}],["cluster_sessionmodule_providers",{"_index":2953,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_statuslistmodule",{"_index":3100,"title":{},"body":{"modules/StatusListModule.html":{},"overview.html":{}}}],["cluster_statuslistmodule_exports",{"_index":3102,"title":{},"body":{"modules/StatusListModule.html":{},"overview.html":{}}}],["cluster_statuslistmodule_imports",{"_index":3103,"title":{},"body":{"modules/StatusListModule.html":{}}}],["cluster_statuslistmodule_providers",{"_index":3101,"title":{},"body":{"modules/StatusListModule.html":{},"overview.html":{}}}],["cluster_verifiermodule",{"_index":3261,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cluster_verifiermodule_imports",{"_index":3262,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cmd",{"_index":1313,"title":{},"body":{"injectables/CryptoService.html":{}}}],["cn=${subject",{"_index":1333,"title":{},"body":{"injectables/CryptoService.html":{}}}],["cnf",{"_index":1126,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{}}}],["cnonce",{"_index":788,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["cnonceexpiresin",{"_index":798,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["cnonceexpiresinseconds",{"_index":2251,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["code",{"_index":637,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"entities/Session.html":{},"index.html":{},"license.html":{}}}],["code_challenge",{"_index":668,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_method",{"_index":669,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_methods_supported",{"_index":753,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["codecov",{"_index":3319,"title":{},"body":{"changelog.html":{}}}],["colorize",{"_index":446,"title":{},"body":{"modules/AppModule.html":{}}}],["column",{"_index":1874,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{}}}],["column('json",{"_index":1866,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["column('json')@isobject",{"_index":1854,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["column('varchar",{"_index":1862,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["column({type",{"_index":1857,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{}}}],["combination",{"_index":3683,"title":{},"body":{"license.html":{}}}],["commands",{"_index":1312,"title":{},"body":{"injectables/CryptoService.html":{}}}],["comment",{"_index":3827,"title":{},"body":{"license.html":{}}}],["commercial",{"_index":3797,"title":{},"body":{"license.html":{}}}],["common",{"_index":3577,"title":{},"body":{"license.html":{}}}],["commonoptions",{"_index":1445,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["communicates",{"_index":3461,"title":{},"body":{"index.html":{}}}],["communication",{"_index":3642,"title":{},"body":{"license.html":{}}}],["compact",{"_index":1263,"title":{},"body":{"injectables/CryptoService.html":{}}}],["comparison",{"_index":275,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["compatible",{"_index":3479,"title":{},"body":{"index.html":{}}}],["compiled",{"_index":3607,"title":{},"body":{"license.html":{}}}],["complete",{"_index":2522,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["completed",{"_index":2879,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["completion",{"_index":2923,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["compliance",{"_index":3835,"title":{},"body":{"license.html":{}}}],["complies",{"_index":3731,"title":{},"body":{"license.html":{}}}],["computer",{"_index":3794,"title":{},"body":{"license.html":{}}}],["concatenate",{"_index":3252,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["condition",{"_index":2983,"title":{},"body":{"injectables/SessionService.html":{}}}],["conditions",{"_index":3559,"title":{},"body":{"license.html":{}}}],["config",{"_index":60,"title":{"interfaces/Config.html":{},"interfaces/Config-1.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CredentialsService.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionService.html":{},"interfaces/TDataShape.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{},"index.html":{}}}],["config.accesscertificateid",{"_index":217,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["config.allowextra",{"_index":1567,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["config.args",{"_index":1540,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["config.baseurl",{"_index":1807,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["config.baseurl.length",{"_index":1809,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["config.baseurl.substring(0",{"_index":1808,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["config.baseurl?.endswith",{"_index":1806,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["config.dto",{"_index":1876,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.dto.ts",{"_index":2450,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["config.dto.ts:10",{"_index":3145,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:12",{"_index":3146,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:14",{"_index":3147,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:16",{"_index":3149,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:18",{"_index":3150,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:23",{"_index":2451,"title":{},"body":{"classes/PresentationDuringIssuance.html":{}}}],["config.dto.ts:25",{"_index":2452,"title":{},"body":{"classes/PresentationDuringIssuance.html":{}}}],["config.dto.ts:6",{"_index":3151,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:8",{"_index":3148,"title":{},"body":{"classes/VCT.html":{}}}],["config.entity",{"_index":1157,"title":{},"body":{"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["config.entity.ts",{"_index":1851,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["config.entity.ts:12",{"_index":1864,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:15",{"_index":1872,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:17",{"_index":2442,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:18",{"_index":1856,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:22",{"_index":1855,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:24",{"_index":2445,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:25",{"_index":1861,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:29",{"_index":1873,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:32",{"_index":2440,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:33",{"_index":1869,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:37",{"_index":1870,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:38",{"_index":2444,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:42",{"_index":1859,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:44",{"_index":2447,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:50",{"_index":2439,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.headers",{"_index":1810,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["config.id",{"_index":155,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["config.in",{"_index":1538,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["config.key",{"_index":1536,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["config.map",{"_index":1539,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["config.presentation_during_issuance",{"_index":825,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["config.presentation_during_issuance.webhook",{"_index":826,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["config.ts",{"_index":2641,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["config.ts:12",{"_index":2643,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["config.ts:8",{"_index":2644,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["configmodule",{"_index":383,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["configmodule.forroot",{"_index":417,"title":{},"body":{"modules/AppModule.html":{}}}],["configs",{"_index":2194,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["configs[id",{"_index":2197,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["configservice",{"_index":34,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["configservice.get",{"_index":1444,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["configservice.get('jwt_issuer",{"_index":2048,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('jwt_secret",{"_index":2042,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('keycloak_client_id",{"_index":2040,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('keycloak_internal_issuer_url",{"_index":2039,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('keycloak_internal_issuer_url')}/protocol/openid",{"_index":2031,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('log_level",{"_index":440,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('oidc",{"_index":2023,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.getorthrow('db_database",{"_index":1457,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_host",{"_index":1449,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_password",{"_index":1455,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_port",{"_index":1451,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_username",{"_index":1453,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('folder",{"_index":481,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["configservie",{"_index":1414,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["configurable",{"_index":1306,"title":{},"body":{"injectables/CryptoService.html":{}}}],["configuration",{"_index":97,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/Client.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vciService.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["configuration(@token",{"_index":1945,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["configuration(user",{"_index":1886,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["configurations",{"_index":105,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["configure",{"_index":3499,"title":{},"body":{"index.html":{}}}],["configured",{"_index":2047,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/PresentationRequest.html":{},"injectables/SessionService.html":{}}}],["conflictexception",{"_index":719,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["conflictexception('authorization",{"_index":776,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["conflictexception('issuer",{"_index":2723,"title":{},"body":{"injectables/ResolverService.html":{}}}],["conflictexception('request",{"_index":2560,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["conforms",{"_index":938,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["connect",{"_index":888,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["connect/certs",{"_index":2032,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["connect/token",{"_index":121,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["connection",{"_index":1684,"title":{},"body":{"controllers/HealthController.html":{}}}],["consequential",{"_index":3788,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":3808,"title":{},"body":{"license.html":{}}}],["console",{"_index":3322,"title":{},"body":{"changelog.html":{}}}],["console.error",{"_index":271,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["console.error('error",{"_index":223,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["console.log('keycloak",{"_index":2035,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["console.log('received",{"_index":2616,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["console.log('session",{"_index":2146,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["console.log(crt.subjectaltname",{"_index":1361,"title":{},"body":{"injectables/CryptoService.html":{}}}],["console.log(err",{"_index":2570,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["console.log(headers",{"_index":2414,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["console.log(json.stringify(presented",{"_index":2617,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["console.log(request.headers",{"_index":2613,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["console.warn('access",{"_index":228,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["conspicuously",{"_index":3651,"title":{},"body":{"license.html":{}}}],["const",{"_index":110,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{}}}],["constitutes",{"_index":3692,"title":{},"body":{"license.html":{}}}],["constructor",{"_index":93,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["constructor(authzservice",{"_index":2152,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["constructor(configservice",{"_index":697,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["constructor(configservie",{"_index":1412,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["constructor(crpytoservice",{"_index":1111,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["constructor(cryptoservice",{"_index":2301,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["constructor(httpservice",{"_index":2511,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["constructor(logger",{"_index":2911,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["constructor(private",{"_index":1098,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerService.html":{},"controllers/StatusListController.html":{}}}],["constructor(reflector",{"_index":1980,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["constructor(sessionrepository",{"_index":2967,"title":{},"body":{"injectables/SessionService.html":{}}}],["construed",{"_index":3729,"title":{},"body":{"license.html":{}}}],["consume",{"_index":2607,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["contact",{"_index":3876,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["contained",{"_index":3717,"title":{},"body":{"license.html":{}}}],["containing",{"_index":600,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{}}}],["content",{"_index":474,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"index.html":{},"license.html":{}}}],["contents",{"_index":3725,"title":{},"body":{"license.html":{}}}],["contenttype",{"_index":1768,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["contenttype.split(';')[0]?.trim",{"_index":1773,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["context",{"_index":1986,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["context.flowtype",{"_index":2937,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.getclass",{"_index":1994,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":1993,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["context.sessionid",{"_index":2939,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.switchtohttp().getrequest",{"_index":2852,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":2853,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["context.tenantid",{"_index":2940,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.ts",{"_index":2816,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["context.ts:21",{"_index":2818,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["continue",{"_index":1553,"title":{},"body":{"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{}}}],["contract",{"_index":3586,"title":{},"body":{"license.html":{}}}],["contributing",{"_index":3540,"title":{},"body":{"index.html":{}}}],["contributing.md",{"_index":3548,"title":{},"body":{"index.html":{}}}],["contribution",{"_index":3633,"title":{},"body":{"license.html":{}}}],["contribution(s",{"_index":3681,"title":{},"body":{"license.html":{}}}],["contributions",{"_index":3733,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":3654,"title":{},"body":{"license.html":{}}}],["contributors",{"_index":3545,"title":{},"body":{"index.html":{}}}],["contributory",{"_index":3693,"title":{},"body":{"license.html":{}}}],["control",{"_index":3575,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":3576,"title":{},"body":{"license.html":{}}}],["controller",{"_index":342,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/HealthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/HealthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["controller(':tenantid/.well",{"_index":3285,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["controller(':tenantid/authorize",{"_index":648,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["controller(':tenantid/oid4vp",{"_index":2282,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["controller(':tenantid/status",{"_index":3024,"title":{},"body":{"controllers/StatusListController.html":{}}}],["controller(':tenantid/vci",{"_index":2136,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["controller('auth",{"_index":537,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('credentials/:tenantid",{"_index":1097,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["controller('health",{"_index":1690,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('issuer",{"_index":1919,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["controller('presentation",{"_index":2473,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["controller('session",{"_index":2808,"title":{},"body":{"controllers/SessionController.html":{}}}],["controllers",{"_index":344,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"controllers/WellKnownController.html":{},"overview.html":{}}}],["conversions",{"_index":3608,"title":{},"body":{"license.html":{}}}],["convert",{"_index":3216,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["converting",{"_index":947,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["converts",{"_index":3161,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["cookie",{"_index":489,"title":{},"body":{"interfaces/Auth.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["coordinate",{"_index":1472,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["copies",{"_index":3699,"title":{},"body":{"license.html":{}}}],["copy",{"_index":2888,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["copyright",{"_index":3568,"title":{},"body":{"license.html":{}}}],["core",{"_index":3471,"title":{},"body":{"index.html":{}}}],["core/auth",{"_index":962,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["core/bodyserializer",{"_index":1717,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["core/pathserializer",{"_index":1722,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["core/types",{"_index":965,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["coreclient",{"_index":963,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["coreconfig",{"_index":964,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["correct",{"_index":1031,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/Oid4vciService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["counterclaim",{"_index":3689,"title":{},"body":{"license.html":{}}}],["covered",{"_index":249,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["cp",{"_index":3503,"title":{},"body":{"index.html":{}}}],["create",{"_index":289,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["create(session",{"_index":2974,"title":{},"body":{"injectables/SessionService.html":{}}}],["create(tenantid",{"_index":3157,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["create_authorization_request",{"_index":2324,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest",{"_index":2299,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest(requestid",{"_index":2303,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationservermetadata",{"_index":738,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["createclientconfig",{"_index":1021,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["createconfig",{"_index":1847,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["createcredentialoffer",{"_index":2199,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["created",{"_index":188,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"injectables/VaultKeyService.html":{}}}],["createdat",{"_index":1852,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{}}}],["createentry",{"_index":3081,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["createentry(session",{"_index":3112,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createhash",{"_index":1266,"title":{},"body":{"injectables/CryptoService.html":{}}}],["createhash(alg.replace",{"_index":1378,"title":{},"body":{"injectables/CryptoService.html":{}}}],["createheaderandpayload",{"_index":3032,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["createinterceptors",{"_index":1840,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["createkeydto",{"_index":3193,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["createlist",{"_index":3107,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createlist(tenantid",{"_index":3063,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["createoffer",{"_index":2150,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["createoffer(body",{"_index":2155,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["createparamdecorator",{"_index":3140,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["createqueryserializer",{"_index":1754,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["createqueryserializer(options.queryserializer",{"_index":1797,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["createrequest",{"_index":2300,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createrequest(requestid",{"_index":2308,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["creates",{"_index":1213,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/Oid4vpService.html":{},"injectables/VaultKeyService.html":{}}}],["cred",{"_index":2236,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["cred.length",{"_index":2241,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential",{"_index":810,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"controllers/WellKnownController.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["credential(req",{"_index":2124,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["credential.config",{"_index":1167,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credential_configurations_supported",{"_index":1056,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{}}}],["credential_configurations_supported[credential.id",{"_index":1166,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credential_creation",{"_index":2945,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_endpoint",{"_index":1057,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["credential_issuance",{"_index":2944,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_issuer",{"_index":1058,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["credential_issuer}/vci/credential",{"_index":2186,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential_issuer}/vci/notification",{"_index":2187,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential_request",{"_index":2223,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential_revoked",{"_index":2094,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["credential_verification",{"_index":2947,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credentialconfigurationid",{"_index":1128,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["credentialconfigurationids",{"_index":1928,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{}}}],["credentialconfigurationsupported",{"_index":1149,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{}}}],["credentialcount",{"_index":2404,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialid",{"_index":1124,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialissuer",{"_index":2183,"title":{},"body":{"injectables/Oid4vciService.html":{},"controllers/WellKnownController.html":{}}}],["credentialissuermetadatadto",{"_index":1047,"title":{"classes/CredentialIssuerMetadataDto.html":{}},"body":{"classes/CredentialIssuerMetadataDto.html":{},"controllers/WellKnownController.html":{}}}],["credentialofferobject",{"_index":2777,"title":{},"body":{"entities/Session.html":{}}}],["credentialpayload",{"_index":2204,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["credentialrequest",{"_index":2208,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentialresponse",{"_index":2132,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{}}}],["credentials",{"_index":160,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"index.html":{}}}],["credentials.dto",{"_index":530,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials.dto.ts",{"_index":955,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.dto.ts:5",{"_index":956,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.dto.ts:7",{"_index":957,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.length",{"_index":2249,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["credentials.push(cred",{"_index":2238,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentials.service",{"_index":1095,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["credentials/:tenantid",{"_index":1083,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["credentials/credentials.controller",{"_index":1967,"title":{},"body":{"modules/IssuerModule.html":{}}}],["credentials/credentials.service",{"_index":728,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["credentials/entities/issuance",{"_index":1970,"title":{},"body":{"modules/IssuerModule.html":{}}}],["credentials?.length",{"_index":2405,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialscontroller",{"_index":1081,"title":{"controllers/CredentialsController.html":{}},"body":{"controllers/CredentialsController.html":{},"modules/IssuerModule.html":{}}}],["credentialsissued",{"_index":2248,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentialsize",{"_index":2240,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentialsservice",{"_index":699,"title":{"injectables/CredentialsService.html":{}},"body":{"injectables/AuthorizeService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"overview.html":{}}}],["credentialtype",{"_index":2917,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["cron",{"_index":2987,"title":{},"body":{"injectables/SessionService.html":{}}}],["cross",{"_index":3687,"title":{},"body":{"license.html":{}}}],["crpytoservice",{"_index":1116,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["crt",{"_index":14,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/RegistrarService.html":{}}}],["crv",{"_index":1464,"title":{},"body":{"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"classes/JwksResponseDto.html":{}}}],["crypto",{"_index":1416,"title":{},"body":{"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{}}}],["crypto.service",{"_index":1226,"title":{},"body":{"modules/CryptoModule.html":{}}}],["crypto/crypto",{"_index":1607,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["crypto/crypto.module",{"_index":385,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{}}}],["crypto/crypto.service",{"_index":48,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["crypto/encryption/encryption.service",{"_index":2316,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["crypto/key/crypto/crypto.module",{"_index":401,"title":{},"body":{"modules/AppModule.html":{}}}],["crypto/key/key.module",{"_index":399,"title":{},"body":{"modules/AppModule.html":{}}}],["crypto_validation_schema",{"_index":400,"title":{},"body":{"modules/AppModule.html":{}}}],["cryptocontrollerowncertdata",{"_index":3878,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["cryptocontrollerowncertparseddata",{"_index":3879,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["cryptocontrollerowncertparsedresponse",{"_index":3880,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["cryptocontrollerowncertparsedresponses",{"_index":3881,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["cryptocontrollerowncertresponse",{"_index":3882,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["cryptocontrollerowncertresponses",{"_index":3883,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["cryptographic",{"_index":99,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"index.html":{}}}],["cryptoimplementation",{"_index":1198,"title":{"interfaces/CryptoImplementation.html":{}},"body":{"interfaces/CryptoImplementation.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{}}}],["cryptokey",{"_index":1491,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{}}}],["cryptomodule",{"_index":369,"title":{"modules/CryptoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["cryptoservice",{"_index":47,"title":{"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{},"overview.html":{}}}],["cryptotype",{"_index":1417,"title":{},"body":{"injectables/CryptoService-1.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["csr",{"_index":1339,"title":{},"body":{"injectables/CryptoService.html":{}}}],["ctx",{"_index":3141,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":3142,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["curl",{"_index":3517,"title":{},"body":{"index.html":{}}}],["current_timestamp",{"_index":1858,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["currentdate",{"_index":1373,"title":{},"body":{"injectables/CryptoService.html":{}}}],["currently",{"_index":331,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["curve",{"_index":1461,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["custom",{"_index":977,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["customary",{"_index":3752,"title":{},"body":{"license.html":{}}}],["customprops",{"_index":455,"title":{},"body":{"modules/AppModule.html":{}}}],["d",{"_index":3520,"title":{},"body":{"index.html":{},"license.html":{}}}],["d6205da",{"_index":3371,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":3785,"title":{},"body":{"license.html":{}}}],["data",{"_index":225,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/typealiases.html":{}}}],["data.append(key",{"_index":2626,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["data.revoked",{"_index":227,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["data.tostring",{"_index":2639,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["database",{"_index":1456,"title":{},"body":{"modules/DatabaseModule.html":{},"controllers/HealthController.html":{},"index.html":{}}}],["database/database.module",{"_index":407,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":370,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":168,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"license.html":{}}}],["date((payload.exp",{"_index":1375,"title":{},"body":{"injectables/CryptoService.html":{}}}],["date().gettime",{"_index":1188,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{}}}],["date(date.now",{"_index":3012,"title":{},"body":{"injectables/SessionService.html":{}}}],["date(token.expiresat",{"_index":170,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["date.gettime",{"_index":182,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["date.now",{"_index":2870,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["day",{"_index":2992,"title":{},"body":{"injectables/SessionService.html":{}}}],["days",{"_index":1336,"title":{},"body":{"injectables/CryptoService.html":{}}}],["db",{"_index":1691,"title":{},"body":{"controllers/HealthController.html":{},"changelog.html":{}}}],["db_database",{"_index":1441,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_host",{"_index":1432,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_password",{"_index":1440,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_port",{"_index":1437,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_type",{"_index":1429,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_username",{"_index":1439,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db_validation_schema",{"_index":1428,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dbtype",{"_index":1443,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dc+sd",{"_index":2352,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcql",{"_index":2441,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["dcql_query",{"_index":248,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{}}}],["dcql_query.length",{"_index":2339,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcqlquerycount",{"_index":2337,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dd",{"_index":451,"title":{},"body":{"modules/AppModule.html":{}}}],["de",{"_index":878,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["deal",{"_index":1921,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["debug",{"_index":427,"title":{},"body":{"modules/AppModule.html":{}}}],["debugging",{"_index":1672,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["declarations",{"_index":362,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["decode",{"_index":1670,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodedjwt",{"_index":3884,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["decodedvc",{"_index":2562,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.header",{"_index":2565,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.payload",{"_index":2564,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodejwt",{"_index":1640,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodejwt(token",{"_index":1674,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodetoken",{"_index":1996,"title":{},"body":{"injectables/JwtService.html":{}}}],["decodetoken(token",{"_index":1673,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decorators",{"_index":310,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"controllers/CredentialsController.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"entities/KeyEntity.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequest.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["decryptjwe",{"_index":1481,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["decryptjwe(response",{"_index":1485,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["deeply",{"_index":2752,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["deepobject",{"_index":925,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["deeppartial",{"_index":2975,"title":{},"body":{"injectables/SessionService.html":{}}}],["default",{"_index":430,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Auth.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/RequestOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{}}}],["defaultheaders",{"_index":1846,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["defaultpathserializer",{"_index":1735,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["defaultqueryserializer",{"_index":1845,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["defend",{"_index":3814,"title":{},"body":{"license.html":{}}}],["define",{"_index":662,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"entities/PresentationConfig.html":{}}}],["defined",{"_index":312,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"injectables/ClientService.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"license.html":{}}}],["defines",{"_index":2653,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["definition",{"_index":3579,"title":{},"body":{"license.html":{}}}],["definitions",{"_index":3562,"title":{},"body":{"license.html":{}}}],["delete",{"_index":889,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"interfaces/Fields.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Params.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["delete('/:id",{"_index":1889,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["delete(':id",{"_index":2460,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration",{"_index":1883,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(@param('id",{"_index":1948,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(id",{"_index":1888,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["deletecredentialconfiguration",{"_index":1104,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["deletecredentialconfiguration(tenantid",{"_index":1117,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["deletepresentationconfig",{"_index":2506,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletepresentationconfig(id",{"_index":2518,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletes",{"_index":1119,"title":{},"body":{"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["deletion",{"_index":2521,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deliberate",{"_index":3780,"title":{},"body":{"license.html":{}}}],["demo",{"_index":541,"title":{},"body":{"controllers/AuthController.html":{}}}],["dependencies",{"_index":360,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":3300,"title":{},"body":{"changelog.html":{}}}],["deployment",{"_index":3306,"title":{},"body":{"changelog.html":{}}}],["der",{"_index":3162,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["der.slice(2",{"_index":3230,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["derivative",{"_index":3618,"title":{},"body":{"license.html":{}}}],["derived",{"_index":3620,"title":{},"body":{"license.html":{}}}],["dersignature",{"_index":3163,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["dertojwtsignature",{"_index":3154,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["dertojwtsignature(dersignature",{"_index":3159,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["desc",{"_index":2554,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["describing",{"_index":3753,"title":{},"body":{"license.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"interfaces/CryptoImplementation.html":{},"classes/EC_Public.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"interfaces/TokenPayload.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"license.html":{},"properties.html":{}}}],["designated",{"_index":3653,"title":{},"body":{"license.html":{}}}],["desired",{"_index":939,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["details",{"_index":607,"title":{},"body":{"classes/AuthorizationResponse.html":{},"entities/PresentationConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{}}}],["determining",{"_index":3771,"title":{},"body":{"license.html":{}}}],["dev",{"_index":876,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["developers",{"_index":3543,"title":{},"body":{"index.html":{}}}],["development",{"_index":3483,"title":{},"body":{"index.html":{}}}],["development/testing",{"_index":854,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["df29d1e",{"_index":3349,"title":{},"body":{"changelog.html":{}}}],["different",{"_index":279,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["differnt",{"_index":2254,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["digest",{"_index":1139,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/PresentationsService.html":{}}}],["diplomatic",{"_index":3433,"title":{},"body":{"index.html":{}}}],["direct",{"_index":3582,"title":{},"body":{"license.html":{}}}],["direct_post.jwt",{"_index":2345,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["direction",{"_index":3585,"title":{},"body":{"license.html":{}}}],["disable",{"_index":174,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["disclaimer",{"_index":3756,"title":{},"body":{"license.html":{}}}],["disclosed",{"_index":2592,"title":{},"body":{"interfaces/PresentedData.html":{}}}],["disclosureframe",{"_index":1173,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{}}}],["discoveryendpoint",{"_index":122,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["discussing",{"_index":3648,"title":{},"body":{"license.html":{}}}],["display",{"_index":1059,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{},"license.html":{}}}],["display.json",{"_index":882,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vciService.html":{}}}],["displayinfo",{"_index":874,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["distribute",{"_index":3669,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":3719,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":3561,"title":{},"body":{"license.html":{}}}],["dns",{"_index":237,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["docker",{"_index":3368,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["document",{"_index":2701,"title":{},"body":{"injectables/ResolverService.html":{},"license.html":{}}}],["documentation",{"_index":3526,"title":{},"body":{"index.html":{},"license.html":{}}}],["documents",{"_index":2517,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["don't",{"_index":981,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["dpop",{"_index":778,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["dpop_jkt",{"_index":670,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["dpop_signing_alg_values_supported",{"_index":747,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["dto",{"_index":593,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["dto/auth",{"_index":2546,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["dto/authorization",{"_index":2281,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["dto/authorize",{"_index":643,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["dto/client",{"_index":529,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/credential",{"_index":1875,"title":{},"body":{"entities/IssuanceConfig.html":{},"controllers/WellKnownController.html":{}}}],["dto/issuer",{"_index":2703,"title":{},"body":{"injectables/ResolverService.html":{}}}],["dto/jwks",{"_index":3282,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["dto/notification",{"_index":2133,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{}}}],["dto/oauth",{"_index":3283,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["dto/offer",{"_index":2175,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["dto/par",{"_index":647,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["dto/presentation",{"_index":2320,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dto/schema",{"_index":1153,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{}}}],["dto/status",{"_index":3040,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["dto/token",{"_index":533,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/vp",{"_index":2448,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["dummy",{"_index":1317,"title":{},"body":{"injectables/CryptoService.html":{}}}],["dummy.csr",{"_index":1296,"title":{},"body":{"injectables/CryptoService.html":{}}}],["dummy_key.pem",{"_index":1294,"title":{},"body":{"injectables/CryptoService.html":{}}}],["dummycsr",{"_index":1295,"title":{},"body":{"injectables/CryptoService.html":{}}}],["dummykey",{"_index":1293,"title":{},"body":{"injectables/CryptoService.html":{}}}],["duration",{"_index":2873,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["duration}ms",{"_index":2880,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["during",{"_index":2424,"title":{},"body":{"injectables/Oid4vpService.html":{},"index.html":{}}}],["dynamicmodule",{"_index":2057,"title":{},"body":{"modules/KeyModule.html":{}}}],["e",{"_index":3510,"title":{},"body":{"index.html":{}}}],["e.g",{"_index":946,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"interfaces/SessionLogContext.html":{}}}],["e3e5971",{"_index":3321,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":2120,"title":{},"body":{"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/VaultKeyService.html":{},"license.html":{}}}],["early",{"_index":3482,"title":{},"body":{"index.html":{}}}],["easier",{"_index":273,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["easily",{"_index":3464,"title":{},"body":{"index.html":{}}}],["easy",{"_index":3488,"title":{},"body":{"index.html":{}}}],["ec",{"_index":1325,"title":{},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["ec_paramgen_curve:prime256v1",{"_index":1327,"title":{},"body":{"injectables/CryptoService.html":{}}}],["ec_public",{"_index":1278,"title":{"classes/EC_Public.html":{}},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["ecdh",{"_index":1510,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["ecdsa",{"_index":3195,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["echo",{"_index":3505,"title":{},"body":{"index.html":{}}}],["ecosystem",{"_index":3445,"title":{},"body":{"index.html":{}}}],["ed25519",{"_index":1421,"title":{},"body":{"injectables/CryptoService-1.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["eddsa",{"_index":2350,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["editorial",{"_index":3621,"title":{},"body":{"license.html":{}}}],["effect",{"_index":930,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["effectively",{"_index":1771,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["eject",{"_index":1700,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["eject(id",{"_index":1706,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["elaborations",{"_index":3624,"title":{},"body":{"license.html":{}}}],["electronic",{"_index":3473,"title":{},"body":{"index.html":{},"license.html":{}}}],["element",{"_index":3084,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["elements",{"_index":1079,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["elliptic",{"_index":1460,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["emits",{"_index":2837,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["emitter",{"_index":65,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["emitter.module",{"_index":413,"title":{},"body":{"modules/AppModule.html":{}}}],["emitter/dist/event",{"_index":412,"title":{},"body":{"modules/AppModule.html":{}}}],["empty",{"_index":290,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["enabled",{"_index":133,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/RegistrarService.html":{}}}],["enclosed",{"_index":3823,"title":{},"body":{"license.html":{}}}],["encode",{"_index":3255,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encoded",{"_index":929,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["encodedheader",{"_index":3218,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encodedheader}.${encodedpayload",{"_index":3224,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encodedheader}.${encodedpayload}.${signature",{"_index":3226,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encodedpayload",{"_index":3221,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encodeuricomponent",{"_index":1752,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["encodeuricomponent(key)}=${encodeuricomponent(value",{"_index":2392,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["encodeuricomponent(v",{"_index":2745,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["encodeuricomponent(value",{"_index":2757,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["encryption.json",{"_index":1499,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryption/encryption.service",{"_index":1227,"title":{},"body":{"modules/CryptoModule.html":{}}}],["encryptionservice",{"_index":1224,"title":{"injectables/EncryptionService.html":{}},"body":{"modules/CryptoModule.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"overview.html":{}}}],["end",{"_index":1365,"title":{},"body":{"injectables/CryptoService.html":{},"license.html":{}}}],["endpoint",{"_index":621,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/HealthController.html":{},"controllers/IssuerManagementController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["endpoints",{"_index":612,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/HealthController.html":{},"controllers/WellKnownController.html":{}}}],["ensure",{"_index":163,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["entities",{"_index":1849,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{},"license.html":{},"overview.html":{}}}],["entities/issuance",{"_index":1156,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["entities/key.entity",{"_index":2066,"title":{},"body":{"modules/KeyModule.html":{}}}],["entities/presentation",{"_index":2469,"title":{},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["entities/session.entity",{"_index":2803,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["entities/status",{"_index":3038,"title":{},"body":{"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["entity",{"_index":1848,"title":{"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{}},"body":{"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["entries",{"_index":3047,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["entries.length",{"_index":3097,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["entry",{"_index":3080,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["enum",{"_index":326,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/PresentationRequest.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["enumerations",{"_index":3418,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":3335,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["env.example",{"_index":3504,"title":{},"body":{"index.html":{}}}],["environment",{"_index":2654,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["err",{"_index":1831,"title":{},"body":{"classes/Interceptors.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{}}}],["err.message",{"_index":2433,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["errinterceptor",{"_index":1830,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"miscellaneous/typealiases.html":{}}}],["error",{"_index":250,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{}}}],["error('credential",{"_index":819,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["error('error",{"_index":239,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["error('invalid",{"_index":2210,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/VaultKeyService.html":{}}}],["error('issuer",{"_index":2706,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error('key",{"_index":1632,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/ResolverService.html":{}}}],["error('no",{"_index":2573,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["error('signer",{"_index":1389,"title":{},"body":{"injectables/CryptoService.html":{}}}],["error('stack",{"_index":3087,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["error('subject",{"_index":2714,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error(`invalid",{"_index":1668,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["error(`unsupported",{"_index":1424,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["error.message",{"_index":1669,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.name",{"_index":2884,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.stack",{"_index":2887,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error_description",{"_index":809,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["errors",{"_index":2899,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["es",{"_index":1503,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["es256",{"_index":748,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"miscellaneous/typealiases.html":{}}}],["es256.getverifier(publickey",{"_index":2567,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["es256k",{"_index":2355,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["es384",{"_index":2351,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["eslint",{"_index":173,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["eslint/no",{"_index":178,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["etc",{"_index":1008,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"index.html":{}}}],["eudi",{"_index":875,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"index.html":{}}}],["eudiplo",{"_index":351,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"index.html":{}}}],["even",{"_index":3477,"title":{},"body":{"index.html":{},"license.html":{}}}],["event",{"_index":865,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/NotificationRequestDto.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"license.html":{}}}],["eventemitter",{"_index":839,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{}}}],["eventemitter2",{"_index":834,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{}}}],["eventemittermodule",{"_index":411,"title":{},"body":{"modules/AppModule.html":{}}}],["eventemittermodule.forroot",{"_index":486,"title":{},"body":{"modules/AppModule.html":{}}}],["events",{"_index":68,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["example",{"_index":316,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["examples",{"_index":507,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["except",{"_index":3671,"title":{},"body":{"license.html":{}}}],["exchange",{"_index":636,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/SessionLoggerService.html":{}}}],["exclude",{"_index":1523,"title":{},"body":{"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{}}}],["excluding",{"_index":3650,"title":{},"body":{"license.html":{}}}],["exclusive",{"_index":3662,"title":{},"body":{"license.html":{}}}],["execsync",{"_index":1280,"title":{},"body":{"injectables/CryptoService.html":{}}}],["execsync(cmd",{"_index":1314,"title":{},"body":{"injectables/CryptoService.html":{}}}],["executed",{"_index":3743,"title":{},"body":{"license.html":{}}}],["execution",{"_index":2832,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["executioncontext",{"_index":1984,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TokenPayload.html":{}}}],["exercise",{"_index":3775,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":3596,"title":{},"body":{"license.html":{}}}],["exist",{"_index":288,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialsService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"index.html":{}}}],["existing",{"_index":201,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"index.html":{}}}],["exists",{"_index":204,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["exists(id",{"_index":1708,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["existssync",{"_index":54,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["existssync(certout",{"_index":1305,"title":{},"body":{"injectables/CryptoService.html":{}}}],["existssync(dummykey",{"_index":1320,"title":{},"body":{"injectables/CryptoService.html":{}}}],["existssync(file",{"_index":1355,"title":{},"body":{"injectables/CryptoService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["existssync(filepath",{"_index":287,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["existssync(folder",{"_index":871,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["existssync(join(folder",{"_index":1357,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["existssync(this.folder",{"_index":1284,"title":{},"body":{"injectables/CryptoService.html":{}}}],["existssync(this.privateenncryptionpath",{"_index":1501,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exp",{"_index":2362,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["expandvariables",{"_index":434,"title":{},"body":{"modules/AppModule.html":{}}}],["expected",{"_index":2112,"title":{},"body":{"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["expectedcode",{"_index":783,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["expectednonce",{"_index":2233,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["expextedapikey",{"_index":2608,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["expiration",{"_index":564,"title":{},"body":{"controllers/AuthController.html":{},"classes/ParResponseDto.html":{}}}],["expirationdate",{"_index":169,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["expirationdate.gettime",{"_index":181,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["expire",{"_index":2046,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expires_in",{"_index":548,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"classes/ParResponseDto.html":{},"classes/TokenResponse.html":{}}}],["expiresin",{"_index":562,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["expiresinseconds",{"_index":795,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["explicitly",{"_index":3735,"title":{},"body":{"license.html":{}}}],["explode",{"_index":1740,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["exploded",{"_index":921,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["export",{"_index":79,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["exportable",{"_index":3199,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["exportjwk",{"_index":1495,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["exportjwk(cryptokey",{"_index":3209,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["exportjwk(secret.privatekey",{"_index":1507,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exportjwk(secret.publickey",{"_index":1508,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exportpkcs8",{"_index":1599,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["exportpkcs8((await",{"_index":1624,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["exports",{"_index":365,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["exportspki",{"_index":1600,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["exportspki((await",{"_index":1626,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["expose",{"_index":1842,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["express",{"_index":640,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"dependencies.html":{},"license.html":{}}}],["extends",{"_index":968,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PresentationDuringIssuance.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/TDataShape.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{}}}],["extends#integrity",{"_index":2453,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["extension",{"_index":1342,"title":{},"body":{"injectables/CryptoService.html":{}}}],["external",{"_index":1841,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"index.html":{}}}],["extfile",{"_index":1350,"title":{},"body":{"injectables/CryptoService.html":{}}}],["extra",{"_index":1561,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["extract",{"_index":1525,"title":{},"body":{"interfaces/Fields.html":{},"injectables/JwtStrategy.html":{},"interfaces/Params.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/VaultKeyService.html":{}}}],["extractable",{"_index":1505,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{}}}],["extractjwt",{"_index":2018,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":2037,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extraprefixes",{"_index":1532,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["extraprefixes.find(([prefix",{"_index":1562,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["extraprefixesmap",{"_index":1527,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9",{"_index":546,"title":{},"body":{"controllers/AuthController.html":{}}}],["f75298f",{"_index":3327,"title":{},"body":{"changelog.html":{}}}],["f7e7505",{"_index":3346,"title":{},"body":{"changelog.html":{}}}],["face",{"_index":3446,"title":{},"body":{"index.html":{}}}],["failed",{"_index":2265,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/SessionLoggerService.html":{}}}],["fails",{"_index":2585,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["failure",{"_index":3795,"title":{},"body":{"license.html":{}}}],["false",{"_index":137,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{}}}],["fatal",{"_index":429,"title":{},"body":{"modules/AppModule.html":{}}}],["features",{"_index":3330,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["fee",{"_index":3802,"title":{},"body":{"license.html":{}}}],["fetch",{"_index":973,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["field",{"_index":1522,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{},"miscellaneous/typealiases.html":{}}}],["field.map",{"_index":1555,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["fields",{"_index":258,"title":{"interfaces/Fields.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Fields.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["fields[index",{"_index":1552,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["fieldsconfig",{"_index":1526,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{},"miscellaneous/typealiases.html":{}}}],["fieldsconfig[number",{"_index":1549,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["fifty",{"_index":3589,"title":{},"body":{"license.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"license.html":{}}}],["file.bits",{"_index":3066,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["file.elements[id",{"_index":3092,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["file.jwt",{"_index":3072,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["file.stack.pop",{"_index":3086,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["filed",{"_index":3697,"title":{},"body":{"license.html":{}}}],["filename",{"_index":3041,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["filepath",{"_index":284,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["files",{"_index":3602,"title":{},"body":{"license.html":{}}}],["filesystem",{"_index":2059,"title":{},"body":{"modules/KeyModule.html":{}}}],["filesystemkeyservice",{"_index":1570,"title":{"injectables/FileSystemKeyService.html":{}},"body":{"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{}}}],["fill(0",{"_index":3057,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["final",{"_index":897,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["finally",{"_index":2702,"title":{},"body":{"injectables/ResolverService.html":{}}}],["find",{"_index":862,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["findclientbyid",{"_index":1036,"title":{},"body":{"injectables/ClientService.html":{}}}],["findclientbyid(clientid",{"_index":863,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["finding",{"_index":224,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["findonebyorfail",{"_index":2559,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["findoptionswhere",{"_index":2981,"title":{},"body":{"injectables/SessionService.html":{}}}],["first",{"_index":2700,"title":{},"body":{"injectables/ResolverService.html":{}}}],["firstvaluefrom",{"_index":2317,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["firstvaluefrom(this.httpservice.get(uri)).then",{"_index":2571,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["fitness",{"_index":3768,"title":{},"body":{"license.html":{}}}],["fixes",{"_index":3298,"title":{},"body":{"changelog.html":{}}}],["flow",{"_index":462,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{}}}],["flow_complete",{"_index":2942,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_error",{"_index":2943,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_start",{"_index":2941,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flows",{"_index":3472,"title":{},"body":{"index.html":{}}}],["flowtype",{"_index":2221,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["fn",{"_index":1713,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["focus",{"_index":3466,"title":{},"body":{"index.html":{}}}],["folder",{"_index":420,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["following",{"_index":3702,"title":{},"body":{"license.html":{}}}],["foo",{"_index":2609,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["force_pubkey",{"_index":1346,"title":{},"body":{"injectables/CryptoService.html":{}}}],["foreach((file",{"_index":1354,"title":{},"body":{"injectables/CryptoService.html":{}}}],["form",{"_index":922,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/VaultKeyService.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["format",{"_index":24,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/EC_Public.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["formdata",{"_index":1004,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["formdatabodyserializer",{"_index":2629,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["forroot",{"_index":2055,"title":{},"body":{"modules/KeyModule.html":{}}}],["forwardref",{"_index":2495,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["found",{"_index":765,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["free",{"_index":3079,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"license.html":{}}}],["friendly",{"_index":3493,"title":{},"body":{"index.html":{}}}],["fs",{"_index":836,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["full",{"_index":3522,"title":{},"body":{"index.html":{}}}],["function",{"_index":141,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"interfaces/TDataShape.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":3420,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":2785,"title":{},"body":{"entities/Session.html":{}}}],["g",{"_index":1726,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{}}}],["general",{"_index":3344,"title":{},"body":{"changelog.html":{}}}],["generate",{"_index":1321,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/PresentationManagementController.html":{}}}],["generated",{"_index":46,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["generated/client.gen",{"_index":39,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["generatekeypair",{"_index":1204,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/EncryptionService.html":{}}}],["generatekeypair('ecdh",{"_index":1502,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["generaterandom",{"_index":1381,"title":{},"body":{"injectables/CryptoService.html":{}}}],["generates",{"_index":1208,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/Oid4vpService.html":{}}}],["generatesalt",{"_index":1140,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["generatetoken",{"_index":1642,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["generatetoken(payload",{"_index":2000,"title":{},"body":{"injectables/JwtService.html":{}}}],["generatetokenoptions",{"_index":1638,"title":{"interfaces/GenerateTokenOptions.html":{}},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["generation",{"_index":1644,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"changelog.html":{}}}],["generic",{"_index":1201,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/KeyService.html":{},"injectables/SessionLoggerService.html":{}}}],["genpkey",{"_index":1324,"title":{},"body":{"injectables/CryptoService.html":{}}}],["get(':id",{"_index":2796,"title":{},"body":{"controllers/SessionController.html":{}}}],["get('jwks.json",{"_index":3291,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('oauth",{"_index":3273,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('openid",{"_index":3286,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('request/:requestid/:session",{"_index":2283,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["get('request/:requestid/:session')@sessionlogger('session",{"_index":2273,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["get('schema/:id",{"_index":1087,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["get('session",{"_index":2145,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["get('status",{"_index":3019,"title":{},"body":{"controllers/StatusListController.html":{}}}],["get('vct/:id",{"_index":1092,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["get()@healthcheck",{"_index":1685,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(state",{"_index":2977,"title":{},"body":{"injectables/SessionService.html":{}}}],["getaccesscertificateid",{"_index":2663,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["getaccesscertificateid(config",{"_index":215,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["getalg",{"_index":1410,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["getall",{"_index":2965,"title":{},"body":{"injectables/SessionService.html":{}}}],["getallsessions",{"_index":2791,"title":{},"body":{"controllers/SessionController.html":{}}}],["getauthorizationserver",{"_index":691,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["getauthorizationserver(tenantid",{"_index":705,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["getauthtoken",{"_index":495,"title":{},"body":{"interfaces/Auth.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["getauthtoken(auth",{"_index":1783,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["getby",{"_index":761,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["getby(where",{"_index":2980,"title":{},"body":{"injectables/SessionService.html":{}}}],["getcallbackcontext",{"_index":1230,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getcallbackcontext(tenantid",{"_index":1240,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getcertchain",{"_index":1231,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getcertchain(type",{"_index":1242,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getclients",{"_index":850,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["getconfig",{"_index":890,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/CredentialsService.html":{},"injectables/StatusListService.html":{}}}],["getconfig(tenantid",{"_index":1120,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["getconfigbyid",{"_index":1105,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getconfigbyid(credentialid",{"_index":1122,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredential",{"_index":1106,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{}}}],["getcredential(credentialconfigurationid",{"_index":1125,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredential(req",{"_index":2157,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["getcredentialconfiguration",{"_index":1107,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredentialconfiguration(tenantid",{"_index":1129,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcrypto",{"_index":1411,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["getcrypto(alg",{"_index":1418,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["getencryptionpublickey",{"_index":1482,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["getheadersfromrequest",{"_index":725,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"miscellaneous/functions.html":{}}}],["getheadersfromrequest(req",{"_index":772,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"miscellaneous/functions.html":{}}}],["gethello",{"_index":347,"title":{},"body":{"controllers/AppController.html":{}}}],["getinterceptorindex",{"_index":1701,"title":{},"body":{"classes/Interceptors.html":{}}}],["getinterceptorindex(id",{"_index":1710,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["getjwk",{"_index":3155,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["getjwk(key",{"_index":3164,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["getjwks",{"_index":1232,"title":{},"body":{"injectables/CryptoService.html":{},"controllers/WellKnownController.html":{}}}],["getjwks(tenantid",{"_index":1247,"title":{},"body":{"injectables/CryptoService.html":{},"controllers/WellKnownController.html":{}}}],["getkeycloakconfig",{"_index":2006,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getkeycloakconfig(configservice",{"_index":2009,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getkeys",{"_index":1575,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["getkeys(tenantid",{"_index":1579,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["getkid",{"_index":1576,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["getkid(tenantid",{"_index":1582,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["getlist",{"_index":3017,"title":{},"body":{"controllers/StatusListController.html":{},"injectables/StatusListService.html":{}}}],["getlist(@param('tenantid",{"_index":3026,"title":{},"body":{"controllers/StatusListController.html":{}}}],["getlist(tenantid",{"_index":3018,"title":{},"body":{"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["getoffer",{"_index":1884,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["getoffer(res",{"_index":1891,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["getorthrow('public_url",{"_index":233,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["getparseas",{"_index":1767,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["getpresentationconfig",{"_index":2507,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfig(id",{"_index":2523,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs",{"_index":2508,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs(tenantid",{"_index":2525,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpublickey",{"_index":1577,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["getpublickey(type",{"_index":1584,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["getrequestwithsession",{"_index":2270,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getrequestwithsession(tenantid",{"_index":2272,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getresponse",{"_index":2271,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["getresponse(body",{"_index":2276,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["gets",{"_index":3169,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["getschema",{"_index":1108,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getschema(id",{"_index":1131,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getsession",{"_index":2792,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(@param('id",{"_index":2810,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(id",{"_index":2795,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsigner",{"_index":1205,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getsigner(privatekeyjwk",{"_index":1210,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getsignjwtcallback",{"_index":1233,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getsignjwtcallback(tenantid",{"_index":1249,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getsimplejwtconfig",{"_index":2007,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getsimplejwtconfig(configservice",{"_index":2013,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getting",{"_index":1074,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["gettoken",{"_index":503,"title":{},"body":{"controllers/AuthController.html":{}}}],["gettoken(@body",{"_index":550,"title":{},"body":{"controllers/AuthController.html":{}}}],["gettoken(body",{"_index":504,"title":{},"body":{"controllers/AuthController.html":{}}}],["geturl",{"_index":1793,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["getvct",{"_index":1109,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getvct(credentialid",{"_index":1133,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getverifier",{"_index":1206,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getverifier(publickeyjwk",{"_index":1215,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["ghcr.io/cre8/eudiplo:latest",{"_index":3516,"title":{},"body":{"index.html":{}}}],["git",{"_index":3500,"title":{},"body":{"index.html":{}}}],["give",{"_index":3703,"title":{},"body":{"license.html":{}}}],["given",{"_index":2275,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/VaultKeyService.html":{}}}],["global",{"_index":2058,"title":{},"body":{"modules/KeyModule.html":{}}}],["globalthis.fetch",{"_index":978,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["globalthis.headers",{"_index":1246,"title":{},"body":{"injectables/CryptoService.html":{},"miscellaneous/functions.html":{}}}],["goodwill",{"_index":3792,"title":{},"body":{"license.html":{}}}],["governing",{"_index":3839,"title":{},"body":{"license.html":{}}}],["grade",{"_index":3480,"title":{},"body":{"index.html":{}}}],["grant",{"_index":780,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"license.html":{}}}],["granted",{"_index":3598,"title":{},"body":{"license.html":{}}}],["granting",{"_index":3571,"title":{},"body":{"license.html":{}}}],["grants",{"_index":2201,"title":{},"body":{"injectables/Oid4vciService.html":{},"license.html":{}}}],["granttype",{"_index":731,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["graph",{"_index":3844,"title":{},"body":{"modules.html":{}}}],["grossly",{"_index":3781,"title":{},"body":{"license.html":{}}}],["guide",{"_index":3525,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":3549,"title":{},"body":{"index.html":{}}}],["h",{"_index":3519,"title":{},"body":{"index.html":{}}}],["handle",{"_index":625,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["handled",{"_index":1666,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{}}}],["handlenotification",{"_index":2151,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["handlenotification(req",{"_index":2159,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["handler",{"_index":2834,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["handlerequest",{"_index":2621,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"miscellaneous/functions.html":{}}}],["handlerequest(request",{"_index":2597,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"miscellaneous/functions.html":{}}}],["handles",{"_index":613,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["handlesigningkeyerror",{"_index":2033,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["handling",{"_index":101,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"changelog.html":{}}}],["harmless",{"_index":3816,"title":{},"body":{"license.html":{}}}],["hascerts",{"_index":1234,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hascerts(tenantid",{"_index":1252,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hash",{"_index":1377,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hashalg",{"_index":1179,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["hashalgorithm",{"_index":1271,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hashalgorithm.sha256",{"_index":1397,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hashcallback",{"_index":1394,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hasher",{"_index":1178,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["hasresponsedata",{"_index":2431,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["haswebhook",{"_index":2399,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["head",{"_index":891,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["header",{"_index":314,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["header('content",{"_index":3025,"title":{},"body":{"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["header.entries",{"_index":1818,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["header.kid",{"_index":2727,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c",{"_index":2707,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c.map",{"_index":2709,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header['jwk",{"_index":2717,"title":{},"body":{"injectables/ResolverService.html":{}}}],["headername",{"_index":308,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["headers",{"_index":470,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["headers.append(key",{"_index":1407,"title":{},"body":{"injectables/CryptoService.html":{}}}],["headers.set(key",{"_index":1408,"title":{},"body":{"injectables/CryptoService.html":{}}}],["headers[session.webhook.auth.config.headername",{"_index":2412,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["headers_",{"_index":1529,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["health",{"_index":1679,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":1695,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":408,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1687,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1682,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1677,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{}}}],["healthcontrollercheckdata",{"_index":3886,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["healthcontrollercheckerror",{"_index":3887,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["healthcontrollercheckerrors",{"_index":3888,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["healthcontrollercheckresponse",{"_index":3889,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["healthcontrollercheckresponses",{"_index":3890,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["healthmodule",{"_index":371,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["helper",{"_index":1309,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hereby",{"_index":3658,"title":{},"body":{"license.html":{}}}],["herein",{"_index":3739,"title":{},"body":{"license.html":{}}}],["hey",{"_index":988,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["hh:mm:ss",{"_index":452,"title":{},"body":{"modules/AppModule.html":{}}}],["hold",{"_index":3815,"title":{},"body":{"license.html":{}}}],["host",{"_index":231,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialsService.html":{},"modules/DatabaseModule.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["host.replace('https",{"_index":2341,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${tenantid",{"_index":2326,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${tenantid}/credentials/vct/${vc.id",{"_index":1196,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["host}/${tenantid}/oid4vp/response",{"_index":2343,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["hour",{"_index":2958,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["hours",{"_index":2962,"title":{},"body":{"modules/SessionModule.html":{}}}],["hs256",{"_index":1653,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["http",{"_index":493,"title":{},"body":{"interfaces/Auth.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{},"index.html":{}}}],["http://localhost:3000/auth/token",{"_index":3518,"title":{},"body":{"index.html":{}}}],["http://www.apache.org/licenses",{"_index":3557,"title":{},"body":{"license.html":{}}}],["http://www.apache.org/licenses/license",{"_index":3837,"title":{},"body":{"license.html":{}}}],["httpmethod",{"_index":721,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["httpmodule",{"_index":2062,"title":{},"body":{"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"modules/VerifierModule.html":{}}}],["https://${req.host}${req.url",{"_index":2213,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["https://cre8.github.io/eudiplo/latest",{"_index":356,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["https://cre8.github.io/eudiplo/latest/api",{"_index":3521,"title":{},"body":{"index.html":{}}}],["https://cre8.github.io/eudiplo/main",{"_index":3533,"title":{},"body":{"index.html":{}}}],["https://developer.mozilla.org/docs/web/api/fetch#body",{"_index":1011,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["https://developer.mozilla.org/docs/web/api/fetch#method",{"_index":919,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["https://developer.mozilla.org/docs/web/api/headers/headers#init",{"_index":915,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["https://github.com/cre8/eudiplo.git",{"_index":3501,"title":{},"body":{"index.html":{}}}],["https://json",{"_index":2729,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["https://swagger.io/docs/specification/serialization/#query",{"_index":934,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["https://www.npmjs.com/package/@hey",{"_index":986,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["httpservice",{"_index":2063,"title":{},"body":{"modules/KeyModule.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["i.e",{"_index":1824,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["iat",{"_index":1186,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["id",{"_index":15,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"injectables/VaultKeyService.html":{}}}],["identification",{"_index":3831,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":26,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"interfaces/IssuerMetadata.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{}}}],["identifying",{"_index":3826,"title":{},"body":{"license.html":{}}}],["ids",{"_index":821,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["ids[0",{"_index":824,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["idx",{"_index":3085,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["ignore",{"_index":453,"title":{},"body":{"modules/AppModule.html":{}}}],["ignoreexpiration",{"_index":2044,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ignoring",{"_index":840,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["ii",{"_index":3587,"title":{},"body":{"license.html":{}}}],["iii",{"_index":3593,"title":{},"body":{"license.html":{}}}],["image",{"_index":1778,"title":{},"body":{"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png",{"_index":1923,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png')@apibody({type",{"_index":1897,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["image/png')@useguards(jwtauthguard)@apisecurity('bearer')@apibody({type",{"_index":2463,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["imeplement",{"_index":1202,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implement",{"_index":842,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["implementation",{"_index":974,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["implementation.ts",{"_index":1200,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/typealiases.html":{}}}],["implementation.ts:19",{"_index":1207,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:24",{"_index":1212,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:29",{"_index":1216,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implements",{"_index":81,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/FileSystemKeyService.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["implied",{"_index":3764,"title":{},"body":{"license.html":{}}}],["import",{"_index":29,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"license.html":{}}}],["importjwk",{"_index":1274,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/PresentationsService.html":{}}}],["importjwk(payload.cnf.jwk",{"_index":2574,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["importjwk(privatekey",{"_index":1625,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["importjwk(publicjwk",{"_index":1370,"title":{},"body":{"injectables/CryptoService.html":{}}}],["importjwk(publickey",{"_index":1627,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["importpkcs8",{"_index":1601,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["imports",{"_index":382,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{}}}],["importspki",{"_index":1602,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["importspki(key",{"_index":3207,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["improvements",{"_index":3345,"title":{},"body":{"changelog.html":{}}}],["improving",{"_index":3649,"title":{},"body":{"license.html":{}}}],["inability",{"_index":3790,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":3787,"title":{},"body":{"license.html":{}}}],["include",{"_index":3627,"title":{},"body":{"license.html":{}}}],["included",{"_index":3614,"title":{},"body":{"license.html":{}}}],["includes",{"_index":2305,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{},"license.html":{}}}],["including",{"_index":73,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/SessionLogContext.html":{},"license.html":{}}}],["inclusion",{"_index":3637,"title":{},"body":{"license.html":{}}}],["incorporated",{"_index":3656,"title":{},"body":{"license.html":{}}}],["incurred",{"_index":3817,"title":{},"body":{"license.html":{}}}],["indemnify",{"_index":3813,"title":{},"body":{"license.html":{}}}],["indemnity",{"_index":3804,"title":{},"body":{"license.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["indexable",{"_index":2817,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["indexes",{"_index":3048,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["indicated",{"_index":3612,"title":{},"body":{"license.html":{}}}],["indicates",{"_index":28,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/RegistrarService.html":{}}}],["indicating",{"_index":2486,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["indirect",{"_index":3583,"title":{},"body":{"license.html":{}}}],["individual",{"_index":3595,"title":{},"body":{"license.html":{}}}],["infer",{"_index":994,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["infers",{"_index":1766,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["information",{"_index":355,"title":{},"body":{"controllers/AppController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/IssuerManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["informational",{"_index":3726,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":3680,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":3694,"title":{},"body":{"license.html":{}}}],["inherit",{"_index":1316,"title":{},"body":{"injectables/CryptoService.html":{}}}],["inherited",{"_index":3166,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["init",{"_index":1483,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["init(tenant",{"_index":1588,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["init(tenantid",{"_index":1488,"title":{},"body":{"injectables/EncryptionService.html":{},"classes/KeyService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["initial",{"_index":1025,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["initialconfig",{"_index":291,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["initialization",{"_index":1022,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["initialize",{"_index":1026,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"interfaces/RequestOptions.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["initialized",{"_index":150,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["initializes",{"_index":103,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["inject",{"_index":436,"title":{},"body":{"modules/AppModule.html":{},"injectables/CryptoService.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["inject('keyservice",{"_index":1264,"title":{},"body":{"injectables/CryptoService.html":{}}}],["injectable",{"_index":30,"title":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["injectables",{"_index":688,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"overview.html":{}}}],["injectrepository",{"_index":1154,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["injectrepository(issuanceconfig",{"_index":1159,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["injectrepository(presentationconfig",{"_index":2547,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["injectrepository(session",{"_index":2996,"title":{},"body":{"injectables/SessionService.html":{}}}],["injectrepository(statusmapping",{"_index":3043,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["input",{"_index":3213,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["install",{"_index":985,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"changelog.html":{}}}],["instance",{"_index":95,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{}}}],["instance.decode(`${data}.${signature",{"_index":2563,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["instanceof",{"_index":1817,"title":{},"body":{"classes/Interceptors.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["instead",{"_index":989,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["institute",{"_index":3684,"title":{},"body":{"license.html":{}}}],["institutions",{"_index":3544,"title":{},"body":{"index.html":{}}}],["insufficient_authorization",{"_index":808,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["int",{"_index":3127,"title":{},"body":{"entities/StatusMapping.html":{}}}],["integrates",{"_index":3463,"title":{},"body":{"index.html":{}}}],["integration",{"_index":837,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"index.html":{}}}],["intended",{"_index":1469,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["intendeduse",{"_index":3891,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["intentionally",{"_index":3635,"title":{},"body":{"license.html":{}}}],["interacting",{"_index":83,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["interaction",{"_index":72,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["intercept",{"_index":2824,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["intercept(context",{"_index":2828,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interceptor",{"_index":1704,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["interceptors",{"_index":1020,"title":{"classes/Interceptors.html":{}},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["intercepts",{"_index":2831,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interested",{"_index":3546,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/Fields.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/StatusListFile.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/Fields.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"interfaces/IssuerMetadata.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/Fields.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/StatusListFile.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"license.html":{},"overview.html":{}}}],["internally",{"_index":1844,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["internals",{"_index":1843,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["interval",{"_index":3000,"title":{},"body":{"injectables/SessionService.html":{}}}],["intervaltime",{"_index":2998,"title":{},"body":{"injectables/SessionService.html":{}}}],["invalid",{"_index":514,"title":{},"body":{"controllers/AuthController.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{}}}],["irrevocable",{"_index":3665,"title":{},"body":{"license.html":{}}}],["is_public_key",{"_index":1989,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["isabsolute",{"_index":397,"title":{},"body":{"modules/AppModule.html":{}}}],["isabsolute(folder",{"_index":483,"title":{},"body":{"modules/AppModule.html":{}}}],["isenabled",{"_index":139,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["isenum",{"_index":2095,"title":{},"body":{"classes/NotificationRequestDto.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{}}}],["isenum(['credential_issued",{"_index":2093,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["isenum(responsetype",{"_index":2119,"title":{},"body":{"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{}}}],["isglobal",{"_index":433,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":319,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isin(['apikey",{"_index":333,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isin([0",{"_index":3138,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["ismultitenant",{"_index":1675,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["isnumber",{"_index":3137,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isnumber()@isin(['0",{"_index":3135,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["iso",{"_index":948,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["isobject",{"_index":320,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/IssuanceConfig.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isobject()@column('json",{"_index":2443,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["isobject()@isoptional",{"_index":2115,"title":{},"body":{"classes/OfferRequest.html":{},"classes/PresentationRequest.html":{}}}],["isoptional",{"_index":321,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthorizeQueries.html":{},"entities/IssuanceConfig.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isoptional()@isstring",{"_index":676,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["ispublic",{"_index":1991,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["iss",{"_index":1185,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["isstring",{"_index":311,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"entities/IssuanceConfig.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isstring()@isoptional",{"_index":3132,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["issuance",{"_index":812,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/SessionLoggerService.html":{}}}],["issuanceconfig",{"_index":1136,"title":{"entities/IssuanceConfig.html":{}},"body":{"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{}}}],["issuanceconfigrepo",{"_index":1113,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["issuance—and",{"_index":3478,"title":{},"body":{"index.html":{}}}],["issue",{"_index":2127,"title":{},"body":{"controllers/Oid4vciController.html":{},"license.html":{}}}],["issued",{"_index":1075,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["issuer",{"_index":739,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{},"index.html":{}}}],["issuer.png",{"_index":881,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["issuer/authorize/authorize.service",{"_index":3281,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["issuer/authorize/dto/authorize",{"_index":2786,"title":{},"body":{"entities/Session.html":{}}}],["issuer/credentials/credentials.service",{"_index":2173,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuer/credentials/entities/issuance",{"_index":1909,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["issuer/issuer.module",{"_index":390,"title":{},"body":{"modules/AppModule.html":{}}}],["issuer/oid4vci/dto/offer",{"_index":2319,"title":{},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{}}}],["issuer/oid4vci/oid4vci.service",{"_index":1911,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/WellKnownController.html":{}}}],["issuer/status",{"_index":2804,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{}}}],["issuer_cert.pem",{"_index":1300,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuer_cert.srl",{"_index":1353,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuer_key.pem",{"_index":1298,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuer_state",{"_index":671,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["issuer_validation_schema",{"_index":389,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{}}}],["issuercert",{"_index":1299,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuerkey",{"_index":1297,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuermanagementcontroller",{"_index":1878,"title":{"controllers/IssuerManagementController.html":{}},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{}}}],["issuermetadata",{"_index":1950,"title":{"interfaces/IssuerMetadata.html":{}},"body":{"interfaces/IssuerMetadata.html":{},"injectables/Oid4vciService.html":{},"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{}}}],["issuermetadata(@param('tenantid",{"_index":3287,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["issuermetadata(tenantid",{"_index":2162,"title":{},"body":{"injectables/Oid4vciService.html":{},"controllers/WellKnownController.html":{}}}],["issuermetadata.authorizationservers",{"_index":2212,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuermetadata.credentialissuer.credential_issuer",{"_index":2214,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuermetadataresult",{"_index":2171,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuermodule",{"_index":372,"title":{"modules/IssuerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules.html":{},"overview.html":{}}}],["issuing",{"_index":2946,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["it's",{"_index":944,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/Oid4vpService.html":{}}}],["item.name",{"_index":209,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["iterator",{"_index":1816,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["january",{"_index":3555,"title":{},"body":{"license.html":{}}}],["job",{"_index":2988,"title":{},"body":{"injectables/SessionService.html":{}}}],["jobs",{"_index":3376,"title":{},"body":{"changelog.html":{}}}],["joi",{"_index":384,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/RegistrarModule.html":{},"modules/SessionModule.html":{},"dependencies.html":{}}}],["joi.exist",{"_index":2659,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["joi.number().default(24",{"_index":2960,"title":{},"body":{"modules/SessionModule.html":{}}}],["joi.number().default(60",{"_index":2957,"title":{},"body":{"modules/SessionModule.html":{}}}],["joi.number().when('db_type",{"_index":1438,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["joi.object",{"_index":419,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.optional",{"_index":1435,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["joi.required",{"_index":1436,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"modules/RegistrarModule.html":{}}}],["joi.string",{"_index":425,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/RegistrarModule.html":{}}}],["joi.string().default('./tmp",{"_index":421,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('24h",{"_index":587,"title":{},"body":{"modules/AuthModule.html":{}}}],["joi.string().default('eudiplo",{"_index":423,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('key",{"_index":2076,"title":{},"body":{"modules/KeyModule.html":{}}}],["joi.string().optional",{"_index":578,"title":{},"body":{"modules/AuthModule.html":{}}}],["joi.string().optional().default('eudiplo",{"_index":585,"title":{},"body":{"modules/AuthModule.html":{}}}],["joi.string().required",{"_index":581,"title":{},"body":{"modules/AuthModule.html":{}}}],["joi.string().uri().when('km_type",{"_index":2072,"title":{},"body":{"modules/KeyModule.html":{}}}],["joi.string().valid('file",{"_index":2068,"title":{},"body":{"modules/KeyModule.html":{}}}],["joi.string().valid('sqlite",{"_index":1430,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["joi.string().when('db_type",{"_index":1433,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["joi.string().when('km_type",{"_index":2074,"title":{},"body":{"modules/KeyModule.html":{}}}],["joi.string().when('registrar_url",{"_index":2658,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["joi.when('oidc",{"_index":580,"title":{},"body":{"modules/AuthModule.html":{}}}],["join",{"_index":61,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["join(__dirname",{"_index":485,"title":{},"body":{"modules/AppModule.html":{}}}],["join(folder",{"_index":484,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{}}}],["join(separator",{"_index":2751,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["join(separatorarraynoexplode(style",{"_index":2746,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["join(this.configservice.getorthrow('folder",{"_index":1283,"title":{},"body":{"injectables/CryptoService.html":{}}}],["join(this.folder",{"_index":1286,"title":{},"body":{"injectables/CryptoService.html":{}}}],["joinedvalues",{"_index":2743,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["joining",{"_index":3444,"title":{},"body":{"index.html":{}}}],["jose",{"_index":1276,"title":{},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{}}}],["joseheaderparameters",{"_index":2087,"title":{},"body":{"classes/KeyService.html":{}}}],["josepublickey",{"_index":1390,"title":{},"body":{"injectables/CryptoService.html":{}}}],["json",{"_index":1005,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/EC_Public.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"interfaces/RequestOptions.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"controllers/WellKnownController.html":{},"index.html":{}}}],["json.parse",{"_index":295,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["json.parse(readfilesync(file",{"_index":3075,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["json.parse(readfilesync(this.privateenncryptionpath",{"_index":1509,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["json.stringify",{"_index":910,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["json.stringify(await",{"_index":1506,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["json.stringify(body",{"_index":2633,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["json.stringify(config",{"_index":301,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["json.stringify(content",{"_index":3078,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["json.stringify(credentialissuer).replace",{"_index":2189,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["json.stringify(data",{"_index":2877,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["json.stringify(displayinfo",{"_index":883,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["json.stringify(initialconfig",{"_index":293,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["json.stringify(value",{"_index":1829,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{}}}],["json.stringify(values.dcql_query).replace",{"_index":2329,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["json.stringify(values.registrationcert).replace",{"_index":2332,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["jsonbodyserializer",{"_index":1718,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{}}}],["jsonwebkey",{"_index":1211,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"entities/KeyEntity.html":{}}}],["jwk",{"_index":722,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["jwk.kid",{"_index":3210,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["jwk_ec_public",{"_index":1463,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["jwks",{"_index":1474,"title":{},"body":{"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["jwks_uri",{"_index":744,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["jwksrequestsperminute",{"_index":2029,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwksresponsedto",{"_index":1475,"title":{"classes/JwksResponseDto.html":{}},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"controllers/WellKnownController.html":{}}}],["jwksuri",{"_index":2030,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwkthumbprint",{"_index":1396,"title":{},"body":{"injectables/CryptoService.html":{}}}],["jwt",{"_index":510,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{},"index.html":{}}}],["jwt.service",{"_index":525,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["jwt.setaudience(options.audience",{"_index":1660,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.sign(secretkey",{"_index":1661,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.strategy",{"_index":575,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt/crypto",{"_index":1142,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoService-1.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["jwt/jwt",{"_index":3036,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["jwt/sd",{"_index":1145,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["jwt/types",{"_index":1606,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{}}}],["jwt_alg_values",{"_index":2354,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["jwt_expires_in",{"_index":586,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt_issuer",{"_index":584,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwt_secret",{"_index":583,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt_secret=$(openssl",{"_index":3506,"title":{},"body":{"index.html":{}}}],["jwt_secret=your",{"_index":3512,"title":{},"body":{"index.html":{}}}],["jwtauthguard",{"_index":570,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AuthModule.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"overview.html":{}}}],["jwtdecrypt",{"_index":1496,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtdecrypt(response",{"_index":1515,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtfromrequest",{"_index":2012,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtheaderparameters",{"_index":1595,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["jwtpayload",{"_index":1594,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["jwtservice",{"_index":524,"title":{"injectables/JwtService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"overview.html":{}}}],["jwtstrategy",{"_index":571,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"overview.html":{}}}],["jwtstrategy.getkeycloakconfig(configservice",{"_index":2024,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtstrategy.getsimplejwtconfig(configservice",{"_index":2025,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtverify",{"_index":1275,"title":{},"body":{"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/PresentationsService.html":{}}}],["jwtverify(`${data}.${signature",{"_index":2575,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["jwtverify(compact",{"_index":1372,"title":{},"body":{"injectables/CryptoService.html":{}}}],["jwtverify(token",{"_index":1667,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwtwithstatuslistpayload",{"_index":3033,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["kb",{"_index":2353,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["kbverifier",{"_index":2503,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["key",{"_index":22,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/AuthResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"index.html":{}}}],["key).then",{"_index":2576,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["key.kid",{"_index":2726,"title":{},"body":{"injectables/ResolverService.html":{}}}],["key.pem",{"_index":1292,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["key.service",{"_index":1605,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"injectables/VaultKeyService.html":{}}}],["key.service.ts",{"_index":1572,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["key.service.ts:101",{"_index":3171,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:102",{"_index":3172,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:118",{"_index":1583,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:121",{"_index":3165,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:131",{"_index":1585,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:132",{"_index":1586,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:133",{"_index":1587,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:137",{"_index":3175,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:15",{"_index":3182,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:150",{"_index":1596,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:17",{"_index":3181,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:185",{"_index":3160,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:19",{"_index":3156,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:29",{"_index":1597,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:31",{"_index":1598,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:32",{"_index":1578,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:41",{"_index":1590,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:42",{"_index":1589,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:51",{"_index":1592,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:60",{"_index":1580,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:68",{"_index":3158,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.slice(prefix.length",{"_index":1564,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["key.startswith(prefix",{"_index":1563,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["key/key.service",{"_index":1277,"title":{},"body":{"injectables/CryptoService.html":{}}}],["key_validation_schema",{"_index":398,"title":{},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{}}}],["keybinding",{"_index":2541,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keybindingnonce",{"_index":2530,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keybindings",{"_index":2540,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keycloak",{"_index":1645,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"changelog.html":{}}}],["keycloak/oidc",{"_index":553,"title":{},"body":{"controllers/AuthController.html":{}}}],["keycloak_client_id",{"_index":582,"title":{},"body":{"modules/AuthModule.html":{}}}],["keycloak_internal_issuer_url",{"_index":579,"title":{},"body":{"modules/AuthModule.html":{}}}],["keyentity",{"_index":2050,"title":{"entities/KeyEntity.html":{}},"body":{"entities/KeyEntity.html":{},"modules/KeyModule.html":{}}}],["keylike",{"_index":3170,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keymap",{"_index":1534,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{},"miscellaneous/typealiases.html":{}}}],["keymodule",{"_index":373,"title":{"modules/KeyModule.html":{}},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{},"modules.html":{},"overview.html":{}}}],["keymodule.forroot",{"_index":478,"title":{},"body":{"modules/AppModule.html":{}}}],["keypair",{"_index":1209,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["keys",{"_index":1287,"title":{},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["keys.privatekey",{"_index":1616,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["keys.publickey",{"_index":1617,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["keys.publickey.kid",{"_index":1631,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["keyservice",{"_index":1229,"title":{"classes/KeyService.html":{}},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["keyservice:100",{"_index":3168,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keyservice:156",{"_index":3178,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keyservice:45",{"_index":3173,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keyservice:57",{"_index":3177,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keyservice:90",{"_index":3167,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["kind",{"_index":3763,"title":{},"body":{"license.html":{}}}],["km_type",{"_index":2067,"title":{},"body":{"modules/KeyModule.html":{}}}],["kmtype",{"_index":2078,"title":{},"body":{"modules/KeyModule.html":{}}}],["know",{"_index":251,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["known",{"_index":3272,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller",{"_index":388,"title":{},"body":{"modules/AppModule.html":{}}}],["known.controller.ts",{"_index":3270,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:26",{"_index":3280,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:36",{"_index":3274,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:50",{"_index":3277,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known/dto/credential",{"_index":1049,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["known/dto/jwks",{"_index":1279,"title":{},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["known/dto/oauth",{"_index":2097,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["known/jwks.json",{"_index":746,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["known/jwt",{"_index":2720,"title":{},"body":{"injectables/ResolverService.html":{}}}],["known/openid",{"_index":124,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["known/well",{"_index":387,"title":{},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{}}}],["kty",{"_index":1465,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["label",{"_index":1731,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["language",{"_index":3838,"title":{},"body":{"license.html":{}}}],["last",{"_index":3083,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["later",{"_index":846,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/IssuerManagementController.html":{}}}],["latest",{"_index":3528,"title":{},"body":{"index.html":{}}}],["law",{"_index":3759,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":3690,"title":{},"body":{"license.html":{}}}],["layer",{"_index":3434,"title":{},"body":{"index.html":{}}}],["legal",{"_index":3572,"title":{},"body":{"license.html":{}}}],["legend",{"_index":361,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["length",{"_index":2878,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/VaultKeyService.html":{}}}],["lessthan",{"_index":2993,"title":{},"body":{"injectables/SessionService.html":{}}}],["lessthan(new",{"_index":3011,"title":{},"body":{"injectables/SessionService.html":{}}}],["level",{"_index":439,"title":{},"body":{"modules/AppModule.html":{}}}],["liability",{"_index":3776,"title":{},"body":{"license.html":{}}}],["liable",{"_index":3784,"title":{},"body":{"license.html":{}}}],["libraries",{"_index":3451,"title":{},"body":{"index.html":{}}}],["licensable",{"_index":3678,"title":{},"body":{"license.html":{}}}],["license",{"_index":3550,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":3551,"title":{},"body":{"index.html":{},"license.html":{}}}],["licenses",{"_index":3695,"title":{},"body":{"license.html":{}}}],["licensor",{"_index":3567,"title":{},"body":{"license.html":{}}}],["lightweight",{"_index":3459,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":3765,"title":{},"body":{"license.html":{}}}],["limitations",{"_index":3840,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3600,"title":{},"body":{"license.html":{}}}],["line",{"_index":176,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["link",{"_index":909,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["list",{"_index":1064,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/PresentationsService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"dependencies.html":{},"index.html":{}}}],["list')@header('content",{"_index":3020,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.controller",{"_index":3105,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.controller.ts",{"_index":3015,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.controller.ts:16",{"_index":3022,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.json",{"_index":3042,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["list.module",{"_index":1966,"title":{},"body":{"modules/IssuerModule.html":{},"modules/SessionModule.html":{}}}],["list.module.ts",{"_index":3104,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.service",{"_index":1148,"title":{},"body":{"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{}}}],["list.service.ts",{"_index":3029,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["list.service.ts:112",{"_index":3116,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:116",{"_index":3115,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:125",{"_index":3121,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:138",{"_index":3113,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:178",{"_index":3120,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:189",{"_index":3122,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:31",{"_index":3111,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:39",{"_index":3118,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:42",{"_index":3119,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:52",{"_index":3117,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:79",{"_index":3114,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list/dto/status",{"_index":2805,"title":{},"body":{"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{}}}],["list/entities/status",{"_index":3123,"title":{},"body":{"entities/StatusMapping.html":{}}}],["list/status",{"_index":1147,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["listen",{"_index":867,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["lists",{"_index":3645,"title":{},"body":{"license.html":{}}}],["literal",{"_index":598,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/OfferRequest.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["litigation",{"_index":3685,"title":{},"body":{"license.html":{}}}],["live",{"_index":2604,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["load",{"_index":282,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["loadclients",{"_index":853,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["loadconfig",{"_index":2664,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["loadconfig(tenantid",{"_index":283,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["loadtypemetadataformat",{"_index":1183,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["locale",{"_index":877,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["locality",{"_index":2593,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["lock",{"_index":3457,"title":{},"body":{"index.html":{}}}],["log",{"_index":2862,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["log_level",{"_index":424,"title":{},"body":{"modules/AppModule.html":{}}}],["logauthorizationrequest",{"_index":2901,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logauthorizationrequest(context",{"_index":2913,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcontext",{"_index":2220,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["logcredentialissuance",{"_index":2902,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialissuance(context",{"_index":2916,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification",{"_index":2903,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification(context",{"_index":2919,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowcomplete",{"_index":2904,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowcomplete(context",{"_index":2921,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror",{"_index":2905,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror(context",{"_index":2924,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart",{"_index":2906,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart(context",{"_index":2926,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logged",{"_index":2820,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["logger",{"_index":2177,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"changelog.html":{}}}],["logger.decorator",{"_index":2135,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor",{"_index":1973,"title":{},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["logger.interceptor.ts",{"_index":2822,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:131",{"_index":2839,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:17",{"_index":2827,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:34",{"_index":2830,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.service",{"_index":1972,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["logger.service.ts",{"_index":2898,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:10",{"_index":2912,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:101",{"_index":2920,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:121",{"_index":2915,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:136",{"_index":2935,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:151",{"_index":2929,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:171",{"_index":2931,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:188",{"_index":2933,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:22",{"_index":2927,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:39",{"_index":2922,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:56",{"_index":2925,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:81",{"_index":2918,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["loggermiddleware",{"_index":3424,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loggermiddleware(req",{"_index":3430,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loggermodule",{"_index":414,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule.forrootasync",{"_index":435,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":2219,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["logic",{"_index":3468,"title":{},"body":{"index.html":{}}}],["loginreponse",{"_index":3893,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lognotification",{"_index":2907,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["lognotification(context",{"_index":2928,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logo",{"_index":879,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["logs",{"_index":2306,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"changelog.html":{}}}],["logsession",{"_index":2908,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsession(context",{"_index":2930,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror",{"_index":2909,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror(context",{"_index":2932,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtokenexchange",{"_index":2910,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtokenexchange(context",{"_index":2934,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["long",{"_index":3495,"title":{},"body":{"index.html":{}}}],["longer",{"_index":563,"title":{},"body":{"controllers/AuthController.html":{}}}],["loss",{"_index":3791,"title":{},"body":{"license.html":{}}}],["losses",{"_index":3798,"title":{},"body":{"license.html":{}}}],["made",{"_index":971,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"entities/PresentationConfig.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["mailing",{"_index":3644,"title":{},"body":{"license.html":{}}}],["main",{"_index":3370,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["maintain",{"_index":596,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["major",{"_index":3532,"title":{},"body":{"index.html":{}}}],["make",{"_index":3347,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["making",{"_index":2515,"title":{},"body":{"injectables/PresentationsService.html":{},"license.html":{}}}],["malfunction",{"_index":3796,"title":{},"body":{"license.html":{}}}],["managed",{"_index":3647,"title":{},"body":{"license.html":{}}}],["management",{"_index":1882,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"index.html":{},"license.html":{}}}],["management.controller",{"_index":1968,"title":{},"body":{"modules/IssuerModule.html":{}}}],["management.controller.ts",{"_index":1881,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["management.controller.ts:106",{"_index":1887,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["management.controller.ts:116",{"_index":1902,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["management.controller.ts:132",{"_index":1890,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["management.controller.ts:74",{"_index":1899,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["management/issuer",{"_index":1880,"title":{},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{}}}],["managing",{"_index":71,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/FileSystemKeyService.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"modules/SessionModule.html":{},"miscellaneous/typealiases.html":{}}}],["map",{"_index":1524,"title":{},"body":{"interfaces/Fields.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["map(([key",{"_index":2764,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["map((_",{"_index":3058,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["map((v",{"_index":2750,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["map.get(config.key",{"_index":1554,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["map.get(key",{"_index":1560,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["map.set(config.key",{"_index":1537,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["mapping",{"_index":3088,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity",{"_index":3039,"title":{},"body":{"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity.ts",{"_index":3124,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:12",{"_index":3128,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:15",{"_index":3126,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:6",{"_index":3130,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:9",{"_index":3129,"title":{},"body":{"entities/StatusMapping.html":{}}}],["marked",{"_index":3652,"title":{},"body":{"license.html":{}}}],["marks",{"_index":3749,"title":{},"body":{"license.html":{}}}],["match",{"_index":1739,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/ResolverService.html":{}}}],["match.length",{"_index":1742,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["match.substring(1",{"_index":1741,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["matches",{"_index":1737,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["matching",{"_index":259,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["math.floor(date.now",{"_index":2363,"title":{},"body":{"injectables/Oid4vpService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["math.floor(new",{"_index":2365,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["math.random",{"_index":3061,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["math.round(new",{"_index":1187,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["matrix",{"_index":1732,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["matrixstyle",{"_index":1730,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["maybe",{"_index":277,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["mean",{"_index":3564,"title":{},"body":{"license.html":{}}}],["means",{"_index":3580,"title":{},"body":{"license.html":{}}}],["meant",{"_index":1822,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mechanical",{"_index":3604,"title":{},"body":{"license.html":{}}}],["mechanism",{"_index":845,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["mechanism(s",{"_index":1012,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["media",{"_index":3609,"title":{},"body":{"license.html":{}}}],["medium",{"_index":3700,"title":{},"body":{"license.html":{}}}],["meet",{"_index":3701,"title":{},"body":{"license.html":{}}}],["merchantability",{"_index":3767,"title":{},"body":{"license.html":{}}}],["merely",{"_index":3630,"title":{},"body":{"license.html":{}}}],["mergeconfigs",{"_index":1804,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergedheaders",{"_index":1815,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergedheaders.append(key",{"_index":1821,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergedheaders.delete(key",{"_index":1820,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergedheaders.set",{"_index":1828,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergeheaders",{"_index":1813,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["mergeheaders(a.headers",{"_index":1811,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["message",{"_index":2885,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["metadata",{"_index":1052,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"injectables/Oid4vciService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["metadata.'})@get('openid",{"_index":3279,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["metadata.dto",{"_index":2704,"title":{},"body":{"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{}}}],["metadata.dto.ts",{"_index":1050,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{}}}],["metadata.dto.ts:12",{"_index":1063,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:16",{"_index":1070,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:20",{"_index":1076,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:24",{"_index":1067,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:33",{"_index":1073,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:37",{"_index":1069,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:41",{"_index":1061,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:8",{"_index":1071,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["method",{"_index":161,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{}}}],["methodfn",{"_index":898,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["methods",{"_index":346,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["middleware",{"_index":966,"title":{"interfaces/Middleware.html":{}},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"index.html":{}}}],["mirko",{"_index":3833,"title":{},"body":{"license.html":{},"properties.html":{}}}],["miscellaneous",{"_index":3417,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["missing",{"_index":1319,"title":{},"body":{"injectables/CryptoService.html":{}}}],["misused",{"_index":179,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["mkdirsync",{"_index":835,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["mkdirsync(folder",{"_index":872,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["mkdirsync(this.folder",{"_index":1285,"title":{},"body":{"injectables/CryptoService.html":{}}}],["mm",{"_index":450,"title":{},"body":{"modules/AppModule.html":{}}}],["mode",{"_index":516,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["modifications",{"_index":3599,"title":{},"body":{"license.html":{}}}],["modified",{"_index":3705,"title":{},"body":{"license.html":{}}}],["modify",{"_index":1934,"title":{},"body":{"controllers/IssuerManagementController.html":{},"license.html":{}}}],["modifying",{"_index":2890,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["module",{"_index":357,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["modules",{"_index":359,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["mollik",{"_index":3834,"title":{},"body":{"license.html":{},"properties.html":{}}}],["more",{"_index":354,"title":{},"body":{"controllers/AppController.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"entities/Session.html":{},"license.html":{}}}],["mso_mdoc",{"_index":2349,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["multi",{"_index":515,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/Session.html":{},"changelog.html":{}}}],["multilang",{"_index":3894,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["multipart/form",{"_index":1776,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["multiple",{"_index":1007,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/Oid4vciService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["mysql2",{"_index":3401,"title":{},"body":{"dependencies.html":{}}}],["n${json.stringify(signer.publicjwk",{"_index":1400,"title":{},"body":{"injectables/CryptoService.html":{}}}],["name",{"_index":191,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["name)?.id",{"_index":210,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["name.endswith",{"_index":1743,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["name.length",{"_index":1745,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["name.startswith",{"_index":1746,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["name.substring(0",{"_index":1744,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["name.substring(1",{"_index":1747,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["nameing",{"_index":3363,"title":{},"body":{"changelog.html":{}}}],["names",{"_index":3748,"title":{},"body":{"license.html":{}}}],["name}=${allowreserved",{"_index":2756,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["name}=${joinedvalues",{"_index":2747,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["name}=${token",{"_index":1790,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["name}=${value.toisostring",{"_index":2759,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["name}[${key",{"_index":2765,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["native",{"_index":931,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["necessarily",{"_index":3679,"title":{},"body":{"license.html":{}}}],["necessary",{"_index":104,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/VaultKeyService.html":{}}}],["need",{"_index":216,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["needed",{"_index":186,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/RegistrarService.html":{}}}],["negligence",{"_index":3779,"title":{},"body":{"license.html":{}}}],["negligent",{"_index":3782,"title":{},"body":{"license.html":{}}}],["nested",{"_index":2753,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["nestinterceptor",{"_index":2844,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["nestjs",{"_index":415,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["nestjs/axios",{"_index":2064,"title":{},"body":{"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":33,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":35,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1987,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":64,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":574,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":3385,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":406,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionService.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":395,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":350,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":1689,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":1155,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["nestjs/typeorm/dist/typeorm.module",{"_index":2065,"title":{},"body":{"modules/KeyModule.html":{}}}],["never",{"_index":990,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["new",{"_index":118,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["next",{"_index":175,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"miscellaneous/functions.html":{}}}],["next.handle",{"_index":2850,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["next.handle().pipe",{"_index":2871,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["next.js",{"_index":982,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["nextfunction",{"_index":3431,"title":{},"body":{"miscellaneous/functions.html":{}}}],["node:child_process",{"_index":1281,"title":{},"body":{"injectables/CryptoService.html":{}}}],["node:crypto",{"_index":639,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/ResolverService.html":{}}}],["node:fs",{"_index":57,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["node:path",{"_index":62,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["nodejs",{"_index":1143,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoService-1.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["non",{"_index":3661,"title":{},"body":{"license.html":{}}}],["noncce",{"_index":2783,"title":{},"body":{"entities/Session.html":{}}}],["nonce",{"_index":2231,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["none",{"_index":2420,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["normally",{"_index":3723,"title":{},"body":{"license.html":{}}}],["nothing",{"_index":3738,"title":{},"body":{"license.html":{}}}],["notice",{"_index":3613,"title":{},"body":{"license.html":{}}}],["notices",{"_index":3708,"title":{},"body":{"license.html":{}}}],["notification",{"_index":1077,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/typealiases.html":{}}}],["notification.id",{"_index":2258,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notification_endpoint",{"_index":1060,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["notification_id",{"_index":2091,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["notificationevent",{"_index":2092,"title":{},"body":{"classes/NotificationRequestDto.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["notificationid",{"_index":2243,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notificationindex",{"_index":2263,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notificationrequestdto",{"_index":2089,"title":{"classes/NotificationRequestDto.html":{}},"body":{"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{}}}],["notifications",{"_index":340,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["notifications(body",{"_index":2128,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["notitification",{"_index":2161,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notwithstanding",{"_index":3736,"title":{},"body":{"license.html":{}}}],["now",{"_index":816,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["null",{"_index":263,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"injectables/ClientService.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["nullable",{"_index":1867,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["number",{"_index":171,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"classes/ParResponseDto.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["oauth",{"_index":2368,"title":{},"body":{"injectables/Oid4vpService.html":{},"index.html":{}}}],["oauth2",{"_index":82,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/RegistrarService.html":{}}}],["oauth2authorizationserver",{"_index":707,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["oauth2authorizationserverresponse",{"_index":2096,"title":{"classes/Oauth2AuthorizationServerResponse.html":{}},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{}}}],["oauth2client",{"_index":36,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["oauth2resourceserver",{"_index":2168,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["object",{"_index":911,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["object.entries",{"_index":1566,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["object.entries(arg",{"_index":1559,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["object.entries(body).foreach(([key",{"_index":2630,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["object.entries(extraprefixesmap",{"_index":1533,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["object.entries(header",{"_index":1819,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["object.entries(params",{"_index":1544,"title":{},"body":{"interfaces/Fields.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{}}}],["object.entries(req.headers",{"_index":1404,"title":{},"body":{"injectables/CryptoService.html":{}}}],["object.entries(value",{"_index":2763,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["object.entries(value).foreach(([key",{"_index":2760,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["object.keys(res.vp_token",{"_index":2577,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["object.keys(value).length",{"_index":1545,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["objects",{"_index":924,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["objectseparatorstyle",{"_index":2738,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["objectstyle",{"_index":2624,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["obligations",{"_index":3805,"title":{},"body":{"license.html":{}}}],["observable",{"_index":2836,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["obtain",{"_index":3836,"title":{},"body":{"license.html":{}}}],["offer",{"_index":820,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/Session.html":{},"license.html":{}}}],["offer.credentialoffer",{"_index":2205,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["offer.credentialofferobject",{"_index":2203,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["offerrequest",{"_index":1892,"title":{"classes/OfferRequest.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{}}}],["offerresponse",{"_index":1895,"title":{"classes/OfferResponse.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{}}}],["oid4vci",{"_index":464,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/SessionLogContext.html":{},"index.html":{}}}],["oid4vci/dto/offer",{"_index":1912,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["oid4vci/oid4vci.controller",{"_index":1964,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/oid4vci.service",{"_index":1963,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/util",{"_index":726,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["oid4vcicontroller",{"_index":1961,"title":{"controllers/Oid4vciController.html":{}},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{}}}],["oid4vciservice",{"_index":1910,"title":{"injectables/Oid4vciService.html":{}},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/WellKnownController.html":{},"overview.html":{}}}],["oid4vp",{"_index":466,"title":{},"body":{"modules/AppModule.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"index.html":{}}}],["oid4vp.controller",{"_index":2296,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["oid4vp.service",{"_index":2280,"title":{},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["oid4vp/dto/presentation",{"_index":2470,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vp/oid4vp.module",{"_index":2498,"title":{},"body":{"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{}}}],["oid4vp/oid4vp.service",{"_index":2471,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vpcontroller",{"_index":2266,"title":{"controllers/Oid4vpController.html":{}},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["oid4vpcontrollergetvalidpiddata",{"_index":3896,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollergetvalidpidresponses",{"_index":3897,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollergetvalidrequestdata",{"_index":3898,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollergetvalidrequestresponse",{"_index":3899,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollergetvalidrequestresponses",{"_index":3900,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollergetvalidrequestwithquerydata",{"_index":3901,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollergetvalidrequestwithqueryresponse",{"_index":3902,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollergetvalidrequestwithqueryresponses",{"_index":3903,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollerresponsedata",{"_index":3904,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollerresponseresponses",{"_index":3905,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollersuccessdata",{"_index":3906,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollersuccessresponse",{"_index":3907,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpcontrollersuccessresponses",{"_index":3908,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["oid4vpmodule",{"_index":1956,"title":{"modules/Oid4vpModule.html":{}},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["oid4vpservice",{"_index":698,"title":{"injectables/Oid4vpService.html":{}},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"overview.html":{}}}],["oidc",{"_index":84,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{},"changelog.html":{}}}],["oidc_client_id",{"_index":2660,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["oidc_client_secret",{"_index":2661,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["oidc_issuer_url",{"_index":2657,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["oidcissuerurl",{"_index":111,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/.well",{"_index":123,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/protocol/openid",{"_index":120,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["older",{"_index":2991,"title":{},"body":{"injectables/SessionService.html":{}}}],["omit",{"_index":969,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["omitkeys",{"_index":1034,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["omittypeclass",{"_index":3909,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["onapplicationbootstrap",{"_index":31,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{}}}],["once",{"_index":187,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["one",{"_index":212,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"changelog.html":{},"license.html":{}}}],["onevent",{"_index":63,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["onevent(tenant_events.tenant_init",{"_index":1255,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{}}}],["onevent(tenant_events.tenant_keys",{"_index":152,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["onmoduleinit",{"_index":32,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["ontenantinit",{"_index":1235,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["ontenantinit(tenantid",{"_index":153,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["open",{"_index":3435,"title":{},"body":{"index.html":{}}}],["openapi",{"_index":1825,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["openid",{"_index":2269,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["openid4vc/oauth2",{"_index":724,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"dependencies.html":{}}}],["openid4vc/openid4vci",{"_index":1150,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["openid4vc/openid4vp",{"_index":3393,"title":{},"body":{"dependencies.html":{}}}],["openid4vc/utils",{"_index":3394,"title":{},"body":{"dependencies.html":{}}}],["openid4vci",{"_index":611,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/WellKnownController.html":{}}}],["openid4vcidraftversion",{"_index":2172,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["openid4vcidraftversion.draft14",{"_index":2192,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["openid4vciissuer",{"_index":2166,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["openid4vp://?${(await",{"_index":805,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["openid4vp://?${values.uri",{"_index":2479,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["openssl",{"_index":1323,"title":{},"body":{"injectables/CryptoService.html":{}}}],["operations",{"_index":100,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService-1.html":{},"controllers/Oid4vpController.html":{},"injectables/RegistrarService.html":{}}}],["option",{"_index":975,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["optional",{"_index":16,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"classes/OfferRequest.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"interfaces/SerializePrimitiveOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":445,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["options.audience",{"_index":1659,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["options.auth",{"_index":1784,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.baseurl",{"_index":1794,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.dto",{"_index":2321,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["options.dto.ts",{"_index":2487,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{}}}],["options.expiresin",{"_index":1648,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["options.headers.append('cookie",{"_index":1789,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.headers.set(name",{"_index":1791,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.path",{"_index":1795,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.query",{"_index":1787,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.query[name",{"_index":1788,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.queryserializer",{"_index":1796,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["options.url",{"_index":1798,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["optionslegacyparser",{"_index":1035,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["order",{"_index":2553,"title":{},"body":{"injectables/PresentationsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["organizations",{"_index":3443,"title":{},"body":{"index.html":{}}}],["origin",{"_index":3754,"title":{},"body":{"license.html":{}}}],["original",{"_index":2891,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["originaldraftversion",{"_index":2191,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["otherwhise",{"_index":1920,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["otherwise",{"_index":138,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["out",{"_index":379,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"license.html":{},"overview.html":{}}}],["outstanding",{"_index":3591,"title":{},"body":{"license.html":{}}}],["over",{"_index":3462,"title":{},"body":{"index.html":{}}}],["override",{"_index":996,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["overview",{"_index":3442,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["overwrite",{"_index":1138,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["owner",{"_index":3569,"title":{},"body":{"license.html":{}}}],["ownership",{"_index":3588,"title":{},"body":{"license.html":{}}}],["p",{"_index":1504,"title":{},"body":{"injectables/EncryptionService.html":{},"index.html":{}}}],["p256",{"_index":3196,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["package",{"_index":3378,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pad",{"_index":3239,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["page",{"_index":3372,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["pair",{"_index":1318,"title":{},"body":{"injectables/CryptoService.html":{}}}],["pairs",{"_index":602,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["par",{"_index":616,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["par(body",{"_index":628,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["param",{"_index":94,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"controllers/IssuerManagementController.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["param('requestid",{"_index":2285,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["param('session",{"_index":2286,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["param('tenantid",{"_index":650,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{}}}],["parameter",{"_index":491,"title":{},"body":{"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["parameterize",{"_index":1307,"title":{},"body":{"injectables/CryptoService.html":{}}}],["parameters",{"_index":518,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"injectables/ClientService.html":{},"interfaces/Config-1.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":1542,"title":{"interfaces/Params.html":{}},"body":{"interfaces/Fields.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{}}}],["params.body",{"_index":1558,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["params[field.in",{"_index":1556,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["params[slot",{"_index":1546,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["paramsserializer",{"_index":932,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["parresponsedto",{"_index":646,"title":{"classes/ParResponseDto.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/ParResponseDto.html":{}}}],["parse",{"_index":1000,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/PresentationsService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["parseaccesstokenrequest",{"_index":770,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["parseas",{"_index":1001,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["parsechallengerequest",{"_index":692,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["parsechallengerequest(body",{"_index":708,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["parsed",{"_index":991,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/PresentationsService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["parsedaccesstokenauthorizationcoderequestgrant",{"_index":730,"title":{"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest",{"_index":769,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.accesstokenrequest",{"_index":782,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.dpop?.jwt",{"_index":787,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant",{"_index":781,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["parsedcredentialrequest",{"_index":2206,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest.credentialconfigurationid",{"_index":2225,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest.proofs.jwt",{"_index":2228,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest.proofs?.jwt?.length",{"_index":2227,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest?.proofs?.jwt",{"_index":2209,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parseresponse",{"_index":2509,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parseresponse(res",{"_index":2528,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["part",{"_index":490,"title":{},"body":{"interfaces/Auth.html":{},"injectables/PresentationsService.html":{},"license.html":{}}}],["partial",{"_index":1520,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["particular",{"_index":3769,"title":{},"body":{"license.html":{}}}],["parties",{"_index":76,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["party",{"_index":185,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["pass",{"_index":1933,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["passed",{"_index":951,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"interfaces/CryptoImplementation.html":{},"injectables/Oid4vciService.html":{}}}],["passport",{"_index":2020,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportjwtsecret",{"_index":2021,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportmodule",{"_index":573,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":2017,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":2005,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":1454,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["patch",{"_index":892,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"index.html":{}}}],["patent",{"_index":3670,"title":{},"body":{"license.html":{}}}],["path",{"_index":219,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/Client.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["path[name",{"_index":1748,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["path_",{"_index":1530,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["path_param_re",{"_index":1725,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["pathserializer",{"_index":1724,"title":{"interfaces/PathSerializer.html":{}},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{}}}],["pathurl",{"_index":1799,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["payload",{"_index":558,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{}}}],["payload.cnf",{"_index":2572,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["payload.iss",{"_index":2705,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.iss}/.well",{"_index":2719,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.sub",{"_index":1657,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["payload?.exp",{"_index":1374,"title":{},"body":{"injectables/CryptoService.html":{}}}],["payloads",{"_index":2694,"title":{},"body":{"injectables/ResolverService.html":{}}}],["pem",{"_index":23,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["percent",{"_index":928,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"license.html":{}}}],["perform",{"_index":1683,"title":{},"body":{"controllers/HealthController.html":{},"license.html":{}}}],["periodically",{"_index":162,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["permission",{"_index":3746,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":3597,"title":{},"body":{"license.html":{}}}],["perpetual",{"_index":3659,"title":{},"body":{"license.html":{}}}],["pertain",{"_index":3715,"title":{},"body":{"license.html":{}}}],["pg",{"_index":3405,"title":{},"body":{"dependencies.html":{}}}],["pick",{"_index":1019,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["pid",{"_index":1929,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentedData.html":{}}}],["pid,hostname",{"_index":454,"title":{},"body":{"modules/AppModule.html":{}}}],["pino",{"_index":416,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"dependencies.html":{}}}],["pinohttp",{"_index":438,"title":{},"body":{"modules/AppModule.html":{}}}],["pinologger",{"_index":2826,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["pipedelimited",{"_index":1729,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["pipeline",{"_index":3304,"title":{},"body":{"changelog.html":{}}}],["pkcecodechallengemethod",{"_index":723,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["pkcecodechallengemethod.s256",{"_index":754,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["pkcs#8",{"_index":1322,"title":{},"body":{"injectables/CryptoService.html":{}}}],["pkeyopt",{"_index":1326,"title":{},"body":{"injectables/CryptoService.html":{}}}],["placeholders",{"_index":2188,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["places",{"_index":3718,"title":{},"body":{"license.html":{}}}],["please",{"_index":980,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["pluggable",{"_index":3490,"title":{},"body":{"index.html":{}}}],["plumbing",{"_index":3469,"title":{},"body":{"index.html":{}}}],["png",{"_index":1922,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["pnpm",{"_index":3365,"title":{},"body":{"changelog.html":{}}}],["populate",{"_index":914,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["port",{"_index":1450,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["possession",{"_index":3180,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["possibility",{"_index":3800,"title":{},"body":{"license.html":{}}}],["post",{"_index":519,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"controllers/SessionController.html":{},"index.html":{}}}],["post('challenge",{"_index":619,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post('credential",{"_index":2138,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('credential')@sessionlogger('state",{"_index":2125,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('notification",{"_index":2141,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('notification')@sessionlogger('notification_id",{"_index":2129,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('offer",{"_index":1931,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["post('par",{"_index":652,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post('request",{"_index":2474,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["post('response",{"_index":2288,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["post('response')@sessionlogger('state",{"_index":2277,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["post('revoke",{"_index":2812,"title":{},"body":{"controllers/SessionController.html":{}}}],["post('token",{"_index":538,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{}}}],["postgres",{"_index":1448,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgres').default('sqlite",{"_index":1431,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["power",{"_index":3581,"title":{},"body":{"license.html":{}}}],["pre",{"_index":913,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["preferred",{"_index":1062,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"license.html":{}}}],["prefix",{"_index":502,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"interfaces/Fields.html":{},"controllers/HealthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"interfaces/Params.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["preheader",{"_index":3068,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["prepare",{"_index":3217,"title":{},"body":{"injectables/VaultKeyService.html":{},"license.html":{}}}],["prepayload",{"_index":3067,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["presentation",{"_index":601,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["presentation_during_issuance",{"_index":1853,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["presentationconfig",{"_index":2384,"title":{"entities/PresentationConfig.html":{}},"body":{"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["presentationconfig.webhook",{"_index":2387,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationduringissuance",{"_index":1865,"title":{"classes/PresentationDuringIssuance.html":{}},"body":{"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["presentationmanagementcontroller",{"_index":2456,"title":{"controllers/PresentationManagementController.html":{}},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{}}}],["presentationrequest",{"_index":2462,"title":{"classes/PresentationRequest.html":{}},"body":{"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["presentationrequestoptions",{"_index":2309,"title":{"interfaces/PresentationRequestOptions.html":{}},"body":{"injectables/Oid4vpService.html":{},"interfaces/PresentationRequestOptions.html":{}}}],["presentations",{"_index":102,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["presentations.controller",{"_index":2496,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["presentations.service",{"_index":2468,"title":{},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{}}}],["presentations/dto/auth",{"_index":2315,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentations/presentations.module",{"_index":2297,"title":{},"body":{"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["presentations/presentations.service",{"_index":2314,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationsmodule",{"_index":2294,"title":{"modules/PresentationsModule.html":{}},"body":{"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["presentationsservice",{"_index":52,"title":{"injectables/PresentationsService.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"overview.html":{}}}],["presented",{"_index":2602,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["presented.credentials[0].values.address.locality",{"_index":2605,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["presenteddata",{"_index":2587,"title":{"interfaces/PresentedData.html":{}},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["pretty",{"_index":444,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["primary",{"_index":857,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/StatusMapping.html":{}}}],["primarycolumn",{"_index":2787,"title":{},"body":{"entities/Session.html":{}}}],["primarycolumn('uuid",{"_index":2774,"title":{},"body":{"entities/Session.html":{}}}],["printed",{"_index":3830,"title":{},"body":{"license.html":{}}}],["privacy",{"_index":3492,"title":{},"body":{"index.html":{}}}],["private",{"_index":86,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["private_key",{"_index":2893,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["privateencryptionkey",{"_index":1477,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["privateenncryptionpath",{"_index":1478,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["privatekey",{"_index":1219,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/FileSystemKeyService.html":{},"entities/KeyEntity.html":{}}}],["privatekey.alg",{"_index":1621,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["privatekey.kid",{"_index":1620,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["privatekeyinstance",{"_index":1635,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["privatekeyjwk",{"_index":1214,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["privatekeypath",{"_index":1573,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["privatethumbprint",{"_index":1398,"title":{},"body":{"injectables/CryptoService.html":{}}}],["proceed",{"_index":2835,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["process",{"_index":2601,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"entities/Session.html":{}}}],["process.env.node_env",{"_index":431,"title":{},"body":{"modules/AppModule.html":{}}}],["process_presentation_response",{"_index":2398,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["processes",{"_index":2312,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["processing",{"_index":945,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["processresponse",{"_index":2595,"title":{"interfaces/ProcessResponse.html":{}},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["product",{"_index":3750,"title":{},"body":{"license.html":{}}}],["production",{"_index":432,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["progress",{"_index":2821,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["prominent",{"_index":3707,"title":{},"body":{"license.html":{}}}],["promise",{"_index":190,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{}}}],["promise.all(att",{"_index":2586,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["promise.resolve((input",{"_index":3191,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["promise.resolve(keys.publickey",{"_index":1634,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["promise.resolve(tenantid",{"_index":3204,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["promises",{"_index":180,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["proof",{"_index":3179,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["proofcount",{"_index":2226,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["proofverified",{"_index":2242,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["proper",{"_index":843,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["properties",{"_index":13,"title":{"properties.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"entities/KeyEntity.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"properties.html":{}}}],["proprietary",{"_index":3453,"title":{},"body":{"index.html":{}}}],["protected",{"_index":1900,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["protocol",{"_index":3450,"title":{},"body":{"index.html":{}}}],["protocols",{"_index":3441,"title":{},"body":{"index.html":{}}}],["provide",{"_index":976,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"modules/KeyModule.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["provided",{"_index":341,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"classes/PresentationRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"license.html":{}}}],["provider",{"_index":85,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/RegistrarService.html":{}}}],["providers",{"_index":364,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["provides",{"_index":2650,"title":{},"body":{"modules/RegistrarModule.html":{},"license.html":{}}}],["providing",{"_index":1680,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["prs",{"_index":3542,"title":{},"body":{"index.html":{}}}],["pubkey",{"_index":1291,"title":{},"body":{"injectables/CryptoService.html":{}}}],["public",{"_index":21,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["public()@post('token')@apibody({type",{"_index":506,"title":{},"body":{"controllers/AuthController.html":{}}}],["public.decorator",{"_index":528,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["public_url",{"_index":1974,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{}}}],["public_url=https://example.com",{"_index":3511,"title":{},"body":{"index.html":{}}}],["publiccryptokey",{"_index":1369,"title":{},"body":{"injectables/CryptoService.html":{}}}],["publicencryptionkey",{"_index":1479,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["publicencryptionpath",{"_index":1480,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["publicjwk",{"_index":793,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["publickey",{"_index":235,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/FileSystemKeyService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["publickey.alg",{"_index":1623,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["publickey.kid",{"_index":1619,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["publickeyjwk",{"_index":1218,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["publickeypath",{"_index":1574,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["publicly",{"_index":3667,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":252,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["purposes",{"_index":3578,"title":{},"body":{"license.html":{}}}],["pushed",{"_index":630,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{}}}],["pushed_authorization_request_endpoint",{"_index":751,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["put",{"_index":893,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["pwd)/config:/app/config",{"_index":3515,"title":{},"body":{"index.html":{}}}],["qr",{"_index":1926,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["qrcode",{"_index":1915,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["qrcode.tobuffer(values.uri",{"_index":1941,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["qrcodebuffer",{"_index":1940,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["queries",{"_index":626,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/Session.html":{}}}],["queries.request_uri",{"_index":759,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["query",{"_index":206,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["query_",{"_index":1531,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["querydeeppartialentity",{"_index":2972,"title":{},"body":{"injectables/SessionService.html":{}}}],["queryparams",{"_index":1756,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["queryparams[name",{"_index":1758,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["queryserializer",{"_index":901,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["queryserializer(query",{"_index":1801,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["queryserializeroptions",{"_index":902,"title":{"interfaces/QuerySerializerOptions.html":{}},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{}}}],["querystring",{"_index":2391,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["quick",{"_index":3497,"title":{},"body":{"index.html":{}}}],["quickstart",{"_index":3524,"title":{},"body":{"index.html":{}}}],["r",{"_index":2721,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["r.data",{"_index":2722,"title":{},"body":{"injectables/ResolverService.html":{}}}],["r.length",{"_index":3243,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["r.slice(1",{"_index":3247,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["r[0",{"_index":3245,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["rand",{"_index":3507,"title":{},"body":{"index.html":{}}}],["random",{"_index":1385,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["randombytes",{"_index":1267,"title":{},"body":{"injectables/CryptoService.html":{}}}],["randombytes(bytes",{"_index":1383,"title":{},"body":{"injectables/CryptoService.html":{}}}],["randomness",{"_index":3050,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["randomuuid",{"_index":638,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["ratelimit",{"_index":2028,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["raw",{"_index":1770,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"injectables/VaultKeyService.html":{}}}],["rawsignature",{"_index":3253,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["re",{"_index":803,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["reachable",{"_index":2724,"title":{},"body":{"injectables/ResolverService.html":{}}}],["react",{"_index":868,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["readable",{"_index":3716,"title":{},"body":{"license.html":{}}}],["readfilesync",{"_index":55,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["readfilesync(filepath",{"_index":296,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["readfilesync(join(folder",{"_index":1628,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["readfilesync(this.publicencryptionpath",{"_index":1514,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["readonly",{"_index":649,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"injectables/CryptoService.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/WellKnownController.html":{}}}],["readonlyarray",{"_index":1013,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Fields.html":{},"interfaces/Params.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["real",{"_index":1386,"title":{},"body":{"injectables/CryptoService.html":{}}}],["reason",{"_index":3819,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":3751,"title":{},"body":{"license.html":{}}}],["receive",{"_index":2279,"title":{},"body":{"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/PresentedData.html":{},"entities/Session.html":{}}}],["received",{"_index":2427,"title":{},"body":{"injectables/Oid4vpService.html":{},"license.html":{}}}],["recent",{"_index":3531,"title":{},"body":{"index.html":{}}}],["recipients",{"_index":3704,"title":{},"body":{"license.html":{}}}],["recommend",{"_index":3829,"title":{},"body":{"license.html":{}}}],["recommended",{"_index":3530,"title":{},"body":{"index.html":{}}}],["record",{"_index":918,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"interfaces/Middleware.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/TDataShape.html":{}}}],["record)[name",{"_index":1557,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["recursive",{"_index":873,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["redacted",{"_index":2897,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["redirect_uri",{"_index":672,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["redistributing",{"_index":3773,"title":{},"body":{"license.html":{}}}],["redistribution",{"_index":3698,"title":{},"body":{"license.html":{}}}],["reference",{"_index":1618,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"index.html":{}}}],["reflect",{"_index":3410,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":1981,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["refresh",{"_index":145,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["refresh_token",{"_index":2894,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["refreshaccesstoken",{"_index":165,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["refreshes",{"_index":158,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["regarding",{"_index":3744,"title":{},"body":{"license.html":{}}}],["regcert",{"_index":2328,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["register",{"_index":2985,"title":{},"body":{"injectables/SessionService.html":{}}}],["registrar",{"_index":59,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{}}}],["registrar.json",{"_index":286,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["registrar.service",{"_index":2651,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["registrar/generated",{"_index":2687,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["registrar/registrar.module",{"_index":393,"title":{},"body":{"modules/AppModule.html":{},"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["registrar/registrar.service",{"_index":2313,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["registrar_url",{"_index":2656,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["registrar_validation_schema",{"_index":392,"title":{},"body":{"modules/AppModule.html":{},"modules/RegistrarModule.html":{}}}],["registrarconfig",{"_index":58,"title":{"classes/RegistrarConfig.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{}}}],["registrarmodule",{"_index":374,"title":{"modules/RegistrarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["registrarservice",{"_index":69,"title":{"injectables/RegistrarService.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"overview.html":{}}}],["registration",{"_index":78,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["registrationcert",{"_index":2331,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{}}}],["registrationcertid",{"_index":2538,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["registrationcertificate",{"_index":3911,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerall",{"_index":42,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["registrationcertificatecontrolleralldata",{"_index":3912,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerallresponse",{"_index":3913,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerallresponses",{"_index":3914,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerdeletedata",{"_index":3915,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerdeleteresponses",{"_index":3916,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerfindonedata",{"_index":3917,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerfindonedecodeddata",{"_index":3918,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerfindonedecodedresponse",{"_index":3919,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerfindonedecodedresponses",{"_index":3920,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerfindoneerror",{"_index":3921,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerfindoneerrors",{"_index":3922,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerfindoneresponse",{"_index":3923,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerfindoneresponses",{"_index":3924,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerregister",{"_index":43,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["registrationcertificatecontrollerregisterdata",{"_index":3925,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerregisterresponse",{"_index":3926,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecontrollerregisterresponses",{"_index":3927,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["registrationcertificatecreation",{"_index":2685,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{},"miscellaneous/typealiases.html":{}}}],["registrationcertificaterequest",{"_index":49,"title":{"classes/RegistrationCertificateRequest.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["related",{"_index":2070,"title":{},"body":{"modules/KeyModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["release",{"_index":3303,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["relevant",{"_index":2144,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["rely",{"_index":3452,"title":{},"body":{"index.html":{}}}],["relying",{"_index":75,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{}}}],["relyingparty",{"_index":3928,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["relyingpartycontrollerfindall",{"_index":44,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerfindalldata",{"_index":3929,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["relyingpartycontrollerfindallresponse",{"_index":3930,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["relyingpartycontrollerfindallresponses",{"_index":3931,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["relyingpartycontrollerregister",{"_index":45,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerregisterdata",{"_index":3932,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["relyingpartycontrollerregisterresponse",{"_index":3933,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["relyingpartycontrollerregisterresponses",{"_index":3934,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["relyingpartycontrollerremovedata",{"_index":3935,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["relyingpartycontrollerremoveresponses",{"_index":3936,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["relyingpartyregistration",{"_index":3937,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["remain",{"_index":3628,"title":{},"body":{"license.html":{}}}],["remove",{"_index":2583,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"changelog.html":{}}}],["replace",{"_index":1363,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{}}}],["replace('https",{"_index":234,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["replace(/=/g",{"_index":3260,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["replace(/\\+/g",{"_index":3257,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["replace(/\\//g",{"_index":3258,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["replace(/\\r?\\n|\\r/g",{"_index":1366,"title":{},"body":{"injectables/CryptoService.html":{}}}],["replaced",{"_index":3825,"title":{},"body":{"license.html":{}}}],["replacevalue",{"_index":1751,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["repository",{"_index":1114,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["represent",{"_index":3625,"title":{},"body":{"license.html":{}}}],["representatives",{"_index":3643,"title":{},"body":{"license.html":{}}}],["representing",{"_index":603,"title":{},"body":{"interfaces/AuthResponse.html":{},"interfaces/IssuerMetadata.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["represents",{"_index":1051,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/RegistrarConfig.html":{},"entities/Session.html":{},"miscellaneous/typealiases.html":{}}}],["reproduce",{"_index":3666,"title":{},"body":{"license.html":{}}}],["reproducing",{"_index":3755,"title":{},"body":{"license.html":{}}}],["reproduction",{"_index":3560,"title":{},"body":{"license.html":{}}}],["repsonse",{"_index":8,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["req",{"_index":246,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"injectables/RegistrarService.html":{},"miscellaneous/functions.html":{}}}],["req+jwt",{"_index":2370,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["req.body",{"_index":269,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["req.body?.session_id",{"_index":460,"title":{},"body":{"modules/AppModule.html":{}}}],["req.headers['content",{"_index":475,"title":{},"body":{"modules/AppModule.html":{}}}],["req.headers['user",{"_index":473,"title":{},"body":{"modules/AppModule.html":{}}}],["req.headers['x",{"_index":457,"title":{},"body":{"modules/AppModule.html":{}}}],["req.id",{"_index":265,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["req.method",{"_index":468,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["req.params?.session",{"_index":459,"title":{},"body":{"modules/AppModule.html":{}}}],["req.params?.tenantid",{"_index":461,"title":{},"body":{"modules/AppModule.html":{}}}],["req.url",{"_index":469,"title":{},"body":{"modules/AppModule.html":{}}}],["req.url?.includes('/oid4vp",{"_index":465,"title":{},"body":{"modules/AppModule.html":{}}}],["req.url?.includes('/vci",{"_index":463,"title":{},"body":{"modules/AppModule.html":{}}}],["reqinit",{"_index":3938,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["reqinterceptor",{"_index":1832,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"miscellaneous/typealiases.html":{}}}],["request",{"_index":11,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["request.'})@isenum(responsetype",{"_index":2113,"title":{},"body":{"classes/OfferRequest.html":{}}}],["request.body?.[sessionidparam",{"_index":2856,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.dto",{"_index":51,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{}}}],["request.dto.ts",{"_index":666,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"miscellaneous/enumerations.html":{}}}],["request.dto.ts:12",{"_index":678,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["request.dto.ts:15",{"_index":683,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:17",{"_index":2686,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["request.dto.ts:18",{"_index":685,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:20",{"_index":2114,"title":{},"body":{"classes/OfferRequest.html":{}}}],["request.dto.ts:21",{"_index":687,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:24",{"_index":679,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:26",{"_index":2484,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["request.dto.ts:27",{"_index":680,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/OfferRequest.html":{}}}],["request.dto.ts:30",{"_index":681,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:31",{"_index":2116,"title":{},"body":{"classes/OfferRequest.html":{}}}],["request.dto.ts:33",{"_index":684,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/PresentationRequest.html":{}}}],["request.dto.ts:35",{"_index":2121,"title":{},"body":{"classes/OfferResponse.html":{}}}],["request.dto.ts:36",{"_index":677,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/OfferResponse.html":{}}}],["request.dto.ts:41",{"_index":2485,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["request.dto.ts:6",{"_index":682,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.dto.ts:9",{"_index":686,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.header",{"_index":2375,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.headers.get('x",{"_index":2614,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["request.headers['content",{"_index":2866,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.headers['user",{"_index":2865,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.headers['x",{"_index":2857,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.json",{"_index":2603,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["request.method",{"_index":2599,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["request.params?.[sessionidparam",{"_index":2855,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.params?.tenantid",{"_index":2859,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.payload",{"_index":2378,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.query?.[sessionidparam",{"_index":2858,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.url",{"_index":2860,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.user",{"_index":3143,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["request_error",{"_index":2883,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_start",{"_index":2864,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_success",{"_index":2874,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_uri",{"_index":653,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/Session.html":{}}}],["requested",{"_index":257,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["requestfn",{"_index":899,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["requestid",{"_index":253,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{}}}],["requesting",{"_index":3476,"title":{},"body":{"index.html":{}}}],["requestinit['headers",{"_index":917,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["requestoptions",{"_index":1010,"title":{"interfaces/RequestOptions.html":{}},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["requestresult",{"_index":1014,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["requests",{"_index":91,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{}}}],["requestvalidator",{"_index":942,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["require_pushed_authorization_requests",{"_index":750,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["required",{"_index":334,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"modules/RegistrarModule.html":{},"classes/SchemaResponse.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"license.html":{}}}],["requiredclaimkeys",{"_index":2581,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requiredfields",{"_index":2529,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requires",{"_index":2107,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["res",{"_index":270,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/EncryptionService.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/functions.html":{}}}],["res.data",{"_index":226,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["res.data!['crt",{"_index":243,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.data!['id",{"_index":244,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.data!['jwt",{"_index":281,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.data.data.keys['1'].public_key",{"_index":3205,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["res.data.id",{"_index":3202,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["res.data?.filter",{"_index":261,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.error",{"_index":222,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.payload",{"_index":1516,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["res.redirect(`${values.redirect_uri}?code=${code",{"_index":767,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["res.send",{"_index":830,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["res.send(qrcodebuffer",{"_index":1943,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.send(values",{"_index":1944,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.setheader('content",{"_index":1942,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.state",{"_index":2396,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["res.status(400).send(response",{"_index":828,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["res.statuscode",{"_index":477,"title":{},"body":{"modules/AppModule.html":{}}}],["reserved",{"_index":926,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["reset",{"_index":378,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["resinterceptor",{"_index":1833,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"miscellaneous/typealiases.html":{}}}],["resolve",{"_index":2699,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolved",{"_index":904,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["resolvepublickey",{"_index":2695,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolvepublickey(payload",{"_index":2697,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolver.service",{"_index":2692,"title":{},"body":{"modules/ResolverModule.html":{}}}],["resolver/resolver.module",{"_index":2497,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["resolver/resolver.service",{"_index":2544,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["resolvermodule",{"_index":2493,"title":{"modules/ResolverModule.html":{}},"body":{"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"modules.html":{},"overview.html":{}}}],["resolverservice",{"_index":2512,"title":{"injectables/ResolverService.html":{}},"body":{"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"overview.html":{}}}],["resolves",{"_index":2520,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["resolving",{"_index":2516,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{}}}],["resource",{"_index":673,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["resourceserver",{"_index":2149,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["response",{"_index":195,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["response('not",{"_index":2619,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["response('unauthorized",{"_index":2615,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["response(null",{"_index":2618,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["response.data!.find((item",{"_index":208,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["response.data!['id",{"_index":198,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["response.dto",{"_index":534,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"controllers/WellKnownController.html":{}}}],["response.dto.ts",{"_index":592,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:11",{"_index":606,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{}}}],["response.dto.ts:13",{"_index":2099,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:15",{"_index":1468,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:17",{"_index":2104,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:19",{"_index":1471,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:2",{"_index":2732,"title":{},"body":{"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:21",{"_index":2101,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:23",{"_index":1473,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:25",{"_index":2102,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:29",{"_index":2105,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:3",{"_index":2734,"title":{},"body":{"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:33",{"_index":1976,"title":{},"body":{"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:37",{"_index":2098,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:4",{"_index":2733,"title":{},"body":{"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:5",{"_index":2103,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/SchemaResponse.html":{}}}],["response.dto.ts:9",{"_index":2108,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{}}}],["response.error",{"_index":196,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["response.json(res",{"_index":2606,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["response.jwks.keys.find((key",{"_index":2725,"title":{},"body":{"injectables/ResolverService.html":{}}}],["response.statuscode",{"_index":2875,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["response_mode",{"_index":2344,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_processing",{"_index":2397,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_type",{"_index":674,"title":{},"body":{"classes/AuthorizeQueries.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["response_types_supported",{"_index":2360,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_uri",{"_index":2342,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["responses",{"_index":2823,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsesize",{"_index":2876,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsestatus",{"_index":2429,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["responsestyle",{"_index":960,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["responsetransformer",{"_index":950,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["responsetype",{"_index":1913,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["responsetype.qrcode",{"_index":1927,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsetype.uri",{"_index":1930,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsevalidator",{"_index":953,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["responsibility",{"_index":3811,"title":{},"body":{"license.html":{}}}],["responsible",{"_index":70,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/SessionModule.html":{},"license.html":{}}}],["result",{"_index":2407,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"license.html":{}}}],["result.payload",{"_index":2582,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["resulting",{"_index":3603,"title":{},"body":{"license.html":{}}}],["results",{"_index":302,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["retain",{"_index":3712,"title":{},"body":{"license.html":{}}}],["retrieve",{"_index":656,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/PresentationsService.html":{}}}],["retrieved",{"_index":2612,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["retrieves",{"_index":1089,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{}}}],["return",{"_index":109,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"interfaces/Middleware.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["returned",{"_index":229,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["returning",{"_index":903,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["returns",{"_index":135,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"injectables/ClientService.html":{},"interfaces/Config-1.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{}}}],["returntype",{"_index":979,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["revisions",{"_index":3622,"title":{},"body":{"license.html":{}}}],["revokeall",{"_index":2793,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(@body",{"_index":2813,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(value",{"_index":2798,"title":{},"body":{"controllers/SessionController.html":{}}}],["revoked",{"_index":17,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"classes/StatusUpdateDto.html":{}}}],["right",{"_index":3203,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["rights",{"_index":3807,"title":{},"body":{"license.html":{}}}],["risk",{"_index":3455,"title":{},"body":{"index.html":{}}}],["risks",{"_index":3774,"title":{},"body":{"license.html":{}}}],["rlength",{"_index":3233,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["root",{"_index":539,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{},"index.html":{}}}],["rootpath",{"_index":482,"title":{},"body":{"modules/AppModule.html":{}}}],["royalty",{"_index":3664,"title":{},"body":{"license.html":{}}}],["rp",{"_index":220,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["rp_name",{"_index":422,"title":{},"body":{"modules/AppModule.html":{}}}],["rpadded",{"_index":3241,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["rs256",{"_index":2038,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["rsa",{"_index":2022,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["run",{"_index":1310,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/SessionService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["running",{"_index":353,"title":{},"body":{"controllers/AppController.html":{}}}],["runs",{"_index":3489,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":2318,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":2847,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["s",{"_index":3227,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["s's",{"_index":3237,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["s.length",{"_index":3249,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["s.slice(1",{"_index":3251,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["s[0",{"_index":3250,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["safely",{"_index":941,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["saltgenerator",{"_index":1182,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["same",{"_index":801,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"license.html":{}}}],["san",{"_index":1341,"title":{},"body":{"injectables/CryptoService.html":{}}}],["san.ext",{"_index":1304,"title":{},"body":{"injectables/CryptoService.html":{}}}],["sanext",{"_index":1303,"title":{},"body":{"injectables/CryptoService.html":{}}}],["sanitize",{"_index":2842,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody",{"_index":2825,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody(body",{"_index":2838,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized",{"_index":2843,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized[field",{"_index":2896,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizes",{"_index":2840,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["satisfies",{"_index":2193,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["save",{"_index":299,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/RegistrarService.html":{}}}],["saveconfig",{"_index":2665,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["saveconfig(config",{"_index":300,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["scalable",{"_index":3486,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":405,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":479,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulerregistry",{"_index":2968,"title":{},"body":{"injectables/SessionService.html":{}}}],["schema",{"_index":1084,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"controllers/PresentationManagementController.html":{},"modules/RegistrarModule.html":{},"classes/SchemaResponse.html":{}}}],["schema(@param('id",{"_index":1101,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["schema(id",{"_index":1086,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["schema.org/draft/2020",{"_index":2730,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["schema_uri",{"_index":2454,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["schema_uri#integrity",{"_index":2455,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["schemaresponse",{"_index":1152,"title":{"classes/SchemaResponse.html":{}},"body":{"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"classes/SchemaResponse.html":{}}}],["scheme",{"_index":488,"title":{},"body":{"interfaces/Auth.html":{}}}],["scope",{"_index":675,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["script",{"_index":1308,"title":{},"body":{"injectables/CryptoService.html":{}}}],["scripts/.../import.ts",{"_index":3426,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["scripts/import.ts",{"_index":3432,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["sd",{"_index":1141,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{},"index.html":{}}}],["sdjwt",{"_index":1175,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwt.issue",{"_index":1184,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwtinstance",{"_index":2504,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["sdjwtvcinstance",{"_index":1144,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["search",{"_index":1757,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.join",{"_index":1765,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.push(serializedarray",{"_index":1760,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.push(serializedobject",{"_index":1762,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.push(serializedprimitive",{"_index":1764,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.startswith",{"_index":1802,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["search.substring(1",{"_index":1803,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["seconds",{"_index":2437,"title":{},"body":{"classes/ParResponseDto.html":{}}}],["secret",{"_index":833,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/SessionLoggerInterceptor.html":{},"index.html":{}}}],["secretkey",{"_index":1650,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["secretorkey",{"_index":2041,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secretorkeyprovider",{"_index":2011,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["section",{"_index":3673,"title":{},"body":{"license.html":{}}}],["sections",{"_index":3538,"title":{},"body":{"index.html":{},"license.html":{}}}],["secure",{"_index":3485,"title":{},"body":{"index.html":{}}}],["securely",{"_index":2611,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["security",{"_index":906,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["see",{"_index":916,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"index.html":{},"license.html":{}}}],["select",{"_index":998,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["selectivly",{"_index":2591,"title":{},"body":{"interfaces/PresentedData.html":{}}}],["self",{"_index":1329,"title":{},"body":{"injectables/CryptoService.html":{}}}],["sell",{"_index":3674,"title":{},"body":{"license.html":{}}}],["semantic",{"_index":3352,"title":{},"body":{"changelog.html":{}}}],["send",{"_index":339,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["sendauthorizationcode",{"_index":693,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["sendauthorizationcode(res",{"_index":711,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sendauthorizationresponse",{"_index":694,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["sendauthorizationresponse(queries",{"_index":713,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sending",{"_index":2415,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["sends",{"_index":864,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["sensitive",{"_index":2841,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields",{"_index":2892,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields.foreach((field",{"_index":2895,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sent",{"_index":315,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"license.html":{}}}],["separable",{"_index":3629,"title":{},"body":{"license.html":{}}}],["separate",{"_index":3741,"title":{},"body":{"license.html":{}}}],["separator",{"_index":2748,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["separatorarrayexplode",{"_index":2739,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["separatorarrayexplode(style",{"_index":2749,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["separatorarraynoexplode",{"_index":2740,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["separatorobjectexplode",{"_index":2742,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["separatorobjectexplode(style",{"_index":2762,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["sequence",{"_index":3229,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["sequence.slice(2",{"_index":3235,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["sequence[1",{"_index":3234,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["serializearrayparam",{"_index":1719,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializedarray",{"_index":1759,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["serializedobject",{"_index":1761,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["serializedprimitive",{"_index":1763,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["serializeformdatapair",{"_index":2625,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["serializeformdatapair(data",{"_index":2632,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["serializeobjectparam",{"_index":1720,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializeoptions",{"_index":2735,"title":{"interfaces/SerializeOptions.html":{}},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializeprimitiveoptions",{"_index":2737,"title":{"interfaces/SerializePrimitiveOptions.html":{}},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializeprimitiveparam",{"_index":1721,"title":{"interfaces/SerializePrimitiveParam.html":{}},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializeroptions",{"_index":2623,"title":{"interfaces/SerializerOptions.html":{}},"body":{"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["serializers",{"_index":467,"title":{},"body":{"modules/AppModule.html":{}}}],["serializeurlsearchparamspair",{"_index":2627,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["serializeurlsearchparamspair(data",{"_index":2638,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["serializing",{"_index":908,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["server",{"_index":119,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"controllers/WellKnownController.html":{}}}],["server's",{"_index":2100,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["servers",{"_index":1065,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["servestaticmodule",{"_index":394,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forrootasync",{"_index":480,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":132,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/CredentialsController.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"index.html":{},"license.html":{}}}],["service.db",{"_index":1458,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["services",{"_index":336,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["session",{"_index":458,"title":{"entities/Session.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"miscellaneous/typealiases.html":{}}}],["session.auth_queries",{"_index":763,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["session.authorization_code",{"_index":784,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["session.controller",{"_index":2955,"title":{},"body":{"modules/SessionModule.html":{}}}],["session.credentialpayload",{"_index":2428,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.credentialpayload!.values",{"_index":2426,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.credentialpayload?.values?.[credentialconfigurationid",{"_index":1171,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["session.id",{"_index":794,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["session.notifications",{"_index":2246,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifications.findindex",{"_index":2257,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifications.push",{"_index":2244,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifications[index",{"_index":2260,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.offer!.credential_configuration_ids",{"_index":822,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["session.service",{"_index":2802,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{}}}],["session.tenantid",{"_index":1169,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["session.vp_nonce",{"_index":2402,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook",{"_index":2400,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook!.url",{"_index":2432,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook.auth",{"_index":2410,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook.auth.config.value",{"_index":2413,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook.auth.type",{"_index":2411,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook.auth?.type",{"_index":2419,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook.url",{"_index":2417,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session/entities/session.entity",{"_index":1151,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["session/session.module",{"_index":404,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["session/session.service",{"_index":645,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["session_id",{"_index":2147,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["session_logger_key",{"_index":2848,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["session_tidy_up_interval",{"_index":2956,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["session_ttl",{"_index":2959,"title":{},"body":{"modules/SessionModule.html":{}}}],["session_validation_schema",{"_index":403,"title":{},"body":{"modules/AppModule.html":{},"modules/SessionModule.html":{}}}],["sessioncontroller",{"_index":2789,"title":{"controllers/SessionController.html":{}},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{}}}],["sessionid",{"_index":456,"title":{},"body":{"modules/AppModule.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["sessionidparam",{"_index":2851,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sessionlogcontext",{"_index":2176,"title":{"interfaces/SessionLogContext.html":{}},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{}}}],["sessionlogger",{"_index":2134,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["sessionlogger('notification_id",{"_index":2142,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["sessionlogger('session",{"_index":2284,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["sessionlogger('state",{"_index":2139,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["sessionloggerinterceptor",{"_index":1958,"title":{"injectables/SessionLoggerInterceptor.html":{}},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"overview.html":{}}}],["sessionloggerservice",{"_index":1959,"title":{"injectables/SessionLoggerService.html":{}},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionLoggerService.html":{},"overview.html":{}}}],["sessionmodule",{"_index":375,"title":{"modules/SessionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/SessionModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["sessionrepository",{"_index":2970,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessions",{"_index":2788,"title":{},"body":{"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"miscellaneous/typealiases.html":{}}}],["sessionservice",{"_index":644,"title":{"injectables/SessionService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"overview.html":{}}}],["set",{"_index":106,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/EC_Public.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/WellKnownController.html":{},"changelog.html":{}}}],["set+json",{"_index":3290,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["set+json')@get('jwks.json",{"_index":3276,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["setauthcode",{"_index":695,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["setauthcode(issuer_state",{"_index":715,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["setauthparams",{"_index":1782,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["setconfig",{"_index":894,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["setentry",{"_index":3108,"title":{},"body":{"injectables/StatusListService.html":{}}}],["setentry(id",{"_index":3091,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["setexpirationtime(expiresin",{"_index":1658,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setinterval(callback",{"_index":3001,"title":{},"body":{"injectables/SessionService.html":{}}}],["setissuedat",{"_index":1654,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setissuer(issuer",{"_index":1655,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setprotectedheader",{"_index":1652,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setprotectedheader(header",{"_index":1636,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["setsubject(options.subject",{"_index":1656,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["settimeout",{"_index":172,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["setup",{"_index":3523,"title":{},"body":{"index.html":{}}}],["setupclient",{"_index":1037,"title":{},"body":{"injectables/ClientService.html":{}}}],["setupclient(id",{"_index":870,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["sha",{"_index":1180,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["shall",{"_index":3563,"title":{},"body":{"license.html":{}}}],["shape",{"_index":940,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["shares",{"_index":3592,"title":{},"body":{"license.html":{}}}],["shell",{"_index":1311,"title":{},"body":{"injectables/CryptoService.html":{}}}],["shuffel",{"_index":3055,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["shuffled",{"_index":3049,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["sign",{"_index":1345,"title":{},"body":{"injectables/CryptoService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/VaultKeyService.html":{}}}],["sign(privatekeyinstance",{"_index":1637,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["sign(value",{"_index":3174,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["signalg",{"_index":1177,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["signature",{"_index":1220,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{},"injectables/VaultKeyService.html":{}}}],["signature).catch((err",{"_index":2569,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["signed",{"_index":1330,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signedjwt",{"_index":2376,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwt.length",{"_index":2381,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwtlength",{"_index":2380,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signer",{"_index":791,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["signer(tenantid",{"_index":1591,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["signer.alg",{"_index":1392,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signer.method",{"_index":1388,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signer.publicjwk",{"_index":1391,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signerjwk",{"_index":1393,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signing",{"_index":1193,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["signingcert",{"_index":1358,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signinginput",{"_index":3223,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["signjwt",{"_index":1236,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["signjwt(header",{"_index":1257,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signjwt(payload",{"_index":1593,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["signjwtcallback",{"_index":1251,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signs",{"_index":3176,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["simple",{"_index":1733,"title":{},"body":{"classes/Interceptors.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["simplicity",{"_index":2584,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["single",{"_index":1641,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["singleline",{"_index":447,"title":{},"body":{"modules/AppModule.html":{}}}],["size",{"_index":3052,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["skip",{"_index":3231,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["slot",{"_index":1521,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{},"miscellaneous/typealiases.html":{}}}],["software",{"_index":3601,"title":{},"body":{"license.html":{}}}],["sole",{"_index":3810,"title":{},"body":{"license.html":{}}}],["solely",{"_index":3770,"title":{},"body":{"license.html":{}}}],["solutions",{"_index":3454,"title":{},"body":{"index.html":{}}}],["solves",{"_index":3458,"title":{},"body":{"index.html":{}}}],["someone",{"_index":278,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["sort",{"_index":3059,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"index.html":{},"license.html":{}}}],["sources",{"_index":2854,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["spacedelimited",{"_index":1728,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["spadded",{"_index":3242,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["special",{"_index":3786,"title":{},"body":{"license.html":{}}}],["specific",{"_index":1090,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"index.html":{},"license.html":{}}}],["specification",{"_index":1826,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["specified",{"_index":992,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["split",{"_index":3375,"title":{},"body":{"changelog.html":{}}}],["sqlite",{"_index":1434,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["sqlite3",{"_index":3413,"title":{},"body":{"dependencies.html":{}}}],["src/.../auth.ts",{"_index":3872,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../bodyserializer.ts",{"_index":3873,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../client.gen.ts",{"_index":3877,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../client.ts",{"_index":3939,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../crypto",{"_index":3892,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../crypto.service.ts",{"_index":3875,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":3421,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../params.ts",{"_index":3885,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../pathserializer.ts",{"_index":3870,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../presentation",{"_index":3419,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../sdk.gen.ts",{"_index":3910,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../session.entity.ts",{"_index":3895,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../types.gen.ts",{"_index":3853,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../types.ts",{"_index":3874,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../util.ts",{"_index":3422,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../utils.ts",{"_index":3869,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../webhook.dto.ts",{"_index":3871,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.module.ts",{"_index":380,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/app.controller.ts",{"_index":345,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app/app.controller.ts:8",{"_index":348,"title":{},"body":{"controllers/AppController.html":{}}}],["src/auth/auth.controller.ts",{"_index":501,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:51",{"_index":517,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.guard.ts",{"_index":1977,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.guard.ts:12",{"_index":1985,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.guard.ts:7",{"_index":1982,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.module.ts",{"_index":572,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/client.service.ts",{"_index":832,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:16",{"_index":1039,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:23",{"_index":1043,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:35",{"_index":1041,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:45",{"_index":1042,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:61",{"_index":1046,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:74",{"_index":1040,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:82",{"_index":1045,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/dto/client",{"_index":954,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["src/auth/dto/token",{"_index":3144,"title":{},"body":{"classes/TokenResponse.html":{}}}],["src/auth/jwt.service.ts",{"_index":1639,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:13",{"_index":1998,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:19",{"_index":2001,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:56",{"_index":2003,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:83",{"_index":1999,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:94",{"_index":2002,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":2004,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:20",{"_index":2010,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:47",{"_index":2014,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:64",{"_index":2016,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:9",{"_index":2008,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/token.decorator.ts",{"_index":3139,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["src/crypto/crypto.module.ts",{"_index":1225,"title":{},"body":{"modules/CryptoModule.html":{}}}],["src/crypto/crypto.service.ts",{"_index":1228,"title":{},"body":{"injectables/CryptoService.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/crypto.service.ts:144",{"_index":1244,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:159",{"_index":1260,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:166",{"_index":1258,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:174",{"_index":1262,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:193",{"_index":1241,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:231",{"_index":1250,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:268",{"_index":1245,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:282",{"_index":1248,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:32",{"_index":1239,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:36",{"_index":1265,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:39",{"_index":1254,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:47",{"_index":1256,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:61",{"_index":1253,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/encryption/encryption.service.ts",{"_index":1476,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:11",{"_index":1492,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:12",{"_index":1494,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:13",{"_index":1493,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:14",{"_index":1484,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:19",{"_index":1490,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:23",{"_index":1489,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:58",{"_index":1486,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:63",{"_index":1487,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/key/crypto/crypto",{"_index":1199,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/key/crypto/crypto.service.ts",{"_index":1409,"title":{},"body":{"injectables/CryptoService-1.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/key/crypto/crypto.service.ts:10",{"_index":1413,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["src/crypto/key/crypto/crypto.service.ts:17",{"_index":1415,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["src/crypto/key/crypto/crypto.service.ts:21",{"_index":1419,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["src/crypto/key/entities/key.entity.ts",{"_index":2051,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/key.entity.ts:6",{"_index":2053,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/key.entity.ts:8",{"_index":2052,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/filesystem",{"_index":1571,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["src/crypto/key/key.module.ts",{"_index":2054,"title":{},"body":{"modules/KeyModule.html":{}}}],["src/crypto/key/key.module.ts:36",{"_index":2056,"title":{},"body":{"modules/KeyModule.html":{}}}],["src/crypto/key/key.service.ts",{"_index":2079,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:11",{"_index":2085,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:17",{"_index":2086,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:23",{"_index":2081,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:29",{"_index":2082,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:30",{"_index":2083,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:31",{"_index":2084,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:37",{"_index":2088,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/vault",{"_index":3152,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["src/database/database.module.ts",{"_index":1425,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/health/health.controller.ts",{"_index":1678,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:25",{"_index":1686,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":1694,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/issuer/authorize/authorize.controller.ts",{"_index":609,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:36",{"_index":624,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:58",{"_index":632,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:82",{"_index":634,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:98",{"_index":620,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.service.ts",{"_index":689,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["src/issuer/authorize/authorize.service.ts:163",{"_index":709,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:181",{"_index":701,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:222",{"_index":712,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:236",{"_index":716,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:27",{"_index":700,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:38",{"_index":706,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:45",{"_index":703,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:68",{"_index":714,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:94",{"_index":718,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/dto/authorize",{"_index":665,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["src/issuer/authorize/dto/par",{"_index":2435,"title":{},"body":{"classes/ParResponseDto.html":{}}}],["src/issuer/credentials/credentials.controller.ts",{"_index":1082,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:15",{"_index":1093,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:25",{"_index":1088,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.service.ts",{"_index":1103,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:145",{"_index":1134,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:16",{"_index":1115,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:166",{"_index":1132,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:30",{"_index":1121,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:34",{"_index":1123,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:50",{"_index":1137,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:64",{"_index":1118,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:73",{"_index":1130,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:87",{"_index":1127,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/dto/credential",{"_index":2449,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["src/issuer/credentials/dto/schema",{"_index":2728,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["src/issuer/credentials/entities/issuance",{"_index":1850,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["src/issuer/issuer",{"_index":1879,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["src/issuer/issuer.module.ts",{"_index":1960,"title":{},"body":{"modules/IssuerModule.html":{}}}],["src/issuer/oid4vci/dto/notification",{"_index":2090,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["src/issuer/oid4vci/dto/offer",{"_index":2109,"title":{},"body":{"classes/OfferRequest.html":{},"classes/OfferResponse.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts",{"_index":2122,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:28",{"_index":2126,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:42",{"_index":2130,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts",{"_index":2148,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:110",{"_index":2156,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:150",{"_index":2158,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:261",{"_index":2160,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:37",{"_index":2167,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:39",{"_index":2153,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:44",{"_index":2165,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:49",{"_index":2164,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:60",{"_index":2163,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/util.ts",{"_index":3428,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/issuer/status",{"_index":3014,"title":{},"body":{"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["src/main.ts",{"_index":3427,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/registrar/generated/client.gen.ts",{"_index":3947,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/registrar/generated/client/client.ts",{"_index":3949,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/registrar/generated/client/types.ts",{"_index":959,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["src/registrar/generated/client/utils.ts",{"_index":1697,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"miscellaneous/typealiases.html":{}}}],["src/registrar/generated/client/utils.ts:331",{"_index":1703,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:337",{"_index":1705,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:341",{"_index":1711,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:348",{"_index":1709,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:353",{"_index":1707,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:360",{"_index":1714,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/client/utils.ts:370",{"_index":1716,"title":{},"body":{"classes/Interceptors.html":{}}}],["src/registrar/generated/core/auth.ts",{"_index":487,"title":{},"body":{"interfaces/Auth.html":{},"miscellaneous/typealiases.html":{}}}],["src/registrar/generated/core/bodyserializer.ts",{"_index":2622,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["src/registrar/generated/core/params.ts",{"_index":1517,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{},"miscellaneous/typealiases.html":{}}}],["src/registrar/generated/core/pathserializer.ts",{"_index":2736,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["src/registrar/generated/core/types.ts",{"_index":886,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["src/registrar/generated/sdk.gen.ts",{"_index":3948,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/registrar/generated/types.gen.ts",{"_index":3946,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/registrar/registrar",{"_index":2640,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["src/registrar/registrar.module.ts",{"_index":2649,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["src/registrar/registrar.service.ts",{"_index":6,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:109",{"_index":2674,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:117",{"_index":2676,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:129",{"_index":2678,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:144",{"_index":2679,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:161",{"_index":2672,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:186",{"_index":2681,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:204",{"_index":2673,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:231",{"_index":2669,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:272",{"_index":2671,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:329",{"_index":2675,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:352",{"_index":2680,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:53",{"_index":2683,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:57",{"_index":2682,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:61",{"_index":2667,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:78",{"_index":2677,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/session/entities/session.entity.ts",{"_index":2766,"title":{},"body":{"entities/Session.html":{},"miscellaneous/typealiases.html":{}}}],["src/session/entities/session.entity.ts:36",{"_index":2775,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:41",{"_index":2773,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:46",{"_index":2769,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:51",{"_index":2779,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:56",{"_index":2767,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:61",{"_index":2782,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:66",{"_index":2770,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:71",{"_index":2778,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:76",{"_index":2771,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:81",{"_index":2784,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:86",{"_index":2776,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:91",{"_index":2780,"title":{},"body":{"entities/Session.html":{}}}],["src/session/session.controller.ts",{"_index":2790,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:23",{"_index":2794,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:32",{"_index":2797,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:44",{"_index":2801,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.module.ts",{"_index":2954,"title":{},"body":{"modules/SessionModule.html":{}}}],["src/session/session.service.ts",{"_index":2964,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:10",{"_index":2969,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:23",{"_index":2984,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:40",{"_index":2976,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:50",{"_index":2973,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:65",{"_index":2979,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:74",{"_index":2978,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:83",{"_index":2982,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:90",{"_index":2990,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/utils/session",{"_index":2815,"title":{},"body":{"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["src/utils/webhook.dto.ts",{"_index":305,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/typealiases.html":{}}}],["src/utils/webhook.dto.ts:13",{"_index":313,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook.dto.ts:19",{"_index":317,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook.dto.ts:36",{"_index":3266,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["src/utils/webhook.dto.ts:43",{"_index":3265,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["src/utils/webhook.dto.ts:54",{"_index":3269,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/utils/webhook.dto.ts:62",{"_index":3268,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/verifier/oid4vp/dto/authorization",{"_index":605,"title":{},"body":{"classes/AuthorizationResponse.html":{}}}],["src/verifier/oid4vp/dto/presentation",{"_index":2483,"title":{},"body":{"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"miscellaneous/enumerations.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts",{"_index":2267,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:34",{"_index":2274,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:53",{"_index":2278,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.module.ts",{"_index":2295,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts",{"_index":2298,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:20",{"_index":2302,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:215",{"_index":2310,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:264",{"_index":2311,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:41",{"_index":2304,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/presentations/dto/auth",{"_index":591,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["src/verifier/presentations/dto/vp",{"_index":2684,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["src/verifier/presentations/entities/presentation",{"_index":2438,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["src/verifier/presentations/presentations.controller.ts",{"_index":2457,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:111",{"_index":2459,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:121",{"_index":2467,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:137",{"_index":2461,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:79",{"_index":2465,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.module.ts",{"_index":2494,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["src/verifier/presentations/presentations.service.ts",{"_index":2500,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:109",{"_index":2537,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:122",{"_index":2543,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:145",{"_index":2542,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:160",{"_index":2539,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:177",{"_index":2531,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:22",{"_index":2514,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:40",{"_index":2527,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:54",{"_index":2526,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:67",{"_index":2534,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:78",{"_index":2519,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:88",{"_index":2524,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/resolver/dto/issuer",{"_index":1951,"title":{},"body":{"interfaces/IssuerMetadata.html":{}}}],["src/verifier/resolver/resolver.module.ts",{"_index":2691,"title":{},"body":{"modules/ResolverModule.html":{}}}],["src/verifier/resolver/resolver.service.ts",{"_index":2693,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/resolver/resolver.service.ts:12",{"_index":2696,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/resolver/resolver.service.ts:21",{"_index":2698,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/verifier.module.ts",{"_index":3263,"title":{},"body":{"modules/VerifierModule.html":{}}}],["src/well",{"_index":1048,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{}}}],["stable",{"_index":3529,"title":{},"body":{"index.html":{}}}],["stack",{"_index":2886,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"index.html":{}}}],["stack—so",{"_index":3465,"title":{},"body":{"index.html":{}}}],["stage",{"_index":2222,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{}}}],["standardized",{"_index":3440,"title":{},"body":{"index.html":{}}}],["start",{"_index":2307,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"index.html":{}}}],["started",{"_index":2938,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"injectables/SessionLoggerService.html":{}}}],["starting",{"_index":2868,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["starts",{"_index":144,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["starttime",{"_index":2869,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["state",{"_index":594,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/SessionService.html":{},"license.html":{}}}],["stated",{"_index":3672,"title":{},"body":{"license.html":{}}}],["statement",{"_index":3730,"title":{},"body":{"license.html":{}}}],["static",{"_index":396,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"changelog.html":{},"dependencies.html":{}}}],["stating",{"_index":3709,"title":{},"body":{"license.html":{}}}],["status",{"_index":544,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"dependencies.html":{},"index.html":{}}}],["status_list",{"_index":3090,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuscode",{"_index":476,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["statuslist",{"_index":3034,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslist(file.elements",{"_index":3065,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslist+jwt",{"_index":3069,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslistcontroller",{"_index":3013,"title":{"controllers/StatusListController.html":{}},"body":{"controllers/StatusListController.html":{},"modules/StatusListModule.html":{}}}],["statuslistcontrollercrlfiledata",{"_index":3940,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["statuslistcontrollercrlfileresponse",{"_index":3941,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["statuslistcontrollercrlfileresponses",{"_index":3942,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["statuslistcontrollergetlistdata",{"_index":3943,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["statuslistcontrollergetlistresponse",{"_index":3944,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["statuslistcontrollergetlistresponses",{"_index":3945,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["statuslistfetcher",{"_index":2505,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["statuslistfile",{"_index":3028,"title":{"interfaces/StatusListFile.html":{}},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslistjwtheaderparameters",{"_index":3035,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslistmodule",{"_index":1957,"title":{"modules/StatusListModule.html":{}},"body":{"modules/IssuerModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules.html":{},"overview.html":{}}}],["statuslistservice",{"_index":1112,"title":{"injectables/StatusListService.html":{}},"body":{"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"overview.html":{}}}],["statusmapping",{"_index":3037,"title":{"entities/StatusMapping.html":{}},"body":{"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{}}}],["statusmappingrepository",{"_index":3044,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statusupdatedto",{"_index":2799,"title":{"classes/StatusUpdateDto.html":{}},"body":{"controllers/SessionController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{}}}],["stdio",{"_index":1315,"title":{},"body":{"injectables/CryptoService.html":{}}}],["step",{"_index":658,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/CryptoService.html":{},"injectables/SessionLoggerService.html":{},"injectables/VaultKeyService.html":{}}}],["still",{"_index":214,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"index.html":{}}}],["stoppage",{"_index":3793,"title":{},"body":{"license.html":{}}}],["storage",{"_index":3491,"title":{},"body":{"index.html":{}}}],["store",{"_index":240,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["storeaccesscertificate",{"_index":1237,"title":{},"body":{"injectables/CryptoService.html":{}}}],["storeaccesscertificate(crt",{"_index":1259,"title":{},"body":{"injectables/CryptoService.html":{}}}],["storeconfig",{"_index":3109,"title":{},"body":{"injectables/StatusListService.html":{}}}],["storeconfig(content",{"_index":3076,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["storeconfiguration",{"_index":1885,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["storeconfiguration(config",{"_index":1901,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["storecredentialconfiguration",{"_index":1110,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["storecredentialconfiguration(tenantid",{"_index":1135,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["stored",{"_index":1629,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["storeexistingrp",{"_index":2666,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["storeexistingrp(name",{"_index":205,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["storepresentationconfig",{"_index":2458,"title":{},"body":{"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["storepresentationconfig(config",{"_index":2466,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["storepresentationconfig(vprequest",{"_index":2533,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid",{"_index":2510,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid(registrationcertid",{"_index":2536,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["stores",{"_index":200,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/IssuerManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["strategy",{"_index":2019,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["stream",{"_index":999,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["string",{"_index":18,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"interfaces/Auth.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/typealiases.html":{}}}],["stringified",{"_index":1823,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["strings",{"_index":949,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["stripemptyslots",{"_index":1543,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["stripemptyslots(params",{"_index":1569,"title":{},"body":{"interfaces/Fields.html":{},"interfaces/Params.html":{}}}],["structure",{"_index":1462,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"entities/PresentationConfig.html":{}}}],["structured",{"_index":2900,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["style",{"_index":923,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["sub",{"_index":559,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{}}}],["subj",{"_index":1332,"title":{},"body":{"injectables/CryptoService.html":{}}}],["subject",{"_index":256,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{},"license.html":{}}}],["subjectaltname=dns:${uri",{"_index":1335,"title":{},"body":{"injectables/CryptoService.html":{}}}],["sublicense",{"_index":3668,"title":{},"body":{"license.html":{}}}],["submission",{"_index":3732,"title":{},"body":{"license.html":{}}}],["submit",{"_index":3638,"title":{},"body":{"license.html":{}}}],["submitted",{"_index":3636,"title":{},"body":{"license.html":{}}}],["subsequently",{"_index":3655,"title":{},"body":{"license.html":{}}}],["succeeded",{"_index":2948,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["successfully",{"_index":511,"title":{},"body":{"controllers/AuthController.html":{},"injectables/Oid4vpService.html":{}}}],["such",{"_index":1470,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"entities/Session.html":{},"license.html":{}}}],["summary",{"_index":540,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/WellKnownController.html":{}}}],["super",{"_index":1990,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/VaultKeyService.html":{}}}],["super.canactivate(context",{"_index":1995,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["supersede",{"_index":3740,"title":{},"body":{"license.html":{}}}],["support",{"_index":1066,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"entities/Session.html":{},"changelog.html":{},"index.html":{},"license.html":{},"modules.html":{}}}],["supported",{"_index":332,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/CryptoService.html":{},"controllers/IssuerManagementController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"index.html":{}}}],["supportedauthenticationscheme",{"_index":2170,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["supportedauthenticationscheme.clientattestationjwt",{"_index":758,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["supportedauthenticationscheme.dpop",{"_index":2216,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["supports",{"_index":3470,"title":{},"body":{"index.html":{}}}],["svg",{"_index":3842,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":1422,"title":{},"body":{"injectables/CryptoService-1.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["symmetric",{"_index":2043,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["synchronize",{"_index":1446,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["syntax",{"_index":3828,"title":{},"body":{"license.html":{}}}],["system",{"_index":1581,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["systems",{"_index":3646,"title":{},"body":{"license.html":{}}}],["t",{"_index":1032,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/EncryptionService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/TDataShape.html":{}}}],["t['baseurl",{"_index":972,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["t['throwonerror",{"_index":1009,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["tag",{"_index":3232,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["tap",{"_index":2845,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["tap((data",{"_index":2872,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["target",{"_index":443,"title":{},"body":{"modules/AppModule.html":{}}}],["tdata",{"_index":1016,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["tdata[keyof",{"_index":1015,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["tdatashape",{"_index":1033,"title":{"interfaces/TDataShape.html":{}},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["tell",{"_index":2406,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["tenancy",{"_index":2781,"title":{},"body":{"entities/Session.html":{}}}],["tenant",{"_index":149,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"changelog.html":{}}}],["tenant_events",{"_index":66,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["tenantid",{"_index":151,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["tenantid)).uri",{"_index":807,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["tenantid/.well",{"_index":3271,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["tenantid/authorize",{"_index":610,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["tenantid/oid4vp",{"_index":2268,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["tenantid/status",{"_index":3016,"title":{},"body":{"controllers/StatusListController.html":{}}}],["tenantid/vci",{"_index":2123,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["tenanturl",{"_index":2325,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["term",{"_index":3496,"title":{},"body":{"index.html":{}}}],["terminate",{"_index":3696,"title":{},"body":{"license.html":{}}}],["terminusmodule",{"_index":1696,"title":{},"body":{"modules/HealthModule.html":{}}}],["terms",{"_index":3558,"title":{},"body":{"license.html":{}}}],["terror",{"_index":1017,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["terror[keyof",{"_index":1018,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["test",{"_index":2026,"title":{},"body":{"injectables/JwtStrategy.html":{},"changelog.html":{}}}],["test/.../index.ts",{"_index":3423,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/.../utils.ts",{"_index":3425,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/utils.ts",{"_index":3429,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/webhook/src/index.ts",{"_index":2588,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"miscellaneous/functions.html":{}}}],["text",{"_index":1006,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"license.html":{}}}],["textencoder().encode(secret",{"_index":1651,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["then((cryptokey",{"_index":3208,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["then((key",{"_index":1511,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["then((res",{"_index":221,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["then((response",{"_index":207,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["then((session",{"_index":762,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["then(async",{"_index":194,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["theory",{"_index":3777,"title":{},"body":{"license.html":{}}}],["thereof",{"_index":3632,"title":{},"body":{"license.html":{}}}],["third",{"_index":3722,"title":{},"body":{"license.html":{}}}],["this._fns",{"_index":1834,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this._fns.indexof(id",{"_index":1836,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this._fns.length",{"_index":1839,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this._fns[id",{"_index":1835,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this._fns[index",{"_index":1838,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this.accesstoken",{"_index":130,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.addaccesscertificate(config",{"_index":218,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.addrp(tenantid",{"_index":156,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.authorizeservice.authorizationchallengeendpoint",{"_index":664,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.authzmetadata",{"_index":3289,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.authorizeservice.sendauthorizationresponse",{"_index":651,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.validatetokenrequest(body",{"_index":663,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authzmetadata(tenantid",{"_index":777,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.authzservice.authzmetadata(tenantid",{"_index":2182,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.client",{"_index":125,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.client.setconfig",{"_index":126,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.clients",{"_index":851,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clientservice.validateclient",{"_index":554,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice",{"_index":232,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.get",{"_index":3186,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.configservice.get('oidc",{"_index":1676,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["this.configservice.get('registrar_url",{"_index":140,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.get('vault_url",{"_index":3184,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.configservice.getorthrow",{"_index":856,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vciService.html":{}}}],["this.configservice.getorthrow('auth_client_id",{"_index":855,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.configservice.getorthrow('folder",{"_index":285,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["this.configservice.getorthrow('jwt_expires_in",{"_index":1649,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow('jwt_issuer",{"_index":1647,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow('jwt_secret",{"_index":1646,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow('oidc_client_id",{"_index":114,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('oidc_client_secret",{"_index":116,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('oidc_issuer_url",{"_index":112,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('public_url",{"_index":736,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.configservice.getorthrow('public_url')}${req.url",{"_index":768,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.configservice.getorthrow('public_url')}/${session.tenantid}/credentials/vct/${vc.id",{"_index":1189,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.configservice.getorthrow('public_url')}/${tenantid",{"_index":790,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.configservice.getorthrow('public_url')}/${tenantid}/oid4vp/request/${requestid}/${values.session",{"_index":2390,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.configservice.getorthrow('registrar_url",{"_index":128,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('rp_name",{"_index":192,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('session_tidy_up_interval",{"_index":2999,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.configservice.getorthrow('session_ttl",{"_index":3009,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.configservie.get('crypto_alg",{"_index":1420,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["this.create(tenantid",{"_index":3190,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.createlist(tenantid",{"_index":3062,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.credentialsservice.deletecredentialconfiguration",{"_index":1949,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["this.credentialsservice.getconfig(user.sub",{"_index":1946,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["this.credentialsservice.getconfigbyid",{"_index":823,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.credentialsservice.getcredential",{"_index":2237,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.credentialsservice.getcredentialconfiguration",{"_index":2185,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.credentialsservice.getcredentialconfiguration(user.sub",{"_index":2195,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.credentialsservice.getschema(id",{"_index":1102,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.getvct(id",{"_index":1100,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.storecredentialconfiguration",{"_index":1947,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["this.crpytoservice.getcertchain",{"_index":1192,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.crpytoservice.keyservice.signer",{"_index":1176,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.crypto",{"_index":1608,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.crypto.alg",{"_index":1622,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.crypto.generatekeypair",{"_index":1615,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.crypto.getsigner(keys.privatekey",{"_index":1612,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.cryptoservice.getalg",{"_index":1633,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["this.cryptoservice.getcallbackcontext",{"_index":2179,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.cryptoservice.getcallbackcontext(tenantid",{"_index":734,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.cryptoservice.getcertchain",{"_index":2372,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.cryptoservice.getcertchain('signing",{"_index":3070,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.cryptoservice.getcrypto",{"_index":1609,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.cryptoservice.getjwks(tenantid).then((key",{"_index":3292,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.cryptoservice.keyservice.getpublickey",{"_index":236,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{}}}],["this.cryptoservice.signjwt",{"_index":2377,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.cryptoservice.signjwt(header",{"_index":3071,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.cryptoservice.storeaccesscertificate",{"_index":242,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.db.pingcheck('database",{"_index":1693,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.dertojwtsignature(res.data.data.signature.split(':')[2",{"_index":3215,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.encryptionservice.decryptjwe",{"_index":2393,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.encryptionservice.getencryptionpublickey",{"_index":2347,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.eventemitter.emit(tenant_events.tenant_init",{"_index":884,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.eventemitter.emit(tenant_events.tenant_keys",{"_index":1290,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.filename",{"_index":3051,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.folder",{"_index":1282,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/VaultKeyService.html":{}}}],["this.getaccesscertificateid(config",{"_index":157,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.getauthorizationserver",{"_index":737,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.getauthorizationserver(tenantid).createaccesstokenresponse",{"_index":789,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.getcallbackcontext(tenantid).hash",{"_index":1395,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.getclients",{"_index":847,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.getclients().find((c",{"_index":859,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.getconfig(session.tenantid",{"_index":3082,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.getconfig(tenantid",{"_index":3064,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.getconfig(tenantid)).foreach((credential",{"_index":1165,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.getconfig(tenantid).jwt",{"_index":3074,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.getconfigbyid",{"_index":1168,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.getinterceptorindex(id",{"_index":1837,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["this.getjwk",{"_index":3206,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.getkeys(tenant",{"_index":1610,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.getkeys(tenantid",{"_index":1611,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.getkeys(tenantid).then((keys",{"_index":1630,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.getkid(tenantid",{"_index":3211,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.getpublickey('jwk",{"_index":3201,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.getpublickey('pem",{"_index":3187,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.getsignjwtcallback(tenantid",{"_index":1387,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.hascerts(tenantid",{"_index":1289,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.headers",{"_index":3185,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.health.check",{"_index":1692,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.httpservice.get",{"_index":2718,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["this.httpservice.post",{"_index":2421,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/VaultKeyService.html":{}}}],["this.init(tenantid",{"_index":1497,"title":{},"body":{"injectables/EncryptionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.isenabled",{"_index":108,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.ismultitenant",{"_index":1643,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.issuanceconfigrepo.delete",{"_index":1164,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.issuanceconfigrepo.findby",{"_index":1160,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.issuanceconfigrepo.findonebyorfail",{"_index":1161,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.issuanceconfigrepo.save(value",{"_index":1163,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.issuer",{"_index":2180,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.createcredentialissuermetadata",{"_index":2184,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.createcredentialresponse",{"_index":2250,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.parsecredentialrequest",{"_index":2207,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.verifycredentialrequestjwtproof",{"_index":2230,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuermetadata(tenantid",{"_index":2198,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.jwtservice.generatetoken(payload",{"_index":561,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.jwtservice.ismultitenant",{"_index":551,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.kbverifier.bind(this",{"_index":2550,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.keyservice.getpublickey",{"_index":1399,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.keyservice.getpublickey('jwk",{"_index":1368,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.keyservice.init(tenantid",{"_index":1288,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.keyservice.signjwt(payload",{"_index":1367,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.loadclients",{"_index":852,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.loadconfig(tenantid",{"_index":154,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.loadconfig(tenantid).id",{"_index":254,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.logger.error",{"_index":2882,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.logger.info",{"_index":2863,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.logger.setcontext('sessionlogger",{"_index":2861,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.logger.setcontext('sessionloggerservice",{"_index":2936,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["this.oauth2client",{"_index":117,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.oauth2client.clientcredentials().then((token",{"_index":166,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.oid4vciservice.createoffer",{"_index":1936,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["this.oid4vciservice.getcredential(req",{"_index":2140,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.handlenotification(req",{"_index":2143,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.issuermetadata(tenantid",{"_index":3288,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.oid4vpservice.createauthorizationrequest",{"_index":2287,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.oid4vpservice.createrequest",{"_index":2475,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.oid4vpservice.createrequest('pid",{"_index":806,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.oid4vpservice.getresponse(body",{"_index":2289,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.parsechallengerequest",{"_index":827,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.presentationsservice.deletepresentationconfig(id",{"_index":2482,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.getpresentationconfig",{"_index":2327,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.getpresentationconfigs(user.sub",{"_index":2480,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.parseresponse",{"_index":2401,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.storepresentationconfig",{"_index":2481,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.storercid",{"_index":280,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.privateencryptionkey",{"_index":1512,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.privateenncryptionpath",{"_index":1498,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.privatekeypath",{"_index":1613,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.publicencryptionkey",{"_index":1513,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.publicencryptionpath",{"_index":1500,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.publickeypath",{"_index":1614,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.reflector.get",{"_index":2849,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.reflector.getallandoverride",{"_index":1992,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.refreshaccesstoken",{"_index":148,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.registrarservice.addregistrationcertificate",{"_index":2333,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.registrarservice.isenabled",{"_index":2330,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.resolverservice.resolvepublickey",{"_index":2566,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.resourceserver",{"_index":2181,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.resourceserver.verifyresourcerequest",{"_index":2211,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sanitizebody(request.body",{"_index":2867,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.saveconfig(config",{"_index":199,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.schedulerregistry.addinterval('tidyupsessions",{"_index":3002,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sdjwtinstance",{"_index":2548,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.sendauthorizationcode(res",{"_index":817,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.sessionlogger.logauthorizationrequest(logcontext",{"_index":2336,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logcredentialissuance",{"_index":2239,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sessionlogger.logcredentialverification",{"_index":2403,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowcomplete(logcontext",{"_index":2247,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowerror(logcontext",{"_index":2255,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowstart(logcontext",{"_index":2224,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.lognotification(logcontext",{"_index":2262,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sessionlogger.logsession",{"_index":2379,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logsessionerror",{"_index":2264,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionrepository.delete",{"_index":3010,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.find",{"_index":3005,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail",{"_index":3006,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail(where",{"_index":3007,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.save(session",{"_index":3003,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.update",{"_index":3004,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionservice",{"_index":760,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.sessionservice.add(auth_session",{"_index":2334,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.add(body.issuer_state",{"_index":659,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.sessionservice.add(issuer_state",{"_index":831,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.sessionservice.add(res.state",{"_index":2408,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.add(session.id",{"_index":2245,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sessionservice.add(values.session",{"_index":2388,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.create",{"_index":2202,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionservice.get",{"_index":2217,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sessionservice.get(body.auth_session",{"_index":814,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.sessionservice.get(body.issuer_state",{"_index":818,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.sessionservice.get(id",{"_index":2811,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.get(res.state",{"_index":2395,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.getall",{"_index":2809,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.getby",{"_index":773,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.setauthcode",{"_index":829,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.setauthcode(values.issuer_state",{"_index":766,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["this.setentry(entry.index",{"_index":3098,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.setupclient(client.id",{"_index":849,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.sign(input",{"_index":3192,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.sign(signinginput",{"_index":3225,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.signjwt(header",{"_index":1401,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.statuslistfetcher.bind(this",{"_index":2551,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.statuslistservice.createentry",{"_index":1190,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.statuslistservice.getlist(tenantid",{"_index":3027,"title":{},"body":{"controllers/StatusListController.html":{}}}],["this.statuslistservice.updatestatus(value",{"_index":2814,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.statusmappingrepository.findby",{"_index":3094,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.statusmappingrepository.save",{"_index":3089,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.storeconfig(file",{"_index":3073,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.storeexistingrp(name",{"_index":197,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.tidyupsessions",{"_index":2997,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.vaulturl",{"_index":3183,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.vaulturl}/keys/${tenantid",{"_index":3198,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.vaulturl}/sign/${tenantid",{"_index":3212,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.verifier.bind(this",{"_index":2549,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository",{"_index":2558,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.delete",{"_index":2557,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.find",{"_index":2552,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.save(vprequest",{"_index":2556,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.update",{"_index":2561,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["those",{"_index":3677,"title":{},"body":{"license.html":{}}}],["through",{"_index":3565,"title":{},"body":{"license.html":{}}}],["throw",{"_index":238,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{}}}],["throwonerror",{"_index":961,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["tidy",{"_index":2986,"title":{},"body":{"injectables/SessionService.html":{}}}],["tidyupsessions",{"_index":2966,"title":{},"body":{"injectables/SessionService.html":{}}}],["time",{"_index":2436,"title":{},"body":{"classes/ParResponseDto.html":{}}}],["times",{"_index":2253,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["timestamp",{"_index":1860,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["title",{"_index":3766,"title":{},"body":{"license.html":{}}}],["tmp",{"_index":3311,"title":{},"body":{"changelog.html":{}}}],["todo",{"_index":247,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["together",{"_index":3449,"title":{},"body":{"index.html":{}}}],["token",{"_index":89,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"index.html":{}}}],["token(body",{"_index":633,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["token.accesstoken",{"_index":167,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["token.decorator",{"_index":532,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["token_endpoint",{"_index":740,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["token_endpoint_auth_methods_supported",{"_index":757,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["token_exchange",{"_index":2949,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["token_type",{"_index":547,"title":{},"body":{"controllers/AuthController.html":{},"classes/TokenResponse.html":{}}}],["tokenpayload",{"_index":531,"title":{"interfaces/TokenPayload.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"interfaces/TokenPayload.html":{}}}],["tokenpayload.nonce",{"_index":2234,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["tokenpayload.sub",{"_index":2218,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["tokenresponse",{"_index":512,"title":{"classes/TokenResponse.html":{}},"body":{"controllers/AuthController.html":{},"classes/TokenResponse.html":{}}}],["tokens",{"_index":2045,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["tolowercase",{"_index":1379,"title":{},"body":{"injectables/CryptoService.html":{}}}],["tort",{"_index":3778,"title":{},"body":{"license.html":{}}}],["tostring('base64",{"_index":3256,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["tough",{"_index":3447,"title":{},"body":{"index.html":{}}}],["town",{"_index":2596,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["trace",{"_index":895,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["tracking",{"_index":2488,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"license.html":{}}}],["trade",{"_index":3747,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":3713,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":3745,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":3675,"title":{},"body":{"license.html":{}}}],["transformation",{"_index":3605,"title":{},"body":{"license.html":{}}}],["transformer",{"_index":318,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["transformers",{"_index":952,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["transforming",{"_index":943,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["translatetime",{"_index":448,"title":{},"body":{"modules/AppModule.html":{}}}],["translation",{"_index":3606,"title":{},"body":{"license.html":{}}}],["transport",{"_index":441,"title":{},"body":{"modules/AppModule.html":{}}}],["true",{"_index":136,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"interfaces/Middleware.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"interfaces/TDataShape.html":{}}}],["true})@isobject",{"_index":2446,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@isobject()@isoptional",{"_index":1868,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["true})@isstring",{"_index":1863,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["trust",{"_index":2708,"title":{},"body":{"injectables/ResolverService.html":{}}}],["try",{"_index":1371,"title":{},"body":{"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/VaultKeyService.html":{}}}],["ts",{"_index":3324,"title":{},"body":{"changelog.html":{}}}],["ttl",{"_index":3008,"title":{},"body":{"injectables/SessionService.html":{}}}],["typ",{"_index":2367,"title":{},"body":{"injectables/Oid4vpService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["type",{"_index":19,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"classes/ClientCredentialsDto.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"interfaces/Middleware.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"interfaces/RequestOptions.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["type(undefined)@isobject",{"_index":3264,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["type(undefined)@isoptional()@isobject",{"_index":3267,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["typealiases",{"_index":3850,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":88,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"interfaces/Fields.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["typeorm",{"_index":1158,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"dependencies.html":{}}}],["typeorm/query",{"_index":2994,"title":{},"body":{"injectables/SessionService.html":{}}}],["typeorm/repository/repository",{"_index":2545,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["typeormhealthindicator",{"_index":1688,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormmodule",{"_index":1426,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/PresentationsModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{}}}],["typeormmodule.forfeature([issuanceconfig",{"_index":1975,"title":{},"body":{"modules/IssuerModule.html":{}}}],["typeormmodule.forfeature([keyentity",{"_index":2077,"title":{},"body":{"modules/KeyModule.html":{}}}],["typeormmodule.forfeature([presentationconfig",{"_index":2499,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["typeormmodule.forfeature([session",{"_index":2963,"title":{},"body":{"modules/SessionModule.html":{}}}],["typeormmodule.forfeature([statusmapping",{"_index":3106,"title":{},"body":{"modules/StatusListModule.html":{}}}],["typeormmodule.forrootasync",{"_index":1442,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeormmoduleoptions",{"_index":1427,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":1723,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"modules/RegistrarModule.html":{},"injectables/VaultKeyService.html":{},"license.html":{}}}],["types.get(this.cryptoservice.getalg",{"_index":3200,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["types.set('ed25519",{"_index":3197,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["types.set('es256",{"_index":3194,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["typescript",{"_index":177,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["typically",{"_index":1072,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{}}}],["unauthorizedexception",{"_index":520,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception('invalid",{"_index":557,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined",{"_index":442,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Auth.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"interfaces/Fields.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/PathSerializer.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["undefined})@apiproduces('application/json",{"_index":1896,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["undefined})@apiresponse({status",{"_index":508,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@post('offer",{"_index":1898,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["undefined})@post('request",{"_index":2464,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["under",{"_index":3552,"title":{},"body":{"index.html":{},"license.html":{}}}],["unified",{"_index":3439,"title":{},"body":{"index.html":{}}}],["union",{"_index":3573,"title":{},"body":{"license.html":{}}}],["unique",{"_index":25,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{}}}],["unknown",{"_index":627,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CredentialsService.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Params.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["unless",{"_index":3734,"title":{},"body":{"license.html":{}}}],["unlinksync",{"_index":1269,"title":{},"body":{"injectables/CryptoService.html":{}}}],["unlinksync(file",{"_index":1356,"title":{},"body":{"injectables/CryptoService.html":{}}}],["unused",{"_index":2373,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["up",{"_index":352,"title":{},"body":{"controllers/AppController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/SessionService.html":{}}}],["update",{"_index":1702,"title":{},"body":{"classes/Interceptors.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["update(data",{"_index":1380,"title":{},"body":{"injectables/CryptoService.html":{}}}],["update(id",{"_index":1712,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["update.dto",{"_index":2806,"title":{},"body":{"controllers/SessionController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["update.dto.ts",{"_index":3131,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:16",{"_index":3133,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:24",{"_index":3136,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:8",{"_index":3134,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["updated",{"_index":1903,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["updatestatus",{"_index":3110,"title":{},"body":{"injectables/StatusListService.html":{}}}],["updatestatus(value",{"_index":3093,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["upload",{"_index":3326,"title":{},"body":{"changelog.html":{}}}],["uri",{"_index":880,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"miscellaneous/enumerations.html":{}}}],["url",{"_index":338,"title":{},"body":{"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Interceptors.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/Middleware.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"entities/PresentationConfig.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"interfaces/RequestOptions.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{}}}],["url(request.url",{"_index":2598,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["url.pathname",{"_index":2600,"title":{},"body":{"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{}}}],["url.replace",{"_index":1749,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["url.replace(match",{"_index":1753,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["urlsearchparams",{"_index":2628,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["urlsearchparamsbodyserializer",{"_index":2637,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["urn:${randomuuid",{"_index":654,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["use",{"_index":107,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"classes/EC_Public.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"changelog.html":{},"license.html":{}}}],["use(fn",{"_index":1715,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["used",{"_index":202,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client.html":{},"interfaces/Client-1.html":{},"injectables/ClientService.html":{},"interfaces/Config-1.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"entities/IssuanceConfig.html":{},"classes/JwksResponseDto.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/typealiases.html":{}}}],["usefactory",{"_index":437,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["useful",{"_index":937,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"interfaces/RequestOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["useguards",{"_index":1904,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["useguards(jwtauthguard",{"_index":1917,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["useguards(jwtauthguard)@apisecurity('bearer')@post('revoke",{"_index":2800,"title":{},"body":{"controllers/SessionController.html":{}}}],["useinterceptors",{"_index":2131,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["useinterceptors(sessionloggerinterceptor",{"_index":2137,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["user",{"_index":471,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Client-1.html":{},"interfaces/Config-1.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"modules/SessionModule.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["user.sub",{"_index":1937,"title":{},"body":{"controllers/IssuerManagementController.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["username",{"_index":1452,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["uses",{"_index":1681,"title":{},"body":{"controllers/HealthController.html":{},"injectables/SessionLoggerService.html":{}}}],["using",{"_index":159,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"injectables/CryptoService.html":{},"injectables/JwtStrategy.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["utf",{"_index":297,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["util",{"_index":2174,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["utility",{"_index":1402,"title":{},"body":{"injectables/CryptoService.html":{}}}],["utils",{"_index":967,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["utils.ts",{"_index":1403,"title":{},"body":{"injectables/CryptoService.html":{}}}],["utils/session",{"_index":1971,"title":{},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["utils/webhook.dto",{"_index":729,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/VCT.html":{}}}],["uuid",{"_index":1604,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"dependencies.html":{}}}],["v",{"_index":1406,"title":{},"body":{"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/QuerySerializerOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"index.html":{}}}],["v1",{"_index":3536,"title":{},"body":{"index.html":{}}}],["v2",{"_index":3537,"title":{},"body":{"index.html":{}}}],["v4",{"_index":1603,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["valid",{"_index":164,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/StatusUpdateDto.html":{}}}],["valid('trace",{"_index":426,"title":{},"body":{"modules/AppModule.html":{}}}],["validate",{"_index":635,"title":{},"body":{"controllers/AuthorizeController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["validate(payload",{"_index":2015,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateclient",{"_index":1038,"title":{},"body":{"injectables/ClientService.html":{}}}],["validateclient(clientid",{"_index":858,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["validated",{"_index":2232,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["validatetokenrequest",{"_index":696,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["validatetokenrequest(body",{"_index":717,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["validating",{"_index":936,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["validation",{"_index":1663,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/RegistrarModule.html":{}}}],["validationschema",{"_index":418,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":322,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"entities/IssuanceConfig.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["value",{"_index":309,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Auth.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client-1.html":{},"injectables/ClientService.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"interfaces/Fields.html":{},"injectables/FileSystemKeyService.html":{},"classes/Interceptors.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"interfaces/Middleware.html":{},"injectables/Oid4vpService.html":{},"interfaces/Params.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/PathSerializer.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"classes/SchemaResponse.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"controllers/SessionController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["value.credentialconfigurationid",{"_index":3096,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["value.foreach((v",{"_index":2631,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["value.map((v",{"_index":2744,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["value.sessionid",{"_index":3095,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["value.status",{"_index":3099,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["value.tenantid",{"_index":1162,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.toisostring",{"_index":2758,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["value.tostring",{"_index":2636,"title":{},"body":{"interfaces/QuerySerializerOptions.html":{}}}],["valueonly",{"_index":1750,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["values",{"_index":98,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/RequestOptions.html":{},"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{},"injectables/SessionService.html":{},"interfaces/TDataShape.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/typealiases.html":{}}}],["values.join",{"_index":2761,"title":{},"body":{"interfaces/SerializeOptions.html":{},"interfaces/SerializePrimitiveOptions.html":{},"interfaces/SerializePrimitiveParam.html":{},"interfaces/SerializerOptions.html":{}}}],["values.session",{"_index":2385,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["values.uri",{"_index":2478,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["values.webhook",{"_index":2386,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["varchar",{"_index":3125,"title":{},"body":{"entities/StatusMapping.html":{}}}],["variable",{"_index":2989,"title":{},"body":{"injectables/SessionService.html":{}}}],["variables",{"_index":2655,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["various",{"_index":335,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["vars",{"_index":2374,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["vault",{"_index":2061,"title":{},"body":{"modules/KeyModule.html":{},"injectables/VaultKeyService.html":{}}}],["vault').default('file",{"_index":2069,"title":{},"body":{"modules/KeyModule.html":{}}}],["vault_key_id",{"_index":2075,"title":{},"body":{"modules/KeyModule.html":{}}}],["vault_token",{"_index":2073,"title":{},"body":{"modules/KeyModule.html":{},"injectables/VaultKeyService.html":{}}}],["vault_url",{"_index":2071,"title":{},"body":{"modules/KeyModule.html":{}}}],["vaultkeyservice",{"_index":2060,"title":{"injectables/VaultKeyService.html":{}},"body":{"modules/KeyModule.html":{},"injectables/VaultKeyService.html":{}}}],["vaulturl",{"_index":3153,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["vc",{"_index":1146,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"dependencies.html":{},"index.html":{}}}],["vc.claims",{"_index":1172,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["vc.disclosureframe",{"_index":1174,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["vc.schema",{"_index":1197,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["vc.vct",{"_index":1194,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["vc.vct.vct",{"_index":1195,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["vcs",{"_index":2502,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vct",{"_index":1085,"title":{"classes/VCT.html":{}},"body":{"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["vct(@param('id",{"_index":1099,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["vct(id",{"_index":1091,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["vendor",{"_index":3456,"title":{},"body":{"index.html":{}}}],["verbal",{"_index":3640,"title":{},"body":{"license.html":{}}}],["verifiable",{"_index":1094,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{}}}],["verification",{"_index":1665,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["verificationresult",{"_index":2772,"title":{},"body":{"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["verified",{"_index":1376,"title":{},"body":{"injectables/CryptoService.html":{},"entities/Session.html":{}}}],["verifiedproof",{"_index":2229,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["verifiedproof.signer.publicjwk",{"_index":2235,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["verifier",{"_index":1217,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{},"miscellaneous/typealiases.html":{}}}],["verifier/oid4vp/dto/presentation",{"_index":1914,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequest.html":{},"classes/OfferResponse.html":{}}}],["verifier/oid4vp/oid4vp.module",{"_index":1969,"title":{},"body":{"modules/IssuerModule.html":{}}}],["verifier/oid4vp/oid4vp.service",{"_index":727,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["verifier/presentations/dto/vp",{"_index":50,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["verifier/presentations/presentations.module",{"_index":2652,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["verifier/presentations/presentations.service",{"_index":53,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["verifier/verifier.module",{"_index":391,"title":{},"body":{"modules/AppModule.html":{}}}],["verifier_attestations",{"_index":2366,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["verifiermodule",{"_index":376,"title":{"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["verify",{"_index":749,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{}}}],["verify(data",{"_index":2568,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verify(res.vp_token[att",{"_index":2580,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verifyauthorizationcodeaccesstokenrequest",{"_index":779,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}}}],["verifyjwt",{"_index":1238,"title":{},"body":{"injectables/CryptoService.html":{}}}],["verifyjwt(compact",{"_index":1261,"title":{},"body":{"injectables/CryptoService.html":{}}}],["verifytoken",{"_index":1997,"title":{},"body":{"injectables/JwtService.html":{}}}],["verifytoken(token",{"_index":1664,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["version",{"_index":3301,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["versions",{"_index":3535,"title":{},"body":{"index.html":{}}}],["via",{"_index":657,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/KeyService.html":{},"injectables/SessionService.html":{},"index.html":{}}}],["video/'].some((type",{"_index":1779,"title":{},"body":{"classes/Interceptors.html":{},"interfaces/Middleware.html":{},"interfaces/PathSerializer.html":{}}}],["view",{"_index":935,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/Config-1.html":{}}}],["vitest",{"_index":3328,"title":{},"body":{"changelog.html":{}}}],["void",{"_index":1044,"title":{},"body":{"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"classes/Interceptors.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"interfaces/QuerySerializerOptions.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["vp",{"_index":599,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"changelog.html":{}}}],["vp_formats",{"_index":2348,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["vp_nonce",{"_index":2335,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["vp_token",{"_index":595,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["vprequest",{"_index":2535,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vprequest.tenantid",{"_index":2555,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vprequestrepository",{"_index":2513,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vps",{"_index":2501,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["wallet",{"_index":800,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"index.html":{}}}],["wallets",{"_index":3438,"title":{},"body":{"index.html":{}}}],["want",{"_index":912,"title":{},"body":{"interfaces/Client-1.html":{},"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/Config-1.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["warn",{"_index":428,"title":{},"body":{"modules/AppModule.html":{}}}],["warranties",{"_index":3762,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":3757,"title":{},"body":{"license.html":{}}}],["way",{"_index":1027,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["we'll",{"_index":1932,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["web",{"_index":1459,"title":{},"body":{"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{}}}],["webhook",{"_index":329,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/PresentedData.html":{},"interfaces/ProcessResponse.html":{},"entities/Session.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{}}}],["webhookauthconfig",{"_index":330,"title":{"classes/WebHookAuthConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["webhookconfig",{"_index":337,"title":{"classes/WebhookConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["webhookresponse",{"_index":2422,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webhookresponse.data",{"_index":2425,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webhookresponse.status",{"_index":2430,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webhooks",{"_index":307,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/typealiases.html":{}}}],["webhooksent",{"_index":2434,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webhookurl",{"_index":2416,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webook",{"_index":2409,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["welcome",{"_index":3541,"title":{},"body":{"index.html":{}}}],["well",{"_index":386,"title":{},"body":{"modules/AppModule.html":{},"injectables/CryptoService.html":{},"controllers/WellKnownController.html":{}}}],["wellknowncontroller",{"_index":381,"title":{"controllers/WellKnownController.html":{}},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{}}}],["wherever",{"_index":3721,"title":{},"body":{"license.html":{}}}],["whether",{"_index":2106,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"license.html":{}}}],["whole",{"_index":3626,"title":{},"body":{"license.html":{}}}],["within",{"_index":3657,"title":{},"body":{"license.html":{}}}],["without",{"_index":1671,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"license.html":{}}}],["won't",{"_index":984,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{}}}],["work",{"_index":3610,"title":{},"body":{"license.html":{}}}],["worker",{"_index":3342,"title":{},"body":{"changelog.html":{}}}],["works",{"_index":3619,"title":{},"body":{"license.html":{}}}],["worldwide",{"_index":3660,"title":{},"body":{"license.html":{}}}],["write",{"_index":272,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["writefilesync",{"_index":56,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["writefilesync(file",{"_index":3077,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["writefilesync(filepath",{"_index":292,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["writefilesync(join(folder",{"_index":1359,"title":{},"body":{"injectables/CryptoService.html":{}}}],["writefilesync(join(this.folder",{"_index":3188,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["writefilesync(sanext",{"_index":1343,"title":{},"body":{"injectables/CryptoService.html":{}}}],["writing",{"_index":274,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["written",{"_index":3641,"title":{},"body":{"license.html":{}}}],["x",{"_index":1466,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/VaultKeyService.html":{},"index.html":{}}}],["x509",{"_index":1331,"title":{},"body":{"injectables/CryptoService.html":{}}}],["x509_san_dns",{"_index":2340,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509_san_dns:${host",{"_index":2389,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509certificate",{"_index":1268,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/ResolverService.html":{}}}],["x509certificate(buffer.from(cert",{"_index":2710,"title":{},"body":{"injectables/ResolverService.html":{}}}],["x509certificate(cert",{"_index":1360,"title":{},"body":{"injectables/CryptoService.html":{}}}],["x5c",{"_index":1191,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["y",{"_index":1467,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["yes",{"_index":710,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"injectables/SessionLoggerService.html":{}}}],["you're",{"_index":1029,"title":{},"body":{"interfaces/ClientOptions.html":{},"interfaces/Config.html":{},"interfaces/RequestOptions.html":{},"interfaces/TDataShape.html":{},"miscellaneous/typealiases.html":{}}}],["your_api_key_here",{"_index":325,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["yyyy",{"_index":449,"title":{},"body":{"modules/AppModule.html":{}}}],["zeros",{"_index":3240,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["zoom",{"_index":377,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AccessCertificateResponse.html":{"url":"interfaces/AccessCertificateResponse.html","title":"interface - AccessCertificateResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccessCertificateResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/registrar.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Repsonse of access certificate request.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            crt\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            revoked\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        crt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        crt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The public key in PEM format.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier of the access certificate.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        revoked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        revoked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Indicates if the access certificate is revoked.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    Injectable,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { OAuth2Client } from '@badgateway/oauth2-client';\nimport { client } from './generated/client.gen';\nimport {\n    accessCertificateControllerFindOne,\n    accessCertificateControllerRegister,\n    registrationCertificateControllerAll,\n    registrationCertificateControllerRegister,\n    relyingPartyControllerFindAll,\n    relyingPartyControllerRegister,\n} from './generated';\nimport { CryptoService } from '../crypto/crypto.service';\nimport { RegistrationCertificateRequest } from '../verifier/presentations/dto/vp-request.dto';\nimport { PresentationsService } from '../verifier/presentations/presentations.service';\nimport { existsSync, readFileSync, writeFileSync } from 'node:fs';\nimport { RegistrarConfig } from './registrar-config';\nimport { join } from 'node:path';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { TENANT_EVENTS } from '../auth/tenant-events';\n\n/**\n * Repsonse of access certificate request.\n */\ninterface AccessCertificateResponse {\n    /**\n     * Unique identifier of the access certificate.\n     */\n    id: string;\n    /**\n     * The public key in PEM format.\n     */\n    crt: string;\n    /**\n     * Indicates if the access certificate is revoked.\n     */\n    revoked?: boolean;\n}\n\n/**\n * RegistrarService is responsible for managing the interaction with the registrar,\n * including adding relying parties, access certificates, and registration certificates.\n */\n@Injectable()\nexport class RegistrarService implements OnApplicationBootstrap, OnModuleInit {\n    /**\n     * OAuth2 client for interacting with the OIDC provider.\n     */\n    private oauth2Client: OAuth2Client;\n    /**\n     * Client for interacting with the registrar API.\n     */\n    private client: typeof client;\n    /**\n     * Access token for authenticating requests to the registrar.\n     */\n    private accessToken: string;\n\n    /**\n     * Constructor for the RegistrarService.\n     * @param configService - Instance of ConfigService for accessing configuration values.\n     * @param cryptoService - Instance of CryptoService for cryptographic operations.\n     * @param presentationsService - Instance of PresentationsService for handling presentations.\n     */\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private presentationsService: PresentationsService,\n    ) {}\n\n    /**\n     * Initializes the OAuth2 client and registrar client with the necessary configurations.\n     */\n    onModuleInit() {\n        //when not set, we will not use the registrar\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const oidcIssuerUrl =\n            this.configService.getOrThrow('OIDC_ISSUER_URL');\n        const clientId =\n            this.configService.getOrThrow('OIDC_CLIENT_ID');\n        const clientSecret =\n            this.configService.getOrThrow('OIDC_CLIENT_SECRET');\n\n        this.oauth2Client = new OAuth2Client({\n            server: `${oidcIssuerUrl}/protocol/openid-connect/token`,\n            clientId,\n            clientSecret,\n            discoveryEndpoint: `${oidcIssuerUrl}/.well-known/openid-configuration`,\n        });\n\n        this.client = client;\n        this.client.setConfig({\n            baseUrl: this.configService.getOrThrow('REGISTRAR_URL'),\n            auth: () => this.accessToken,\n        });\n    }\n\n    /**\n     * Checks if the registrar service is enabled based on the configuration.\n     * @returns True if the registrar service is enabled, false otherwise.\n     */\n    isEnabled() {\n        return !!this.configService.get('REGISTRAR_URL');\n    }\n\n    /**\n     * This function is called when the application starts.\n     * It will refresh the access token for the registrar.\n     */\n    async onApplicationBootstrap() {\n        if (!this.configService.get('REGISTRAR_URL')) {\n            return;\n        }\n        await this.refreshAccessToken();\n    }\n\n    /**\n     * This function is called when a tenant is initialized.\n     * @param tenantId\n     */\n    @OnEvent(TENANT_EVENTS.TENANT_KEYS, { async: true })\n    async onTenantInit(tenantId: string) {\n        if (!this.isEnabled()) {\n            return;\n        }\n        const config = this.loadConfig(tenantId);\n        if (!config.id) {\n            config.id = await this.addRp(tenantId);\n        }\n        await this.getAccessCertificateId(config, tenantId);\n    }\n\n    /**\n     * Refreshes the access token for the registrar using client credentials.\n     * This method is called periodically to ensure the access token is valid.\n     */\n    async refreshAccessToken() {\n        await this.oauth2Client.clientCredentials().then((token) => {\n            this.accessToken = token.accessToken;\n            const date = new Date();\n            const expirationDate = new Date(token.expiresAt as number);\n            setTimeout(\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                () => this.refreshAccessToken(),\n                expirationDate.getTime() - date.getTime() - 1000,\n            );\n        });\n    }\n\n    /**\n     * Adds a new relying party to the registrar.\n     * This is only needed once, when the relying party is created.\n     */\n    addRp(tenantId: string): Promise {\n        const name = this.configService.getOrThrow('RP_NAME');\n        return relyingPartyControllerRegister({\n            client: this.client,\n            body: {\n                name,\n            },\n        }).then(async (response) => {\n            const config = this.loadConfig(tenantId);\n            if (response.error) {\n                config.id = await this.storeExistingRp(name);\n            } else {\n                config.id = response.data!['id'];\n            }\n            this.saveConfig(config, tenantId);\n            return response.data!['id'];\n        });\n    }\n\n    /**\n     * Stores the existing relying party ID based on the name.\n     * This is used when the relying party already exists in the registrar.\n     * @param name - The name of the relying party.\n     * @returns The ID of the existing relying party.\n     */\n    private storeExistingRp(name: string) {\n        return relyingPartyControllerFindAll({\n            client: this.client,\n            query: {\n                name,\n            },\n        }).then((response) => {\n            return response.data!.find((item) => item.name === name)?.id;\n        });\n    }\n\n    /**\n     * Get the access certificate ID from the registrar.\n     * If there is no access certificate ID in the config, it will add a new one.\n     * If there is one, it will check if it is still valid.\n     * If it is revoked, it will add a new one.\n     * @param config\n     */\n    async getAccessCertificateId(config: RegistrarConfig, tenantId: string) {\n        // if there is no access certificate ID in the config, we need to add it\n        if (!config.accessCertificateId) {\n            await this.addAccessCertificate(config, tenantId);\n        }\n        // if there is one, check if it is still valid\n        await accessCertificateControllerFindOne({\n            client: this.client,\n            path: { rp: config.id, id: config.accessCertificateId! },\n        }).then((res) => {\n            if (res.error) {\n                console.error('Error finding access certificate:', res.error);\n            }\n            const data = res.data as AccessCertificateResponse;\n            if (data.revoked) {\n                console.warn('Access certificate is revoked, adding a new one');\n                return this.addAccessCertificate(config, tenantId);\n            }\n        });\n    }\n\n    /**\n     * Add a new access certificate to the registrar.\n     * This is only needed once, when the access certificate is created.\n     * If the access certificate already exists, it will be returned.\n     * @returns\n     */\n    private async addAccessCertificate(\n        config: RegistrarConfig,\n        tenantId: string,\n    ): Promise {\n        const host = this.configService\n            .getOrThrow('PUBLIC_URL')\n            .replace('https://', '');\n        return accessCertificateControllerRegister({\n            client: this.client,\n            body: {\n                publicKey: await this.cryptoService.keyService.getPublicKey(\n                    'pem',\n                    tenantId,\n                ),\n                dns: [host],\n            },\n            path: {\n                rp: config.id,\n            },\n        }).then((res) => {\n            if (res.error) {\n                console.error('Error adding access certificate:', res.error);\n                throw new Error('Error adding access certificate');\n            }\n            //store the cert\n            this.cryptoService.storeAccessCertificate(\n                res.data!['crt'],\n                tenantId,\n            );\n            config.accessCertificateId = res.data!['id'];\n            this.saveConfig(config, tenantId);\n            return res.data!['id'];\n        });\n    }\n\n    /**\n     * Add a new registration certificate to the registrar.\n     * This is only needed once, when the registration certificate is created.\n     * If the registration certificate already exists, it will be returned.\n     * @returns\n     */\n    async addRegistrationCertificate(\n        req: RegistrationCertificateRequest,\n        //TODO: check if the dcql_query is covered by the registration certificate. If not, we need to throw an error since we do not know the new purpose for it.\n        dcql_query: any,\n        requestId: string,\n        tenantId: string,\n    ) {\n        const rp = this.loadConfig(tenantId).id;\n\n        //TODO: need to check if the access certificate is bound to the access certificate with the subject. Also that the requested fields are matching.\n\n        const certs =\n            (await registrationCertificateControllerAll({\n                client: this.client,\n                path: {\n                    rp,\n                },\n            }).then((res) =>\n                res.data?.filter(\n                    (cert) =>\n                        cert.revoked == null && cert.id === (req.id as string),\n                ),\n            )) || [];\n\n        if (certs?.length > 0) {\n            return certs[0].jwt;\n        }\n\n        return registrationCertificateControllerRegister({\n            client: this.client,\n            path: {\n                rp,\n            },\n            body: req.body,\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\n                    'Error adding registration certificate:',\n                    res.error,\n                );\n                throw new Error('Error adding registration certificate');\n            }\n\n            //TODO: write the ID to the config so its easier to use it. Easier than writing the comparison algorithm (any maybe someone wants to use a different one)\n            await this.presentationsService.storeRCID(\n                res.data!['id'],\n                requestId,\n                tenantId,\n            );\n            return res.data!['jwt'];\n        });\n    }\n\n    /**\n     * Load the registrar configuration from the config file.\n     * @returns\n     */\n    private loadConfig(tenantId: string): RegistrarConfig {\n        const filePath = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'registrar.json',\n        );\n\n        if (!existsSync(filePath)) {\n            // If the config file does not exist, create an empty config\n            const initialConfig: RegistrarConfig = {};\n            writeFileSync(filePath, JSON.stringify(initialConfig, null, 2));\n            return initialConfig;\n        }\n        const config = JSON.parse(\n            readFileSync(filePath, 'utf-8'),\n        ) as RegistrarConfig;\n        return config;\n    }\n\n    /**\n     * Save the registrar configuration to the config file.\n     * @param config\n     */\n    private saveConfig(config: RegistrarConfig, tenantId: string) {\n        const filePath = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'registrar.json',\n        );\n        writeFileSync(filePath, JSON.stringify(config, null, 2));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApiKeyConfig.html":{"url":"classes/ApiKeyConfig.html","title":"class - ApiKeyConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiKeyConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for API key authentication in webhooks.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                headerName\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        headerName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook.dto.ts:13\n                        \n                    \n\n            \n                \n                    The name of the header where the API key will be sent.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook.dto.ts:19\n                        \n                    \n\n            \n                \n                    The value of the API key to be sent in the header.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsIn, IsObject, IsOptional, IsString } from 'class-validator';\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     * @example Authorization\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     * @example Bearer your_api_key_here\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = 'apiKey';\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn(['apiKey'])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app/app.controller.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiExcludeController } from '@nestjs/swagger';\n\n@ApiExcludeController()\n@Controller()\nexport class AppController {\n    @Get()\n    getHello(): string {\n        return 'EUDIPLO is up and running, more information at https://cre8.github.io/eudiplo/latest/';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            WellKnownController\n                        \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CryptoModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            IssuerModule\n                        \n                        \n                            KeyModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            VerifierModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport * as Joi from 'joi';\nimport { CryptoModule } from './crypto/crypto.module';\nimport { WellKnownController } from './well-known/well-known.controller';\nimport { ISSUER_VALIDATION_SCHEMA, IssuerModule } from './issuer/issuer.module';\nimport { VerifierModule } from './verifier/verifier.module';\nimport {\n    REGISTRAR_VALIDATION_SCHEMA,\n    RegistrarModule,\n} from './registrar/registrar.module';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join, isAbsolute } from 'path';\nimport { KEY_VALIDATION_SCHEMA, KeyModule } from './crypto/key/key.module';\nimport { CRYPTO_VALIDATION_SCHEMA } from './crypto/key/crypto/crypto.module';\nimport { AppController } from './app/app.controller';\nimport {\n    SESSION_VALIDATION_SCHEMA,\n    SessionModule,\n} from './session/session.module';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { DatabaseModule } from './database/database.module';\nimport { HealthModule } from './health/health.module';\nimport { AUTH_VALIDATION_SCHEMA, AuthModule } from './auth/auth.module';\nimport { EventEmitterModule } from '@nestjs/event-emitter/dist/event-emitter.module';\nimport { LoggerModule } from 'nestjs-pino';\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            validationSchema: Joi.object({\n                FOLDER: Joi.string().default('./tmp'),\n                RP_NAME: Joi.string().default('EUDIPLO'),\n                LOG_LEVEL: Joi.string()\n                    .valid('trace', 'debug', 'info', 'warn', 'error', 'fatal')\n                    .default(\n                        process.env.NODE_ENV === 'production'\n                            ? 'warn'\n                            : 'debug',\n                    ),\n                ...AUTH_VALIDATION_SCHEMA,\n                ...REGISTRAR_VALIDATION_SCHEMA,\n                ...KEY_VALIDATION_SCHEMA,\n                ...CRYPTO_VALIDATION_SCHEMA,\n                ...ISSUER_VALIDATION_SCHEMA,\n                ...SESSION_VALIDATION_SCHEMA,\n            }),\n            isGlobal: true,\n            expandVariables: true,\n        }),\n        LoggerModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => ({\n                pinoHttp: {\n                    level: configService.get('LOG_LEVEL', 'info'),\n                    transport:\n                        process.env.NODE_ENV === 'production'\n                            ? undefined\n                            : {\n                                  target: 'pino-pretty',\n                                  options: {\n                                      colorize: true,\n                                      singleLine: false,\n                                      translateTime: 'yyyy-mm-dd HH:MM:ss',\n                                      ignore: 'pid,hostname',\n                                  },\n                              },\n                    customProps: (req: any) => ({\n                        sessionId:\n                            req.headers['x-session-id'] ||\n                            req.params?.session ||\n                            req.body?.session_id,\n                        tenantId: req.params?.tenantId,\n                        flow: req.url?.includes('/vci')\n                            ? 'OID4VCI'\n                            : req.url?.includes('/oid4vp')\n                              ? 'OID4VP'\n                              : undefined,\n                    }),\n                    serializers: {\n                        req: (req: any) => ({\n                            method: req.method,\n                            url: req.url,\n                            headers: {\n                                'user-agent': req.headers['user-agent'],\n                                'content-type': req.headers['content-type'],\n                            },\n                            sessionId:\n                                req.headers['x-session-id'] ||\n                                req.params?.session,\n                            tenantId: req.params?.tenantId,\n                        }),\n                        res: (res: any) => ({\n                            statusCode: res.statusCode,\n                        }),\n                    },\n                },\n            }),\n        }),\n        KeyModule.forRoot(),\n        CryptoModule,\n        IssuerModule,\n        VerifierModule,\n        RegistrarModule,\n        ScheduleModule.forRoot(),\n        ServeStaticModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const folder = configService.getOrThrow('FOLDER');\n                const rootPath = isAbsolute(folder)\n                    ? join(folder, 'public')\n                    : join(__dirname, '../', folder, 'public');\n                return [\n                    {\n                        rootPath,\n                    },\n                ];\n            },\n        }),\n        EventEmitterModule.forRoot(),\n        DatabaseModule,\n        SessionModule,\n        DatabaseModule,\n        HealthModule,\n        AuthModule,\n    ],\n    controllers: [WellKnownController, AppController],\n    providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Auth.html":{"url":"interfaces/Auth.html","title":"interface - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/auth.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            in\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            scheme\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        in\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        in:     \"header\" | \"query\" | \"cookie\"\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : 'header'\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :     \"header\" | \"query\" | \"cookie\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Which part of the request do we use to send the auth?\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : 'Authorization'\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Header or query parameter name.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scheme\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scheme:     \"basic\" | \"bearer\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"basic\" | \"bearer\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"apiKey\" | \"http\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"apiKey\" | \"http\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type AuthToken = string | undefined;\n\nexport interface Auth {\n    /**\n     * Which part of the request do we use to send the auth?\n     *\n     * @default 'header'\n     */\n    in?: 'header' | 'query' | 'cookie';\n    /**\n     * Header or query parameter name.\n     *\n     * @default 'Authorization'\n     */\n    name?: string;\n    scheme?: 'basic' | 'bearer';\n    type: 'apiKey' | 'http';\n}\n\nexport const getAuthToken = async (\n    auth: Auth,\n    callback: ((auth: Auth) => Promise | AuthToken) | AuthToken,\n): Promise => {\n    const token =\n        typeof callback === 'function' ? await callback(auth) : callback;\n\n    if (!token) {\n        return;\n    }\n\n    if (auth.scheme === 'bearer') {\n        return `Bearer ${token}`;\n    }\n\n    if (auth.scheme === 'basic') {\n        return `Basic ${btoa(token)}`;\n    }\n\n    return token;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    getToken(body: ClientCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('token')@ApiBody({type: ClientCredentialsDto, examples: undefined})@ApiResponse({status: 200, description: 'JWT token generated successfully', type: TokenResponse, example: undefined})@ApiResponse({status: 401, description: 'Invalid client credentials or multi-tenant mode enabled'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:51\n                        \n                    \n\n\n            \n                \n                        Get JWT token using client credentials\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            ClientCredentialsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, UnauthorizedException } from '@nestjs/common';\nimport { ApiTags, ApiResponse, ApiBody } from '@nestjs/swagger';\nimport { JwtService } from './jwt.service';\nimport { ClientService } from './client.service';\nimport { Public } from './public.decorator';\nimport { ClientCredentialsDto } from './dto/client-credentials.dto';\nimport { TokenPayload } from './token.decorator';\nimport { TokenResponse } from './dto/token-response.dto';\n\n@ApiTags('Authentication', 'Admin')\n@Controller('auth')\nexport class AuthController {\n    constructor(\n        private jwtService: JwtService,\n        private clientService: ClientService,\n    ) {}\n\n    /**\n     * Get JWT token using client credentials\n     * @param body\n     * @returns\n     */\n    @Public()\n    @Post('token')\n    @ApiBody({\n        type: ClientCredentialsDto,\n        examples: {\n            root: {\n                summary: 'Root demo values',\n                value: {\n                    client_id: 'root',\n                    client_secret: 'root',\n                },\n            },\n        },\n    })\n    @ApiResponse({\n        status: 200,\n        description: 'JWT token generated successfully',\n        type: TokenResponse,\n        example: {\n            access_token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n            token_type: 'Bearer',\n            expires_in: '24h',\n        },\n    })\n    @ApiResponse({\n        status: 401,\n        description: 'Invalid client credentials or multi-tenant mode enabled',\n    })\n    async getToken(@Body() body: ClientCredentialsDto): Promise {\n        if (this.jwtService.isMultiTenant()) {\n            throw new UnauthorizedException(\n                'Client credentials flow is not available in multi-tenant mode. Use your existing Keycloak/OIDC provider for authentication.',\n            );\n        }\n\n        const client = this.clientService.validateClient(\n            body.client_id,\n            body.client_secret,\n        );\n        if (!client) {\n            throw new UnauthorizedException('Invalid client credentials');\n        }\n\n        const payload: TokenPayload = {\n            sub: client.id,\n        };\n\n        const token = await this.jwtService.generateToken(payload, {\n            expiresIn: '24h', // Longer expiration for service accounts\n            audience: 'eudiplo-service',\n        });\n\n        return {\n            access_token: token,\n            token_type: 'Bearer',\n            expires_in: '24h',\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\n\n\nJwtService \n\nJwtService \n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nAuthModule\n\nAuthModule\n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nClientService\n\nClientService\n\nAuthModule -->\n\nClientService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ClientService\n                        \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtStrategy } from './jwt.strategy';\nimport { JwtAuthGuard } from './auth.guard';\nimport { JwtService } from './jwt.service';\nimport { AuthController } from './auth.controller';\nimport { ClientService } from './client.service';\nimport * as Joi from 'joi';\nimport { ConfigModule } from '@nestjs/config';\n\nexport const AUTH_VALIDATION_SCHEMA = {\n    OIDC: Joi.string().optional(),\n    KEYCLOAK_INTERNAL_ISSUER_URL: Joi.when('OIDC', {\n        then: Joi.string().required(),\n        otherwise: Joi.string().optional(),\n    }),\n    KEYCLOAK_CLIENT_ID: Joi.when('OIDC', {\n        then: Joi.string().required(),\n        otherwise: Joi.string().optional(),\n    }),\n    JWT_SECRET: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().required(),\n    }),\n    JWT_ISSUER: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().optional().default('eudiplo-service'),\n    }),\n    JWT_EXPIRES_IN: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default('24h'),\n    }),\n    AUTH_CLIENT_SECRET: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().required(),\n    }),\n    AUTH_CLIENT_ID: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().required(),\n    }),\n};\n\n@Module({\n    imports: [PassportModule, ConfigModule],\n    providers: [JwtStrategy, JwtAuthGuard, JwtService, ClientService],\n    controllers: [AuthController],\n    exports: [PassportModule, JwtStrategy, JwtAuthGuard, JwtService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthResponse.html":{"url":"interfaces/AuthResponse.html","title":"interface - AuthResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/auth-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                AuthResponse DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            state\n                                        \n                                \n                                \n                                        \n                                            vp_token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The state parameter to maintain state between the request and callback.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        vp_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        vp_token:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The VP token containing the presentation data.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AuthResponse {\n    /**\n     * The VP token containing the presentation data.\n     */\n    vp_token: {\n        /**\n         * Key-value pairs representing the VP token data.\n         */\n        [key: string]: string;\n    };\n    /**\n     * The state parameter to maintain state between the request and callback.\n     */\n    state: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizationResponse.html":{"url":"classes/AuthorizationResponse.html","title":"class - AuthorizationResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizationResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/authorization-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the authorization response containing the VP token.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                response\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/authorization-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The response string containing the authorization details.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\n/**\n * DTO for the authorization response containing the VP token.\n */\nexport class AuthorizationResponse {\n    /**\n     * The response string containing the authorization details.\n     */\n    @IsString()\n    response: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthorizeController.html":{"url":"controllers/AuthorizeController.html","title":"controller - AuthorizeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthorizeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/authorize\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI authorization endpoints.\nThis controller handles the authorization requests, token requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authorizationChallengeEndpoint\n                            \n                            \n                                    \n                                    Async\n                                authorize\n                            \n                            \n                                    \n                                    \n                                    Async\n                                par\n                            \n                            \n                                    \n                                    Async\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(res: Response, body: AuthorizeQueries, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('challenge')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:98\n                        \n                    \n\n\n            \n                \n                        Endpoint for the authorization challenge.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        authorize\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorize(queries: AuthorizeQueries, res: Response, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:36\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Authorization Request.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        par\n                        \n                    \n                \n            \n            \n                \n                        \n                    par(body: AuthorizeQueries, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({description: 'Pushed Authorization Request', type: AuthorizeQueries})@Post('par')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:58\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Pushed Authorization Request (PAR).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        token\n                        \n                    \n                \n            \n            \n                \n                        \n                    token(body: any, req: Request, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('token')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:82\n                        \n                    \n\n\n            \n                \n                        Endpoint to validate the token request.\nThis endpoint is used to exchange the authorization code for an access token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\nimport {\n    Body,\n    Controller,\n    Get,\n    Param,\n    Post,\n    Query,\n    Req,\n    Res,\n} from '@nestjs/common';\nimport type { Request, Response } from 'express';\nimport { AuthorizeService } from './authorize.service';\nimport { AuthorizeQueries } from './dto/authorize-request.dto';\nimport { SessionService } from '../../session/session.service';\nimport { ParResponseDto } from './dto/par-response.dto';\nimport { ApiBody } from '@nestjs/swagger';\n\n/**\n * Controller for the OpenID4VCI authorization endpoints.\n * This controller handles the authorization requests, token requests.\n */\n@Controller(':tenantId/authorize')\nexport class AuthorizeController {\n    constructor(\n        private readonly authorizeService: AuthorizeService,\n        private sessionService: SessionService,\n    ) {}\n\n    /**\n     * Endpoint to handle the Authorization Request.\n     * @param queries\n     * @param res\n     */\n    @Get()\n    async authorize(\n        @Query() queries: AuthorizeQueries,\n        @Res() res: Response,\n        @Param('tenantId') tenantId: string,\n    ) {\n        return this.authorizeService.sendAuthorizationResponse(\n            queries,\n            res,\n            tenantId,\n        );\n    }\n\n    /**\n     * Endpoint to handle the Pushed Authorization Request (PAR).\n     * @param body\n     * @returns\n     */\n    @ApiBody({\n        description: 'Pushed Authorization Request',\n        type: AuthorizeQueries,\n    })\n    @Post('par')\n    async par(\n        @Body() body: AuthorizeQueries,\n        @Param('tenantId') tenantId: string,\n    ): Promise {\n        const request_uri = `urn:${randomUUID()}`;\n        // save both so we can retrieve the session also via the request_uri in the authorize step.\n        await this.sessionService.add(body.issuer_state!, tenantId, {\n            request_uri,\n            auth_queries: body,\n        });\n        return {\n            expires_in: 500,\n            request_uri,\n        };\n    }\n\n    /**\n     * Endpoint to validate the token request.\n     * This endpoint is used to exchange the authorization code for an access token.\n     * @param body\n     * @param req\n     * @returns\n     */\n    @Post('token')\n    async token(\n        @Body() body: any,\n        @Req() req: Request,\n        @Param('tenantId') tenantId: string,\n    ): Promise {\n        //TODO: define body\n        return this.authorizeService.validateTokenRequest(body, req, tenantId);\n    }\n\n    /**\n     * Endpoint for the authorization challenge.\n     * @param res\n     * @param body\n     * @returns\n     */\n    @Post('challenge')\n    authorizationChallengeEndpoint(\n        @Res() res: Response,\n        @Body() body: AuthorizeQueries,\n        @Param('tenantId') tenantId: string,\n    ) {\n        return this.authorizeService.authorizationChallengeEndpoint(\n            res,\n            body,\n            tenantId,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizeQueries.html":{"url":"classes/AuthorizeQueries.html","title":"class - AuthorizeQueries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizeQueries\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/authorize-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                auth_session\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                client_id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge_method\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                dpop_jkt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                issuer_state\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                redirect_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                resource\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                scope\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        auth_session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge_method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        dpop_jkt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        issuer_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        redirect_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from 'class-validator';\n\nexport class AuthorizeQueries {\n    @IsOptional()\n    @IsString()\n    issuer_state?: string;\n    @IsOptional()\n    @IsString()\n    response_type?: string;\n    @IsOptional()\n    @IsString()\n    client_id?: string;\n    @IsOptional()\n    @IsString()\n    redirect_uri?: string;\n    @IsOptional()\n    @IsString()\n    resource?: string;\n    @IsOptional()\n    @IsString()\n    scope?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge_method?: string;\n    @IsOptional()\n    @IsString()\n    dpop_jkt?: string;\n    @IsOptional()\n    @IsString()\n    request_uri?: string;\n    @IsOptional()\n    @IsString()\n    auth_session?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthorizeService.html":{"url":"injectables/AuthorizeService.html","title":"injectable - AuthorizeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthorizeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authorizationChallengeEndpoint\n                            \n                            \n                                authzMetadata\n                            \n                            \n                                getAuthorizationServer\n                            \n                            \n                                    Async\n                                parseChallengeRequest\n                            \n                            \n                                    Private\n                                    Async\n                                sendAuthorizationCode\n                            \n                            \n                                    Async\n                                sendAuthorizationResponse\n                            \n                            \n                                    Async\n                                setAuthCode\n                            \n                            \n                                    Async\n                                validateTokenRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, oid4vpService: Oid4vpService, sessionService: SessionService, credentialsService: CredentialsService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/authorize/authorize.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oid4vpService\n                                                  \n                                                        \n                                                                        Oid4vpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialsService\n                                                  \n                                                        \n                                                                        CredentialsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(res: Response>, body: AuthorizeQueries, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:181\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \nauthzMetadata(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         AuthorizationServerMetadata\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAuthorizationServer\n                        \n                    \n                \n            \n            \n                \ngetAuthorizationServer(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Oauth2AuthorizationServer\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        parseChallengeRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseChallengeRequest(body: AuthorizeQueries, tenantId: string, webhook?: WebhookConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:163\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                webhook\n                                            \n                                                            WebhookConfig\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        sendAuthorizationCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationCode(res: Response, issuer_state: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:222\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendAuthorizationResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationResponse(queries: AuthorizeQueries, res: Response>, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setAuthCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAuthCode(issuer_state: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:236\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateTokenRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateTokenRequest(body: any, req: Request, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\nimport { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n} from '@openid4vc/oauth2';\nimport type { Request, Response } from 'express';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { getHeadersFromRequest } from '../oid4vci/util';\nimport { AuthorizeQueries } from './dto/authorize-request.dto';\nimport { Oid4vpService } from '../../verifier/oid4vp/oid4vp.service';\nimport { SessionService } from '../../session/session.service';\nimport { CredentialsService } from '../credentials/credentials.service';\nimport { WebhookConfig } from '../../utils/webhook.dto';\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private credentialsService: CredentialsService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(tenantId: string): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow('PUBLIC_URL') +\n            `/${tenantId}`;\n        return this.getAuthorizationServer(\n            tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: ['ES256'],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n        tenantId: string,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        'request_uri not found or not provided in the request',\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                'request_uri not found or not provided in the request',\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!, tenantId);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        tenantId: string,\n    ): Promise {\n        const url = `${this.configService.getOrThrow('PUBLIC_URL')}${req.url}`;\n\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        const session = await this.sessionService.getBy({\n            authorization_code: body.code,\n            tenantId,\n        });\n\n        if (!session) {\n            throw new ConflictException('Authorization code not found');\n        }\n        const authorizationServerMetadata = this.authzMetadata(tenantId);\n        //TODO: handle response\n        const { dpop } = await this.getAuthorizationServer(\n            tenantId,\n        ).verifyAuthorizationCodeAccessTokenRequest({\n            grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n            accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n            expectedCode: session.authorization_code as string,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n            dpop: {\n                required: true,\n                allowedSigningAlgs:\n                    authorizationServerMetadata.dpop_signing_alg_values_supported,\n                jwt: parsedAccessTokenRequest.dpop?.jwt,\n            },\n            authorizationServerMetadata,\n        });\n\n        const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow('PUBLIC_URL')}/${tenantId}`,\n            signer: {\n                method: 'jwk',\n                alg: 'ES256',\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    'jwk',\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            cNonce,\n            cNonceExpiresIn: 100,\n            clientId: 'wallet', // must be same as the client attestation\n            dpop,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest('pid', { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: 'insufficient_authorization',\n            auth_session,\n            presentation,\n            error_description:\n                'Presentation of credential required before issuance',\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        tenantId: string,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n            //check if session has valid presentation, we assume for now\n            await this.sendAuthorizationCode(res, body.auth_session, tenantId);\n            return;\n        }\n\n        const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        }\n        const ids = session.offer!.credential_configuration_ids;\n        const config = await this.credentialsService.getConfigById(\n            ids[0],\n            tenantId,\n        );\n        if (config.presentation_during_issuance) {\n            const webhook = config.presentation_during_issuance.webhook;\n            const response = await this.parseChallengeRequest(\n                body,\n                tenantId,\n                webhook,\n            );\n            res.status(400).send(response);\n        } else {\n            await this.sendAuthorizationCode(res, body.issuer_state!, tenantId);\n        }\n    }\n\n    private async sendAuthorizationCode(\n        res: Response,\n        issuer_state: string,\n        tenantId: string,\n    ) {\n        const authorization_code = await this.setAuthCode(\n            issuer_state,\n            tenantId,\n        );\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string, tenantId: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, tenantId, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Client.html":{"url":"interfaces/Client.html","title":"interface - Client","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Client\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            secret\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { existsSync, mkdirSync, writeFileSync } from 'fs';\nimport { join } from 'path';\nimport { TENANT_EVENTS } from './tenant-events';\n\n// Client interface for service integration\nexport interface Client {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class ClientService implements OnApplicationBootstrap {\n    private clients: Client[] | null = null;\n\n    constructor(\n        private configService: ConfigService,\n        private eventEmitter: EventEmitter2,\n    ) {}\n\n    onApplicationBootstrap() {\n        // were are ignoring clients that are not used anymore for now. Need to implement a proper cleanup mechanism later\n        const clients = this.getClients();\n        clients.forEach((client) => {\n            this.setUpClient(client.id);\n        });\n    }\n\n    /**\n     * Get clients from configuration\n     * @returns\n     */\n    private getClients(): Client[] {\n        if (!this.clients) {\n            this.clients = this.loadClients();\n        }\n        return this.clients;\n    }\n\n    /**\n     * Load clients from configuration\n     */\n    private loadClients(): Client[] {\n        // Default clients for development/testing\n        return [\n            {\n                id: this.configService.getOrThrow('AUTH_CLIENT_ID'),\n                secret: this.configService.getOrThrow(\n                    'AUTH_CLIENT_SECRET',\n                ),\n            },\n        ];\n    }\n\n    /**\n     * Validate client credentials (OAuth2 Client Credentials flow)\n     * This is the primary authentication method for service integration\n     */\n    validateClient(clientId: string, clientSecret: string): Client | null {\n        const client = this.getClients().find((c) => c.id === clientId);\n\n        if (!client || client.secret !== clientSecret) {\n            return null;\n        }\n\n        return client;\n    }\n\n    /**\n     * Find client by ID\n     */\n    findClientById(clientId: string): Client | null {\n        return this.getClients().find((c) => c.id === clientId) || null;\n    }\n\n    /**\n     * Sends an event to set up a client, allowing all other services to listen and react accordingly.\n     * @param id\n     */\n    setUpClient(id: string) {\n        const folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            id,\n        );\n        if (!existsSync(folder)) {\n            mkdirSync(folder, { recursive: true });\n        }\n\n        const displayInfo = [\n            {\n                name: 'EUDI Wallet dev',\n                locale: 'de-DE',\n                logo: {\n                    uri: '/issuer.png',\n                    url: '/issuer.png',\n                },\n            },\n        ];\n        writeFileSync(\n            join(folder, 'display.json'),\n            JSON.stringify(displayInfo, null, 2),\n        );\n\n        this.eventEmitter.emit(TENANT_EVENTS.TENANT_INIT, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Client-1.html":{"url":"interfaces/Client-1.html","title":"interface - Client-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Client\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            buildUrl\n                                        \n                                \n                                \n                                        \n                                            connect\n                                        \n                                \n                                \n                                        \n                                            delete\n                                        \n                                \n                                \n                                        \n                                            get\n                                        \n                                \n                                \n                                        \n                                            getConfig\n                                        \n                                \n                                \n                                        \n                                            head\n                                        \n                                \n                                \n                                        \n                                            options\n                                        \n                                \n                                \n                                        \n                                            patch\n                                        \n                                \n                                \n                                        \n                                            post\n                                        \n                                \n                                \n                                        \n                                            put\n                                        \n                                \n                                \n                                        \n                                            request\n                                        \n                                \n                                \n                                        \n                                            setConfig\n                                        \n                                \n                                \n                                        \n                                            trace\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        buildUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        buildUrl:         BuildUrlFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BuildUrlFn\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Returns the final request URL.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        connect\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        connect:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delete:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        get\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        get:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getConfig\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getConfig:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        head\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        head:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        patch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        patch:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        post\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        post:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        put\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        put:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        request\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        request:         RequestFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RequestFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        setConfig\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        setConfig:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trace\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        trace:         MethodFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MethodFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import type { Auth, AuthToken } from './auth';\nimport type {\n    BodySerializer,\n    QuerySerializer,\n    QuerySerializerOptions,\n} from './bodySerializer';\n\nexport interface Client {\n    /**\n     * Returns the final request URL.\n     */\n    buildUrl: BuildUrlFn;\n    connect: MethodFn;\n    delete: MethodFn;\n    get: MethodFn;\n    getConfig: () => Config;\n    head: MethodFn;\n    options: MethodFn;\n    patch: MethodFn;\n    post: MethodFn;\n    put: MethodFn;\n    request: RequestFn;\n    setConfig: (config: Config) => Config;\n    trace: MethodFn;\n}\n\nexport interface Config {\n    /**\n     * Auth token or a function returning auth token. The resolved value will be\n     * added to the request payload as defined by its `security` array.\n     */\n    auth?: ((auth: Auth) => Promise | AuthToken) | AuthToken;\n    /**\n     * A function for serializing request body parameter. By default,\n     * {@link JSON.stringify()} will be used.\n     */\n    bodySerializer?: BodySerializer | null;\n    /**\n     * An object containing any HTTP headers that you want to pre-populate your\n     * `Headers` object with.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/Headers/Headers#init See more}\n     */\n    headers?:\n        | RequestInit['headers']\n        | Record;\n    /**\n     * The request method.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#method See more}\n     */\n    method?:\n        | 'CONNECT'\n        | 'DELETE'\n        | 'GET'\n        | 'HEAD'\n        | 'OPTIONS'\n        | 'PATCH'\n        | 'POST'\n        | 'PUT'\n        | 'TRACE';\n    /**\n     * A function for serializing request query parameters. By default, arrays\n     * will be exploded in form style, objects will be exploded in deepObject\n     * style, and reserved characters are percent-encoded.\n     *\n     * This method will have no effect if the native `paramsSerializer()` Axios\n     * API function is used.\n     *\n     * {@link https://swagger.io/docs/specification/serialization/#query View examples}\n     */\n    querySerializer?: QuerySerializer | QuerySerializerOptions;\n    /**\n     * A function validating request data. This is useful if you want to ensure\n     * the request conforms to the desired shape, so it can be safely sent to\n     * the server.\n     */\n    requestValidator?: (data: unknown) => Promise;\n    /**\n     * A function transforming response data before it's returned. This is useful\n     * for post-processing data, e.g. converting ISO strings into Date objects.\n     */\n    responseTransformer?: (data: unknown) => Promise;\n    /**\n     * A function validating response data. This is useful if you want to ensure\n     * the response conforms to the desired shape, so it can be safely passed to\n     * the transformers and returned to the user.\n     */\n    responseValidator?: (data: unknown) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClientCredentialsDto.html":{"url":"classes/ClientCredentialsDto.html","title":"class - ClientCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClientCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/client-credentials.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                client_id\n                            \n                            \n                                    \n                                client_secret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_secret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class ClientCredentialsDto {\n    @IsString()\n    client_id: string;\n    @IsString()\n    client_secret: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ClientOptions.html":{"url":"interfaces/ClientOptions.html","title":"interface - ClientOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ClientOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            baseUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            responseStyle\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            throwOnError\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        baseUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        responseStyle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        responseStyle:         ResponseStyle\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ResponseStyle\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        throwOnError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        throwOnError:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import type { Auth } from '../core/auth';\nimport type { Client as CoreClient, Config as CoreConfig } from '../core/types';\nimport type { Middleware } from './utils';\n\nexport type ResponseStyle = 'data' | 'fields';\n\nexport interface Config\n    extends Omit,\n        CoreConfig {\n    /**\n     * Base URL for all requests made by this client.\n     */\n    baseUrl?: T['baseUrl'];\n    /**\n     * Fetch API implementation. You can use this option to provide a custom\n     * fetch instance.\n     *\n     * @default globalThis.fetch\n     */\n    fetch?: (request: Request) => ReturnType;\n    /**\n     * Please don't use the Fetch client for Next.js applications. The `next`\n     * options won't have any effect.\n     *\n     * Install {@link https://www.npmjs.com/package/@hey-api/client-next `@hey-api/client-next`} instead.\n     */\n    next?: never;\n    /**\n     * Return the response data parsed in a specified format. By default, `auto`\n     * will infer the appropriate method from the `Content-Type` response header.\n     * You can override this behavior with any of the {@link Body} methods.\n     * Select `stream` if you don't want to parse response data at all.\n     *\n     * @default 'auto'\n     */\n    parseAs?:\n        | 'arrayBuffer'\n        | 'auto'\n        | 'blob'\n        | 'formData'\n        | 'json'\n        | 'stream'\n        | 'text';\n    /**\n     * Should we return only data or multiple fields (data, error, response, etc.)?\n     *\n     * @default 'fields'\n     */\n    responseStyle?: ResponseStyle;\n    /**\n     * Throw an error instead of returning it in the response?\n     *\n     * @default false\n     */\n    throwOnError?: T['throwOnError'];\n}\n\nexport interface RequestOptions extends Config {\n    /**\n     * Any body that you want to add to your request.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#body}\n     */\n    body?: unknown;\n    path?: Record;\n    query?: Record;\n    /**\n     * Security mechanism(s) to use for the request.\n     */\n    security?: ReadonlyArray;\n    url: Url;\n}\n\nexport type RequestResult = ThrowOnError extends true\n    ? Promise\n                  ? TData[keyof TData]\n                  : TData\n              : {\n                    data: TData extends Record\n                        ? TData[keyof TData]\n                        : TData;\n                    request: Request;\n                    response: Response;\n                }\n      >\n    : Promise\n                          ? TData[keyof TData]\n                          : TData)\n                    | undefined\n              : (\n                    | {\n                          data: TData extends Record\n                              ? TData[keyof TData]\n                              : TData;\n                          error: undefined;\n                      }\n                    | {\n                          data: undefined;\n                          error: TError extends Record\n                              ? TError[keyof TError]\n                              : TError;\n                      }\n                ) & {\n                    request: Request;\n                    response: Response;\n                }\n      >;\n\nexport interface ClientOptions {\n    baseUrl?: string;\n    responseStyle?: ResponseStyle;\n    throwOnError?: boolean;\n}\n\ntype MethodFn = (\n    options: Omit, 'method'>,\n) => RequestResult;\n\ntype RequestFn = (\n    options: Omit, 'method'> &\n        Pick>, 'method'>,\n) => RequestResult;\n\ntype BuildUrlFn = ;\n        query?: Record;\n        url: string;\n    },\n>(\n    options: Pick & Options,\n) => string;\n\nexport type Client = CoreClient & {\n    interceptors: Middleware;\n};\n\n/**\n * The `createClientConfig()` function will be called on client initialization\n * and the returned object will become the client's initial configuration.\n *\n * You may want to initialize your client this way instead of calling\n * `setConfig()`. This is useful for example if you're using Next.js\n * to ensure your client always has the correct values.\n */\nexport type CreateClientConfig = (\n    override?: Config,\n) => Config & T>;\n\nexport interface TDataShape {\n    body?: unknown;\n    headers?: unknown;\n    path?: unknown;\n    query?: unknown;\n    url: string;\n}\n\ntype OmitKeys = Pick>;\n\nexport type Options = OmitKeys,\n    'body' | 'path' | 'query' | 'url'\n> &\n    Omit;\n\nexport type OptionsLegacyParser = TData extends { body?: any }\n    ? TData extends { headers?: any }\n        ? OmitKeys,\n              'body' | 'headers' | 'url'\n          > &\n              TData\n        : OmitKeys,\n              'body' | 'url'\n          > &\n              TData &\n              Pick, 'headers'>\n    : TData extends { headers?: any }\n      ? OmitKeys,\n            'headers' | 'url'\n        > &\n            TData &\n            Pick, 'body'>\n      : OmitKeys, 'url'> & TData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClientService.html":{"url":"injectables/ClientService.html","title":"injectable - ClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clients\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findClientById\n                            \n                            \n                                    Private\n                                getClients\n                            \n                            \n                                    Private\n                                loadClients\n                            \n                            \n                                onApplicationBootstrap\n                            \n                            \n                                setUpClient\n                            \n                            \n                                validateClient\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/auth/client.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findClientById\n                        \n                    \n                \n            \n            \n                \nfindClientById(clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Find client by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Client | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getClients\n                        \n                    \n                \n            \n            \n                \n                        \n                    getClients()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:35\n                        \n                    \n\n\n            \n                \n                        Get clients from configuration\n\n\n                        \n                            Returns :         Client[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadClients\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadClients()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Load clients from configuration\n\n\n                        \n                            Returns :         Client[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \nonApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setUpClient\n                        \n                    \n                \n            \n            \n                \nsetUpClient(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Sends an event to set up a client, allowing all other services to listen and react accordingly.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateClient\n                        \n                    \n                \n            \n            \n                \nvalidateClient(clientId: string, clientSecret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Validate client credentials (OAuth2 Client Credentials flow)\nThis is the primary authentication method for service integration\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSecret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Client | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        clients\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Client[] | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/auth/client.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { existsSync, mkdirSync, writeFileSync } from 'fs';\nimport { join } from 'path';\nimport { TENANT_EVENTS } from './tenant-events';\n\n// Client interface for service integration\nexport interface Client {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class ClientService implements OnApplicationBootstrap {\n    private clients: Client[] | null = null;\n\n    constructor(\n        private configService: ConfigService,\n        private eventEmitter: EventEmitter2,\n    ) {}\n\n    onApplicationBootstrap() {\n        // were are ignoring clients that are not used anymore for now. Need to implement a proper cleanup mechanism later\n        const clients = this.getClients();\n        clients.forEach((client) => {\n            this.setUpClient(client.id);\n        });\n    }\n\n    /**\n     * Get clients from configuration\n     * @returns\n     */\n    private getClients(): Client[] {\n        if (!this.clients) {\n            this.clients = this.loadClients();\n        }\n        return this.clients;\n    }\n\n    /**\n     * Load clients from configuration\n     */\n    private loadClients(): Client[] {\n        // Default clients for development/testing\n        return [\n            {\n                id: this.configService.getOrThrow('AUTH_CLIENT_ID'),\n                secret: this.configService.getOrThrow(\n                    'AUTH_CLIENT_SECRET',\n                ),\n            },\n        ];\n    }\n\n    /**\n     * Validate client credentials (OAuth2 Client Credentials flow)\n     * This is the primary authentication method for service integration\n     */\n    validateClient(clientId: string, clientSecret: string): Client | null {\n        const client = this.getClients().find((c) => c.id === clientId);\n\n        if (!client || client.secret !== clientSecret) {\n            return null;\n        }\n\n        return client;\n    }\n\n    /**\n     * Find client by ID\n     */\n    findClientById(clientId: string): Client | null {\n        return this.getClients().find((c) => c.id === clientId) || null;\n    }\n\n    /**\n     * Sends an event to set up a client, allowing all other services to listen and react accordingly.\n     * @param id\n     */\n    setUpClient(id: string) {\n        const folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            id,\n        );\n        if (!existsSync(folder)) {\n            mkdirSync(folder, { recursive: true });\n        }\n\n        const displayInfo = [\n            {\n                name: 'EUDI Wallet dev',\n                locale: 'de-DE',\n                logo: {\n                    uri: '/issuer.png',\n                    url: '/issuer.png',\n                },\n            },\n        ];\n        writeFileSync(\n            join(folder, 'display.json'),\n            JSON.stringify(displayInfo, null, 2),\n        );\n\n        this.eventEmitter.emit(TENANT_EVENTS.TENANT_INIT, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Config.html":{"url":"interfaces/Config.html","title":"interface - Config","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Config\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Omit\n                            CoreConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            baseUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fetch\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            next\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            parseAs\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            responseStyle\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            throwOnError\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        baseUrl:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Base URL for all requests made by this client.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fetch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fetch:         function\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : globalThis.fetch\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Fetch API implementation. You can use this option to provide a custom\nfetch instance.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        next\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        next:     never\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     never\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Please don't use the Fetch client for Next.js applications. The next\noptions won't have any effect.\nInstall @hey-api/client-next instead.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parseAs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        parseAs:     \"arrayBuffer\" | \"auto\" | \"blob\" | \"formData\" | \"json\" | \"stream\" | \"text\"\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : 'auto'\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :     \"arrayBuffer\" | \"auto\" | \"blob\" | \"formData\" | \"json\" | \"stream\" | \"text\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Return the response data parsed in a specified format. By default, auto\nwill infer the appropriate method from the Content-Type response header.\nYou can override this behavior with any of the Body methods.\nSelect stream if you don't want to parse response data at all.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        responseStyle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        responseStyle:         ResponseStyle\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : 'fields'\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         ResponseStyle\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Should we return only data or multiple fields (data, error, response, etc.)?\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        throwOnError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        throwOnError:     T\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : false\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Throw an error instead of returning it in the response?\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import type { Auth } from '../core/auth';\nimport type { Client as CoreClient, Config as CoreConfig } from '../core/types';\nimport type { Middleware } from './utils';\n\nexport type ResponseStyle = 'data' | 'fields';\n\nexport interface Config\n    extends Omit,\n        CoreConfig {\n    /**\n     * Base URL for all requests made by this client.\n     */\n    baseUrl?: T['baseUrl'];\n    /**\n     * Fetch API implementation. You can use this option to provide a custom\n     * fetch instance.\n     *\n     * @default globalThis.fetch\n     */\n    fetch?: (request: Request) => ReturnType;\n    /**\n     * Please don't use the Fetch client for Next.js applications. The `next`\n     * options won't have any effect.\n     *\n     * Install {@link https://www.npmjs.com/package/@hey-api/client-next `@hey-api/client-next`} instead.\n     */\n    next?: never;\n    /**\n     * Return the response data parsed in a specified format. By default, `auto`\n     * will infer the appropriate method from the `Content-Type` response header.\n     * You can override this behavior with any of the {@link Body} methods.\n     * Select `stream` if you don't want to parse response data at all.\n     *\n     * @default 'auto'\n     */\n    parseAs?:\n        | 'arrayBuffer'\n        | 'auto'\n        | 'blob'\n        | 'formData'\n        | 'json'\n        | 'stream'\n        | 'text';\n    /**\n     * Should we return only data or multiple fields (data, error, response, etc.)?\n     *\n     * @default 'fields'\n     */\n    responseStyle?: ResponseStyle;\n    /**\n     * Throw an error instead of returning it in the response?\n     *\n     * @default false\n     */\n    throwOnError?: T['throwOnError'];\n}\n\nexport interface RequestOptions extends Config {\n    /**\n     * Any body that you want to add to your request.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#body}\n     */\n    body?: unknown;\n    path?: Record;\n    query?: Record;\n    /**\n     * Security mechanism(s) to use for the request.\n     */\n    security?: ReadonlyArray;\n    url: Url;\n}\n\nexport type RequestResult = ThrowOnError extends true\n    ? Promise\n                  ? TData[keyof TData]\n                  : TData\n              : {\n                    data: TData extends Record\n                        ? TData[keyof TData]\n                        : TData;\n                    request: Request;\n                    response: Response;\n                }\n      >\n    : Promise\n                          ? TData[keyof TData]\n                          : TData)\n                    | undefined\n              : (\n                    | {\n                          data: TData extends Record\n                              ? TData[keyof TData]\n                              : TData;\n                          error: undefined;\n                      }\n                    | {\n                          data: undefined;\n                          error: TError extends Record\n                              ? TError[keyof TError]\n                              : TError;\n                      }\n                ) & {\n                    request: Request;\n                    response: Response;\n                }\n      >;\n\nexport interface ClientOptions {\n    baseUrl?: string;\n    responseStyle?: ResponseStyle;\n    throwOnError?: boolean;\n}\n\ntype MethodFn = (\n    options: Omit, 'method'>,\n) => RequestResult;\n\ntype RequestFn = (\n    options: Omit, 'method'> &\n        Pick>, 'method'>,\n) => RequestResult;\n\ntype BuildUrlFn = ;\n        query?: Record;\n        url: string;\n    },\n>(\n    options: Pick & Options,\n) => string;\n\nexport type Client = CoreClient & {\n    interceptors: Middleware;\n};\n\n/**\n * The `createClientConfig()` function will be called on client initialization\n * and the returned object will become the client's initial configuration.\n *\n * You may want to initialize your client this way instead of calling\n * `setConfig()`. This is useful for example if you're using Next.js\n * to ensure your client always has the correct values.\n */\nexport type CreateClientConfig = (\n    override?: Config,\n) => Config & T>;\n\nexport interface TDataShape {\n    body?: unknown;\n    headers?: unknown;\n    path?: unknown;\n    query?: unknown;\n    url: string;\n}\n\ntype OmitKeys = Pick>;\n\nexport type Options = OmitKeys,\n    'body' | 'path' | 'query' | 'url'\n> &\n    Omit;\n\nexport type OptionsLegacyParser = TData extends { body?: any }\n    ? TData extends { headers?: any }\n        ? OmitKeys,\n              'body' | 'headers' | 'url'\n          > &\n              TData\n        : OmitKeys,\n              'body' | 'url'\n          > &\n              TData &\n              Pick, 'headers'>\n    : TData extends { headers?: any }\n      ? OmitKeys,\n            'headers' | 'url'\n        > &\n            TData &\n            Pick, 'body'>\n      : OmitKeys, 'url'> & TData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Config-1.html":{"url":"interfaces/Config-1.html","title":"interface - Config-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Config\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            auth\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            bodySerializer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            headers\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            method\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            querySerializer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            requestValidator\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            responseTransformer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            responseValidator\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        auth\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        auth:          | AuthToken\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :          | AuthToken\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Auth token or a function returning auth token. The resolved value will be\nadded to the request payload as defined by its security array.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bodySerializer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bodySerializer:         BodySerializer | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BodySerializer | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function for serializing request body parameter. By default,\nJSON.stringify() will be used.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:      | Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :      | Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An object containing any HTTP headers that you want to pre-populate your\nHeaders object with.\nSee more\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:     \"CONNECT\" | \"DELETE\" | \"GET\" | \"HEAD\" | \"OPTIONS\" | \"PATCH\" | \"POST\" | \"PUT\" | \"TRACE\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"CONNECT\" | \"DELETE\" | \"GET\" | \"HEAD\" | \"OPTIONS\" | \"PATCH\" | \"POST\" | \"PUT\" | \"TRACE\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The request method.\nSee more\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        querySerializer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        querySerializer:     QuerySerializer | QuerySerializerOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     QuerySerializer | QuerySerializerOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function for serializing request query parameters. By default, arrays\nwill be exploded in form style, objects will be exploded in deepObject\nstyle, and reserved characters are percent-encoded.\nThis method will have no effect if the native paramsSerializer() Axios\nAPI function is used.\nView examples\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        requestValidator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        requestValidator:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function validating request data. This is useful if you want to ensure\nthe request conforms to the desired shape, so it can be safely sent to\nthe server.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        responseTransformer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        responseTransformer:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function transforming response data before it's returned. This is useful\nfor post-processing data, e.g. converting ISO strings into Date objects.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        responseValidator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        responseValidator:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function validating response data. This is useful if you want to ensure\nthe response conforms to the desired shape, so it can be safely passed to\nthe transformers and returned to the user.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import type { Auth, AuthToken } from './auth';\nimport type {\n    BodySerializer,\n    QuerySerializer,\n    QuerySerializerOptions,\n} from './bodySerializer';\n\nexport interface Client {\n    /**\n     * Returns the final request URL.\n     */\n    buildUrl: BuildUrlFn;\n    connect: MethodFn;\n    delete: MethodFn;\n    get: MethodFn;\n    getConfig: () => Config;\n    head: MethodFn;\n    options: MethodFn;\n    patch: MethodFn;\n    post: MethodFn;\n    put: MethodFn;\n    request: RequestFn;\n    setConfig: (config: Config) => Config;\n    trace: MethodFn;\n}\n\nexport interface Config {\n    /**\n     * Auth token or a function returning auth token. The resolved value will be\n     * added to the request payload as defined by its `security` array.\n     */\n    auth?: ((auth: Auth) => Promise | AuthToken) | AuthToken;\n    /**\n     * A function for serializing request body parameter. By default,\n     * {@link JSON.stringify()} will be used.\n     */\n    bodySerializer?: BodySerializer | null;\n    /**\n     * An object containing any HTTP headers that you want to pre-populate your\n     * `Headers` object with.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/Headers/Headers#init See more}\n     */\n    headers?:\n        | RequestInit['headers']\n        | Record;\n    /**\n     * The request method.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#method See more}\n     */\n    method?:\n        | 'CONNECT'\n        | 'DELETE'\n        | 'GET'\n        | 'HEAD'\n        | 'OPTIONS'\n        | 'PATCH'\n        | 'POST'\n        | 'PUT'\n        | 'TRACE';\n    /**\n     * A function for serializing request query parameters. By default, arrays\n     * will be exploded in form style, objects will be exploded in deepObject\n     * style, and reserved characters are percent-encoded.\n     *\n     * This method will have no effect if the native `paramsSerializer()` Axios\n     * API function is used.\n     *\n     * {@link https://swagger.io/docs/specification/serialization/#query View examples}\n     */\n    querySerializer?: QuerySerializer | QuerySerializerOptions;\n    /**\n     * A function validating request data. This is useful if you want to ensure\n     * the request conforms to the desired shape, so it can be safely sent to\n     * the server.\n     */\n    requestValidator?: (data: unknown) => Promise;\n    /**\n     * A function transforming response data before it's returned. This is useful\n     * for post-processing data, e.g. converting ISO strings into Date objects.\n     */\n    responseTransformer?: (data: unknown) => Promise;\n    /**\n     * A function validating response data. This is useful if you want to ensure\n     * the response conforms to the desired shape, so it can be safely passed to\n     * the transformers and returned to the user.\n     */\n    responseValidator?: (data: unknown) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialIssuerMetadataDto.html":{"url":"classes/CredentialIssuerMetadataDto.html","title":"class - CredentialIssuerMetadataDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialIssuerMetadataDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/credential-issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the metadata for a credential issuer.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_server\n                            \n                            \n                                authorization_servers\n                            \n                            \n                                batch_credential_issuance\n                            \n                            \n                                credential_configurations_supported\n                            \n                            \n                                credential_endpoint\n                            \n                            \n                                credential_issuer\n                            \n                            \n                                display\n                            \n                            \n                                notification_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_server\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:41\n                        \n                    \n\n            \n                \n                    The URL of the preferred authorization server.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_servers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:12\n                        \n                    \n\n            \n                \n                    List of authorization servers that support the credential issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        batch_credential_issuance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:24\n                        \n                    \n\n            \n                \n                    Information about batch credential issuance.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_configurations_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:37\n                        \n                    \n\n            \n                \n                    Object of credentials configurations supported by the issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:16\n                        \n                    \n\n            \n                \n                    The URL of the credential issuance endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:8\n                        \n                    \n\n            \n                \n                    The issuer identifier, typically a URL.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        display\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:33\n                        \n                    \n\n            \n                \n                    Display information for the credentials that are getting issued.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notification_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:20\n                        \n                    \n\n            \n                \n                    The URL of the notification endpoint for credential issuance.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CredentialIssuerMetadataDto {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    credential_issuer: string;\n    /**\n     * List of authorization servers that support the credential issuer.\n     */\n    authorization_servers: string[];\n    /**\n     * The URL of the credential issuance endpoint.\n     */\n    credential_endpoint: string;\n    /**\n     * The URL of the notification endpoint for credential issuance.\n     */\n    notification_endpoint: string;\n    /**\n     * Information about batch credential issuance.\n     */\n    batch_credential_issuance: {\n        /**\n         * Amount of elements in a batch.\n         */\n        batch_size: number;\n    };\n    /**\n     * Display information for the credentials that are getting issued.\n     */\n    display: Array;\n    /**\n     * Object of credentials configurations supported by the issuer.\n     */\n    credential_configurations_supported: any;\n    /**\n     * The URL of the preferred authorization server.\n     */\n    authorization_server: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CredentialsController.html":{"url":"controllers/CredentialsController.html","title":"controller - CredentialsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CredentialsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                credentials/:tenantId\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n            \n                \n                        \n                    schema(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('schema/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        vct\n                        \n                    \n                \n            \n            \n                \n                        \n                    vct(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('vct/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:15\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe identifier of the credential configuration.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from '@nestjs/common';\nimport { CredentialsService } from './credentials.service';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('Credentials')\n@Controller('credentials/:tenantId')\nexport class CredentialsController {\n    constructor(private readonly credentialsService: CredentialsService) {}\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n     * @param id - The identifier of the credential configuration.\n     */\n    @Get('vct/:id')\n    vct(@Param('id') id: string, @Param('tenantId') tenantId: string) {\n        return this.credentialsService.getVCT(id, tenantId);\n    }\n\n    /**\n     * Retrieves the schema for a specific credential\n     * @param id\n     * @returns\n     */\n    @Get('schema/:id')\n    schema(@Param('id') id: string, @Param('tenantId') tenantId: string) {\n        return this.credentialsService.getSchema(id, tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CredentialsService.html":{"url":"injectables/CredentialsService.html","title":"injectable - CredentialsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CredentialsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteCredentialConfiguration\n                            \n                            \n                                    Public\n                                getConfig\n                            \n                            \n                                    Async\n                                getConfigById\n                            \n                            \n                                    Async\n                                getCredential\n                            \n                            \n                                    Async\n                                getCredentialConfiguration\n                            \n                            \n                                    Async\n                                getSchema\n                            \n                            \n                                    Async\n                                getVCT\n                            \n                            \n                                    Async\n                                storeCredentialConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(crpytoService: CryptoService, configService: ConfigService, statusListService: StatusListService, issuanceConfigRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/credentials/credentials.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        crpytoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusListService\n                                                  \n                                                        \n                                                                        StatusListService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        issuanceConfigRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteCredentialConfiguration\n                        \n                    \n                \n            \n            \n                \ndeleteCredentialConfiguration(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:64\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getConfig(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getConfigById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getConfigById(credentialId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredential\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredential(credentialConfigurationId: string, cnf: Jwk, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cnf\n                                            \n                                                        Jwk\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredentialConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredentialConfiguration(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:73\n                        \n                    \n\n\n            \n                \n                        Returns the credential configuration that is required for oid4vci\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSchema\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSchema(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:166\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getVCT\n                        \n                    \n                \n            \n            \n                \n                        \n                    getVCT(credentialId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:145\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        storeCredentialConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeCredentialConfiguration(tenantId: string, value: IssuanceConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:50\n                        \n                    \n\n\n            \n                \n                        Store the config. If it already exist, overwrite it.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            IssuanceConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport type { Jwk } from '@openid4vc/oauth2';\nimport { digest, generateSalt } from '@sd-jwt/crypto-nodejs';\nimport { SDJwtVcInstance } from '@sd-jwt/sd-jwt-vc';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { StatusListService } from '../status-list/status-list.service';\nimport { CredentialConfigurationSupported } from '@openid4vc/openid4vci';\nimport { Session } from '../../session/entities/session.entity';\nimport { SchemaResponse } from './dto/schema-response.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { IssuanceConfig } from './entities/issuance-config.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class CredentialsService {\n    constructor(\n        private crpytoService: CryptoService,\n        private configService: ConfigService,\n        private statusListService: StatusListService,\n        @InjectRepository(IssuanceConfig)\n        private issuanceConfigRepo: Repository,\n    ) {}\n\n    /**\n     *\n     * @param tenantId\n     * @returns\n     */\n    public getConfig(tenantId: string): Promise {\n        return this.issuanceConfigRepo.findBy({ tenantId });\n    }\n\n    async getConfigById(\n        credentialId: string,\n        tenantId: string,\n    ): Promise {\n        return this.issuanceConfigRepo.findOneByOrFail({\n            id: credentialId,\n            tenantId,\n        });\n    }\n\n    /**\n     * Store the config. If it already exist, overwrite it.\n     * @param tenantId\n     * @param value\n     * @returns\n     */\n    async storeCredentialConfiguration(\n        tenantId: string,\n        value: IssuanceConfig,\n    ) {\n        value.tenantId = tenantId;\n        return this.issuanceConfigRepo.save(value);\n    }\n\n    /**\n     * Deletes a credential configuration.\n     * @param tenantId\n     * @param id\n     * @returns\n     */\n    deleteCredentialConfiguration(tenantId: string, id: string) {\n        return this.issuanceConfigRepo.delete({ tenantId, id });\n    }\n\n    /**\n     * Returns the credential configuration that is required for oid4vci\n     * @param tenantId\n     * @returns\n     */\n    async getCredentialConfiguration(\n        tenantId: string,\n    ): Promise> {\n        const credential_configurations_supported: Record = {};\n        (await this.getConfig(tenantId)).forEach((credential) => {\n            credential_configurations_supported[credential.id] =\n                credential.config;\n        });\n        return credential_configurations_supported;\n    }\n\n    async getCredential(\n        credentialConfigurationId: string,\n        cnf: Jwk,\n        session: Session,\n    ) {\n        const vc = await this.getConfigById(\n            credentialConfigurationId,\n            session.tenantId,\n        );\n        const claims =\n            session.credentialPayload?.values?.[credentialConfigurationId] ??\n            vc.claims;\n        const disclosureFrame = vc.disclosureFrame;\n\n        const sdjwt = new SDJwtVcInstance({\n            signer: await this.crpytoService.keyService.signer(\n                session.tenantId,\n            ),\n            signAlg: 'ES256',\n            hasher: digest,\n            hashAlg: 'sha-256',\n            saltGenerator: generateSalt,\n            loadTypeMetadataFormat: true,\n        });\n\n        return sdjwt.issue(\n            {\n                iss: this.configService.getOrThrow('PUBLIC_URL'),\n                iat: Math.round(new Date().getTime() / 1000),\n                vct: `${this.configService.getOrThrow('PUBLIC_URL')}/${session.tenantId}/credentials/vct/${vc.id}`,\n                cnf: {\n                    jwk: cnf,\n                },\n                ...(await this.statusListService.createEntry(\n                    session,\n                    credentialConfigurationId,\n                )),\n                ...claims,\n            },\n            disclosureFrame,\n            {\n                header: {\n                    x5c: this.crpytoService.getCertChain(\n                        'signing',\n                        session.tenantId,\n                    ),\n                    alg: 'ES256',\n                },\n            },\n        );\n    }\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n     * @param credentialId\n     * @param tenantId\n     * @returns\n     */\n    async getVCT(credentialId: string, tenantId: string) {\n        const vc = await this.issuanceConfigRepo.findOneByOrFail({\n            id: credentialId,\n            tenantId,\n        });\n        if (!vc.vct) {\n            throw new ConflictException(\n                `VCT for credential configuration with id ${credentialId} not found`,\n            );\n        }\n        const host = this.configService.getOrThrow('PUBLIC_URL');\n        vc.vct.vct = `${host}/${tenantId}/credentials/vct/${vc.id}`;\n        return vc.vct;\n    }\n\n    /**\n     * Retrieves the schema for a specific credential configuration.\n     * @param id\n     * @param tenantId\n     * @returns\n     */\n    async getSchema(id: string, tenantId: string): Promise {\n        const vc = await this.issuanceConfigRepo.findOneByOrFail({\n            id,\n            tenantId,\n        });\n        if (!vc.schema) {\n            throw new ConflictException(\n                `Schema for credential configuration with id ${id} not found`,\n            );\n        }\n        return vc.schema;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CryptoImplementation.html":{"url":"interfaces/CryptoImplementation.html","title":"interface - CryptoImplementation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CryptoImplementation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto/crypto-implementation.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface to imeplement different algorithms.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            alg\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        generateKeyPair\n                                    \n                                \n                                \n                                    \n                                        getSigner\n                                    \n                                \n                                \n                                    \n                                        getVerifier\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateKeyPair\n                        \n                    \n                \n            \n            \n                \ngenerateKeyPair()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto-implementation.ts:19\n                        \n                    \n\n\n            \n                \n                        Generates a new keypair\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSigner\n                        \n                    \n                \n            \n            \n                \ngetSigner(privateKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto-implementation.ts:24\n                        \n                    \n\n\n            \n                \n                        creates a signer based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                privateKeyJWK\n                                            \n                                                        JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getVerifier\n                        \n                    \n                \n            \n            \n                \ngetVerifier(publicKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto-implementation.ts:29\n                        \n                    \n\n\n            \n                \n                        creates a verifier based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                publicKeyJWK\n                                            \n                                                        JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        alg\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        alg:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type KeyPair = {\n    publicKey: JsonWebKey;\n    privateKey: JsonWebKey;\n};\n\ntype Signer = (data: string) => Promise;\n\ntype Verifier = (data: string, signature: string) => Promise;\n\n/**\n * Generic interface to imeplement different algorithms.\n */\nexport interface CryptoImplementation {\n    //name of the algorithm\n    alg: string;\n    /**\n     * Generates a new keypair\n     */\n    generateKeyPair(): Promise;\n    /**\n     * creates a signer based on the passed key.\n     * @param privateKeyJWK\n     */\n    getSigner(privateKeyJWK: JsonWebKey): Promise;\n    /**\n     * creates a verifier based on the passed key.\n     * @param publicKeyJWK\n     */\n    getVerifier(publicKeyJWK: JsonWebKey): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CryptoModule.html":{"url":"modules/CryptoModule.html","title":"module - CryptoModule","body":"\n                   \n\n\n\n\n    Modules\n    CryptoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_exports\n\n\n\ncluster_CryptoModule_providers\n\n\n\n\nCryptoService \n\nCryptoService \n\n\n\nEncryptionService \n\nEncryptionService \n\n\n\nCryptoModule\n\nCryptoModule\n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/crypto.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CryptoService } from './crypto.service';\nimport { EncryptionService } from './encryption/encryption.service';\n\n@Module({\n    imports: [],\n    providers: [CryptoService, EncryptionService],\n    exports: [CryptoService, EncryptionService],\n})\nexport class CryptoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CryptoService.html":{"url":"injectables/CryptoService.html","title":"injectable - CryptoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CryptoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/crypto.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                folder\n                            \n                            \n                                    \n                                    Public\n                                    Readonly\n                                keyService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCallbackContext\n                            \n                            \n                                getCertChain\n                            \n                            \n                                getHeadersFromRequest\n                            \n                            \n                                getJwks\n                            \n                            \n                                getSignJwtCallback\n                            \n                            \n                                hasCerts\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                    \n                                    Async\n                                onTenantInit\n                            \n                            \n                                    Async\n                                signJwt\n                            \n                            \n                                storeAccessCertificate\n                            \n                            \n                                    Async\n                                verifyJwt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, keyService: KeyService, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/crypto.service.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        keyService\n                                                  \n                                                        \n                                                                        KeyService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getCallbackContext\n                        \n                    \n                \n            \n            \n                \ngetCallbackContext(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:193\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Omit\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCertChain\n                        \n                    \n                \n            \n            \n                \ngetCertChain(type: certificateType, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:144\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            certificateType\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'signing'\n                                            \n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHeadersFromRequest\n                        \n                    \n                \n            \n            \n                \ngetHeadersFromRequest(req: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:268\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     globalThis.Headers\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getJwks\n                        \n                    \n                \n            \n            \n                \ngetJwks(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:282\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSignJwtCallback\n                        \n                    \n                \n            \n            \n                \ngetSignJwtCallback(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:231\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SignJwtCallback\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasCerts\n                        \n                    \n                \n            \n            \n                \nhasCerts(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Checks if there is a signing certificate and access certificate available.\nIf not it will be created.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(TENANT_EVENTS.TENANT_INIT, {async: true})\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signJwt\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJwt(header: any, payload: any, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:166\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                header\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storeAccessCertificate\n                        \n                    \n                \n            \n            \n                \nstoreAccessCertificate(crt: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:159\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                crt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyJwt\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyJwt(compact: string, tenantId: string, payload?: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:174\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                compact\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        folder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/crypto.service.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Readonly\n                        keyService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KeyService\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject('KeyService')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/crypto.service.ts:36\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { createHash, randomBytes, X509Certificate } from 'node:crypto';\nimport {\n    existsSync,\n    mkdirSync,\n    readFileSync,\n    unlinkSync,\n    writeFileSync,\n} from 'node:fs';\nimport { Inject, Injectable, OnModuleInit } from '@nestjs/common';\nimport {\n    type CallbackContext,\n    HashAlgorithm,\n    type Jwk,\n    SignJwtCallback,\n    calculateJwkThumbprint,\n    clientAuthenticationNone,\n} from '@openid4vc/oauth2';\nimport type { Request } from 'express';\nimport { type JWK, importJWK, jwtVerify } from 'jose';\nimport { ConfigService } from '@nestjs/config';\nimport { join } from 'node:path';\nimport { KeyService } from './key/key.service';\nimport { EC_Public } from '../well-known/dto/jwks-response.dto';\nimport { execSync } from 'node:child_process';\nimport { EventEmitter2, OnEvent } from '@nestjs/event-emitter';\nimport { TENANT_EVENTS } from '../auth/tenant-events';\n\ntype certificateType = 'access' | 'signing';\n\n@Injectable()\nexport class CryptoService implements OnModuleInit {\n    folder: string;\n\n    constructor(\n        private readonly configService: ConfigService,\n        @Inject('KeyService') public readonly keyService: KeyService,\n        private readonly eventEmitter: EventEmitter2,\n    ) {}\n    onModuleInit() {\n        this.folder = join(this.configService.getOrThrow('FOLDER'));\n        if (!existsSync(this.folder)) {\n            mkdirSync(this.folder, { recursive: true });\n        }\n    }\n\n    @OnEvent(TENANT_EVENTS.TENANT_INIT, { async: true })\n    async onTenantInit(tenantId: string) {\n        const folder = join(this.folder, tenantId, 'keys');\n        if (!existsSync(folder)) {\n            mkdirSync(folder, { recursive: true });\n        }\n        await this.keyService.init(tenantId);\n        this.hasCerts(tenantId);\n        this.eventEmitter.emit(TENANT_EVENTS.TENANT_KEYS, tenantId);\n    }\n\n    /**\n     * Checks if there is a signing certificate and access certificate available.\n     * If not it will be created.\n     */\n    hasCerts(tenantId: string) {\n        const folder = join(this.folder, tenantId, 'keys');\n        const pubkey = join(folder, 'public-key.pem');\n        const dummyKey = join(folder, 'dummy_key.pem');\n        const dummyCsr = join(folder, 'dummy.csr');\n        const issuerKey = join(folder, 'issuer_key.pem');\n        const issuerCert = join(folder, 'issuer_cert.pem');\n        const certOut = join(folder, 'signing-certificate.pem');\n        const sanExt = join(folder, 'san.ext');\n        if (!existsSync(certOut)) {\n            // === Configurable parameters (you can parameterize these when calling the script) ===\n            const subject = this.configService.getOrThrow('RP_NAME');\n            const uri = this.configService\n                .getOrThrow('PUBLIC_URL')\n                .replace('https://', '');\n\n            // === Helper to run shell commands ===\n            const run = (cmd) => {\n                execSync(cmd, { stdio: 'inherit' });\n            };\n\n            // === Step-by-step ===\n            mkdirSync(this.folder, { recursive: true });\n\n            // Step 1: Create dummy key pair if public key is missing\n            if (!existsSync(dummyKey)) {\n                // Generate private key (PKCS#8)\n                run(\n                    `openssl genpkey -algorithm EC -pkeyopt ec_paramgen_curve:prime256v1 -out \"${dummyKey}\"`,\n                );\n            } else {\n                if (!existsSync(dummyKey)) {\n                    throw new Error(\n                        `Public key exists but ${dummyKey} is missing.`,\n                    );\n                }\n            }\n\n            // Step 2: Generate issuer key\n            run(\n                `openssl genpkey -algorithm EC -pkeyopt ec_paramgen_curve:prime256v1 -out \"${issuerKey}\"`,\n            );\n\n            // Step 3: Create self-signed issuer cert\n            run(\n                `openssl req -x509 -new -key \"${issuerKey}\" -subj \"/CN=${subject}\" -addext \"subjectAltName=DNS:${uri}\" -days 365 -out \"${issuerCert}\"`,\n            );\n\n            // Step 4: Create dummy CSR\n            run(\n                `openssl req -new -key \"${dummyKey}\" -subj \"/CN=${subject}\" -addext \"subjectAltName=DNS:${uri}\" -out \"${dummyCsr}\"`,\n            );\n\n            // Step 5: Create SAN extension file\n            writeFileSync(sanExt, `subjectAltName=DNS:${uri}`);\n\n            // Step 6: Sign certificate using issuer\n            run(\n                `openssl x509 -req -in \"${dummyCsr}\" -force_pubkey \"${pubkey}\" -CA \"${issuerCert}\" -CAkey \"${issuerKey}\" -CAcreateserial -days 365 -extfile \"${sanExt}\" -out \"${certOut}\"`,\n            );\n\n            // Step 7: Clean up\n            [\n                issuerKey,\n                issuerCert,\n                dummyCsr,\n                dummyKey,\n                join(folder, 'issuer_cert.srl'),\n                sanExt,\n            ].forEach((file) => {\n                if (existsSync(file)) unlinkSync(file);\n            });\n        }\n        if (!existsSync(join(folder, 'access-certificate.pem'))) {\n            // Create access certificate from signing certificate\n            const signingCert = readFileSync(\n                join(folder, 'signing-certificate.pem'),\n                'utf-8',\n            );\n            writeFileSync(join(folder, 'access-certificate.pem'), signingCert);\n        }\n    }\n\n    getCertChain(type: certificateType = 'signing', tenantId: string) {\n        const cert = readFileSync(\n            join(this.folder, tenantId, 'keys', `${type}-certificate.pem`),\n            'utf-8',\n        );\n        const crt = new X509Certificate(cert);\n        console.log(crt.subjectAltName);\n\n        const chain = cert\n            .replace('-----BEGIN CERTIFICATE-----', '')\n            .replace('-----END CERTIFICATE-----', '')\n            .replace(/\\r?\\n|\\r/g, '');\n        return [chain];\n    }\n\n    storeAccessCertificate(crt: string, tenantId: string) {\n        writeFileSync(\n            join(this.folder, tenantId, 'keys', `access-certificate.pem`),\n            crt,\n        );\n    }\n\n    async signJwt(\n        header: any,\n        payload: any,\n        tenantId: string,\n    ): Promise {\n        return this.keyService.signJWT(payload, header, tenantId);\n    }\n\n    async verifyJwt(\n        compact: string,\n        tenantId: string,\n        payload?: Record,\n    ): Promise {\n        const publicJwk = await this.keyService.getPublicKey('jwk', tenantId);\n        const publicCryptoKey = await importJWK(publicJwk, 'ES256');\n\n        try {\n            await jwtVerify(compact, publicCryptoKey, {\n                currentDate: payload?.exp\n                    ? new Date((payload.exp - 300) * 1000)\n                    : undefined,\n            });\n            return { verified: true };\n        } catch {\n            return { verified: false };\n        }\n    }\n    getCallbackContext(\n        tenantId: string,\n    ): Omit {\n        return {\n            hash: (data, alg) =>\n                createHash(alg.replace('-', '').toLowerCase())\n                    .update(data)\n                    .digest(),\n            generateRandom: (bytes) => randomBytes(bytes),\n            clientAuthentication: clientAuthenticationNone({\n                clientId: 'some-random',\n            }),\n            //clientId: 'some-random-client-id', // TODO: Replace with your real clientId if necessary\n            signJwt: this.getSignJwtCallback(tenantId),\n            verifyJwt: async (signer, { compact, payload }) => {\n                if (signer.method !== 'jwk') {\n                    throw new Error('Signer method not supported');\n                }\n\n                const josePublicKey = await importJWK(\n                    signer.publicJwk as JWK,\n                    signer.alg,\n                );\n                try {\n                    await jwtVerify(compact, josePublicKey, {\n                        currentDate: payload?.exp\n                            ? new Date((payload.exp - 300) * 1000)\n                            : undefined,\n                    });\n                    return { verified: true, signerJwk: signer.publicJwk };\n                } catch {\n                    return { verified: false };\n                }\n            },\n        };\n    }\n\n    // Helper to generate signJwt callback\n    getSignJwtCallback(tenantId: string): SignJwtCallback {\n        return async (signer, { header, payload }) => {\n            if (signer.method !== 'jwk') {\n                throw new Error('Signer method not supported');\n            }\n            const hashCallback = this.getCallbackContext(tenantId).hash;\n            const jwkThumbprint = await calculateJwkThumbprint({\n                jwk: signer.publicJwk,\n                hashAlgorithm: HashAlgorithm.Sha256,\n                hashCallback,\n            });\n\n            const privateThumbprint = await calculateJwkThumbprint({\n                jwk: (await this.keyService.getPublicKey(\n                    'jwk',\n                    tenantId,\n                )) as Jwk,\n                hashAlgorithm: HashAlgorithm.Sha256,\n                hashCallback,\n            });\n\n            if (jwkThumbprint !== privateThumbprint) {\n                throw new Error(\n                    `No private key available for public jwk \\n${JSON.stringify(signer.publicJwk, null, 2)}`,\n                );\n            }\n\n            const jwt = await this.signJwt(header, payload, tenantId);\n\n            return {\n                jwt,\n                signerJwk: signer.publicJwk,\n            };\n        };\n    }\n\n    // Utility method like in your utils.ts\n    getHeadersFromRequest(req: Request): globalThis.Headers {\n        const headers = new Headers();\n        for (const [key, value] of Object.entries(req.headers)) {\n            if (Array.isArray(value)) {\n                for (const v of value) {\n                    headers.append(key, v);\n                }\n            } else if (value !== undefined) {\n                headers.set(key, value);\n            }\n        }\n        return headers;\n    }\n\n    getJwks(tenantId: string) {\n        return this.keyService.getPublicKey(\n            'jwk',\n            tenantId,\n        ) as Promise;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CryptoService-1.html":{"url":"injectables/CryptoService-1.html","title":"injectable - CryptoService-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CryptoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto/crypto.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAlg\n                            \n                            \n                                getCrypto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configServie: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/crypto/crypto.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configServie\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAlg\n                        \n                    \n                \n            \n            \n                \ngetAlg()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto.service.ts:17\n                        \n                    \n\n\n            \n                \n                        Return the algorithm that is used for the crypto operations like signing.\n\n\n                        \n                            Returns :         CryptoType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCrypto\n                        \n                    \n                \n            \n            \n                \ngetCrypto(alg)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                alg\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    this.configServie.get('CRYPTO_ALG')\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CryptoImplementation\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config';\nimport { ES256 } from '@sd-jwt/crypto-nodejs';\nimport { ED25519 } from './ed25519';\nimport { CryptoImplementation } from './crypto-implementation';\nimport { Injectable } from '@nestjs/common';\n\nexport type CryptoType = 'ES256' | 'Ed25519';\n\n@Injectable()\nexport class CryptoService {\n    constructor(private configServie: ConfigService) {}\n\n    /**\n     * Return the algorithm that is used for the crypto operations like signing.\n     * @returns\n     */\n    getAlg(): CryptoType {\n        return this.configServie.get('CRYPTO_ALG') as CryptoType;\n    }\n\n    getCrypto(\n        alg = this.configServie.get('CRYPTO_ALG'),\n    ): CryptoImplementation {\n        switch (alg) {\n            case 'Ed25519':\n                return ED25519;\n            case 'ES256':\n                return ES256;\n            default:\n                throw new Error(`Unsupported algorithm ${alg}`);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule, TypeOrmModuleOptions } from '@nestjs/typeorm';\nimport { join } from 'path';\nimport * as Joi from 'joi';\n\nexport const DB_VALIDATION_SCHEMA = {\n    DB_TYPE: Joi.string().valid('sqlite', 'postgres').default('sqlite'),\n    DB_HOST: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PORT: Joi.number().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_USERNAME: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PASSWORD: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_DATABASE: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n};\n\n@Module({\n    imports: [\n        TypeOrmModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (\n                configService: ConfigService,\n            ): TypeOrmModuleOptions => {\n                const dbType = configService.get(\n                    'DB_TYPE',\n                );\n\n                const commonOptions = {\n                    synchronize: true,\n                    autoLoadEntities: true,\n                };\n\n                if (dbType === 'postgres') {\n                    return {\n                        type: 'postgres',\n                        host: configService.getOrThrow('DB_HOST'),\n                        port: configService.getOrThrow('DB_PORT'),\n                        username:\n                            configService.getOrThrow('DB_USERNAME'),\n                        password:\n                            configService.getOrThrow('DB_PASSWORD'),\n                        database:\n                            configService.getOrThrow('DB_DATABASE'),\n                        ...commonOptions,\n                    };\n                }\n\n                return {\n                    type: 'sqlite',\n                    database: join(\n                        configService.getOrThrow('FOLDER'),\n                        'service.db',\n                    ),\n                    ...commonOptions,\n                };\n            },\n        }),\n    ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EC_Public.html":{"url":"classes/EC_Public.html","title":"class - EC_Public","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EC_Public\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\nThis class is used to define the structure of EC public keys in JWK format.\n\n            \n\n\n            \n                Implements\n            \n            \n                            JWK_EC_Public\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                crv\n                            \n                            \n                                kty\n                            \n                            \n                                x\n                            \n                            \n                                y\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        crv\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:15\n                        \n                    \n\n            \n                \n                    The algorithm intended for use with the key, such as 'ES256'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        kty\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The key type, which is always 'EC' for Elliptic Curve keys.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        x\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:19\n                        \n                    \n\n            \n                \n                    The x coordinate of the EC public key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        y\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:23\n                        \n                    \n\n            \n                \n                    The y coordinate of the EC public key.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from 'jose';\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: 'EC';\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EncryptionService.html":{"url":"injectables/EncryptionService.html","title":"injectable - EncryptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EncryptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/encryption/encryption.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                privateEncryptionKey\n                            \n                            \n                                    Private\n                                privateEnncryptionPath\n                            \n                            \n                                    Private\n                                publicEncryptionKey\n                            \n                            \n                                    Private\n                                publicEncryptionPath\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decryptJwe\n                            \n                            \n                                getEncryptionPublicKey\n                            \n                            \n                                    Async\n                                init\n                            \n                            \n                                    \n                                    Async\n                                onTenantInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/encryption/encryption.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decryptJwe\n                        \n                    \n                \n            \n            \n                \n                        \n                    decryptJwe(response: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:58\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEncryptionPublicKey\n                        \n                    \n                \n            \n            \n                \ngetEncryptionPublicKey()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     JWK\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(TENANT_EVENTS.TENANT_INIT, {async: true})\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        privateEncryptionKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CryptoKey\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/encryption/encryption.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        privateEnncryptionPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/encryption/encryption.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        publicEncryptionKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JWK\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/encryption/encryption.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        publicEncryptionPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/encryption/encryption.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { existsSync, readFileSync, writeFileSync } from 'fs';\nimport { importJWK, exportJWK, generateKeyPair, jwtDecrypt, JWK } from 'jose';\nimport { join } from 'path';\nimport { TENANT_EVENTS } from '../../auth/tenant-events';\nimport { OnEvent } from '@nestjs/event-emitter';\n\n@Injectable()\nexport class EncryptionService {\n    private privateEncryptionKey: CryptoKey;\n    private publicEncryptionKey: JWK;\n    private privateEnncryptionPath: string;\n    private publicEncryptionPath: string;\n\n    constructor(private configService: ConfigService) {}\n\n    @OnEvent(TENANT_EVENTS.TENANT_INIT, { async: true })\n    async onTenantInit(tenantId: string) {\n        await this.init(tenantId);\n    }\n\n    async init(tenantId: string) {\n        const folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'keys',\n        );\n        this.privateEnncryptionPath = join(folder, 'private-encryption.json');\n        this.publicEncryptionPath = join(folder, 'public-encryption.json');\n        if (!existsSync(this.privateEnncryptionPath)) {\n            await generateKeyPair('ECDH-ES', {\n                crv: 'P-256',\n                extractable: true,\n            }).then(async (secret) => {\n                writeFileSync(\n                    this.privateEnncryptionPath,\n                    JSON.stringify(await exportJWK(secret.privateKey), null, 2),\n                );\n                writeFileSync(\n                    this.publicEncryptionPath,\n                    JSON.stringify(await exportJWK(secret.publicKey), null, 2),\n                );\n            });\n        }\n\n        await importJWK(\n            JSON.parse(readFileSync(this.privateEnncryptionPath, 'utf-8')),\n            'ECDH-ES',\n        ).then((key) => {\n            this.privateEncryptionKey = key as CryptoKey;\n        });\n        this.publicEncryptionKey = JSON.parse(\n            readFileSync(this.publicEncryptionPath, 'utf-8'),\n        ) as JWK;\n    }\n\n    async decryptJwe(response: string): Promise {\n        const res = await jwtDecrypt(response, this.privateEncryptionKey);\n        return res.payload;\n    }\n\n    getEncryptionPublicKey() {\n        return this.publicEncryptionKey;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Fields.html":{"url":"interfaces/Fields.html","title":"interface - Fields","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Fields\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/params.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowExtra\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            args\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowExtra\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowExtra:         Partial>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Partial>\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        args\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        args:         ReadonlyArray\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ReadonlyArray\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type Slot = 'body' | 'headers' | 'path' | 'query';\n\nexport type Field =\n    | {\n          in: Exclude;\n          key: string;\n          map?: string;\n      }\n    | {\n          in: Extract;\n          key?: string;\n          map?: string;\n      };\n\nexport interface Fields {\n    allowExtra?: Partial>;\n    args?: ReadonlyArray;\n}\n\nexport type FieldsConfig = ReadonlyArray;\n\nconst extraPrefixesMap: Record = {\n    $body_: 'body',\n    $headers_: 'headers',\n    $path_: 'path',\n    $query_: 'query',\n};\nconst extraPrefixes = Object.entries(extraPrefixesMap);\n\ntype KeyMap = Map;\n\nconst buildKeyMap = (fields: FieldsConfig, map?: KeyMap): KeyMap => {\n    if (!map) {\n        map = new Map();\n    }\n\n    for (const config of fields) {\n        if ('in' in config) {\n            if (config.key) {\n                map.set(config.key, {\n                    in: config.in,\n                    map: config.map,\n                });\n            }\n        } else if (config.args) {\n            buildKeyMap(config.args, map);\n        }\n    }\n\n    return map;\n};\n\ninterface Params {\n    body: unknown;\n    headers: Record;\n    path: Record;\n    query: Record;\n}\n\nconst stripEmptySlots = (params: Params) => {\n    for (const [slot, value] of Object.entries(params)) {\n        if (value && typeof value === 'object' && !Object.keys(value).length) {\n            delete params[slot as Slot];\n        }\n    }\n};\n\nexport const buildClientParams = (\n    args: ReadonlyArray,\n    fields: FieldsConfig,\n) => {\n    const params: Params = {\n        body: {},\n        headers: {},\n        path: {},\n        query: {},\n    };\n\n    const map = buildKeyMap(fields);\n\n    let config: FieldsConfig[number] | undefined;\n\n    for (const [index, arg] of args.entries()) {\n        if (fields[index]) {\n            config = fields[index];\n        }\n\n        if (!config) {\n            continue;\n        }\n\n        if ('in' in config) {\n            if (config.key) {\n                const field = map.get(config.key)!;\n                const name = field.map || config.key;\n                (params[field.in] as Record)[name] = arg;\n            } else {\n                params.body = arg;\n            }\n        } else {\n            for (const [key, value] of Object.entries(arg ?? {})) {\n                const field = map.get(key);\n\n                if (field) {\n                    const name = field.map || key;\n                    (params[field.in] as Record)[name] = value;\n                } else {\n                    const extra = extraPrefixes.find(([prefix]) =>\n                        key.startsWith(prefix),\n                    );\n\n                    if (extra) {\n                        const [prefix, slot] = extra;\n                        (params[slot] as Record)[\n                            key.slice(prefix.length)\n                        ] = value;\n                    } else {\n                        for (const [slot, allowed] of Object.entries(\n                            config.allowExtra ?? {},\n                        )) {\n                            if (allowed) {\n                                (\n                                    params[slot as Slot] as Record\n                                )[key] = value;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    stripEmptySlots(params);\n\n    return params;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FileSystemKeyService.html":{"url":"injectables/FileSystemKeyService.html","title":"injectable - FileSystemKeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FileSystemKeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/filesystem-key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The key service is responsible for managing the keys of the issuer.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                crypto\n                            \n                            \n                                    Private\n                                privateKeyPath\n                            \n                            \n                                    Private\n                                publicKeyPath\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                getKeys\n                            \n                            \n                                getKid\n                            \n                            \n                                getPublicKey\n                            \n                            \n                                getPublicKey\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                    Async\n                                init\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                signer\n                            \n                            \n                                    Async\n                                signJWT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/filesystem-key.service.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        getKeys\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKeys(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Get the keys from the file system or generate them if they do not exist\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getKid\n                        \n                    \n                \n            \n            \n                \ngetKid(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Get the key id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \ngetPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:131\n                        \n                    \n\n\n            \n                \n                        Get the public key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \ngetPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"pem\" | \"jwk\", tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:133\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"pem\" | \"jwk\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenant: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenant\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signer\n                        \n                    \n                \n            \n            \n                \n                        \n                    signer(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Get the signer for the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JWTPayload, header: JWTHeaderParameters, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWTHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        crypto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CryptoImplementation\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/filesystem-key.service.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        privateKeyPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'private-key.pem'\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/filesystem-key.service.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        publicKeyPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'public-key.pem'\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/filesystem-key.service.ts:32\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { existsSync, mkdirSync, writeFileSync, readFileSync } from 'node:fs';\nimport {\n    JWK,\n    JWTHeaderParameters,\n    JWTPayload,\n    CryptoKey,\n    SignJWT,\n    importJWK,\n    exportPKCS8,\n    exportSPKI,\n    importPKCS8,\n    importSPKI,\n    exportJWK,\n} from 'jose';\nimport { v4 } from 'uuid';\nimport { KeyService } from './key.service';\nimport { Injectable } from '@nestjs/common';\nimport { Signer } from '@sd-jwt/types';\nimport { ConfigService } from '@nestjs/config';\nimport { CryptoImplementation } from './crypto/crypto-implementation';\nimport { CryptoService } from './crypto/crypto.service';\nimport { join } from 'node:path';\n\n/**\n * The key service is responsible for managing the keys of the issuer.\n */\n@Injectable()\nexport class FileSystemKeyService implements KeyService {\n    private crypto: CryptoImplementation;\n\n    private privateKeyPath = 'private-key.pem';\n    private publicKeyPath = 'public-key.pem';\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n    ) {\n        this.crypto = this.cryptoService.getCrypto();\n    }\n\n    async onModuleInit(): Promise {}\n    async init(tenant: string) {\n        // Initialize the key service for a specific tenant\n        // This will create the keys if they do not exist\n        await this.getKeys(tenant);\n    }\n\n    /**\n     * Get the signer for the key service\n     */\n    async signer(tenantId: string): Promise {\n        const keys = await this.getKeys(tenantId);\n        return this.crypto.getSigner(keys.privateKey);\n    }\n\n    /**\n     * Get the keys from the file system or generate them if they do not exist\n     * @returns\n     */\n    private async getKeys(tenantId: string) {\n        let privateKey: JWK;\n        let publicKey: JWK;\n        const folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'keys',\n        );\n        if (!existsSync(folder)) {\n            mkdirSync(folder, { recursive: true });\n        }\n        if (\n            !existsSync(join(folder, this.privateKeyPath)) &&\n            !existsSync(join(folder, this.publicKeyPath))\n        ) {\n            const keys = await this.crypto.generateKeyPair();\n            privateKey = keys.privateKey as JWK;\n            publicKey = keys.publicKey as JWK;\n            //add a random key id for reference\n            publicKey.kid = v4();\n            privateKey.kid = publicKey.kid;\n            privateKey.alg = this.crypto.alg;\n            publicKey.alg = this.crypto.alg;\n            writeFileSync(\n                join(folder, this.privateKeyPath),\n                await exportPKCS8((await importJWK(privateKey)) as CryptoKey),\n            );\n            writeFileSync(\n                join(folder, this.publicKeyPath),\n                await exportSPKI((await importJWK(publicKey)) as CryptoKey),\n            );\n            return { privateKey, publicKey };\n        }\n\n        privateKey = await exportJWK(\n            await importPKCS8(\n                readFileSync(join(folder, this.privateKeyPath), 'utf-8'),\n                this.crypto.alg,\n                {\n                    extractable: true,\n                },\n            ),\n        );\n        //should be stored the cert\n        privateKey.alg = this.crypto.alg;\n        publicKey = await exportJWK(\n            await importSPKI(\n                readFileSync(join(folder, this.publicKeyPath), 'utf-8'),\n                this.crypto.alg,\n            ),\n        );\n        return { privateKey, publicKey };\n    }\n\n    /**\n     * Get the key id\n     * @returns\n     */\n    getKid(tenantId: string): Promise {\n        return this.getKeys(tenantId).then((keys) => {\n            if (keys.publicKey.kid) {\n                return keys.publicKey.kid;\n            }\n            throw new Error('Key id not found');\n        });\n    }\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    getPublicKey(type: 'jwk', tenantId: string): Promise;\n    getPublicKey(type: 'pem', tenantId: string): Promise;\n    async getPublicKey(\n        type: 'pem' | 'jwk',\n        tenantId: string,\n    ): Promise {\n        const keys = await this.getKeys(tenantId);\n        if (type === 'pem') {\n            return exportSPKI(\n                (await importJWK(\n                    keys.publicKey,\n                    this.cryptoService.getAlg(),\n                )) as CryptoKey,\n            );\n        } else {\n            return Promise.resolve(keys.publicKey);\n        }\n    }\n\n    async signJWT(\n        payload: JWTPayload,\n        header: JWTHeaderParameters,\n        tenantId: string,\n    ): Promise {\n        const keys = await this.getKeys(tenantId);\n        const privateKeyInstance = (await importJWK(\n            keys.privateKey,\n        )) as CryptoKey;\n        return new SignJWT(payload)\n            .setProtectedHeader(header)\n            .sign(privateKeyInstance);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GenerateTokenOptions.html":{"url":"interfaces/GenerateTokenOptions.html","title":"interface - GenerateTokenOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GenerateTokenOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            audience\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expiresIn\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            subject\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresIn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresIn:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { SignJWT, jwtVerify, decodeJwt } from 'jose';\nimport { TokenPayload } from './token.decorator';\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject?: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {}\n\n    /**\n     * Generate a JWT token for single-tenant mode\n     */\n    async generateToken(\n        payload: TokenPayload,\n        options: GenerateTokenOptions = {},\n    ): Promise {\n        if (this.isMultiTenant()) {\n            throw new Error(\n                'Token generation is not available in multi-tenant mode. Use Keycloak for token generation.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow('JWT_EXPIRES_IN');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: 'HS256' })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject || payload.sub)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isMultiTenant()) {\n            throw new Error(\n                'Token verification is handled by Keycloak in multi-tenant mode.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: ['HS256'],\n            });\n\n            return payload as TokenPayload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Decode token without verification (for debugging)\n     */\n    decodeToken(token: string): TokenPayload | null {\n        try {\n            return decodeJwt(token) as TokenPayload;\n        } catch {\n            return null;\n        }\n    }\n\n    /**\n     * Check if the service is in multi-tenant mode\n     */\n    isMultiTenant(): boolean {\n        return this.configService.get('OIDC') !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n            \n                Description\n            \n            \n                HealthController is responsible for providing health check endpoints.\nIt uses the HealthCheckService to perform checks on the database connection.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        check\n                        \n                    \n                \n            \n            \n                \n                        \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Endpoint to check the health of the service.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport {\n    HealthCheck,\n    HealthCheckService,\n    TypeOrmHealthIndicator,\n} from '@nestjs/terminus';\n\n/**\n * HealthController is responsible for providing health check endpoints.\n * It uses the HealthCheckService to perform checks on the database connection.\n */\n@Controller('health')\nexport class HealthController {\n    constructor(\n        private health: HealthCheckService,\n        private db: TypeOrmHealthIndicator,\n    ) {}\n\n    /**\n     * Endpoint to check the health of the service.\n     * @returns\n     */\n    @Get()\n    @HealthCheck()\n    check() {\n        return this.health.check([() => this.db.pingCheck('database')]);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HealthController } from './health.controller';\nimport { TerminusModule } from '@nestjs/terminus';\n\n@Module({\n    imports: [TerminusModule],\n    controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Interceptors.html":{"url":"classes/Interceptors.html","title":"class - Interceptors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Interceptors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/utils.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _fns\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clear\n                            \n                            \n                                eject\n                            \n                            \n                                exists\n                            \n                            \n                                getInterceptorIndex\n                            \n                            \n                                update\n                            \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/registrar/generated/client/utils.ts:331\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _fns\n                        \n                    \n                \n            \n                \n                    \n                        Type :     (Interceptor | null)[]\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/generated/client/utils.ts:331\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:337\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eject\n                        \n                    \n                \n            \n            \n                \neject(id: number | Interceptor)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:353\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        number | Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exists\n                        \n                    \n                \n            \n            \n                \nexists(id: number | Interceptor)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:348\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        number | Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInterceptorIndex\n                        \n                    \n                \n            \n            \n                \ngetInterceptorIndex(id: number | Interceptor)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:341\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        number | Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number | Interceptor, fn: Interceptor)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:360\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        number | Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fn\n                                            \n                                                        Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     number | false | Interceptor\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(fn: Interceptor)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/generated/client/utils.ts:370\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fn\n                                            \n                                                        Interceptor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { getAuthToken } from '../core/auth';\nimport type {\n    QuerySerializer,\n    QuerySerializerOptions,\n} from '../core/bodySerializer';\nimport { jsonBodySerializer } from '../core/bodySerializer';\nimport {\n    serializeArrayParam,\n    serializeObjectParam,\n    serializePrimitiveParam,\n} from '../core/pathSerializer';\nimport type { Client, ClientOptions, Config, RequestOptions } from './types';\n\ninterface PathSerializer {\n    path: Record;\n    url: string;\n}\n\nconst PATH_PARAM_RE = /\\{[^{}]+\\}/g;\n\ntype ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\ntype ArraySeparatorStyle = ArrayStyle | MatrixStyle;\n\nconst defaultPathSerializer = ({ path, url: _url }: PathSerializer) => {\n    let url = _url;\n    const matches = _url.match(PATH_PARAM_RE);\n    if (matches) {\n        for (const match of matches) {\n            let explode = false;\n            let name = match.substring(1, match.length - 1);\n            let style: ArraySeparatorStyle = 'simple';\n\n            if (name.endsWith('*')) {\n                explode = true;\n                name = name.substring(0, name.length - 1);\n            }\n\n            if (name.startsWith('.')) {\n                name = name.substring(1);\n                style = 'label';\n            } else if (name.startsWith(';')) {\n                name = name.substring(1);\n                style = 'matrix';\n            }\n\n            const value = path[name];\n\n            if (value === undefined || value === null) {\n                continue;\n            }\n\n            if (Array.isArray(value)) {\n                url = url.replace(\n                    match,\n                    serializeArrayParam({ explode, name, style, value }),\n                );\n                continue;\n            }\n\n            if (typeof value === 'object') {\n                url = url.replace(\n                    match,\n                    serializeObjectParam({\n                        explode,\n                        name,\n                        style,\n                        value: value as Record,\n                        valueOnly: true,\n                    }),\n                );\n                continue;\n            }\n\n            if (style === 'matrix') {\n                url = url.replace(\n                    match,\n                    `;${serializePrimitiveParam({\n                        name,\n                        value: value as string,\n                    })}`,\n                );\n                continue;\n            }\n\n            const replaceValue = encodeURIComponent(\n                style === 'label' ? `.${value as string}` : (value as string),\n            );\n            url = url.replace(match, replaceValue);\n        }\n    }\n    return url;\n};\n\nexport const createQuerySerializer = ({\n    allowReserved,\n    array,\n    object,\n}: QuerySerializerOptions = {}) => {\n    const querySerializer = (queryParams: T) => {\n        const search: string[] = [];\n        if (queryParams && typeof queryParams === 'object') {\n            for (const name in queryParams) {\n                const value = queryParams[name];\n\n                if (value === undefined || value === null) {\n                    continue;\n                }\n\n                if (Array.isArray(value)) {\n                    const serializedArray = serializeArrayParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'form',\n                        value,\n                        ...array,\n                    });\n                    if (serializedArray) search.push(serializedArray);\n                } else if (typeof value === 'object') {\n                    const serializedObject = serializeObjectParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'deepObject',\n                        value: value as Record,\n                        ...object,\n                    });\n                    if (serializedObject) search.push(serializedObject);\n                } else {\n                    const serializedPrimitive = serializePrimitiveParam({\n                        allowReserved,\n                        name,\n                        value: value as string,\n                    });\n                    if (serializedPrimitive) search.push(serializedPrimitive);\n                }\n            }\n        }\n        return search.join('&');\n    };\n    return querySerializer;\n};\n\n/**\n * Infers parseAs value from provided Content-Type header.\n */\nexport const getParseAs = (\n    contentType: string | null,\n): Exclude => {\n    if (!contentType) {\n        // If no Content-Type header is provided, the best we can do is return the raw response body,\n        // which is effectively the same as the 'stream' option.\n        return 'stream';\n    }\n\n    const cleanContent = contentType.split(';')[0]?.trim();\n\n    if (!cleanContent) {\n        return;\n    }\n\n    if (\n        cleanContent.startsWith('application/json') ||\n        cleanContent.endsWith('+json')\n    ) {\n        return 'json';\n    }\n\n    if (cleanContent === 'multipart/form-data') {\n        return 'formData';\n    }\n\n    if (\n        ['application/', 'audio/', 'image/', 'video/'].some((type) =>\n            cleanContent.startsWith(type),\n        )\n    ) {\n        return 'blob';\n    }\n\n    if (cleanContent.startsWith('text/')) {\n        return 'text';\n    }\n\n    return;\n};\n\nexport const setAuthParams = async ({\n    security,\n    ...options\n}: Pick, 'security'> &\n    Pick & {\n        headers: Headers;\n    }) => {\n    for (const auth of security) {\n        const token = await getAuthToken(auth, options.auth);\n\n        if (!token) {\n            continue;\n        }\n\n        const name = auth.name ?? 'Authorization';\n\n        switch (auth.in) {\n            case 'query':\n                if (!options.query) {\n                    options.query = {};\n                }\n                options.query[name] = token;\n                break;\n            case 'cookie':\n                options.headers.append('Cookie', `${name}=${token}`);\n                break;\n            case 'header':\n            default:\n                options.headers.set(name, token);\n                break;\n        }\n\n        return;\n    }\n};\n\nexport const buildUrl: Client['buildUrl'] = (options) => {\n    const url = getUrl({\n        baseUrl: options.baseUrl as string,\n        path: options.path,\n        query: options.query,\n        querySerializer:\n            typeof options.querySerializer === 'function'\n                ? options.querySerializer\n                : createQuerySerializer(options.querySerializer),\n        url: options.url,\n    });\n    return url;\n};\n\nexport const getUrl = ({\n    baseUrl,\n    path,\n    query,\n    querySerializer,\n    url: _url,\n}: {\n    baseUrl?: string;\n    path?: Record;\n    query?: Record;\n    querySerializer: QuerySerializer;\n    url: string;\n}) => {\n    const pathUrl = _url.startsWith('/') ? _url : `/${_url}`;\n    let url = (baseUrl ?? '') + pathUrl;\n    if (path) {\n        url = defaultPathSerializer({ path, url });\n    }\n    let search = query ? querySerializer(query) : '';\n    if (search.startsWith('?')) {\n        search = search.substring(1);\n    }\n    if (search) {\n        url += `?${search}`;\n    }\n    return url;\n};\n\nexport const mergeConfigs = (a: Config, b: Config): Config => {\n    const config = { ...a, ...b };\n    if (config.baseUrl?.endsWith('/')) {\n        config.baseUrl = config.baseUrl.substring(0, config.baseUrl.length - 1);\n    }\n    config.headers = mergeHeaders(a.headers, b.headers);\n    return config;\n};\n\nexport const mergeHeaders = (\n    ...headers: Array['headers'] | undefined>\n): Headers => {\n    const mergedHeaders = new Headers();\n    for (const header of headers) {\n        if (!header || typeof header !== 'object') {\n            continue;\n        }\n\n        const iterator =\n            header instanceof Headers\n                ? header.entries()\n                : Object.entries(header);\n\n        for (const [key, value] of iterator) {\n            if (value === null) {\n                mergedHeaders.delete(key);\n            } else if (Array.isArray(value)) {\n                for (const v of value) {\n                    mergedHeaders.append(key, v as string);\n                }\n            } else if (value !== undefined) {\n                // assume object headers are meant to be JSON stringified, i.e. their\n                // content value in OpenAPI specification is 'application/json'\n                mergedHeaders.set(\n                    key,\n                    typeof value === 'object'\n                        ? JSON.stringify(value)\n                        : (value as string),\n                );\n            }\n        }\n    }\n    return mergedHeaders;\n};\n\ntype ErrInterceptor = (\n    error: Err,\n    response: Res,\n    request: Req,\n    options: Options,\n) => Err | Promise;\n\ntype ReqInterceptor = (\n    request: Req,\n    options: Options,\n) => Req | Promise;\n\ntype ResInterceptor = (\n    response: Res,\n    request: Req,\n    options: Options,\n) => Res | Promise;\n\nclass Interceptors {\n    _fns: (Interceptor | null)[];\n\n    constructor() {\n        this._fns = [];\n    }\n\n    clear() {\n        this._fns = [];\n    }\n\n    getInterceptorIndex(id: number | Interceptor): number {\n        if (typeof id === 'number') {\n            return this._fns[id] ? id : -1;\n        } else {\n            return this._fns.indexOf(id);\n        }\n    }\n    exists(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        return !!this._fns[index];\n    }\n\n    eject(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = null;\n        }\n    }\n\n    update(id: number | Interceptor, fn: Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = fn;\n            return id;\n        } else {\n            return false;\n        }\n    }\n\n    use(fn: Interceptor) {\n        this._fns = [...this._fns, fn];\n        return this._fns.length - 1;\n    }\n}\n\n// `createInterceptors()` response, meant for external use as it does not\n// expose internals\nexport interface Middleware {\n    error: Pick>,\n        'eject' | 'use'\n    >;\n    request: Pick>, 'eject' | 'use'>;\n    response: Pick>,\n        'eject' | 'use'\n    >;\n}\n\n// do not add `Middleware` as return type so we can use _fns internally\nexport const createInterceptors = () => ({\n    error: new Interceptors>(),\n    request: new Interceptors>(),\n    response: new Interceptors>(),\n});\n\nconst defaultQuerySerializer = createQuerySerializer({\n    allowReserved: false,\n    array: {\n        explode: true,\n        style: 'form',\n    },\n    object: {\n        explode: true,\n        style: 'deepObject',\n    },\n});\n\nconst defaultHeaders = {\n    'Content-Type': 'application/json',\n};\n\nexport const createConfig = (\n    override: Config & T> = {},\n): Config & T> => ({\n    ...jsonBodySerializer,\n    headers: defaultHeaders,\n    parseAs: 'auto',\n    querySerializer: defaultQuerySerializer,\n    ...override,\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/IssuanceConfig.html":{"url":"entities/IssuanceConfig.html","title":"entity - IssuanceConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  IssuanceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/issuance-config.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                claims\n                            \n                            \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                disclosureFrame\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                presentation_during_issuance\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/issuance-config.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialConfigurationSupported\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/issuance-config.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/issuance-config.entity.ts:42\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        disclosureFrame\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/issuance-config.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/issuance-config.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        presentation_during_issuance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PresentationDuringIssuance\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/issuance-config.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SchemaResponse\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/issuance-config.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/issuance-config.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         VCT\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/issuance-config.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { CredentialConfigurationSupported } from '@openid4vc/openid4vci';\nimport { IsString, IsOptional, IsObject } from 'class-validator';\nimport { Column, Entity } from 'typeorm';\nimport { VCT, PresentationDuringIssuance } from '../dto/credential-config.dto';\nimport { SchemaResponse } from '../dto/schema-response.dto';\nimport { ApiHideProperty } from '@nestjs/swagger';\n\n@Entity()\nexport class IssuanceConfig {\n    @Column('varchar', { primary: true })\n    @IsString()\n    id: string;\n    @ApiHideProperty()\n    @Column('varchar', { primary: true })\n    tenantId: string;\n    @Column('json')\n    @IsObject()\n    config: CredentialConfigurationSupported;\n    @Column('json')\n    // default values to be used\n    @IsObject()\n    claims: Record;\n    @Column('json')\n    @IsObject()\n    disclosureFrame: Record;\n    @Column('json', { nullable: true })\n    @IsObject()\n    @IsOptional()\n    vct?: VCT;\n    @Column('json', { nullable: true })\n    @IsObject()\n    @IsOptional()\n    presentation_during_issuance?: PresentationDuringIssuance;\n    @Column('json', { nullable: true })\n    @IsObject()\n    @IsOptional()\n    schema?: SchemaResponse;\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @Column({ type: 'date', default: () => 'CURRENT_TIMESTAMP' })\n    createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssuerManagementController.html":{"url":"controllers/IssuerManagementController.html","title":"controller - IssuerManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssuerManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuer-management/issuer-management.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                configuration\n                            \n                            \n                                    \n                                deleteConfiguration\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                            \n                                    \n                                storeConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        configuration\n                        \n                    \n                \n            \n            \n                \n                        \n                    configuration(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuer-management/issuer-management.controller.ts:106\n                        \n                    \n\n\n            \n                \n                        Returns the credential configuration for all supported credentials.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuer-management/issuer-management.controller.ts:132\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(res: Response, body: OfferRequest, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@ApiBody({type: OfferRequest, examples: undefined})@Post('offer')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuer-management/issuer-management.controller.ts:74\n                        \n                    \n\n\n            \n                \n                        Create an offer for a credential. This endpoint may be protected\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            OfferRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storeConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeConfiguration(config: IssuanceConfig, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuer-management/issuer-management.controller.ts:116\n                        \n                    \n\n\n            \n                \n                        Stores a credential configuration. If it already exists, it will be updated.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            IssuanceConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Res,\n    UseGuards,\n} from '@nestjs/common';\nimport { CredentialsService } from '../credentials/credentials.service';\nimport {\n    ApiBody,\n    ApiProduces,\n    ApiResponse,\n    ApiSecurity,\n    ApiTags,\n} from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../../auth/auth.guard';\nimport { Token, TokenPayload } from '../../auth/token.decorator';\nimport { IssuanceConfig } from '../../issuer/credentials/entities/issuance-config.entity';\nimport { Oid4vciService } from '../../issuer/oid4vci/oid4vci.service';\nimport { OfferResponse, OfferRequest } from '../oid4vci/dto/offer-request.dto';\nimport { ResponseType } from '../../verifier/oid4vp/dto/presentation-request.dto';\nimport * as QRCode from 'qrcode';\nimport { Response } from 'express';\n\n@ApiTags('Issuer management', 'Admin')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('bearer')\n@Controller('issuer-management')\nexport class IssuerManagementController {\n    constructor(\n        private readonly credentialsService: CredentialsService,\n        private readonly oid4vciService: Oid4vciService,\n    ) {}\n\n    /**\n     * Create an offer for a credential. This endpoint may be protected\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: 'JSON response',\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            'application/json': { schema: { type: 'object' } },\n            'image/png': { schema: { type: 'string', format: 'binary' } },\n        },\n    })\n    @ApiProduces('application/json', 'image/png')\n    @ApiBody({\n        type: OfferRequest,\n        examples: {\n            qrcode: {\n                summary: 'QR-Code Example',\n                value: {\n                    response_type: ResponseType.QRCode,\n                    credentialConfigurationIds: ['pid'],\n                } as OfferRequest,\n            },\n            uri: {\n                summary: 'URI',\n                value: {\n                    response_type: ResponseType.URI,\n                    credentialConfigurationIds: ['pid'],\n                } as OfferRequest,\n            },\n        },\n    })\n    @Post('offer')\n    async getOffer(\n        @Res() res: Response,\n        @Body() body: OfferRequest,\n        @Token() user: TokenPayload,\n    ) {\n        // For now, we'll just pass the body to the service as before\n        // You can modify the service later to accept user information if needed\n        const values = await this.oid4vciService.createOffer(\n            body,\n            user,\n            user.sub,\n        );\n\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader('Content-Type', 'image/png');\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n\n    /**\n     * Returns the credential configuration for all supported credentials.\n     * @returns\n     */\n    @Get()\n    configuration(@Token() user: TokenPayload) {\n        return this.credentialsService.getConfig(user.sub);\n    }\n\n    /**\n     * Stores a credential configuration. If it already exists, it will be updated.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storeConfiguration(\n        @Body() config: IssuanceConfig,\n        @Token() user: TokenPayload,\n    ) {\n        return this.credentialsService.storeCredentialConfiguration(\n            user.sub,\n            config,\n        );\n    }\n\n    /**\n     * Deletes a credential configuration by its ID.\n     * @param id\n     * @returns\n     */\n    @Delete('/:id')\n    deleteConfiguration(@Param('id') id: string, @Token() user: TokenPayload) {\n        return this.credentialsService.deleteCredentialConfiguration(\n            user.sub,\n            id,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IssuerMetadata.html":{"url":"interfaces/IssuerMetadata.html","title":"interface - IssuerMetadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IssuerMetadata\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/dto/issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the issuer metadata.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            issuer\n                                        \n                                \n                                \n                                        \n                                            jwks\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        issuer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        issuer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The issuer identifier, typically a URL.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwks\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwks:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { JWK } from 'jose';\n\n/**\n * Interface representing the issuer metadata.\n */\nexport interface IssuerMetadata {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    issuer: string;\n    /**\n     * The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n     */\n    jwks: {\n        /**\n         * List of keys in the JWKS.\n         */\n        keys: JWK[];\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IssuerModule.html":{"url":"modules/IssuerModule.html","title":"module - IssuerModule","body":"\n                   \n\n\n\n\n    Modules\n    IssuerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_exports\n\n\n\ncluster_IssuerModule_providers\n\n\n\ncluster_IssuerModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nIssuerModule -->\n\nSessionLoggerInterceptor->IssuerModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nIssuerModule -->\n\nSessionLoggerService->IssuerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/issuer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            CredentialsService\n                        \n                        \n                            Oid4vciService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vciController\n                        \n                        \n                            AuthorizeController\n                        \n                        \n                            CredentialsController\n                        \n                        \n                            IssuerManagementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            Oid4vciService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthorizeService } from './authorize/authorize.service';\nimport { CredentialsService } from './credentials/credentials.service';\nimport { Oid4vciService } from './oid4vci/oid4vci.service';\nimport { Oid4vciController } from './oid4vci/oid4vci.controller';\nimport { AuthorizeController } from './authorize/authorize.controller';\nimport { CryptoModule } from '../crypto/crypto.module';\nimport { StatusListModule } from './status-list/status-list.module';\nimport { CredentialsController } from './credentials/credentials.controller';\nimport * as Joi from 'joi';\nimport { SessionModule } from '../session/session.module';\nimport { IssuerManagementController } from './issuer-management/issuer-management.controller';\nimport { Oid4vpModule } from '../verifier/oid4vp/oid4vp.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { IssuanceConfig } from './credentials/entities/issuance-config.entity';\nimport { SessionLoggerService } from '../utils/session-logger.service';\nimport { SessionLoggerInterceptor } from '../utils/session-logger.interceptor';\n\nexport const ISSUER_VALIDATION_SCHEMA = {\n    PUBLIC_URL: Joi.string(),\n};\n\n@Module({\n    imports: [\n        CryptoModule,\n        StatusListModule,\n        Oid4vpModule,\n        SessionModule,\n        TypeOrmModule.forFeature([IssuanceConfig]),\n    ],\n    controllers: [\n        Oid4vciController,\n        AuthorizeController,\n        CredentialsController,\n        IssuerManagementController,\n    ],\n    providers: [\n        AuthorizeService,\n        CredentialsService,\n        Oid4vciService,\n        SessionLoggerService,\n        SessionLoggerInterceptor,\n    ],\n    exports: [AuthorizeService, Oid4vciService],\n})\nexport class IssuerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwksResponseDto.html":{"url":"classes/JwksResponseDto.html","title":"class - JwksResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwksResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                keys\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    An array of EC public keys in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from 'jose';\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: 'EC';\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.guard.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n    constructor(private reflector: Reflector) {\n        super();\n    }\n\n    canActivate(context: ExecutionContext) {\n        const isPublic = this.reflector.getAllAndOverride(\n            IS_PUBLIC_KEY,\n            [context.getHandler(), context.getClass()],\n        );\n        if (isPublic) {\n            return true;\n        }\n        return super.canActivate(context);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtService.html":{"url":"injectables/JwtService.html","title":"injectable - JwtService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                decodeToken\n                            \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                isMultiTenant\n                            \n                            \n                                    Async\n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        decodeToken\n                        \n                    \n                \n            \n            \n                \ndecodeToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:83\n                        \n                    \n\n\n            \n                \n                        Decode token without verification (for debugging)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         TokenPayload | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(payload: TokenPayload, options: GenerateTokenOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:19\n                        \n                    \n\n\n            \n                \n                        Generate a JWT token for single-tenant mode\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                options\n                                            \n                                                            GenerateTokenOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMultiTenant\n                        \n                    \n                \n            \n            \n                \nisMultiTenant()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Check if the service is in multi-tenant mode\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Verify a JWT token (for additional validation if needed)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { SignJWT, jwtVerify, decodeJwt } from 'jose';\nimport { TokenPayload } from './token.decorator';\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject?: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {}\n\n    /**\n     * Generate a JWT token for single-tenant mode\n     */\n    async generateToken(\n        payload: TokenPayload,\n        options: GenerateTokenOptions = {},\n    ): Promise {\n        if (this.isMultiTenant()) {\n            throw new Error(\n                'Token generation is not available in multi-tenant mode. Use Keycloak for token generation.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow('JWT_EXPIRES_IN');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: 'HS256' })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject || payload.sub)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isMultiTenant()) {\n            throw new Error(\n                'Token verification is handled by Keycloak in multi-tenant mode.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: ['HS256'],\n            });\n\n            return payload as TokenPayload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Decode token without verification (for debugging)\n     */\n    decodeToken(token: string): TokenPayload | null {\n        try {\n            return decodeJwt(token) as TokenPayload;\n        } catch {\n            return null;\n        }\n    }\n\n    /**\n     * Check if the service is in multi-tenant mode\n     */\n    isMultiTenant(): boolean {\n        return this.configService.get('OIDC') !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                getKeycloakConfig\n                            \n                            \n                                    Private\n                                    Static\n                                getSimpleJwtConfig\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getKeycloakConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKeycloakConfig(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { secretOrKeyProvider: any; jwtFromRequest: any; algorithms: {}; issuer: any; audience: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getSimpleJwtConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSimpleJwtConfig(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: TokenPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { passportJwtSecret } from 'jwks-rsa';\nimport { ConfigService } from '@nestjs/config';\nimport { TokenPayload } from './token.decorator';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n    constructor(private configService: ConfigService) {\n        const oidc = configService.get('OIDC');\n\n        super(\n            oidc\n                ? JwtStrategy.getKeycloakConfig(configService)\n                : JwtStrategy.getSimpleJwtConfig(configService),\n        );\n    }\n\n    private static getKeycloakConfig(configService: ConfigService) {\n        //TODO: test it\n        return {\n            secretOrKeyProvider: passportJwtSecret({\n                cache: true,\n                rateLimit: true,\n                jwksRequestsPerMinute: 5,\n                jwksUri: `${configService.get('KEYCLOAK_INTERNAL_ISSUER_URL')}/protocol/openid-connect/certs`,\n                handleSigningKeyError: (err, cb) => {\n                    console.log('Keycloak JWKS error:', err);\n                    if (err instanceof Error) {\n                        return cb(err);\n                    }\n                    return cb(\n                        new Error(\n                            'Could not get the signing key from Keycloak',\n                        ),\n                    );\n                },\n            }),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: ['RS256'],\n            issuer: configService.get('KEYCLOAK_INTERNAL_ISSUER_URL'),\n            audience: configService.get('KEYCLOAK_CLIENT_ID'), // You may want to add this to validation schema\n        };\n    }\n\n    private static getSimpleJwtConfig(configService: ConfigService): any {\n        const config = {\n            secretOrKey: configService.get('JWT_SECRET'),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: ['HS256'], // Using symmetric key for simple JWT\n            ignoreExpiration: false, // Ensure tokens expire\n        };\n\n        // Add issuer validation only if JWT_ISSUER is configured\n        const issuer = configService.get('JWT_ISSUER');\n        if (issuer) {\n            (config as any).issuer = issuer;\n        }\n\n        return config;\n    }\n\n    validate(payload: TokenPayload): unknown {\n        const oidc = this.configService.get('OIDC') !== undefined;\n\n        if (oidc) {\n            // Multi-tenant: Extract user info from Keycloak token\n            return payload;\n        } else {\n            // Single-tenant: Simple JWT validation\n            return payload;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/KeyEntity.html":{"url":"entities/KeyEntity.html","title":"entity - KeyEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  KeyEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/entities/key.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                privateKey\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        privateKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JsonWebKey\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/key.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/key.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\n\n@Entity()\nexport class KeyEntity {\n    @Column('varchar', { primary: true })\n    tenantId: string;\n    @Column('json')\n    privateKey: JsonWebKey;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KeyModule.html":{"url":"modules/KeyModule.html","title":"module - KeyModule","body":"\n                   \n\n\n\n\n    Modules\n    KeyModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/key/key.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.module.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DynamicModule, Global, Module } from '@nestjs/common';\nimport { FileSystemKeyService } from './filesystem-key.service';\nimport { VaultKeyService } from './vault-key.service';\nimport { CryptoModule } from './crypto/crypto.module';\nimport { CryptoService } from './crypto/crypto.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { HttpModule, HttpService } from '@nestjs/axios';\nimport * as Joi from 'joi';\nimport { TypeOrmModule } from '@nestjs/typeorm/dist/typeorm.module';\nimport { KeyEntity } from './entities/key.entity';\n\nexport const KEY_VALIDATION_SCHEMA = {\n    KM_TYPE: Joi.string().valid('file', 'vault').default('file'),\n\n    // Vault-related config\n    VAULT_URL: Joi.string().uri().when('KM_TYPE', {\n        is: 'vault',\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n    VAULT_TOKEN: Joi.string().when('KM_TYPE', {\n        is: 'vault',\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n    VAULT_KEY_ID: Joi.string().when('KM_TYPE', {\n        is: 'vault',\n        then: Joi.string().default('key-id'),\n        otherwise: Joi.optional(),\n    }),\n};\n\n@Global()\n@Module({})\nexport class KeyModule {\n    static forRoot(): DynamicModule {\n        return {\n            module: KeyModule,\n            imports: [\n                HttpModule,\n                ConfigModule,\n                CryptoModule,\n                TypeOrmModule.forFeature([KeyEntity]),\n            ],\n            providers: [\n                {\n                    provide: 'KeyService',\n                    useFactory: (\n                        configService: ConfigService,\n                        httpService: HttpService,\n                        cryptoService: CryptoService,\n                    ) => {\n                        const kmType = configService.get(\n                            'KM_TYPE',\n                        );\n                        if (kmType === 'vault') {\n                            return new VaultKeyService(\n                                httpService,\n                                configService,\n                                cryptoService,\n                            );\n                        }\n\n                        return new FileSystemKeyService(\n                            configService,\n                            cryptoService,\n                        );\n                    },\n                    inject: [ConfigService, HttpService, CryptoService],\n                },\n            ],\n            exports: ['KeyService'],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyService.html":{"url":"classes/KeyService.html","title":"class - KeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface for a key service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                getKid\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                init\n                            \n                            \n                                    Abstract\n                                signer\n                            \n                            \n                                    Abstract\n                                signJWT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getKid\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKid(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:23\n                        \n                    \n\n\n            \n                \n                        Get the key id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Get the public key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"pem\" | \"jwk\", tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"pem\" | \"jwk\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:11\n                        \n                    \n\n\n            \n                \n                        Initialize the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signer\n                        \n                    \n                \n            \n            \n                \n                        \n                    signer(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:17\n                        \n                    \n\n\n            \n                \n                        Get the callback for the signer function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JWTPayload, header: JoseHeaderParameters, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JoseHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Signer } from '@sd-jwt/types';\nimport { JWK, JWTPayload, JoseHeaderParameters } from 'jose';\n\n/**\n * Generic interface for a key service\n */\nexport abstract class KeyService {\n    /**\n     * Initialize the key service\n     */\n    abstract init(tenantId): Promise;\n\n    /**\n     * Get the callback for the signer function\n     * @param tenantId\n     */\n    abstract signer(tenantId: string): Promise;\n\n    /**\n     * Get the key id\n     * @returns\n     */\n    abstract getKid(tenantId: string): Promise;\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    abstract getPublicKey(type: 'jwk', tenantId: string): Promise;\n    abstract getPublicKey(type: 'pem', tenantId: string): Promise;\n    abstract getPublicKey(\n        type: 'pem' | 'jwk',\n        tenantId: string,\n    ): Promise;\n\n    //TODO: this can be handled via the signer callback\n    abstract signJWT(\n        payload: JWTPayload,\n        header: JoseHeaderParameters,\n        tenantId: string,\n    ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Middleware.html":{"url":"interfaces/Middleware.html","title":"interface - Middleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Middleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/utils.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            request\n                                        \n                                \n                                \n                                        \n                                            response\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         Pick> | \"eject\" | \"use\">\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Pick> | \"eject\" | \"use\">\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        request\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        request:         Pick> | \"eject\" | \"use\">\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Pick> | \"eject\" | \"use\">\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        response:         Pick> | \"eject\" | \"use\">\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Pick> | \"eject\" | \"use\">\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { getAuthToken } from '../core/auth';\nimport type {\n    QuerySerializer,\n    QuerySerializerOptions,\n} from '../core/bodySerializer';\nimport { jsonBodySerializer } from '../core/bodySerializer';\nimport {\n    serializeArrayParam,\n    serializeObjectParam,\n    serializePrimitiveParam,\n} from '../core/pathSerializer';\nimport type { Client, ClientOptions, Config, RequestOptions } from './types';\n\ninterface PathSerializer {\n    path: Record;\n    url: string;\n}\n\nconst PATH_PARAM_RE = /\\{[^{}]+\\}/g;\n\ntype ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\ntype ArraySeparatorStyle = ArrayStyle | MatrixStyle;\n\nconst defaultPathSerializer = ({ path, url: _url }: PathSerializer) => {\n    let url = _url;\n    const matches = _url.match(PATH_PARAM_RE);\n    if (matches) {\n        for (const match of matches) {\n            let explode = false;\n            let name = match.substring(1, match.length - 1);\n            let style: ArraySeparatorStyle = 'simple';\n\n            if (name.endsWith('*')) {\n                explode = true;\n                name = name.substring(0, name.length - 1);\n            }\n\n            if (name.startsWith('.')) {\n                name = name.substring(1);\n                style = 'label';\n            } else if (name.startsWith(';')) {\n                name = name.substring(1);\n                style = 'matrix';\n            }\n\n            const value = path[name];\n\n            if (value === undefined || value === null) {\n                continue;\n            }\n\n            if (Array.isArray(value)) {\n                url = url.replace(\n                    match,\n                    serializeArrayParam({ explode, name, style, value }),\n                );\n                continue;\n            }\n\n            if (typeof value === 'object') {\n                url = url.replace(\n                    match,\n                    serializeObjectParam({\n                        explode,\n                        name,\n                        style,\n                        value: value as Record,\n                        valueOnly: true,\n                    }),\n                );\n                continue;\n            }\n\n            if (style === 'matrix') {\n                url = url.replace(\n                    match,\n                    `;${serializePrimitiveParam({\n                        name,\n                        value: value as string,\n                    })}`,\n                );\n                continue;\n            }\n\n            const replaceValue = encodeURIComponent(\n                style === 'label' ? `.${value as string}` : (value as string),\n            );\n            url = url.replace(match, replaceValue);\n        }\n    }\n    return url;\n};\n\nexport const createQuerySerializer = ({\n    allowReserved,\n    array,\n    object,\n}: QuerySerializerOptions = {}) => {\n    const querySerializer = (queryParams: T) => {\n        const search: string[] = [];\n        if (queryParams && typeof queryParams === 'object') {\n            for (const name in queryParams) {\n                const value = queryParams[name];\n\n                if (value === undefined || value === null) {\n                    continue;\n                }\n\n                if (Array.isArray(value)) {\n                    const serializedArray = serializeArrayParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'form',\n                        value,\n                        ...array,\n                    });\n                    if (serializedArray) search.push(serializedArray);\n                } else if (typeof value === 'object') {\n                    const serializedObject = serializeObjectParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'deepObject',\n                        value: value as Record,\n                        ...object,\n                    });\n                    if (serializedObject) search.push(serializedObject);\n                } else {\n                    const serializedPrimitive = serializePrimitiveParam({\n                        allowReserved,\n                        name,\n                        value: value as string,\n                    });\n                    if (serializedPrimitive) search.push(serializedPrimitive);\n                }\n            }\n        }\n        return search.join('&');\n    };\n    return querySerializer;\n};\n\n/**\n * Infers parseAs value from provided Content-Type header.\n */\nexport const getParseAs = (\n    contentType: string | null,\n): Exclude => {\n    if (!contentType) {\n        // If no Content-Type header is provided, the best we can do is return the raw response body,\n        // which is effectively the same as the 'stream' option.\n        return 'stream';\n    }\n\n    const cleanContent = contentType.split(';')[0]?.trim();\n\n    if (!cleanContent) {\n        return;\n    }\n\n    if (\n        cleanContent.startsWith('application/json') ||\n        cleanContent.endsWith('+json')\n    ) {\n        return 'json';\n    }\n\n    if (cleanContent === 'multipart/form-data') {\n        return 'formData';\n    }\n\n    if (\n        ['application/', 'audio/', 'image/', 'video/'].some((type) =>\n            cleanContent.startsWith(type),\n        )\n    ) {\n        return 'blob';\n    }\n\n    if (cleanContent.startsWith('text/')) {\n        return 'text';\n    }\n\n    return;\n};\n\nexport const setAuthParams = async ({\n    security,\n    ...options\n}: Pick, 'security'> &\n    Pick & {\n        headers: Headers;\n    }) => {\n    for (const auth of security) {\n        const token = await getAuthToken(auth, options.auth);\n\n        if (!token) {\n            continue;\n        }\n\n        const name = auth.name ?? 'Authorization';\n\n        switch (auth.in) {\n            case 'query':\n                if (!options.query) {\n                    options.query = {};\n                }\n                options.query[name] = token;\n                break;\n            case 'cookie':\n                options.headers.append('Cookie', `${name}=${token}`);\n                break;\n            case 'header':\n            default:\n                options.headers.set(name, token);\n                break;\n        }\n\n        return;\n    }\n};\n\nexport const buildUrl: Client['buildUrl'] = (options) => {\n    const url = getUrl({\n        baseUrl: options.baseUrl as string,\n        path: options.path,\n        query: options.query,\n        querySerializer:\n            typeof options.querySerializer === 'function'\n                ? options.querySerializer\n                : createQuerySerializer(options.querySerializer),\n        url: options.url,\n    });\n    return url;\n};\n\nexport const getUrl = ({\n    baseUrl,\n    path,\n    query,\n    querySerializer,\n    url: _url,\n}: {\n    baseUrl?: string;\n    path?: Record;\n    query?: Record;\n    querySerializer: QuerySerializer;\n    url: string;\n}) => {\n    const pathUrl = _url.startsWith('/') ? _url : `/${_url}`;\n    let url = (baseUrl ?? '') + pathUrl;\n    if (path) {\n        url = defaultPathSerializer({ path, url });\n    }\n    let search = query ? querySerializer(query) : '';\n    if (search.startsWith('?')) {\n        search = search.substring(1);\n    }\n    if (search) {\n        url += `?${search}`;\n    }\n    return url;\n};\n\nexport const mergeConfigs = (a: Config, b: Config): Config => {\n    const config = { ...a, ...b };\n    if (config.baseUrl?.endsWith('/')) {\n        config.baseUrl = config.baseUrl.substring(0, config.baseUrl.length - 1);\n    }\n    config.headers = mergeHeaders(a.headers, b.headers);\n    return config;\n};\n\nexport const mergeHeaders = (\n    ...headers: Array['headers'] | undefined>\n): Headers => {\n    const mergedHeaders = new Headers();\n    for (const header of headers) {\n        if (!header || typeof header !== 'object') {\n            continue;\n        }\n\n        const iterator =\n            header instanceof Headers\n                ? header.entries()\n                : Object.entries(header);\n\n        for (const [key, value] of iterator) {\n            if (value === null) {\n                mergedHeaders.delete(key);\n            } else if (Array.isArray(value)) {\n                for (const v of value) {\n                    mergedHeaders.append(key, v as string);\n                }\n            } else if (value !== undefined) {\n                // assume object headers are meant to be JSON stringified, i.e. their\n                // content value in OpenAPI specification is 'application/json'\n                mergedHeaders.set(\n                    key,\n                    typeof value === 'object'\n                        ? JSON.stringify(value)\n                        : (value as string),\n                );\n            }\n        }\n    }\n    return mergedHeaders;\n};\n\ntype ErrInterceptor = (\n    error: Err,\n    response: Res,\n    request: Req,\n    options: Options,\n) => Err | Promise;\n\ntype ReqInterceptor = (\n    request: Req,\n    options: Options,\n) => Req | Promise;\n\ntype ResInterceptor = (\n    response: Res,\n    request: Req,\n    options: Options,\n) => Res | Promise;\n\nclass Interceptors {\n    _fns: (Interceptor | null)[];\n\n    constructor() {\n        this._fns = [];\n    }\n\n    clear() {\n        this._fns = [];\n    }\n\n    getInterceptorIndex(id: number | Interceptor): number {\n        if (typeof id === 'number') {\n            return this._fns[id] ? id : -1;\n        } else {\n            return this._fns.indexOf(id);\n        }\n    }\n    exists(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        return !!this._fns[index];\n    }\n\n    eject(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = null;\n        }\n    }\n\n    update(id: number | Interceptor, fn: Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = fn;\n            return id;\n        } else {\n            return false;\n        }\n    }\n\n    use(fn: Interceptor) {\n        this._fns = [...this._fns, fn];\n        return this._fns.length - 1;\n    }\n}\n\n// `createInterceptors()` response, meant for external use as it does not\n// expose internals\nexport interface Middleware {\n    error: Pick>,\n        'eject' | 'use'\n    >;\n    request: Pick>, 'eject' | 'use'>;\n    response: Pick>,\n        'eject' | 'use'\n    >;\n}\n\n// do not add `Middleware` as return type so we can use _fns internally\nexport const createInterceptors = () => ({\n    error: new Interceptors>(),\n    request: new Interceptors>(),\n    response: new Interceptors>(),\n});\n\nconst defaultQuerySerializer = createQuerySerializer({\n    allowReserved: false,\n    array: {\n        explode: true,\n        style: 'form',\n    },\n    object: {\n        explode: true,\n        style: 'deepObject',\n    },\n});\n\nconst defaultHeaders = {\n    'Content-Type': 'application/json',\n};\n\nexport const createConfig = (\n    override: Config & T> = {},\n): Config & T> => ({\n    ...jsonBodySerializer,\n    headers: defaultHeaders,\n    parseAs: 'auto',\n    querySerializer: defaultQuerySerializer,\n    ...override,\n});\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotificationRequestDto.html":{"url":"classes/NotificationRequestDto.html","title":"class - NotificationRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotificationRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/notification-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                event\n                            \n                            \n                                    \n                                notification_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationEvent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(['credential_issued', 'credential_revoked'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notification_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotificationEvent } from '@openid4vc/openid4vci';\nimport { IsEnum, IsString } from 'class-validator';\n\nexport class NotificationRequestDto {\n    @IsString()\n    notification_id: string;\n\n    @IsEnum(['credential_issued', 'credential_revoked'])\n    event: NotificationEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Oauth2AuthorizationServerResponse.html":{"url":"classes/Oauth2AuthorizationServerResponse.html","title":"class - Oauth2AuthorizationServerResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Oauth2AuthorizationServerResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/oauth-authorization-server-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the response from an OAuth2 authorization server.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_challenge_endpoint\n                            \n                            \n                                authorization_endpoint\n                            \n                            \n                                code_challenge_methods_supported\n                            \n                            \n                                dpop_signing_alg_values_supported\n                            \n                            \n                                issuer\n                            \n                            \n                                jwks_uri\n                            \n                            \n                                pushed_authorization_request_endpoint\n                            \n                            \n                                require_pushed_authorization_requests\n                            \n                            \n                                token_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_challenge_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:37\n                        \n                    \n\n            \n                \n                    The URL of the authorization challenge endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:13\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's authorization endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        code_challenge_methods_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:21\n                        \n                    \n\n            \n                \n                    List of supported algorithms to sign the challenge\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dpop_signing_alg_values_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:25\n                        \n                    \n\n            \n                \n                    List of supported algorithms for DPoP signing.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jwks_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:17\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pushed_authorization_request_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    The URL of the pushed authorization request endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        require_pushed_authorization_requests\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:29\n                        \n                    \n\n            \n                \n                    Indicates whether the server requires pushed authorization requests.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's token endpoint.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Oauth2AuthorizationServerResponse {\n    issuer: string;\n    /**\n     * The URL of the OAuth2 authorization server's token endpoint.\n     */\n    token_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's authorization endpoint.\n     */\n    authorization_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n     */\n    jwks_uri: string;\n    /**\n     * List of supported algorithms to sign the challenge\n     */\n    code_challenge_methods_supported: string[];\n    /**\n     * List of supported algorithms for DPoP signing.\n     */\n    dpop_signing_alg_values_supported: string[];\n    /**\n     * Indicates whether the server requires pushed authorization requests.\n     */\n    require_pushed_authorization_requests: boolean;\n    /**\n     * The URL of the pushed authorization request endpoint.\n     */\n    pushed_authorization_request_endpoint: string;\n    /**\n     * The URL of the authorization challenge endpoint.\n     */\n    authorization_challenge_endpoint: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferRequest.html":{"url":"classes/OfferRequest.html","title":"class - OfferRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                credentialConfigurationIds\n                            \n                            \n                                    \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credentialConfigurationIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ArrayNotEmpty()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:27\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'qrcode', description: 'The type of response expected for the offer request.'})@IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:20\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ArrayNotEmpty,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n} from 'class-validator';\nimport { ResponseType } from '../../../verifier/oid4vp/dto/presentation-request.dto';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class OfferRequest {\n    /**\n     * @example \"qrcode\"\n     */\n    @ApiProperty({\n        example: 'qrcode',\n        description: 'The type of response expected for the offer request.',\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * @example [\"pid\"]\n     */\n    @ArrayNotEmpty()\n    @IsString({ each: true })\n    credentialConfigurationIds: string[];\n\n    @IsObject()\n    @IsOptional()\n    values?: { [key: string]: Record };\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferResponse.html":{"url":"classes/OfferResponse.html","title":"class - OfferResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                session\n                            \n                            \n                                uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ArrayNotEmpty,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n} from 'class-validator';\nimport { ResponseType } from '../../../verifier/oid4vp/dto/presentation-request.dto';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class OfferRequest {\n    /**\n     * @example \"qrcode\"\n     */\n    @ApiProperty({\n        example: 'qrcode',\n        description: 'The type of response expected for the offer request.',\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * @example [\"pid\"]\n     */\n    @ArrayNotEmpty()\n    @IsString({ each: true })\n    credentialConfigurationIds: string[];\n\n    @IsObject()\n    @IsOptional()\n    values?: { [key: string]: Record };\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vciController.html":{"url":"controllers/Oid4vciController.html","title":"controller - Oid4vciController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Oid4vciController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/oid4vci.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/vci\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                credential\n                            \n                            \n                                    \n                                    \n                                notifications\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credential\n                        \n                    \n                \n            \n            \n                \n                        \n                    credential(req: Request, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('credential')@SessionLogger('state', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:28\n                        \n                    \n\n\n            \n                \n                        Endpoint to issue credentials\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        notifications\n                        \n                    \n                \n            \n            \n                \n                        \n                    notifications(body: NotificationRequestDto, req: Request, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('notification')@SessionLogger('notification_id', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:42\n                        \n                    \n\n\n            \n                \n                        Notification endpoint\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            NotificationRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Param,\n    Post,\n    Req,\n    UseInterceptors,\n} from '@nestjs/common';\nimport type { CredentialResponse } from '@openid4vc/openid4vci';\nimport type { Request } from 'express';\nimport { Oid4vciService } from '../../issuer/oid4vci/oid4vci.service';\nimport { NotificationRequestDto } from './dto/notification-request.dto';\nimport { SessionLogger } from '../../utils/session-logger.decorator';\nimport { SessionLoggerInterceptor } from '../../utils/session-logger.interceptor';\n\n@Controller(':tenantId/vci')\n@UseInterceptors(SessionLoggerInterceptor)\nexport class Oid4vciController {\n    constructor(private readonly oid4vciService: Oid4vciService) {}\n\n    /**\n     * Endpoint to issue credentials\n     * @param req\n     * @returns\n     */\n    @Post('credential')\n    @SessionLogger('state', 'OID4VCI')\n    credential(\n        @Req() req: Request,\n        @Param('tenantId') tenantId: string,\n    ): Promise {\n        return this.oid4vciService.getCredential(req, tenantId);\n    }\n\n    /**\n     * Notification endpoint\n     * @param body\n     * @returns\n     */\n    @Post('notification')\n    @SessionLogger('notification_id', 'OID4VCI')\n    notifications(\n        @Body() body: NotificationRequestDto,\n        @Req() req: Request,\n        @Param('tenantId') tenantId: string,\n    ) {\n        return this.oid4vciService.handleNotification(req, body, tenantId);\n    }\n\n    //TODO: this endpoint may be relevant for the wallet attestation.\n    /* @Get('session')\n  session() {\n    console.log('Session requested');\n    //TODO store session and created at\n    const session = randomUUID();\n    return {\n      session_id: session,\n    };\n  } */\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Oid4vciService.html":{"url":"injectables/Oid4vciService.html","title":"injectable - Oid4vciService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Oid4vciService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/oid4vci.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                credentialsService\n                            \n                            \n                                    Private\n                                issuer\n                            \n                            \n                                resourceServer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createOffer\n                            \n                            \n                                    Async\n                                getCredential\n                            \n                            \n                                    Async\n                                handleNotification\n                            \n                            \n                                    Async\n                                issuerMetadata\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authzService: AuthorizeService, cryptoService: CryptoService, credentialsService: CredentialsService, configService: ConfigService, sessionService: SessionService, sessionLogger: SessionLoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authzService\n                                                  \n                                                        \n                                                                        AuthorizeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialsService\n                                                  \n                                                        \n                                                                        CredentialsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOffer(body: OfferRequest, user: TokenPayload, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            OfferRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredential\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredential(req: Request, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleNotification(req: Request, body: NotificationRequestDto, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:261\n                        \n                    \n\n\n            \n                \n                        Store the notification in the session based on the notitification id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            NotificationRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        issuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    issuerMetadata(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        credentialsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialsService\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Openid4vciIssuer\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resourceServer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Oauth2ResourceServer\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:39\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    BadRequestException,\n    ConflictException,\n    Injectable,\n    OnModuleInit,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    type HttpMethod,\n    Oauth2ResourceServer,\n    SupportedAuthenticationScheme,\n    authorizationCodeGrantIdentifier,\n} from '@openid4vc/oauth2';\nimport {\n    type CredentialResponse,\n    type IssuerMetadataResult,\n    Openid4vciDraftVersion,\n    Openid4vciIssuer,\n} from '@openid4vc/openid4vci';\nimport type { Request } from 'express';\nimport { CredentialsService } from '../../issuer/credentials/credentials.service';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { AuthorizeService } from '../authorize/authorize.service';\nimport { getHeadersFromRequest } from './util';\nimport { readFileSync } from 'node:fs';\nimport { join } from 'node:path';\nimport { SessionService } from '../../session/session.service';\nimport { v4 } from 'uuid';\nimport { OfferRequest, OfferResponse } from './dto/offer-request.dto';\nimport { NotificationRequestDto } from './dto/notification-request.dto';\nimport { SessionLoggerService } from '../../utils/session-logger.service';\nimport { SessionLogContext } from '../../utils/session-logger-context';\nimport { TokenPayload } from '../../auth/token.decorator';\n\n@Injectable()\nexport class Oid4vciService implements OnModuleInit {\n    private issuer: Openid4vciIssuer;\n\n    resourceServer: Oauth2ResourceServer;\n\n    constructor(\n        private readonly authzService: AuthorizeService,\n        private readonly cryptoService: CryptoService,\n        public readonly credentialsService: CredentialsService,\n        private readonly configService: ConfigService,\n        private readonly sessionService: SessionService,\n        private readonly sessionLogger: SessionLoggerService,\n    ) {}\n    onModuleInit() {\n        //TODO: align for tenant\n        const callbacks = this.cryptoService.getCallbackContext('');\n        this.issuer = new Openid4vciIssuer({\n            callbacks,\n        });\n        this.resourceServer = new Oauth2ResourceServer({\n            callbacks,\n        });\n    }\n\n    async issuerMetadata(tenantId: string): Promise {\n        const credential_issuer = `${this.configService.getOrThrow(\n            'PUBLIC_URL',\n        )}/${tenantId}`;\n\n        const display = JSON.parse(\n            readFileSync(\n                join(\n                    this.configService.getOrThrow('FOLDER'),\n                    tenantId,\n                    'display.json',\n                ),\n                'utf-8',\n            ),\n        );\n\n        const authorizationServerMetadata =\n            this.authzService.authzMetadata(tenantId);\n\n        let credentialIssuer = this.issuer.createCredentialIssuerMetadata({\n            credential_issuer,\n            credential_configurations_supported:\n                await this.credentialsService.getCredentialConfiguration(\n                    tenantId,\n                ),\n            credential_endpoint: `${credential_issuer}/vci/credential`,\n            authorization_servers: [authorizationServerMetadata.issuer],\n            authorization_server: authorizationServerMetadata.issuer,\n            notification_endpoint: `${credential_issuer}/vci/notification`,\n            batch_credential_issuance: {\n                batch_size: 1,\n            },\n            display,\n        });\n\n        //replace placeholders in the issuer metadata\n        credentialIssuer = JSON.parse(\n            JSON.stringify(credentialIssuer).replace(\n                //g,\n                this.configService.getOrThrow('PUBLIC_URL'),\n            ),\n        );\n\n        return {\n            credentialIssuer,\n            authorizationServers: [authorizationServerMetadata],\n            originalDraftVersion: Openid4vciDraftVersion.Draft14,\n        } as const satisfies IssuerMetadataResult;\n    }\n\n    async createOffer(\n        body: OfferRequest,\n        user: TokenPayload,\n        tenantId: string,\n    ): Promise {\n        const configs =\n            await this.credentialsService.getCredentialConfiguration(user.sub);\n        body.credentialConfigurationIds.map((id) => {\n            if (configs[id] === undefined) {\n                throw new ConflictException(\n                    'Invalid credential configuration ID',\n                );\n            }\n        });\n        const issuerMetadata = await this.issuerMetadata(tenantId);\n        const issuer_state = v4();\n        return this.issuer\n            .createCredentialOffer({\n                credentialConfigurationIds: body.credentialConfigurationIds,\n                grants: {\n                    [authorizationCodeGrantIdentifier]: {\n                        issuer_state,\n                    },\n                },\n                issuerMetadata,\n            })\n            .then(async (offer) => {\n                await this.sessionService.create({\n                    id: issuer_state,\n                    offer: offer.credentialOfferObject,\n                    credentialPayload: body,\n                    tenantId: user.sub,\n                });\n                return {\n                    session: issuer_state,\n                    uri: offer.credentialOffer,\n                } as OfferResponse;\n            });\n    }\n\n    async getCredential(\n        req: Request,\n        tenantId: string,\n    ): Promise {\n        const issuerMetadata = await this.issuerMetadata(tenantId);\n        const parsedCredentialRequest = this.issuer.parseCredentialRequest({\n            issuerMetadata,\n            credentialRequest: req.body as Record,\n        });\n\n        if (parsedCredentialRequest?.proofs?.jwt === undefined) {\n            throw new Error('Invalid credential request');\n        }\n\n        const headers = getHeadersFromRequest(req);\n        const { tokenPayload } =\n            await this.resourceServer.verifyResourceRequest({\n                authorizationServers: issuerMetadata.authorizationServers,\n                request: {\n                    url: `https://${req.host}${req.url}`,\n                    method: req.method as HttpMethod,\n                    headers,\n                },\n                resourceServer:\n                    issuerMetadata.credentialIssuer.credential_issuer,\n                allowedAuthenticationSchemes: [\n                    SupportedAuthenticationScheme.DPoP,\n                ],\n            });\n\n        const session = await this.sessionService.get(\n            tokenPayload.sub as string,\n        );\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: session.id,\n            tenantId,\n            flowType: 'OID4VCI',\n            stage: 'credential_request',\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            credentialConfigurationId:\n                parsedCredentialRequest.credentialConfigurationId,\n            proofCount: parsedCredentialRequest.proofs?.jwt?.length || 0,\n        });\n\n        try {\n            const credentials: string[] = [];\n            for (const jwt of parsedCredentialRequest.proofs.jwt) {\n                const verifiedProof =\n                    await this.issuer.verifyCredentialRequestJwtProof({\n                        //check if this is correct or if the passed nonce is validated.\n                        expectedNonce: tokenPayload.nonce as string,\n                        issuerMetadata: await this.issuerMetadata(tenantId),\n                        jwt,\n                    });\n                const cnf = verifiedProof.signer.publicJwk;\n                const cred = await this.credentialsService.getCredential(\n                    parsedCredentialRequest.credentialConfigurationId as string,\n                    cnf as any,\n                    session,\n                );\n                credentials.push(cred);\n\n                this.sessionLogger.logCredentialIssuance(\n                    logContext,\n                    parsedCredentialRequest.credentialConfigurationId as string,\n                    {\n                        credentialSize: cred.length,\n                        proofVerified: true,\n                    },\n                );\n            }\n\n            const notificationId = v4();\n            session.notifications.push({\n                id: notificationId,\n            });\n            await this.sessionService.add(session.id, tenantId, {\n                notifications: session.notifications,\n            });\n\n            this.sessionLogger.logFlowComplete(logContext, {\n                credentialsIssued: credentials.length,\n                notificationId,\n            });\n\n            return this.issuer.createCredentialResponse({\n                credentials,\n                credentialRequest: parsedCredentialRequest,\n                cNonce: tokenPayload.nonce as string,\n                cNonceExpiresInSeconds: 3600,\n                //this should be stored in the session in case this endpoint is requested multiple times, but the response is differnt.\n                notificationId,\n            });\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                credentialConfigurationId:\n                    parsedCredentialRequest.credentialConfigurationId,\n            });\n            throw error;\n        }\n    }\n\n    /**\n     * Store the notification in the session based on the notitification id.\n     * @param req\n     * @param body\n     */\n    async handleNotification(\n        req: Request,\n        body: NotificationRequestDto,\n        tenantId: string,\n    ) {\n        const issuerMetadata = await this.issuerMetadata(tenantId);\n        const headers = getHeadersFromRequest(req);\n        const { tokenPayload } =\n            await this.resourceServer.verifyResourceRequest({\n                authorizationServers: issuerMetadata.authorizationServers,\n                request: {\n                    url: `https://${req.host}${req.url}`,\n                    method: req.method as HttpMethod,\n                    headers,\n                },\n                resourceServer:\n                    issuerMetadata.credentialIssuer.credential_issuer,\n                allowedAuthenticationSchemes: [\n                    SupportedAuthenticationScheme.DPoP,\n                ],\n            });\n\n        const session = await this.sessionService.get(\n            tokenPayload.sub as string,\n        );\n        if (session === undefined) {\n            throw new BadRequestException('Session not found');\n        }\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: session.id,\n            tenantId,\n            flowType: 'OID4VCI',\n            stage: 'notification',\n        };\n\n        try {\n            const index = session.notifications.findIndex(\n                (notification) => notification.id === body.notification_id,\n            );\n            if (index === -1) {\n                throw new BadRequestException(\n                    'No notifications found in session',\n                );\n            }\n            session.notifications[index] = {\n                id: body.notification_id,\n                event: body.event,\n            };\n            await this.sessionService.add(session.id, tenantId, {\n                notifications: session.notifications,\n            });\n\n            this.sessionLogger.logNotification(logContext, body.event || '', {\n                notificationId: body.notification_id,\n                notificationIndex: index,\n            });\n        } catch (error) {\n            this.sessionLogger.logSessionError(\n                logContext,\n                error as Error,\n                'Failed to handle notification',\n                {\n                    notificationId: body.notification_id,\n                },\n            );\n            throw error;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vpController.html":{"url":"controllers/Oid4vpController.html","title":"controller - Oid4vpController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Oid4vpController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/oid4vp\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getRequestWithSession\n                            \n                            \n                                    \n                                    \n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getRequestWithSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRequestWithSession(tenantId: string, requestId: string, session: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('request/:requestId/:session')@SessionLogger('session', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:34\n                        \n                    \n\n\n            \n                \n                        Returns the authorization request for a given requestId and session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('response')@SessionLogger('state', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:53\n                        \n                    \n\n\n            \n                \n                        Endpoint to receive the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Get,\n    Param,\n    Post,\n    UseInterceptors,\n} from '@nestjs/common';\nimport { Oid4vpService } from './oid4vp.service';\nimport { AuthorizationResponse } from './dto/authorization-response.dto';\nimport { SessionLogger } from '../../utils/session-logger.decorator';\nimport { SessionLoggerInterceptor } from '../../utils/session-logger.interceptor';\n\n/**\n * Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n */\n@Controller(':tenantId/oid4vp')\n@UseInterceptors(SessionLoggerInterceptor)\nexport class Oid4vpController {\n    /**\n     * Constructor for the Oid4vpController.\n     * @param oid4vpService - Instance of Oid4vpService for handling OID4VP operations.\n     */\n    constructor(private readonly oid4vpService: Oid4vpService) {}\n\n    /**\n     * Returns the authorization request for a given requestId and session.\n     * @param requestId\n     * @param session\n     * @returns\n     */\n    @Get('request/:requestId/:session')\n    @SessionLogger('session', 'OID4VP')\n    getRequestWithSession(\n        @Param('tenantId') tenantId: string,\n        @Param('requestId') requestId: string,\n        @Param('session') session: string,\n    ) {\n        return this.oid4vpService.createAuthorizationRequest(\n            requestId,\n            tenantId,\n            session,\n        );\n    }\n\n    /**\n     * Endpoint to receive the response from the wallet.\n     * @param body\n     * @returns\n     */\n    @Post('response')\n    @SessionLogger('state', 'OID4VP')\n    getResponse(\n        @Body() body: AuthorizationResponse,\n        @Param('tenantId') tenantId: string,\n    ) {\n        return this.oid4vpService.getResponse(body, tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/Oid4vpModule.html":{"url":"modules/Oid4vpModule.html","title":"module - Oid4vpModule","body":"\n                   \n\n\n\n\n    Modules\n    Oid4vpModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_imports\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nOid4vpModule -->\n\nPresentationsModule->Oid4vpModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nOid4vpModule -->\n\nRegistrarModule->Oid4vpModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nOid4vpModule -->\n\nSessionLoggerService->Oid4vpModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            Oid4vpService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vpController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            PresentationsModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            Oid4vpService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { Oid4vpService } from './oid4vp.service';\nimport { Oid4vpController } from './oid4vp.controller';\nimport { CryptoModule } from '../../crypto/crypto.module';\nimport { RegistrarModule } from '../../registrar/registrar.module';\nimport { PresentationsModule } from '../presentations/presentations.module';\nimport { SessionModule } from '../../session/session.module';\nimport { HttpModule } from '@nestjs/axios';\nimport { SessionLoggerService } from '../../utils/session-logger.service';\nimport { SessionLoggerInterceptor } from '../../utils/session-logger.interceptor';\n\n@Module({\n    imports: [\n        CryptoModule,\n        RegistrarModule,\n        PresentationsModule,\n        SessionModule,\n        HttpModule,\n    ],\n    controllers: [Oid4vpController],\n    providers: [Oid4vpService, SessionLoggerService, SessionLoggerInterceptor],\n    exports: [Oid4vpService],\n})\nexport class Oid4vpModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Oid4vpService.html":{"url":"injectables/Oid4vpService.html","title":"injectable - Oid4vpService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Oid4vpService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAuthorizationRequest\n                            \n                            \n                                    Async\n                                createRequest\n                            \n                            \n                                    Async\n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cryptoService: CryptoService, encryptionService: EncryptionService, configService: ConfigService, registrarService: RegistrarService, presentationsService: PresentationsService, sessionService: SessionService, httpService: HttpService, sessionLogger: SessionLoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/oid4vp/oid4vp.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        encryptionService\n                                                  \n                                                        \n                                                                        EncryptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registrarService\n                                                  \n                                                        \n                                                                        RegistrarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAuthorizationRequest(requestId: string, tenantId: string, auth_session: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:41\n                        \n                    \n\n\n            \n                \n                        Creates an authorization request for the OID4VP flow.\nThis method generates a JWT that includes the necessary parameters for the authorization request.\nIt initializes the session logging context and logs the start of the flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                auth_session\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRequest(requestId: string, values: PresentationRequestOptions, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:215\n                        \n                    \n\n\n            \n                \n                        Creates a request for the OID4VP flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            PresentationRequestOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:264\n                        \n                    \n\n\n            \n                \n                        Processes the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { randomUUID } from 'node:crypto';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { AuthorizationResponse } from './dto/authorization-response.dto';\nimport { RegistrarService } from '../../registrar/registrar.service';\nimport { PresentationsService } from '../presentations/presentations.service';\nimport { AuthResponse } from '../presentations/dto/auth-response.dto';\nimport { EncryptionService } from '../../crypto/encryption/encryption.service';\nimport { v4 } from 'uuid';\nimport { SessionService } from '../../session/session.service';\nimport { HttpService } from '@nestjs/axios';\nimport { firstValueFrom } from 'rxjs';\nimport { OfferResponse } from '../../issuer/oid4vci/dto/offer-request.dto';\nimport { SessionLoggerService } from '../../utils/session-logger.service';\nimport { SessionLogContext } from '../../utils/session-logger-context';\nimport { PresentationRequestOptions } from './dto/presentation-request-options.dto';\n\n@Injectable()\nexport class Oid4vpService {\n    constructor(\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private configService: ConfigService,\n        private registrarService: RegistrarService,\n        private presentationsService: PresentationsService,\n        private sessionService: SessionService,\n        private httpService: HttpService,\n        private sessionLogger: SessionLoggerService,\n    ) {}\n\n    /**\n     * Creates an authorization request for the OID4VP flow.\n     * This method generates a JWT that includes the necessary parameters for the authorization request.\n     * It initializes the session logging context and logs the start of the flow.\n     * @param requestId\n     * @param tenantId\n     * @param auth_session\n     * @returns\n     */\n    async createAuthorizationRequest(\n        requestId: string,\n        tenantId: string,\n        auth_session: string,\n    ): Promise {\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: auth_session,\n            tenantId,\n            flowType: 'OID4VP',\n            stage: 'authorization_request',\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            requestId,\n            action: 'create_authorization_request',\n        });\n\n        try {\n            const host = this.configService.getOrThrow('PUBLIC_URL');\n            const tenantUrl = `${host}/${tenantId}`;\n\n            const values =\n                await this.presentationsService.getPresentationConfig(\n                    requestId,\n                    tenantId,\n                );\n            let regCert: string | undefined = undefined;\n\n            const dcql_query = JSON.parse(\n                JSON.stringify(values.dcql_query).replace(\n                    //g,\n                    tenantUrl,\n                ),\n            );\n\n            if (this.registrarService.isEnabled()) {\n                const registrationCert = JSON.parse(\n                    JSON.stringify(values.registrationCert).replace(\n                        //g,\n                        tenantUrl,\n                    ),\n                );\n                regCert =\n                    await this.registrarService.addRegistrationCertificate(\n                        registrationCert,\n                        dcql_query,\n                        requestId,\n                        tenantId,\n                    );\n            }\n            const nonce = randomUUID();\n            await this.sessionService.add(auth_session, tenantId, {\n                vp_nonce: nonce,\n            });\n\n            this.sessionLogger.logAuthorizationRequest(logContext, {\n                requestId,\n                nonce,\n                regCert,\n                dcqlQueryCount: Array.isArray(dcql_query)\n                    ? dcql_query.length\n                    : 1,\n            });\n\n            const request = {\n                payload: {\n                    response_type: 'vp_token',\n                    client_id: 'x509_san_dns:' + host.replace('https://', ''),\n                    response_uri: `${host}/${tenantId}/oid4vp/response`,\n                    response_mode: 'direct_post.jwt',\n                    nonce,\n                    dcql_query,\n                    client_metadata: {\n                        jwks: {\n                            keys: [\n                                this.encryptionService.getEncryptionPublicKey(),\n                            ],\n                        },\n                        vp_formats: {\n                            mso_mdoc: {\n                                alg: ['EdDSA', 'ES256', 'ES384'],\n                            },\n                            'dc+sd-jwt': {\n                                'kb-jwt_alg_values': [\n                                    'EdDSA',\n                                    'ES256',\n                                    'ES384',\n                                    'ES256K',\n                                ],\n                                'sd-jwt_alg_values': [\n                                    'EdDSA',\n                                    'ES256',\n                                    'ES384',\n                                    'ES256K',\n                                ],\n                            },\n                        },\n                        authorization_encrypted_response_alg: 'ECDH-ES',\n                        authorization_encrypted_response_enc: 'A128GCM',\n                        client_name:\n                            this.configService.getOrThrow('RP_NAME'),\n                        response_types_supported: ['vp_token'],\n                    },\n                    state: auth_session,\n                    aud: host,\n                    exp: Math.floor(Date.now() / 1000) + 60 * 5,\n                    iat: Math.floor(new Date().getTime() / 1000),\n                    verifier_attestations: regCert\n                        ? [\n                              {\n                                  format: 'jwt',\n                                  data: regCert,\n                              },\n                          ]\n                        : undefined,\n                },\n                header: {\n                    typ: 'oauth-authz-req+jwt',\n                },\n            };\n\n            let accessCert: string[] | undefined = undefined;\n            try {\n                accessCert = this.cryptoService.getCertChain(\n                    'access',\n                    tenantId,\n                );\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            } catch (err: any) {\n                accessCert = this.cryptoService.getCertChain(\n                    'signing',\n                    tenantId,\n                );\n            }\n\n            const header = {\n                ...request.header,\n                alg: 'ES256',\n                x5c: accessCert,\n            };\n\n            const signedJwt = await this.cryptoService.signJwt(\n                header,\n                request.payload,\n                tenantId,\n            );\n\n            this.sessionLogger.logSession(\n                logContext,\n                'Authorization request created successfully',\n                {\n                    signedJwtLength: signedJwt.length,\n                    certificateChainLength: accessCert?.length || 0,\n                },\n            );\n\n            return signedJwt;\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                requestId,\n                action: 'create_authorization_request',\n            });\n            throw error;\n        }\n    }\n\n    /**\n     * Creates a request for the OID4VP flow.\n     * @param requestId\n     * @param values\n     * @param tenantId\n     * @returns\n     */\n    async createRequest(\n        requestId: string,\n        values: PresentationRequestOptions,\n        tenantId: string,\n    ): Promise {\n        const presentationConfig =\n            await this.presentationsService.getPresentationConfig(\n                requestId,\n                tenantId,\n            );\n\n        if (!values.session) {\n            values.session = v4();\n            await this.sessionService.create({\n                id: values.session,\n                webhook: values.webhook ?? presentationConfig.webhook,\n                tenantId,\n            });\n        } else {\n            await this.sessionService.add(values.session, tenantId, {\n                webhook: values.webhook ?? presentationConfig.webhook,\n            });\n        }\n\n        const host = this.configService\n            .getOrThrow('PUBLIC_URL')\n            .replace('https://', '');\n        const params = {\n            client_id: `x509_san_dns:${host}`,\n            request_uri: `${this.configService.getOrThrow('PUBLIC_URL')}/${tenantId}/oid4vp/request/${requestId}/${values.session}`,\n        };\n        const queryString = Object.entries(params)\n            .map(\n                ([key, value]) =>\n                    `${encodeURIComponent(key)}=${encodeURIComponent(value)}`,\n            )\n            .join('&');\n\n        return {\n            uri: queryString,\n            session: values.session,\n        };\n    }\n\n    /**\n     * Processes the response from the wallet.\n     * @param body\n     * @param tenantId\n     */\n    async getResponse(body: AuthorizationResponse, tenantId: string) {\n        const res = await this.encryptionService.decryptJwe(\n            body.response,\n        );\n        const session = await this.sessionService.get(res.state);\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: res.state,\n            tenantId,\n            flowType: 'OID4VP',\n            stage: 'response_processing',\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            action: 'process_presentation_response',\n            hasWebhook: !!session.webhook,\n        });\n\n        try {\n            //TODO: load required fields from the config\n            const credentials = await this.presentationsService.parseResponse(\n                res,\n                [],\n                session.vp_nonce as string,\n            );\n\n            this.sessionLogger.logCredentialVerification(\n                logContext,\n                !!credentials && credentials.length > 0,\n                {\n                    credentialCount: credentials?.length || 0,\n                    nonce: session.vp_nonce,\n                },\n            );\n\n            //tell the auth server the result of the session.\n            await this.sessionService.add(res.state, tenantId, {\n                //TODO: not clear why it has to be any\n                credentials: credentials as any,\n            });\n            // if there a a webook URL, send the response there\n            if (session.webhook) {\n                const headers: Record = {};\n                if (\n                    session.webhook.auth &&\n                    session.webhook.auth.type === 'apiKey'\n                ) {\n                    headers[session.webhook.auth.config.headerName] =\n                        session.webhook.auth.config.value;\n                }\n\n                console.log(headers);\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    'Sending webhook notification',\n                    {\n                        webhookUrl: session.webhook.url,\n                        authType: session.webhook.auth?.type || 'none',\n                    },\n                );\n\n                await firstValueFrom(\n                    this.httpService.post(\n                        session.webhook.url,\n                        {\n                            credentials,\n                            session: res.state,\n                        },\n                        {\n                            headers,\n                        },\n                    ),\n                ).then(\n                    async (webhookResponse) => {\n                        //TODO: better: just store it when it's a presentation during issuance\n                        if (webhookResponse.data) {\n                            session.credentialPayload!.values =\n                                webhookResponse.data;\n                            //store received webhook response\n                            await this.sessionService.add(res.state, tenantId, {\n                                credentialPayload: session.credentialPayload,\n                            });\n                        }\n\n                        this.sessionLogger.logSession(\n                            logContext,\n                            'Webhook notification sent successfully',\n                            {\n                                responseStatus: webhookResponse.status,\n                                hasResponseData: !!webhookResponse.data,\n                            },\n                        );\n                    },\n                    (err) => {\n                        this.sessionLogger.logSessionError(\n                            logContext,\n                            err,\n                            'Error sending webhook',\n                            {\n                                webhookUrl: session.webhook!.url,\n                            },\n                        );\n                        throw new Error(\n                            `Error sending webhook: ${err.message || err}`,\n                        );\n                    },\n                );\n            }\n\n            this.sessionLogger.logFlowComplete(logContext, {\n                credentialCount: credentials?.length || 0,\n                webhookSent: !!session.webhook,\n            });\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                action: 'process_presentation_response',\n            });\n            throw error;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParResponseDto.html":{"url":"classes/ParResponseDto.html","title":"class - ParResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/par-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expires_in\n                            \n                            \n                                request_uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The expiration time for the request URI in seconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:5\n                        \n                    \n\n            \n                \n                    The request URI for the Pushed Authorization Request.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ParResponseDto {\n    /**\n     * The request URI for the Pushed Authorization Request.\n     */\n    request_uri: string;\n    /**\n     * The expiration time for the request URI in seconds.\n     */\n    expires_in: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Params.html":{"url":"interfaces/Params.html","title":"interface - Params","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Params\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/params.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            body\n                                        \n                                \n                                \n                                        \n                                            headers\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            query\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        query:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type Slot = 'body' | 'headers' | 'path' | 'query';\n\nexport type Field =\n    | {\n          in: Exclude;\n          key: string;\n          map?: string;\n      }\n    | {\n          in: Extract;\n          key?: string;\n          map?: string;\n      };\n\nexport interface Fields {\n    allowExtra?: Partial>;\n    args?: ReadonlyArray;\n}\n\nexport type FieldsConfig = ReadonlyArray;\n\nconst extraPrefixesMap: Record = {\n    $body_: 'body',\n    $headers_: 'headers',\n    $path_: 'path',\n    $query_: 'query',\n};\nconst extraPrefixes = Object.entries(extraPrefixesMap);\n\ntype KeyMap = Map;\n\nconst buildKeyMap = (fields: FieldsConfig, map?: KeyMap): KeyMap => {\n    if (!map) {\n        map = new Map();\n    }\n\n    for (const config of fields) {\n        if ('in' in config) {\n            if (config.key) {\n                map.set(config.key, {\n                    in: config.in,\n                    map: config.map,\n                });\n            }\n        } else if (config.args) {\n            buildKeyMap(config.args, map);\n        }\n    }\n\n    return map;\n};\n\ninterface Params {\n    body: unknown;\n    headers: Record;\n    path: Record;\n    query: Record;\n}\n\nconst stripEmptySlots = (params: Params) => {\n    for (const [slot, value] of Object.entries(params)) {\n        if (value && typeof value === 'object' && !Object.keys(value).length) {\n            delete params[slot as Slot];\n        }\n    }\n};\n\nexport const buildClientParams = (\n    args: ReadonlyArray,\n    fields: FieldsConfig,\n) => {\n    const params: Params = {\n        body: {},\n        headers: {},\n        path: {},\n        query: {},\n    };\n\n    const map = buildKeyMap(fields);\n\n    let config: FieldsConfig[number] | undefined;\n\n    for (const [index, arg] of args.entries()) {\n        if (fields[index]) {\n            config = fields[index];\n        }\n\n        if (!config) {\n            continue;\n        }\n\n        if ('in' in config) {\n            if (config.key) {\n                const field = map.get(config.key)!;\n                const name = field.map || config.key;\n                (params[field.in] as Record)[name] = arg;\n            } else {\n                params.body = arg;\n            }\n        } else {\n            for (const [key, value] of Object.entries(arg ?? {})) {\n                const field = map.get(key);\n\n                if (field) {\n                    const name = field.map || key;\n                    (params[field.in] as Record)[name] = value;\n                } else {\n                    const extra = extraPrefixes.find(([prefix]) =>\n                        key.startsWith(prefix),\n                    );\n\n                    if (extra) {\n                        const [prefix, slot] = extra;\n                        (params[slot] as Record)[\n                            key.slice(prefix.length)\n                        ] = value;\n                    } else {\n                        for (const [slot, allowed] of Object.entries(\n                            config.allowExtra ?? {},\n                        )) {\n                            if (allowed) {\n                                (\n                                    params[slot as Slot] as Record\n                                )[key] = value;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    stripEmptySlots(params);\n\n    return params;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{"url":"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html","title":"interface - ParsedAccessTokenAuthorizationCodeRequestGrant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParsedAccessTokenAuthorizationCodeRequestGrant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            code\n                                        \n                                \n                                \n                                        \n                                            grantType\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        grantType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        grantType:         AuthorizationCodeGrantIdentifier\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AuthorizationCodeGrantIdentifier\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\nimport { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n} from '@openid4vc/oauth2';\nimport type { Request, Response } from 'express';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { getHeadersFromRequest } from '../oid4vci/util';\nimport { AuthorizeQueries } from './dto/authorize-request.dto';\nimport { Oid4vpService } from '../../verifier/oid4vp/oid4vp.service';\nimport { SessionService } from '../../session/session.service';\nimport { CredentialsService } from '../credentials/credentials.service';\nimport { WebhookConfig } from '../../utils/webhook.dto';\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private credentialsService: CredentialsService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(tenantId: string): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow('PUBLIC_URL') +\n            `/${tenantId}`;\n        return this.getAuthorizationServer(\n            tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: ['ES256'],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n        tenantId: string,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        'request_uri not found or not provided in the request',\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                'request_uri not found or not provided in the request',\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!, tenantId);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        tenantId: string,\n    ): Promise {\n        const url = `${this.configService.getOrThrow('PUBLIC_URL')}${req.url}`;\n\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        const session = await this.sessionService.getBy({\n            authorization_code: body.code,\n            tenantId,\n        });\n\n        if (!session) {\n            throw new ConflictException('Authorization code not found');\n        }\n        const authorizationServerMetadata = this.authzMetadata(tenantId);\n        //TODO: handle response\n        const { dpop } = await this.getAuthorizationServer(\n            tenantId,\n        ).verifyAuthorizationCodeAccessTokenRequest({\n            grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n            accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n            expectedCode: session.authorization_code as string,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n            dpop: {\n                required: true,\n                allowedSigningAlgs:\n                    authorizationServerMetadata.dpop_signing_alg_values_supported,\n                jwt: parsedAccessTokenRequest.dpop?.jwt,\n            },\n            authorizationServerMetadata,\n        });\n\n        const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow('PUBLIC_URL')}/${tenantId}`,\n            signer: {\n                method: 'jwk',\n                alg: 'ES256',\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    'jwk',\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            cNonce,\n            cNonceExpiresIn: 100,\n            clientId: 'wallet', // must be same as the client attestation\n            dpop,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest('pid', { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: 'insufficient_authorization',\n            auth_session,\n            presentation,\n            error_description:\n                'Presentation of credential required before issuance',\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        tenantId: string,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n            //check if session has valid presentation, we assume for now\n            await this.sendAuthorizationCode(res, body.auth_session, tenantId);\n            return;\n        }\n\n        const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        }\n        const ids = session.offer!.credential_configuration_ids;\n        const config = await this.credentialsService.getConfigById(\n            ids[0],\n            tenantId,\n        );\n        if (config.presentation_during_issuance) {\n            const webhook = config.presentation_during_issuance.webhook;\n            const response = await this.parseChallengeRequest(\n                body,\n                tenantId,\n                webhook,\n            );\n            res.status(400).send(response);\n        } else {\n            await this.sendAuthorizationCode(res, body.issuer_state!, tenantId);\n        }\n    }\n\n    private async sendAuthorizationCode(\n        res: Response,\n        issuer_state: string,\n        tenantId: string,\n    ) {\n        const authorization_code = await this.setAuthCode(\n            issuer_state,\n            tenantId,\n        );\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string, tenantId: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, tenantId, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PathSerializer.html":{"url":"interfaces/PathSerializer.html","title":"interface - PathSerializer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PathSerializer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/utils.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { getAuthToken } from '../core/auth';\nimport type {\n    QuerySerializer,\n    QuerySerializerOptions,\n} from '../core/bodySerializer';\nimport { jsonBodySerializer } from '../core/bodySerializer';\nimport {\n    serializeArrayParam,\n    serializeObjectParam,\n    serializePrimitiveParam,\n} from '../core/pathSerializer';\nimport type { Client, ClientOptions, Config, RequestOptions } from './types';\n\ninterface PathSerializer {\n    path: Record;\n    url: string;\n}\n\nconst PATH_PARAM_RE = /\\{[^{}]+\\}/g;\n\ntype ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\ntype ArraySeparatorStyle = ArrayStyle | MatrixStyle;\n\nconst defaultPathSerializer = ({ path, url: _url }: PathSerializer) => {\n    let url = _url;\n    const matches = _url.match(PATH_PARAM_RE);\n    if (matches) {\n        for (const match of matches) {\n            let explode = false;\n            let name = match.substring(1, match.length - 1);\n            let style: ArraySeparatorStyle = 'simple';\n\n            if (name.endsWith('*')) {\n                explode = true;\n                name = name.substring(0, name.length - 1);\n            }\n\n            if (name.startsWith('.')) {\n                name = name.substring(1);\n                style = 'label';\n            } else if (name.startsWith(';')) {\n                name = name.substring(1);\n                style = 'matrix';\n            }\n\n            const value = path[name];\n\n            if (value === undefined || value === null) {\n                continue;\n            }\n\n            if (Array.isArray(value)) {\n                url = url.replace(\n                    match,\n                    serializeArrayParam({ explode, name, style, value }),\n                );\n                continue;\n            }\n\n            if (typeof value === 'object') {\n                url = url.replace(\n                    match,\n                    serializeObjectParam({\n                        explode,\n                        name,\n                        style,\n                        value: value as Record,\n                        valueOnly: true,\n                    }),\n                );\n                continue;\n            }\n\n            if (style === 'matrix') {\n                url = url.replace(\n                    match,\n                    `;${serializePrimitiveParam({\n                        name,\n                        value: value as string,\n                    })}`,\n                );\n                continue;\n            }\n\n            const replaceValue = encodeURIComponent(\n                style === 'label' ? `.${value as string}` : (value as string),\n            );\n            url = url.replace(match, replaceValue);\n        }\n    }\n    return url;\n};\n\nexport const createQuerySerializer = ({\n    allowReserved,\n    array,\n    object,\n}: QuerySerializerOptions = {}) => {\n    const querySerializer = (queryParams: T) => {\n        const search: string[] = [];\n        if (queryParams && typeof queryParams === 'object') {\n            for (const name in queryParams) {\n                const value = queryParams[name];\n\n                if (value === undefined || value === null) {\n                    continue;\n                }\n\n                if (Array.isArray(value)) {\n                    const serializedArray = serializeArrayParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'form',\n                        value,\n                        ...array,\n                    });\n                    if (serializedArray) search.push(serializedArray);\n                } else if (typeof value === 'object') {\n                    const serializedObject = serializeObjectParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'deepObject',\n                        value: value as Record,\n                        ...object,\n                    });\n                    if (serializedObject) search.push(serializedObject);\n                } else {\n                    const serializedPrimitive = serializePrimitiveParam({\n                        allowReserved,\n                        name,\n                        value: value as string,\n                    });\n                    if (serializedPrimitive) search.push(serializedPrimitive);\n                }\n            }\n        }\n        return search.join('&');\n    };\n    return querySerializer;\n};\n\n/**\n * Infers parseAs value from provided Content-Type header.\n */\nexport const getParseAs = (\n    contentType: string | null,\n): Exclude => {\n    if (!contentType) {\n        // If no Content-Type header is provided, the best we can do is return the raw response body,\n        // which is effectively the same as the 'stream' option.\n        return 'stream';\n    }\n\n    const cleanContent = contentType.split(';')[0]?.trim();\n\n    if (!cleanContent) {\n        return;\n    }\n\n    if (\n        cleanContent.startsWith('application/json') ||\n        cleanContent.endsWith('+json')\n    ) {\n        return 'json';\n    }\n\n    if (cleanContent === 'multipart/form-data') {\n        return 'formData';\n    }\n\n    if (\n        ['application/', 'audio/', 'image/', 'video/'].some((type) =>\n            cleanContent.startsWith(type),\n        )\n    ) {\n        return 'blob';\n    }\n\n    if (cleanContent.startsWith('text/')) {\n        return 'text';\n    }\n\n    return;\n};\n\nexport const setAuthParams = async ({\n    security,\n    ...options\n}: Pick, 'security'> &\n    Pick & {\n        headers: Headers;\n    }) => {\n    for (const auth of security) {\n        const token = await getAuthToken(auth, options.auth);\n\n        if (!token) {\n            continue;\n        }\n\n        const name = auth.name ?? 'Authorization';\n\n        switch (auth.in) {\n            case 'query':\n                if (!options.query) {\n                    options.query = {};\n                }\n                options.query[name] = token;\n                break;\n            case 'cookie':\n                options.headers.append('Cookie', `${name}=${token}`);\n                break;\n            case 'header':\n            default:\n                options.headers.set(name, token);\n                break;\n        }\n\n        return;\n    }\n};\n\nexport const buildUrl: Client['buildUrl'] = (options) => {\n    const url = getUrl({\n        baseUrl: options.baseUrl as string,\n        path: options.path,\n        query: options.query,\n        querySerializer:\n            typeof options.querySerializer === 'function'\n                ? options.querySerializer\n                : createQuerySerializer(options.querySerializer),\n        url: options.url,\n    });\n    return url;\n};\n\nexport const getUrl = ({\n    baseUrl,\n    path,\n    query,\n    querySerializer,\n    url: _url,\n}: {\n    baseUrl?: string;\n    path?: Record;\n    query?: Record;\n    querySerializer: QuerySerializer;\n    url: string;\n}) => {\n    const pathUrl = _url.startsWith('/') ? _url : `/${_url}`;\n    let url = (baseUrl ?? '') + pathUrl;\n    if (path) {\n        url = defaultPathSerializer({ path, url });\n    }\n    let search = query ? querySerializer(query) : '';\n    if (search.startsWith('?')) {\n        search = search.substring(1);\n    }\n    if (search) {\n        url += `?${search}`;\n    }\n    return url;\n};\n\nexport const mergeConfigs = (a: Config, b: Config): Config => {\n    const config = { ...a, ...b };\n    if (config.baseUrl?.endsWith('/')) {\n        config.baseUrl = config.baseUrl.substring(0, config.baseUrl.length - 1);\n    }\n    config.headers = mergeHeaders(a.headers, b.headers);\n    return config;\n};\n\nexport const mergeHeaders = (\n    ...headers: Array['headers'] | undefined>\n): Headers => {\n    const mergedHeaders = new Headers();\n    for (const header of headers) {\n        if (!header || typeof header !== 'object') {\n            continue;\n        }\n\n        const iterator =\n            header instanceof Headers\n                ? header.entries()\n                : Object.entries(header);\n\n        for (const [key, value] of iterator) {\n            if (value === null) {\n                mergedHeaders.delete(key);\n            } else if (Array.isArray(value)) {\n                for (const v of value) {\n                    mergedHeaders.append(key, v as string);\n                }\n            } else if (value !== undefined) {\n                // assume object headers are meant to be JSON stringified, i.e. their\n                // content value in OpenAPI specification is 'application/json'\n                mergedHeaders.set(\n                    key,\n                    typeof value === 'object'\n                        ? JSON.stringify(value)\n                        : (value as string),\n                );\n            }\n        }\n    }\n    return mergedHeaders;\n};\n\ntype ErrInterceptor = (\n    error: Err,\n    response: Res,\n    request: Req,\n    options: Options,\n) => Err | Promise;\n\ntype ReqInterceptor = (\n    request: Req,\n    options: Options,\n) => Req | Promise;\n\ntype ResInterceptor = (\n    response: Res,\n    request: Req,\n    options: Options,\n) => Res | Promise;\n\nclass Interceptors {\n    _fns: (Interceptor | null)[];\n\n    constructor() {\n        this._fns = [];\n    }\n\n    clear() {\n        this._fns = [];\n    }\n\n    getInterceptorIndex(id: number | Interceptor): number {\n        if (typeof id === 'number') {\n            return this._fns[id] ? id : -1;\n        } else {\n            return this._fns.indexOf(id);\n        }\n    }\n    exists(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        return !!this._fns[index];\n    }\n\n    eject(id: number | Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = null;\n        }\n    }\n\n    update(id: number | Interceptor, fn: Interceptor) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = fn;\n            return id;\n        } else {\n            return false;\n        }\n    }\n\n    use(fn: Interceptor) {\n        this._fns = [...this._fns, fn];\n        return this._fns.length - 1;\n    }\n}\n\n// `createInterceptors()` response, meant for external use as it does not\n// expose internals\nexport interface Middleware {\n    error: Pick>,\n        'eject' | 'use'\n    >;\n    request: Pick>, 'eject' | 'use'>;\n    response: Pick>,\n        'eject' | 'use'\n    >;\n}\n\n// do not add `Middleware` as return type so we can use _fns internally\nexport const createInterceptors = () => ({\n    error: new Interceptors>(),\n    request: new Interceptors>(),\n    response: new Interceptors>(),\n});\n\nconst defaultQuerySerializer = createQuerySerializer({\n    allowReserved: false,\n    array: {\n        explode: true,\n        style: 'form',\n    },\n    object: {\n        explode: true,\n        style: 'deepObject',\n    },\n});\n\nconst defaultHeaders = {\n    'Content-Type': 'application/json',\n};\n\nexport const createConfig = (\n    override: Config & T> = {},\n): Config & T> => ({\n    ...jsonBodySerializer,\n    headers: defaultHeaders,\n    parseAs: 'auto',\n    querySerializer: defaultQuerySerializer,\n    ...override,\n});\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PresentationConfig.html":{"url":"entities/PresentationConfig.html","title":"entity - PresentationConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PresentationConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a configuration for a Verifiable Presentation (VP) request.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                dcql_query\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                registrationCert\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:50\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        dcql_query\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:32\n                        \n                    \n\n            \n                \n                    The DCQL query to be used for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:17\n                        \n                    \n\n            \n                \n                    Unique identifier for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        registrationCert\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RegistrationCertificateRequest\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:38\n                        \n                    \n\n            \n                \n                    The registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:24\n                        \n                    \n\n            \n                \n                    The tenant ID for which the VP request is made.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:44\n                        \n                    \n\n            \n                \n                    Optional webhook URL to receive the response.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { IsString, IsObject } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook.dto';\nimport { RegistrationCertificateRequest } from '../dto/vp-request.dto';\nimport { Column, Entity } from 'typeorm';\nimport { ApiHideProperty } from '@nestjs/swagger';\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column('varchar', { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column('varchar', { primary: true })\n    tenantId: string;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column('json')\n    @IsObject()\n    //TODO: define the structure of the DCQL query\n    dcql_query: any;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsObject()\n    @Column('json')\n    registrationCert: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column('json', { nullable: true })\n    @IsObject()\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @Column({ type: 'date', default: () => 'CURRENT_TIMESTAMP' })\n    createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationDuringIssuance.html":{"url":"classes/PresentationDuringIssuance.html","title":"class - PresentationDuringIssuance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationDuringIssuance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/dto/credential-config.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/credential-config.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/credential-config.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsString } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook.dto';\n\nexport class VCT {\n    @IsString()\n    vct: string;\n    @IsString()\n    name?: string;\n    @IsString()\n    description?: string;\n    @IsString()\n    extends?: string;\n    @IsString()\n    'extends#integrity'?: string;\n    @IsString()\n    schema_uri?: string;\n    @IsString()\n    'schema_uri#integrity'?: string;\n}\n\nexport class PresentationDuringIssuance {\n    @IsString()\n    type: string;\n    @IsObject()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PresentationManagementController.html":{"url":"controllers/PresentationManagementController.html","title":"controller - PresentationManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PresentationManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                presentation-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                configuration\n                            \n                            \n                                    \n                                deleteConfiguration\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                            \n                                    \n                                storePresentationConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        configuration\n                        \n                    \n                \n            \n            \n                \n                        \n                    configuration(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:111\n                        \n                    \n\n\n            \n                \n                        Returns the presentation request configurations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:137\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation request configuration by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(res: Response, body: PresentationRequest, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@UseGuards(JwtAuthGuard)@ApiSecurity('bearer')@ApiBody({type: PresentationRequest, examples: undefined})@Post('request')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:79\n                        \n                    \n\n\n            \n                \n                        Create an presentation request that can be sent to the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            PresentationRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    storePresentationConfig(config: PresentationConfig, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:121\n                        \n                    \n\n\n            \n                \n                        Store a presentation request configuration. If it already exists, it will be updated.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            PresentationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Res,\n    UseGuards,\n} from '@nestjs/common';\nimport {\n    ApiBody,\n    ApiProduces,\n    ApiResponse,\n    ApiSecurity,\n    ApiTags,\n} from '@nestjs/swagger';\nimport { PresentationsService } from './presentations.service';\nimport { PresentationConfig } from './entities/presentation-config.entity';\nimport { JwtAuthGuard } from '../../auth/auth.guard';\nimport { Token, TokenPayload } from '../../auth/token.decorator';\nimport { OfferResponse } from '../../issuer/oid4vci/dto/offer-request.dto';\nimport {\n    PresentationRequest,\n    ResponseType,\n} from '../oid4vp/dto/presentation-request.dto';\nimport { Oid4vpService } from '../oid4vp/oid4vp.service';\nimport * as QRCode from 'qrcode';\nimport { Response } from 'express';\n\n@ApiTags('Presentation management', 'Admin')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('bearer')\n@Controller('presentation-management')\nexport class PresentationManagementController {\n    constructor(\n        private readonly presentationsService: PresentationsService,\n        private readonly oid4vpService: Oid4vpService,\n    ) {}\n\n    /**\n     * Create an presentation request that can be sent to the user\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: 'JSON response',\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            'application/json': { schema: { type: 'object' } },\n            'image/png': { schema: { type: 'string', format: 'binary' } },\n        },\n    })\n    @ApiProduces('application/json', 'image/png')\n    @UseGuards(JwtAuthGuard)\n    @ApiSecurity('bearer')\n    @ApiBody({\n        type: PresentationRequest,\n        examples: {\n            qrcode: {\n                summary: 'QR-Code Example',\n                value: {\n                    response_type: ResponseType.QRCode,\n                    requestId: 'pid',\n                },\n            },\n            uri: {\n                summary: 'URI',\n                value: {\n                    response_type: ResponseType.URI,\n                    requestId: 'pid',\n                },\n            },\n        },\n    })\n    @Post('request')\n    async getOffer(\n        @Res() res: Response,\n        @Body() body: PresentationRequest,\n        @Token() user: TokenPayload,\n    ) {\n        const values = await this.oid4vpService.createRequest(\n            body.requestId,\n            {\n                webhook: body.webhook,\n            },\n            user.sub,\n        );\n        values.uri = `openid4vp://?${values.uri}`;\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader('Content-Type', 'image/png');\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n\n    /**\n     * Returns the presentation request configurations.\n     * @returns\n     */\n    @Get()\n    configuration(@Token() user: TokenPayload) {\n        return this.presentationsService.getPresentationConfigs(user.sub);\n    }\n\n    /**\n     * Store a presentation request configuration. If it already exists, it will be updated.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storePresentationConfig(\n        @Body() config: PresentationConfig,\n        @Token() user: TokenPayload,\n    ) {\n        return this.presentationsService.storePresentationConfig(\n            config,\n            user.sub,\n        );\n    }\n\n    /**\n     * Deletes a presentation request configuration by its ID.\n     * @param id\n     * @returns\n     */\n    @Delete(':id')\n    deleteConfiguration(@Param('id') id: string, @Token() user: TokenPayload) {\n        return this.presentationsService.deletePresentationConfig(id, user.sub);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationRequest.html":{"url":"classes/PresentationRequest.html","title":"class - PresentationRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the presentation request containing the response type and request ID.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                requestId\n                            \n                            \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        requestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:33\n                        \n                    \n\n            \n                \n                    Identifier of the presentation configuration\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:26\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:41\n                        \n                    \n\n            \n                \n                    Webhook configuration to receive the response.\nIf not provided, the configured webhook from the configuration will be used.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsObject, IsOptional, IsString } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook.dto';\n\n/**\n * Enum for the type of response expected from the presentation request.\n */\nexport enum ResponseType {\n    /**\n     * Response type indicating a QR code will be returned.\n     */\n    QRCode = 'qrcode',\n    /**\n     * Response type indicating a URI will be returned.\n     */\n    URI = 'uri',\n}\n\n/**\n * DTO for the presentation request containing the response type and request ID.\n */\nexport class PresentationRequest {\n    /**\n     * @example qrcode\n     */\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Identifier of the presentation configuration\n     * @example pid\n     */\n    @IsString()\n    requestId: string;\n\n    /**\n     * Webhook configuration to receive the response.\n     * If not provided, the configured webhook from the configuration will be used.\n     */\n    @IsObject()\n    @IsOptional()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PresentationRequestOptions.html":{"url":"interfaces/PresentationRequestOptions.html","title":"interface - PresentationRequestOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PresentationRequestOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PresentationRequestOptions DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            session\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            webhook\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        session\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        session:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional session identifier for tracking the request.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        webhook\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        webhook:         WebhookConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         WebhookConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional webhook configuration to receive the response.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { WebhookConfig } from '../../../utils/webhook.dto';\n\n/**\n * PresentationRequestOptions DTO\n */\nexport interface PresentationRequestOptions {\n    /**\n     * Optional session identifier for tracking the request.\n     */\n    session?: string;\n    /**\n     * Optional webhook configuration to receive the response.\n     */\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PresentationsModule.html":{"url":"modules/PresentationsModule.html","title":"module - PresentationsModule","body":"\n                   \n\n\n\n\n    Modules\n    PresentationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_providers\n\n\n\ncluster_PresentationsModule_imports\n\n\n\ncluster_PresentationsModule_exports\n\n\n\n\nResolverModule\n\nResolverModule\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/presentations/presentations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PresentationManagementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ResolverModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { PresentationManagementController } from './presentations.controller';\nimport { PresentationsService } from './presentations.service';\nimport { ResolverModule } from '../resolver/resolver.module';\nimport { HttpModule } from '@nestjs/axios';\nimport { Oid4vpModule } from '../oid4vp/oid4vp.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PresentationConfig } from './entities/presentation-config.entity';\n\n@Module({\n    imports: [\n        ResolverModule,\n        HttpModule,\n        forwardRef(() => Oid4vpModule),\n        TypeOrmModule.forFeature([PresentationConfig]),\n    ],\n    controllers: [PresentationManagementController],\n    providers: [PresentationsService],\n    exports: [PresentationsService],\n})\nexport class PresentationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PresentationsService.html":{"url":"injectables/PresentationsService.html","title":"injectable - PresentationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PresentationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                kbVerifier\n                            \n                            \n                                sdjwtInstance\n                            \n                            \n                                    Private\n                                statusListFetcher\n                            \n                            \n                                verifier\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deletePresentationConfig\n                            \n                            \n                                    Async\n                                getPresentationConfig\n                            \n                            \n                                getPresentationConfigs\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                parseResponse\n                            \n                            \n                                storePresentationConfig\n                            \n                            \n                                    Public\n                                storeRCID\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, resolverService: ResolverService, vpRequestRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/presentations/presentations.service.ts:22\n                            \n                        \n\n                \n                    \n                            Constructor for the PresentationsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of HttpService for making HTTP requests.\n\n\n                                                        \n                                                \n                                                \n                                                        resolverService\n                                                  \n                                                        \n                                                                        ResolverService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ResolverService for resolving DID documents.\n\n\n                                                        \n                                                \n                                                \n                                                        vpRequestRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for managing VP request configurations.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deletePresentationConfig\n                        \n                    \n                \n            \n            \n                \ndeletePresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:78\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to delete.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to delete the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves when the deletion is complete.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPresentationConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:88\n                        \n                    \n\n\n            \n                \n                        Retrieves a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to retrieve.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the requested PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPresentationConfigs\n                        \n                    \n                \n            \n            \n                \ngetPresentationConfigs(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:54\n                        \n                    \n\n\n            \n                \n                        Retrieves all presentation configurations for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve configurations.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to an array of PresentationConfig entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Initializes the SDJwtVcInstance with the necessary configurations.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseResponse\n                        \n                    \n                \n            \n            \n                \nparseResponse(res: AuthResponse, requiredFields: string[], keyBindingNonce: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:177\n                        \n                    \n\n\n            \n                \n                        Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            AuthResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requiredFields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyBindingNonce\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \nstorePresentationConfig(vprequest: PresentationConfig, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Stores a new presentation configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                vprequest\n                                            \n                                                            PresentationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe PresentationConfig entity to store.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the stored PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        storeRCID\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeRCID(registrationCertId: string, id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Stores the new registration certificate.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                registrationCertId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the registration certificate to store.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to update.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the registration certificate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        kbVerifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KbVerifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:160\n                        \n                    \n\n            \n                \n                    Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                            \n                                            \n                                                    signature\n                                            \n                                            \n                                                    payload\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sdjwtInstance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SDJwtVcInstance\n\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:22\n                        \n                    \n\n            \n                \n                    Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        statusListFetcher\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:145\n                        \n                    \n\n            \n                \n                    Fetch the status list from the uri.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    uri\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Verifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:122\n                        \n                    \n\n            \n                \n                    Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                                    \n                                                            \nThe data part of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                            \n                                                    signature\n                                                    \n                                                            \nThe signature of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { ConflictException, Injectable, OnModuleInit } from '@nestjs/common';\nimport { digest, ES256 } from '@sd-jwt/crypto-nodejs';\nimport { SDJwtVcInstance } from '@sd-jwt/sd-jwt-vc';\nimport { KbVerifier, Verifier } from '@sd-jwt/types';\nimport { importJWK, JWK, JWTPayload, jwtVerify } from 'jose';\nimport { firstValueFrom } from 'rxjs';\nimport { ResolverService } from '../resolver/resolver.service';\nimport { PresentationConfig } from './entities/presentation-config.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm/repository/Repository';\nimport { AuthResponse } from './dto/auth-response.dto';\n\n/**\n * Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n */\n@Injectable()\nexport class PresentationsService implements OnModuleInit {\n    /**\n     * Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n     */\n    sdjwtInstance: SDJwtVcInstance;\n\n    /**\n     * Constructor for the PresentationsService.\n     * @param httpService - Instance of HttpService for making HTTP requests.\n     * @param resolverService - Instance of ResolverService for resolving DID documents.\n     * @param vpRequestRepository - Repository for managing VP request configurations.\n     */\n    constructor(\n        private httpService: HttpService,\n        private resolverService: ResolverService,\n        @InjectRepository(PresentationConfig)\n        private vpRequestRepository: Repository,\n    ) {}\n\n    /**\n     * Initializes the SDJwtVcInstance with the necessary configurations.\n     */\n    onModuleInit() {\n        this.sdjwtInstance = new SDJwtVcInstance({\n            hasher: digest,\n            verifier: this.verifier.bind(this),\n            kbVerifier: this.kbVerifier.bind(this),\n            statusListFetcher: this.statusListFetcher.bind(this),\n        });\n    }\n\n    /**\n     * Retrieves all presentation configurations for a given tenant.\n     * @param tenantId - The ID of the tenant for which to retrieve configurations.\n     * @returns A promise that resolves to an array of PresentationConfig entities.\n     */\n    getPresentationConfigs(tenantId: string): Promise {\n        return this.vpRequestRepository.find({\n            where: { tenantId },\n            order: { createdAt: 'DESC' },\n        });\n    }\n\n    /**\n     * Stores a new presentation configuration.\n     * @param vprequest - The PresentationConfig entity to store.\n     * @param tenantId - The ID of the tenant for which to store the configuration.\n     * @returns A promise that resolves to the stored PresentationConfig entity.\n     */\n    storePresentationConfig(vprequest: PresentationConfig, tenantId: string) {\n        vprequest.tenantId = tenantId;\n        return this.vpRequestRepository.save(vprequest);\n    }\n\n    /**\n     * Deletes a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to delete.\n     * @param tenantId - The ID of the tenant for which to delete the configuration.\n     * @returns A promise that resolves when the deletion is complete.\n     */\n    deletePresentationConfig(id: string, tenantId: string) {\n        return this.vpRequestRepository.delete({ id, tenantId });\n    }\n\n    /**\n     * Retrieves a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to retrieve.\n     * @param tenantId - The ID of the tenant for which to retrieve the configuration.\n     * @returns A promise that resolves to the requested PresentationConfig entity.\n     */\n    async getPresentationConfig(\n        id: string,\n        tenantId: string,\n    ): Promise {\n        return this.vpRequestRepository\n            .findOneByOrFail({\n                id,\n                tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException('Request ID invalid not found');\n            });\n    }\n\n    /**\n     * Stores the new registration certificate.\n     * @param registrationCertId - The ID of the registration certificate to store.\n     * @param id - The ID of the presentation configuration to update.\n     * @param tenantId - The ID of the tenant for which to store the registration certificate.\n     * @returns\n     */\n    public storeRCID(registrationCertId: string, id: string, tenantId: string) {\n        return this.vpRequestRepository.update(\n            { id, tenantId },\n            { registrationCert: { id: registrationCertId } },\n        );\n    }\n\n    /**\n     * Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n     * @param data - The data part of the SD-JWT-VC.\n     * @param signature - The signature of the SD-JWT-VC.\n     * @returns\n     */\n    verifier: Verifier = async (data, signature) => {\n        const instance = new SDJwtVcInstance({\n            hasher: digest,\n        });\n        const decodedVC = await instance.decode(`${data}.${signature}`);\n        const payload = decodedVC.jwt?.payload as JWTPayload;\n        const header = decodedVC.jwt?.header as JWK;\n        const publicKey = await this.resolverService.resolvePublicKey(\n            payload,\n            header,\n        );\n        const verify = await ES256.getVerifier(publicKey);\n        return verify(data, signature).catch((err) => {\n            console.log(err);\n            return false;\n        });\n    };\n\n    /**\n     * Fetch the status list from the uri.\n     * @param uri\n     * @returns\n     */\n    private statusListFetcher: (uri: string) => Promise = async (\n        uri: string,\n    ) => {\n        return firstValueFrom(this.httpService.get(uri)).then(\n            (res) => res.data,\n        );\n    };\n\n    /**\n     * Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n     * @param data\n     * @param signature\n     * @param payload\n     * @returns\n     */\n    private kbVerifier: KbVerifier = async (data, signature, payload) => {\n        if (!payload.cnf) {\n            throw new Error('No cnf found in the payload');\n        }\n        const key = await importJWK(payload.cnf.jwk as JWK, 'ES256');\n        return jwtVerify(`${data}.${signature}`, key).then(\n            () => true,\n            () => false,\n        );\n    };\n\n    /**\n     * Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n     * @param res\n     * @param requiredFields\n     * @returns\n     */\n    parseResponse(\n        res: AuthResponse,\n        requiredFields: string[],\n        keyBindingNonce: string,\n    ) {\n        const attestations = Object.keys(res.vp_token);\n        const att = attestations.map((att) =>\n            this.sdjwtInstance\n                .verify(res.vp_token[att], {\n                    requiredClaimKeys: requiredFields,\n                    keyBindingNonce,\n                })\n                .then(\n                    (result) => {\n                        return {\n                            id: att,\n                            values: {\n                                ...result.payload,\n                                cnf: undefined, // remove cnf for simplicity\n                                status: undefined, // remove status for simplicity\n                            },\n                        };\n                    },\n                    (err) => ({\n                        // when the verification fails, it will return an error object                (err) => ({\n                        id: att,\n                        error: err.message,\n                    }),\n                ),\n        );\n        return Promise.all(att);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PresentedData.html":{"url":"interfaces/PresentedData.html","title":"interface - PresentedData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PresentedData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            test/webhook/src/index.ts\n        \n\n\n            \n                Description\n            \n            \n                Assuming we receive a PID credentials with the address selectivly disclosed\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            credentials\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        credentials\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        credentials:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface PresentedData {\n\tcredentials: {\n\t\tid: string;\n\t\tvalues: {\n\t\t\taddress: {\n\t\t\t\tlocality: string;\n\t\t\t};\n\t\t};\n\t}[];\n}\n\n/**\n * Response for the citizen credential.\n */\ninterface ProcessResponse {\n\tcitizen: {\n\t\ttown: string;\n\t};\n}\n\nasync function handleRequest(request: Request): Promise {\n\tconst url = new URL(request.url);\n\n\tif (request.method === 'POST' && url.pathname === '/process') {\n\t\tconst presented: PresentedData = await request.json();\n\t\tconst res: ProcessResponse = {\n\t\t\tcitizen: {\n\t\t\t\ttown: `You live in ${presented.credentials[0].values.address.locality}`,\n\t\t\t},\n\t\t};\n\t\treturn Response.json(res, { status: 200 });\n\t}\n\n\tif (request.method === 'POST' && url.pathname === '/consume') {\n\t\tconst expextedApiKey = 'foo-bar'; // This should be securely stored and retrieved\n\t\tconsole.log(request.headers);\n\t\tconst apiKey = request.headers.get('x-api-key');\n\t\tif (apiKey !== expextedApiKey) {\n\t\t\treturn new Response('Unauthorized', { status: 401 });\n\t\t}\n\n\t\tconst presented = await request.json();\n\t\tconsole.log('Received consume webhook:');\n\t\tconsole.log(JSON.stringify(presented, null, 2));\n\t\treturn new Response(null, { status: 200 });\n\t}\n\n\treturn new Response('Not found', { status: 404 });\n}\n\nexport default {\n\tfetch: handleRequest,\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProcessResponse.html":{"url":"interfaces/ProcessResponse.html","title":"interface - ProcessResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProcessResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            test/webhook/src/index.ts\n        \n\n\n            \n                Description\n            \n            \n                Response for the citizen credential.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            citizen\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        citizen\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        citizen:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface PresentedData {\n\tcredentials: {\n\t\tid: string;\n\t\tvalues: {\n\t\t\taddress: {\n\t\t\t\tlocality: string;\n\t\t\t};\n\t\t};\n\t}[];\n}\n\n/**\n * Response for the citizen credential.\n */\ninterface ProcessResponse {\n\tcitizen: {\n\t\ttown: string;\n\t};\n}\n\nasync function handleRequest(request: Request): Promise {\n\tconst url = new URL(request.url);\n\n\tif (request.method === 'POST' && url.pathname === '/process') {\n\t\tconst presented: PresentedData = await request.json();\n\t\tconst res: ProcessResponse = {\n\t\t\tcitizen: {\n\t\t\t\ttown: `You live in ${presented.credentials[0].values.address.locality}`,\n\t\t\t},\n\t\t};\n\t\treturn Response.json(res, { status: 200 });\n\t}\n\n\tif (request.method === 'POST' && url.pathname === '/consume') {\n\t\tconst expextedApiKey = 'foo-bar'; // This should be securely stored and retrieved\n\t\tconsole.log(request.headers);\n\t\tconst apiKey = request.headers.get('x-api-key');\n\t\tif (apiKey !== expextedApiKey) {\n\t\t\treturn new Response('Unauthorized', { status: 401 });\n\t\t}\n\n\t\tconst presented = await request.json();\n\t\tconsole.log('Received consume webhook:');\n\t\tconsole.log(JSON.stringify(presented, null, 2));\n\t\treturn new Response(null, { status: 200 });\n\t}\n\n\treturn new Response('Not found', { status: 404 });\n}\n\nexport default {\n\tfetch: handleRequest,\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QuerySerializerOptions.html":{"url":"interfaces/QuerySerializerOptions.html","title":"interface - QuerySerializerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QuerySerializerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/bodySerializer.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowReserved\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            array\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            object\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowReserved\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowReserved:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        array\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        array:         SerializerOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SerializerOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        object\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        object:         SerializerOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SerializerOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import type {\n    ArrayStyle,\n    ObjectStyle,\n    SerializerOptions,\n} from './pathSerializer';\n\nexport type QuerySerializer = (query: Record) => string;\n\nexport type BodySerializer = (body: any) => any;\n\nexport interface QuerySerializerOptions {\n    allowReserved?: boolean;\n    array?: SerializerOptions;\n    object?: SerializerOptions;\n}\n\nconst serializeFormDataPair = (\n    data: FormData,\n    key: string,\n    value: unknown,\n): void => {\n    if (typeof value === 'string' || value instanceof Blob) {\n        data.append(key, value);\n    } else {\n        data.append(key, JSON.stringify(value));\n    }\n};\n\nconst serializeUrlSearchParamsPair = (\n    data: URLSearchParams,\n    key: string,\n    value: unknown,\n): void => {\n    if (typeof value === 'string') {\n        data.append(key, value);\n    } else {\n        data.append(key, JSON.stringify(value));\n    }\n};\n\nexport const formDataBodySerializer = {\n    bodySerializer:  | Array>,\n    >(\n        body: T,\n    ): FormData => {\n        const data = new FormData();\n\n        Object.entries(body).forEach(([key, value]) => {\n            if (value === undefined || value === null) {\n                return;\n            }\n            if (Array.isArray(value)) {\n                value.forEach((v) => serializeFormDataPair(data, key, v));\n            } else {\n                serializeFormDataPair(data, key, value);\n            }\n        });\n\n        return data;\n    },\n};\n\nexport const jsonBodySerializer = {\n    bodySerializer: (body: T): string =>\n        JSON.stringify(body, (_key, value) =>\n            typeof value === 'bigint' ? value.toString() : value,\n        ),\n};\n\nexport const urlSearchParamsBodySerializer = {\n    bodySerializer:  | Array>,\n    >(\n        body: T,\n    ): string => {\n        const data = new URLSearchParams();\n\n        Object.entries(body).forEach(([key, value]) => {\n            if (value === undefined || value === null) {\n                return;\n            }\n            if (Array.isArray(value)) {\n                value.forEach((v) =>\n                    serializeUrlSearchParamsPair(data, key, v),\n                );\n            } else {\n                serializeUrlSearchParamsPair(data, key, value);\n            }\n        });\n\n        return data.toString();\n    },\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistrarConfig.html":{"url":"classes/RegistrarConfig.html","title":"class - RegistrarConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistrarConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/registrar-config.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrarConfig class represents the configuration for the registrar service.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                accessCertificateId\n                            \n                            \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        accessCertificateId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar-config.ts:12\n                        \n                    \n\n            \n                \n                    ID of the access certificate.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar-config.ts:8\n                        \n                    \n\n            \n                \n                    ID of the relying party.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class RegistrarConfig {\n    /**\n     * ID of the relying party.\n     */\n    id?: string;\n    /**\n     * ID of the access certificate.\n     */\n    accessCertificateId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RegistrarModule.html":{"url":"modules/RegistrarModule.html","title":"module - RegistrarModule","body":"\n                   \n\n\n\n\n    Modules\n    RegistrarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_imports\n\n\n\ncluster_RegistrarModule_providers\n\n\n\ncluster_RegistrarModule_exports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/registrar/registrar.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            RegistrarModule is responsible for managing the registrar service.\nIt provides the RegistrarService and imports necessary modules.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            PresentationsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RegistrarService } from './registrar.service';\nimport { CryptoModule } from '../crypto/crypto.module';\nimport * as Joi from 'joi';\nimport { PresentationsModule } from '../verifier/presentations/presentations.module';\n\n/**\n * Validation schema for the registrar module.\n * Defines the required environment variables and their types.\n */\nexport const REGISTRAR_VALIDATION_SCHEMA = {\n    REGISTRAR_URL: Joi.string(),\n    OIDC_ISSUER_URL: Joi.string().when('REGISTRAR_URL', {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    OIDC_CLIENT_ID: Joi.string().when('REGISTRAR_URL', {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    OIDC_CLIENT_SECRET: Joi.string().when('REGISTRAR_URL', {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n};\n\n/**\n * RegistrarModule is responsible for managing the registrar service.\n * It provides the RegistrarService and imports necessary modules.\n */\n@Module({\n    imports: [CryptoModule, PresentationsModule],\n    providers: [RegistrarService],\n    exports: [RegistrarService],\n})\nexport class RegistrarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RegistrarService.html":{"url":"injectables/RegistrarService.html","title":"injectable - RegistrarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RegistrarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/registrar.service.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrarService is responsible for managing the interaction with the registrar,\nincluding adding relying parties, access certificates, and registration certificates.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                accessToken\n                            \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                oauth2Client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                addAccessCertificate\n                            \n                            \n                                    Async\n                                addRegistrationCertificate\n                            \n                            \n                                addRp\n                            \n                            \n                                    Async\n                                getAccessCertificateId\n                            \n                            \n                                isEnabled\n                            \n                            \n                                    Private\n                                loadConfig\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                    \n                                    Async\n                                onTenantInit\n                            \n                            \n                                    Async\n                                refreshAccessToken\n                            \n                            \n                                    Private\n                                saveConfig\n                            \n                            \n                                    Private\n                                storeExistingRp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, presentationsService: PresentationsService)\n                    \n                \n                        \n                            \n                                Defined in src/registrar/registrar.service.ts:61\n                            \n                        \n\n                \n                    \n                            Constructor for the RegistrarService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ConfigService for accessing configuration values.\n\n\n                                                        \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of CryptoService for cryptographic operations.\n\n\n                                                        \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of PresentationsService for handling presentations.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        addAccessCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addAccessCertificate(config: RegistrarConfig, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:231\n                        \n                    \n\n\n            \n                \n                        Add a new access certificate to the registrar.\nThis is only needed once, when the access certificate is created.\nIf the access certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            RegistrarConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addRegistrationCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addRegistrationCertificate(req: RegistrationCertificateRequest, dcql_query: any, requestId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:272\n                        \n                    \n\n\n            \n                \n                        Add a new registration certificate to the registrar.\nThis is only needed once, when the registration certificate is created.\nIf the registration certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RegistrationCertificateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dcql_query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addRp\n                        \n                    \n                \n            \n            \n                \naddRp(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:161\n                        \n                    \n\n\n            \n                \n                        Adds a new relying party to the registrar.\nThis is only needed once, when the relying party is created.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAccessCertificateId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAccessCertificateId(config: RegistrarConfig, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:204\n                        \n                    \n\n\n            \n                \n                        Get the access certificate ID from the registrar.\nIf there is no access certificate ID in the config, it will add a new one.\nIf there is one, it will check if it is still valid.\nIf it is revoked, it will add a new one.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            RegistrarConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEnabled\n                        \n                    \n                \n            \n            \n                \nisEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Checks if the registrar service is enabled based on the configuration.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the registrar service is enabled, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadConfig(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:329\n                        \n                    \n\n\n            \n                \n                        Load the registrar configuration from the config file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         RegistrarConfig\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:117\n                        \n                    \n\n\n            \n                \n                        This function is called when the application starts.\nIt will refresh the access token for the registrar.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:78\n                        \n                    \n\n\n            \n                \n                        Initializes the OAuth2 client and registrar client with the necessary configurations.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(TENANT_EVENTS.TENANT_KEYS, {async: true})\n                \n            \n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:129\n                        \n                    \n\n\n            \n                \n                        This function is called when a tenant is initialized.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshAccessToken()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:144\n                        \n                    \n\n\n            \n                \n                        Refreshes the access token for the registrar using client credentials.\nThis method is called periodically to ensure the access token is valid.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        saveConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveConfig(config: RegistrarConfig, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:352\n                        \n                    \n\n\n            \n                \n                        Save the registrar configuration to the config file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            RegistrarConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        storeExistingRp\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeExistingRp(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:186\n                        \n                    \n\n\n            \n                \n                        Stores the existing relying party ID based on the name.\nThis is used when the relying party already exists in the registrar.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the relying party.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The ID of the existing relying party.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:61\n                        \n                    \n\n            \n                \n                    Access token for authenticating requests to the registrar.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:57\n                        \n                    \n\n            \n                \n                    Client for interacting with the registrar API.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oauth2Client\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:53\n                        \n                    \n\n            \n                \n                    OAuth2 client for interacting with the OIDC provider.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { OAuth2Client } from '@badgateway/oauth2-client';\nimport { client } from './generated/client.gen';\nimport {\n    accessCertificateControllerFindOne,\n    accessCertificateControllerRegister,\n    registrationCertificateControllerAll,\n    registrationCertificateControllerRegister,\n    relyingPartyControllerFindAll,\n    relyingPartyControllerRegister,\n} from './generated';\nimport { CryptoService } from '../crypto/crypto.service';\nimport { RegistrationCertificateRequest } from '../verifier/presentations/dto/vp-request.dto';\nimport { PresentationsService } from '../verifier/presentations/presentations.service';\nimport { existsSync, readFileSync, writeFileSync } from 'node:fs';\nimport { RegistrarConfig } from './registrar-config';\nimport { join } from 'node:path';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { TENANT_EVENTS } from '../auth/tenant-events';\n\n/**\n * Repsonse of access certificate request.\n */\ninterface AccessCertificateResponse {\n    /**\n     * Unique identifier of the access certificate.\n     */\n    id: string;\n    /**\n     * The public key in PEM format.\n     */\n    crt: string;\n    /**\n     * Indicates if the access certificate is revoked.\n     */\n    revoked?: boolean;\n}\n\n/**\n * RegistrarService is responsible for managing the interaction with the registrar,\n * including adding relying parties, access certificates, and registration certificates.\n */\n@Injectable()\nexport class RegistrarService implements OnApplicationBootstrap, OnModuleInit {\n    /**\n     * OAuth2 client for interacting with the OIDC provider.\n     */\n    private oauth2Client: OAuth2Client;\n    /**\n     * Client for interacting with the registrar API.\n     */\n    private client: typeof client;\n    /**\n     * Access token for authenticating requests to the registrar.\n     */\n    private accessToken: string;\n\n    /**\n     * Constructor for the RegistrarService.\n     * @param configService - Instance of ConfigService for accessing configuration values.\n     * @param cryptoService - Instance of CryptoService for cryptographic operations.\n     * @param presentationsService - Instance of PresentationsService for handling presentations.\n     */\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private presentationsService: PresentationsService,\n    ) {}\n\n    /**\n     * Initializes the OAuth2 client and registrar client with the necessary configurations.\n     */\n    onModuleInit() {\n        //when not set, we will not use the registrar\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const oidcIssuerUrl =\n            this.configService.getOrThrow('OIDC_ISSUER_URL');\n        const clientId =\n            this.configService.getOrThrow('OIDC_CLIENT_ID');\n        const clientSecret =\n            this.configService.getOrThrow('OIDC_CLIENT_SECRET');\n\n        this.oauth2Client = new OAuth2Client({\n            server: `${oidcIssuerUrl}/protocol/openid-connect/token`,\n            clientId,\n            clientSecret,\n            discoveryEndpoint: `${oidcIssuerUrl}/.well-known/openid-configuration`,\n        });\n\n        this.client = client;\n        this.client.setConfig({\n            baseUrl: this.configService.getOrThrow('REGISTRAR_URL'),\n            auth: () => this.accessToken,\n        });\n    }\n\n    /**\n     * Checks if the registrar service is enabled based on the configuration.\n     * @returns True if the registrar service is enabled, false otherwise.\n     */\n    isEnabled() {\n        return !!this.configService.get('REGISTRAR_URL');\n    }\n\n    /**\n     * This function is called when the application starts.\n     * It will refresh the access token for the registrar.\n     */\n    async onApplicationBootstrap() {\n        if (!this.configService.get('REGISTRAR_URL')) {\n            return;\n        }\n        await this.refreshAccessToken();\n    }\n\n    /**\n     * This function is called when a tenant is initialized.\n     * @param tenantId\n     */\n    @OnEvent(TENANT_EVENTS.TENANT_KEYS, { async: true })\n    async onTenantInit(tenantId: string) {\n        if (!this.isEnabled()) {\n            return;\n        }\n        const config = this.loadConfig(tenantId);\n        if (!config.id) {\n            config.id = await this.addRp(tenantId);\n        }\n        await this.getAccessCertificateId(config, tenantId);\n    }\n\n    /**\n     * Refreshes the access token for the registrar using client credentials.\n     * This method is called periodically to ensure the access token is valid.\n     */\n    async refreshAccessToken() {\n        await this.oauth2Client.clientCredentials().then((token) => {\n            this.accessToken = token.accessToken;\n            const date = new Date();\n            const expirationDate = new Date(token.expiresAt as number);\n            setTimeout(\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                () => this.refreshAccessToken(),\n                expirationDate.getTime() - date.getTime() - 1000,\n            );\n        });\n    }\n\n    /**\n     * Adds a new relying party to the registrar.\n     * This is only needed once, when the relying party is created.\n     */\n    addRp(tenantId: string): Promise {\n        const name = this.configService.getOrThrow('RP_NAME');\n        return relyingPartyControllerRegister({\n            client: this.client,\n            body: {\n                name,\n            },\n        }).then(async (response) => {\n            const config = this.loadConfig(tenantId);\n            if (response.error) {\n                config.id = await this.storeExistingRp(name);\n            } else {\n                config.id = response.data!['id'];\n            }\n            this.saveConfig(config, tenantId);\n            return response.data!['id'];\n        });\n    }\n\n    /**\n     * Stores the existing relying party ID based on the name.\n     * This is used when the relying party already exists in the registrar.\n     * @param name - The name of the relying party.\n     * @returns The ID of the existing relying party.\n     */\n    private storeExistingRp(name: string) {\n        return relyingPartyControllerFindAll({\n            client: this.client,\n            query: {\n                name,\n            },\n        }).then((response) => {\n            return response.data!.find((item) => item.name === name)?.id;\n        });\n    }\n\n    /**\n     * Get the access certificate ID from the registrar.\n     * If there is no access certificate ID in the config, it will add a new one.\n     * If there is one, it will check if it is still valid.\n     * If it is revoked, it will add a new one.\n     * @param config\n     */\n    async getAccessCertificateId(config: RegistrarConfig, tenantId: string) {\n        // if there is no access certificate ID in the config, we need to add it\n        if (!config.accessCertificateId) {\n            await this.addAccessCertificate(config, tenantId);\n        }\n        // if there is one, check if it is still valid\n        await accessCertificateControllerFindOne({\n            client: this.client,\n            path: { rp: config.id, id: config.accessCertificateId! },\n        }).then((res) => {\n            if (res.error) {\n                console.error('Error finding access certificate:', res.error);\n            }\n            const data = res.data as AccessCertificateResponse;\n            if (data.revoked) {\n                console.warn('Access certificate is revoked, adding a new one');\n                return this.addAccessCertificate(config, tenantId);\n            }\n        });\n    }\n\n    /**\n     * Add a new access certificate to the registrar.\n     * This is only needed once, when the access certificate is created.\n     * If the access certificate already exists, it will be returned.\n     * @returns\n     */\n    private async addAccessCertificate(\n        config: RegistrarConfig,\n        tenantId: string,\n    ): Promise {\n        const host = this.configService\n            .getOrThrow('PUBLIC_URL')\n            .replace('https://', '');\n        return accessCertificateControllerRegister({\n            client: this.client,\n            body: {\n                publicKey: await this.cryptoService.keyService.getPublicKey(\n                    'pem',\n                    tenantId,\n                ),\n                dns: [host],\n            },\n            path: {\n                rp: config.id,\n            },\n        }).then((res) => {\n            if (res.error) {\n                console.error('Error adding access certificate:', res.error);\n                throw new Error('Error adding access certificate');\n            }\n            //store the cert\n            this.cryptoService.storeAccessCertificate(\n                res.data!['crt'],\n                tenantId,\n            );\n            config.accessCertificateId = res.data!['id'];\n            this.saveConfig(config, tenantId);\n            return res.data!['id'];\n        });\n    }\n\n    /**\n     * Add a new registration certificate to the registrar.\n     * This is only needed once, when the registration certificate is created.\n     * If the registration certificate already exists, it will be returned.\n     * @returns\n     */\n    async addRegistrationCertificate(\n        req: RegistrationCertificateRequest,\n        //TODO: check if the dcql_query is covered by the registration certificate. If not, we need to throw an error since we do not know the new purpose for it.\n        dcql_query: any,\n        requestId: string,\n        tenantId: string,\n    ) {\n        const rp = this.loadConfig(tenantId).id;\n\n        //TODO: need to check if the access certificate is bound to the access certificate with the subject. Also that the requested fields are matching.\n\n        const certs =\n            (await registrationCertificateControllerAll({\n                client: this.client,\n                path: {\n                    rp,\n                },\n            }).then((res) =>\n                res.data?.filter(\n                    (cert) =>\n                        cert.revoked == null && cert.id === (req.id as string),\n                ),\n            )) || [];\n\n        if (certs?.length > 0) {\n            return certs[0].jwt;\n        }\n\n        return registrationCertificateControllerRegister({\n            client: this.client,\n            path: {\n                rp,\n            },\n            body: req.body,\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\n                    'Error adding registration certificate:',\n                    res.error,\n                );\n                throw new Error('Error adding registration certificate');\n            }\n\n            //TODO: write the ID to the config so its easier to use it. Easier than writing the comparison algorithm (any maybe someone wants to use a different one)\n            await this.presentationsService.storeRCID(\n                res.data!['id'],\n                requestId,\n                tenantId,\n            );\n            return res.data!['jwt'];\n        });\n    }\n\n    /**\n     * Load the registrar configuration from the config file.\n     * @returns\n     */\n    private loadConfig(tenantId: string): RegistrarConfig {\n        const filePath = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'registrar.json',\n        );\n\n        if (!existsSync(filePath)) {\n            // If the config file does not exist, create an empty config\n            const initialConfig: RegistrarConfig = {};\n            writeFileSync(filePath, JSON.stringify(initialConfig, null, 2));\n            return initialConfig;\n        }\n        const config = JSON.parse(\n            readFileSync(filePath, 'utf-8'),\n        ) as RegistrarConfig;\n        return config;\n    }\n\n    /**\n     * Save the registrar configuration to the config file.\n     * @param config\n     */\n    private saveConfig(config: RegistrarConfig, tenantId: string) {\n        const filePath = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'registrar.json',\n        );\n        writeFileSync(filePath, JSON.stringify(config, null, 2));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistrationCertificateRequest.html":{"url":"classes/RegistrationCertificateRequest.html","title":"class - RegistrationCertificateRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistrationCertificateRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/vp-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrationCertificateRequest DTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                body\n                            \n                            \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RegistrationCertificateCreation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:17\n                        \n                    \n\n            \n                \n                    The body of the registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:12\n                        \n                    \n\n            \n                \n                    Identifier of the registration certificate that got issued.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsString } from 'class-validator';\nimport { RegistrationCertificateCreation } from '../../../registrar/generated';\n\n/**\n * RegistrationCertificateRequest DTO\n */\nexport class RegistrationCertificateRequest {\n    /**\n     * Identifier of the registration certificate that got issued.\n     */\n    @IsString()\n    id?: string;\n    /**\n     * The body of the registration certificate request containing the necessary details.\n     */\n    @IsObject()\n    body: RegistrationCertificateCreation;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestOptions.html":{"url":"interfaces/RequestOptions.html","title":"interface - RequestOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Config\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            body\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            query\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            security\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Any body that you want to add to your request.\nhttps://developer.mozilla.org/docs/Web/API/fetch#body\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        query:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        security\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        security:         ReadonlyArray\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ReadonlyArray\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Security mechanism(s) to use for the request.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:     Url\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Url\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import type { Auth } from '../core/auth';\nimport type { Client as CoreClient, Config as CoreConfig } from '../core/types';\nimport type { Middleware } from './utils';\n\nexport type ResponseStyle = 'data' | 'fields';\n\nexport interface Config\n    extends Omit,\n        CoreConfig {\n    /**\n     * Base URL for all requests made by this client.\n     */\n    baseUrl?: T['baseUrl'];\n    /**\n     * Fetch API implementation. You can use this option to provide a custom\n     * fetch instance.\n     *\n     * @default globalThis.fetch\n     */\n    fetch?: (request: Request) => ReturnType;\n    /**\n     * Please don't use the Fetch client for Next.js applications. The `next`\n     * options won't have any effect.\n     *\n     * Install {@link https://www.npmjs.com/package/@hey-api/client-next `@hey-api/client-next`} instead.\n     */\n    next?: never;\n    /**\n     * Return the response data parsed in a specified format. By default, `auto`\n     * will infer the appropriate method from the `Content-Type` response header.\n     * You can override this behavior with any of the {@link Body} methods.\n     * Select `stream` if you don't want to parse response data at all.\n     *\n     * @default 'auto'\n     */\n    parseAs?:\n        | 'arrayBuffer'\n        | 'auto'\n        | 'blob'\n        | 'formData'\n        | 'json'\n        | 'stream'\n        | 'text';\n    /**\n     * Should we return only data or multiple fields (data, error, response, etc.)?\n     *\n     * @default 'fields'\n     */\n    responseStyle?: ResponseStyle;\n    /**\n     * Throw an error instead of returning it in the response?\n     *\n     * @default false\n     */\n    throwOnError?: T['throwOnError'];\n}\n\nexport interface RequestOptions extends Config {\n    /**\n     * Any body that you want to add to your request.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#body}\n     */\n    body?: unknown;\n    path?: Record;\n    query?: Record;\n    /**\n     * Security mechanism(s) to use for the request.\n     */\n    security?: ReadonlyArray;\n    url: Url;\n}\n\nexport type RequestResult = ThrowOnError extends true\n    ? Promise\n                  ? TData[keyof TData]\n                  : TData\n              : {\n                    data: TData extends Record\n                        ? TData[keyof TData]\n                        : TData;\n                    request: Request;\n                    response: Response;\n                }\n      >\n    : Promise\n                          ? TData[keyof TData]\n                          : TData)\n                    | undefined\n              : (\n                    | {\n                          data: TData extends Record\n                              ? TData[keyof TData]\n                              : TData;\n                          error: undefined;\n                      }\n                    | {\n                          data: undefined;\n                          error: TError extends Record\n                              ? TError[keyof TError]\n                              : TError;\n                      }\n                ) & {\n                    request: Request;\n                    response: Response;\n                }\n      >;\n\nexport interface ClientOptions {\n    baseUrl?: string;\n    responseStyle?: ResponseStyle;\n    throwOnError?: boolean;\n}\n\ntype MethodFn = (\n    options: Omit, 'method'>,\n) => RequestResult;\n\ntype RequestFn = (\n    options: Omit, 'method'> &\n        Pick>, 'method'>,\n) => RequestResult;\n\ntype BuildUrlFn = ;\n        query?: Record;\n        url: string;\n    },\n>(\n    options: Pick & Options,\n) => string;\n\nexport type Client = CoreClient & {\n    interceptors: Middleware;\n};\n\n/**\n * The `createClientConfig()` function will be called on client initialization\n * and the returned object will become the client's initial configuration.\n *\n * You may want to initialize your client this way instead of calling\n * `setConfig()`. This is useful for example if you're using Next.js\n * to ensure your client always has the correct values.\n */\nexport type CreateClientConfig = (\n    override?: Config,\n) => Config & T>;\n\nexport interface TDataShape {\n    body?: unknown;\n    headers?: unknown;\n    path?: unknown;\n    query?: unknown;\n    url: string;\n}\n\ntype OmitKeys = Pick>;\n\nexport type Options = OmitKeys,\n    'body' | 'path' | 'query' | 'url'\n> &\n    Omit;\n\nexport type OptionsLegacyParser = TData extends { body?: any }\n    ? TData extends { headers?: any }\n        ? OmitKeys,\n              'body' | 'headers' | 'url'\n          > &\n              TData\n        : OmitKeys,\n              'body' | 'url'\n          > &\n              TData &\n              Pick, 'headers'>\n    : TData extends { headers?: any }\n      ? OmitKeys,\n            'headers' | 'url'\n        > &\n            TData &\n            Pick, 'body'>\n      : OmitKeys, 'url'> & TData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ResolverModule.html":{"url":"modules/ResolverModule.html","title":"module - ResolverModule","body":"\n                   \n\n\n\n\n    Modules\n    ResolverModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_exports\n\n\n\ncluster_ResolverModule_providers\n\n\n\n\nResolverService \n\nResolverService \n\n\n\nResolverModule\n\nResolverModule\n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/resolver/resolver.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ResolverService } from './resolver.service';\nimport { HttpModule } from '@nestjs/axios';\n\n@Module({\n    imports: [HttpModule],\n    providers: [ResolverService],\n    exports: [ResolverService],\n})\nexport class ResolverModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResolverService.html":{"url":"injectables/ResolverService.html","title":"injectable - ResolverService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResolverService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/resolver.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for resolving public keys from JWT payloads and headers.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                resolvePublicKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/resolver/resolver.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resolvePublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolvePublicKey(payload: JWTPayload, header: JWK)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/resolver/resolver.service.ts:21\n                        \n                    \n\n\n            \n                \n                        Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWK\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { JWK, JWTPayload } from 'jose';\nimport { HttpService } from '@nestjs/axios';\nimport { firstValueFrom } from 'rxjs';\nimport { X509Certificate } from 'node:crypto';\nimport { IssuerMetadata } from './dto/issuer-metadata.dto';\n\n/**\n * Service for resolving public keys from JWT payloads and headers.\n */\n@Injectable()\nexport class ResolverService {\n    constructor(private httpService: HttpService) {}\n\n    /**\n     * Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n     * @param payload\n     * @param header\n     * @returns\n     */\n    async resolvePublicKey(payload: JWTPayload, header: JWK): Promise {\n        if (!payload.iss) {\n            throw new Error('Issuer not found');\n        }\n\n        if (header.x5c) {\n            //TODO: validate the certificate and the chain of trust!\n            const certs = header.x5c.map(\n                (cert) => new X509Certificate(Buffer.from(cert, 'base64')),\n            );\n            const cert = certs[0];\n            if (!cert.subjectAltName?.includes(payload.iss.split('://')[1])) {\n                throw new Error('Subject and issuer do not match');\n            }\n            return cert.publicKey.export({ format: 'jwk' }) as JWK;\n        }\n        //checl if the key is in the header as jwk\n        if (header['jwk']) {\n            return header['jwk'] as JWK;\n        }\n\n        const response = await firstValueFrom(\n            this.httpService.get(\n                `${payload.iss}/.well-known/jwt-vc-issuer`,\n            ),\n        ).then(\n            (r) => r.data,\n            () => {\n                throw new ConflictException('Issuer not reachable');\n            },\n        );\n        const key = response.jwks.keys.find((key) => key.kid === header.kid);\n        if (!key) {\n            throw new Error('Key not found');\n        }\n        return key;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SchemaResponse.html":{"url":"classes/SchemaResponse.html","title":"class - SchemaResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SchemaResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/dto/schema-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                $schema\n                            \n                            \n                                properties\n                            \n                            \n                                required\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        $schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'https://json-schema.org/draft/2020-12/schema'\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/schema-response.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/schema-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        required\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/schema-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'object'\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/schema-response.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class SchemaResponse {\n    '$schema' = 'https://json-schema.org/draft/2020-12/schema';\n    type = 'object';\n    properties: Record;\n    required: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializeOptions.html":{"url":"interfaces/SerializeOptions.html","title":"interface - SerializeOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SerializeOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/pathSerializer.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            SerializePrimitiveOptions\n                            SerializerOptions\n            \n\n\n\n\n    \n\n\n    \n        interface SerializeOptions\n    extends SerializePrimitiveOptions,\n        SerializerOptions {}\n\ninterface SerializePrimitiveOptions {\n    allowReserved?: boolean;\n    name: string;\n}\n\nexport interface SerializerOptions {\n    /**\n     * @default true\n     */\n    explode: boolean;\n    style: T;\n}\n\nexport type ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\nexport type ArraySeparatorStyle = ArrayStyle | MatrixStyle;\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\nexport type ObjectStyle = 'form' | 'deepObject';\ntype ObjectSeparatorStyle = ObjectStyle | MatrixStyle;\n\ninterface SerializePrimitiveParam extends SerializePrimitiveOptions {\n    value: string;\n}\n\nexport const separatorArrayExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const separatorArrayNoExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'form':\n            return ',';\n        case 'pipeDelimited':\n            return '|';\n        case 'spaceDelimited':\n            return '%20';\n        default:\n            return ',';\n    }\n};\n\nexport const separatorObjectExplode = (style: ObjectSeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const serializeArrayParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n}: SerializeOptions & {\n    value: unknown[];\n}) => {\n    if (!explode) {\n        const joinedValues = (\n            allowReserved\n                ? value\n                : value.map((v) => encodeURIComponent(v as string))\n        ).join(separatorArrayNoExplode(style));\n        switch (style) {\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            case 'simple':\n                return joinedValues;\n            default:\n                return `${name}=${joinedValues}`;\n        }\n    }\n\n    const separator = separatorArrayExplode(style);\n    const joinedValues = value\n        .map((v) => {\n            if (style === 'label' || style === 'simple') {\n                return allowReserved ? v : encodeURIComponent(v as string);\n            }\n\n            return serializePrimitiveParam({\n                allowReserved,\n                name,\n                value: v as string,\n            });\n        })\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\nexport const serializePrimitiveParam = ({\n    allowReserved,\n    name,\n    value,\n}: SerializePrimitiveParam) => {\n    if (value === undefined || value === null) {\n        return '';\n    }\n\n    if (typeof value === 'object') {\n        throw new Error(\n            'Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.',\n        );\n    }\n\n    return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\n};\n\nexport const serializeObjectParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n    valueOnly,\n}: SerializeOptions & {\n    value: Record | Date;\n    valueOnly?: boolean;\n}) => {\n    if (value instanceof Date) {\n        return valueOnly\n            ? value.toISOString()\n            : `${name}=${value.toISOString()}`;\n    }\n\n    if (style !== 'deepObject' && !explode) {\n        let values: string[] = [];\n        Object.entries(value).forEach(([key, v]) => {\n            values = [\n                ...values,\n                key,\n                allowReserved ? (v as string) : encodeURIComponent(v as string),\n            ];\n        });\n        const joinedValues = values.join(',');\n        switch (style) {\n            case 'form':\n                return `${name}=${joinedValues}`;\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            default:\n                return joinedValues;\n        }\n    }\n\n    const separator = separatorObjectExplode(style);\n    const joinedValues = Object.entries(value)\n        .map(([key, v]) =>\n            serializePrimitiveParam({\n                allowReserved,\n                name: style === 'deepObject' ? `${name}[${key}]` : key,\n                value: v as string,\n            }),\n        )\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializePrimitiveOptions.html":{"url":"interfaces/SerializePrimitiveOptions.html","title":"interface - SerializePrimitiveOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SerializePrimitiveOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/pathSerializer.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowReserved\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowReserved\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowReserved:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface SerializeOptions\n    extends SerializePrimitiveOptions,\n        SerializerOptions {}\n\ninterface SerializePrimitiveOptions {\n    allowReserved?: boolean;\n    name: string;\n}\n\nexport interface SerializerOptions {\n    /**\n     * @default true\n     */\n    explode: boolean;\n    style: T;\n}\n\nexport type ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\nexport type ArraySeparatorStyle = ArrayStyle | MatrixStyle;\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\nexport type ObjectStyle = 'form' | 'deepObject';\ntype ObjectSeparatorStyle = ObjectStyle | MatrixStyle;\n\ninterface SerializePrimitiveParam extends SerializePrimitiveOptions {\n    value: string;\n}\n\nexport const separatorArrayExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const separatorArrayNoExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'form':\n            return ',';\n        case 'pipeDelimited':\n            return '|';\n        case 'spaceDelimited':\n            return '%20';\n        default:\n            return ',';\n    }\n};\n\nexport const separatorObjectExplode = (style: ObjectSeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const serializeArrayParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n}: SerializeOptions & {\n    value: unknown[];\n}) => {\n    if (!explode) {\n        const joinedValues = (\n            allowReserved\n                ? value\n                : value.map((v) => encodeURIComponent(v as string))\n        ).join(separatorArrayNoExplode(style));\n        switch (style) {\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            case 'simple':\n                return joinedValues;\n            default:\n                return `${name}=${joinedValues}`;\n        }\n    }\n\n    const separator = separatorArrayExplode(style);\n    const joinedValues = value\n        .map((v) => {\n            if (style === 'label' || style === 'simple') {\n                return allowReserved ? v : encodeURIComponent(v as string);\n            }\n\n            return serializePrimitiveParam({\n                allowReserved,\n                name,\n                value: v as string,\n            });\n        })\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\nexport const serializePrimitiveParam = ({\n    allowReserved,\n    name,\n    value,\n}: SerializePrimitiveParam) => {\n    if (value === undefined || value === null) {\n        return '';\n    }\n\n    if (typeof value === 'object') {\n        throw new Error(\n            'Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.',\n        );\n    }\n\n    return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\n};\n\nexport const serializeObjectParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n    valueOnly,\n}: SerializeOptions & {\n    value: Record | Date;\n    valueOnly?: boolean;\n}) => {\n    if (value instanceof Date) {\n        return valueOnly\n            ? value.toISOString()\n            : `${name}=${value.toISOString()}`;\n    }\n\n    if (style !== 'deepObject' && !explode) {\n        let values: string[] = [];\n        Object.entries(value).forEach(([key, v]) => {\n            values = [\n                ...values,\n                key,\n                allowReserved ? (v as string) : encodeURIComponent(v as string),\n            ];\n        });\n        const joinedValues = values.join(',');\n        switch (style) {\n            case 'form':\n                return `${name}=${joinedValues}`;\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            default:\n                return joinedValues;\n        }\n    }\n\n    const separator = separatorObjectExplode(style);\n    const joinedValues = Object.entries(value)\n        .map(([key, v]) =>\n            serializePrimitiveParam({\n                allowReserved,\n                name: style === 'deepObject' ? `${name}[${key}]` : key,\n                value: v as string,\n            }),\n        )\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializePrimitiveParam.html":{"url":"interfaces/SerializePrimitiveParam.html","title":"interface - SerializePrimitiveParam","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SerializePrimitiveParam\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/pathSerializer.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            SerializePrimitiveOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface SerializeOptions\n    extends SerializePrimitiveOptions,\n        SerializerOptions {}\n\ninterface SerializePrimitiveOptions {\n    allowReserved?: boolean;\n    name: string;\n}\n\nexport interface SerializerOptions {\n    /**\n     * @default true\n     */\n    explode: boolean;\n    style: T;\n}\n\nexport type ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\nexport type ArraySeparatorStyle = ArrayStyle | MatrixStyle;\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\nexport type ObjectStyle = 'form' | 'deepObject';\ntype ObjectSeparatorStyle = ObjectStyle | MatrixStyle;\n\ninterface SerializePrimitiveParam extends SerializePrimitiveOptions {\n    value: string;\n}\n\nexport const separatorArrayExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const separatorArrayNoExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'form':\n            return ',';\n        case 'pipeDelimited':\n            return '|';\n        case 'spaceDelimited':\n            return '%20';\n        default:\n            return ',';\n    }\n};\n\nexport const separatorObjectExplode = (style: ObjectSeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const serializeArrayParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n}: SerializeOptions & {\n    value: unknown[];\n}) => {\n    if (!explode) {\n        const joinedValues = (\n            allowReserved\n                ? value\n                : value.map((v) => encodeURIComponent(v as string))\n        ).join(separatorArrayNoExplode(style));\n        switch (style) {\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            case 'simple':\n                return joinedValues;\n            default:\n                return `${name}=${joinedValues}`;\n        }\n    }\n\n    const separator = separatorArrayExplode(style);\n    const joinedValues = value\n        .map((v) => {\n            if (style === 'label' || style === 'simple') {\n                return allowReserved ? v : encodeURIComponent(v as string);\n            }\n\n            return serializePrimitiveParam({\n                allowReserved,\n                name,\n                value: v as string,\n            });\n        })\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\nexport const serializePrimitiveParam = ({\n    allowReserved,\n    name,\n    value,\n}: SerializePrimitiveParam) => {\n    if (value === undefined || value === null) {\n        return '';\n    }\n\n    if (typeof value === 'object') {\n        throw new Error(\n            'Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.',\n        );\n    }\n\n    return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\n};\n\nexport const serializeObjectParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n    valueOnly,\n}: SerializeOptions & {\n    value: Record | Date;\n    valueOnly?: boolean;\n}) => {\n    if (value instanceof Date) {\n        return valueOnly\n            ? value.toISOString()\n            : `${name}=${value.toISOString()}`;\n    }\n\n    if (style !== 'deepObject' && !explode) {\n        let values: string[] = [];\n        Object.entries(value).forEach(([key, v]) => {\n            values = [\n                ...values,\n                key,\n                allowReserved ? (v as string) : encodeURIComponent(v as string),\n            ];\n        });\n        const joinedValues = values.join(',');\n        switch (style) {\n            case 'form':\n                return `${name}=${joinedValues}`;\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            default:\n                return joinedValues;\n        }\n    }\n\n    const separator = separatorObjectExplode(style);\n    const joinedValues = Object.entries(value)\n        .map(([key, v]) =>\n            serializePrimitiveParam({\n                allowReserved,\n                name: style === 'deepObject' ? `${name}[${key}]` : key,\n                value: v as string,\n            }),\n        )\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SerializerOptions.html":{"url":"interfaces/SerializerOptions.html","title":"interface - SerializerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SerializerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/core/pathSerializer.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            explode\n                                        \n                                \n                                \n                                        \n                                            style\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        explode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        explode:         boolean\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : true\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        style\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        style:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface SerializeOptions\n    extends SerializePrimitiveOptions,\n        SerializerOptions {}\n\ninterface SerializePrimitiveOptions {\n    allowReserved?: boolean;\n    name: string;\n}\n\nexport interface SerializerOptions {\n    /**\n     * @default true\n     */\n    explode: boolean;\n    style: T;\n}\n\nexport type ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\nexport type ArraySeparatorStyle = ArrayStyle | MatrixStyle;\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\nexport type ObjectStyle = 'form' | 'deepObject';\ntype ObjectSeparatorStyle = ObjectStyle | MatrixStyle;\n\ninterface SerializePrimitiveParam extends SerializePrimitiveOptions {\n    value: string;\n}\n\nexport const separatorArrayExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const separatorArrayNoExplode = (style: ArraySeparatorStyle) => {\n    switch (style) {\n        case 'form':\n            return ',';\n        case 'pipeDelimited':\n            return '|';\n        case 'spaceDelimited':\n            return '%20';\n        default:\n            return ',';\n    }\n};\n\nexport const separatorObjectExplode = (style: ObjectSeparatorStyle) => {\n    switch (style) {\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\n\nexport const serializeArrayParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n}: SerializeOptions & {\n    value: unknown[];\n}) => {\n    if (!explode) {\n        const joinedValues = (\n            allowReserved\n                ? value\n                : value.map((v) => encodeURIComponent(v as string))\n        ).join(separatorArrayNoExplode(style));\n        switch (style) {\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            case 'simple':\n                return joinedValues;\n            default:\n                return `${name}=${joinedValues}`;\n        }\n    }\n\n    const separator = separatorArrayExplode(style);\n    const joinedValues = value\n        .map((v) => {\n            if (style === 'label' || style === 'simple') {\n                return allowReserved ? v : encodeURIComponent(v as string);\n            }\n\n            return serializePrimitiveParam({\n                allowReserved,\n                name,\n                value: v as string,\n            });\n        })\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\nexport const serializePrimitiveParam = ({\n    allowReserved,\n    name,\n    value,\n}: SerializePrimitiveParam) => {\n    if (value === undefined || value === null) {\n        return '';\n    }\n\n    if (typeof value === 'object') {\n        throw new Error(\n            'Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.',\n        );\n    }\n\n    return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\n};\n\nexport const serializeObjectParam = ({\n    allowReserved,\n    explode,\n    name,\n    style,\n    value,\n    valueOnly,\n}: SerializeOptions & {\n    value: Record | Date;\n    valueOnly?: boolean;\n}) => {\n    if (value instanceof Date) {\n        return valueOnly\n            ? value.toISOString()\n            : `${name}=${value.toISOString()}`;\n    }\n\n    if (style !== 'deepObject' && !explode) {\n        let values: string[] = [];\n        Object.entries(value).forEach(([key, v]) => {\n            values = [\n                ...values,\n                key,\n                allowReserved ? (v as string) : encodeURIComponent(v as string),\n            ];\n        });\n        const joinedValues = values.join(',');\n        switch (style) {\n            case 'form':\n                return `${name}=${joinedValues}`;\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            default:\n                return joinedValues;\n        }\n    }\n\n    const separator = separatorObjectExplode(style);\n    const joinedValues = Object.entries(value)\n        .map(([key, v]) =>\n            serializePrimitiveParam({\n                allowReserved,\n                name: style === 'deepObject' ? `${name}[${key}]` : key,\n                value: v as string,\n            }),\n        )\n        .join(separator);\n    return style === 'label' || style === 'matrix'\n        ? separator + joinedValues\n        : joinedValues;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Session.html":{"url":"entities/Session.html","title":"entity - Session","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Session\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/entities/session.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a user session in the application.\nIt includes various properties such as credentials, authorization code,\nrequest URI, authorization queries, and more.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                auth_queries\n                            \n                            \n                                    \n                                    Optional\n                                authorization_code\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                credentialPayload\n                            \n                            \n                                    \n                                    Optional\n                                credentials\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                notifications\n                            \n                            \n                                    \n                                    Optional\n                                offer\n                            \n                            \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    Optional\n                                vp_nonce\n                            \n                            \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        auth_queries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthorizeQueries\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:56\n                        \n                    \n\n            \n                \n                    Authorization queries associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        authorization_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:46\n                        \n                    \n\n            \n                \n                    Authorization code for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:66\n                        \n                    \n\n            \n                \n                    Credential offer object containing details about the credential offer or presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentialPayload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OfferRequest\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:76\n                        \n                    \n\n            \n                \n                    Credential payload containing the offer request details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :     VerificationResult[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:41\n                        \n                    \n\n            \n                \n                    Verified credentials from the verification process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:36\n                        \n                    \n\n            \n                \n                    Unique identifier for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Notification[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:86\n                        \n                    \n\n            \n                \n                    Notifications associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        offer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialOfferObject\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:71\n                        \n                    \n\n            \n                \n                    Credential offer object containing details about the credential offer or presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:51\n                        \n                    \n\n            \n                \n                    Request URI from the authorization request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:91\n                        \n                    \n\n            \n                \n                    Tenant ID for multi-tenancy support.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        vp_nonce\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:61\n                        \n                    \n\n            \n                \n                    Noncce from the Verifiable Presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:81\n                        \n                    \n\n            \n                \n                    Webhook configuration to send result and may receive further information.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n    CredentialOfferObject,\n    NotificationEvent,\n} from '@openid4vc/openid4vci';\nimport { VerificationResult } from '@sd-jwt/sd-jwt-vc';\nimport { AuthorizeQueries } from '../../issuer/authorize/dto/authorize-request.dto';\nimport { OfferRequest } from '../../issuer/oid4vci/dto/offer-request.dto';\nimport { Column, Entity, PrimaryColumn } from 'typeorm';\nimport { WebhookConfig } from '../../utils/webhook.dto';\n\n/**\n * Represents a session entity for managing user sessions in the application.\n */\ntype Notification = {\n    /**\n     * Unique identifier for the notification.\n     */\n    id: string;\n    /**\n     * The type of notification.\n     */\n    event?: NotificationEvent;\n};\n\n/**\n * Entity representing a user session in the application.\n * It includes various properties such as credentials, authorization code,\n * request URI, authorization queries, and more.\n */\n@Entity()\nexport class Session {\n    /**\n     * Unique identifier for the session.\n     */\n    @PrimaryColumn('uuid')\n    id: string;\n    /**\n     * Verified credentials from the verification process.\n     */\n    @Column('json', { nullable: true })\n    credentials?: VerificationResult[];\n    /**\n     * Authorization code for the session.\n     */\n    @Column('varchar', { nullable: true })\n    authorization_code?: string;\n    /**\n     * Request URI from the authorization request.\n     */\n    @Column('varchar', { nullable: true })\n    request_uri?: string;\n    /**\n     * Authorization queries associated with the session.\n     */\n    @Column('json', { nullable: true })\n    auth_queries?: AuthorizeQueries;\n    /**\n     * Noncce from the Verifiable Presentation request.\n     */\n    @Column('varchar', { nullable: true })\n    vp_nonce?: string;\n    /**\n     * Credential offer object containing details about the credential offer or presentation request.\n     */\n    @Column({ type: 'date', default: () => 'CURRENT_TIMESTAMP' })\n    createdAt: Date;\n    /**\n     * Credential offer object containing details about the credential offer or presentation request.\n     */\n    @Column('json', { nullable: true })\n    offer?: CredentialOfferObject;\n    /**\n     * Credential payload containing the offer request details.\n     */\n    @Column('json', { nullable: true })\n    credentialPayload?: OfferRequest;\n    /**\n     * Webhook configuration to send result and may receive further information.\n     */\n    @Column('json', { nullable: true })\n    webhook?: WebhookConfig;\n    /**\n     * Notifications associated with the session.\n     */\n    @Column('json', { default: JSON.stringify([]) })\n    notifications: Notification[];\n    /**\n     * Tenant ID for multi-tenancy support.\n     */\n    @Column('varchar')\n    tenantId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SessionController.html":{"url":"controllers/SessionController.html","title":"controller - SessionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SessionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                session\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getAllSessions\n                            \n                            \n                                    \n                                getSession\n                            \n                            \n                                    \n                                    \n                                    \n                                revokeAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getAllSessions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllSessions()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:23\n                        \n                    \n\n\n            \n                \n                        Retrieves all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSession(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:32\n                        \n                    \n\n\n            \n                \n                        Retrieves the session information for a given session ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe identifier of the session.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        revokeAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    revokeAll(value: StatusUpdateDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@ApiSecurity('bearer')@Post('revoke')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:44\n                        \n                    \n\n\n            \n                \n                        Update the status of the credentials of a specific session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Post, UseGuards, Body } from '@nestjs/common';\nimport { ApiSecurity, ApiTags } from '@nestjs/swagger';\nimport { SessionService } from './session.service';\nimport { Session } from './entities/session.entity';\nimport { JwtAuthGuard } from '../auth/auth.guard';\nimport { Token, TokenPayload } from '../auth/token.decorator';\nimport { StatusUpdateDto } from '../issuer/status-list/dto/status-update.dto';\nimport { StatusListService } from '../issuer/status-list/status-list.service';\n\n@ApiTags('Session management', 'Admin')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('bearer')\n@Controller('session')\nexport class SessionController {\n    constructor(\n        private readonly sessionService: SessionService,\n        private readonly statusListService: StatusListService,\n    ) {}\n\n    /**\n     * Retrieves all sessions.\n     */ @Get()\n    getAllSessions(): Promise {\n        return this.sessionService.getAll();\n    }\n\n    /**\n     * Retrieves the session information for a given session ID.\n     * @param id - The identifier of the session.\n     */\n    @Get(':id')\n    getSession(@Param('id') id: string): Promise {\n        return this.sessionService.get(id);\n    }\n\n    /**\n     * Update the status of the credentials of a specific session.\n     * @param value\n     * @returns\n     */\n    @UseGuards(JwtAuthGuard)\n    @ApiSecurity('bearer')\n    @Post('revoke')\n    revokeAll(@Body() value: StatusUpdateDto, @Token() user: TokenPayload) {\n        return this.statusListService.updateStatus(value, user.sub);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SessionLogContext.html":{"url":"interfaces/SessionLogContext.html","title":"interface - SessionLogContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SessionLogContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/session-logger-context.ts\n        \n\n\n            \n                Description\n            \n            \n                Context for session logging, including session ID, tenant ID, flow type, and optional stage.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            flowType\n                                        \n                                \n                                \n                                        \n                                            sessionId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stage\n                                        \n                                \n                                \n                                        \n                                            tenantId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/utils/session-logger-context.ts:21\n                            \n                        \n                \n                    \n                        Additional context information for the session.\n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        flowType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        flowType:     \"OID4VCI\" | \"OID4VP\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"OID4VCI\" | \"OID4VP\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Type of flow being logged (e.g., OID4VCI, OID4VP).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sessionId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sessionId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier for the session.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional stage of the flow, useful for tracking progress.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tenantId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tenantId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identifier for the tenant associated with the session.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SessionLogContext {\n    /**\n     * Unique identifier for the session.\n     */\n    sessionId: string;\n    /**\n     * Identifier for the tenant associated with the session.\n     */\n    tenantId: string;\n    /**\n     * Type of flow being logged (e.g., OID4VCI, OID4VP).\n     */\n    flowType: 'OID4VCI' | 'OID4VP';\n    /**\n     * Optional stage of the flow, useful for tracking progress.\n     */\n    stage?: string;\n    /**\n     * Additional context information for the session.\n     */\n    [key: string]: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerInterceptor.html":{"url":"injectables/SessionLoggerInterceptor.html","title":"injectable - SessionLoggerInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/session-logger.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor for logging session-related requests and responses.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                            \n                                    Private\n                                sanitizeBody\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, logger: PinoLogger)\n                    \n                \n                        \n                            \n                                Defined in src/utils/session-logger.interceptor.ts:17\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerInterceptor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nReflector instance for accessing metadata.\n\n\n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPinoLogger instance for logging.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.interceptor.ts:34\n                        \n                    \n\n\n            \n                \n                        Intercepts the request and logs session-related information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nExecution context of the request.\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCall handler to proceed with the request.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that emits the response data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sanitizeBody\n                        \n                    \n                \n            \n            \n                \n                        \n                    sanitizeBody(body: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.interceptor.ts:131\n                        \n                    \n\n\n            \n                \n                        Sanitizes the request body to remove sensitive information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request body to sanitize.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Sanitized body.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { PinoLogger } from 'nestjs-pino';\nimport { SESSION_LOGGER_KEY } from './session-logger.decorator';\n\n/**\n * Interceptor for logging session-related requests and responses.\n */\n@Injectable()\nexport class SessionLoggerInterceptor implements NestInterceptor {\n    /**\n     * Constructor for SessionLoggerInterceptor.\n     * @param reflector - Reflector instance for accessing metadata.\n     * @param logger - PinoLogger instance for logging.\n     */\n    constructor(\n        private readonly reflector: Reflector,\n        private readonly logger: PinoLogger,\n    ) {}\n\n    /**\n     * Intercepts the request and logs session-related information.\n     * @param context - Execution context of the request.\n     * @param next - Call handler to proceed with the request.\n     * @returns An observable that emits the response data.\n     */\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        const metadata = this.reflector.get(\n            SESSION_LOGGER_KEY,\n            context.getHandler(),\n        );\n\n        if (!metadata) {\n            return next.handle();\n        }\n\n        const { sessionIdParam, flowType } = metadata;\n        const request = context.switchToHttp().getRequest();\n        const response = context.switchToHttp().getResponse();\n\n        // Extract session ID from various sources\n        const sessionId =\n            request.params?.[sessionIdParam] ||\n            request.body?.[sessionIdParam] ||\n            request.headers['x-session-id'] ||\n            request.query?.[sessionIdParam];\n\n        const tenantId = request.params?.tenantId;\n        const method = request.method;\n        const url = request.url;\n\n        // Set context for this logger instance\n        this.logger.setContext('SessionLogger');\n\n        // Create log context\n        const logContext = {\n            sessionId,\n            tenantId,\n            flowType,\n            endpoint: `${method} ${url}`,\n        };\n\n        // Log the start of the request\n        this.logger.info(\n            {\n                ...logContext,\n                event: 'request_start',\n                method,\n                url,\n                headers: {\n                    'user-agent': request.headers['user-agent'],\n                    'content-type': request.headers['content-type'],\n                },\n                body: this.sanitizeBody(request.body),\n            },\n            `[${flowType}] Starting ${method} ${url} for session ${sessionId}`,\n        );\n\n        const startTime = Date.now();\n\n        return next.handle().pipe(\n            tap((data) => {\n                const duration = Date.now() - startTime;\n                this.logger.info(\n                    {\n                        ...logContext,\n                        event: 'request_success',\n                        method,\n                        url,\n                        statusCode: response.statusCode,\n                        duration,\n                        responseSize: JSON.stringify(data || {}).length,\n                    },\n                    `[${flowType}] Completed ${method} ${url} for session ${sessionId} in ${duration}ms`,\n                );\n            }),\n            catchError((error) => {\n                const duration = Date.now() - startTime;\n                this.logger.error(\n                    {\n                        ...logContext,\n                        event: 'request_error',\n                        method,\n                        url,\n                        error: {\n                            name: error.name,\n                            message: error.message,\n                            stack: error.stack,\n                        },\n                        duration,\n                    },\n                    `[${flowType}] Error in ${method} ${url} for session ${sessionId}: ${error.message}`,\n                );\n                throw error;\n            }),\n        );\n    }\n\n    /**\n     * Sanitizes the request body to remove sensitive information.\n     * @param body - The request body to sanitize.\n     * @returns Sanitized body.\n     */\n    private sanitizeBody(body: any): any {\n        if (!body) return body;\n\n        // Create a copy to avoid modifying the original\n        const sanitized = { ...body };\n\n        // Remove sensitive fields\n        const sensitiveFields = [\n            'password',\n            'token',\n            'secret',\n            'key',\n            'private_key',\n            'access_token',\n            'refresh_token',\n        ];\n\n        sensitiveFields.forEach((field) => {\n            if (sanitized[field]) {\n                sanitized[field] = '[REDACTED]';\n            }\n        });\n\n        return sanitized;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerService.html":{"url":"injectables/SessionLoggerService.html","title":"injectable - SessionLoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/session-logger.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for logging session-related events and errors.\nUses PinoLogger for structured logging.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logAuthorizationRequest\n                            \n                            \n                                logCredentialIssuance\n                            \n                            \n                                logCredentialVerification\n                            \n                            \n                                logFlowComplete\n                            \n                            \n                                logFlowError\n                            \n                            \n                                logFlowStart\n                            \n                            \n                                logNotification\n                            \n                            \n                                logSession\n                            \n                            \n                                logSessionError\n                            \n                            \n                                logTokenExchange\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: PinoLogger)\n                    \n                \n                        \n                            \n                                Defined in src/utils/session-logger.service.ts:10\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPinoLogger instance for logging.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \nlogAuthorizationRequest(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:121\n                        \n                    \n\n\n            \n                \n                        Log authorization request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialIssuance\n                        \n                    \n                \n            \n            \n                \nlogCredentialIssuance(context: SessionLogContext, credentialType: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:81\n                        \n                    \n\n\n            \n                \n                        Log credential issuance step\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialVerification\n                        \n                    \n                \n            \n            \n                \nlogCredentialVerification(context: SessionLogContext, verificationResult: boolean, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:101\n                        \n                    \n\n\n            \n                \n                        Log credential presentation verification\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                verificationResult\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowComplete\n                        \n                    \n                \n            \n            \n                \nlogFlowComplete(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Log session flow completion\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowError\n                        \n                    \n                \n            \n            \n                \nlogFlowError(context: SessionLogContext, error: Error, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Log session flow error\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowStart\n                        \n                    \n                \n            \n            \n                \nlogFlowStart(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:22\n                        \n                    \n\n\n            \n                \n                        Log session flow start\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logNotification\n                        \n                    \n                \n            \n            \n                \nlogNotification(context: SessionLogContext, notificationEvent: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:151\n                        \n                    \n\n\n            \n                \n                        Log notification events\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                notificationEvent\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSession\n                        \n                    \n                \n            \n            \n                \nlogSession(context: SessionLogContext, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:171\n                        \n                    \n\n\n            \n                \n                        Generic session log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSessionError\n                        \n                    \n                \n            \n            \n                \nlogSessionError(context: SessionLogContext, error: Error, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:188\n                        \n                    \n\n\n            \n                \n                        Generic session error log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logTokenExchange\n                        \n                    \n                \n            \n            \n                \nlogTokenExchange(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/session-logger.service.ts:136\n                        \n                    \n\n\n            \n                \n                        Log token exchange\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PinoLogger } from 'nestjs-pino';\nimport { SessionLogContext } from './session-logger-context';\n\n/**\n * Service for logging session-related events and errors.\n * Uses PinoLogger for structured logging.\n */\n@Injectable()\nexport class SessionLoggerService {\n    /**\n     * Constructor for SessionLoggerService.\n     * @param logger - PinoLogger instance for logging.\n     */\n    constructor(private readonly logger: PinoLogger) {\n        this.logger.setContext('SessionLoggerService');\n    }\n\n    /**\n     * Log session flow start\n     */\n    logFlowStart(context: SessionLogContext, additionalData?: any) {\n        const message = `[${context.flowType}] Flow started for session ${context.sessionId} in tenant ${context.tenantId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'flow_start',\n                stage: 'initialization',\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow completion\n     */\n    logFlowComplete(context: SessionLogContext, additionalData?: any) {\n        const message = `[${context.flowType}] Flow completed for session ${context.sessionId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'flow_complete',\n                stage: 'completion',\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow error\n     */\n    logFlowError(\n        context: SessionLogContext,\n        error: Error,\n        additionalData?: any,\n    ) {\n        const message = `[${context.flowType}] Flow error for session ${context.sessionId}: ${error.message}`;\n\n        this.logger.error(\n            {\n                ...context,\n                event: 'flow_error',\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log credential issuance step\n     */\n    logCredentialIssuance(\n        context: SessionLogContext,\n        credentialType: string,\n        additionalData?: any,\n    ) {\n        this.logger.info(\n            {\n                ...context,\n                event: 'credential_issuance',\n                stage: 'credential_creation',\n                credentialType,\n                ...additionalData,\n            },\n            `[${context.flowType}] Issuing credential of type ${credentialType} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log credential presentation verification\n     */\n    logCredentialVerification(\n        context: SessionLogContext,\n        verificationResult: boolean,\n        additionalData?: any,\n    ) {\n        this.logger.info(\n            {\n                ...context,\n                event: 'credential_verification',\n                stage: 'verification',\n                verificationResult,\n                ...additionalData,\n            },\n            `[${context.flowType}] Credential verification ${verificationResult ? 'succeeded' : 'failed'} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log authorization request\n     */\n    logAuthorizationRequest(context: SessionLogContext, additionalData?: any) {\n        this.logger.info(\n            {\n                ...context,\n                event: 'authorization_request',\n                stage: 'authorization',\n                ...additionalData,\n            },\n            `[${context.flowType}] Authorization request created for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log token exchange\n     */\n    logTokenExchange(context: SessionLogContext, additionalData?: any) {\n        this.logger.info(\n            {\n                ...context,\n                event: 'token_exchange',\n                stage: 'token_exchange',\n                ...additionalData,\n            },\n            `[${context.flowType}] Token exchange for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log notification events\n     */\n    logNotification(\n        context: SessionLogContext,\n        notificationEvent: string,\n        additionalData?: any,\n    ) {\n        this.logger.info(\n            {\n                ...context,\n                event: 'notification',\n                stage: 'notification',\n                notificationEvent,\n                ...additionalData,\n            },\n            `[${context.flowType}] Notification ${notificationEvent} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Generic session log method\n     */\n    logSession(\n        context: SessionLogContext,\n        message: string,\n        additionalData?: any,\n    ) {\n        this.logger.info(\n            {\n                ...context,\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}`,\n        );\n    }\n\n    /**\n     * Generic session error log method\n     */\n    logSessionError(\n        context: SessionLogContext,\n        error: Error,\n        message: string,\n        additionalData?: any,\n    ) {\n        this.logger.error(\n            {\n                ...context,\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}: ${error.message}`,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SessionModule.html":{"url":"modules/SessionModule.html","title":"module - SessionModule","body":"\n                   \n\n\n\n\n    Modules\n    SessionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_imports\n\n\n\ncluster_SessionModule_exports\n\n\n\ncluster_SessionModule_providers\n\n\n\n\nStatusListModule\n\nStatusListModule\n\n\n\nSessionModule\n\nSessionModule\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/session/session.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            SessionModule is responsible for managing user sessions.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SessionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SessionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SessionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SessionService } from './session.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Session } from './entities/session.entity';\nimport { SessionController } from './session.controller';\nimport * as Joi from 'joi';\nimport { StatusListModule } from '../issuer/status-list/status-list.module';\n\n/**\n * Module for managing user sessions.\n */\nexport const SESSION_VALIDATION_SCHEMA = {\n    SESSION_TIDY_UP_INTERVAL: Joi.number().default(60 * 60), // default to every hour\n    SESSION_TTL: Joi.number().default(24 * 60 * 60), // default to 24 hours\n};\n\n/**\n * SessionModule is responsible for managing user sessions.\n */\n@Module({\n    imports: [TypeOrmModule.forFeature([Session]), StatusListModule],\n    providers: [SessionService],\n    exports: [SessionService],\n    controllers: [SessionController],\n})\nexport class SessionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionService.html":{"url":"injectables/SessionService.html","title":"injectable - SessionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                create\n                            \n                            \n                                get\n                            \n                            \n                                getAll\n                            \n                            \n                                getBy\n                            \n                            \n                                onApplicationBootstrap\n                            \n                            \n                                tidyUpSessions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionRepository: Repository, configService: ConfigService, schedulerRegistry: SchedulerRegistry)\n                    \n                \n                        \n                            \n                                Defined in src/session/session.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schedulerRegistry\n                                                  \n                                                        \n                                                                    SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(issuer_state: string, tenantId: string, values: QueryDeepPartialEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:50\n                        \n                    \n\n\n            \n                \n                        Update an existing session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            QueryDeepPartialEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(session: DeepPartial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Create a new session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Get a session by its state.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAll\n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:65\n                        \n                    \n\n\n            \n                \n                        Get all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBy\n                        \n                    \n                \n            \n            \n                \ngetBy(where: FindOptionsWhere)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:83\n                        \n                    \n\n\n            \n                \n                        Get a session by a specific condition.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                            FindOptionsWhere\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \nonApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:23\n                        \n                    \n\n\n            \n                \n                        Register the tidy up cron job on application bootstrap.\nThis will run every hour by default, but can be configured via the SESSION_TIDY_UP_INTERVAL config variable.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tidyUpSessions\n                        \n                    \n                \n            \n            \n                \ntidyUpSessions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:90\n                        \n                    \n\n\n            \n                \n                        Tidy up sessions that are older than 1 day.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from '@nestjs/common';\nimport { Session } from './entities/session.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DeepPartial, FindOptionsWhere, LessThan, Repository } from 'typeorm';\nimport { QueryDeepPartialEntity } from 'typeorm/query-builder/QueryPartialEntity';\nimport { SchedulerRegistry } from '@nestjs/schedule';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class SessionService implements OnApplicationBootstrap {\n    constructor(\n        @InjectRepository(Session)\n        private sessionRepository: Repository,\n        private readonly configService: ConfigService,\n        private readonly schedulerRegistry: SchedulerRegistry,\n    ) {}\n\n    /**\n     * Register the tidy up cron job on application bootstrap.\n     * This will run every hour by default, but can be configured via the `SESSION_TIDY_UP_INTERVAL` config variable.\n     * @returns\n     */\n    onApplicationBootstrap() {\n        const callback = () => {\n            void this.tidyUpSessions();\n        };\n        const intervalTime =\n            this.configService.getOrThrow('SESSION_TIDY_UP_INTERVAL') *\n            1000;\n        const interval = setInterval(callback, intervalTime);\n        this.schedulerRegistry.addInterval('tidyUpSessions', interval);\n        return this.tidyUpSessions();\n    }\n\n    /**\n     * Create a new session.\n     * @param session\n     * @returns\n     */\n    create(session: DeepPartial) {\n        return this.sessionRepository.save(session);\n    }\n\n    /**\n     * Update an existing session.\n     * @param issuer_state\n     * @param values\n     * @returns\n     */\n    add(\n        issuer_state: string,\n        tenantId: string,\n        values: QueryDeepPartialEntity,\n    ) {\n        return this.sessionRepository.update(\n            { id: issuer_state, tenantId },\n            values,\n        );\n    }\n\n    /**\n     * Get all sessions.\n     * @returns\n     */\n    getAll(): Promise {\n        return this.sessionRepository.find();\n    }\n\n    /**\n     * Get a session by its state.\n     * @param state\n     * @returns\n     */\n    get(state: string) {\n        return this.sessionRepository.findOneByOrFail({ id: state });\n    }\n\n    /**\n     * Get a session by a specific condition.\n     * @param where\n     * @returns\n     */\n    getBy(where: FindOptionsWhere) {\n        return this.sessionRepository.findOneByOrFail(where);\n    }\n\n    /**\n     * Tidy up sessions that are older than 1 day.\n     */\n    tidyUpSessions() {\n        const ttl = this.configService.getOrThrow('SESSION_TTL') * 1000;\n        return this.sessionRepository.delete({\n            createdAt: LessThan(new Date(Date.now() - ttl)),\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StatusListController.html":{"url":"controllers/StatusListController.html","title":"controller - StatusListController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StatusListController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/status-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getList\n                        \n                    \n                \n            \n            \n                \n                        \n                    getList(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('status-list')@Header('Content-Type', 'application/statuslist+jwt')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.controller.ts:16\n                        \n                    \n\n\n            \n                \n                        Get the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header, Param } from '@nestjs/common';\nimport { StatusListService } from './status-list.service';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('Status management')\n@Controller(':tenantId/status-management')\nexport class StatusListController {\n    constructor(private statusListService: StatusListService) {}\n\n    /**\n     * Get the status list\n     * @returns\n     */\n    @Get('status-list')\n    @Header('Content-Type', 'application/statuslist+jwt')\n    getList(@Param('tenantId') tenantId: string) {\n        return this.statusListService.getList(tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StatusListFile.html":{"url":"interfaces/StatusListFile.html","title":"interface - StatusListFile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StatusListFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            bits\n                                        \n                                \n                                \n                                        \n                                            elements\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            jwt\n                                        \n                                \n                                \n                                        \n                                            stack\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bits:     BitsPerStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BitsPerStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elements\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        elements:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stack\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stack:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ConflictException, Injectable, OnModuleInit } from '@nestjs/common';\nimport { join } from 'path';\nimport { existsSync, readFileSync, writeFileSync } from 'fs';\nimport {\n    BitsPerStatus,\n    createHeaderAndPayload,\n    JWTwithStatusListPayload,\n    StatusList,\n    StatusListJWTHeaderParameters,\n} from '@sd-jwt/jwt-status-list';\nimport { JwtPayload } from '@sd-jwt/types';\nimport { ConfigService } from '@nestjs/config';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { StatusMapping } from './entities/status-mapping.entity';\nimport { Repository } from 'typeorm';\nimport { StatusUpdateDto } from './dto/status-update.dto';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { Session } from '../../session/entities/session.entity';\nimport { TENANT_EVENTS } from '../../auth/tenant-events';\n\ninterface StatusListFile {\n    elements: number[];\n    stack: number[];\n    bits: BitsPerStatus;\n    jwt?: string;\n}\n\n@Injectable()\nexport class StatusListService implements OnModuleInit {\n    private fileName: string = 'status-list.json';\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        @InjectRepository(StatusMapping)\n        private statusMappingRepository: Repository,\n    ) {}\n    onModuleInit() {}\n\n    @OnEvent(TENANT_EVENTS.TENANT_KEYS, { async: true })\n    onTenantInit(tenantId: string) {\n        return this.init(tenantId);\n    }\n\n    /**\n     * Initialize the status list service by checking if the status list file exists.\n     * If it does not exist, create a new status list with 10,000 entries and a stack\n     * of 10,000 indexes. The stack is shuffled to ensure randomness in the order of\n     * entries. The status list is stored in the file system as a JSON file.\n     */\n    private async init(tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        if (!existsSync(file)) {\n            const size = 10000;\n            // create an empty array with the size of 1000\n            const elements = new Array(size).fill(0).map(() => 0);\n            // create a list of 1000 indexes and shuffel them\n            const stack = new Array(size)\n                .fill(0)\n                .map((_, i) => i)\n                .sort(() => 0.5 - Math.random());\n\n            writeFileSync(\n                file,\n                JSON.stringify({ elements, stack, bits: 1 } as StatusListFile),\n            );\n            await this.createList(tenantId);\n        }\n    }\n\n    /**\n     * Create a new status list and stored it in the file\n     */\n    async createList(tenantId: string) {\n        const file = this.getConfig(tenantId);\n        const list = new StatusList(file.elements, file.bits);\n        const iss = `${this.configService.getOrThrow('PUBLIC_URL')}`;\n\n        const sub = join(\n            this.configService.getOrThrow('PUBLIC_URL'),\n            tenantId,\n            'status-management',\n            'status-list',\n        );\n\n        const prePayload: JwtPayload = {\n            iss,\n            sub,\n            iat: Math.floor(Date.now() / 1000),\n        };\n        const preHeader: StatusListJWTHeaderParameters = {\n            alg: 'ES256',\n            typ: 'statuslist+jwt',\n            x5c: this.cryptoService.getCertChain('signing', tenantId),\n        };\n        const { header, payload } = createHeaderAndPayload(\n            list,\n            prePayload,\n            preHeader,\n        );\n\n        const jwt = await this.cryptoService.signJwt(header, payload, tenantId);\n        file.jwt = jwt;\n        this.storeConfig(file, tenantId);\n    }\n\n    getList(tenantId: string) {\n        return this.getConfig(tenantId).jwt;\n    }\n\n    private getConfig(tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        return JSON.parse(readFileSync(file, 'utf-8')) as StatusListFile;\n    }\n\n    private storeConfig(content: StatusListFile, tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        writeFileSync(file, JSON.stringify(content));\n    }\n\n    /**\n     * Get the next free entry in the status list\n     * @returns\n     */\n    async createEntry(\n        session: Session,\n        credentialConfigurationId: string,\n    ): Promise {\n        const file = this.getConfig(session.tenantId);\n        // get the last element from the stack\n        const idx = file.stack.pop();\n        //TODO: what to do if the stack is empty\n        if (idx === undefined) {\n            throw new Error('Stack for status list is empty!!!');\n        }\n        const sub = join(\n            this.configService.getOrThrow('PUBLIC_URL'),\n            session.tenantId,\n            'status-management',\n            'status-list',\n        );\n        // store the index in the status mapping\n        await this.statusMappingRepository.save({\n            sessionId: session.id,\n            index: idx,\n            list: sub,\n            credentialConfigurationId,\n        });\n        this.storeConfig(file, session.tenantId);\n        return {\n            status: {\n                status_list: {\n                    idx: idx,\n                    uri: sub,\n                },\n            },\n        };\n    }\n\n    /**\n     * Update the value of an entry in the status list\n     * @param id\n     * @param value\n     */\n    private setEntry(id: number, value: number, tenantId: string) {\n        const file = this.getConfig(tenantId);\n        file.elements[id] = value;\n        this.storeConfig(file, tenantId);\n        return this.createList(tenantId);\n    }\n\n    /**\n     * Update the status of a session and its credential configuration\n     * @param value\n     */\n    async updateStatus(value: StatusUpdateDto, tenantId: string) {\n        const entries = await this.statusMappingRepository.findBy({\n            sessionId: value.sessionId,\n            credentialConfigurationId: value.credentialConfigurationId,\n        });\n        if (entries.length === 0) {\n            throw new ConflictException(\n                `No status mapping found for session ${value.sessionId} and credential configuration ${value.credentialConfigurationId}`,\n            );\n        }\n        for (const entry of entries) {\n            await this.setEntry(entry.index, value.status, tenantId);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StatusListModule.html":{"url":"modules/StatusListModule.html","title":"module - StatusListModule","body":"\n                   \n\n\n\n\n    Modules\n    StatusListModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_providers\n\n\n\ncluster_StatusListModule_exports\n\n\n\ncluster_StatusListModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/status-list/status-list.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StatusListController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StatusListController } from './status-list.controller';\nimport { StatusListService } from './status-list.service';\nimport { CryptoModule } from '../../crypto/crypto.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { StatusMapping } from './entities/status-mapping.entity';\n\n@Module({\n    imports: [CryptoModule, TypeOrmModule.forFeature([StatusMapping])],\n    controllers: [StatusListController],\n    providers: [StatusListService],\n    exports: [StatusListService],\n})\nexport class StatusListModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StatusListService.html":{"url":"injectables/StatusListService.html","title":"injectable - StatusListService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StatusListService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fileName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEntry\n                            \n                            \n                                    Async\n                                createList\n                            \n                            \n                                    Private\n                                getConfig\n                            \n                            \n                                getList\n                            \n                            \n                                    Private\n                                    Async\n                                init\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                    \n                                onTenantInit\n                            \n                            \n                                    Private\n                                setEntry\n                            \n                            \n                                    Private\n                                storeConfig\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, statusMappingRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/status-list/status-list.service.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusMappingRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    createEntry(session: Session, credentialConfigurationId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:138\n                        \n                    \n\n\n            \n                \n                        Get the next free entry in the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createList\n                        \n                    \n                \n            \n            \n                \n                        \n                    createList(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:79\n                        \n                    \n\n\n            \n                \n                        Create a new status list and stored it in the file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getConfig(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         StatusListFile\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getList\n                        \n                    \n                \n            \n            \n                \ngetList(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:52\n                        \n                    \n\n\n            \n                \n                        Initialize the status list service by checking if the status list file exists.\nIf it does not exist, create a new status list with 10,000 entries and a stack\nof 10,000 indexes. The stack is shuffled to ensure randomness in the order of\nentries. The status list is stored in the file system as a JSON file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(TENANT_EVENTS.TENANT_KEYS, {async: true})\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    setEntry(id: number, value: number, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:178\n                        \n                    \n\n\n            \n                \n                        Update the value of an entry in the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        storeConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeConfig(content: StatusListFile, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                content\n                                            \n                                                            StatusListFile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(value: StatusUpdateDto, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:189\n                        \n                    \n\n\n            \n                \n                        Update the status of a session and its credential configuration\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        fileName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'status-list.json'\n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/status-list.service.ts:31\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, OnModuleInit } from '@nestjs/common';\nimport { join } from 'path';\nimport { existsSync, readFileSync, writeFileSync } from 'fs';\nimport {\n    BitsPerStatus,\n    createHeaderAndPayload,\n    JWTwithStatusListPayload,\n    StatusList,\n    StatusListJWTHeaderParameters,\n} from '@sd-jwt/jwt-status-list';\nimport { JwtPayload } from '@sd-jwt/types';\nimport { ConfigService } from '@nestjs/config';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { StatusMapping } from './entities/status-mapping.entity';\nimport { Repository } from 'typeorm';\nimport { StatusUpdateDto } from './dto/status-update.dto';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { Session } from '../../session/entities/session.entity';\nimport { TENANT_EVENTS } from '../../auth/tenant-events';\n\ninterface StatusListFile {\n    elements: number[];\n    stack: number[];\n    bits: BitsPerStatus;\n    jwt?: string;\n}\n\n@Injectable()\nexport class StatusListService implements OnModuleInit {\n    private fileName: string = 'status-list.json';\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        @InjectRepository(StatusMapping)\n        private statusMappingRepository: Repository,\n    ) {}\n    onModuleInit() {}\n\n    @OnEvent(TENANT_EVENTS.TENANT_KEYS, { async: true })\n    onTenantInit(tenantId: string) {\n        return this.init(tenantId);\n    }\n\n    /**\n     * Initialize the status list service by checking if the status list file exists.\n     * If it does not exist, create a new status list with 10,000 entries and a stack\n     * of 10,000 indexes. The stack is shuffled to ensure randomness in the order of\n     * entries. The status list is stored in the file system as a JSON file.\n     */\n    private async init(tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        if (!existsSync(file)) {\n            const size = 10000;\n            // create an empty array with the size of 1000\n            const elements = new Array(size).fill(0).map(() => 0);\n            // create a list of 1000 indexes and shuffel them\n            const stack = new Array(size)\n                .fill(0)\n                .map((_, i) => i)\n                .sort(() => 0.5 - Math.random());\n\n            writeFileSync(\n                file,\n                JSON.stringify({ elements, stack, bits: 1 } as StatusListFile),\n            );\n            await this.createList(tenantId);\n        }\n    }\n\n    /**\n     * Create a new status list and stored it in the file\n     */\n    async createList(tenantId: string) {\n        const file = this.getConfig(tenantId);\n        const list = new StatusList(file.elements, file.bits);\n        const iss = `${this.configService.getOrThrow('PUBLIC_URL')}`;\n\n        const sub = join(\n            this.configService.getOrThrow('PUBLIC_URL'),\n            tenantId,\n            'status-management',\n            'status-list',\n        );\n\n        const prePayload: JwtPayload = {\n            iss,\n            sub,\n            iat: Math.floor(Date.now() / 1000),\n        };\n        const preHeader: StatusListJWTHeaderParameters = {\n            alg: 'ES256',\n            typ: 'statuslist+jwt',\n            x5c: this.cryptoService.getCertChain('signing', tenantId),\n        };\n        const { header, payload } = createHeaderAndPayload(\n            list,\n            prePayload,\n            preHeader,\n        );\n\n        const jwt = await this.cryptoService.signJwt(header, payload, tenantId);\n        file.jwt = jwt;\n        this.storeConfig(file, tenantId);\n    }\n\n    getList(tenantId: string) {\n        return this.getConfig(tenantId).jwt;\n    }\n\n    private getConfig(tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        return JSON.parse(readFileSync(file, 'utf-8')) as StatusListFile;\n    }\n\n    private storeConfig(content: StatusListFile, tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        writeFileSync(file, JSON.stringify(content));\n    }\n\n    /**\n     * Get the next free entry in the status list\n     * @returns\n     */\n    async createEntry(\n        session: Session,\n        credentialConfigurationId: string,\n    ): Promise {\n        const file = this.getConfig(session.tenantId);\n        // get the last element from the stack\n        const idx = file.stack.pop();\n        //TODO: what to do if the stack is empty\n        if (idx === undefined) {\n            throw new Error('Stack for status list is empty!!!');\n        }\n        const sub = join(\n            this.configService.getOrThrow('PUBLIC_URL'),\n            session.tenantId,\n            'status-management',\n            'status-list',\n        );\n        // store the index in the status mapping\n        await this.statusMappingRepository.save({\n            sessionId: session.id,\n            index: idx,\n            list: sub,\n            credentialConfigurationId,\n        });\n        this.storeConfig(file, session.tenantId);\n        return {\n            status: {\n                status_list: {\n                    idx: idx,\n                    uri: sub,\n                },\n            },\n        };\n    }\n\n    /**\n     * Update the value of an entry in the status list\n     * @param id\n     * @param value\n     */\n    private setEntry(id: number, value: number, tenantId: string) {\n        const file = this.getConfig(tenantId);\n        file.elements[id] = value;\n        this.storeConfig(file, tenantId);\n        return this.createList(tenantId);\n    }\n\n    /**\n     * Update the status of a session and its credential configuration\n     * @param value\n     */\n    async updateStatus(value: StatusUpdateDto, tenantId: string) {\n        const entries = await this.statusMappingRepository.findBy({\n            sessionId: value.sessionId,\n            credentialConfigurationId: value.credentialConfigurationId,\n        });\n        if (entries.length === 0) {\n            throw new ConflictException(\n                `No status mapping found for session ${value.sessionId} and credential configuration ${value.credentialConfigurationId}`,\n            );\n        }\n        for (const entry of entries) {\n            await this.setEntry(entry.index, value.status, tenantId);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/StatusMapping.html":{"url":"entities/StatusMapping.html","title":"entity - StatusMapping","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  StatusMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/entities/status-mapping.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                credentialConfigurationId\n                            \n                            \n                                    \n                                index\n                            \n                            \n                                    \n                                list\n                            \n                            \n                                    \n                                sessionId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        list\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\n\n@Entity()\nexport class StatusMapping {\n    @Column({ type: 'varchar', primary: true })\n    sessionId: string;\n\n    @Column({ type: 'varchar', primary: true })\n    list: string;\n\n    @Column({ type: 'int', primary: true })\n    index: number;\n\n    @Column({ type: 'varchar', primary: true })\n    credentialConfigurationId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StatusUpdateDto.html":{"url":"classes/StatusUpdateDto.html","title":"class - StatusUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StatusUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/dto/status-update.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                credentialConfigurationId\n                            \n                            \n                                    \n                                sessionId\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:16\n                        \n                    \n\n            \n                \n                    The ID of the credential configuration\nThis is optional, if not provided, all credentials will be revoked of the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:8\n                        \n                    \n\n            \n                \n                    The session ID of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsIn(['0', '1'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:24\n                        \n                    \n\n            \n                \n                    The status of the credential\n0 = valid, 1 = revoked\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsNumber, IsOptional, IsString } from 'class-validator';\n\nexport class StatusUpdateDto {\n    /**\n     * The session ID of the user\n     */\n    @IsString()\n    sessionId: string;\n\n    /**\n     * The ID of the credential configuration\n     * This is optional, if not provided, all credentials will be revoked of the session.\n     */\n    @IsString()\n    @IsOptional()\n    credentialConfigurationId?: string;\n\n    /**\n     * The status of the credential\n     * 0 = valid, 1 = revoked\n     */\n    @IsNumber()\n    @IsIn([0, 1])\n    status: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TDataShape.html":{"url":"interfaces/TDataShape.html","title":"interface - TDataShape","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TDataShape\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/generated/client/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            body\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            headers\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            query\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        query:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import type { Auth } from '../core/auth';\nimport type { Client as CoreClient, Config as CoreConfig } from '../core/types';\nimport type { Middleware } from './utils';\n\nexport type ResponseStyle = 'data' | 'fields';\n\nexport interface Config\n    extends Omit,\n        CoreConfig {\n    /**\n     * Base URL for all requests made by this client.\n     */\n    baseUrl?: T['baseUrl'];\n    /**\n     * Fetch API implementation. You can use this option to provide a custom\n     * fetch instance.\n     *\n     * @default globalThis.fetch\n     */\n    fetch?: (request: Request) => ReturnType;\n    /**\n     * Please don't use the Fetch client for Next.js applications. The `next`\n     * options won't have any effect.\n     *\n     * Install {@link https://www.npmjs.com/package/@hey-api/client-next `@hey-api/client-next`} instead.\n     */\n    next?: never;\n    /**\n     * Return the response data parsed in a specified format. By default, `auto`\n     * will infer the appropriate method from the `Content-Type` response header.\n     * You can override this behavior with any of the {@link Body} methods.\n     * Select `stream` if you don't want to parse response data at all.\n     *\n     * @default 'auto'\n     */\n    parseAs?:\n        | 'arrayBuffer'\n        | 'auto'\n        | 'blob'\n        | 'formData'\n        | 'json'\n        | 'stream'\n        | 'text';\n    /**\n     * Should we return only data or multiple fields (data, error, response, etc.)?\n     *\n     * @default 'fields'\n     */\n    responseStyle?: ResponseStyle;\n    /**\n     * Throw an error instead of returning it in the response?\n     *\n     * @default false\n     */\n    throwOnError?: T['throwOnError'];\n}\n\nexport interface RequestOptions extends Config {\n    /**\n     * Any body that you want to add to your request.\n     *\n     * {@link https://developer.mozilla.org/docs/Web/API/fetch#body}\n     */\n    body?: unknown;\n    path?: Record;\n    query?: Record;\n    /**\n     * Security mechanism(s) to use for the request.\n     */\n    security?: ReadonlyArray;\n    url: Url;\n}\n\nexport type RequestResult = ThrowOnError extends true\n    ? Promise\n                  ? TData[keyof TData]\n                  : TData\n              : {\n                    data: TData extends Record\n                        ? TData[keyof TData]\n                        : TData;\n                    request: Request;\n                    response: Response;\n                }\n      >\n    : Promise\n                          ? TData[keyof TData]\n                          : TData)\n                    | undefined\n              : (\n                    | {\n                          data: TData extends Record\n                              ? TData[keyof TData]\n                              : TData;\n                          error: undefined;\n                      }\n                    | {\n                          data: undefined;\n                          error: TError extends Record\n                              ? TError[keyof TError]\n                              : TError;\n                      }\n                ) & {\n                    request: Request;\n                    response: Response;\n                }\n      >;\n\nexport interface ClientOptions {\n    baseUrl?: string;\n    responseStyle?: ResponseStyle;\n    throwOnError?: boolean;\n}\n\ntype MethodFn = (\n    options: Omit, 'method'>,\n) => RequestResult;\n\ntype RequestFn = (\n    options: Omit, 'method'> &\n        Pick>, 'method'>,\n) => RequestResult;\n\ntype BuildUrlFn = ;\n        query?: Record;\n        url: string;\n    },\n>(\n    options: Pick & Options,\n) => string;\n\nexport type Client = CoreClient & {\n    interceptors: Middleware;\n};\n\n/**\n * The `createClientConfig()` function will be called on client initialization\n * and the returned object will become the client's initial configuration.\n *\n * You may want to initialize your client this way instead of calling\n * `setConfig()`. This is useful for example if you're using Next.js\n * to ensure your client always has the correct values.\n */\nexport type CreateClientConfig = (\n    override?: Config,\n) => Config & T>;\n\nexport interface TDataShape {\n    body?: unknown;\n    headers?: unknown;\n    path?: unknown;\n    query?: unknown;\n    url: string;\n}\n\ntype OmitKeys = Pick>;\n\nexport type Options = OmitKeys,\n    'body' | 'path' | 'query' | 'url'\n> &\n    Omit;\n\nexport type OptionsLegacyParser = TData extends { body?: any }\n    ? TData extends { headers?: any }\n        ? OmitKeys,\n              'body' | 'headers' | 'url'\n          > &\n              TData\n        : OmitKeys,\n              'body' | 'url'\n          > &\n              TData &\n              Pick, 'headers'>\n    : TData extends { headers?: any }\n      ? OmitKeys,\n            'headers' | 'url'\n        > &\n            TData &\n            Pick, 'body'>\n      : OmitKeys, 'url'> & TData;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.decorator.ts\n        \n\n\n            \n                Description\n            \n            \n                Values of the user token\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext } from '@nestjs/common';\n\nexport const Token = createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user as TokenPayload; // Access the token payload on the request object\n    },\n);\n\n/**\n * Values of the user token\n */\nexport interface TokenPayload {\n    sub: string; // Subject (client_id for client credentials)\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenResponse.html":{"url":"classes/TokenResponse.html","title":"class - TokenResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/token-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access_token\n                            \n                            \n                                expires_in\n                            \n                            \n                                token_type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_type\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TokenResponse {\n    access_token: string;\n    token_type: 'Bearer';\n    expires_in: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VCT.html":{"url":"classes/VCT.html","title":"class - VCT","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VCT\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/dto/credential-config.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                extends\n                            \n                            \n                                    \n                                    Optional\n                                extends#integrity\n                            \n                            \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    Optional\n                                schema_uri\n                            \n                            \n                                    \n                                    Optional\n                                schema_uri#integrity\n                            \n                            \n                                    \n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/credential-config.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        extends\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/credential-config.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        extends#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/credential-config.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/credential-config.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/credential-config.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema_uri#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/credential-config.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/dto/credential-config.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsString } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook.dto';\n\nexport class VCT {\n    @IsString()\n    vct: string;\n    @IsString()\n    name?: string;\n    @IsString()\n    description?: string;\n    @IsString()\n    extends?: string;\n    @IsString()\n    'extends#integrity'?: string;\n    @IsString()\n    schema_uri?: string;\n    @IsString()\n    'schema_uri#integrity'?: string;\n}\n\nexport class PresentationDuringIssuance {\n    @IsString()\n    type: string;\n    @IsObject()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VaultKeyService.html":{"url":"injectables/VaultKeyService.html","title":"injectable - VaultKeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VaultKeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/vault-key.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            KeyService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                folder\n                            \n                            \n                                    Private\n                                headers\n                            \n                            \n                                    Private\n                                vaultUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                derToJwtSignature\n                            \n                            \n                                    Private\n                                getJWK\n                            \n                            \n                                getKid\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                    Async\n                                init\n                            \n                            \n                                sign\n                            \n                            \n                                signer\n                            \n                            \n                                    Async\n                                signJWT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, configService: ConfigService, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/vault-key.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:68\n                        \n                    \n\n\n            \n                \n                        Creates a new keypair in the vault.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        derToJwtSignature\n                        \n                    \n                \n            \n            \n                \nderToJwtSignature(derSignature: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:185\n                        \n                    \n\n\n            \n                \n                        Converts a DER signature to a JWT signature.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                derSignature\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getJWK\n                        \n                    \n                \n            \n            \n                \n                        \n                    getJWK(key: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:121\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getKid\n                        \n                    \n                \n            \n            \n                \ngetKid(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:90\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:100\n\n                        \n                    \n\n\n            \n                \n                        Gets the public key and converts it to a KeyLike object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"jwk\" | \"pem\", tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"jwk\" | \"pem\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:45\n\n                        \n                    \n\n\n            \n                \n                        Check if the vault has a key with the given id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sign\n                        \n                    \n                \n            \n            \n                \nsign(value: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:137\n                        \n                    \n\n\n            \n                \n                        Signs a value with a key in the vault.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signer\n                        \n                    \n                \n            \n            \n                \nsigner(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:57\n\n                        \n                    \n\n\n            \n                \n                        Get the signer for the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JwtPayload, header: JWTHeaderParameters, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:156\n\n                        \n                    \n\n\n            \n                \n                        Creates a proof of possession jwt.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWTHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        folder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/vault-key.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        headers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/vault-key.service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        vaultUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/vault-key.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { KeyService } from './key.service';\nimport { HttpService } from '@nestjs/axios';\nimport { firstValueFrom } from 'rxjs';\nimport { importSPKI, exportJWK, JWTHeaderParameters, JWK } from 'jose';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtPayload, Signer } from '@sd-jwt/types';\nimport { CryptoService, CryptoType } from './crypto/crypto.service';\nimport { writeFileSync } from 'fs';\nimport { join } from 'path';\n\n@Injectable()\nexport class VaultKeyService extends KeyService {\n    // url to the vault instance\n    private vaultUrl: string;\n    // headers for the vault api\n    private headers: { headers: { 'X-Vault-Token': string } };\n\n    private folder: string;\n\n    constructor(\n        private httpService: HttpService,\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n    ) {\n        super();\n        this.folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            'keys',\n        );\n\n        this.vaultUrl = this.configService.get('VAULT_URL') as string;\n        this.headers = {\n            headers: {\n                'X-Vault-Token': this.configService.get(\n                    'VAULT_TOKEN',\n                ) as string,\n            },\n        };\n    }\n\n    /**\n     * Check if the vault has a key with the given id\n     */\n    async init(tenantId: string) {\n        //TODO: need to update this since signing cert is not created by the vault\n        await this.getPublicKey('pem', tenantId)\n            .then((res) => {\n                writeFileSync(join(this.folder, 'public-key.pem'), res);\n            })\n            .catch(async () => this.create(tenantId));\n    }\n\n    /**\n     * Get the signer for the key service\n     */\n    signer(tenantId: string): Promise {\n        //TODO: validate if this is correct.\n        return Promise.resolve((input: string) => this.sign(input, tenantId));\n    }\n\n    /**\n     * Creates a new keypair in the vault.\n     * @param createKeyDto\n     * @param user\n     * @returns\n     */\n    async create(tenantId: string) {\n        const types: Map = new Map();\n        types.set('ES256', 'ecdsa-p256');\n        types.set('Ed25519', 'ed25519');\n\n        const res = await firstValueFrom(\n            this.httpService.post(\n                `${this.vaultUrl}/keys/${tenantId}`,\n                {\n                    exportable: false,\n                    type: types.get(this.cryptoService.getAlg()),\n                },\n                this.headers,\n            ),\n        );\n        const jwk = await this.getPublicKey('jwk', tenantId);\n        return {\n            id: res.data.id,\n            publicKey: jwk,\n        };\n    }\n\n    getKid(tenantId: string): Promise {\n        //TODO: check if this is the right way to get the key id.\n        return Promise.resolve(tenantId);\n    }\n\n    /**\n     * Gets the public key and converts it to a KeyLike object.\n     * @param id\n     * @returns\n     */\n    async getPublicKey(type: 'pem', tenantId: string): Promise;\n    async getPublicKey(type: 'jwk', tenantId: string): Promise;\n    async getPublicKey(\n        type: 'jwk' | 'pem',\n        tenantId: string,\n    ): Promise {\n        return firstValueFrom(\n            this.httpService.get(\n                `${this.vaultUrl}/keys/${tenantId}`,\n                this.headers,\n            ),\n        ).then(async (res) => {\n            return type === 'pem'\n                ? (res.data.data.keys['1'].public_key as string)\n                : await this.getJWK(\n                      res.data.data.keys['1'].public_key,\n                      tenantId,\n                  );\n        });\n    }\n\n    private getJWK(key: string, tenantId: string): Promise {\n        return importSPKI(key, this.cryptoService.getAlg())\n            .then((cryptoKey) => exportJWK(cryptoKey))\n            .then(async (jwk) => {\n                jwk.kid = await this.getKid(tenantId);\n                return jwk;\n            });\n    }\n\n    /**\n     * Signs a value with a key in the vault.\n     * @param id\n     * @param user\n     * @param value\n     * @returns\n     */\n    sign(value: string, tenantId: string): Promise {\n        return firstValueFrom(\n            this.httpService.post(\n                `${this.vaultUrl}/sign/${tenantId}`,\n                {\n                    input: Buffer.from(value).toString('base64'),\n                },\n                this.headers,\n            ),\n        ).then((res) =>\n            this.derToJwtSignature(res.data.data.signature.split(':')[2]),\n        );\n    }\n\n    /**\n     * Creates a proof of possession jwt.\n     * @param user\n     * @param value\n     */\n    async signJWT(\n        payload: JwtPayload,\n        header: JWTHeaderParameters,\n        tenantId: string,\n    ): Promise {\n        // Convert header and payload to Base64 to prepare for Vault\n        const encodedHeader = Buffer.from(JSON.stringify(header)).toString(\n            'base64url',\n        );\n        const encodedPayload = Buffer.from(JSON.stringify(payload)).toString(\n            'base64url',\n        );\n        const signingInput = `${encodedHeader}.${encodedPayload}`;\n\n        // Request to Vault for signing\n        try {\n            const signature = await this.sign(signingInput, tenantId);\n            return `${encodedHeader}.${encodedPayload}.${signature}`;\n        } catch (error) {\n            console.error('Error signing JWT with Vault:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Converts a DER signature to a JWT signature.\n     * @param derSignature\n     * @returns\n     */\n    derToJwtSignature(derSignature: string) {\n        // Step 1: Extract r and s from DER signature\n        const der = Buffer.from(derSignature, 'base64');\n        const sequence = der.slice(2); // Skip the sequence tag and length\n        const rLength = sequence[1];\n        const r = sequence.slice(2, 2 + rLength);\n        const s = sequence.slice(2 + rLength + 2); // Skip r, its tag and length byte, and s's tag and length byte\n\n        // Step 2: Ensure r and s are 32 bytes each (pad with zeros if necessary)\n        // Ensure r and s are 32 bytes each\n        let rPadded: Buffer;\n        let sPadded: Buffer;\n        if (r.length > 32) {\n            if (r.length === 33 && r[0] === 0x00) {\n                rPadded = r.slice(1);\n            } else {\n                throw new Error('Invalid r length in DER signature');\n            }\n        } else {\n            rPadded = Buffer.concat([Buffer.alloc(32 - r.length), r]);\n        }\n        if (s.length > 32) {\n            if (s.length === 33 && s[0] === 0x00) {\n                sPadded = s.slice(1);\n            } else {\n                throw new Error('Invalid s length in DER signature');\n            }\n        } else {\n            sPadded = Buffer.concat([Buffer.alloc(32 - s.length), s]);\n        }\n\n        // Step 3: Concatenate r and s to form the raw signature\n        const rawSignature = Buffer.concat([rPadded, sPadded]);\n\n        // Step 4: Base64url encode the raw signature\n        return rawSignature\n            .toString('base64')\n            .replace(/\\+/g, '-')\n            .replace(/\\//g, '_')\n            .replace(/=/g, '');\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VerifierModule.html":{"url":"modules/VerifierModule.html","title":"module - VerifierModule","body":"\n                   \n\n\n\n\n    Modules\n    VerifierModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VerifierModule\n\n\n\ncluster_VerifierModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/verifier.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            PresentationsModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CryptoModule } from '../crypto/crypto.module';\nimport { RegistrarModule } from '../registrar/registrar.module';\nimport { SessionModule } from '../session/session.module';\nimport { HttpModule } from '@nestjs/axios';\nimport { PresentationsModule } from './presentations/presentations.module';\nimport { Oid4vpModule } from './oid4vp/oid4vp.module';\n\n@Module({\n    imports: [\n        CryptoModule,\n        RegistrarModule,\n        SessionModule,\n        HttpModule,\n        PresentationsModule,\n        Oid4vpModule,\n    ],\n})\nexport class VerifierModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebHookAuthConfig.html":{"url":"classes/WebHookAuthConfig.html","title":"class - WebHookAuthConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebHookAuthConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhook authentication.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApiKeyConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook.dto.ts:43\n                        \n                    \n\n            \n                \n                    Configuration for API key authentication.\nThis is required if the type is 'apiKey'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['apiKey'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook.dto.ts:36\n                        \n                    \n\n            \n                \n                    The type of authentication used for the webhook.\nCurrently, only 'apiKey' is supported.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsIn, IsObject, IsOptional, IsString } from 'class-validator';\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     * @example Authorization\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     * @example Bearer your_api_key_here\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = 'apiKey';\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn(['apiKey'])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebhookConfig.html":{"url":"classes/WebhookConfig.html","title":"class - WebhookConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebhookConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhooks used in various services.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                auth\n                            \n                            \n                                    \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        auth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebHookAuthConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsOptional()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook.dto.ts:62\n                        \n                    \n\n            \n                \n                    Optional authentication configuration for the webhook.\nIf not provided, no authentication will be used.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook.dto.ts:54\n                        \n                    \n\n            \n                \n                    The URL to which the webhook will send notifications.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsIn, IsObject, IsOptional, IsString } from 'class-validator';\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     * @example Authorization\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     * @example Bearer your_api_key_here\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = 'apiKey';\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn(['apiKey'])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/WellKnownController.html":{"url":"controllers/WellKnownController.html","title":"controller - WellKnownController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  WellKnownController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/well-known.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/.well-known\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI well-known endpoints.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authzMetadata\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getJwks\n                            \n                            \n                                    \n                                    \n                                    Async\n                                issuerMetadata\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    authzMetadata(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('oauth-authorization-server')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:36\n                        \n                    \n\n\n            \n                \n                        Authorization Server Metadata\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Oauth2AuthorizationServerResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getJwks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getJwks(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Header('Content-Type', 'application/jwk-set+json')@Get('jwks.json')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:50\n                        \n                    \n\n\n            \n                \n                        Returns the JSON Web Key Set (JWKS) for the authorization server.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        issuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    issuerMetadata(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get OpenID4VCI issuer metadata', description: 'Returns the OpenID4VCI issuer metadata.'})@Get('openid-credential-issuer')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header, Param } from '@nestjs/common';\nimport { CryptoService } from '../crypto/crypto.service';\nimport { AuthorizeService } from '../issuer/authorize/authorize.service';\nimport { Oid4vciService } from '../issuer/oid4vci/oid4vci.service';\nimport { JwksResponseDto } from './dto/jwks-response.dto';\nimport { Oauth2AuthorizationServerResponse } from './dto/oauth-authorization-server-response.dto';\nimport { CredentialIssuerMetadataDto } from './dto/credential-issuer-metadata.dto';\nimport { ApiOperation } from '@nestjs/swagger';\n\n/**\n * Controller for the OpenID4VCI well-known endpoints.\n */\n@Controller(':tenantId/.well-known')\nexport class WellKnownController {\n    constructor(\n        private readonly oid4vciService: Oid4vciService,\n        private readonly authorizeService: AuthorizeService,\n        private readonly cryptoService: CryptoService,\n    ) {}\n\n    @ApiOperation({\n        summary: 'Get OpenID4VCI issuer metadata',\n        description: 'Returns the OpenID4VCI issuer metadata.',\n    })\n    @Get('openid-credential-issuer')\n    async issuerMetadata(@Param('tenantId') tenantId: string) {\n        return (await this.oid4vciService.issuerMetadata(tenantId))\n            .credentialIssuer as unknown as Promise;\n    }\n\n    /**\n     * Authorization Server Metadata\n     * @returns\n     */\n    @Get('oauth-authorization-server')\n    authzMetadata(\n        @Param('tenantId') tenantId: string,\n    ): Oauth2AuthorizationServerResponse {\n        return this.authorizeService.authzMetadata(\n            tenantId,\n        ) as Oauth2AuthorizationServerResponse;\n    }\n\n    /**\n     * Returns the JSON Web Key Set (JWKS) for the authorization server.\n     * @returns\n     */\n    @Header('Content-Type', 'application/jwk-set+json')\n    @Get('jwks.json')\n    async getJwks(\n        @Param('tenantId') tenantId: string,\n    ): Promise {\n        return this.cryptoService.getJwks(tenantId).then((key) => ({\n            keys: [key],\n        }));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n1.2.3 (2025-07-20)\nBug Fixes\n\nci deploy with version generation (259ab39)\nrelease pipeline (7a6a69c)\nset correct way for deployment (2aa727a)\nuse oidc url instead of keycloak one (2913417)\n\n1.2.2 (2025-07-19)\nBug Fixes\n\nadd tmp logger (6bb4aa9)\nset correct url for vp (295428b)\n\n1.2.1 (2025-07-18)\nBug Fixes\n\nci (8f9498a)\nci (905e17c)\n\n1.2.1 (2025-07-18)\nBug Fixes\n\nci (905e17c)\n\n1.2.0 (2025-07-18)\nBug Fixes\n\nadd codecov (#2) (9104df3)\nadd test for presentation (#6) (e3e5971)\nremove console logs (32fbd8e)\nremove ts file from root (b989c6c)\nupload test results (#3) (f75298f)\nvitest config (beef4d2)\n\nFeatures\n\nadd multi tenant support (#7) (46c9ce6)\n\n1.1.0 (2025-07-11)\nBug Fixes\n\nset correct version (91b5499)\nupdate db env (35f4d1e)\n\nFeatures\n\nadd deployment options (937603a)\n\n1.0.1 (2025-07-10)\nBug Fixes\n\nadd auth to webhook (c3b1b48)\nadd cloudflare worker example (6d31de0)\ngeneral improvements (f7e7505)\nmake key folder static (6a6cdb6)\nwebhook handling (df29d1e)\n\n1.0.0 (2025-07-09)\nBug Fixes\n\nadd semantic release (c805439)\nadjust release pipeline (3ac47ec)\nci (892b30e)\nci (40ccd32)\nci (12395c8)\nci (45f3f7f)\nci (4be0171)\nci (2f07af2)\nci (2a71850)\nci nameing (33ac2c7)\nci, install pnpm (ac4ee24)\nci, remove version (54e8a4e)\ndocker deploy (98303c1)\nmain (d6205da)\npage build (b3abd57)\nsplit jobs (2742ec4)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @badgateway/oauth2-client : ^3.2.0\n        \n            @nestjs/axios : ^4.0.0\n        \n            @nestjs/common : ^11.1.3\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.3\n        \n            @nestjs/event-emitter : ^3.0.1\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.3\n        \n            @nestjs/schedule : ^6.0.0\n        \n            @nestjs/serve-static : ^5.0.3\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/terminus : ^11.0.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @openid4vc/oauth2 : 0.3.0-alpha-20250602121005\n        \n            @openid4vc/openid4vci : 0.3.0-alpha-20250602121005\n        \n            @openid4vc/openid4vp : 0.3.0-alpha-20250602121005\n        \n            @openid4vc/utils : ^0.3.0-alpha-20250602121005\n        \n            @sd-jwt/crypto-nodejs : ^0.14.0\n        \n            @sd-jwt/jwt-status-list : ^0.14.0\n        \n            @sd-jwt/sd-jwt-vc : ^0.14.0\n        \n            @sd-jwt/types : ^0.14.0\n        \n            axios : ^1.10.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            joi : ^17.13.3\n        \n            jose : ^6.0.11\n        \n            jwks-rsa : ^3.2.0\n        \n            mysql2 : ^3.14.1\n        \n            nestjs-pino : ^4.4.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.16.3\n        \n            pino-http : ^10.5.0\n        \n            pino-pretty : ^13.0.0\n        \n            qrcode : ^1.5.4\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            sqlite3 : ^5.1.7\n        \n            typeorm : ^0.3.25\n        \n            uuid : ^11.1.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ResponseType   (src/.../presentation-request.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/verifier/oid4vp/dto/presentation-request.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ResponseType\n                    \n                \n                    \n                        \n                            Enum for the type of response expected from the presentation request.\n\n                        \n                    \n                        \n                            \n                                 QRCode\n                            \n                        \n                        \n                            \n                                Value : qrcode\n                            \n                        \n                        \n                            \n                                 URI\n                            \n                        \n                        \n                            \n                                Value : uri\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            getHeadersFromRequest   (src/.../util.ts)\n                        \n                        \n                            handleRequest   (test/.../index.ts)\n                        \n                        \n                            loggerMiddleware   (test/.../utils.ts)\n                        \n                        \n                            run   (scripts/.../import.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Bootstrap function to initialize the NestJS application.\n\n\n                \n            \n        \n    \n    src/issuer/oid4vci/util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getHeadersFromRequest\n                        \n                    \n                \n            \n            \n                \ngetHeadersFromRequest(req: Request)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     globalThis.Headers\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    test/webhook/src/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(request: Request)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    test/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        loggerMiddleware\n                        \n                    \n                \n            \n            \n                \nloggerMiddleware(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    scripts/import.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        run\n                        \n                    \n                \n            \n            \n                \nrun()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n\nEUDIPLO\nYour Diplomatic Layer for EUDI Wallet Integration\nEUDIPLO is an open-source middleware that bridges your backend and EUDI Wallets\nusing a unified API and standardized protocols.\n\n🧭 Overview\nOrganizations joining the EUDI Wallet ecosystem face a tough choice: patch\ntogether protocol libraries that may not exist for their stack, or rely on\nproprietary solutions that risk vendor lock-in.\nEUDIPLO solves this by providing a lightweight, source-available, protocol\nabstraction layer. It communicates over HTTP and integrates easily with your\nexisting backend stack—so you can focus on your business logic, not\ncryptographic plumbing.\nIt supports all core flows of electronic attribute attestations—issuing,\nrequesting, and even requesting during issuance—and is already\ncompatible with production-grade EUDI Wallets like Animo.\nWhile still in early development, EUDIPLO is built for production: secure key\nmanagement, scalable database support, and clean API boundaries.\n\n🧩 Features\n\n✅ Supports OID4VCI, OID4VP, SD-JWT VC, and OAuth Token Status\nList\n✅ JSON-based credential configuration\n✅ Client credentials authentication for easy service integration\n✅ Runs via Docker with .env config\n✅ HTTP-based integration with any backend\n✅ Secure key management & pluggable storage\n✅ Privacy-friendly: no external calls, no long-term storage\n\n\n🚀 Quick Start\nExample :# Clone and configure\ngit clone https://github.com/cre8/eudiplo.git\ncd eudiplo\ncp .env.example .env\n\n# Configure authentication\necho \"JWT_SECRET=$(openssl rand -base64 32)\" >> .env\necho \"AUTH_CLIENT_SECRET=$(openssl rand -base64 24)\" >> .env\n\n# Start with Docker\ndocker run -p 3000:3000 \\\n  -e PUBLIC_URL=https://example.com \\\n  -e JWT_SECRET=your-32-character-secret \\\n  -e AUTH_CLIENT_SECRET=your-issuer-secret \\\n  -v $(pwd)/config:/app/config \\\n  ghcr.io/cre8/eudiplo:latest\n\n# Get a token and start using the API\ncurl -X POST http://localhost:3000/auth/token \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"client_id\": \"root\",\n    \"client_secret\": \"root\"\n  }'📚 API:\nhttps://cre8.github.io/eudiplo/latest/api/📦\nFull setup:\nQuickstart Guide\n\n📚 Documentation\nChoose your documentation version:\n\n🚀 Latest Stable (recommended):\nhttps://cre8.github.io/eudiplo/latest/ -\nDocumentation for the most recent major release\n🔬 Development:\nhttps://cre8.github.io/eudiplo/main/ -\nLatest features from the main branch\n📚 Specific Major Versions: v1,\nv2, etc.\n\nKey sections:\n\nArchitecture\nSupported Protocols\nAPI Reference\nCode Documentation\n\n\n🤝 Contributing\nWe welcome PRs from wallet developers, institutions, and contributors interested\nin advancing the EUDI Wallet ecosystem.\nSee CONTRIBUTING.md for guidelines.\n\n📝 License\nLicensed under the Apache 2.0 License\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nExample :                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\nDefinitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\nGrant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\nGrant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\nRedistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and\n(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.\nYou may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\nSubmission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\nTrademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\nDisclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\nLimitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\nAccepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\n\n\n   END OF TERMS AND CONDITIONS\n   APPENDIX: How to apply the Apache License to your work.\nExample :  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.   Copyright [2025] [Mirko Mollik]\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\nExample :   http://www.apache.org/licenses/LICENSE-2.0   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IssuerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KeyModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        Oid4vpModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PresentationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RegistrarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ResolverModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SessionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StatusListModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VerifierModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_exports\n\n\n\ncluster_CryptoModule_providers\n\n\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_imports\n\n\n\ncluster_IssuerModule_exports\n\n\n\ncluster_IssuerModule_providers\n\n\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_imports\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_imports\n\n\n\ncluster_PresentationsModule_exports\n\n\n\ncluster_PresentationsModule_providers\n\n\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_exports\n\n\n\ncluster_RegistrarModule_providers\n\n\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_exports\n\n\n\ncluster_ResolverModule_providers\n\n\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_exports\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_exports\n\n\n\ncluster_StatusListModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nJwtService \n\nJwtService \n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nCryptoService \n\nCryptoService \n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\n\n\nEncryptionService \n\nEncryptionService \n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\nOid4vpModule -->\n\nRegistrarModule->Oid4vpModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\n\n\nSessionModule\n\nSessionModule\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\nClientService\n\nClientService\n\nAuthModule -->\n\nClientService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nIssuerModule -->\n\nSessionLoggerInterceptor->IssuerModule\n\n\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nIssuerModule -->\n\nSessionLoggerService->IssuerModule\n\n\n\nOid4vpModule -->\n\nSessionLoggerService->Oid4vpModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\nOid4vpModule -->\n\nPresentationsModule->Oid4vpModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nResolverModule\n\nResolverModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nResolverService \n\nResolverService \n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        15 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    12 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    20 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    24 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    29 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : Apache 2.0\n        \n            Author : Mirko Mollik \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AccessCertificate   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerAccessCertificatesData   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerAccessCertificatesResponse   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerAccessCertificatesResponses   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerDeleteData   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerDeleteResponses   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerFindOneData   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerFindOneParsedData   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerFindOneParsedResponse   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerFindOneParsedResponses   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerFindOneResponses   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerRegisterData   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerRegisterResponse   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateControllerRegisterResponses   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateRegistration   (src/.../types.gen.ts)\n                        \n                        \n                            AccessCertificateRegistrationResponse   (src/.../types.gen.ts)\n                        \n                        \n                            ArraySeparatorStyle   (src/.../utils.ts)\n                        \n                        \n                            ArraySeparatorStyle   (src/.../pathSerializer.ts)\n                        \n                        \n                            ArrayStyle   (src/.../utils.ts)\n                        \n                        \n                            ArrayStyle   (src/.../pathSerializer.ts)\n                        \n                        \n                            AuthConfig   (src/.../webhook.dto.ts)\n                        \n                        \n                            AuthToken   (src/.../auth.ts)\n                        \n                        \n                            BodySerializer   (src/.../bodySerializer.ts)\n                        \n                        \n                            BuildUrlFn   (src/.../types.ts)\n                        \n                        \n                            certificateType   (src/.../crypto.service.ts)\n                        \n                        \n                            Client   (src/.../types.ts)\n                        \n                        \n                            ClientOptions   (src/.../types.gen.ts)\n                        \n                        \n                            Contact   (src/.../types.gen.ts)\n                        \n                        \n                            CreateClientConfig   (src/.../client.gen.ts)\n                        \n                        \n                            CreateClientConfig   (src/.../types.ts)\n                        \n                        \n                            Credential   (src/.../types.gen.ts)\n                        \n                        \n                            CryptoControllerOwnCertData   (src/.../types.gen.ts)\n                        \n                        \n                            CryptoControllerOwnCertParsedData   (src/.../types.gen.ts)\n                        \n                        \n                            CryptoControllerOwnCertParsedResponse   (src/.../types.gen.ts)\n                        \n                        \n                            CryptoControllerOwnCertParsedResponses   (src/.../types.gen.ts)\n                        \n                        \n                            CryptoControllerOwnCertResponse   (src/.../types.gen.ts)\n                        \n                        \n                            CryptoControllerOwnCertResponses   (src/.../types.gen.ts)\n                        \n                        \n                            CryptoType   (src/.../crypto.service.ts)\n                        \n                        \n                            DecodedJwt   (src/.../types.gen.ts)\n                        \n                        \n                            ErrInterceptor   (src/.../utils.ts)\n                        \n                        \n                            Field   (src/.../params.ts)\n                        \n                        \n                            FieldsConfig   (src/.../params.ts)\n                        \n                        \n                            HealthControllerCheckData   (src/.../types.gen.ts)\n                        \n                        \n                            HealthControllerCheckError   (src/.../types.gen.ts)\n                        \n                        \n                            HealthControllerCheckErrors   (src/.../types.gen.ts)\n                        \n                        \n                            HealthControllerCheckResponse   (src/.../types.gen.ts)\n                        \n                        \n                            HealthControllerCheckResponses   (src/.../types.gen.ts)\n                        \n                        \n                            IntendedUse   (src/.../types.gen.ts)\n                        \n                        \n                            KeyMap   (src/.../params.ts)\n                        \n                        \n                            KeyPair   (src/.../crypto-implementation.ts)\n                        \n                        \n                            LoginReponse   (scripts/.../import.ts)\n                        \n                        \n                            MatrixStyle   (src/.../utils.ts)\n                        \n                        \n                            MatrixStyle   (src/.../pathSerializer.ts)\n                        \n                        \n                            MethodFn   (src/.../types.ts)\n                        \n                        \n                            MultiLang   (src/.../types.gen.ts)\n                        \n                        \n                            Notification   (src/.../session.entity.ts)\n                        \n                        \n                            ObjectSeparatorStyle   (src/.../pathSerializer.ts)\n                        \n                        \n                            ObjectStyle   (src/.../pathSerializer.ts)\n                        \n                        \n                            Oid4VpControllerGetValidPidData   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerGetValidPidResponses   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerGetValidRequestData   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerGetValidRequestResponse   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerGetValidRequestResponses   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerGetValidRequestWithQueryData   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerGetValidRequestWithQueryResponse   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerGetValidRequestWithQueryResponses   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerResponseData   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerResponseResponses   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerSuccessData   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerSuccessResponse   (src/.../types.gen.ts)\n                        \n                        \n                            Oid4VpControllerSuccessResponses   (src/.../types.gen.ts)\n                        \n                        \n                            OmitKeys   (src/.../types.ts)\n                        \n                        \n                            OmitTypeClass   (src/.../types.gen.ts)\n                        \n                        \n                            Options   (src/.../sdk.gen.ts)\n                        \n                        \n                            Options   (src/.../types.ts)\n                        \n                        \n                            OptionsLegacyParser   (src/.../types.ts)\n                        \n                        \n                            QuerySerializer   (src/.../bodySerializer.ts)\n                        \n                        \n                            RegistrationCertificate   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerAllData   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerAllResponse   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerAllResponses   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerDeleteData   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerDeleteResponses   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerFindOneData   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerFindOneDecodedData   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerFindOneDecodedResponse   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerFindOneDecodedResponses   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerFindOneError   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerFindOneErrors   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerFindOneResponse   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerFindOneResponses   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerRegisterData   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerRegisterResponse   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateControllerRegisterResponses   (src/.../types.gen.ts)\n                        \n                        \n                            RegistrationCertificateCreation   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingParty   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingPartyControllerFindAllData   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingPartyControllerFindAllResponse   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingPartyControllerFindAllResponses   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingPartyControllerRegisterData   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingPartyControllerRegisterResponse   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingPartyControllerRegisterResponses   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingPartyControllerRemoveData   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingPartyControllerRemoveResponses   (src/.../types.gen.ts)\n                        \n                        \n                            RelyingPartyRegistration   (src/.../types.gen.ts)\n                        \n                        \n                            ReqInit   (src/.../client.ts)\n                        \n                        \n                            ReqInterceptor   (src/.../utils.ts)\n                        \n                        \n                            RequestFn   (src/.../types.ts)\n                        \n                        \n                            RequestResult   (src/.../types.ts)\n                        \n                        \n                            ResInterceptor   (src/.../utils.ts)\n                        \n                        \n                            ResponseStyle   (src/.../types.ts)\n                        \n                        \n                            Signer   (src/.../crypto-implementation.ts)\n                        \n                        \n                            Slot   (src/.../params.ts)\n                        \n                        \n                            StatusListControllerCrlFileData   (src/.../types.gen.ts)\n                        \n                        \n                            StatusListControllerCrlFileResponse   (src/.../types.gen.ts)\n                        \n                        \n                            StatusListControllerCrlFileResponses   (src/.../types.gen.ts)\n                        \n                        \n                            StatusListControllerGetListData   (src/.../types.gen.ts)\n                        \n                        \n                            StatusListControllerGetListResponse   (src/.../types.gen.ts)\n                        \n                        \n                            StatusListControllerGetListResponses   (src/.../types.gen.ts)\n                        \n                        \n                            Verifier   (src/.../crypto-implementation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/registrar/generated/types.gen.ts\n    \n    \n        \n            \n                \n                    \n                    AccessCertificate\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerAccessCertificatesData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerAccessCertificatesResponse\n                \n            \n            \n                \n                            AccessCertificateControllerAccessCertificatesResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerAccessCertificatesResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerDeleteData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerDeleteResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerFindOneData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerFindOneParsedData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerFindOneParsedResponse\n                \n            \n            \n                \n                            AccessCertificateControllerFindOneParsedResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerFindOneParsedResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerFindOneResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerRegisterData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerRegisterResponse\n                \n            \n            \n                \n                            AccessCertificateControllerRegisterResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateControllerRegisterResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateRegistration\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AccessCertificateRegistrationResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ClientOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Contact\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Credential\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CryptoControllerOwnCertData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CryptoControllerOwnCertParsedData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CryptoControllerOwnCertParsedResponse\n                \n            \n            \n                \n                            CryptoControllerOwnCertParsedResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CryptoControllerOwnCertParsedResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CryptoControllerOwnCertResponse\n                \n            \n            \n                \n                            CryptoControllerOwnCertResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CryptoControllerOwnCertResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DecodedJwt\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HealthControllerCheckData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HealthControllerCheckError\n                \n            \n            \n                \n                            HealthControllerCheckErrors\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HealthControllerCheckErrors\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HealthControllerCheckResponse\n                \n            \n            \n                \n                            HealthControllerCheckResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HealthControllerCheckResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    IntendedUse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MultiLang\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerGetValidPidData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerGetValidPidResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerGetValidRequestData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerGetValidRequestResponse\n                \n            \n            \n                \n                            Oid4VpControllerGetValidRequestResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerGetValidRequestResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerGetValidRequestWithQueryData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerGetValidRequestWithQueryResponse\n                \n            \n            \n                \n                            Oid4VpControllerGetValidRequestWithQueryResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerGetValidRequestWithQueryResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerResponseData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerResponseResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerSuccessData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerSuccessResponse\n                \n            \n            \n                \n                            Oid4VpControllerSuccessResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Oid4VpControllerSuccessResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OmitTypeClass\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificate\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerAllData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerAllResponse\n                \n            \n            \n                \n                            RegistrationCertificateControllerAllResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerAllResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerDeleteData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerDeleteResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerFindOneData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerFindOneDecodedData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerFindOneDecodedResponse\n                \n            \n            \n                \n                            RegistrationCertificateControllerFindOneDecodedResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerFindOneDecodedResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerFindOneError\n                \n            \n            \n                \n                            RegistrationCertificateControllerFindOneErrors\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerFindOneErrors\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerFindOneResponse\n                \n            \n            \n                \n                            RegistrationCertificateControllerFindOneResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerFindOneResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerRegisterData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerRegisterResponse\n                \n            \n            \n                \n                            RegistrationCertificateControllerRegisterResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateControllerRegisterResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RegistrationCertificateCreation\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingParty\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingPartyControllerFindAllData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingPartyControllerFindAllResponse\n                \n            \n            \n                \n                            RelyingPartyControllerFindAllResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingPartyControllerFindAllResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingPartyControllerRegisterData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingPartyControllerRegisterResponse\n                \n            \n            \n                \n                            RelyingPartyControllerRegisterResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingPartyControllerRegisterResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingPartyControllerRemoveData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingPartyControllerRemoveResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RelyingPartyRegistration\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StatusListControllerCrlFileData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StatusListControllerCrlFileResponse\n                \n            \n            \n                \n                            StatusListControllerCrlFileResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StatusListControllerCrlFileResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StatusListControllerGetListData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StatusListControllerGetListResponse\n                \n            \n            \n                \n                            StatusListControllerGetListResponses\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StatusListControllerGetListResponses\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/registrar/generated/client/utils.ts\n    \n    \n        \n            \n                \n                    \n                    ArraySeparatorStyle\n                \n            \n            \n                \n                        ArrayStyle | MatrixStyle\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ArrayStyle\n                \n            \n            \n                \n                        \"form\" | \"spaceDelimited\" | \"pipeDelimited\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ErrInterceptor\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MatrixStyle\n                \n            \n            \n                \n                        \"label\" | \"matrix\" | \"simple\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ReqInterceptor\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResInterceptor\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/registrar/generated/core/pathSerializer.ts\n    \n    \n        \n            \n                \n                    \n                    ArraySeparatorStyle\n                \n            \n            \n                \n                        ArrayStyle | MatrixStyle\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ArrayStyle\n                \n            \n            \n                \n                        \"form\" | \"spaceDelimited\" | \"pipeDelimited\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MatrixStyle\n                \n            \n            \n                \n                        \"label\" | \"matrix\" | \"simple\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ObjectSeparatorStyle\n                \n            \n            \n                \n                        ObjectStyle | MatrixStyle\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ObjectStyle\n                \n            \n            \n                \n                        \"form\" | \"deepObject\"\n\n                \n            \n        \n    \n    src/utils/webhook.dto.ts\n    \n    \n        \n            \n                \n                    \n                    AuthConfig\n                \n            \n            \n                \n                    Enum for the type of authentication used in webhooks.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/registrar/generated/core/auth.ts\n    \n    \n        \n            \n                \n                    \n                    AuthToken\n                \n            \n            \n                \n                        string | undefined\n\n                \n            \n        \n    \n    src/registrar/generated/core/bodySerializer.ts\n    \n    \n        \n            \n                \n                    \n                    BodySerializer\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QuerySerializer\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/registrar/generated/client/types.ts\n    \n    \n        \n            \n                \n                    \n                    BuildUrlFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Client\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CreateClientConfig\n                \n            \n            \n                \n                    The createClientConfig() function will be called on client initialization\nand the returned object will become the client's initial configuration.\nYou may want to initialize your client this way instead of calling\nsetConfig(). This is useful for example if you're using Next.js\nto ensure your client always has the correct values.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MethodFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OmitKeys\n                \n            \n            \n                \n                        Pick>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Options\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OptionsLegacyParser\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestResult\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseStyle\n                \n            \n            \n                \n                        \"data\" | \"fields\"\n\n                \n            \n        \n    \n    src/crypto/crypto.service.ts\n    \n    \n        \n            \n                \n                    \n                    certificateType\n                \n            \n            \n                \n                        \"access\" | \"signing\"\n\n                \n            \n        \n    \n    src/registrar/generated/client.gen.ts\n    \n    \n        \n            \n                \n                    \n                    CreateClientConfig\n                \n            \n            \n                \n                    The createClientConfig() function will be called on client initialization\nand the returned object will become the client's initial configuration.\nYou may want to initialize your client this way instead of calling\nsetConfig(). This is useful for example if you're using Next.js\nto ensure your client always has the correct values.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/crypto/key/crypto/crypto.service.ts\n    \n    \n        \n            \n                \n                    \n                    CryptoType\n                \n            \n            \n                \n                        \"ES256\" | \"Ed25519\"\n\n                \n            \n        \n    \n    src/registrar/generated/core/params.ts\n    \n    \n        \n            \n                \n                    \n                    Field\n                \n            \n            \n                \n                        literal type | literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FieldsConfig\n                \n            \n            \n                \n                            ReadonlyArray\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    KeyMap\n                \n            \n            \n                \n                        Map\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Slot\n                \n            \n            \n                \n                        \"body\" | \"headers\" | \"path\" | \"query\"\n\n                \n            \n        \n    \n    src/crypto/key/crypto/crypto-implementation.ts\n    \n    \n        \n            \n                \n                    \n                    KeyPair\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Signer\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Verifier\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    scripts/import.ts\n    \n    \n        \n            \n                \n                    \n                    LoginReponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/session/entities/session.entity.ts\n    \n    \n        \n            \n                \n                    \n                    Notification\n                \n            \n            \n                \n                    Represents a session entity for managing user sessions in the application.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/registrar/generated/sdk.gen.ts\n    \n    \n        \n            \n                \n                    \n                    Options\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/registrar/generated/client/client.ts\n    \n    \n        \n            \n                \n                    \n                    ReqInit\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
