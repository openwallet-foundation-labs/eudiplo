var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AccessCertificateResponse.html",[0,1.199,1,3.272]],["body/interfaces/AccessCertificateResponse.html",[0,0.624,1,3.448,2,1.048,3,0.063,4,0.052,5,0.109,6,1.836,7,0.362,8,3.246,9,4.747,10,5.014,11,0.934,12,0.113,13,0.54,14,4.264,15,1.871,16,0.458,17,5.469,18,0.66,19,0.217,20,0.01,21,1.409,22,1.169,23,3.233,24,2.021,25,2.202,26,1.635,27,2.646,28,2.959,29,0.358,30,0.584,31,3.233,32,2.766,33,0.318,34,1.8,35,0.672,36,4.678,37,1.836,38,3.757,39,2.014,40,3.246,41,3.246,42,3.246,43,3.246,44,3.246,45,3.246,46,1.836,47,2.227,48,1.083,49,2.431,50,2.014,51,1.048,52,3.329,53,2.014,54,1.307,55,1.366,56,1.254,57,1.596,58,4.571,59,5.593,60,2.425,61,2.121,62,1.596,63,1.508,64,1.254,65,1.307,66,1.254,67,1.508,68,1.307,69,2.9,70,1.432,71,1.083,72,2.014,73,1.703,74,5.483,75,5.257,76,2.014,77,3.246,78,4.571,79,0.063,80,0.051,81,1.083,82,2.107,83,3.246,84,1.307,85,1.508,86,2.069,87,1.432,88,2.014,89,1.974,90,2.014,91,1.432,92,2.014,93,0.957,94,1.877,95,2.9,96,1.703,97,1.372,98,1.083,99,1.836,100,1.703,101,1.508,102,1.703,103,1.596,104,1.307,105,1.048,106,1.083,107,1.821,108,2.745,109,1.478,110,1.738,111,2.014,112,2.014,113,2.107,114,2.573,115,1.703,116,2.573,117,1.703,118,2.014,119,2.447,120,1.121,121,2.014,122,2.014,123,2.014,124,2.014,125,2.014,126,5.767,127,2.014,128,2.014,129,2.014,130,0.983,131,3.246,132,1.703,133,1.083,134,2.745,135,2.308,136,1.186,137,1.169,138,1.162,139,1.432,140,1.703,141,3.246,142,2.202,143,4.078,144,1.432,145,2.014,146,2.014,147,2.186,148,2.411,149,3.246,150,0.954,151,2.014,152,2.218,153,1.703,154,1.508,155,3.246,156,5.257,157,2.014,158,2.014,159,2.014,160,1.121,161,0.763,162,0.899,163,2.014,164,1.508,165,2.9,166,2.014,167,2.014,168,2.014,169,2.431,170,2.014,171,2.014,172,1.307,173,2.014,174,1.836,175,1.836,176,1.508,177,1.836,178,1.836,179,1.836,180,2.014,181,2.014,182,2.014,183,2.014,184,1.366,185,2.014,186,4.636,187,2.766,188,4.078,189,2.646,190,2.014,191,1.169,192,1.178,193,1.703,194,1.931,195,2.745,196,0.689,197,2.014,198,2.014,199,4.078,200,3.246,201,1.508,202,2.745,203,0.899,204,2.9,205,2.9,206,2.014,207,1.703,208,2.014,209,2.014,210,2.014,211,2.014,212,3.479,213,4.636,214,2.515,215,2.959,216,2.014,217,2.766,218,4.078,219,3.246,220,2.912,221,5.13,222,3.717,223,5.483,224,2.959,225,2.014,226,1.206,227,1.836,228,2.014,229,2.014,230,2.959,231,2.014,232,2.573,233,2.014,234,1.836,235,2.014,236,1.432,237,1.596,238,2.014,239,1.722,240,3.246,241,1.162,242,2.431,243,2.014,244,2.014,245,4.078,246,2.014,247,1.206,248,1.821,249,2.745,250,2.014,251,1.45,252,2.014,253,1.836,254,2.431,255,2.014,256,2.014,257,1.254,258,1.596,259,1.508,260,0.005,261,1.836,262,2.014,263,2.014,264,2.646,265,2.014,266,2.014,267,2.014,268,1.366,269,2.014,270,1.836,271,1.121,272,2.014,273,2.014,274,2.959,275,1.836,276,2.014,277,1.432,278,1.836,279,2.014,280,1.703,281,2.014,282,2.014,283,1.596,284,2.014,285,3.246,286,2.021,287,3.246,288,2.014,289,1.366,290,1.121,291,1.703,292,3.246,293,3.246,294,2.014,295,2.202,296,1.596,297,2.014,298,1.366,299,1.366,300,1.836,301,2.014,302,2.014,303,0.004]],["title/classes/ApiKeyConfig.html",[80,0.097,304,3.068]],["body/classes/ApiKeyConfig.html",[3,0.138,4,0.115,5,0.103,7,0.796,12,0.248,13,0.963,16,0.624,18,0.664,19,0.408,20,0.01,22,2.671,29,0.308,60,1.552,79,0.213,80,0.179,87,5.276,97,1.948,130,2.16,192,1.243,203,3.055,260,0.007,303,0.007,304,5.422,305,1.552,306,3.506,307,3.565,308,5.422,309,5.878,310,2.691,311,1.511,312,3.668,313,0.58,314,5.018,315,3.446,316,4.259,317,3.945,318,5.018,319,3,320,3.145,321,3.248,322,3.22,323,1.867,324,2.095,325,3.506,326,4.032,327,3.312,328,3.924,329,5.452,330,2.888,331,5.112,332,4.032,333,3,334,4.032,335,2.095,336,3.506,337,3.506,338,2.034,339,2.443,340,2.461,341,3.312,342,2.648]],["title/controllers/AppController.html",[343,1.358,344,3.272]],["body/controllers/AppController.html",[3,0.179,4,0.149,5,0.134,12,0.322,18,0.637,20,0.009,29,0.362,33,0.906,79,0.179,80,0.145,109,1.203,136,1.328,260,0.008,303,0.008,311,1.5,313,0.576,343,2.39,344,5.758,345,2.359,346,5.744,347,1.694,348,8.517,349,6.516,350,7.726,351,2.988,352,5.236,353,4.553,354,6.516,355,4.856,356,3.895,357,5.744,358,5.236,359,5.744]],["title/modules/AppModule.html",[360,1.324,361,3.272]],["body/modules/AppModule.html",[3,0.171,4,0.084,5,0.076,15,1.351,19,0.25,20,0.01,21,2.037,29,0.412,33,0.514,34,2.399,35,1.088,61,1.696,64,2.031,79,0.102,80,0.082,109,0.983,110,1.367,137,1.979,138,2.707,152,1.49,162,1.457,220,2.031,247,3.291,251,1.457,260,0.006,271,2.612,303,0.006,339,1.377,344,4.648,345,1.927,360,1.881,361,6.639,362,1.592,363,1.754,364,1.881,365,1.881,366,1.696,367,2.612,368,1.815,369,3.262,370,3.262,371,5.259,372,3.972,373,5.648,374,5.259,375,5.259,376,5.05,377,4.718,378,4.499,379,5.259,380,2.707,381,1.881,382,1.754,383,3.7,384,4.648,385,3.233,386,4.648,387,3.183,388,2.319,389,2.973,390,2.973,391,3.7,392,3.968,393,3.7,394,3.7,395,3.968,396,2.973,397,3.7,398,3.262,399,2.442,400,3.7,401,3.968,402,3.7,403,4.278,404,3.7,405,3.7,406,3.968,407,2.757,408,3.7,409,2.973,410,3.7,411,3.7,412,3.968,413,3.7,414,3.7,415,3.7,416,3.7,417,2.973,418,2.585,419,3.968,420,3.7,421,3.7,422,3.7,423,3.728,424,3.7,425,3.7,426,3.7,427,3.7,428,3.968,429,3.7,430,4.278,431,4.278,432,2.973,433,2.291,434,6.236,435,5.498,436,4.278,437,6.236,438,2.585,439,2.973,440,2.973,441,3.7,442,4.648,443,1.754,444,3.7,445,3.7,446,3.7,447,3.968,448,4.278,449,4.278,450,2.973,451,3.7,452,2.973,453,3.7,454,3.7,455,3.7,456,2.523,457,3.7,458,2.757,459,3.7,460,3.7,461,3.7,462,3.7,463,3.7,464,3.7,465,3.7,466,3.7,467,3.7,468,3.7,469,3.045,470,5.324,471,1.689,472,5.324,473,3.7,474,5.324,475,1.643,476,3.7,477,1.592,478,3.7,479,1.754,480,3.7,481,2.585,482,3.7,483,1.953,484,1.457,485,4.693,486,3.7,487,2.319,488,3.7,489,3.262,490,3.7,491,3.7,492,3.7,493,3.7,494,3.262,495,5.324,496,3.7,497,2.442,498,3.7,499,3.7]],["title/controllers/AuthController.html",[343,1.358,500,3.272]],["body/controllers/AuthController.html",[3,0.107,4,0.089,5,0.08,7,1.108,11,1.771,12,0.192,15,1.401,16,0.484,18,0.455,19,0.345,20,0.01,21,2.113,24,2.137,29,0.377,33,0.541,38,4.017,79,0.107,80,0.086,82,4.216,84,3.159,85,3.645,86,1.584,89,2.93,93,1.012,94,1.584,107,1.533,109,0.719,110,1.726,113,4.216,116,5.15,119,2.4,130,3.172,133,1.145,136,1.125,147,2.144,148,1.301,160,1.91,161,2.832,191,1.752,192,0.737,194,3.416,196,1.665,239,2.743,260,0.006,303,0.006,307,1.626,310,1.301,311,0.896,313,0.344,315,3.273,317,2.807,324,3.077,325,3.858,333,2.328,342,2.055,343,1.204,345,1.41,347,1.211,351,1.786,352,3.129,475,3.1,483,4.04,500,4.115,501,3.433,502,1.91,503,6.416,504,3.894,505,3.894,506,4.782,507,4.437,508,5.522,509,5.522,510,4.782,511,5.522,512,4.782,513,3.894,514,3.147,515,4.868,516,5.522,517,6.981,518,0.896,519,2.137,520,7.371,521,2.441,522,5.156,523,4.115,524,4.022,525,3.433,526,4.022,527,3.433,528,3.433,529,3.894,530,3.894,531,2.617,532,2.902,533,3.894,534,2.228,535,3.894,536,3.894,537,3.894,538,6.981,539,2.902,540,3.894,541,2.57,542,4.437,543,3.129,544,2.617,545,4.437,546,3.894,547,4.868,548,4.115,549,5.522,550,3.894,551,2.441,552,3.858,553,2.441,554,3.894,555,2.721,556,3.461,557,2.902,558,5.522,559,3.894,560,3.894,561,5.522,562,3.894,563,3.894,564,2.902,565,3.894,566,3.301,567,3.894,568,1.98,569,3.894,570,3.894,571,3.894,572,3.894,573,3.894,574,3.894,575,1.729,576,2.902,577,3.894,578,3.894,579,3.129,580,3.894,581,2.441,582,2.721,583,3.129,584,3.433]],["title/modules/AuthModule.html",[360,1.324,371,3.068]],["body/modules/AuthModule.html",[3,0.139,4,0.115,5,0.104,20,0.01,29,0.405,33,0.702,35,1.485,79,0.181,80,0.112,84,2.888,110,1.107,133,1.485,139,5.284,260,0.007,303,0.007,345,2.386,360,2.213,362,2.173,363,2.393,364,2.566,365,2.566,366,2.315,367,3.599,368,3.599,371,6.263,380,3.35,381,2.566,382,2.393,385,2.393,386,4.911,387,3.94,412,3.762,500,5.468,524,5.542,525,4.45,526,5.187,527,4.45,585,4.45,586,4.45,587,4.45,588,4.852,589,6.177,590,4.056,591,7.337,592,3.762,593,5.048,594,5.048,595,5.048,596,7.536,597,4.45,598,7.431,599,7.113,600,4.45,601,4.45,602,4.056,603,4.45,604,4.45,605,4.45,606,3.762,607,4.45]],["title/interfaces/AuthResponse.html",[0,1.199,608,3.068]],["body/interfaces/AuthResponse.html",[0,1.671,2,2.807,3,0.168,4,0.14,5,0.126,7,0.971,11,1.888,12,0.303,13,1.091,18,0.704,19,0.391,20,0.01,22,2.361,79,0.168,89,2.984,226,4.232,260,0.008,303,0.008,310,2.046,608,5.603,609,5.396,610,3.502,611,4.04,612,5.565,613,6.703,614,7.442,615,7.442,616,7.442,617,5.546,618,4.665,619,5.603,620,4.257,621,3.107,622,6.121,623,4.562]],["title/classes/AuthenticationConfigDto.html",[80,0.097,624,2.752]],["body/classes/AuthenticationConfigDto.html",[3,0.111,4,0.092,5,0.083,7,0.64,11,1.024,12,0.199,13,0.83,16,0.814,18,0.333,19,0.373,20,0.01,29,0.332,60,2.46,79,0.195,80,0.176,97,1.826,105,3,107,2.792,130,3.598,161,1.892,162,3.384,187,3.385,203,2.576,217,2.412,260,0.006,303,0.006,305,1.248,307,3.653,311,1.303,313,0.5,316,2.215,319,2.412,320,2.529,321,2.905,322,3.479,323,1.502,330,2.107,335,2.364,338,2.651,339,2.107,456,2.684,475,3.959,477,3.423,479,3.77,484,2.941,621,3.119,624,3.549,625,4.318,626,2.529,627,4.55,628,4.22,629,4.318,630,2.514,631,3.737,632,5.111,633,5.111,634,4.035,635,3.452,636,4.55,637,4.197,638,3.737,639,4.273,640,4.878,641,3.91,642,4.717,643,4.55,644,4.035,645,4.55,646,2.244,647,4.55,648,4.875,649,1.913,650,2.412,651,2.308,652,4.22,653,3.242,654,3.242,655,2.529,656,3.242,657,3.242,658,2.529,659,2.663,660,2.412,661,3.007,662,2.308]],["title/classes/AuthenticationConfigHelper.html",[80,0.097,663,2.898]],["body/classes/AuthenticationConfigHelper.html",[3,0.127,4,0.105,5,0.095,7,0.733,12,0.228,16,0.934,19,0.411,20,0.01,29,0.217,60,2.781,79,0.127,80,0.103,97,1.466,105,2.85,109,1.447,130,2.675,136,1.531,162,3.086,192,1.422,214,3.826,260,0.006,264,4.018,303,0.006,305,1.43,307,2.932,313,0.664,347,1.363,399,5.757,475,3.584,477,2.675,479,2.946,518,1.729,618,4.402,621,2.595,625,5.173,629,4.103,632,4.103,633,4.958,637,3.28,638,5.328,639,3.556,640,4.297,641,3.444,642,4.122,651,2.644,662,5.021,663,4.103,664,4.074,665,5.48,666,4.995,667,6.216,668,6.191,669,7.023,670,7.023,671,7.023,672,4.622,673,4.622,674,4.622,675,4.622,676,8.072,677,4.622,678,4.622,679,4.622,680,4.622,681,7.023,682,4.622,683,4.622]],["title/classes/AuthenticationUrlConfig.html",[80,0.097,632,2.898]],["body/classes/AuthenticationUrlConfig.html",[3,0.116,4,0.097,5,0.087,7,0.672,11,1.074,12,0.209,13,0.859,16,0.901,18,0.483,19,0.378,20,0.01,29,0.339,60,2.24,79,0.199,80,0.174,97,1.901,105,2.685,107,2.306,130,3.469,161,1.957,162,3.323,187,2.532,203,2.993,217,2.532,260,0.006,303,0.006,305,1.31,307,3.659,311,1.348,313,0.518,316,2.324,319,2.532,320,2.655,321,2.981,322,3.293,323,1.576,330,2.829,335,1.768,338,2.935,339,2.695,456,2.007,475,3.91,477,3.469,479,3.603,484,2.851,621,3.024,624,2.655,625,4.43,626,2.655,627,3.403,628,3.156,629,3.865,630,1.88,631,2.795,632,5.018,633,4.78,635,3.09,636,3.403,637,3.822,638,2.795,639,3.84,640,4.829,641,3.871,642,4.577,643,3.403,645,3.403,646,2.009,647,5.394,648,5.003,649,2.007,650,2.532,651,2.422,652,5.398,653,4.706,654,5.394,655,3.671,656,3.403,657,3.403,658,2.655,659,2.795,660,2.532,661,3.156,662,2.422,684,4.235,685,3.733,686,4.235]],["title/classes/AuthorizationResponse.html",[80,0.097,687,3.068]],["body/classes/AuthorizationResponse.html",[3,0.174,4,0.144,5,0.13,7,1.004,12,0.313,13,1.114,18,0.695,19,0.297,20,0.01,29,0.297,79,0.174,80,0.168,89,2.826,196,2.671,260,0.008,303,0.008,305,1.958,311,1.457,312,3.613,313,0.56,323,2.356,324,3.522,610,3.621,611,5.012,619,5.306,620,4.826,687,5.306,688,6.695,689,5.581,690,5.306]],["title/controllers/AuthorizeController.html",[343,1.358,691,3.272]],["body/controllers/AuthorizeController.html",[3,0.105,4,0.087,5,0.078,7,0.864,9,3.115,11,2.142,12,0.189,16,0.861,18,0.696,19,0.367,20,0.01,29,0.375,33,0.531,51,1.751,79,0.105,80,0.085,86,1.562,89,3.031,91,4.338,93,0.993,94,2.296,109,1.278,110,0.837,136,1.595,147,2.722,148,1.276,152,2.43,191,2.196,192,1.31,194,3.643,196,2.361,203,2.144,207,4.058,247,4.131,248,1.503,260,0.006,271,4.142,300,3.068,303,0.006,311,1.593,313,0.612,324,3.582,343,2.263,345,1.382,347,1.194,351,1.751,471,1.212,502,1.873,514,4.053,518,1.593,519,2.096,523,4.058,534,2.184,548,2.846,641,2.497,658,2.393,691,4.058,692,3.366,693,3.818,694,4.8,695,4.376,696,5.445,697,4.73,698,6.92,699,7.316,700,3.366,701,4.998,702,5.445,703,3.818,704,3.805,705,3.818,706,3.818,707,4.835,708,4.835,709,2.015,710,3.818,711,3.818,712,5.56,713,3.818,714,3.818,715,3.818,716,5.445,717,3.818,718,3.594,719,4.8,720,2.52,721,2.393,722,2.015,723,3.483,724,3.818,725,2.846,726,3.114,727,2.393,728,2.846,729,3.818,730,3.818,731,1.594,732,4.835,733,3.818,734,3.818,735,4.137,736,3.818,737,3.068,738,3.366,739,2.846,740,3.818,741,3.366,742,3.818,743,2.846,744,3.818,745,3.818]],["title/classes/AuthorizeQueries.html",[80,0.097,701,2.625]],["body/classes/AuthorizeQueries.html",[3,0.136,4,0.113,5,0.102,12,0.245,13,0.956,16,1.133,18,0.751,19,0.411,20,0.01,29,0.233,79,0.136,80,0.145,260,0.007,303,0.007,305,1.536,311,2.017,312,3.916,313,0.775,322,4.326,323,1.848,541,4.804,701,3.897,735,4.351,746,7.775,747,2.968,748,5.086,749,7.278,750,7.278,751,7.278,752,4.804,753,7.278,754,7.278,755,4.562,756,7.278,757,8.763,758,4.965,759,4.377,760,4.965,761,4.965,762,4.965,763,4.377,764,4.965,765,3.99,766,4.965,767,4.377,768,4.965]],["title/injectables/AuthorizeService.html",[30,0.697,723,2.41]],["body/injectables/AuthorizeService.html",[0,1.029,3,0.064,4,0.054,5,0.048,11,1.846,12,0.116,16,0.882,18,0.718,19,0.361,20,0.01,21,0.899,29,0.361,30,0.598,33,0.327,34,1.949,35,0.691,38,1.114,47,2.532,48,1.114,51,1.078,60,1.165,79,0.103,80,0.052,86,1.973,93,0.979,97,0.889,98,1.786,107,0.925,109,1.163,110,1.838,113,1.345,119,2.37,120,1.153,130,2.03,136,1.402,137,1.496,147,2.713,148,2.637,152,2.443,160,1.153,161,0.786,162,2.48,165,2.362,191,1.196,192,1.343,194,2.962,196,2.32,214,1.114,237,1.642,239,2.559,247,2.489,248,1.857,251,1.857,257,1.29,260,0.004,271,3.571,303,0.004,307,1.969,310,0.786,313,0.627,324,1.573,328,3.225,330,2.344,335,2.252,338,2.186,339,2.007,340,1.153,342,2.489,347,0.826,471,2.441,475,2.094,477,1.012,479,1.114,481,3.295,483,2.489,514,1.153,518,1.633,555,2.633,568,1.195,581,1.473,612,2.362,621,2.465,630,2.094,637,1.24,639,1.345,640,2.155,641,3.337,646,1.293,649,1.114,655,2.362,663,1.551,697,3.514,700,2.072,701,4.351,704,1.642,707,2.633,708,3.295,709,1.988,720,3.112,721,1.473,722,1.24,723,2.068,725,1.752,726,3.246,727,1.473,735,2.819,748,3.769,752,3.896,769,0.806,770,1.752,771,3.322,772,3.768,773,3.789,774,3.789,775,3.789,776,3.768,777,3.789,778,1.24,779,3.632,780,3.632,781,2.351,782,2.351,783,2.808,784,2.351,785,4.695,786,3.028,787,2.351,788,4.744,789,2.351,790,2.351,791,1.889,792,2.351,793,2.351,794,2.351,795,2.351,796,3.028,797,2.351,798,2.351,799,2.351,800,3.24,801,4.02,802,4.02,803,2.473,804,1.889,805,4.02,806,1.473,807,1.473,808,1.889,809,1.889,810,1.642,811,1.889,812,1.889,813,2.633,814,3.028,815,2.633,816,1.889,817,1.889,818,3.028,819,1.889,820,3.028,821,1.345,822,4.334,823,1.889,824,1.804,825,1.752,826,1.889,827,1.752,828,1.889,829,1.752,830,1.889,831,1.889,832,1.752,833,1.848,834,1.473,835,1.752,836,1.752,837,1.889,838,1.752,839,1.889,840,1.752,841,1.889,842,1.889,843,1.889,844,3.028,845,1.889,846,1.752,847,1.889,848,1.889,849,3.492,850,1.889,851,1.889,852,1.889,853,1.889,854,1.889,855,3.789,856,3.112,857,1.889,858,3.769,859,1.889,860,1.889,861,1.752,862,1.889,863,1.889,864,4.334,865,3.028,866,4.932,867,1.889,868,3.028,869,3.028,870,3.028,871,3.028,872,1.527,873,3.028,874,1.889,875,1.889,876,1.889,877,1.889,878,1.889,879,1.889,880,1.889,881,2.808,882,1.889,883,1.889,884,1.24,885,1.153,886,1.752,887,1.473,888,1.889,889,1.752,890,1.752,891,1.889,892,1.752,893,1.24,894,2.808,895,1.752,896,1.889,897,3.789,898,1.889,899,1.889,900,1.889,901,1.889,902,1.889,903,1.752,904,3.028,905,1.889,906,2.808,907,1.551,908,1.889,909,1.889,910,1.889,911,1.889,912,1.551,913,1.889,914,1.889,915,1.29,916,2.252,917,1.889,918,1.889,919,1.551,920,1.889,921,1.889,922,1.29,923,1.889,924,1.889,925,1.889,926,1.889,927,1.889,928,1.889,929,1.889,930,1.642,931,1.752,932,1.752,933,3.028,934,1.889,935,1.889,936,1.889,937,1.752,938,1.889,939,1.889,940,1.889]],["title/interfaces/Client.html",[0,1.199,38,2.081]],["body/interfaces/Client.html",[0,1.641,2,2.016,3,0.121,4,0.1,5,0.09,12,0.217,13,0.881,15,2.133,18,0.701,19,0.282,20,0.01,29,0.373,30,0.953,31,4.783,33,0.611,34,2.118,35,1.293,38,4.175,54,2.515,56,3.298,61,2.755,64,2.413,65,2.515,66,2.413,68,2.515,79,0.165,80,0.098,81,2.084,82,2.515,86,2.21,93,1.143,94,1.261,97,1.417,106,2.084,109,1.423,110,1.613,113,3.437,114,3.072,116,4.199,133,1.767,136,0.896,137,1.395,150,1.836,161,2.008,162,1.731,192,0.832,203,1.731,217,2.628,220,2.413,260,0.006,264,4.657,283,3.072,286,2.413,295,2.628,303,0.006,307,1.836,337,3.072,339,1.636,353,3.072,423,2.628,433,1.892,475,1.952,497,2.902,526,2.756,566,4.606,606,3.277,718,2.902,893,2.32,907,2.902,941,3.533,942,4.828,943,3.277,944,2.902,945,4.828,946,7.011,947,3.533,948,3.876,949,3.876,950,3.876,951,3.876,952,3.876,953,3.876,954,3.533,955,3.876,956,3.876,957,3.876,958,3.876,959,6.035,960,3.876,961,3.876,962,3.876,963,3.876,964,2.902,965,3.876,966,5.297,967,5.297,968,3.876,969,3.876,970,3.876,971,3.533,972,2.756,973,3.876,974,3.876,975,3.876,976,3.876,977,3.876,978,3.277,979,3.277,980,3.277,981,3.876,982,3.277,983,3.876,984,3.876,985,5.297,986,3.876,987,2.016,988,5.297,989,3.533,990,3.876,991,3.876]],["title/classes/ClientCredentialsDto.html",[80,0.097,506,3.272]],["body/classes/ClientCredentialsDto.html",[3,0.179,4,0.149,5,0.134,12,0.322,13,1.133,18,0.702,19,0.362,20,0.009,29,0.305,79,0.179,80,0.171,260,0.008,303,0.008,305,2.015,311,1.778,312,3.861,313,0.683,323,2.425,506,5.758,541,5.436,543,6.618,992,7.261,993,5.744,994,6.516,995,6.516]],["title/injectables/ClientService.html",[30,0.697,526,2.752]],["body/injectables/ClientService.html",[0,1.465,3,0.103,4,0.085,5,0.077,12,0.185,13,0.787,15,2.019,16,0.853,18,0.705,19,0.34,20,0.01,29,0.354,30,0.851,31,5.279,33,0.52,34,2.337,35,1.1,38,4.216,54,2.14,56,2.945,61,2.461,64,2.053,65,2.14,66,2.053,68,2.14,79,0.147,80,0.083,81,1.773,82,3.07,86,2.388,93,1.395,94,1.073,97,1.617,106,2.544,109,1.34,110,1.503,113,3.922,114,2.614,116,4.79,133,1.846,136,1.586,137,1.187,150,1.562,161,2.291,162,2.113,192,1.374,203,1.473,217,2.237,220,2.053,260,0.006,264,4.763,283,3.75,286,2.053,295,2.237,303,0.006,307,2.241,310,1.25,313,0.704,337,3.75,339,1.392,347,1.177,353,3.75,423,2.237,433,2.31,475,2.383,497,2.469,518,1.578,526,3.364,566,3.208,606,2.788,718,3.542,769,1.284,778,1.974,893,1.974,907,2.469,941,3.006,942,5.509,943,2.788,944,2.469,945,5.043,946,7.251,947,5.043,948,3.298,949,3.298,950,3.298,951,3.298,952,3.298,953,3.298,954,3.006,955,3.298,956,3.298,957,3.298,958,6.044,959,5.532,960,3.298,961,6.044,962,3.298,963,3.298,964,3.542,965,4.731,966,4.731,967,4.731,968,3.298,969,4.731,970,4.731,971,4.312,972,3.364,973,4.731,974,4.731,975,4.731,976,4.731,977,4.731,978,2.788,979,2.788,980,2.788,981,3.298,982,2.788,983,3.298,984,3.298,985,4.731,986,3.298,987,1.715,988,4.731,989,3.006,990,3.298,991,3.298,996,5.367,997,5.367,998,5.367,999,5.367,1000,3.741,1001,3.741,1002,3.741,1003,3.741,1004,2.945,1005,3.741,1006,3.741]],["title/entities/CredentialConfig.html",[1007,1.89,1008,2.511]],["body/entities/CredentialConfig.html",[3,0.114,4,0.095,5,0.085,7,0.658,11,1.464,12,0.205,13,0.846,15,1.914,16,0.893,18,0.591,19,0.383,20,0.01,25,3.449,26,2.562,29,0.366,60,2.053,79,0.114,80,0.128,97,1.927,98,1.965,106,2.735,133,1.219,137,2.634,150,2.409,152,1.857,160,2.831,161,1.928,203,1.632,260,0.006,303,0.006,311,1.881,313,0.722,321,3.468,322,3.256,323,1.543,433,2.483,443,1.965,477,2.483,534,2.371,630,3.35,646,2.804,650,2.478,651,2.371,824,2.208,872,2.339,915,3.167,964,4.736,1007,3.089,1008,3.301,1009,2.275,1010,3.654,1011,5.087,1012,6.276,1013,5.851,1014,5.203,1015,4.105,1016,5.023,1017,3.939,1018,5.8,1019,6.09,1020,5.087,1021,4.145,1022,5.087,1023,4.636,1024,5.087,1025,4.636,1026,5.333,1027,5.851,1028,3.654,1029,4.145,1030,3.167,1031,5.77,1032,4.636,1033,4.145,1034,5.77,1035,5.77,1036,2.831,1037,3.617,1038,5.014,1039,4.145,1040,4.636,1041,3.654,1042,5.77,1043,5.77,1044,4.145,1045,4.145,1046,5.087,1047,4.636,1048,4.638,1049,5.77,1050,4.145,1051,4.145,1052,4.145,1053,2.478,1054,2.736,1055,5.77,1056,5.087,1057,2.034,1058,3.089,1059,3.654,1060,2.736,1061,4.145,1062,2.736]],["title/injectables/CredentialConfigService.html",[30,0.697,1063,2.752]],["body/injectables/CredentialConfigService.html",[3,0.111,4,0.092,5,0.083,7,1.186,12,0.2,15,2.255,16,0.93,18,0.727,19,0.35,20,0.01,29,0.333,30,0.9,33,0.562,60,2.313,71,2.688,79,0.111,80,0.09,86,1.16,93,1.846,94,2.33,97,1.916,105,3.256,109,1.311,133,1.668,136,1.655,150,3.614,152,2.388,191,2.459,192,1.415,201,3.744,204,3.555,205,3.555,241,3.61,260,0.006,303,0.006,313,0.661,347,1.244,518,1.721,646,2.869,731,1.689,769,1.388,1007,3.496,1008,4.952,1009,3.113,1024,5,1057,1.984,1063,4.451,1064,6.832,1065,5.416,1066,3.015,1067,5.115,1068,5.672,1069,4.045,1070,4.633,1071,4.045,1072,6.55,1073,5.672,1074,3.566,1075,3.744,1076,5.361,1077,6.832,1078,3.744,1079,5.672,1080,5.672,1081,4.045,1082,4.961,1083,3.555,1084,5.672,1085,4.045,1086,5.672,1087,4.045,1088,3.744,1089,2.536,1090,1.984,1091,3.25,1092,3.566,1093,4.045,1094,4.045,1095,4.045,1096,4.045]],["title/classes/CredentialIssuerMetadataDto.html",[80,0.097,1097,3.272]],["body/classes/CredentialIssuerMetadataDto.html",[3,0.133,4,0.111,5,0.1,7,0.771,12,0.24,13,0.942,18,0.714,19,0.402,20,0.01,26,2.853,79,0.133,80,0.108,105,2.946,120,3.152,161,2.561,172,2.778,260,0.007,303,0.007,305,1.502,313,0.749,324,3.199,333,3.841,339,3.155,356,4.581,514,3.759,553,4.028,618,3.045,630,3.635,646,2.944,824,3.427,930,4.49,1023,5.163,1030,2.666,1083,4.028,1097,4.789,1098,5.663,1099,7.563,1100,3.903,1101,3.045,1102,6.347,1103,6.347,1104,6.347,1105,5.786,1106,6.347,1107,6.347,1108,6.403,1109,6.347,1110,4.857,1111,5.664,1112,4.857,1113,3.526,1114,6.425,1115,4.857,1116,7.2,1117,4.857,1118,3.675,1119,4.857,1120,4.857,1121,4.857,1122,4.789,1123,4.857,1124,3.526,1125,4.857,1126,3.903,1127,4.282]],["title/controllers/CredentialsController.html",[343,1.358,1128,3.272]],["body/controllers/CredentialsController.html",[3,0.133,4,0.11,5,0.099,7,0.767,12,0.239,15,1.94,16,0.894,18,0.592,19,0.337,20,0.01,29,0.383,33,0.672,60,2.366,71,3.037,79,0.133,80,0.107,89,2.674,94,2.194,97,1.804,103,3.379,105,3.507,109,1.327,136,1.726,150,3.193,192,1.36,194,2.675,201,4.228,260,0.007,303,0.007,311,1.654,313,0.635,343,2.222,345,1.751,347,1.405,351,2.217,484,3.335,502,2.372,518,1.654,519,3.943,521,3.031,531,4.103,588,2.654,646,2.941,731,2.019,824,1.851,1008,4.375,1063,4.504,1065,3.379,1067,3.192,1075,4.228,1091,3.886,1128,5.354,1129,4.263,1130,6.407,1131,5.773,1132,6.407,1133,6.334,1134,4.263,1135,5.148,1136,4.836,1137,4.836,1138,4.836,1139,4.836,1140,4.836,1141,3.379,1142,3.379,1143,3.192,1144,3.886,1145,3.379,1146,3.886,1147,2.654,1148,3.379,1149,3.379,1150,3.886,1151,3.83,1152,2.147,1153,4.836,1154,4.836,1155,4.836,1156,4.263,1157,4.836]],["title/controllers/CredentialsMetadataController.html",[343,1.358,1158,3.272]],["body/controllers/CredentialsMetadataController.html",[3,0.149,4,0.124,5,0.111,7,0.861,12,0.268,15,2.14,16,0.859,18,0.736,19,0.375,20,0.01,26,3.065,29,0.324,33,0.754,79,0.149,80,0.12,94,2.178,97,1.628,109,1.275,133,2.03,136,1.548,152,2.428,161,2.537,192,1.307,260,0.007,303,0.007,311,1.589,313,0.61,343,1.678,345,1.964,347,1.514,502,2.661,518,1.589,635,3.643,646,2.894,731,2.265,732,4.824,1015,4.572,1016,5.01,1030,3.789,1082,5.585,1151,4.539,1152,2.409,1158,5.145,1159,5.306,1160,6.101,1161,4.783,1162,5.425,1163,6.903,1164,5.425,1165,5.425,1166,6.903,1167,5.425,1168,4.556,1169,4.359,1170,5.425,1171,5.425,1172,5.425,1173,5.425,1174,5.425]],["title/injectables/CredentialsService.html",[30,0.697,1151,2.625]],["body/injectables/CredentialsService.html",[3,0.088,4,0.073,5,0.066,12,0.158,15,1.879,16,0.889,18,0.715,19,0.365,20,0.01,29,0.39,30,0.759,33,0.444,34,2.291,35,0.94,47,2.434,48,1.515,60,1.479,79,0.088,80,0.071,86,1.824,93,1.243,94,2.125,97,1.898,109,1.257,110,1.738,119,2.326,136,1.64,137,1.014,147,2.803,148,2.388,152,2.406,161,1.598,184,1.911,191,2.267,192,1.353,204,2.998,232,2.234,239,2.534,241,2.431,260,0.005,289,2.859,303,0.005,310,2.275,313,0.632,315,1.419,335,1.997,347,1.049,471,2.416,477,2.058,518,1.645,534,1.829,544,1.515,568,2.431,635,3.356,646,2.828,650,1.911,651,1.829,709,2.524,769,1.097,800,3.921,803,3.122,806,2.004,821,2.736,833,2.346,849,3.593,872,1.296,884,1.687,885,1.568,1008,4.237,1012,3.843,1013,4.216,1015,3.278,1016,4.268,1017,1.755,1027,2.818,1036,2.346,1037,2.004,1047,3.843,1048,2.234,1053,1.911,1057,1.568,1058,2.383,1070,3.802,1082,4.444,1089,2.004,1090,1.568,1091,2.569,1092,2.818,1105,3.843,1133,5.051,1151,2.859,1168,3.156,1175,2.818,1176,5.051,1177,5.73,1178,5.73,1179,4.782,1180,3.197,1181,4.237,1182,5.73,1183,3.197,1184,4.782,1185,3.197,1186,5.471,1187,3.197,1188,4.881,1189,3.197,1190,3.197,1191,3.197,1192,3.197,1193,4.782,1194,3.197,1195,6.36,1196,3.197,1197,3.197,1198,4.216,1199,3.843,1200,4.782,1201,2.383,1202,2.383,1203,4.216,1204,2.383,1205,1.829,1206,2.383,1207,2.383,1208,3.197,1209,3.197,1210,3.197,1211,3.197,1212,3.197,1213,3.197,1214,4.782,1215,4.216,1216,4.27,1217,3.197,1218,3.197,1219,3.197,1220,3.197,1221,3.197,1222,3.197,1223,2.818,1224,3.197,1225,3.197,1226,2.818,1227,3.197,1228,3.197,1229,3.197,1230,2.569,1231,2.383,1232,3.197,1233,2.818,1234,3.197,1235,3.197,1236,2.234,1237,3.197,1238,1.911,1239,4.782,1240,3.197,1241,3.197,1242,3.197,1243,3.197,1244,4.782]],["title/interfaces/CryptoImplementation.html",[0,1.199,1245,2.898]],["body/interfaces/CryptoImplementation.html",[0,2.062,2,2.46,3,0.147,4,0.122,5,0.11,7,0.851,12,0.265,13,1.005,16,0.852,18,0.693,19,0.394,20,0.01,22,2.525,79,0.147,94,1.966,119,2.232,135,4.989,136,1.539,191,2.747,192,1.43,226,3.617,236,3.362,260,0.007,277,3.362,280,5.108,303,0.007,313,0.668,347,1.503,518,1.578,884,3.986,885,3.904,1025,6.395,1245,4.524,1246,6.395,1247,4.31,1248,5.507,1249,6.854,1250,4.789,1251,6.395,1252,6.854,1253,6.854,1254,5.364,1255,6.042,1256,5.278,1257,6.042,1258,7.631,1259,5.364,1260,6.395,1261,6.042,1262,6.042,1263,5.364,1264,5.629,1265,6.042,1266,3.998,1267,3.998]],["title/modules/CryptoModule.html",[360,1.324,372,2.317]],["body/modules/CryptoModule.html",[3,0.168,4,0.14,5,0.126,20,0.009,29,0.376,33,0.852,47,3.473,79,0.168,80,0.136,260,0.008,303,0.008,360,2.42,362,2.639,363,2.907,364,3.118,365,3.118,366,2.812,367,3.937,368,3.937,372,4.748,380,3.788,381,3.118,382,2.907,385,2.907,1268,5.406,1269,5.406,1270,5.406,1271,5.99,1272,6.133,1273,6.133,1274,6.133]],["title/injectables/CryptoService.html",[30,0.697,47,1.68]],["body/injectables/CryptoService.html",[3,0.059,4,0.049,5,0.072,9,3.657,10,4.121,11,1.303,12,0.107,13,0.516,14,2.83,15,0.548,16,0.902,18,0.713,19,0.38,20,0.01,21,2.446,22,2.187,29,0.353,30,0.559,32,3.625,33,0.3,34,1.876,35,0.636,38,1.025,47,1.348,54,1.237,55,2.664,56,1.933,57,1.511,61,0.991,62,1.511,63,1.427,64,1.186,65,1.237,66,1.186,67,1.427,68,1.237,79,0.059,80,0.048,81,1.025,86,1.474,93,0.915,104,1.237,107,0.851,109,1.34,110,1.832,113,2.549,119,2.307,132,2.624,136,1.478,137,2.029,138,1.79,147,2.515,148,2.368,152,2.369,154,2.324,160,1.061,162,1.754,184,2.105,189,2.014,191,1.924,192,1.373,193,1.611,205,1.355,226,1.141,239,1.911,242,2.941,247,2.711,248,0.851,251,1.386,257,1.186,260,0.004,264,1.237,277,2.207,290,2.774,295,2.105,298,2.105,299,2.105,303,0.004,310,1.89,311,0.811,313,0.675,315,2.281,333,2.105,339,1.31,347,0.772,353,1.511,382,2.681,389,1.737,423,3.381,433,0.93,447,1.611,456,2.112,483,2.351,497,4.55,518,1.703,534,1.237,551,2.793,556,2.207,568,1.79,575,3.061,617,1.611,665,1.906,721,1.355,722,1.141,731,2.361,739,5.137,769,0.742,778,1.141,791,1.737,803,3.326,806,1.355,807,2.207,821,1.237,824,1.705,833,1.061,856,2.324,872,1.427,884,1.858,885,1.061,886,1.611,889,2.624,942,4.127,943,1.611,947,3.58,978,1.611,979,1.611,980,3.321,1004,2.445,1017,2.445,1199,1.737,1238,3.985,1275,1.737,1276,4.442,1277,4.455,1278,3.521,1279,3.104,1280,3.521,1281,3.521,1282,2.624,1283,3.733,1284,3.521,1285,5.137,1286,3.521,1287,2.162,1288,2.162,1289,3.521,1290,3.521,1291,4.127,1292,2.162,1293,2.162,1294,3.104,1295,3.104,1296,2.162,1297,3.521,1298,2.162,1299,4.455,1300,3.521,1301,2.162,1302,2.162,1303,3.104,1304,2.162,1305,2.162,1306,2.162,1307,3.521,1308,2.162,1309,2.162,1310,2.162,1311,4.455,1312,3.521,1313,2.162,1314,2.162,1315,2.162,1316,2.162,1317,2.162,1318,4.455,1319,4.455,1320,3.521,1321,2.624,1322,1.611,1323,1.061,1324,2.162,1325,1.511,1326,1.611,1327,2.162,1328,2.162,1329,1.906,1330,2.162,1331,2.162,1332,3.521,1333,5.137,1334,2.819,1335,2.162,1336,2.162,1337,2.162,1338,3.521,1339,1.737,1340,5.655,1341,2.162,1342,5.137,1343,2.162,1344,5.655,1345,2.162,1346,5.137,1347,2.162,1348,3.521,1349,6.064,1350,4.455,1351,2.162,1352,2.162,1353,2.162,1354,2.162,1355,2.162,1356,2.162,1357,3.928,1358,1.906,1359,3.521,1360,5.137,1361,2.162,1362,2.162,1363,2.162,1364,2.162,1365,2.162,1366,2.162,1367,1.186,1368,3.521,1369,2.162,1370,3.521,1371,3.521,1372,2.941,1373,2.162,1374,5.655,1375,3.521,1376,2.83,1377,3.521,1378,3.521,1379,1.737,1380,2.162,1381,2.162,1382,3.521,1383,3.521,1384,3.521,1385,3.521,1386,4.455,1387,3.521,1388,3.521,1389,1.906,1390,2.162,1391,1.737,1392,2.162,1393,2.162,1394,2.162,1395,1.611,1396,1.611,1397,2.162,1398,2.162,1399,2.162,1400,2.162,1401,2.162,1402,1.906,1403,1.906,1404,2.162,1405,2.162,1406,1.737,1407,2.162,1408,1.906,1409,3.521,1410,2.162,1411,3.104,1412,3.928,1413,2.162,1414,1.906,1415,2.162,1416,2.162,1417,2.162,1418,3.521,1419,2.162,1420,3.521,1421,3.521,1422,3.521,1423,3.521,1424,4.528,1425,2.162,1426,2.162,1427,2.162,1428,2.162,1429,2.162,1430,1.906,1431,2.162,1432,2.162,1433,3.104,1434,2.162,1435,2.162,1436,3.521,1437,3.521,1438,3.521,1439,5.137,1440,2.162,1441,3.521,1442,4.455,1443,2.162,1444,3.521,1445,3.521,1446,3.521,1447,3.521,1448,2.162,1449,2.162,1450,2.162,1451,2.162,1452,2.162,1453,3.104,1454,2.162,1455,2.162]],["title/injectables/CryptoService-1.html",[30,0.581,47,1.401,1367,2.009]],["body/injectables/CryptoService-1.html",[3,0.152,4,0.126,5,0.114,12,0.273,16,0.869,19,0.328,20,0.01,29,0.389,30,1.109,33,0.769,34,2.49,35,1.627,47,2.675,79,0.192,80,0.123,93,1.438,100,5.21,109,1.533,119,1.802,136,1.562,192,1.323,203,2.752,239,2.059,260,0.007,277,4.803,303,0.007,310,1.849,313,0.677,347,1.533,433,3.008,518,1.609,769,1.898,833,3.949,885,3.949,1036,2.714,1152,2.457,1201,4.124,1202,4.124,1238,4.179,1245,5.058,1456,4.446,1457,8.05,1458,7.663,1459,5.533,1460,5.533,1461,6.99,1462,5.533,1463,6.755,1464,5.999,1465,5.533,1466,5.533,1467,7.663,1468,5.801,1469,4.878,1470,5.533,1471,6.162,1472,5.533]],["title/modules/DatabaseModule.html",[360,1.324,373,3.068]],["body/modules/DatabaseModule.html",[3,0.149,4,0.124,5,0.111,19,0.324,20,0.01,29,0.387,33,0.754,34,2.472,35,1.596,61,3.165,79,0.189,80,0.12,109,1.275,110,1.665,137,2.191,139,5.173,220,2.977,232,3.791,260,0.007,303,0.007,360,2.082,362,2.335,373,4.824,385,3.272,386,5.145,387,4.127,447,4.043,448,4.359,450,4.359,494,4.783,1090,2.661,1473,4.359,1474,3.581,1475,6.903,1476,4.359,1477,6.086,1478,4.783,1479,4.783,1480,4.783,1481,7.046,1482,7.437,1483,6.631,1484,6.15,1485,4.783,1486,4.783,1487,4.783,1488,4.783,1489,4.783,1490,5.425,1491,6.903,1492,7.593,1493,5.425,1494,5.425,1495,6.903,1496,5.425,1497,5.425,1498,5.425,1499,5.425,1500,5.425,1501,4.783,1502,5.425,1503,5.547,1504,5.425,1505,5.425]],["title/classes/EC_Public.html",[80,0.097,1325,3.068]],["body/classes/EC_Public.html",[3,0.139,4,0.115,5,0.104,7,0.801,12,0.249,13,0.966,18,0.682,19,0.378,20,0.01,21,3.337,22,2.82,24,4.027,29,0.237,79,0.181,80,0.173,81,3.124,106,2.393,107,2.595,196,1.522,203,2.595,260,0.007,277,4.131,303,0.007,305,1.561,313,0.687,443,3.478,610,2.888,620,2.888,689,4.45,743,4.911,803,3.7,833,3.233,919,4.35,1083,4.599,1098,5.326,1101,4.599,1323,2.476,1325,4.605,1326,6.014,1334,4.626,1376,7.141,1506,5.127,1507,6.857,1508,6.857,1509,6.468,1510,5.896,1511,6.468,1512,6.014,1513,7.113,1514,5.048,1515,5.809,1516,4.911,1517,5.809,1518,5.048,1519,6.857,1520,5.048,1521,3.018,1522,3.527]],["title/injectables/EncryptionService.html",[30,0.697,1271,2.898]],["body/injectables/EncryptionService.html",[3,0.12,4,0.1,5,0.09,12,0.216,13,0.877,16,0.913,18,0.717,19,0.393,20,0.01,21,1.671,22,1.386,29,0.381,30,0.949,33,0.607,34,2.455,35,1.285,54,2.498,55,2.611,56,3.744,61,2.743,63,2.883,64,2.397,65,2.498,66,2.397,67,2.883,68,2.498,79,0.12,80,0.097,86,2.497,93,1.135,109,1.105,110,1.312,136,1.496,137,2.165,147,2.866,148,2.452,152,1.909,154,3.948,191,1.898,192,1.389,195,3.255,196,1.317,220,2.397,260,0.006,264,3.422,271,2.143,286,2.397,295,3.576,296,3.052,298,3.576,299,3.576,303,0.006,311,1.005,313,0.742,347,1.312,423,2.611,497,3.948,518,1.769,566,2.611,769,1.499,778,2.305,803,3.524,944,2.883,1152,1.939,1226,3.85,1251,3.51,1271,3.948,1282,4.458,1303,5.273,1321,4.458,1323,2.143,1334,2.397,1510,3.51,1523,3.85,1524,6.822,1525,6.822,1526,6.822,1527,6.822,1528,5.982,1529,7.338,1530,4.18,1531,5.982,1532,5.982,1533,4.368,1534,4.368,1535,4.368,1536,4.18,1537,4.368,1538,4.368,1539,6.014,1540,4.368,1541,4.368,1542,4.368,1543,3.51,1544,4.368,1545,3.51,1546,5.982,1547,5.982,1548,5.982,1549,4.368,1550,4.368,1551,5.273,1552,3.85,1553,3.85,1554,5.982,1555,4.368,1556,4.368,1557,4.368,1558,3.85,1559,4.368,1560,5.982,1561,5.982,1562,4.368,1563,4.368,1564,4.368]],["title/injectables/FileSystemKeyService.html",[30,0.697,1565,3.272]],["body/injectables/FileSystemKeyService.html",[3,0.082,4,0.068,5,0.113,7,0.472,12,0.147,13,0.664,15,1.556,16,0.949,18,0.721,19,0.394,20,0.01,21,2.346,22,2.47,23,4.611,29,0.365,30,0.719,32,3.666,33,0.413,34,2.15,35,0.875,47,2.766,48,1.41,54,1.702,55,1.778,56,3.01,57,2.079,61,2.077,62,2.079,70,2.839,71,2.147,79,0.082,80,0.066,81,1.41,86,2.394,93,1.177,109,1.376,110,1.524,119,1.475,133,1.941,136,1.635,137,1.437,147,2.827,148,2.714,150,1.891,152,2.336,191,2.604,192,1.445,212,1.778,236,4.136,239,1.107,242,1.963,260,0.005,286,1.633,289,3.279,290,1.459,298,2.708,299,2.708,303,0.005,310,1.514,313,0.718,315,2.436,347,0.993,423,1.778,433,1.949,497,2.989,518,1.757,575,2.011,635,1.57,709,1.57,769,1.021,778,1.57,803,3.499,824,1.733,849,1.57,884,3.482,943,2.217,978,2.217,979,2.217,980,2.217,1036,1.459,1040,2.39,1088,1.963,1245,3.62,1266,4.918,1276,2.839,1283,4.047,1321,4.088,1323,1.459,1334,4.272,1339,4.927,1372,2.989,1408,3.993,1433,2.622,1463,4.835,1469,2.622,1530,3.165,1539,5.817,1543,4.407,1553,2.622,1565,3.376,1566,7.233,1567,2.39,1568,5.485,1569,5.485,1570,4.529,1571,3.64,1572,5.808,1573,4.529,1574,4.529,1575,2.975,1576,3.64,1577,3.64,1578,2.975,1579,5.302,1580,2.975,1581,2.975,1582,2.975,1583,4.529,1584,2.975,1585,2.975,1586,3.64,1587,2.975,1588,3.64,1589,3.844,1590,5.406,1591,2.975,1592,2.975,1593,2.975,1594,2.975,1595,4.529,1596,4.529,1597,3.993,1598,3.64,1599,2.217,1600,2.39,1601,1.865,1602,2.975,1603,2.975,1604,2.975,1605,2.079,1606,2.975,1607,5.485,1608,2.975,1609,5.485,1610,5.485,1611,2.975,1612,4.529,1613,4.529,1614,4.529,1615,2.975,1616,4.529,1617,6.599,1618,2.975,1619,2.975,1620,2.975,1621,2.975,1622,2.975,1623,4.529,1624,2.975,1625,4.529,1626,2.622,1627,2.622,1628,2.975,1629,2.975,1630,2.975,1631,2.975]],["title/interfaces/GenerateTokenOptions.html",[0,1.199,1632,3.272]],["body/interfaces/GenerateTokenOptions.html",[0,1.234,2,2.073,3,0.124,4,0.103,5,0.093,12,0.223,13,0.898,16,0.998,18,0.711,19,0.326,20,0.01,27,2.586,29,0.349,30,0.972,33,0.628,34,2.148,35,1.33,79,0.168,80,0.1,82,2.586,84,4.258,85,4.913,89,3.052,107,1.78,109,1.437,110,1.854,119,2.611,120,2.218,133,1.33,147,2.047,148,2.047,160,3.004,187,2.703,191,1.943,214,2.143,239,2.585,251,2.734,257,4.086,260,0.006,264,3.503,303,0.006,456,2.143,458,3.37,524,2.834,531,3.687,532,3.37,551,2.834,552,5.202,556,3.839,566,3.661,568,3.114,575,3.305,579,6.251,581,4.666,824,2.658,834,2.834,872,2.815,885,2.218,1062,2.984,1152,2.008,1250,3.159,1283,4.042,1322,3.37,1323,2.218,1372,2.984,1632,5.176,1633,3.633,1634,3.986,1635,3.633,1636,3.986,1637,5.399,1638,4.921,1639,5.399,1640,5.399,1641,3.986,1642,3.986,1643,6.123,1644,5.399,1645,3.986,1646,4.921,1647,3.986,1648,3.986,1649,3.986,1650,3.986,1651,3.986,1652,3.986,1653,3.986,1654,3.986,1655,3.37,1656,3.986,1657,4.565,1658,3.633,1659,3.986,1660,3.986,1661,3.37,1662,3.986,1663,3.633,1664,3.986,1665,3.986,1666,3.986,1667,3.986,1668,3.633]],["title/controllers/HealthController.html",[343,1.358,1669,3.272]],["body/controllers/HealthController.html",[3,0.163,4,0.136,5,0.122,7,0.943,12,0.294,20,0.01,29,0.343,33,0.827,70,4.583,79,0.163,80,0.132,86,2.097,93,1.546,109,1.098,132,5.449,133,2.15,136,1.49,214,4.186,260,0.008,303,0.008,311,1.369,313,0.526,343,1.84,345,2.153,347,1.603,502,2.917,514,3.587,638,4.826,695,5.875,1503,5.875,1669,6.155,1670,5.243,1671,8.632,1672,6.446,1673,8.259,1674,6.446,1675,7.311,1676,5.947,1677,5.947,1678,7.311,1679,7.311,1680,4.779,1681,5.947,1682,5.243,1683,5.947,1684,5.947]],["title/modules/HealthModule.html",[360,1.324,374,3.068]],["body/modules/HealthModule.html",[3,0.185,4,0.154,5,0.138,20,0.009,29,0.391,33,0.935,79,0.185,80,0.149,260,0.008,303,0.008,345,2.85,360,2.374,362,2.895,374,5.5,385,3.188,1669,6.22,1680,5.404,1685,6.726,1686,6.726,1687,7.872]],["title/entities/IssuanceConfig.html",[1007,1.89,1014,2.752]],["body/entities/IssuanceConfig.html",[3,0.118,4,0.099,5,0.089,7,0.685,11,1.505,12,0.213,13,0.87,15,1.942,16,0.738,18,0.602,19,0.387,20,0.01,25,3.548,26,2.635,29,0.371,60,1.836,79,0.118,80,0.132,97,1.946,107,2.336,130,2.554,137,1.883,150,2.478,152,1.898,169,4.819,189,3.395,196,1.79,260,0.006,303,0.006,307,3.302,311,1.821,313,0.699,316,3.257,321,2.635,323,1.606,330,2.208,335,3.049,338,2.748,340,2.911,351,1.979,433,2.554,475,3.512,477,2.554,479,2.813,484,2.875,621,2.478,628,4.423,629,3.917,630,3.831,631,3.917,637,3.132,639,3.395,640,4.177,641,3.348,642,3.257,646,2.505,649,2.046,651,2.469,652,4.423,662,4.524,1007,3.143,1008,4.524,1009,2.369,1011,5.231,1014,3.72,1018,4.738,1019,4.423,1038,3.016,1041,3.806,1047,5.867,1054,3.917,1056,5.231,1057,2.118,1078,3.917,1124,3.257,1688,7.142,1689,3.469,1690,4.738,1691,5.449,1692,5.449,1693,3.806,1694,3.806,1695,3.217,1696,4.768,1697,3.806,1698,5.231,1699,5.934,1700,4.317,1701,5.934,1702,4.768,1703,5.934,1704,3.806,1705,4.317,1706,3.806,1707,3.806,1708,4.317,1709,5.231,1710,3.469,1711,3.806]],["title/controllers/IssuanceController.html",[343,1.358,1712,3.272]],["body/controllers/IssuanceController.html",[3,0.137,4,0.114,5,0.102,12,0.246,15,1.964,16,0.907,18,0.601,19,0.342,20,0.01,29,0.387,33,0.693,60,2.395,79,0.137,80,0.111,89,2.714,94,2.092,97,1.826,105,2.998,109,1.347,136,1.738,150,3.232,192,1.381,194,2.73,201,4.315,260,0.007,303,0.007,311,1.679,313,0.645,343,1.543,345,1.806,347,1.434,351,2.287,484,3.357,502,2.447,518,1.679,519,4.003,521,3.126,531,4.125,588,2.737,630,3.662,731,2.082,780,4.003,824,1.909,1067,3.292,1075,4.315,1131,5.861,1134,4.397,1135,5.254,1141,3.485,1142,3.485,1143,3.292,1145,3.485,1146,4.008,1147,2.737,1148,3.485,1149,3.485,1150,4.008,1152,2.215,1156,4.397,1712,4.873,1713,4.397,1714,6.538,1715,6.538,1716,6.43,1717,4.988,1718,4.988,1719,4.988,1720,4.988,1721,5.41,1722,4.988,1723,4.988,1724,4.397,1725,4.988,1726,4.988,1727,4.988,1728,3.485,1729,4.988]],["title/classes/IssuanceDto.html",[80,0.097,1721,3.068]],["body/classes/IssuanceDto.html",[3,0.141,4,0.117,5,0.106,7,0.816,12,0.254,13,0.978,15,1.878,16,0.974,18,0.645,19,0.397,20,0.01,25,3.987,26,2.961,29,0.367,79,0.141,80,0.164,97,2.063,105,3.058,137,1.631,162,2.626,196,2.011,260,0.007,303,0.008,305,1.59,307,3.389,311,1.803,312,3.478,313,0.692,319,3.073,321,3.287,322,3.272,323,1.913,330,2.482,335,2.784,338,3.175,340,3.272,518,1.535,611,4.402,624,4.91,630,3.811,631,4.402,646,2.288,648,5.517,649,2.437,651,2.941,660,3.073,662,4.234,685,4.532,690,4.66,1124,3.66,1691,5.948,1692,5.948,1721,4.66,1730,4.532,1731,4.532,1732,5.141,1733,4.97,1734,5.141,1735,5.141,1736,5.141,1737,6.669,1738,4.97,1739,5.141,1740,5.141,1741,5.359]],["title/injectables/IssuanceService.html",[30,0.697,780,2.41]],["body/injectables/IssuanceService.html",[3,0.098,4,0.082,5,0.074,7,0.567,12,0.177,15,2.093,16,0.887,18,0.716,19,0.349,20,0.01,21,2.341,29,0.369,30,0.824,33,0.497,60,2.077,71,2.463,79,0.098,80,0.079,86,1.49,93,1.745,94,2.3,97,1.584,105,3.411,109,1.24,110,1.472,119,1.992,130,2.633,133,1.528,136,1.7,137,1.941,147,2.679,148,1.195,150,2.803,152,2.407,161,1.736,162,2.929,191,1.649,192,1.35,204,3.257,212,2.138,239,2.277,241,3.414,251,2.409,259,2.361,260,0.005,289,3.106,303,0.005,307,1.493,310,2.383,313,0.63,335,2.169,347,1.472,512,2.666,518,1.642,624,2.242,630,3.492,637,2.742,642,3.358,646,2.304,651,2.046,659,2.361,662,4.658,709,2.742,769,1.227,780,3.685,937,2.666,1008,2.972,1014,3.835,1057,1.755,1060,2.361,1063,4.209,1065,2.499,1067,3.429,1070,4.014,1075,3.429,1076,3.429,1089,2.242,1090,1.755,1131,4.175,1144,2.874,1198,4.58,1691,5.73,1710,2.874,1711,3.153,1716,4.58,1721,4.692,1724,3.153,1742,3.153,1743,4.175,1744,5.195,1745,6.118,1746,3.577,1747,6.714,1748,3.577,1749,6.118,1750,5.195,1751,3.577,1752,5.195,1753,3.577,1754,3.577,1755,3.577,1756,6.714,1757,5.195,1758,3.577,1759,3.577,1760,3.153,1761,3.577,1762,3.577,1763,5.195,1764,5.195,1765,3.153,1766,3.577,1767,5.195,1768,3.577,1769,3.577,1770,3.577,1771,3.153,1772,6.118,1773,6.714,1774,3.577,1775,3.577,1776,3.577,1777,3.577]],["title/controllers/IssuerManagementController.html",[343,1.358,1778,3.272]],["body/controllers/IssuerManagementController.html",[3,0.12,4,0.1,5,0.09,7,0.697,12,0.217,16,0.546,18,0.362,19,0.394,20,0.01,24,2.41,29,0.394,33,0.61,51,2.753,79,0.12,80,0.097,89,2.234,94,1.722,98,2.081,106,2.081,107,1.729,110,1.316,133,1.766,136,0.895,147,2.286,148,2.006,187,2.625,192,0.831,194,3.46,196,2.535,248,1.729,260,0.006,271,3.778,290,2.945,303,0.006,310,2.006,311,1.011,313,0.388,317,2.232,340,2.154,343,1.358,345,1.59,347,1.316,351,2.013,356,2.625,443,3.243,484,3.032,487,4.288,502,2.154,507,4.824,514,2.945,518,1.011,519,2.41,521,2.752,522,4.824,523,4.474,531,3.486,539,4.474,544,2.846,588,2.41,641,3.137,646,2.06,722,2.317,731,1.833,737,3.528,755,3.763,824,1.68,903,3.272,907,2.898,915,3.295,916,3.589,931,3.272,954,3.528,987,2.753,1015,3.434,1118,2.512,1141,3.068,1142,3.068,1143,2.898,1145,3.068,1146,3.528,1147,3.755,1148,3.068,1149,3.068,1150,3.528,1152,1.95,1372,2.898,1728,3.068,1778,4.474,1779,5.292,1780,4.824,1781,3.871,1782,6.031,1783,3.871,1784,5.194,1785,3.871,1786,5.292,1787,4.09,1788,3.871,1789,4.391,1790,4.391,1791,4.391,1792,6.003,1793,3.871,1794,4.09,1795,3.528,1796,4.391,1797,2.898,1798,3.528,1799,4.288,1800,3.871,1801,3.871,1802,5.292,1803,3.528,1804,6.483,1805,3.871,1806,3.871,1807,5.497,1808,5.292,1809,4.195,1810,3.871,1811,4.391,1812,4.391,1813,3.871,1814,4.391,1815,4.391,1816,3.871,1817,3.528,1818,3.871,1819,3.871,1820,3.871,1821,3.871,1822,3.871,1823,3.871]],["title/interfaces/IssuerMetadata.html",[0,1.199,1824,2.898]],["body/interfaces/IssuerMetadata.html",[0,2.17,2,2.751,3,0.165,4,0.137,5,0.123,7,0.952,12,0.297,13,1.078,18,0.655,19,0.388,20,0.01,21,2.813,22,2.333,26,3.264,29,0.281,79,0.165,106,3.485,260,0.008,303,0.008,339,2.736,443,3.485,618,4.608,620,4.205,623,5.479,803,3.371,824,3.431,930,5.137,1030,4.035,1100,4.822,1113,3.293,1323,2.944,1334,4.547,1506,5.137,1521,5.238,1824,4.852,1825,5.29]],["title/modules/IssuerModule.html",[360,1.324,375,3.068]],["body/modules/IssuerModule.html",[3,0.115,4,0.096,5,0.086,20,0.01,29,0.424,33,0.583,34,2.065,35,1.233,79,0.16,80,0.093,110,1.275,161,1.401,234,3.369,260,0.006,303,0.006,345,2.105,360,2.014,362,1.804,363,1.987,364,2.131,365,2.131,366,1.922,367,3.275,368,3.275,372,4.137,375,6.362,378,4.686,380,2.956,381,2.131,382,1.987,385,2.756,387,3.476,388,2.628,392,3.124,407,3.124,428,3.124,544,1.987,691,4.976,723,4.712,778,2.212,780,4.302,810,2.929,824,1.604,1008,3.327,1014,2.628,1053,2.506,1059,3.696,1060,2.767,1063,4.913,1065,2.929,1090,2.057,1128,4.976,1144,3.369,1151,4.686,1158,4.976,1160,3.369,1169,3.369,1205,2.398,1474,2.767,1710,3.369,1712,4.976,1760,3.696,1778,4.976,1780,3.369,1794,5.132,1826,3.696,1827,3.696,1828,3.696,1829,3.696,1830,4.913,1831,5.173,1832,4.686,1833,4.484,1834,4.686,1835,3.369,1836,4.976,1837,3.696,1838,4.192,1839,4.192,1840,4.192,1841,3.696,1842,4.192,1843,4.192,1844,4.192,1845,3.838,1846,2.929,1847,3.124,1848,4.192,1849,4.192,1850,5.815,1851,3.124,1852,3.838,1853,2.212,1854,3.369,1855,4.192,1856,5.815,1857,4.192,1858,4.192]],["title/classes/JwksResponseDto.html",[80,0.097,1522,3.068]],["body/classes/JwksResponseDto.html",[3,0.15,4,0.125,5,0.112,7,0.866,12,0.27,13,1.017,18,0.628,19,0.325,20,0.01,21,3.324,22,2.757,24,4.18,29,0.256,79,0.19,80,0.169,81,2.588,106,3.286,107,2.15,196,2.091,203,2.15,260,0.007,277,3.423,303,0.007,305,1.689,313,0.483,443,3.61,610,3.124,620,3.965,743,4.07,803,3.673,833,2.679,919,3.604,1083,5.297,1098,4.575,1101,4.774,1323,2.679,1325,3.816,1326,5.166,1334,4.813,1376,7.101,1506,5.322,1507,6.111,1508,6.111,1509,6.111,1510,4.388,1511,4.814,1512,5.166,1513,6.111,1515,4.814,1516,4.07,1517,4.814,1519,6.111,1521,4.144,1522,4.844,1859,4.814]],["title/injectables/JwtAuthGuard.html",[30,0.697,588,2.41]],["body/injectables/JwtAuthGuard.html",[3,0.165,4,0.137,5,0.124,12,0.297,16,0.915,19,0.345,20,0.01,29,0.389,30,1.168,33,0.835,79,0.165,80,0.133,93,1.563,109,1.359,110,1.318,136,1.225,137,1.907,192,1.393,260,0.008,303,0.008,313,0.65,347,1.614,518,1.694,528,5.299,588,4.039,592,4.48,769,2.062,1152,2.669,1860,5.299,1861,5.143,1862,7.36,1863,7.36,1864,5.299,1865,7.629,1866,6.011,1867,7.36,1868,6.178,1869,6.011,1870,3.768,1871,4.83,1872,6.011,1873,5.914,1874,4.83,1875,6.488,1876,6.011,1877,5.299,1878,6.011,1879,6.011]],["title/injectables/JwtService.html",[30,0.697,524,2.752]],["body/injectables/JwtService.html",[0,1.118,3,0.112,4,0.093,5,0.084,12,0.202,16,0.888,18,0.682,19,0.335,20,0.01,27,3.272,29,0.335,30,0.908,33,0.569,34,2.407,35,1.204,79,0.157,80,0.091,82,3.272,84,4.296,85,4.957,89,3.182,93,1.064,107,1.612,109,1.387,110,1.815,119,2.533,120,2.806,133,1.682,136,1.455,147,2.6,148,1.912,160,3.234,187,3.42,191,2.265,192,1.351,214,2.712,239,2.454,251,2.596,257,2.247,260,0.006,264,3.772,303,0.006,310,1.368,313,0.664,347,1.254,433,1.762,456,1.941,458,4.914,518,1.643,524,3.586,531,3.862,532,3.052,551,2.567,552,5.248,556,3.586,566,3.42,568,2.908,575,3.335,579,4.597,581,2.567,769,1.405,778,2.161,824,2.523,834,3.586,872,3.044,885,2.009,1062,3.776,1152,1.818,1250,2.861,1283,3.776,1322,3.052,1323,2.009,1372,3.776,1632,5.32,1633,3.29,1634,3.61,1635,4.597,1636,5.812,1637,5.043,1638,4.597,1639,5.043,1640,5.043,1641,3.61,1642,3.61,1643,5.812,1644,5.043,1645,3.61,1646,4.597,1647,3.61,1648,3.61,1649,3.61,1650,3.61,1651,3.61,1652,3.61,1653,3.61,1654,3.61,1655,4.263,1656,5.043,1657,4.914,1658,3.29,1659,3.61,1660,3.61,1661,3.052,1662,5.043,1663,4.597,1664,5.043,1665,5.043,1666,3.61,1667,6.292,1668,3.29,1880,5.721,1881,5.721,1882,4.095,1883,4.095,1884,4.095,1885,4.095,1886,4.095,1887,4.095]],["title/injectables/JwtStrategy.html",[30,0.697,589,3.068]],["body/injectables/JwtStrategy.html",[3,0.166,4,0.101,5,0.091,12,0.219,16,0.918,19,0.346,20,0.01,22,1.917,29,0.374,30,0.958,33,0.616,34,2.728,35,1.303,60,2.126,79,0.122,80,0.098,82,3.456,84,2.535,85,2.925,86,2.287,89,2.248,93,1.152,107,1.745,109,1.472,110,1.619,119,1.443,120,2.174,136,1.231,137,1.917,138,2.253,160,2.174,164,2.925,192,1.398,212,3.612,248,1.745,251,2.706,260,0.006,303,0.006,313,0.653,347,1.325,399,5.262,456,2.1,484,1.745,518,1.699,531,3.499,532,3.303,552,4.221,557,3.303,575,3.052,581,3.787,589,4.221,592,3.303,602,3.561,709,2.339,718,3.987,769,1.52,778,2.339,824,3.051,872,2.786,1015,2.535,1062,4.537,1152,1.968,1238,2.649,1250,4.803,1391,3.561,1521,3.612,1635,5.523,1646,3.561,1668,3.561,1765,3.907,1861,4.221,1874,3.561,1888,3.907,1889,6.041,1890,6.041,1891,6.874,1892,4.431,1893,6.041,1894,4.431,1895,6.041,1896,6.874,1897,4.431,1898,4.431,1899,6.041,1900,4.431,1901,4.431,1902,4.431,1903,4.431,1904,3.907,1905,6.041,1906,3.907,1907,7.382,1908,4.431,1909,4.431,1910,4.431,1911,3.907,1912,4.431,1913,4.431,1914,4.431,1915,4.431,1916,4.431,1917,4.431,1918,4.431,1919,5.123,1920,6.041,1921,4.431,1922,4.431,1923,4.431,1924,3.907,1925,6.041,1926,4.431,1927,4.431,1928,4.431,1929,4.431,1930,4.431,1931,4.431,1932,4.431,1933,4.431,1934,4.431,1935,3.561,1936,4.431,1937,4.431]],["title/entities/KeyEntity.html",[1007,1.89,1938,3.272]],["body/entities/KeyEntity.html",[3,0.177,4,0.148,5,0.133,12,0.32,13,1.128,18,0.634,19,0.36,20,0.009,29,0.303,79,0.177,80,0.143,137,2.44,152,2.297,260,0.008,303,0.008,311,1.77,313,0.68,964,5.076,1007,3.31,1009,3.548,1018,5.374,1038,5.374,1054,4.267,1057,3.172,1258,6.78,1266,6.118,1938,5.732,1939,5.699,1940,6.465,1941,6.465]],["title/modules/KeyModule.html",[360,1.324,376,3.068]],["body/modules/KeyModule.html",[3,0.142,4,0.118,5,0.106,15,1.314,20,0.01,29,0.411,33,0.72,34,2.578,35,1.524,47,3.189,48,2.456,60,1.603,79,0.184,80,0.115,109,1.372,110,1.47,119,2.182,136,1.056,139,4.657,260,0.007,303,0.007,313,0.458,347,1.136,360,2.241,362,2.23,367,2.542,368,2.542,372,3.537,376,5.191,385,2.456,386,4.995,387,4.007,388,3.248,399,4.424,401,3.861,447,3.861,448,4.163,450,4.163,1276,4.201,1474,3.42,1483,5.97,1484,4.995,1565,4.995,1600,5.386,1852,4.424,1853,2.734,1938,3.861,1942,4.163,1943,7.43,1944,5.181,1945,7.43,1946,6.702,1947,5.181,1948,4.995,1949,6.697,1950,5.685,1951,5.181,1952,5.181,1953,5.909,1954,4.567,1955,4.567,1956,3.861,1957,4.567,1958,4.567,1959,4.163,1960,5.909,1961,4.567,1962,4.567,1963,5.181,1964,4.567,1965,6.702]],["title/classes/KeyService.html",[80,0.097,1276,2.752]],["body/classes/KeyService.html",[0,1.68,3,0.125,4,0.104,5,0.094,7,0.722,12,0.225,15,1.561,16,1.022,18,0.737,19,0.401,20,0.01,21,2.354,22,2.652,23,5.216,29,0.288,79,0.125,80,0.101,94,1.306,133,2.196,136,1.726,142,3.678,152,2.487,191,2.794,192,1.555,248,1.792,260,0.006,303,0.006,305,1.408,313,0.726,315,3.095,347,1.349,518,1.891,575,2.732,617,5.194,658,2.854,803,3.575,884,4.241,1036,2.233,1248,4.944,1276,3.857,1283,4.6,1323,2.233,1530,4.299,1536,4.299,1571,4.944,1572,6.602,1577,4.944,1579,6.266,1586,4.944,1588,3.658,1589,4.679,1601,2.854,1605,4.299,1658,3.658,1966,4.013,1967,9.043,1968,4.552,1969,4.552,1970,4.552,1971,4.552,1972,4.552,1973,4.552,1974,7.465,1975,4.552]],["title/injectables/LoggerConfigService.html",[30,0.697,1976,3.272]],["body/injectables/LoggerConfigService.html",[0,1.133,3,0.158,4,0.095,5,0.085,7,0.658,12,0.205,13,0.847,16,0.718,18,0.547,19,0.311,20,0.01,27,4.86,29,0.271,30,0.916,33,0.577,34,2.417,35,1.221,60,2.054,71,2.737,79,0.158,80,0.092,86,2.382,93,1.079,97,1.843,109,1.51,110,0.91,133,1.698,134,4.304,136,1.714,138,3.377,192,1.093,203,2.274,214,2.737,251,2.274,260,0.006,303,0.006,313,0.757,347,1.266,417,4.64,430,4.64,431,4.64,432,4.64,436,3.335,438,2.9,439,3.335,440,3.335,442,5.351,443,3.148,449,4.64,452,5.337,518,1.329,731,1.733,769,1.424,778,2.19,1004,3.941,1017,2.278,1066,3.093,1074,3.659,1152,1.843,1976,4.304,1977,6.938,1978,3.048,1979,6.33,1980,6.33,1981,6.33,1982,6.33,1983,6.33,1984,6.33,1985,6.33,1986,5.775,1987,6.33,1988,6.33,1989,5.775,1990,4.151,1991,5.625,1992,4.151,1993,4.151,1994,6.888,1995,4.151,1996,4.151,1997,4.151,1998,5.091,1999,4.151,2000,4.151,2001,5.091,2002,5.091,2003,4.035,2004,4.151,2005,5.091,2006,4.035,2007,5.091,2008,3.303,2009,5.091,2010,5.091,2011,5.091,2012,5.091,2013,5.091,2014,3.659,2015,3.659,2016,5.017,2017,3.659,2018,5.091,2019,4.95,2020,3.659,2021,3.659,2022,3.659,2023,3.659,2024,3.659,2025,3.659,2026,3.659]],["title/interfaces/LoggerConfiguration.html",[0,1.199,1991,3.272]],["body/interfaces/LoggerConfiguration.html",[0,1.309,2,2.198,3,0.175,4,0.109,5,0.099,12,0.237,13,0.934,18,0.395,19,0.372,20,0.01,27,5.048,29,0.299,30,1.011,33,0.666,34,2.213,35,1.41,60,1.483,71,2.272,79,0.175,80,0.106,86,2.052,97,1.687,109,1.561,110,1.051,133,1.41,134,3.573,138,3.637,203,1.888,214,2.272,251,2.508,260,0.007,303,0.007,417,3.852,430,5.119,431,5.119,432,5.119,436,3.852,438,3.35,439,3.852,440,3.852,442,5.914,443,3.613,449,6.376,452,6.376,731,2.002,1004,3.496,1017,2.631,1066,3.573,1152,2.129,1976,3.573,1977,3.852,1978,2.53,1979,4.226,1980,4.226,1981,4.226,1982,4.226,1983,4.226,1984,4.226,1985,4.226,1987,4.226,1988,4.226,1991,5.681,1994,7.191,1998,4.226,2001,4.226,2002,4.226,2003,3.35,2005,4.226,2006,3.35,2007,4.226,2008,2.742,2009,6.995,2010,6.995,2011,6.995,2012,5.615,2013,5.615,2014,4.226,2015,4.226,2016,5.326,2017,4.226,2018,5.615,2019,5.332,2020,4.226,2021,4.226,2022,4.226,2023,4.226,2024,4.226,2025,4.226,2026,4.226]],["title/classes/NotificationRequestDto.html",[80,0.097,2027,3.068]],["body/classes/NotificationRequestDto.html",[3,0.176,4,0.146,5,0.132,12,0.317,13,1.123,18,0.631,19,0.359,20,0.009,29,0.359,79,0.176,80,0.17,260,0.008,303,0.008,305,1.984,311,1.762,312,3.633,313,0.677,323,2.387,747,3.835,763,5.656,767,5.656,972,5.129,1053,3.835,2027,5.349,2028,7.213,2029,8.182,2030,6.575,2031,7.655,2032,7.655,2033,4.781]],["title/classes/Oauth2AuthorizationServerResponse.html",[80,0.097,2034,3.272]],["body/classes/Oauth2AuthorizationServerResponse.html",[3,0.126,4,0.105,5,0.095,7,0.731,11,1.574,12,0.228,13,0.91,18,0.733,19,0.398,20,0.01,22,1.969,27,3.549,28,4.985,79,0.126,80,0.102,82,4.715,89,2.309,91,3.889,106,2.941,120,4.304,196,1.39,260,0.006,303,0.006,305,1.426,313,0.75,324,3.801,333,4.485,339,3.193,443,2.941,514,4.209,610,2.636,704,5.243,712,6.029,824,2.684,825,5.227,827,5.227,829,5.227,832,5.227,835,5.227,836,5.227,838,5.227,840,5.227,866,4.624,1098,5.663,1101,2.889,1113,4.118,1238,3.709,1250,5.243,1396,4.624,1506,4.335,1521,3.709,1859,4.063,2034,4.624,2035,7.564,2036,4.609,2037,4.609,2038,8.065,2039,4.609,2040,4.609,2041,3.703,2042,4.609,2043,4.609,2044,5.469,2045,6.204,2046,4.063]],["title/classes/OfferRequestDto.html",[80,0.097,1784,2.752]],["body/classes/OfferRequestDto.html",[3,0.149,4,0.124,5,0.112,7,1.097,11,1.381,12,0.269,13,1.014,16,0.995,18,0.707,19,0.402,20,0.01,22,1.727,29,0.356,51,2.496,79,0.19,80,0.169,98,3.604,196,2.086,260,0.007,303,0.007,305,1.684,311,1.842,312,3.377,313,0.707,317,4.361,321,3.072,322,3.73,323,2.025,351,2.496,471,1.727,618,3.412,747,3.254,755,4.767,765,4.374,915,3.797,916,4.546,987,2.496,1017,2.987,1741,5.559,1784,4.336,1787,3.254,1797,5.019,1798,4.374,1799,4.767,1809,4.834,2033,4.056,2047,6.638,2048,6.111,2049,5.443,2050,4.798,2051,5.443,2052,5.156,2053,5.443,2054,5.443,2055,4.798,2056,5.443,2057,6.098,2058,4.374]],["title/classes/OfferResponse.html",[80,0.097,1787,2.625]],["body/classes/OfferResponse.html",[3,0.161,4,0.134,5,0.121,7,0.934,11,1.493,12,0.291,13,1.065,18,0.719,19,0.369,20,0.01,22,1.867,29,0.369,51,2.698,79,0.199,80,0.175,98,2.789,196,1.775,260,0.008,303,0.008,305,1.82,312,3.225,313,0.642,317,4.183,321,3.225,322,3.865,323,2.19,351,2.698,471,2.5,747,3.518,755,3.688,915,3.229,916,3.518,987,3.613,1017,3.229,1741,5.837,1784,3.688,1787,4.342,1797,4.794,1798,4.728,1799,4.553,1809,5.076,2033,4.385,2047,6.332,2048,4.728,2052,4.385,2057,6.403,2058,4.728,2059,5.884,2060,5.187]],["title/controllers/Oid4vciController.html",[343,1.358,1836,3.272]],["body/controllers/Oid4vciController.html",[3,0.136,4,0.113,5,0.102,11,2.131,12,0.246,16,0.812,18,0.679,19,0.362,20,0.01,29,0.394,33,0.691,51,2.28,79,0.136,80,0.11,94,2.089,109,1.345,110,1.09,136,1.576,152,2.385,161,2.181,189,2.845,191,2.071,192,1.235,194,3.441,241,2.528,247,4.549,248,2.569,258,3.475,260,0.007,303,0.007,311,1.502,313,0.577,341,4.807,343,1.538,345,1.8,347,1.431,471,2.454,477,3.328,502,2.439,514,3.939,518,1.502,519,2.729,646,2.499,720,3.282,722,2.624,731,2.076,732,4.56,893,2.624,895,3.706,1053,2.973,1124,3.581,1152,2.208,1794,4.354,1795,3.996,1832,2.973,1836,4.863,1845,3.282,1847,3.706,2027,5.403,2061,4.384,2062,4.973,2063,4.973,2064,4.973,2065,4.973,2066,5.753,2067,4.973,2068,4.973,2069,4.973,2070,4.384,2071,4.384,2072,4.384,2073,3.117,2074,4.973,2075,3.996,2076,4.973,2077,4.384,2078,4.973,2079,4.384,2080,4.973,2081,4.973,2082,4.973,2083,4.973,2084,4.973,2085,4.973,2086,4.973,2087,4.973]],["title/injectables/Oid4vciService.html",[30,0.697,1794,2.625]],["body/injectables/Oid4vciService.html",[3,0.063,4,0.052,5,0.047,11,1.872,12,0.263,13,0.541,15,1.58,16,0.725,18,0.68,19,0.352,20,0.01,21,1.774,29,0.384,30,0.586,32,3.723,33,0.318,34,2.026,35,0.674,47,2.506,48,1.086,51,1.692,55,2.206,57,1.601,61,1.692,62,1.601,79,0.063,80,0.051,81,1.086,86,2.071,93,0.959,94,1.059,97,0.87,109,0.981,110,1.877,114,1.601,119,2.29,135,2.314,136,1.188,137,0.727,147,2.554,148,2.651,150,0.956,152,2.279,156,1.841,161,1.549,162,1.453,191,1.976,192,1.103,194,2.734,196,0.691,214,2.197,239,2.437,241,1.876,247,3.075,248,1.453,251,2.682,258,1.601,260,0.004,268,1.37,270,1.841,278,1.841,286,1.257,290,1.811,296,2.579,298,1.37,299,1.37,303,0.004,313,0.622,330,0.853,339,1.978,340,1.124,341,3.059,347,0.809,456,2.197,469,2.111,471,2.386,477,1.588,481,2.579,483,2.805,484,1.825,512,1.707,514,1.811,518,1.341,531,2.952,556,2.905,568,2.356,630,1.017,637,1.209,639,1.31,646,1.266,655,2.905,660,1.37,707,1.601,722,1.209,723,2.917,726,3.213,727,1.436,731,3.014,752,3.508,769,0.786,780,3.594,785,2.751,800,2.026,801,2.751,802,3.454,805,2.751,806,1.436,807,1.436,810,1.601,821,2.651,824,2.034,849,2.446,856,2.436,858,3.713,861,1.707,872,1.496,881,1.707,887,2.314,890,2.751,912,1.512,915,2.026,916,1.37,987,1.05,989,1.841,1004,1.257,1014,1.436,1017,1.257,1025,1.841,1030,1.257,1053,1.37,1088,1.512,1102,2.02,1103,2.02,1104,2.02,1105,1.841,1106,2.02,1107,3.254,1108,2.966,1109,2.02,1124,3.418,1127,2.02,1143,1.512,1151,4.316,1169,1.841,1176,4.086,1186,2.966,1188,2.905,1367,2.026,1412,2.02,1471,3.254,1598,4.27,1599,1.707,1702,1.841,1728,1.601,1784,3.331,1787,2.206,1794,2.206,1824,4.497,1833,3.04,1834,3.915,1837,2.02,1845,2.436,1846,1.601,1851,1.707,1854,1.841,1870,2.905,1978,1.209,2008,2.111,2027,3.713,2048,2.966,2071,2.02,2072,2.02,2073,2.905,2088,2.02,2089,5.827,2090,4.635,2091,4.635,2092,2.291,2093,3.691,2094,3.691,2095,2.291,2096,2.291,2097,2.291,2098,2.291,2099,2.291,2100,2.291,2101,3.691,2102,3.254,2103,2.291,2104,2.291,2105,2.291,2106,5.314,2107,2.291,2108,5.314,2109,4.635,2110,2.291,2111,3.691,2112,2.291,2113,2.291,2114,2.291,2115,2.905,2116,2.291,2117,2.291,2118,3.691,2119,2.291,2120,2.291,2121,4.086,2122,2.291,2123,2.291,2124,2.291,2125,2.291,2126,2.291,2127,2.291,2128,2.02,2129,4.635,2130,2.291,2131,2.291,2132,2.291,2133,2.291,2134,2.291,2135,3.691,2136,2.291,2137,2.291,2138,4.685,2139,2.291,2140,5.314,2141,2.291,2142,2.02,2143,2.291,2144,1.841,2145,2.291,2146,3.691,2147,2.291,2148,3.691,2149,2.291,2150,2.02,2151,4.685,2152,3.691,2153,3.691,2154,3.691,2155,3.691,2156,3.691,2157,3.691,2158,3.691,2159,3.691,2160,4.343,2161,2.579,2162,2.751,2163,2.291,2164,2.02,2165,5.827,2166,2.291,2167,2.291,2168,2.291,2169,2.291,2170,2.291,2171,2.02,2172,2.291,2173,2.291,2174,3.691,2175,2.291,2176,2.291,2177,2.291,2178,2.291,2179,2.291,2180,2.291,2181,2.291,2182,2.291,2183,6.228,2184,2.291,2185,3.691,2186,3.691,2187,2.02,2188,2.291,2189,2.02,2190,2.291,2191,2.291,2192,2.291,2193,4.635,2194,2.291,2195,2.291,2196,2.02,2197,2.291,2198,2.291,2199,2.291,2200,4.635,2201,2.291,2202,3.691,2203,2.291,2204,2.291,2205,2.291,2206,2.02,2207,2.291,2208,2.291,2209,2.291,2210,2.02,2211,2.291,2212,2.291,2213,2.02,2214,2.02]],["title/controllers/Oid4vpController.html",[343,1.358,2215,3.272]],["body/controllers/Oid4vpController.html",[3,0.135,4,0.113,5,0.101,7,0.783,11,1.647,12,0.244,16,0.808,18,0.726,19,0.304,20,0.01,29,0.375,33,0.686,79,0.135,80,0.109,91,4.071,93,1.283,94,2.298,95,3.094,100,3.679,101,4.79,102,4.84,109,1.199,136,1.676,152,2.346,192,1.229,194,3.345,196,1.958,254,5.534,260,0.007,303,0.007,311,1.495,313,0.574,324,2.711,343,2.245,345,1.787,347,1.424,471,2.66,479,3.974,502,2.421,514,3.186,518,1.495,519,2.709,534,2.824,687,5.388,731,2.061,732,4.538,779,4.397,893,3.427,1076,4.286,1152,2.192,1168,4.286,1832,2.951,1845,4.286,1847,3.679,2070,4.351,2073,3.094,2075,3.966,2077,4.351,2079,4.351,2215,5.409,2216,4.351,2217,4.936,2218,6.494,2219,7.257,2220,6.398,2221,4.936,2222,4.936,2223,4.936,2224,4.351,2225,4.936,2226,4.936,2227,4.538,2228,4.351,2229,4.351,2230,4.936,2231,4.936,2232,4.936,2233,4.936,2234,4.936,2235,4.936,2236,4.936,2237,4.936]],["title/modules/Oid4vpModule.html",[360,1.324,1830,2.752]],["body/modules/Oid4vpModule.html",[3,0.144,4,0.12,5,0.108,20,0.01,29,0.414,33,0.729,79,0.144,80,0.116,260,0.007,303,0.007,345,2.446,360,2.254,362,2.258,363,2.487,364,2.667,365,2.667,366,2.406,367,3.666,368,3.666,372,4.413,377,5.241,378,4.999,380,3.435,381,2.667,382,2.487,385,3.203,388,3.289,396,4.216,407,3.91,779,4.879,1830,5.727,1832,4.999,1833,4.783,1834,4.999,1845,4.46,1846,3.666,1847,3.91,1851,3.91,1852,4.46,1853,2.769,2215,5.57,2228,4.625,2238,4.625,2239,4.625,2240,4.625,2241,4.625,2242,5.241,2243,5.246,2244,5.246,2245,4.625]],["title/injectables/Oid4vpService.html",[30,0.697,779,2.41]],["body/injectables/Oid4vpService.html",[3,0.069,4,0.057,5,0.051,9,1.429,11,1.836,12,0.123,15,0.634,16,0.694,18,0.69,19,0.262,20,0.01,22,0.793,24,1.371,29,0.379,30,0.627,33,0.347,34,2.097,35,0.735,47,2.476,48,1.184,51,1.146,52,3.878,60,0.773,61,1.146,69,4.249,79,0.069,80,0.055,86,2.017,93,1.028,94,2.017,98,2.884,103,2.764,104,2.263,109,0.73,110,1.814,119,1.599,120,1.226,130,1.075,133,0.735,136,1.24,147,2.419,148,2.571,152,2.378,161,2.033,162,1.557,174,2.008,175,2.008,176,1.649,177,2.008,178,2.008,179,2.008,184,2.365,189,1.429,191,1.772,192,1.057,193,1.862,194,1.651,196,1.684,226,1.318,232,2.764,239,1.827,248,1.933,249,3.659,251,2.768,254,5.079,259,1.649,260,0.004,268,3.338,271,1.94,283,1.746,290,1.94,296,2.764,303,0.004,310,0.835,313,0.493,315,2.18,324,2.54,330,1.472,335,1.043,339,1.827,340,1.226,347,0.867,456,2.884,469,2.263,471,2.231,475,3.01,477,1.075,479,3.067,518,1.49,534,2.263,541,2.611,556,3.078,568,2.496,575,1.109,608,1.746,612,2.479,613,3.178,687,3.901,720,2.611,721,1.566,726,3.326,727,1.566,735,1.494,748,4.522,755,1.566,769,0.857,779,2.171,800,1.371,821,2.808,833,2.739,849,1.318,872,2.263,885,1.94,893,2.087,922,1.371,987,1.146,1036,1.226,1078,1.649,1231,1.862,1233,2.202,1236,1.746,1238,1.494,1255,3.487,1260,4.486,1271,4.474,1334,1.371,1357,5.363,1367,1.371,1391,2.008,1521,1.494,1551,2.202,1558,2.202,1598,3.178,1599,1.862,1733,2.948,1787,1.494,1833,3.194,1834,4.053,1845,2.611,1846,1.746,1851,1.862,1870,3.814,1919,1.862,1978,1.318,2008,3.194,2073,3.078,2115,3.078,2128,3.487,2142,2.202,2160,4.534,2161,2.764,2162,2.948,2164,3.487,2171,5.363,2187,2.202,2189,2.202,2196,3.487,2220,3.487,2224,3.487,2229,2.202,2246,2.202,2247,4.91,2248,4.91,2249,2.498,2250,2.498,2251,2.498,2252,2.498,2253,3.178,2254,2.948,2255,2.498,2256,4.161,2257,2.498,2258,2.498,2259,3.955,2260,2.498,2261,2.498,2262,2.498,2263,2.498,2264,2.008,2265,2.498,2266,2.498,2267,2.202,2268,5.583,2269,3.955,2270,4.91,2271,2.498,2272,3.955,2273,6.084,2274,2.498,2275,2.498,2276,3.178,2277,2.498,2278,2.498,2279,2.498,2280,2.202,2281,2.498,2282,2.498,2283,2.498,2284,2.498,2285,2.498,2286,2.498,2287,2.498,2288,2.498,2289,2.498,2290,2.498,2291,2.498,2292,2.498,2293,2.498,2294,4.328,2295,4.91,2296,2.498,2297,2.498,2298,3.955,2299,3.955,2300,2.498,2301,2.498,2302,2.498,2303,2.498,2304,2.498,2305,2.498,2306,2.498,2307,2.008,2308,1.862,2309,2.498,2310,2.498,2311,2.008,2312,2.202,2313,2.498,2314,2.498,2315,5.583,2316,3.955,2317,2.498,2318,2.498,2319,2.498,2320,3.955,2321,2.498,2322,2.498,2323,2.202,2324,2.202,2325,2.498,2326,2.498,2327,2.498,2328,2.498,2329,5.583,2330,3.955,2331,3.955,2332,2.498,2333,2.498,2334,2.498,2335,2.498,2336,3.955,2337,2.498,2338,2.202,2339,2.498,2340,2.498,2341,2.498,2342,3.955,2343,2.498,2344,2.498,2345,2.498,2346,3.955,2347,2.498,2348,4.91,2349,2.498,2350,3.955,2351,2.498,2352,3.955,2353,3.955,2354,2.498,2355,2.498,2356,2.498,2357,2.498,2358,2.498,2359,2.498,2360,2.498,2361,2.498,2362,2.498]],["title/classes/ParResponseDto.html",[80,0.097,728,3.272]],["body/classes/ParResponseDto.html",[3,0.175,4,0.145,5,0.131,11,2.225,12,0.315,13,1.118,18,0.628,19,0.357,20,0.009,79,0.175,80,0.141,172,4.359,260,0.008,303,0.008,305,1.969,313,0.674,324,3.181,548,6.078,584,6.718,610,3.642,712,6.123,728,5.679,735,4.876,987,3.876,2041,5.116,2046,5.612,2206,6.718,2363,7.19,2364,7.62]],["title/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,1.199,813,3.068]],["body/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,1.157,2,1.25,3,0.075,4,0.062,5,0.056,11,1.838,12,0.135,13,0.621,18,0.677,19,0.315,20,0.01,21,1.043,29,0.374,30,0.672,33,0.379,34,1.607,35,0.802,38,1.293,47,1.988,48,1.293,51,1.25,60,1.31,79,0.116,80,0.06,86,1.926,93,0.709,97,0.999,98,2.008,107,1.074,109,1.24,110,1.878,113,1.56,119,2.476,120,1.338,130,2.236,137,1.648,147,2.244,148,2.721,152,2.375,160,1.338,161,0.911,162,2.643,165,2.655,191,0.865,194,2.648,196,2.113,214,1.293,237,1.905,239,2.695,247,1.439,248,2.045,251,2.045,257,1.497,260,0.004,271,3.294,303,0.004,307,2.169,310,0.911,324,1.769,328,3.502,330,2.18,335,2.446,338,1.717,339,2.18,340,1.338,342,2.741,471,2.529,475,2.307,477,1.174,479,1.293,481,3.63,483,2.741,514,1.338,555,2.96,568,1.386,581,1.709,612,2.655,621,2.648,630,2.307,637,1.439,639,1.56,640,2.423,641,3.654,646,1.453,649,1.293,655,2.655,663,1.8,697,2.032,701,3.502,704,1.905,707,2.96,708,2.96,720,3.429,721,1.709,722,1.439,723,1.497,725,2.032,726,2.548,727,1.709,735,3.106,748,4.093,752,2.796,770,2.032,773,2.191,774,2.191,775,2.191,777,2.191,779,2.851,780,2.851,783,2.032,785,4.727,786,2.191,788,4.707,796,2.191,800,3.481,801,5.004,802,4.365,803,2.686,804,2.191,805,4.365,806,1.709,807,1.709,808,2.191,809,2.191,810,1.905,811,2.191,812,2.191,813,3.63,814,5.097,815,2.96,816,2.191,817,2.191,818,3.404,819,2.191,820,3.404,821,1.56,822,4.707,823,2.191,824,1.988,825,2.032,826,2.191,827,2.032,828,2.191,829,2.032,830,2.191,831,2.191,832,2.032,833,2.078,834,1.709,835,2.032,836,2.032,837,2.191,838,2.032,839,2.191,840,2.032,841,2.191,842,2.191,843,2.191,844,3.404,845,2.191,846,2.032,847,2.191,848,2.191,849,3.698,850,2.191,851,2.191,852,2.191,853,2.191,854,2.191,855,4.174,856,3.429,857,2.191,858,4.093,859,2.191,860,2.191,861,2.032,862,2.191,863,2.191,864,4.707,865,3.404,866,5.222,867,2.191,868,3.404,869,3.404,870,3.404,871,3.404,872,1.717,873,3.404,874,2.191,875,2.191,876,2.191,877,2.191,878,2.191,879,2.191,880,2.191,881,3.157,882,2.191,883,2.191,884,1.439,885,1.338,886,2.032,887,1.709,888,2.191,889,2.032,890,2.032,891,2.191,892,2.032,893,1.439,894,3.157,895,2.032,896,2.191,897,4.174,898,2.191,899,2.191,900,2.191,901,2.191,902,2.191,903,2.032,904,3.404,905,2.191,906,3.157,907,1.8,908,2.191,909,2.191,910,2.191,911,2.191,912,1.8,913,2.191,914,2.191,915,1.497,916,2.533,917,2.191,918,2.191,919,1.8,920,2.191,921,2.191,922,1.497,923,2.191,924,2.191,925,2.191,926,2.191,927,2.191,928,2.191,929,2.191,930,1.905,931,2.032,932,2.032,933,3.404,934,2.191,935,2.191,936,2.191,937,2.032,938,2.191,939,2.191,940,2.191]],["title/interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html",[0,1.199,815,3.068]],["body/interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html",[0,1.15,2,1.241,3,0.074,4,0.062,5,0.056,11,1.833,12,0.134,13,0.618,16,0.524,18,0.686,19,0.328,20,0.01,21,1.036,29,0.373,30,0.668,33,0.376,34,1.599,35,0.796,38,1.283,47,1.979,48,1.283,51,1.241,60,1.303,79,0.116,80,0.06,86,1.92,93,0.704,97,0.993,98,1.997,107,1.066,109,1.236,110,1.876,113,1.548,119,2.471,120,1.328,130,2.225,137,1.641,147,2.237,148,2.717,152,2.372,160,1.328,161,0.905,162,2.635,165,2.64,191,0.859,194,2.639,196,2.107,214,1.283,237,1.892,239,2.689,247,1.429,248,2.036,251,2.036,257,1.486,260,0.004,271,3.284,303,0.004,307,2.159,310,0.905,324,1.759,328,3.488,330,2.171,335,2.436,338,1.707,339,2.171,340,1.328,342,2.729,471,2.524,475,2.296,477,1.165,479,1.283,481,3.613,483,2.729,514,1.328,555,2.943,568,1.376,581,1.697,612,2.64,621,2.639,630,2.296,637,1.429,639,1.548,640,2.41,641,3.479,646,1.445,649,1.283,655,2.64,663,1.787,697,2.017,701,3.488,704,1.892,707,2.943,708,2.943,720,3.413,721,1.697,722,1.429,723,1.486,725,2.017,726,2.537,727,1.697,735,3.091,748,4.077,752,2.78,770,2.017,773,2.175,774,2.175,775,2.175,777,2.175,779,2.838,780,2.838,783,2.017,785,4.711,786,2.175,788,4.688,796,2.175,800,3.469,801,4.348,802,4.348,803,2.675,804,2.175,805,4.989,806,1.697,807,1.697,808,2.175,809,2.175,810,1.892,811,2.175,812,2.175,813,2.943,814,5.079,815,3.613,816,4.688,817,4.688,818,3.385,819,2.175,820,3.385,821,1.548,822,4.688,823,2.175,824,1.979,825,2.017,826,2.175,827,2.017,828,2.175,829,2.017,830,2.175,831,2.175,832,2.017,833,2.066,834,1.697,835,2.017,836,2.017,837,2.175,838,2.017,839,2.175,840,2.017,841,2.175,842,2.175,843,2.175,844,3.385,845,2.175,846,2.017,847,2.175,848,2.175,849,3.688,850,2.175,851,2.175,852,2.175,853,2.175,854,2.175,855,4.155,856,3.413,857,2.175,858,4.077,859,2.175,860,2.175,861,2.017,862,2.175,863,2.175,864,4.688,865,3.385,866,5.208,867,2.175,868,3.385,869,3.385,870,3.385,871,3.385,872,1.707,873,3.385,874,2.175,875,2.175,876,2.175,877,2.175,878,2.175,879,2.175,880,2.175,881,3.139,882,2.175,883,2.175,884,1.429,885,1.328,886,2.017,887,1.697,888,2.175,889,2.017,890,2.017,891,2.175,892,2.017,893,1.429,894,3.139,895,2.017,896,2.175,897,4.155,898,2.175,899,2.175,900,2.175,901,2.175,902,2.175,903,2.017,904,3.385,905,2.175,906,3.139,907,1.787,908,2.175,909,2.175,910,2.175,911,2.175,912,1.787,913,2.175,914,2.175,915,1.486,916,2.518,917,2.175,918,2.175,919,1.787,920,2.175,921,2.175,922,1.486,923,2.175,924,2.175,925,2.175,926,2.175,927,2.175,928,2.175,929,2.175,930,1.892,931,2.017,932,2.017,933,3.385,934,2.175,935,2.175,936,2.175,937,2.017,938,2.175,939,2.175,940,2.175]],["title/entities/PresentationConfig.html",[922,2.41,1007,1.89]],["body/entities/PresentationConfig.html",[3,0.126,4,0.105,5,0.094,7,0.729,10,3.702,11,2.211,12,0.227,13,0.908,15,1.985,16,0.932,18,0.618,19,0.386,20,0.01,25,3.702,26,2.75,29,0.367,49,4.623,51,2.107,78,4.327,79,0.126,80,0.137,97,1.461,104,3.542,137,2.378,150,2.586,152,1.96,169,4.946,189,3.542,196,1.868,203,2.438,207,5.22,248,1.81,249,5.22,260,0.006,303,0.006,311,1.855,312,2.75,313,0.712,321,3.328,323,1.71,330,2.911,338,2.839,339,2.304,351,2.107,433,2.665,619,5.992,620,3.542,621,2.586,623,4.615,649,2.179,690,4.327,743,3.425,919,3.034,922,3.399,964,4.946,1007,3.226,1009,2.523,1018,5.237,1019,4.615,1020,4.052,1028,4.052,1038,4.894,1054,4.087,1057,2.255,1168,4.087,1689,3.693,1690,4.894,1693,4.052,1694,4.052,1695,3.425,1696,4.976,1697,4.052,1698,5.459,1704,4.052,1706,4.052,1707,4.052,1709,5.459,2227,4.327,2276,5.628,2365,7.261,2366,4.596,2367,7.004,2368,4.596,2369,4.596,2370,5.459,2371,4.596]],["title/classes/PresentationDuringIssuance.html",[80,0.097,642,2.41]],["body/classes/PresentationDuringIssuance.html",[3,0.167,4,0.139,5,0.125,7,0.964,12,0.3,13,1.087,16,0.921,18,0.736,19,0.4,20,0.009,29,0.347,79,0.203,80,0.177,192,1.15,260,0.008,303,0.008,305,1.88,311,1.705,312,3.989,313,0.655,321,3.549,323,2.261,330,2.974,338,3.24,626,3.809,642,4.066,649,2.88,650,4.778,1016,4.644,1159,5.585,1861,4.246,2372,6.077,2373,6.077,2374,5.357,2375,5.357,2376,5.357]],["title/classes/PresentationDuringIssuanceConfig.html",[80,0.097,633,2.898]],["body/classes/PresentationDuringIssuanceConfig.html",[3,0.119,4,0.099,5,0.089,7,0.69,11,1.513,12,0.215,13,0.875,16,0.541,18,0.359,19,0.372,20,0.01,29,0.343,60,2.266,79,0.201,80,0.176,97,1.915,105,2.736,107,2.349,130,3.412,161,2.275,162,3.341,187,2.601,203,2.884,217,3.567,260,0.006,303,0.006,305,1.346,307,3.607,311,1.001,313,0.385,316,3.274,319,2.601,320,2.727,321,3.023,322,3.34,323,1.619,330,2.22,335,1.816,338,2.759,339,2.22,456,2.062,475,3.906,477,3.304,479,3.848,484,2.681,621,3.452,624,2.727,625,3.938,626,2.727,627,3.496,628,3.242,629,3.938,630,1.932,631,2.872,632,4.835,633,5.066,635,3.148,636,3.496,637,3.866,638,2.872,639,3.895,640,4.73,641,3.791,642,4.703,643,3.496,645,3.496,646,2.336,647,4.794,648,5.074,649,2.062,650,2.601,651,2.489,652,4.446,653,3.496,654,3.496,655,2.727,656,4.794,657,4.794,658,3.74,659,2.872,660,2.601,661,3.242,662,2.489,1731,3.835,2377,4.351]],["title/controllers/PresentationManagementController.html",[343,1.358,2378,3.272]],["body/controllers/PresentationManagementController.html",[3,0.1,4,0.083,5,0.075,7,0.577,11,2.004,12,0.18,15,1.822,16,0.842,18,0.558,19,0.392,20,0.01,24,1.997,29,0.388,33,0.506,51,2.412,52,3.534,60,2.094,79,0.1,80,0.081,86,1.509,89,2.519,93,0.946,94,2.06,97,1.765,98,1.725,105,2.412,106,1.725,107,1.433,109,1.141,110,1.154,136,1.641,147,2.065,148,1.758,192,1.281,194,3.222,196,2.428,204,3.298,205,3.298,241,2.675,248,1.433,254,3.472,260,0.005,271,3.522,290,2.581,303,0.005,310,1.758,311,1.558,313,0.598,316,2.887,317,1.85,330,1.354,340,1.785,343,1.126,345,1.318,347,1.154,351,1.669,443,2.929,484,3.325,487,3.873,502,1.785,507,4.227,518,1.558,519,3.391,521,2.281,522,4.227,523,3.921,531,4.003,539,3.921,544,2.494,588,1.997,621,3.361,641,2.833,722,1.921,731,2.196,737,2.924,755,3.298,779,3.391,922,3.715,987,2.412,1015,3.009,1060,2.402,1067,2.402,1075,3.472,1118,2.082,1135,4.227,1141,2.543,1142,2.543,1143,2.402,1145,2.543,1147,3.391,1148,3.676,1149,3.676,1372,2.402,1728,4.317,1782,5.447,1783,3.208,1785,3.208,1786,4.638,1787,3.694,1788,3.208,1793,3.208,1797,2.402,1799,3.873,1800,3.208,1801,3.208,1802,4.638,1803,2.924,1804,5.967,1805,3.208,1806,3.208,1807,4.965,1808,4.638,1809,3.676,1810,3.208,1816,3.208,1817,2.924,1818,3.208,1819,3.208,1820,3.208,1821,3.208,1822,3.208,1823,3.208,2264,2.924,2378,3.921,2379,3.208,2380,5.261,2381,5.447,2382,3.639,2383,3.639,2384,3.639,2385,3.639,2386,5.578,2387,3.639,2388,3.639,2389,3.639,2390,3.639,2391,3.639,2392,5.261,2393,3.208,2394,2.924,2395,3.639,2396,3.639,2397,3.639,2398,3.639,2399,3.639,2400,3.639,2401,3.639,2402,3.639,2403,3.639,2404,3.639,2405,3.639,2406,3.639,2407,3.639,2408,3.639,2409,3.639,2410,3.639,2411,3.639]],["title/classes/PresentationRequest.html",[80,0.097,2386,3.272]],["body/classes/PresentationRequest.html",[3,0.144,4,0.12,5,0.108,7,0.831,11,2.071,12,0.259,13,0.99,15,1.712,16,0.84,18,0.556,19,0.404,20,0.01,26,2.997,29,0.316,79,0.185,80,0.15,97,1.971,196,2.564,203,2.657,230,5.424,254,4.929,260,0.007,303,0.007,305,1.62,311,1.719,312,3.316,313,0.66,317,4.01,321,2.997,322,3.311,323,1.949,327,4.455,330,3.164,338,3.027,342,3.562,611,4.455,620,3.861,621,3.408,641,2.402,649,2.483,747,3.131,755,4.682,765,4.209,987,3.424,1797,4.929,1799,4.682,1807,4.209,1809,3.66,1935,5.424,2033,3.904,2050,4.618,2052,3.904,2055,4.618,2058,5.424,2060,4.618,2227,4.716,2386,5.031,2412,5.879,2413,6.75]],["title/interfaces/PresentationRequestOptions.html",[0,1.199,2256,3.272]],["body/interfaces/PresentationRequestOptions.html",[0,1.687,2,2.833,3,0.17,4,0.141,5,0.127,7,0.98,11,2.042,12,0.305,13,1.097,16,1.106,18,0.663,19,0.351,20,0.01,26,3.323,29,0.29,79,0.17,97,1.765,196,2.257,260,0.008,303,0.008,330,3.241,338,3.391,471,2.764,611,4.939,649,2.928,2227,5.229,2256,6.236,2412,4.604,2414,5.446,2415,6.013]],["title/modules/PresentationsModule.html",[360,1.324,2242,2.752]],["body/modules/PresentationsModule.html",[3,0.159,4,0.132,5,0.119,20,0.01,29,0.412,33,0.806,52,5.155,79,0.159,80,0.129,260,0.007,303,0.007,345,2.607,360,2.362,362,2.497,363,2.75,364,2.95,365,2.95,366,2.661,367,3.841,368,3.841,380,3.661,381,2.95,382,2.75,385,3.413,922,3.184,1060,3.83,1090,2.846,1474,3.83,1830,4.514,1852,4.753,1853,3.062,2242,5.556,2378,5.836,2393,5.115,2394,4.662,2416,5.115,2417,5.115,2418,5.115,2419,5.115,2420,5.995,2421,5.802,2422,7.201,2423,5.802,2424,5.802,2425,5.115,2426,5.802]],["title/injectables/PresentationsService.html",[30,0.697,52,2.511]],["body/injectables/PresentationsService.html",[3,0.06,4,0.05,5,0.045,7,1.061,10,3.64,11,0.9,12,0.108,13,0.52,15,2.229,16,0.798,18,0.714,19,0.341,20,0.01,21,1.716,22,0.692,29,0.348,30,0.563,32,3.64,33,0.303,52,2.954,71,2.448,78,4.255,79,0.06,80,0.048,81,1.034,86,1.984,91,2.224,93,1.342,94,2.348,95,4.023,97,1.887,98,1.034,101,3.409,102,2.644,103,2.479,104,2.029,105,3.067,109,1.477,110,1.516,119,2.252,133,1.043,136,1.599,137,1.803,138,1.804,142,1.304,147,2.035,148,1.726,150,3.276,152,2.318,165,3.237,191,2.394,192,1.346,196,1.07,201,3.409,226,3.53,227,1.753,236,1.368,239,1.668,241,3.4,251,1.397,258,2.479,260,0.004,271,2.533,303,0.004,310,1.498,313,0.656,315,1.575,347,0.778,433,1.93,456,1.682,512,1.626,518,1.636,534,1.248,544,2.448,568,1.109,575,2.704,608,3.609,613,2.851,619,2.479,621,3.197,668,3.952,738,5.368,769,0.749,800,1.197,803,2.056,833,1.74,834,4.023,849,1.872,872,3.144,893,1.872,922,4.071,987,2.792,1004,1.197,1007,2.621,1009,1.947,1036,3.889,1037,4.023,1060,1.44,1067,3.409,1070,3.64,1075,2.342,1076,2.342,1077,5.896,1078,1.44,1082,3.609,1083,2.224,1088,2.342,1089,1.368,1090,1.07,1113,1.947,1168,2.342,1186,3.603,1199,3.603,1201,1.626,1202,1.626,1203,6.096,1204,1.626,1215,1.923,1223,3.127,1264,5.421,1267,5.529,1321,1.626,1322,1.626,1323,1.07,1358,3.127,1589,2.224,1601,1.368,1690,1.524,1853,1.151,1919,1.626,1950,4.832,2006,2.479,2276,1.753,2381,3.127,2394,1.753,2427,1.923,2428,3.548,2429,6.688,2430,6.418,2431,4.483,2432,5.164,2433,3.548,2434,3.548,2435,4.483,2436,3.548,2437,1.626,2438,4.691,2439,5.164,2440,3.548,2441,3.127,2442,3.127,2443,3.548,2444,3.548,2445,2.182,2446,3.548,2447,3.548,2448,2.182,2449,2.182,2450,3.548,2451,2.182,2452,2.182,2453,2.182,2454,5.682,2455,5.164,2456,2.182,2457,3.548,2458,4.483,2459,3.548,2460,2.182,2461,3.548,2462,3.548,2463,2.182,2464,4.483,2465,2.224,2466,2.182,2467,3.548,2468,3.548,2469,2.182,2470,3.548,2471,2.182,2472,3.127,2473,1.626,2474,1.44,2475,2.182,2476,2.182,2477,2.182,2478,2.182,2479,3.548,2480,2.182,2481,2.182,2482,2.182,2483,2.182,2484,1.753,2485,2.182,2486,2.182,2487,2.182,2488,2.182,2489,2.182,2490,2.182,2491,2.182,2492,2.182,2493,2.182,2494,2.182,2495,2.182,2496,2.182,2497,2.182,2498,2.182,2499,2.182,2500,3.548,2501,2.182,2502,2.182,2503,2.182,2504,2.182,2505,2.182,2506,2.182,2507,2.182,2508,4.483,2509,2.182,2510,2.182,2511,2.182,2512,2.182,2513,2.851,2514,3.548,2515,1.923,2516,2.182]],["title/classes/RegistrarConfig.html",[58,3.068,80,0.097]],["body/classes/RegistrarConfig.html",[3,0.174,4,0.144,5,0.13,7,1.004,9,4.344,10,4.54,12,0.313,13,1.114,15,2.247,16,1.049,18,0.695,19,0.356,20,0.009,58,5.685,59,4.423,75,6.102,79,0.174,80,0.168,97,1.493,133,1.862,186,5.66,260,0.008,303,0.008,305,1.958,313,0.671,1101,3.968,2517,7.172,2518,5.581,2519,8.136,2520,6.33,2521,6.33]],["title/modules/RegistrarModule.html",[360,1.324,377,2.752]],["body/modules/RegistrarModule.html",[3,0.148,4,0.123,5,0.111,7,0.857,20,0.01,29,0.386,33,0.75,59,5.294,69,5.643,70,4.314,71,3.262,79,0.189,80,0.12,104,3.937,110,1.184,115,4.024,117,4.024,133,2.024,260,0.007,303,0.007,335,2.254,360,2.406,362,3.261,363,2.559,364,2.745,365,2.745,366,2.476,367,3.716,368,3.716,372,4.446,377,5.62,380,3.499,381,2.745,382,2.559,385,3.781,387,4.114,388,3.384,395,4.024,428,4.024,1015,3.088,1062,3.563,1484,5.646,1743,5.53,2003,3.772,2242,5.281,2522,4.759,2523,4.759,2524,5.399,2525,4.759,2526,4.338,2527,5.399,2528,5.399,2529,4.759,2530,4.338,2531,4.024,2532,4.759,2533,4.759,2534,6.678,2535,6.678]],["title/injectables/RegistrarService.html",[30,0.697,69,2.752]],["body/injectables/RegistrarService.html",[0,0.493,1,2.262,3,0.05,4,0.041,5,0.114,6,1.451,7,0.623,8,1.592,9,4.734,10,4.947,11,0.458,12,0.089,13,0.445,14,1.451,15,1.777,16,0.801,17,4.12,18,0.69,19,0.321,20,0.01,21,0.691,22,0.573,23,2.121,24,0.991,25,1.08,26,0.802,27,1.736,28,1.451,29,0.335,30,0.481,31,3.88,32,3.32,33,0.251,34,1.993,35,0.531,36,5.203,37,1.451,38,3.796,39,1.592,40,2.675,41,2.675,42,2.675,43,2.675,44,2.675,45,2.675,46,1.451,47,2.548,48,0.856,49,3.035,50,1.592,51,0.828,52,3.808,53,1.592,54,1.033,55,1.08,56,0.991,57,1.262,58,5.085,59,5.852,60,2.441,61,1.8,62,1.262,63,1.192,64,0.991,65,1.033,66,0.991,67,1.192,68,1.033,69,3.481,70,1.902,71,1.439,72,2.675,73,2.262,74,5.203,75,5.848,76,2.675,77,4.054,78,4.782,79,0.05,80,0.04,81,0.856,82,2.631,83,4.054,84,1.736,85,2.003,86,2.312,87,1.902,88,1.592,89,2.305,90,2.675,91,1.902,92,3.46,93,1.195,94,1.693,95,3.481,96,2.262,97,1.52,98,1.439,99,2.439,100,2.262,101,2.003,102,2.262,103,2.121,104,1.736,105,1.392,106,0.856,107,1.545,108,2.262,109,1.402,110,1.644,111,1.592,112,1.592,113,1.736,114,2.121,115,1.346,116,2.121,117,1.346,118,1.592,119,2.471,120,0.886,121,1.592,122,1.592,123,1.592,124,1.592,125,1.592,126,5.203,127,1.592,128,1.592,129,1.592,130,0.777,131,2.675,132,2.262,133,1.353,134,3.427,135,2.883,136,1.547,137,1.459,138,1.543,139,1.902,140,3.427,141,2.675,142,2.749,143,4.895,144,1.902,145,2.675,146,2.675,147,2.615,148,2.225,149,2.675,150,1.267,151,2.675,152,2.294,153,2.262,154,2.003,155,2.675,156,4.743,157,1.592,158,1.592,159,2.675,160,1.489,161,1.014,162,1.195,163,2.675,164,2.003,165,3.214,166,4.054,167,1.592,168,1.592,169,2.003,170,1.592,171,1.592,172,1.033,173,1.592,174,1.451,175,1.451,176,1.192,177,1.451,178,1.451,179,1.451,180,1.592,181,1.592,182,1.592,183,1.592,184,1.08,185,2.675,186,5.221,187,3.32,188,4.895,189,3.176,190,2.675,191,1.459,192,1.453,193,1.346,194,1.639,195,2.262,196,0.545,197,1.592,198,1.592,199,3.46,200,2.675,201,2.003,202,3.427,203,1.195,204,3.481,205,3.481,206,2.675,207,1.346,208,1.592,209,1.592,210,1.592,211,1.592,212,3.852,213,4.802,214,2.43,215,3.154,216,2.675,217,2.346,218,3.46,219,2.675,220,2.524,221,4.52,222,3.154,223,4.895,224,2.439,225,1.592,226,0.953,227,1.451,228,1.592,229,1.592,230,3.695,231,3.46,232,2.121,233,1.592,234,1.451,235,1.592,236,1.132,237,1.262,238,1.592,239,1.46,240,2.675,241,0.918,242,2.003,243,1.592,244,1.592,245,3.46,246,3.46,247,1.602,248,1.545,249,3.427,250,1.592,251,1.195,252,1.592,253,1.451,254,3.035,255,1.592,256,1.592,257,0.991,258,1.262,259,1.192,260,0.004,261,1.451,262,1.592,263,1.592,264,2.245,265,1.592,266,1.592,267,1.592,268,1.08,269,1.592,270,1.451,271,0.886,272,1.592,273,1.592,274,2.439,275,1.451,276,1.592,277,1.132,278,1.451,279,1.592,280,1.346,281,1.592,282,1.592,283,2.121,284,2.675,285,2.675,286,1.666,287,2.675,288,1.592,289,1.08,290,0.886,291,1.346,292,2.675,293,2.675,294,1.592,295,1.814,296,1.262,297,1.592,298,1.08,299,1.08,300,2.439,301,2.675,302,1.592,303,0.003,311,0.416,313,0.663,347,0.665,518,1.483,709,0.953,769,0.62,778,0.953,1004,1.666,1282,2.262,2536,3.035,2537,3.035,2538,3.035,2539,3.035,2540,3.035,2541,3.035,2542,1.806,2543,1.806,2544,1.806,2545,1.806,2546,1.806,2547,1.806,2548,1.806,2549,1.806,2550,1.806,2551,1.806,2552,1.806,2553,1.806,2554,1.806,2555,1.806,2556,1.806,2557,1.806]],["title/classes/RegistrationCertificateRequest.html",[49,2.898,80,0.097]],["body/classes/RegistrationCertificateRequest.html",[3,0.165,4,0.137,5,0.123,7,0.952,10,4.953,11,1.865,12,0.297,13,1.078,15,2.016,16,0.914,18,0.606,19,0.345,20,0.01,26,3.264,29,0.345,49,5.468,78,5.789,79,0.165,80,0.163,104,4.205,194,3.549,260,0.008,303,0.008,305,1.856,311,1.692,312,3.529,313,0.65,321,3.529,323,2.233,611,4.852,620,4.205,690,5.137,747,3.587,759,5.29,1023,5.907,2558,7.007,2559,7.948,2560,6,2561,6]],["title/modules/ResolverModule.html",[360,1.324,2420,3.068]],["body/modules/ResolverModule.html",[3,0.173,4,0.144,5,0.13,20,0.009,29,0.381,33,0.878,79,0.173,80,0.14,260,0.008,303,0.008,360,2.452,362,2.719,363,2.995,364,3.212,365,3.212,366,2.897,367,3.988,368,3.988,380,3.857,381,3.212,382,2.995,385,2.995,1852,5.007,1853,3.334,2420,6.187,2438,6.011,2562,5.57,2563,5.57,2564,5.57,2565,6.318,2566,6.318]],["title/injectables/ResolverService.html",[30,0.697,2438,2.898]],["body/injectables/ResolverService.html",[3,0.13,4,0.108,5,0.097,7,0.75,10,2.826,12,0.234,16,0.785,19,0.296,20,0.01,21,2.9,22,2.578,24,2.594,29,0.381,30,1.001,33,0.657,79,0.13,80,0.105,93,1.229,94,1.81,109,1.312,110,1.662,119,2.571,133,1.856,136,1.286,142,3.772,147,2.374,148,1.579,191,2.002,192,1.195,196,1.425,214,2.991,239,2.82,242,4.165,248,1.861,260,0.007,261,3.798,303,0.007,313,0.558,315,3.683,347,1.384,483,3.33,518,1.452,564,3.522,575,2.802,718,3.119,721,2.963,769,1.622,800,2.594,803,3.864,824,3.109,849,3.33,872,2.557,1030,3.463,1037,2.963,1152,2.099,1236,4.409,1323,2.319,1334,3.463,1411,4.167,1589,4.751,1626,4.167,1824,3.119,1853,2.494,1950,5.677,2437,3.522,2438,4.165,2442,5.562,2473,4.703,2474,3.119,2567,4.167,2568,6.31,2569,6.31,2570,4.726,2571,6.31,2572,4.726,2573,6.31,2574,6.31,2575,5.562,2576,6.31,2577,4.726,2578,4.726,2579,4.167,2580,4.726,2581,4.726,2582,4.726,2583,4.726,2584,4.726,2585,4.726,2586,4.726,2587,4.726,2588,4.726,2589,4.726,2590,4.726,2591,4.726,2592,4.726,2593,6.31,2594,4.167,2595,4.726,2596,4.726,2597,4.167,2598,4.726,2599,4.726,2600,4.726,2601,4.726,2602,4.726,2603,4.726]],["title/classes/SchemaResponse.html",[80,0.097,1048,3.068]],["body/classes/SchemaResponse.html",[3,0.17,4,0.142,5,0.128,12,0.307,13,1.259,18,0.691,19,0.414,20,0.009,79,0.17,80,0.138,260,0.008,303,0.008,305,1.922,310,2.509,313,0.741,335,3.369,433,3.232,610,3.554,1015,4.616,1017,4.121,1048,5.247,1058,6.397,1118,4.295,1159,5.998,2041,4.992,2604,7.509,2605,7.509,2606,7.509,2607,5.477,2608,5.477,2609,5.477]],["title/entities/Session.html",[471,1.393,1007,1.89]],["body/entities/Session.html",[3,0.087,4,0.073,5,0.065,7,0.505,11,2.109,12,0.157,13,0.93,15,1.876,16,1.074,18,0.685,19,0.398,20,0.01,25,3.416,26,2.537,29,0.334,51,2.185,71,1.508,79,0.131,80,0.071,97,1.496,137,2.739,144,3.581,150,1.99,152,1.599,161,2.471,169,4.187,196,1.437,260,0.005,303,0.005,311,1.913,313,0.735,324,3.306,330,2.752,336,3.33,338,2.754,340,3.112,341,4.485,355,3.552,356,2.849,433,2.731,456,1.508,471,2.613,484,2.249,553,2.987,575,2.116,620,4.08,621,2.978,623,3.552,631,3.145,641,2.909,646,2.758,649,1.508,690,4.984,701,3.416,708,4.433,735,3.416,741,5.037,858,3.992,872,1.29,915,4.519,916,3.416,972,1.994,987,2.909,1007,2.924,1009,1.746,1018,5.808,1019,6.434,1036,1.561,1037,1.994,1038,5.533,1053,1.902,1054,3.145,1057,1.561,1078,4.187,1101,1.994,1118,3.629,1124,4.173,1168,3.145,1188,1.994,1204,2.371,1424,4.201,1516,3.552,1657,3.552,1690,3.992,1692,4.591,1695,2.371,1696,3.829,1733,3.552,1738,5.064,1784,3.581,2030,3.829,2144,4.591,2227,3.33,2264,2.557,2280,5.037,2610,2.557,2611,3.182,2612,3.182,2613,3.182,2614,3.182,2615,5.037,2616,3.182,2617,4.765,2618,3.182,2619,3.182,2620,3.182,2621,3.182,2622,5.713,2623,3.182,2624,3.182,2625,3.182,2626,4.201,2627,4.765,2628,3.182,2629,4.765,2630,3.182,2631,4.765,2632,3.182,2633,3.182,2634,2.1,2635,2.557]],["title/controllers/SessionController.html",[343,1.358,2636,3.272]],["body/controllers/SessionController.html",[3,0.136,4,0.113,5,0.102,7,0.789,12,0.246,15,2.037,16,0.812,18,0.6,19,0.306,20,0.01,26,2.898,29,0.399,33,0.691,79,0.136,80,0.11,86,1.872,89,2.428,93,1.293,94,2.089,109,1.345,136,1.576,161,2.181,191,2.454,192,1.235,194,2.076,260,0.007,303,0.007,310,2.434,311,1.677,313,0.644,343,1.538,345,1.8,347,1.431,351,2.28,356,3.901,471,2.76,484,2.868,502,2.439,518,1.502,519,2.729,521,3.117,531,3.665,544,3.093,588,2.729,635,3.444,726,3.573,731,2.724,1076,4.307,1082,5.403,1141,3.475,1142,3.475,1143,3.282,1145,3.475,1147,2.729,1148,3.475,1149,3.475,1181,4.167,1205,2.845,1206,3.706,1728,3.475,2465,4.09,2634,4.307,2636,4.863,2637,4.384,2638,7.733,2639,6.526,2640,6.526,2641,4.973,2642,4.973,2643,6.526,2644,4.973,2645,4.973,2646,5.104,2647,6.526,2648,4.973,2649,4.384,2650,3.996,2651,5.753,2652,3.996,2653,3.996,2654,4.973,2655,4.973,2656,4.973,2657,4.973,2658,4.973,2659,4.973,2660,4.973]],["title/interfaces/SessionLogContext.html",[0,1.199,2115,2.752]],["body/interfaces/SessionLogContext.html",[0,1.498,2,2.516,3,0.151,4,0.125,5,0.113,7,0.871,12,0.271,13,1.02,15,1.764,16,1.03,18,0.733,19,0.403,20,0.01,22,2.207,25,4.157,26,3.564,73,4.09,79,0.151,150,3.187,152,2.246,260,0.007,303,0.007,313,0.485,356,4.157,469,4.591,471,2.759,475,3.677,477,3.564,479,3.925,1022,6.13,1655,5.182,1738,5.182,1870,4.785,1978,3.67,2008,3.139,2115,4.359,2161,5.608,2162,6.405,2415,5.588,2661,4.859,2662,4.838,2663,5.488,2664,5.488,2665,6.954,2666,6.954,2667,6.954,2668,6.954]],["title/injectables/SessionLoggerInterceptor.html",[30,0.697,1832,2.625]],["body/injectables/SessionLoggerInterceptor.html",[3,0.092,4,0.077,5,0.069,7,1.035,11,2.09,12,0.166,13,0.728,15,1.26,16,0.734,19,0.341,20,0.01,22,1.068,27,2.842,29,0.353,30,0.788,33,0.468,34,2.483,35,0.989,79,0.092,80,0.075,81,1.595,86,2.264,89,1.252,91,3.114,93,1.695,94,2.088,95,4.36,96,4.86,97,1.172,106,1.595,108,3.702,109,1.204,110,1.841,136,1.329,138,1.71,140,4.401,152,1.39,162,3.043,176,4.304,192,1.235,194,3.44,196,1.781,226,2.621,239,1.252,251,2.325,259,2.221,260,0.005,290,2.437,303,0.005,313,0.576,336,2.351,339,2.876,347,1.089,356,3.898,418,2.351,419,2.507,438,2.351,469,3.979,471,2.547,483,1.775,484,1.325,485,4.379,487,2.109,489,2.966,514,1.65,518,1.359,545,2.703,557,2.507,566,2.011,731,3.039,769,1.154,972,3.702,1030,3.818,1501,2.966,1661,3.702,1832,3.898,1864,2.966,1865,6.958,1868,4.86,1870,4.563,1871,2.703,1877,2.966,1956,4.86,1978,3.671,2008,3.73,2016,2.351,2019,3.702,2075,2.703,2160,4.86,2161,4.861,2253,3.992,2254,2.507,2474,2.221,2513,4.745,2661,4.861,2669,2.966,2670,4.967,2671,4.967,2672,4.967,2673,4.967,2674,6.418,2675,4.967,2676,4.967,2677,6.521,2678,3.364,2679,4.967,2680,4.967,2681,4.967,2682,4.967,2683,4.967,2684,6.956,2685,4.967,2686,4.967,2687,3.364,2688,4.967,2689,5.905,2690,4.967,2691,6.521,2692,4.967,2693,3.364,2694,3.364,2695,3.364,2696,3.992,2697,3.364,2698,3.364,2699,2.966,2700,3.364,2701,3.364,2702,3.364,2703,3.364,2704,3.364,2705,3.364,2706,3.364,2707,3.364,2708,3.364,2709,3.364,2710,3.364,2711,4.379,2712,3.364,2713,3.364,2714,3.364,2715,3.364,2716,3.364,2717,5.905,2718,5.905,2719,3.364,2720,3.364,2721,6.521,2722,3.364,2723,3.364,2724,3.364,2725,3.364,2726,2.966,2727,2.966,2728,3.364,2729,3.364,2730,2.966,2731,3.364,2732,2.966,2733,2.966,2734,2.351,2735,2.966,2736,2.966,2737,3.364,2738,2.966,2739,2.966,2740,3.364,2741,3.364,2742,3.364,2743,3.364,2744,4.967,2745,3.364]],["title/injectables/SessionLoggerService.html",[30,0.697,1833,2.511]],["body/injectables/SessionLoggerService.html",[3,0.074,4,0.062,5,0.055,7,0.667,11,1.31,12,0.133,13,0.617,16,0.961,18,0.646,19,0.373,20,0.01,27,3.994,29,0.273,30,0.667,33,0.375,34,2.345,35,0.794,68,3.333,79,0.074,80,0.06,86,2.071,89,1.921,93,1.515,94,1.206,95,2.635,96,3.133,97,0.992,108,3.133,109,1.426,110,1.132,133,1.237,136,1.574,138,1.373,140,3.848,150,1.127,162,2.294,189,1.545,192,1.505,251,3.299,260,0.004,303,0.004,313,0.703,324,2.433,347,0.922,418,1.887,419,2.013,438,1.887,471,2.689,475,3.293,518,1.778,621,1.755,630,1.867,638,2.775,646,2.294,719,4.551,731,2.636,739,3.133,769,0.927,791,6.093,972,4.526,1004,4.162,1124,3.465,1248,4.682,1657,4.343,1661,4.343,1833,3.333,1870,5.441,1956,3.133,1978,3.075,2003,2.938,2008,3.825,2016,1.887,2019,6.282,2030,5.074,2115,5.502,2162,5.203,2214,2.381,2254,3.133,2267,2.381,2615,5.566,2661,5.621,2674,6.365,2711,6.365,2727,2.381,2730,3.706,2732,3.706,2733,7.229,2734,2.938,2735,3.706,2746,2.381,2747,4.204,2748,4.204,2749,4.204,2750,5.163,2751,5.163,2752,4.204,2753,5.163,2754,4.204,2755,5.163,2756,5.163,2757,5.163,2758,4.204,2759,5.827,2760,2.7,2761,4.204,2762,4.204,2763,8.928,2764,2.7,2765,2.7,2766,6.314,2767,2.7,2768,2.7,2769,2.7,2770,4.204,2771,2.7,2772,5.163,2773,2.7,2774,2.7,2775,4.204,2776,2.7,2777,2.7,2778,2.7,2779,2.7,2780,2.7,2781,2.7,2782,2.7,2783,4.204,2784,2.7,2785,2.7,2786,2.7,2787,7.583,2788,7.583,2789,2.013,2790,7.22,2791,2.7,2792,2.7,2793,2.7,2794,2.7,2795,2.7,2796,2.7,2797,2.7,2798,2.7,2799,2.7,2800,2.7,2801,4.204]],["title/modules/SessionModule.html",[360,1.324,378,2.625]],["body/modules/SessionModule.html",[3,0.151,4,0.125,5,0.113,7,0.872,20,0.01,29,0.403,33,0.764,70,4.363,71,3.621,79,0.191,80,0.122,110,1.205,260,0.007,303,0.007,345,2.52,360,2.422,362,2.366,363,2.605,364,2.795,365,2.795,366,2.52,367,3.748,368,3.748,378,5.321,380,3.539,381,2.795,382,2.605,385,3.299,387,4.161,406,4.097,433,2.996,471,1.744,484,3.008,582,3.841,583,4.417,726,4.389,1090,2.696,1205,3.144,1474,3.628,1831,5.587,1841,4.846,2308,5.693,2634,5.042,2636,5.693,2649,4.846,2650,4.417,2651,4.846,2802,4.846,2803,4.846,2804,4.846,2805,5.497,2806,4.417,2807,5.497,2808,4.417,2809,4.846,2810,4.417,2811,4.846,2812,4.846,2813,5.497]],["title/injectables/SessionService.html",[30,0.697,726,2.154]],["body/injectables/SessionService.html",[3,0.108,4,0.09,5,0.081,12,0.195,15,1.415,16,0.922,18,0.676,19,0.347,20,0.01,29,0.371,30,0.885,31,5.374,33,0.549,34,2.445,35,1.162,60,1.725,79,0.108,80,0.088,81,1.872,86,1.855,93,1.45,94,2.126,98,3.512,109,1.46,110,1.54,119,1.816,136,1.746,144,3.496,152,1.966,184,3.334,191,1.77,192,1.403,202,4.157,212,3.865,260,0.006,290,3.446,303,0.006,313,0.714,347,1.223,353,4.909,366,2.557,409,3.173,433,2.4,471,2.67,518,1.706,612,4.645,617,2.943,635,2.943,658,3.496,726,2.736,731,2.329,752,4.637,769,1.355,846,4.157,1004,2.167,1057,1.937,1070,4.2,1089,2.476,1090,1.937,1360,4.482,1367,3.061,1690,2.76,1935,4.482,2465,3.496,2634,4.637,2650,3.173,2808,4.482,2810,4.482,2814,3.482,2815,7.025,2816,7.025,2817,3.949,2818,7.905,2819,3.949,2820,5.577,2821,3.949,2822,7.025,2823,3.949,2824,5.577,2825,7.025,2826,3.949,2827,5.577,2828,3.949,2829,3.949,2830,5.577,2831,7.025,2832,3.949,2833,5.577,2834,3.949,2835,5.577,2836,7.025,2837,5.577,2838,5.577,2839,4.917,2840,3.949,2841,5.577,2842,5.577,2843,3.949,2844,3.949,2845,3.949,2846,3.949,2847,5.577,2848,5.577,2849,3.949,2850,5.577,2851,3.949,2852,3.949,2853,3.949,2854,3.949,2855,3.949,2856,3.949,2857,3.949,2858,5.577,2859,3.949,2860,3.949,2861,3.949,2862,3.949]],["title/controllers/StatusListController.html",[343,1.358,2863,3.272]],["body/controllers/StatusListController.html",[3,0.166,4,0.138,5,0.124,12,0.299,16,0.752,18,0.657,19,0.374,20,0.01,29,0.374,33,0.84,79,0.166,80,0.134,94,1.734,109,1.116,136,1.505,152,2.066,192,1.144,260,0.008,303,0.008,311,1.391,313,0.534,315,2.684,343,1.869,345,2.188,347,1.619,351,2.771,502,2.965,518,1.391,521,3.789,544,3.779,1113,4.376,1147,4.376,1152,2.684,1181,4.561,1205,4.224,1206,4.504,2863,5.503,2864,4.629,2865,5.328,2866,6.044,2867,6.51,2868,4.857,2869,7.384,2870,6.044,2871,7.384,2872,6.044,2873,6.044,2874,6.044,2875,5.328,2876,6.044,2877,6.044]],["title/interfaces/StatusListFile.html",[0,1.199,2878,3.272]],["body/interfaces/StatusListFile.html",[0,0.87,2,1.462,3,0.087,4,0.073,5,0.167,12,0.283,13,0.7,15,0.809,16,0.594,18,0.679,19,0.298,20,0.01,29,0.39,30,0.757,32,3.419,33,0.443,34,1.769,35,0.938,47,2.189,48,1.511,54,1.823,55,1.906,56,2.619,61,3.273,63,2.104,64,1.749,65,1.823,66,1.749,67,2.104,68,1.823,79,0.087,80,0.071,81,1.511,86,2.183,93,0.829,94,1.641,97,1.125,109,1.256,110,1.893,119,2.409,133,0.938,136,0.65,137,1.011,147,2.273,148,2.273,152,2.28,153,2.376,154,2.104,164,2.104,172,4.352,176,2.104,184,3.419,191,1.011,205,1.998,220,1.749,239,1.776,241,1.621,248,1.255,260,0.005,268,2.853,286,3.139,289,1.906,290,3.115,291,4.263,298,1.906,299,1.906,303,0.005,310,2.273,315,1.415,443,1.511,456,1.511,469,2.73,471,2.158,544,4.053,575,2.119,576,5.068,646,1.637,800,2.619,821,3.272,833,1.564,849,1.682,872,2.893,885,1.564,887,1.998,944,2.104,987,1.462,1032,2.561,1036,2.341,1057,1.564,1070,2.853,1083,1.998,1088,3.15,1089,1.998,1090,1.564,1113,4.601,1126,5.735,1147,2.619,1181,1.823,1188,3.585,1205,1.823,1207,2.376,1216,3.557,1230,3.835,1231,2.376,1236,2.227,1367,1.749,1406,2.561,1536,2.227,1545,2.561,1576,2.561,1589,2.991,1601,1.998,1605,2.227,2307,2.561,2311,2.561,2465,2.991,2484,2.561,2635,2.561,2646,3.15,2653,2.561,2734,5.536,2864,1.998,2868,2.561,2878,5.068,2879,2.561,2880,5.995,2881,5.598,2882,4.207,2883,2.81,2884,2.81,2885,4.207,2886,2.561,2887,2.104,2888,2.561,2889,2.561,2890,2.81,2891,2.81,2892,2.81,2893,2.81,2894,2.81,2895,2.81,2896,4.207,2897,5.598,2898,4.207,2899,2.81,2900,2.81,2901,5.042,2902,4.207,2903,2.81,2904,2.81,2905,2.81,2906,2.81,2907,2.81,2908,2.81,2909,2.81,2910,2.81,2911,2.81,2912,4.207,2913,2.81,2914,4.207,2915,2.81,2916,2.81,2917,4.207,2918,4.207,2919,2.81,2920,2.81,2921,2.81,2922,2.81,2923,5.042,2924,2.81,2925,2.81,2926,2.81,2927,2.81,2928,2.81,2929,2.81,2930,2.561,2931,5.042,2932,2.81,2933,2.81,2934,2.81,2935,5.995,2936,2.81,2937,2.81,2938,4.207,2939,2.81,2940,2.81,2941,2.81,2942,2.81,2943,2.81,2944,2.81,2945,4.207,2946,4.207,2947,2.81,2948,2.81,2949,2.81]],["title/modules/StatusListModule.html",[360,1.324,1831,2.898]],["body/modules/StatusListModule.html",[3,0.163,4,0.135,5,0.122,20,0.01,29,0.404,33,0.825,79,0.163,80,0.132,260,0.008,303,0.008,345,2.644,360,2.386,362,2.555,363,2.814,364,3.018,365,3.018,366,2.722,367,3.881,368,3.881,372,4.553,380,3.713,381,3.018,382,2.814,385,3.462,388,3.721,544,3.462,1090,2.912,1181,5.17,1205,3.396,1206,4.424,1474,3.918,1831,5.872,2863,5.896,2864,3.721,2887,3.918,2888,4.77,2889,4.77,2950,5.233,2951,5.936,2952,5.233,2953,5.233,2954,5.936,2955,5.936,2956,5.936]],["title/injectables/StatusListService.html",[30,0.697,1181,2.511]],["body/injectables/StatusListService.html",[0,0.691,3,0.069,4,0.058,5,0.166,12,0.245,13,0.586,15,1.014,16,0.926,18,0.718,19,0.356,20,0.01,29,0.372,30,0.634,32,3.891,33,0.352,34,2.013,35,0.745,47,2.608,48,1.2,54,1.449,55,1.514,56,2.194,61,2.985,63,1.671,64,1.39,65,1.449,66,1.39,67,1.671,68,1.449,79,0.069,80,0.056,81,1.2,86,2.362,93,1.039,94,1.421,97,1.168,109,1.131,110,1.829,119,2.367,133,1.176,136,1.547,137,1.269,147,2.651,148,2.047,152,2.372,153,2.98,154,2.639,164,2.639,172,4.041,176,2.639,184,2.961,191,1.269,192,1.409,205,2.506,220,1.39,239,1.488,241,1.288,248,0.997,260,0.004,268,2.39,286,2.719,289,2.39,290,3.193,291,3.692,298,1.514,299,1.514,303,0.004,310,2.488,311,0.583,313,0.682,315,1.124,347,0.877,433,1.09,443,1.895,456,1.2,469,2.287,471,2.307,487,1.587,518,1.714,544,4.082,575,1.775,576,4.564,646,1.7,769,0.869,778,1.336,800,2.194,821,2.833,833,1.242,849,1.336,872,2.008,885,1.242,887,1.587,944,1.671,987,1.161,1004,2.194,1032,2.035,1036,1.961,1057,1.242,1070,3.363,1083,1.587,1088,3.713,1089,1.587,1090,1.242,1113,4.63,1126,3.98,1147,2.194,1181,2.287,1188,3.839,1205,4.481,1207,1.887,1216,2.98,1230,3.213,1231,1.887,1236,1.77,1282,2.98,1367,1.39,1406,2.035,1530,2.794,1536,2.794,1545,2.035,1576,3.213,1589,2.506,1601,1.587,1605,2.794,2307,2.035,2311,2.035,2465,3.526,2484,3.213,2635,2.035,2646,3.713,2653,2.035,2734,5.08,2864,4.91,2867,3.524,2868,3.213,2878,5.079,2879,2.035,2880,3.524,2881,3.524,2882,3.524,2883,2.233,2884,2.233,2885,3.524,2886,2.035,2887,1.671,2888,2.035,2889,2.035,2890,2.233,2891,4.367,2892,3.524,2893,2.233,2894,4.367,2895,3.524,2896,4.959,2897,5.738,2898,4.367,2899,3.524,2900,3.524,2901,4.367,2902,3.524,2903,2.233,2904,2.233,2905,2.233,2906,2.233,2907,2.233,2908,2.233,2909,2.233,2910,2.233,2911,2.233,2912,3.524,2913,3.524,2914,3.524,2915,2.233,2916,2.233,2917,3.524,2918,3.524,2919,2.233,2920,2.233,2921,2.233,2922,2.233,2923,4.367,2924,2.233,2925,3.524,2926,2.233,2927,3.524,2928,2.233,2929,2.233,2930,3.213,2931,5.399,2932,4.367,2933,2.233,2934,2.233,2935,5.399,2936,2.233,2937,2.233,2938,3.524,2939,2.233,2940,2.233,2941,3.524,2942,2.233,2943,3.524,2944,2.233,2945,3.524,2946,3.524,2947,2.233,2948,2.233,2949,2.233,2957,3.998,2958,3.998,2959,3.998,2960,3.998,2961,3.998,2962,3.998,2963,2.532,2964,2.532,2965,2.532,2966,2.532,2967,2.532,2968,2.532,2969,2.532,2970,2.532,2971,2.532,2972,2.532,2973,2.532]],["title/entities/StatusMapping.html",[1007,1.89,2887,2.898]],["body/entities/StatusMapping.html",[3,0.158,4,0.132,5,0.119,12,0.404,13,1.053,18,0.706,19,0.412,20,0.01,29,0.271,79,0.158,80,0.128,137,2.787,172,4.106,260,0.007,303,0.007,311,1.881,313,0.722,469,4.469,964,5.796,1007,3.089,1009,3.168,1054,5.548,1057,2.832,1113,4.287,1188,4.897,1695,6.091,2864,5.269,2887,4.738,2974,7.411,2975,5.089,2976,8.569,2977,5.772,2978,7.178,2979,5.772,2980,5.772,2981,5.772]],["title/classes/StatusUpdateDto.html",[80,0.097,2646,2.898]],["body/classes/StatusUpdateDto.html",[3,0.156,4,0.13,5,0.117,12,0.28,13,1.041,15,2.061,16,1.01,17,6.528,18,0.669,19,0.363,20,0.01,29,0.266,79,0.156,80,0.158,97,1.675,161,2.373,165,4.452,172,4.062,260,0.007,268,4.245,303,0.007,305,1.755,311,1.784,312,3.607,313,0.685,320,3.557,322,3.484,323,2.111,342,3.748,469,4.434,471,2.578,484,2.796,544,3.965,646,2.787,1188,4.859,1367,4.458,2646,4.687,2652,6.528,2864,5.092,2982,5.002,2983,5.674,2984,5.674,2985,5.674,2986,5.674,2987,5.674,2988,7.102,2989,5.674]],["title/interfaces/TokenPayload.html",[0,1.199,531,2.081]],["body/interfaces/TokenPayload.html",[0,1.709,2,2.87,3,0.172,4,0.143,5,0.129,7,0.993,9,3.58,11,1.913,12,0.309,13,1.106,18,0.667,19,0.293,20,0.01,29,0.293,33,0.87,38,2.967,79,0.207,89,3.128,98,3.575,109,1.156,110,1.654,161,2.092,226,3.303,257,3.435,260,0.008,303,0.008,484,2.97,531,3.838,541,4.131,575,2.779,576,6.264,709,3.303,1118,3.58,1868,5.621,2990,5.029,2991,6.649,2992,5.518,2993,5.518,2994,5.518]],["title/classes/TokenResponse.html",[80,0.097,510,3.272]],["body/classes/TokenResponse.html",[3,0.181,4,0.151,5,0.136,12,0.326,13,1.142,18,0.642,19,0.365,20,0.009,79,0.181,80,0.147,172,4.456,260,0.008,303,0.008,305,2.043,313,0.732,325,4.616,510,5.805,545,6.656,547,7.303,548,6.174,610,3.779,2607,5.823,2608,5.823,2609,5.823,2995,7.542]],["title/classes/VCT.html",[80,0.097,1016,2.752]],["body/classes/VCT.html",[3,0.148,4,0.123,5,0.111,7,1.201,12,0.266,13,1.008,16,1.11,18,0.744,19,0.406,20,0.01,29,0.322,79,0.189,80,0.168,192,1.433,260,0.007,303,0.007,305,1.667,311,1.97,312,4.022,313,0.756,321,3.053,323,2.006,330,2.006,338,2.786,626,3.379,642,2.958,649,2.555,650,5.18,1016,5.163,1159,6.055,1861,5.29,2374,6.673,2375,6.673,2376,6.673,2996,5.39,2997,5.39,2998,5.39,2999,5.39,3000,5.39,3001,5.39,3002,5.39]],["title/injectables/VaultKeyService.html",[30,0.697,1948,3.272]],["body/injectables/VaultKeyService.html",[3,0.064,4,0.053,5,0.048,11,0.59,12,0.115,13,0.548,15,1.591,16,0.939,18,0.735,19,0.39,20,0.01,21,1.792,22,2.302,23,4.103,29,0.34,30,0.593,33,0.323,34,2.038,35,0.684,47,2.522,48,1.103,56,1.277,61,1.713,79,0.064,80,0.052,86,2.258,87,1.458,89,1.39,93,0.971,94,2.028,95,1.458,104,1.331,109,1.34,110,1.682,119,1.912,133,1.099,136,1.605,138,1.183,147,2.708,148,2.096,152,2.383,164,2.466,189,1.331,191,2.525,192,1.43,195,2.785,214,2.219,217,1.391,220,1.277,222,3.002,224,1.869,236,1.458,239,1.742,242,1.535,248,1.844,251,1.844,260,0.004,271,2.297,286,1.277,290,1.833,295,2.799,303,0.004,310,1.962,313,0.696,315,2.381,339,0.866,347,0.819,423,2.799,483,3.309,484,1.844,518,1.738,556,1.458,557,1.734,564,2.785,568,1.183,575,2.079,618,1.458,660,2.234,709,1.228,718,1.535,739,3.996,769,0.798,803,3.242,872,2.38,884,3.099,912,1.535,944,1.535,1036,1.141,1076,2.466,1118,2.137,1238,2.799,1256,2.611,1260,4.308,1267,5.407,1276,4.295,1283,3.09,1323,1.141,1329,2.051,1334,1.277,1339,1.869,1367,1.277,1379,1.869,1389,2.051,1396,2.785,1430,3.294,1464,1.734,1468,1.625,1512,2.785,1530,2.611,1536,2.611,1543,1.869,1567,1.869,1571,3.002,1572,5.295,1577,3.002,1579,4.719,1586,3.002,1588,1.869,1589,3.361,1590,4.726,1597,2.051,1600,1.869,1601,1.458,1627,2.051,1771,2.051,1817,3.002,1853,1.228,1861,2.611,1874,1.869,1948,2.785,1949,6.25,1950,4.382,1959,1.869,2016,1.625,2150,3.294,2338,3.294,2437,1.734,2465,1.458,2473,3.996,2474,1.535,2531,1.734,2594,2.051,2597,6.04,2726,5.177,3003,6.535,3004,4.682,3005,3.736,3006,3.736,3007,3.736,3008,3.736,3009,2.326,3010,3.736,3011,2.326,3012,5.361,3013,6.271,3014,3.736,3015,3.736,3016,2.326,3017,5.872,3018,2.326,3019,2.326,3020,3.736,3021,3.736,3022,2.326,3023,2.326,3024,2.326,3025,3.736,3026,2.326,3027,3.736,3028,2.326,3029,2.326,3030,3.736,3031,3.736,3032,2.326,3033,2.326,3034,2.326,3035,2.326,3036,5.361,3037,2.326,3038,2.326,3039,2.326,3040,2.326,3041,2.326,3042,2.326,3043,2.326,3044,2.326,3045,2.326,3046,2.326,3047,2.326,3048,3.294,3049,3.736,3050,2.326,3051,2.326,3052,2.326,3053,2.326,3054,2.326,3055,2.051,3056,2.326,3057,3.736,3058,2.326,3059,2.326,3060,2.326,3061,2.326,3062,2.326,3063,2.326,3064,2.326,3065,2.326,3066,2.326,3067,2.326,3068,2.051,3069,2.326,3070,2.326,3071,4.128,3072,2.326,3073,2.326,3074,2.326,3075,2.326,3076,2.326,3077,2.326,3078,6.59,3079,2.326,3080,3.736,3081,2.326,3082,3.736,3083,4.682,3084,4.682,3085,2.326,3086,3.736,3087,3.736,3088,2.326,3089,4.726,3090,2.326,3091,2.326,3092,4.682,3093,5.361,3094,4.682,3095,3.736,3096,2.326,3097,3.736,3098,2.326,3099,3.736,3100,4.682,3101,2.326,3102,2.326,3103,2.326,3104,2.051,3105,3.736,3106,3.736,3107,2.326,3108,2.326,3109,2.326,3110,2.326,3111,2.326,3112,2.326,3113,2.326]],["title/modules/VerifierModule.html",[360,1.324,379,3.068]],["body/modules/VerifierModule.html",[3,0.161,4,0.134,5,0.12,20,0.01,29,0.409,33,0.814,79,0.161,80,0.13,260,0.008,303,0.008,360,2.371,362,2.519,363,2.774,364,2.976,365,2.976,366,2.684,367,2.871,368,2.871,372,4.538,377,5.39,378,5.14,379,6.349,380,3.681,381,2.976,382,2.774,385,3.432,388,3.669,396,4.703,407,4.362,1830,5.39,1852,4.779,1853,3.089,2242,5.39,2245,5.16,2425,5.16,3114,5.853,3115,5.853,3116,5.853]],["title/classes/WebHookAuthConfig.html",[80,0.097,331,3.068]],["body/classes/WebHookAuthConfig.html",[3,0.138,4,0.115,5,0.103,7,0.798,12,0.249,13,0.965,16,0.626,18,0.604,19,0.418,20,0.01,22,2.558,29,0.308,60,2.266,79,0.213,80,0.179,87,5.053,97,1.987,130,2.166,192,0.953,203,3.174,260,0.007,303,0.007,304,5.429,305,1.557,306,3.517,307,3.639,308,5.119,309,4.044,310,2.198,311,1.514,312,3.45,313,0.581,315,2.92,316,3.61,317,3.344,319,3.009,320,3.155,321,3.253,322,3.226,323,1.873,324,2.101,325,3.517,326,4.044,327,3.322,328,4.38,329,6.008,330,3.077,331,5.429,332,5.285,333,3.932,334,5.285,335,2.746,336,3.517,337,3.517,338,2.04,339,2.447,340,2.469,341,3.322,342,2.656,3117,5.033,3118,5.033,3119,5.033]],["title/classes/WebhookConfig.html",[80,0.097,338,1.779]],["body/classes/WebhookConfig.html",[3,0.138,4,0.115,5,0.103,7,0.797,12,0.248,13,0.964,16,0.966,18,0.64,19,0.408,20,0.01,22,2.464,29,0.308,60,1.554,79,0.213,80,0.179,87,4.867,97,1.986,130,3.151,192,0.951,203,3.254,260,0.007,303,0.007,304,5.116,305,1.554,306,3.511,307,3.606,308,5.425,309,4.038,310,2.196,311,1.512,312,3.578,313,0.581,315,2.918,316,3.606,317,3.34,319,3.004,320,3.15,321,3.251,322,3.223,323,1.87,324,2.098,325,3.511,326,4.038,327,3.317,328,3.928,329,5.456,330,3.076,331,5.425,332,4.038,333,3.004,334,4.038,335,2.098,336,4.591,337,4.591,338,2.663,339,2.998,340,3.223,341,4.337,342,3.468,3120,5.025,3121,5.025,3122,5.025]],["title/injectables/WebhookService.html",[30,0.697,1834,2.625]],["body/injectables/WebhookService.html",[3,0.1,4,0.084,5,0.075,7,0.581,12,0.181,16,0.771,19,0.29,20,0.01,29,0.362,30,0.838,33,0.509,79,0.1,80,0.081,86,1.778,93,1.764,94,2.313,101,3.486,109,0.975,110,1.359,119,1.72,133,1.553,136,1.076,144,3.311,147,2.644,148,2.268,161,2.583,192,1.173,196,2.047,226,2.787,239,1.965,241,3.45,248,2.079,251,2.079,260,0.005,303,0.005,308,3.691,313,0.548,316,2.899,329,3.936,330,3.192,342,2.787,347,1.158,471,2.753,483,3.581,518,1.427,621,2.205,630,2.345,637,2.787,726,3.882,727,2.294,769,1.256,887,4.254,932,5.588,971,5.453,1017,2.899,1026,4.244,1124,4.639,1207,2.727,1216,3.936,1833,3.882,1834,4.057,1846,2.557,1853,1.931,1870,2.294,1919,5.588,1950,5.401,1978,1.931,2073,4.254,2115,4.845,2144,4.244,2160,6.3,2210,3.226,2213,4.656,2323,5.464,2324,4.656,2437,2.727,2473,4.619,2474,2.415,2515,4.656,3048,4.656,3123,3.226,3124,6.198,3125,6.198,3126,3.659,3127,3.659,3128,3.659,3129,3.659,3130,3.659,3131,5.282,3132,3.659,3133,3.659,3134,3.659,3135,3.659,3136,3.659,3137,6.786,3138,6.786,3139,5.282,3140,3.659,3141,5.282,3142,5.282,3143,5.282,3144,7.498,3145,5.282,3146,4.656,3147,5.282,3148,5.282,3149,5.282,3150,5.282,3151,5.282,3152,5.282,3153,3.659,3154,3.659,3155,3.659,3156,3.659,3157,5.282,3158,3.659]],["title/controllers/WellKnownController.html",[343,1.358,384,3.272]],["body/controllers/WellKnownController.html",[3,0.124,4,0.103,5,0.093,7,1.102,12,0.223,16,0.864,18,0.697,19,0.365,20,0.01,22,2.204,29,0.391,33,0.628,47,2.658,48,2.143,79,0.124,80,0.1,86,1.992,93,1.175,94,1.297,106,2.903,109,1.283,120,4.023,136,1.724,147,2.68,148,1.511,152,2.295,191,2.204,192,1.315,260,0.006,303,0.006,311,1.599,313,0.614,315,2.008,324,3.424,343,2.148,345,1.637,347,1.343,351,2.073,384,4.565,389,4.921,390,5.982,443,2.903,502,2.218,518,1.599,534,3.503,539,3.37,646,2.101,694,7.07,695,4.921,709,3.232,723,3.812,731,2.9,732,4.28,771,6.123,783,3.37,824,3.138,1030,4.27,1097,3.37,1098,4.913,1279,6.123,1295,3.986,1334,2.482,1506,4.28,1521,3.661,1522,3.159,1794,4.152,1795,3.633,1824,4.042,2034,5.548,2102,3.986,2121,3.986,2579,3.986,2875,5.399,3159,3.986,3160,4.522,3161,7.444,3162,6.125,3163,4.522,3164,6.125,3165,4.522,3166,4.522,3167,4.522,3168,4.522,3169,4.522,3170,4.522,3171,4.522,3172,4.522,3173,4.522,3174,6.125,3175,4.522,3176,4.522,3177,4.522,3178,4.522,3179,4.522,3180,4.522,3181,4.522,3182,4.522]],["title/changelog.html",[1122,2.728,2789,2.728,3183,3.661]],["body/changelog.html",[5,0.101,20,0.007,22,1.555,60,1.999,84,3.697,101,3.234,106,3.428,107,2.544,130,2.109,150,2.046,212,5.187,213,3.652,260,0.007,295,2.929,303,0.008,317,2.491,330,2.405,339,2.405,355,3.652,399,3.234,423,2.929,458,3.652,542,3.937,553,3.071,619,3.424,621,2.046,630,2.176,912,4.773,1379,3.937,1395,3.652,1402,4.319,1638,3.937,1682,4.319,1911,5.697,1924,4.319,1978,2.586,2008,2.803,2253,3.937,2465,3.071,2513,5.811,2626,4.319,3055,4.319,3184,4.9,3185,7.576,3186,8.594,3187,4.319,3188,8.594,3189,8.594,3190,3.652,3191,4.9,3192,4.9,3193,4.9,3194,4.319,3195,4.9,3196,4.9,3197,6.375,3198,4.9,3199,4.319,3200,4.9,3201,4.9,3202,4.9,3203,8.894,3204,6.462,3205,5.389,3206,4.9,3207,6.375,3208,6.462,3209,4.9,3210,6.462,3211,4.9,3212,4.9,3213,4.9,3214,4.9,3215,4.9,3216,4.9,3217,4.9,3218,4.9,3219,6.462,3220,7.231,3221,4.9,3222,6.462,3223,4.9,3224,4.9,3225,4.9,3226,4.9,3227,4.9,3228,4.9,3229,4.9,3230,4.9,3231,4.9,3232,4.9,3233,4.9,3234,4.9,3235,4.9,3236,4.9,3237,4.9,3238,4.9,3239,4.319,3240,4.9,3241,4.9,3242,4.9,3243,4.319,3244,4.9,3245,4.9,3246,4.9,3247,4.9,3248,4.9,3249,4.9,3250,4.9,3251,4.319,3252,4.9,3253,4.9,3254,4.9,3255,4.9,3256,4.9,3257,4.9,3258,4.9,3259,4.9,3260,4.9,3261,4.9,3262,4.9,3263,4.9,3264,4.9,3265,4.9,3266,4.9,3267,4.9,3268,4.9,3269,4.9,3270,4.9,3271,4.9,3272,4.9,3273,4.319,3274,4.9,3275,4.319,3276,4.9,3277,4.319,3278,4.9,3279,4.9,3280,4.9,3281,4.9,3282,4.9]],["title/coverage.html",[3283,5.292]],["body/coverage.html",[0,2.183,1,2.063,5,0.057,6,3.443,11,0.702,19,0.35,20,0.01,21,1.059,26,1.229,30,1.367,38,1.312,47,1.64,49,1.827,52,1.583,58,1.934,66,1.519,69,1.735,80,0.194,89,1.03,119,0.901,120,1.358,142,2.562,260,0.004,268,5.323,303,0.004,304,1.934,306,4.126,324,1.155,328,1.655,331,1.934,338,1.122,343,2.501,344,2.063,346,2.44,366,1.269,384,2.063,390,2.224,392,2.063,395,2.063,401,2.063,403,2.224,406,2.063,412,2.063,471,0.878,500,2.063,501,2.44,506,2.063,510,2.063,524,1.735,526,1.735,531,1.312,588,1.519,589,1.934,590,2.224,608,1.934,609,2.44,610,4.164,624,1.735,625,4.215,626,4.234,632,1.827,633,1.827,642,1.519,650,2.562,662,1.583,663,1.827,664,2.44,687,1.934,688,2.44,691,2.063,692,2.44,701,1.655,723,1.519,726,1.358,728,2.063,746,2.44,747,4.038,770,3.908,779,1.519,780,1.519,807,1.735,813,1.934,815,1.934,824,1.059,884,1.461,892,6.676,922,1.519,941,3.443,992,2.44,993,2.44,1007,2.907,1008,1.583,1010,2.44,1014,1.735,1016,1.735,1048,1.934,1058,2.063,1063,1.735,1064,2.44,1065,1.934,1066,3.908,1097,2.063,1098,4.215,1099,2.44,1100,3.443,1124,1.519,1128,2.063,1129,2.44,1151,1.655,1158,2.063,1159,4.126,1160,2.224,1161,2.44,1175,2.44,1181,1.583,1205,3,1245,1.827,1246,4.744,1247,4.744,1256,1.934,1264,2.063,1271,1.827,1275,3.443,1276,1.735,1291,2.224,1325,1.934,1326,3.194,1395,2.063,1456,3.443,1464,2.063,1468,1.934,1473,2.224,1476,2.224,1522,1.934,1523,2.44,1565,2.063,1566,2.44,1567,3.443,1632,2.063,1633,3.443,1669,2.063,1670,2.44,1688,2.44,1689,3.443,1712,2.063,1713,2.44,1721,1.934,1730,2.44,1742,2.44,1778,2.063,1779,2.44,1780,2.224,1781,2.44,1784,1.735,1787,1.655,1794,1.655,1824,1.827,1825,2.44,1832,1.655,1833,1.583,1834,1.655,1835,2.224,1836,2.063,1860,2.44,1873,2.224,1888,2.44,1938,2.063,1939,2.44,1942,2.224,1948,2.063,1966,2.44,1976,2.063,1977,3.443,1978,1.461,1991,2.063,2027,1.934,2028,2.44,2034,2.063,2035,2.44,2047,3.443,2061,2.44,2073,1.735,2088,2.44,2115,1.735,2215,2.063,2216,2.44,2246,2.44,2256,2.063,2308,3.194,2363,2.44,2365,2.44,2378,2.063,2379,2.44,2386,2.063,2412,3.194,2414,2.44,2427,2.44,2438,1.827,2517,2.44,2518,2.44,2526,2.224,2558,2.44,2567,2.44,2610,3.443,2636,2.063,2637,2.44,2646,1.827,2652,2.224,2661,4.463,2662,2.44,2669,2.44,2696,2.224,2746,2.44,2806,2.224,2814,2.44,2839,7.128,2863,2.063,2864,4.003,2865,2.44,2878,2.063,2879,3.443,2887,1.827,2974,2.44,2975,2.44,2982,2.44,2990,3.443,2995,2.44,3003,2.44,3123,2.44,3159,2.44,3190,2.063,3243,2.44,3283,2.44,3284,2.768,3285,2.768,3286,5.205,3287,5.904,3288,7.045,3289,8.361,3290,2.768,3291,2.768,3292,5.244,3293,6.387,3294,2.768,3295,5.244,3296,3.778,3297,2.44,3298,2.44,3299,2.768,3300,7.279,3301,4.285,3302,5.244,3303,5.244,3304,2.44,3305,2.768,3306,2.768,3307,2.44,3308,2.768,3309,2.768,3310,2.768,3311,2.768,3312,2.768,3313,2.768,3314,5.904,3315,6.387,3316,2.768,3317,5.904,3318,2.768,3319,4.285,3320,5.904,3321,2.768,3322,2.768,3323,7.892,3324,7.773,3325,5.904,3326,5.904,3327,4.285,3328,2.768,3329,2.44,3330,2.768,3331,2.768,3332,2.44,3333,2.768,3334,2.768,3335,2.768,3336,2.768,3337,2.768,3338,2.768,3339,3.778,3340,2.768,3341,2.768,3342,2.768,3343,2.768,3344,2.768,3345,2.768,3346,2.768,3347,2.768]],["title/dependencies.html",[363,2.504,3348,3.227]],["body/dependencies.html",[20,0.01,33,0.76,35,1.609,37,4.395,38,2.593,64,3.002,65,3.129,80,0.154,260,0.007,303,0.007,319,3.27,323,2.035,351,2.508,363,2.593,387,3.27,398,4.822,399,3.61,409,4.395,418,3.822,419,5.68,442,4.076,544,2.593,592,4.076,722,2.887,806,3.429,872,2.812,1030,3.002,1036,3.932,1037,3.429,1053,3.27,1057,2.683,1090,2.683,1113,3.002,1201,4.076,1202,4.076,1204,4.076,1323,2.683,1521,3.27,1599,4.076,1601,3.429,1680,4.395,1799,3.429,1853,2.887,1871,4.395,1904,4.822,1906,4.822,2006,3.822,2474,3.61,2886,4.395,3349,6.939,3350,5.47,3351,7.622,3352,5.47,3353,5.47,3354,5.47,3355,5.47,3356,5.47,3357,5.47,3358,5.47,3359,6.939,3360,8.016,3361,8.016,3362,8.016,3363,5.47,3364,5.47,3365,8.016,3366,5.47,3367,5.47,3368,5.47,3369,5.47,3370,5.47,3371,5.47,3372,5.47,3373,5.47,3374,5.47,3375,5.47,3376,5.47,3377,5.47,3378,5.47,3379,5.47,3380,5.47,3381,5.47,3382,5.47,3383,5.47,3384,5.47,3385,5.47,3386,5.47,3387,5.47]],["title/miscellaneous/enumerations.html",[3388,2.189,3389,4.658]],["body/miscellaneous/enumerations.html",[11,1.741,12,0.339,19,0.322,20,0.009,196,2.07,260,0.008,303,0.008,310,2.662,327,4.53,621,2.866,747,4.762,987,3.652,1797,5.257,1799,4.993,2052,5.115,2412,5.115,3388,4.103,3389,6.051,3390,6.864]],["title/miscellaneous/functions.html",[666,4.246,3388,2.189]],["body/miscellaneous/functions.html",[11,2.006,12,0.335,16,0.843,19,0.318,20,0.009,136,1.382,142,4.053,144,4.25,192,1.284,247,3.578,260,0.008,303,0.008,366,3.956,418,4.738,518,1.561,666,5.448,807,4.958,856,4.475,1294,5.977,1605,4.738,3329,5.977,3332,5.977,3388,4.053,3391,6.78,3392,6.78]],["title/index.html",[12,0.181,1122,2.728,2789,2.728]],["body/index.html",[4,0.135,19,0.202,20,0.01,22,2.149,38,2.041,60,1.332,61,1.974,87,4.794,89,2.204,97,1.015,99,3.46,133,1.266,135,3.713,160,2.906,161,1.439,202,3.209,204,2.699,215,3.46,260,0.006,289,2.574,303,0.006,307,2.473,317,2.189,333,2.574,352,5.861,357,5.97,358,6.145,359,3.796,435,5.222,443,2.041,477,1.853,479,2.041,487,2.699,515,5.222,519,2.363,541,2.842,542,4.76,543,3.46,544,2.041,551,2.699,552,3.009,553,2.699,564,4.415,566,3.541,582,3.009,635,2.272,641,1.974,646,1.477,658,2.699,824,1.648,872,1.745,893,3.849,945,5.441,982,5.7,1026,3.46,1036,2.112,1037,2.699,1040,3.46,1113,2.363,1147,3.251,1360,3.46,1403,3.796,1453,3.796,1503,3.46,1512,3.209,1552,3.796,1672,3.796,1803,3.46,2006,4.139,2151,5.222,2254,5.047,2312,3.796,2734,3.009,3089,5.222,3190,5.436,3194,3.796,3197,5.222,3205,3.209,3207,3.796,3239,6.43,3273,5.97,3275,3.796,3393,4.306,3394,5.924,3395,4.306,3396,3.796,3397,4.306,3398,6.772,3399,5.924,3400,4.306,3401,4.306,3402,5.924,3403,3.46,3404,4.306,3405,4.306,3406,5.924,3407,4.306,3408,4.306,3409,4.306,3410,4.306,3411,4.306,3412,4.306,3413,4.306,3414,4.306,3415,4.306,3416,4.306,3417,4.306,3418,4.306,3419,4.306,3420,4.306,3421,4.306,3422,4.306,3423,4.306,3424,4.306,3425,4.306,3426,4.306,3427,4.306,3428,4.306,3429,4.306,3430,4.306,3431,4.306,3432,3.796,3433,4.306,3434,4.306,3435,5.924,3436,3.796,3437,4.306,3438,4.306,3439,4.306,3440,4.306,3441,4.306,3442,5.924,3443,4.306,3444,5.924,3445,4.306,3446,4.306,3447,4.306,3448,4.306,3449,4.306,3450,5.924,3451,4.306,3452,4.306,3453,4.306,3454,4.306,3455,4.306,3456,4.306,3457,5.924,3458,5.924,3459,4.306,3460,3.796,3461,3.796,3462,4.306,3463,4.306,3464,4.306,3465,5.924,3466,4.306,3467,5.924,3468,4.306,3469,4.306,3470,6.772,3471,4.306,3472,4.306,3473,3.796,3474,4.306,3475,4.306,3476,4.306,3477,4.306,3478,4.306,3479,4.306,3480,4.306,3481,3.796,3482,4.306,3483,4.306,3484,4.306,3485,4.306,3486,4.306,3487,3.796,3488,5.924,3489,4.306,3490,4.306,3491,4.306,3492,5.924,3493,4.306,3494,4.306,3495,4.306,3496,4.306,3497,4.306,3498,4.306,3499,3.796,3500,4.306,3501,4.306,3502,4.306,3503,4.306,3504,5.924,3505,4.306,3506,4.306,3507,4.306,3508,4.306,3509,3.796,3510,4.306,3511,4.306,3512,5.924,3513,4.306,3514,4.306,3515,4.306,3516,4.306,3517,4.306,3518,4.415,3519,3.796,3520,3.796,3521,3.46,3522,3.46]],["title/license.html",[1122,2.728,2789,2.728,3518,2.728]],["body/license.html",[2,1.121,4,0.175,5,0.143,7,0.388,20,0.007,24,1.342,29,0.115,46,3.125,70,1.533,73,5.357,80,0.054,97,0.577,107,2.9,133,0.719,135,1.533,139,4.019,160,1.2,169,1.614,186,2.898,192,0.736,212,2.325,213,1.822,253,3.89,257,2.134,259,1.614,260,0.004,274,1.965,275,4.433,280,1.822,303,0.004,313,0.216,316,1.342,317,2.805,335,2.303,342,3.177,355,1.822,356,1.462,382,1.159,487,1.533,551,1.533,553,1.533,555,3.383,612,1.533,635,1.29,640,2.224,641,2.22,659,1.614,660,3.298,722,2.052,894,1.822,906,1.822,915,2.134,972,1.533,1007,3.171,1009,1.342,1012,3.125,1046,2.156,1078,1.614,1108,3.125,1111,2.156,1118,3.667,1147,1.342,1367,1.342,1414,2.156,1516,6.096,1655,4.487,1663,4.838,1674,2.156,1702,3.125,1733,1.822,1738,1.822,1743,3.125,1813,3.428,1964,2.156,2044,4.863,2066,2.156,2138,3.428,2370,3.428,2415,1.965,2441,2.156,2472,4.863,2531,1.822,2575,2.156,2736,4.267,2738,2.156,2739,3.428,2930,3.125,3068,2.156,3104,6.848,3146,2.156,3185,2.156,3190,3.608,3205,3.608,3251,2.156,3277,2.156,3286,2.156,3432,3.428,3436,2.156,3473,2.156,3481,2.156,3487,2.156,3499,2.156,3509,2.156,3518,6.519,3519,2.156,3520,6.337,3521,4.433,3522,3.89,3523,2.445,3524,2.445,3525,2.445,3526,7.188,3527,7.768,3528,5.516,3529,6.02,3530,2.445,3531,7.96,3532,7.367,3533,2.445,3534,2.445,3535,7.367,3536,7.652,3537,6.02,3538,2.445,3539,6.02,3540,2.445,3541,5.516,3542,2.445,3543,2.445,3544,5.516,3545,3.888,3546,3.888,3547,2.445,3548,4.841,3549,3.888,3550,3.888,3551,2.445,3552,3.888,3553,2.445,3554,3.888,3555,2.445,3556,2.445,3557,2.445,3558,2.445,3559,2.445,3560,2.445,3561,4.841,3562,2.445,3563,4.841,3564,3.888,3565,6.411,3566,5.516,3567,3.888,3568,4.841,3569,2.445,3570,2.445,3571,2.445,3572,2.445,3573,2.445,3574,2.445,3575,2.445,3576,8.748,3577,4.841,3578,2.445,3579,7.188,3580,2.445,3581,3.888,3582,2.445,3583,8.18,3584,8.24,3585,2.445,3586,2.445,3587,2.445,3588,2.445,3589,2.445,3590,2.445,3591,3.888,3592,4.841,3593,2.445,3594,2.445,3595,2.445,3596,2.445,3597,5.516,3598,6.02,3599,2.445,3600,3.888,3601,5.516,3602,3.888,3603,2.445,3604,6.02,3605,2.445,3606,2.445,3607,4.841,3608,2.445,3609,2.445,3610,2.445,3611,3.888,3612,2.445,3613,2.445,3614,2.445,3615,4.841,3616,2.445,3617,2.445,3618,2.445,3619,7.367,3620,2.445,3621,3.888,3622,6.977,3623,3.888,3624,3.888,3625,3.888,3626,4.841,3627,3.888,3628,4.841,3629,3.888,3630,3.888,3631,3.888,3632,3.888,3633,2.445,3634,6.02,3635,6.722,3636,4.841,3637,3.888,3638,2.445,3639,3.888,3640,2.445,3641,2.445,3642,4.841,3643,2.445,3644,2.445,3645,2.445,3646,4.841,3647,2.445,3648,2.445,3649,2.445,3650,3.888,3651,3.888,3652,2.445,3653,2.445,3654,2.445,3655,2.445,3656,2.445,3657,2.445,3658,2.445,3659,3.888,3660,2.445,3661,2.445,3662,2.445,3663,2.445,3664,2.445,3665,2.445,3666,2.445,3667,4.841,3668,2.445,3669,2.445,3670,2.445,3671,2.445,3672,2.445,3673,2.445,3674,6.977,3675,2.445,3676,2.445,3677,2.445,3678,2.445,3679,2.445,3680,5.516,3681,3.888,3682,5.516,3683,2.445,3684,2.445,3685,2.445,3686,4.841,3687,2.445,3688,2.445,3689,3.888,3690,2.445,3691,2.445,3692,2.445,3693,2.445,3694,2.445,3695,2.445,3696,2.445,3697,2.445,3698,2.445,3699,2.445,3700,4.841,3701,5.516,3702,2.445,3703,2.445,3704,2.445,3705,2.445,3706,2.445,3707,2.445,3708,2.445,3709,2.445,3710,2.445,3711,2.445,3712,3.888,3713,2.445,3714,2.445,3715,3.888,3716,2.445,3717,2.445,3718,2.445,3719,2.445,3720,2.445,3721,2.445,3722,2.445,3723,2.445,3724,5.516,3725,4.841,3726,4.841,3727,4.841,3728,3.888,3729,4.841,3730,3.888,3731,3.888,3732,3.888,3733,2.445,3734,2.445,3735,2.445,3736,2.445,3737,2.445,3738,2.445,3739,2.445,3740,3.888,3741,2.445,3742,2.445,3743,6.02,3744,2.445,3745,2.445,3746,2.445,3747,2.445,3748,2.445,3749,2.445,3750,2.445,3751,2.445,3752,6.02,3753,2.445,3754,2.445,3755,2.445,3756,2.445,3757,2.445,3758,2.445,3759,2.445,3760,2.445,3761,2.445,3762,2.445,3763,2.445,3764,2.445,3765,2.445,3766,2.445,3767,2.445,3768,4.841,3769,2.445,3770,2.445,3771,2.445,3772,3.888,3773,2.445,3774,2.445,3775,2.445,3776,2.445,3777,2.445,3778,2.445,3779,2.445,3780,2.445,3781,2.445,3782,2.445,3783,2.445,3784,2.445,3785,2.445,3786,2.445,3787,3.888,3788,2.445,3789,2.445,3790,3.888,3791,3.888,3792,2.445,3793,2.445,3794,2.445,3795,2.445,3796,2.445,3797,2.445,3798,2.445,3799,2.445,3800,2.445,3801,2.445,3802,2.156,3803,2.156,3804,2.445,3805,2.445,3806,2.445,3807,2.445,3808,2.445,3809,2.445]],["title/modules.html",[362,2.584]],["body/modules.html",[20,0.008,260,0.008,303,0.008,361,4.639,362,2.679,371,4.349,372,3.967,373,4.349,374,4.349,375,4.349,376,4.349,377,3.902,378,3.721,379,4.349,551,5.063,553,5.699,1830,3.902,1831,4.108,2242,3.902,2420,4.349,3810,9.091,3811,9.091,3812,9.168,3813,8.077]],["title/overview.html",[3403,4.824]],["body/overview.html",[2,1.745,20,0.01,47,3.159,52,4.473,69,4.902,260,0.006,303,0.006,305,1.177,345,1.378,360,1.148,361,6.622,362,1.638,363,1.804,364,1.935,365,1.935,366,1.745,367,1.867,368,1.867,369,3.355,370,3.355,371,5.991,372,4.603,373,4.828,374,4.426,375,6.306,376,4.426,377,5.29,378,4.994,379,5.947,380,2.762,381,1.935,382,1.804,524,4.902,526,3.971,582,2.659,585,3.355,586,3.355,587,3.355,588,4.292,589,5.464,723,4.292,726,3.836,769,1.306,779,4.292,780,3.477,1009,2.088,1063,3.971,1151,3.787,1181,4.473,1268,3.355,1269,3.355,1270,3.355,1271,5.161,1395,2.836,1794,4.675,1826,3.355,1827,3.355,1828,3.355,1829,3.355,1830,5.553,1831,5.371,1832,4.13,1833,3.952,1834,4.13,2238,3.355,2239,3.355,2240,3.355,2241,3.355,2242,5.175,2416,3.355,2417,3.355,2418,3.355,2419,3.355,2420,5.309,2438,5.161,2522,3.355,2523,3.355,2525,3.355,2562,3.355,2563,3.355,2564,3.355,2802,3.355,2803,3.355,2804,3.355,2950,3.355,2952,3.355,2953,3.355,3187,3.355,3199,3.355,3403,3.058,3814,3.805,3815,3.805]],["title/properties.html",[13,0.775,3348,3.227]],["body/properties.html",[7,1.078,13,0.996,20,0.009,260,0.008,303,0.008,358,6.363,893,3.585,982,5.063,1070,4.062,3205,5.063,3396,5.989,3460,6.981,3461,5.989,3518,5.063,3521,5.459,3522,5.459,3802,5.989,3803,5.989,3816,6.794,3817,6.794,3818,6.794,3819,6.794,3820,6.794]],["title/miscellaneous/typealiases.html",[3388,2.189,3821,5.284]],["body/miscellaneous/typealiases.html",[9,3.502,12,0.303,19,0.416,20,0.009,71,2.902,105,2.807,142,4.449,144,3.837,162,2.41,203,2.41,260,0.008,303,0.008,306,4.277,307,3.107,308,4.277,327,4.04,328,4.449,471,1.942,475,2.718,484,2.41,618,5.358,625,4.04,626,4.665,629,4.04,635,3.23,659,4.04,660,3.66,661,4.562,662,4.257,833,3.003,884,3.927,1007,2.635,1101,3.837,1124,4.084,1238,3.66,1246,4.919,1247,6.703,1256,5.2,1264,5.546,1275,4.919,1291,5.98,1456,4.919,1464,5.546,1468,4.277,2610,4.919,2634,4.04,3388,3.66,3822,6.121,3823,6.121,3824,6.121,3825,7.442,3826,8.018,3827,6.121]],["title/miscellaneous/variables.html",[2530,4.246,3388,2.189]],["body/miscellaneous/variables.html",[9,1.934,11,1.265,12,0.167,15,0.858,18,0.601,19,0.382,20,0.01,21,1.908,22,1.073,59,2.363,60,1.046,66,2.736,71,1.603,84,1.934,89,2.204,109,1.347,110,1.733,115,2.52,117,2.52,119,1.623,133,0.994,135,2.12,137,1.582,138,2.535,139,5.309,147,2.329,148,2.521,192,1.121,226,3.126,236,4.098,260,0.005,303,0.005,310,2.809,335,1.412,347,0.741,360,1.504,392,3.716,395,3.716,401,3.716,403,4.006,406,3.716,412,3.716,428,3.716,433,3.67,471,1.879,477,1.455,479,1.603,484,1.331,531,1.603,575,1.501,582,2.363,583,2.717,590,2.717,596,6.824,597,2.981,598,6.649,599,6.145,600,2.981,601,2.981,602,2.717,603,2.981,604,2.981,605,2.981,606,2.52,607,2.981,709,1.784,803,2.997,834,3.125,885,1.659,1015,1.934,1030,1.856,1062,2.232,1118,4.662,1245,2.232,1251,2.717,1256,2.363,1257,2.981,1261,2.981,1262,2.981,1265,2.981,1266,4.872,1267,4.414,1396,3.716,1468,4.871,1473,2.717,1476,4.006,1477,2.981,1478,2.981,1479,2.981,1480,2.981,1481,5.763,1482,6.145,1483,6.22,1484,5.99,1485,2.981,1486,2.981,1487,2.981,1488,2.981,1489,2.981,1835,2.717,1854,2.717,1868,2.52,1873,4.006,1875,2.981,1942,2.717,1949,5.253,1953,2.981,1954,2.981,1955,2.981,1956,2.52,1957,2.981,1958,2.981,1959,2.717,1960,4.395,1961,2.981,1962,2.981,1978,2.631,2003,2.363,2008,1.934,2073,3.125,2161,3.484,2294,6.429,2308,4.414,2526,2.717,2529,2.981,2530,4.006,2531,2.52,2532,2.981,2533,2.981,2534,5.221,2535,5.221,2634,2.232,2661,2.363,2696,4.006,2699,4.395,2806,2.717,2808,2.717,2809,2.981,2810,2.717,2811,2.981,2812,2.981,2990,2.717,2991,2.981,2992,2.981,2993,2.981,2994,2.981,3071,2.981,3296,2.981,3297,2.981,3298,4.395,3304,2.981,3307,2.981,3339,5.221,3388,2.021,3828,3.381,3829,3.381,3830,3.381,3831,3.381,3832,4.986,3833,3.381,3834,3.381,3835,3.381,3836,4.986,3837,3.381,3838,3.381,3839,3.381,3840,3.381,3841,3.381,3842,3.381,3843,3.381,3844,5.923,3845,4.986,3846,3.381,3847,3.381,3848,4.986,3849,3.381,3850,4.986,3851,3.381,3852,3.381,3853,3.381,3854,4.986,3855,3.381,3856,3.381,3857,3.381,3858,3.381,3859,3.381,3860,3.381,3861,3.381,3862,3.381,3863,3.381]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":268,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["0.0.1",{"_index":3816,"title":{},"body":{"properties.html":{}}}],["0.14.0",{"_index":3365,"title":{},"body":{"dependencies.html":{}}}],["0.14.2",{"_index":3369,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":3382,"title":{},"body":{"dependencies.html":{}}}],["0.3.0",{"_index":3360,"title":{},"body":{"dependencies.html":{}}}],["0.3.25",{"_index":3386,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":2910,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["0.5.1",{"_index":3368,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":3289,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":3301,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":3316,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":3285,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":3288,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":3292,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":3295,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":3338,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":3318,"title":{},"body":{"coverage.html":{}}}],["07",{"_index":3186,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":3255,"title":{},"body":{"changelog.html":{}}}],["0x00",{"_index":3097,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["1",{"_index":1367,"title":{"injectables/CryptoService-1.html":{}},"body":{"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"injectables/VaultKeyService.html":{},"license.html":{}}}],["1.0.0",{"_index":3254,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":3242,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":3236,"title":{},"body":{"changelog.html":{}}}],["1.10.0",{"_index":3367,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":3223,"title":{},"body":{"changelog.html":{}}}],["1.2.1",{"_index":3219,"title":{},"body":{"changelog.html":{}}}],["1.2.2",{"_index":3214,"title":{},"body":{"changelog.html":{}}}],["1.2.3",{"_index":3201,"title":{},"body":{"changelog.html":{}}}],["1.3.0",{"_index":3184,"title":{},"body":{"changelog.html":{}}}],["1.5.4",{"_index":3380,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":3323,"title":{},"body":{"coverage.html":{}}}],["1/10",{"_index":3328,"title":{},"body":{"coverage.html":{}}}],["1/15",{"_index":3299,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":3287,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":3306,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":3243,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["10,000",{"_index":2896,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["10.5.0",{"_index":3378,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":892,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["1000",{"_index":184,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["10000",{"_index":2903,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["11",{"_index":3237,"title":{},"body":{"changelog.html":{}}}],["11.0.0",{"_index":3359,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":3354,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":3387,"title":{},"body":{"dependencies.html":{}}}],["11.1.3",{"_index":3351,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":3358,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":3195,"title":{},"body":{"changelog.html":{}}}],["12/14",{"_index":3341,"title":{},"body":{"coverage.html":{}}}],["12/schema",{"_index":2606,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["12395c8",{"_index":3262,"title":{},"body":{"changelog.html":{}}}],["13",{"_index":3199,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["13.0.0",{"_index":3379,"title":{},"body":{"dependencies.html":{}}}],["13/13",{"_index":3342,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":3815,"title":{},"body":{"overview.html":{}}}],["15",{"_index":3814,"title":{},"body":{"overview.html":{}}}],["17.13.3",{"_index":3370,"title":{},"body":{"dependencies.html":{}}}],["17/17",{"_index":3333,"title":{},"body":{"coverage.html":{}}}],["18",{"_index":3220,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":3215,"title":{},"body":{"changelog.html":{}}}],["1912bb8",{"_index":3191,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":295,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["2.0",{"_index":3522,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["2/2",{"_index":3314,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":3317,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":3202,"title":{},"body":{"changelog.html":{}}}],["200",{"_index":509,"title":{},"body":{"controllers/AuthController.html":{}}}],["2004",{"_index":3524,"title":{},"body":{"license.html":{}}}],["201",{"_index":1786,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["2025",{"_index":3185,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["20250602121005",{"_index":3362,"title":{},"body":{"dependencies.html":{}}}],["23",{"_index":3336,"title":{},"body":{"coverage.html":{}}}],["24",{"_index":582,"title":{},"body":{"controllers/AuthController.html":{},"modules/SessionModule.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["24h",{"_index":580,"title":{},"body":{"controllers/AuthController.html":{}}}],["25",{"_index":3305,"title":{},"body":{"coverage.html":{}}}],["256",{"_index":1226,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{}}}],["259ab39",{"_index":3206,"title":{},"body":{"changelog.html":{}}}],["2742ec4",{"_index":3282,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":3187,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["2913417",{"_index":3213,"title":{},"body":{"changelog.html":{}}}],["295428b",{"_index":3218,"title":{},"body":{"changelog.html":{}}}],["2a71850",{"_index":3266,"title":{},"body":{"changelog.html":{}}}],["2aa727a",{"_index":3211,"title":{},"body":{"changelog.html":{}}}],["2f07af2",{"_index":3265,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":1379,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["3.0.1",{"_index":3353,"title":{},"body":{"dependencies.html":{}}}],["3.14.1",{"_index":3373,"title":{},"body":{"dependencies.html":{}}}],["3.2.0",{"_index":3349,"title":{},"body":{"dependencies.html":{}}}],["3/13",{"_index":3337,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":3324,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":3326,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":3327,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":889,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["3000:3000",{"_index":3469,"title":{},"body":{"index.html":{}}}],["32",{"_index":3089,"title":{},"body":{"injectables/VaultKeyService.html":{},"index.html":{}}}],["32fbd8e",{"_index":3228,"title":{},"body":{"changelog.html":{}}}],["33",{"_index":3095,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["33ac2c7",{"_index":3268,"title":{},"body":{"changelog.html":{}}}],["35",{"_index":3308,"title":{},"body":{"coverage.html":{}}}],["35f4d1e",{"_index":3240,"title":{},"body":{"changelog.html":{}}}],["3600",{"_index":2192,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["365",{"_index":1388,"title":{},"body":{"injectables/CryptoService.html":{}}}],["38",{"_index":3330,"title":{},"body":{"coverage.html":{}}}],["3ac47ec",{"_index":3259,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":1389,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/VaultKeyService.html":{}}}],["4.0.0",{"_index":3350,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":3375,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":3352,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":3374,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":3320,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":3303,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":3294,"title":{},"body":{"coverage.html":{}}}],["4/7",{"_index":3322,"title":{},"body":{"coverage.html":{}}}],["401",{"_index":511,"title":{},"body":{"controllers/AuthController.html":{}}}],["40ccd32",{"_index":3261,"title":{},"body":{"changelog.html":{}}}],["43",{"_index":3312,"title":{},"body":{"coverage.html":{}}}],["45f3f7f",{"_index":3263,"title":{},"body":{"changelog.html":{}}}],["46c9ce6",{"_index":3235,"title":{},"body":{"changelog.html":{}}}],["4be0171",{"_index":3264,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":1391,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vpService.html":{}}}],["5.0.3",{"_index":3357,"title":{},"body":{"dependencies.html":{}}}],["5.1.7",{"_index":3385,"title":{},"body":{"dependencies.html":{}}}],["5/13",{"_index":3331,"title":{},"body":{"coverage.html":{}}}],["5/14",{"_index":3309,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":3315,"title":{},"body":{"coverage.html":{}}}],["5/8",{"_index":3311,"title":{},"body":{"coverage.html":{}}}],["5/9",{"_index":3291,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":3286,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["500",{"_index":742,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["53804b0",{"_index":3193,"title":{},"body":{"changelog.html":{}}}],["54e8a4e",{"_index":3272,"title":{},"body":{"changelog.html":{}}}],["55",{"_index":3290,"title":{},"body":{"coverage.html":{}}}],["57",{"_index":3321,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1395,"title":{},"body":{"injectables/CryptoService.html":{},"changelog.html":{},"coverage.html":{},"overview.html":{}}}],["6.0.0",{"_index":3356,"title":{},"body":{"dependencies.html":{}}}],["6.0.11",{"_index":3371,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":3319,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":2308,"title":{},"body":{"injectables/Oid4vpService.html":{},"modules/SessionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["62",{"_index":3310,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":3293,"title":{},"body":{"coverage.html":{}}}],["6a6cdb6",{"_index":3252,"title":{},"body":{"changelog.html":{}}}],["6bb4aa9",{"_index":3217,"title":{},"body":{"changelog.html":{}}}],["6d31de0",{"_index":3247,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":1402,"title":{},"body":{"injectables/CryptoService.html":{},"changelog.html":{}}}],["7.8.2",{"_index":3383,"title":{},"body":{"dependencies.html":{}}}],["7/16",{"_index":3313,"title":{},"body":{"coverage.html":{}}}],["7/9",{"_index":3335,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":3325,"title":{},"body":{"coverage.html":{}}}],["77",{"_index":3334,"title":{},"body":{"coverage.html":{}}}],["7a6a69c",{"_index":3209,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":299,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["8.16.3",{"_index":3377,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":3302,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":3340,"title":{},"body":{"coverage.html":{}}}],["86400",{"_index":549,"title":{},"body":{"controllers/AuthController.html":{}}}],["892b30e",{"_index":3260,"title":{},"body":{"changelog.html":{}}}],["8f9498a",{"_index":3221,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":3534,"title":{},"body":{"license.html":{}}}],["9/10",{"_index":3345,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":3343,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":3344,"title":{},"body":{"coverage.html":{}}}],["905e17c",{"_index":3222,"title":{},"body":{"changelog.html":{}}}],["9104df3",{"_index":3225,"title":{},"body":{"changelog.html":{}}}],["91b5499",{"_index":3238,"title":{},"body":{"changelog.html":{}}}],["937603a",{"_index":3241,"title":{},"body":{"changelog.html":{}}}],["98303c1",{"_index":3274,"title":{},"body":{"changelog.html":{}}}],["_",{"_index":3112,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["a128gcm",{"_index":2302,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["above",{"_index":3704,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":1967,"title":{},"body":{"classes/KeyService.html":{}}}],["abstraction",{"_index":3421,"title":{},"body":{"index.html":{}}}],["ac4ee24",{"_index":3271,"title":{},"body":{"changelog.html":{}}}],["accept",{"_index":1814,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["acceptance",{"_index":3770,"title":{},"body":{"license.html":{}}}],["accepting",{"_index":3768,"title":{},"body":{"license.html":{}}}],["accepts",{"_index":516,"title":{},"body":{"controllers/AuthController.html":{}}}],["access",{"_index":9,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["access_token",{"_index":545,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TokenResponse.html":{}}}],["accesscert",{"_index":2315,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscert?.length",{"_index":2328,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscertificatecontrollerfindone",{"_index":40,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["accesscertificatecontrollerregister",{"_index":41,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["accesscertificateid",{"_index":2519,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["accesscertificateresponse",{"_index":1,"title":{"interfaces/AccessCertificateResponse.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"coverage.html":{}}}],["accessing",{"_index":96,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["accesstoken",{"_index":92,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["accesstokenrequest",{"_index":855,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["accordingly",{"_index":976,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["act",{"_index":3776,"title":{},"body":{"license.html":{}}}],["acting",{"_index":3540,"title":{},"body":{"license.html":{}}}],["action",{"_index":2268,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["acts",{"_index":3750,"title":{},"body":{"license.html":{}}}],["add",{"_index":212,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/FileSystemKeyService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"changelog.html":{},"license.html":{}}}],["add(issuer_state",{"_index":2821,"title":{},"body":{"injectables/SessionService.html":{}}}],["addaccesscertificate",{"_index":231,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["addaccesscertificate(config",{"_index":2542,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addendum",{"_index":3695,"title":{},"body":{"license.html":{}}}],["addext",{"_index":1385,"title":{},"body":{"injectables/CryptoService.html":{}}}],["adding",{"_index":74,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["additional",{"_index":1655,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/SessionLogContext.html":{},"license.html":{}}}],["additionaldata",{"_index":2763,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["additions",{"_index":3599,"title":{},"body":{"license.html":{}}}],["addregistrationcertificate",{"_index":246,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["addregistrationcertificate(req",{"_index":2544,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addrp",{"_index":2536,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addrp(tenantid",{"_index":190,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["adds",{"_index":185,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["adjust",{"_index":3258,"title":{},"body":{"changelog.html":{}}}],["advancing",{"_index":3508,"title":{},"body":{"index.html":{}}}],["advised",{"_index":3766,"title":{},"body":{"license.html":{}}}],["against",{"_index":3651,"title":{},"body":{"license.html":{}}}],["agent",{"_index":485,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["agree",{"_index":3779,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":3727,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":3709,"title":{},"body":{"license.html":{}}}],["alg",{"_index":885,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"miscellaneous/variables.html":{}}}],["algorithm",{"_index":277,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/RegistrarService.html":{}}}],["algorithms",{"_index":1250,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["alias",{"_index":3300,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":3822,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":2116,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["alleging",{"_index":3656,"title":{},"body":{"license.html":{}}}],["allowedauthenticationschemes",{"_index":2156,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["allowedsigningalgs",{"_index":870,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["allowing",{"_index":973,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["allowinsecureurls",{"_index":1858,"title":{},"body":{"modules/IssuerModule.html":{}}}],["alone",{"_index":3647,"title":{},"body":{"license.html":{}}}],["along",{"_index":3687,"title":{},"body":{"license.html":{}}}],["alongside",{"_index":3694,"title":{},"body":{"license.html":{}}}],["alpha",{"_index":3361,"title":{},"body":{"dependencies.html":{}}}],["already",{"_index":204,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"index.html":{}}}],["always",{"_index":1517,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["amount",{"_index":1125,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["and/or",{"_index":3773,"title":{},"body":{"license.html":{}}}],["animo",{"_index":3440,"title":{},"body":{"index.html":{}}}],["annotations",{"_index":3588,"title":{},"body":{"license.html":{}}}],["any).issuer",{"_index":1937,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["any).method",{"_index":937,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/IssuanceService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["anymore",{"_index":949,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["apache",{"_index":3521,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["api",{"_index":87,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"index.html":{}}}],["api:read",{"_index":2398,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["api:write",{"_index":2399,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["apibody",{"_index":523,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apibody({description",{"_index":711,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["apiexcludecontroller",{"_index":350,"title":{},"body":{"controllers/AppController.html":{}}}],["apihideproperty",{"_index":1709,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["apihideproperty()@column('varchar",{"_index":1706,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["apikey",{"_index":329,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{}}}],["apikeyconfig",{"_index":304,"title":{"classes/ApiKeyConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["apioperation",{"_index":3174,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apioperation({summary",{"_index":3167,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apiproduces",{"_index":1793,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiproduces('application/json",{"_index":1806,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiproperty",{"_index":2057,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["apiproperty({example",{"_index":2051,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["apiresponse",{"_index":522,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiresponse({description",{"_index":1785,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apisecurity",{"_index":1142,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["apisecurity('oauth2",{"_index":1149,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["apitags",{"_index":521,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{}}}],["apitags('authentication",{"_index":535,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('issuer",{"_index":1146,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{}}}],["apitags('presentation",{"_index":2397,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["apitags('session",{"_index":2654,"title":{},"body":{"controllers/SessionController.html":{}}}],["apitags('status",{"_index":2873,"title":{},"body":{"controllers/StatusListController.html":{}}}],["app/app.controller",{"_index":405,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":344,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appear",{"_index":3691,"title":{},"body":{"license.html":{}}}],["appendix",{"_index":3581,"title":{},"body":{"license.html":{}}}],["applicable",{"_index":3725,"title":{},"body":{"license.html":{}}}],["application",{"_index":144,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"injectables/WebhookService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["application/json",{"_index":1803,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"index.html":{}}}],["application/jwk",{"_index":3164,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["application/statuslist+jwt",{"_index":2871,"title":{},"body":{"controllers/StatusListController.html":{}}}],["applies",{"_index":3641,"title":{},"body":{"license.html":{}}}],["apply",{"_index":3787,"title":{},"body":{"license.html":{}}}],["appmodule",{"_index":361,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":3795,"title":{},"body":{"license.html":{}}}],["appropriateness",{"_index":3739,"title":{},"body":{"license.html":{}}}],["architecture",{"_index":3500,"title":{},"body":{"index.html":{}}}],["archives",{"_index":3801,"title":{},"body":{"license.html":{}}}],["arising",{"_index":3756,"title":{},"body":{"license.html":{}}}],["array",{"_index":1083,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/PresentationsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["array(size",{"_index":2906,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["array(size).fill(0).map",{"_index":2904,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["array.isarray(dcql_query",{"_index":2283,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["array.isarray(value",{"_index":1452,"title":{},"body":{"injectables/CryptoService.html":{}}}],["ask",{"_index":3515,"title":{},"body":{"index.html":{}}}],["asserted",{"_index":3785,"title":{},"body":{"license.html":{}}}],["associated",{"_index":1738,"title":{},"body":{"classes/IssuanceDto.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"license.html":{}}}],["assume",{"_index":906,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"license.html":{}}}],["async",{"_index":147,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/variables.html":{}}}],["att",{"_index":2508,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attach",{"_index":3788,"title":{},"body":{"license.html":{}}}],["attached",{"_index":3580,"title":{},"body":{"license.html":{}}}],["attestation",{"_index":895,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["attestations",{"_index":2458,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attestations.map((att",{"_index":2509,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attestations—issuing",{"_index":3434,"title":{},"body":{"index.html":{}}}],["attribute",{"_index":3433,"title":{},"body":{"index.html":{}}}],["attribution",{"_index":3680,"title":{},"body":{"license.html":{}}}],["aud",{"_index":2305,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["audience",{"_index":581,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["auth",{"_index":130,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{}}}],["auth.controller",{"_index":595,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":594,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.guard",{"_index":1145,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["auth/auth.module",{"_index":413,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/tenant",{"_index":67,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["auth/token.decorator",{"_index":1143,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["auth_client_id",{"_index":607,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["auth_client_secret",{"_index":606,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"miscellaneous/variables.html":{}}}],["auth_client_secret=$(openssl",{"_index":3468,"title":{},"body":{"index.html":{}}}],["auth_client_secret=your",{"_index":3474,"title":{},"body":{"index.html":{}}}],["auth_queries",{"_index":741,"title":{},"body":{"controllers/AuthorizeController.html":{},"entities/Session.html":{}}}],["auth_session",{"_index":748,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["auth_validation_schema",{"_index":412,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authconfig",{"_index":328,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["authcontroller",{"_index":500,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticating",{"_index":90,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["authentication",{"_index":307,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["authenticationconfig",{"_index":662,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["authenticationconfigdto",{"_index":624,"title":{"classes/AuthenticationConfigDto.html":{}},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authenticationconfighelper",{"_index":663,"title":{"classes/AuthenticationConfigHelper.html":{}},"body":{"classes/AuthenticationConfigHelper.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["authenticationconfighelper.getpresentationconfig(authconfig",{"_index":923,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authenticationconfighelper.isauthurlauth(authconfig",{"_index":927,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authenticationconfighelper.isnoneauth(authconfig",{"_index":934,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authenticationconfighelper.ispresentationduringissuanceauth",{"_index":921,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authenticationurlconfig",{"_index":632,"title":{"classes/AuthenticationUrlConfig.html":{}},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authguard",{"_index":1872,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":1862,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authheader",{"_index":558,"title":{},"body":{"controllers/AuthController.html":{}}}],["authheader.startswith('basic",{"_index":560,"title":{},"body":{"controllers/AuthController.html":{}}}],["authheader.substring(6",{"_index":562,"title":{},"body":{"controllers/AuthController.html":{}}}],["authmodule",{"_index":371,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":3820,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":324,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["authorization_challenge_endpoint",{"_index":840,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorization_code",{"_index":858,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["authorization_encrypted_response_alg",{"_index":2300,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_encrypted_response_enc",{"_index":2301,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_endpoint",{"_index":827,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorization_request",{"_index":2267,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerService.html":{}}}],["authorization_server",{"_index":1102,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["authorization_servers",{"_index":1103,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["authorizationchallengeendpoint",{"_index":697,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationchallengeendpoint(res",{"_index":700,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{}}}],["authorizationcodegrantidentifier",{"_index":801,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationresponse",{"_index":687,"title":{"classes/AuthorizationResponse.html":{}},"body":{"classes/AuthorizationResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"coverage.html":{}}}],["authorizationserver",{"_index":818,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata",{"_index":785,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata.dpop_signing_alg_values_supported",{"_index":871,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata.issuer",{"_index":890,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservers",{"_index":2129,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["authorize",{"_index":698,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize(queries",{"_index":705,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize.service",{"_index":724,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize/authorize.controller",{"_index":1840,"title":{},"body":{"modules/IssuerModule.html":{}}}],["authorize/authorize.service",{"_index":1837,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{}}}],["authorizecontroller",{"_index":691,"title":{"controllers/AuthorizeController.html":{}},"body":{"controllers/AuthorizeController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["authorized",{"_index":640,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"license.html":{}}}],["authorized_code",{"_index":861,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizequeries",{"_index":701,"title":{"classes/AuthorizeQueries.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{},"coverage.html":{}}}],["authorizequeries})@post('par",{"_index":713,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorizeservice",{"_index":723,"title":{"injectables/AuthorizeService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/WellKnownController.html":{},"coverage.html":{},"overview.html":{}}}],["authorship",{"_index":3577,"title":{},"body":{"license.html":{}}}],["authresponse",{"_index":608,"title":{"interfaces/AuthResponse.html":{}},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"coverage.html":{}}}],["authserver",{"_index":820,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/.well",{"_index":830,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize",{"_index":828,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/challenge",{"_index":841,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/par",{"_index":837,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/token",{"_index":826,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authtype",{"_index":3139,"title":{},"body":{"injectables/WebhookService.html":{}}}],["authurl",{"_index":654,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["authz",{"_index":2313,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authzmetadata",{"_index":771,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/WellKnownController.html":{}}}],["authzmetadata(tenantid",{"_index":783,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/WellKnownController.html":{}}}],["authzservice",{"_index":2094,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["autoloadentities",{"_index":1494,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["autologging",{"_index":454,"title":{},"body":{"modules/AppModule.html":{}}}],["automatic",{"_index":2005,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["available",{"_index":551,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"index.html":{},"license.html":{},"modules.html":{}}}],["avoid",{"_index":2737,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["await",{"_index":148,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/variables.html":{}}}],["axios",{"_index":3366,"title":{},"body":{"dependencies.html":{}}}],["b",{"_index":3670,"title":{},"body":{"license.html":{}}}],["b3abd57",{"_index":3279,"title":{},"body":{"changelog.html":{}}}],["b989c6c",{"_index":3230,"title":{},"body":{"changelog.html":{}}}],["b99786b",{"_index":3200,"title":{},"body":{"changelog.html":{}}}],["back",{"_index":570,"title":{},"body":{"controllers/AuthController.html":{}}}],["backend",{"_index":3398,"title":{},"body":{"index.html":{}}}],["badgateway/oauth2",{"_index":37,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"dependencies.html":{}}}],["badrequestexception",{"_index":2109,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["badrequestexception('session",{"_index":2197,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["base",{"_index":627,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["base64",{"_index":564,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"index.html":{}}}],["base64credentials",{"_index":561,"title":{},"body":{"controllers/AuthController.html":{}}}],["base64url",{"_index":3071,"title":{},"body":{"injectables/VaultKeyService.html":{},"miscellaneous/variables.html":{}}}],["based",{"_index":135,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["baseurl",{"_index":128,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["basic",{"_index":517,"title":{},"body":{"controllers/AuthController.html":{}}}],["basis",{"_index":3728,"title":{},"body":{"license.html":{}}}],["batch",{"_index":1116,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["batch_credential_issuance",{"_index":1104,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["batch_size",{"_index":1127,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["batches",{"_index":2205,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["bearer",{"_index":325,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/TokenResponse.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["beef4d2",{"_index":3234,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":903,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["begin",{"_index":1413,"title":{},"body":{"injectables/CryptoService.html":{}}}],["behalf",{"_index":3604,"title":{},"body":{"license.html":{}}}],["being",{"_index":1022,"title":{},"body":{"entities/CredentialConfig.html":{},"interfaces/SessionLogContext.html":{}}}],["below",{"_index":3582,"title":{},"body":{"license.html":{}}}],["beneficial",{"_index":3560,"title":{},"body":{"license.html":{}}}],["better",{"_index":3142,"title":{},"body":{"injectables/WebhookService.html":{}}}],["between",{"_index":616,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["binary",{"_index":1805,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["bind",{"_index":3596,"title":{},"body":{"license.html":{}}}],["bits",{"_index":2880,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["bitsperstatus",{"_index":2881,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["body",{"_index":194,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["body.auth_session",{"_index":904,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["body.client_id",{"_index":571,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.client_secret",{"_index":572,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.code",{"_index":859,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["body.credentialconfigurationids",{"_index":2136,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.event",{"_index":2202,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.grant_type",{"_index":554,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.issuanceid",{"_index":2135,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.issuer_state",{"_index":897,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["body.notification_id",{"_index":2200,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.requestid",{"_index":2403,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["body.response",{"_index":2341,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["body.response_type",{"_index":1816,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["body.webhook",{"_index":2404,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["body['pre",{"_index":860,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["boilerplate",{"_index":3789,"title":{},"body":{"license.html":{}}}],["boolean",{"_index":27,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["bootstrap",{"_index":366,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":737,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["bound",{"_index":256,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["boundaries",{"_index":3446,"title":{},"body":{"index.html":{}}}],["brackets",{"_index":3791,"title":{},"body":{"license.html":{}}}],["branch",{"_index":3494,"title":{},"body":{"index.html":{}}}],["bridges",{"_index":3397,"title":{},"body":{"index.html":{}}}],["browse",{"_index":3812,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3810,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":1817,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/VaultKeyService.html":{}}}],["buffer.concat([buffer.alloc(32",{"_index":3099,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.concat([rpadded",{"_index":3107,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.from",{"_index":563,"title":{},"body":{"controllers/AuthController.html":{}}}],["buffer.from(dersignature",{"_index":3079,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.from(json.stringify(header)).tostring",{"_index":3070,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.from(json.stringify(payload)).tostring",{"_index":3073,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["buffer.from(signature).tostring('base64url",{"_index":3851,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buffer.from(signaturebase64url",{"_index":3853,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buffer.from(value).tostring('base64",{"_index":3066,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["bug",{"_index":3188,"title":{},"body":{"changelog.html":{}}}],["bugs",{"_index":3818,"title":{},"body":{"properties.html":{}}}],["build",{"_index":3278,"title":{},"body":{"changelog.html":{}}}],["builder/querypartialentity",{"_index":2845,"title":{},"body":{"injectables/SessionService.html":{}}}],["built",{"_index":3443,"title":{},"body":{"index.html":{}}}],["bundle",{"_index":2209,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["business",{"_index":3428,"title":{},"body":{"index.html":{}}}],["byte",{"_index":3087,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["bytes",{"_index":1430,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/VaultKeyService.html":{}}}],["c",{"_index":3677,"title":{},"body":{"license.html":{}}}],["c.id",{"_index":967,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["c3b1b48",{"_index":3244,"title":{},"body":{"changelog.html":{}}}],["c805439",{"_index":3257,"title":{},"body":{"changelog.html":{}}}],["ca",{"_index":1398,"title":{},"body":{"injectables/CryptoService.html":{}}}],["cache",{"_index":1912,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cacreateserial",{"_index":1400,"title":{},"body":{"injectables/CryptoService.html":{}}}],["cakey",{"_index":1399,"title":{},"body":{"injectables/CryptoService.html":{}}}],["calculatejwkthumbprint",{"_index":1319,"title":{},"body":{"injectables/CryptoService.html":{}}}],["call",{"_index":2681,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["callback",{"_index":617,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/CryptoService.html":{},"classes/KeyService.html":{},"injectables/SessionService.html":{}}}],["callbackcontext",{"_index":1317,"title":{},"body":{"injectables/CryptoService.html":{}}}],["callbacks",{"_index":655,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["called",{"_index":143,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["callhandler",{"_index":2677,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["calling",{"_index":1355,"title":{},"body":{"injectables/CryptoService.html":{}}}],["calls",{"_index":3453,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":1863,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate(context",{"_index":1867,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["carry",{"_index":3672,"title":{},"body":{"license.html":{}}}],["cascade",{"_index":1043,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["case",{"_index":1471,"title":{},"body":{"injectables/CryptoService-1.html":{},"injectables/Oid4vciService.html":{}}}],["catch",{"_index":568,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/VaultKeyService.html":{}}}],["catch(async",{"_index":3039,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["catcherror",{"_index":2694,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["catcherror((error",{"_index":2729,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["cause",{"_index":3550,"title":{},"body":{"license.html":{}}}],["cb",{"_index":1920,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cb(err",{"_index":1923,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cd",{"_index":3462,"title":{},"body":{"index.html":{}}}],["cert",{"_index":242,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["cert.id",{"_index":265,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["cert.publickey.export",{"_index":2591,"title":{},"body":{"injectables/ResolverService.html":{}}}],["cert.revoked",{"_index":263,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["cert.subjectaltname?.includes(new",{"_index":2587,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certificate",{"_index":10,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{}}}],["certificate.pem",{"_index":1349,"title":{},"body":{"injectables/CryptoService.html":{}}}],["certificatechainlength",{"_index":2327,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["certificates",{"_index":77,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["certificatetype",{"_index":1291,"title":{},"body":{"injectables/CryptoService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["certout",{"_index":1348,"title":{},"body":{"injectables/CryptoService.html":{}}}],["certs",{"_index":261,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["certs?.length",{"_index":267,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["certs[0",{"_index":2586,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certs[0].jwt",{"_index":269,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["chain",{"_index":1411,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/ResolverService.html":{}}}],["challenge",{"_index":704,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["changed",{"_index":3676,"title":{},"body":{"license.html":{}}}],["changelog",{"_index":3183,"title":{"changelog.html":{}},"body":{}}],["character",{"_index":3473,"title":{},"body":{"index.html":{},"license.html":{}}}],["charge",{"_index":3628,"title":{},"body":{"license.html":{}}}],["check",{"_index":214,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AuthenticationConfigHelper.html":{},"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"injectables/JwtService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["checked",{"_index":911,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["checking",{"_index":2895,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["checks",{"_index":132,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"controllers/HealthController.html":{},"injectables/RegistrarService.html":{}}}],["checl",{"_index":2592,"title":{},"body":{"injectables/ResolverService.html":{}}}],["choice",{"_index":3409,"title":{},"body":{"index.html":{}}}],["choose",{"_index":3487,"title":{},"body":{"index.html":{},"license.html":{}}}],["ci",{"_index":3203,"title":{},"body":{"changelog.html":{}}}],["claim",{"_index":3653,"title":{},"body":{"license.html":{}}}],["claims",{"_index":1012,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"license.html":{}}}],["class",{"_index":80,"title":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/IssuanceDto.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrarConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"coverage.html":{},"dependencies.html":{},"license.html":{}}}],["classes",{"_index":305,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/IssuanceDto.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrarConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"overview.html":{}}}],["clean",{"_index":1403,"title":{},"body":{"injectables/CryptoService.html":{},"index.html":{}}}],["cleanup",{"_index":952,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["clear",{"_index":2356,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client",{"_index":38,"title":{"interfaces/Client.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["client.id",{"_index":577,"title":{},"body":{"controllers/AuthController.html":{}}}],["client.secret",{"_index":968,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["client.service",{"_index":527,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["client_credentials",{"_index":538,"title":{},"body":{"controllers/AuthController.html":{}}}],["client_id",{"_index":541,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/TokenPayload.html":{},"index.html":{}}}],["client_metadata",{"_index":2290,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_name",{"_index":2303,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_secret",{"_index":543,"title":{},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{},"index.html":{}}}],["clientauthentication",{"_index":1432,"title":{},"body":{"injectables/CryptoService.html":{}}}],["clientauthenticationnone",{"_index":1320,"title":{},"body":{"injectables/CryptoService.html":{}}}],["clientcredentialsdto",{"_index":506,"title":{"classes/ClientCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{},"coverage.html":{}}}],["clientid",{"_index":113,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{}}}],["clients",{"_index":946,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["clients.foreach((client",{"_index":956,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["clientsecret",{"_index":116,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/RegistrarService.html":{}}}],["clientservice",{"_index":526,"title":{"injectables/ClientService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"coverage.html":{},"overview.html":{}}}],["clone",{"_index":3457,"title":{},"body":{"index.html":{}}}],["cloudflare",{"_index":3245,"title":{},"body":{"changelog.html":{}}}],["cluster_appmodule",{"_index":369,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":370,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":585,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":587,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":586,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_cryptomodule",{"_index":1268,"title":{},"body":{"modules/CryptoModule.html":{},"overview.html":{}}}],["cluster_cryptomodule_exports",{"_index":1270,"title":{},"body":{"modules/CryptoModule.html":{},"overview.html":{}}}],["cluster_cryptomodule_providers",{"_index":1269,"title":{},"body":{"modules/CryptoModule.html":{},"overview.html":{}}}],["cluster_issuermodule",{"_index":1826,"title":{},"body":{"modules/IssuerModule.html":{},"overview.html":{}}}],["cluster_issuermodule_exports",{"_index":1827,"title":{},"body":{"modules/IssuerModule.html":{},"overview.html":{}}}],["cluster_issuermodule_imports",{"_index":1828,"title":{},"body":{"modules/IssuerModule.html":{},"overview.html":{}}}],["cluster_issuermodule_providers",{"_index":1829,"title":{},"body":{"modules/IssuerModule.html":{},"overview.html":{}}}],["cluster_oid4vpmodule",{"_index":2238,"title":{},"body":{"modules/Oid4vpModule.html":{},"overview.html":{}}}],["cluster_oid4vpmodule_exports",{"_index":2240,"title":{},"body":{"modules/Oid4vpModule.html":{},"overview.html":{}}}],["cluster_oid4vpmodule_imports",{"_index":2239,"title":{},"body":{"modules/Oid4vpModule.html":{},"overview.html":{}}}],["cluster_oid4vpmodule_providers",{"_index":2241,"title":{},"body":{"modules/Oid4vpModule.html":{},"overview.html":{}}}],["cluster_presentationsmodule",{"_index":2416,"title":{},"body":{"modules/PresentationsModule.html":{},"overview.html":{}}}],["cluster_presentationsmodule_exports",{"_index":2418,"title":{},"body":{"modules/PresentationsModule.html":{},"overview.html":{}}}],["cluster_presentationsmodule_imports",{"_index":2417,"title":{},"body":{"modules/PresentationsModule.html":{},"overview.html":{}}}],["cluster_presentationsmodule_providers",{"_index":2419,"title":{},"body":{"modules/PresentationsModule.html":{},"overview.html":{}}}],["cluster_registrarmodule",{"_index":2522,"title":{},"body":{"modules/RegistrarModule.html":{},"overview.html":{}}}],["cluster_registrarmodule_exports",{"_index":2525,"title":{},"body":{"modules/RegistrarModule.html":{},"overview.html":{}}}],["cluster_registrarmodule_imports",{"_index":2524,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["cluster_registrarmodule_providers",{"_index":2523,"title":{},"body":{"modules/RegistrarModule.html":{},"overview.html":{}}}],["cluster_resolvermodule",{"_index":2562,"title":{},"body":{"modules/ResolverModule.html":{},"overview.html":{}}}],["cluster_resolvermodule_exports",{"_index":2564,"title":{},"body":{"modules/ResolverModule.html":{},"overview.html":{}}}],["cluster_resolvermodule_providers",{"_index":2563,"title":{},"body":{"modules/ResolverModule.html":{},"overview.html":{}}}],["cluster_sessionmodule",{"_index":2802,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_sessionmodule_exports",{"_index":2804,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_sessionmodule_imports",{"_index":2805,"title":{},"body":{"modules/SessionModule.html":{}}}],["cluster_sessionmodule_providers",{"_index":2803,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_statuslistmodule",{"_index":2950,"title":{},"body":{"modules/StatusListModule.html":{},"overview.html":{}}}],["cluster_statuslistmodule_exports",{"_index":2953,"title":{},"body":{"modules/StatusListModule.html":{},"overview.html":{}}}],["cluster_statuslistmodule_imports",{"_index":2951,"title":{},"body":{"modules/StatusListModule.html":{}}}],["cluster_statuslistmodule_providers",{"_index":2952,"title":{},"body":{"modules/StatusListModule.html":{},"overview.html":{}}}],["cluster_verifiermodule",{"_index":3114,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cluster_verifiermodule_imports",{"_index":3115,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cmd",{"_index":1363,"title":{},"body":{"injectables/CryptoService.html":{}}}],["cn=${subject",{"_index":1384,"title":{},"body":{"injectables/CryptoService.html":{}}}],["cnf",{"_index":1186,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{}}}],["cnonce",{"_index":881,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["cnonceexpiresin",{"_index":891,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["cnonceexpiresinseconds",{"_index":2191,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["code",{"_index":641,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"entities/Session.html":{},"index.html":{},"license.html":{}}}],["code_challenge",{"_index":749,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_method",{"_index":750,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_methods_supported",{"_index":838,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["codecov",{"_index":3224,"title":{},"body":{"changelog.html":{}}}],["colorize",{"_index":459,"title":{},"body":{"modules/AppModule.html":{}}}],["column",{"_index":1054,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{}}}],["column('json",{"_index":1018,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["column('json')@isobject",{"_index":1028,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/PresentationConfig.html":{}}}],["column('varchar",{"_index":1038,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["column({type",{"_index":1695,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{}}}],["combination",{"_index":3648,"title":{},"body":{"license.html":{}}}],["commands",{"_index":1362,"title":{},"body":{"injectables/CryptoService.html":{}}}],["comment",{"_index":3796,"title":{},"body":{"license.html":{}}}],["commercial",{"_index":3764,"title":{},"body":{"license.html":{}}}],["common",{"_index":3543,"title":{},"body":{"license.html":{}}}],["commonoptions",{"_index":1492,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["communicates",{"_index":3422,"title":{},"body":{"index.html":{}}}],["communication",{"_index":3607,"title":{},"body":{"license.html":{}}}],["community",{"_index":3514,"title":{},"body":{"index.html":{}}}],["compact",{"_index":1311,"title":{},"body":{"injectables/CryptoService.html":{}}}],["comparison",{"_index":276,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["compatible",{"_index":3438,"title":{},"body":{"index.html":{}}}],["compiled",{"_index":3573,"title":{},"body":{"license.html":{}}}],["complete",{"_index":2447,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["completed",{"_index":2727,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["completion",{"_index":2772,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["compliance",{"_index":3804,"title":{},"body":{"license.html":{}}}],["complies",{"_index":3698,"title":{},"body":{"license.html":{}}}],["computer",{"_index":3761,"title":{},"body":{"license.html":{}}}],["concatenate",{"_index":3103,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["condition",{"_index":2833,"title":{},"body":{"injectables/SessionService.html":{}}}],["conditions",{"_index":3527,"title":{},"body":{"license.html":{}}}],["config",{"_index":60,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["config.accesscertificateid",{"_index":218,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["config.authenticationconfig",{"_index":920,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["config.config",{"_index":683,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.dto",{"_index":651,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["config.dto.ts",{"_index":626,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/VCT.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["config.dto.ts:10",{"_index":2996,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:12",{"_index":2997,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:14",{"_index":2998,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:16",{"_index":3000,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:18",{"_index":3001,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:22",{"_index":684,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{}}}],["config.dto.ts:23",{"_index":2372,"title":{},"body":{"classes/PresentationDuringIssuance.html":{}}}],["config.dto.ts:25",{"_index":2373,"title":{},"body":{"classes/PresentationDuringIssuance.html":{}}}],["config.dto.ts:31",{"_index":686,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{}}}],["config.dto.ts:45",{"_index":2377,"title":{},"body":{"classes/PresentationDuringIssuanceConfig.html":{}}}],["config.dto.ts:6",{"_index":3002,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:60",{"_index":644,"title":{},"body":{"classes/AuthenticationConfigDto.html":{}}}],["config.dto.ts:69",{"_index":634,"title":{},"body":{"classes/AuthenticationConfigDto.html":{}}}],["config.dto.ts:8",{"_index":2999,"title":{},"body":{"classes/VCT.html":{}}}],["config.entity",{"_index":1060,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["config.entity.ts",{"_index":1689,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"coverage.html":{}}}],["config.entity.ts:17",{"_index":1704,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["config.entity.ts:24",{"_index":1707,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["config.entity.ts:32",{"_index":2366,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:33",{"_index":1700,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:38",{"_index":2369,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:44",{"_index":1694,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["config.entity.ts:50",{"_index":1697,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["config.entity.ts:56",{"_index":1705,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.helper",{"_index":812,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["config.helper.ts",{"_index":664,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{},"coverage.html":{}}}],["config.helper.ts:14",{"_index":678,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.helper.ts:23",{"_index":675,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.helper.ts:32",{"_index":680,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.helper.ts:44",{"_index":673,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.id",{"_index":156,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["config.method",{"_index":681,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.service",{"_index":1144,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["config.service.ts",{"_index":1066,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["config.service.ts:10",{"_index":1071,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:17",{"_index":1989,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:23",{"_index":1997,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:25",{"_index":1081,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:37",{"_index":1085,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:47",{"_index":1999,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:50",{"_index":1087,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:59",{"_index":1990,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:63",{"_index":1074,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/LoggerConfigService.html":{}}}],["config.service.ts:67",{"_index":1996,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:71",{"_index":1995,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:75",{"_index":1993,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:79",{"_index":1992,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:86",{"_index":2000,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:94",{"_index":2004,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.ts",{"_index":2518,"title":{},"body":{"classes/RegistrarConfig.html":{},"coverage.html":{}}}],["config.ts:12",{"_index":2520,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["config.ts:8",{"_index":2521,"title":{},"body":{"classes/RegistrarConfig.html":{}}}],["config/credential",{"_index":1065,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["configmodule",{"_index":386,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["configmodule.forroot",{"_index":420,"title":{},"body":{"modules/AppModule.html":{}}}],["configs",{"_index":1047,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{}}}],["configservice",{"_index":34,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["configservice.get",{"_index":450,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["configservice.get('jwt_issuer",{"_index":1936,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('jwt_secret",{"_index":1930,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('keycloak_client_id",{"_index":1928,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('keycloak_internal_issuer_url",{"_index":1927,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('keycloak_internal_issuer_url')}/protocol/openid",{"_index":1916,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('log_level",{"_index":453,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('oidc",{"_index":1908,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.getorthrow('db_database",{"_index":1504,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_host",{"_index":1496,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_password",{"_index":1502,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_port",{"_index":1498,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_username",{"_index":1500,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('folder",{"_index":494,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["configservie",{"_index":1461,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["configurable",{"_index":1353,"title":{},"body":{"injectables/CryptoService.html":{}}}],["configuration",{"_index":97,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"index.html":{},"license.html":{}}}],["configuration(@token",{"_index":2407,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["configuration(user",{"_index":2382,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["configurations",{"_index":105,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"miscellaneous/typealiases.html":{}}}],["configure",{"_index":3458,"title":{},"body":{"index.html":{}}}],["configured",{"_index":1935,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/PresentationRequest.html":{},"injectables/SessionService.html":{}}}],["conflictexception",{"_index":800,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["conflictexception('authorization",{"_index":862,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["conflictexception('issuer",{"_index":2599,"title":{},"body":{"injectables/ResolverService.html":{}}}],["conflictexception('no",{"_index":2343,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["conflictexception('request",{"_index":2490,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["connect",{"_index":3517,"title":{},"body":{"index.html":{}}}],["connect/certs",{"_index":1917,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["connect/token",{"_index":122,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["connection",{"_index":1675,"title":{},"body":{"controllers/HealthController.html":{}}}],["consequential",{"_index":3755,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":3775,"title":{},"body":{"license.html":{}}}],["console",{"_index":3227,"title":{},"body":{"changelog.html":{}}}],["console.error",{"_index":272,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["console.error('error",{"_index":224,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["console.log('keycloak",{"_index":1921,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["console.log('session",{"_index":2086,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["console.log(err",{"_index":2500,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["console.warn('access",{"_index":229,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["conspicuously",{"_index":3616,"title":{},"body":{"license.html":{}}}],["const",{"_index":110,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{},"miscellaneous/variables.html":{}}}],["constitutes",{"_index":3657,"title":{},"body":{"license.html":{}}}],["constructor",{"_index":93,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{}}}],["constructor(authzservice",{"_index":2092,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["constructor(configservice",{"_index":778,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["constructor(configservie",{"_index":1459,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["constructor(credentialconfigrepository",{"_index":1069,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["constructor(crpytoservice",{"_index":1180,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["constructor(cryptoservice",{"_index":2249,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["constructor(httpservice",{"_index":2437,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{}}}],["constructor(issuanceconfigrepo",{"_index":1746,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["constructor(logger",{"_index":2760,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["constructor(private",{"_index":1152,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/ResolverService.html":{},"controllers/StatusListController.html":{}}}],["constructor(reflector",{"_index":1864,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["constructor(sessionrepository",{"_index":2817,"title":{},"body":{"injectables/SessionService.html":{}}}],["construed",{"_index":3696,"title":{},"body":{"license.html":{}}}],["contained",{"_index":3684,"title":{},"body":{"license.html":{}}}],["containing",{"_index":620,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{}}}],["content",{"_index":487,"title":{},"body":{"modules/AppModule.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/StatusListService.html":{},"index.html":{},"license.html":{}}}],["contents",{"_index":3692,"title":{},"body":{"license.html":{}}}],["context",{"_index":1870,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{}}}],["context.flowtype",{"_index":2788,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.getclass",{"_index":1878,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":1877,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["context.sessionid",{"_index":2790,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.switchtohttp().getrequest",{"_index":2700,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":2701,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["context.tenantid",{"_index":2791,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.ts",{"_index":2662,"title":{},"body":{"interfaces/SessionLogContext.html":{},"coverage.html":{}}}],["context.ts:21",{"_index":2664,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["contract",{"_index":3552,"title":{},"body":{"license.html":{}}}],["contributing",{"_index":3501,"title":{},"body":{"index.html":{}}}],["contributing.md",{"_index":3510,"title":{},"body":{"index.html":{}}}],["contribution",{"_index":3598,"title":{},"body":{"license.html":{}}}],["contribution(s",{"_index":3646,"title":{},"body":{"license.html":{}}}],["contributions",{"_index":3700,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":3619,"title":{},"body":{"license.html":{}}}],["contributors",{"_index":3506,"title":{},"body":{"index.html":{}}}],["contributory",{"_index":3658,"title":{},"body":{"license.html":{}}}],["control",{"_index":3541,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":3542,"title":{},"body":{"license.html":{}}}],["controller",{"_index":343,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["controller(':tenantid/.well",{"_index":3175,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["controller(':tenantid/authorize",{"_index":730,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["controller(':tenantid/oid4vp",{"_index":2230,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["controller(':tenantid/status",{"_index":2874,"title":{},"body":{"controllers/StatusListController.html":{}}}],["controller(':tenantid/vci",{"_index":2076,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["controller('auth",{"_index":536,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('credentials",{"_index":1170,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["controller('health",{"_index":1681,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('issuer",{"_index":1150,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{}}}],["controller('presentation",{"_index":2400,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["controller('session",{"_index":2655,"title":{},"body":{"controllers/SessionController.html":{}}}],["controllers",{"_index":345,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"controllers/WellKnownController.html":{},"overview.html":{}}}],["conversions",{"_index":3574,"title":{},"body":{"license.html":{}}}],["convert",{"_index":1771,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/VaultKeyService.html":{}}}],["converts",{"_index":3012,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["coordinate",{"_index":1519,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["copies",{"_index":3664,"title":{},"body":{"license.html":{}}}],["copy",{"_index":2736,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["copyright",{"_index":3536,"title":{},"body":{"license.html":{}}}],["core",{"_index":3431,"title":{},"body":{"index.html":{}}}],["correct",{"_index":912,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["corresponds",{"_index":661,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"miscellaneous/typealiases.html":{}}}],["counterclaim",{"_index":3654,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":3283,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covered",{"_index":250,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["cp",{"_index":3463,"title":{},"body":{"index.html":{}}}],["crddential",{"_index":1031,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["create",{"_index":290,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["create(session",{"_index":2824,"title":{},"body":{"injectables/SessionService.html":{}}}],["create(tenantid",{"_index":3008,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["create_authorization_request",{"_index":2269,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest",{"_index":2247,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest(requestid",{"_index":2251,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationservermetadata",{"_index":823,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["createcredentialoffer",{"_index":2141,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["created",{"_index":189,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"injectables/VaultKeyService.html":{}}}],["createdat",{"_index":1690,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{}}}],["createentry",{"_index":2932,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["createentry(session",{"_index":2963,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createhash",{"_index":1314,"title":{},"body":{"injectables/CryptoService.html":{}}}],["createhash(alg.replace",{"_index":1426,"title":{},"body":{"injectables/CryptoService.html":{}}}],["createheaderandpayload",{"_index":2882,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["createkeydto",{"_index":3043,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["createlist",{"_index":2957,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createlist(tenantid",{"_index":2913,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["createoffer",{"_index":2090,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["createoffer(body",{"_index":2095,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["createparamdecorator",{"_index":2991,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["createrequest",{"_index":2248,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createrequest(requestid",{"_index":2255,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["creates",{"_index":1260,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/Oid4vpService.html":{},"injectables/VaultKeyService.html":{}}}],["cred",{"_index":2176,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["cred.length",{"_index":2181,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential",{"_index":646,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"controllers/WellKnownController.html":{},"index.html":{}}}],["credential(req",{"_index":2063,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["credential_configurations_supported",{"_index":1105,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{}}}],["credential_configurations_supported[value.id",{"_index":1211,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credential_creation",{"_index":2797,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_endpoint",{"_index":1106,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["credential_issuance",{"_index":2796,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_issuer",{"_index":1107,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["credential_issuer}/vci/credential",{"_index":2124,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential_issuer}/vci/notification",{"_index":2125,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential_request",{"_index":2163,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential_revoked",{"_index":2032,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["credential_verification",{"_index":2799,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credentialconfig",{"_index":1008,"title":{"entities/CredentialConfig.html":{}},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialconfig.issuanceconfig",{"_index":1699,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["credentialconfig.schema",{"_index":1244,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.vct",{"_index":1239,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.vct.vct",{"_index":1240,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigid",{"_index":1767,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialconfigrepo",{"_index":1182,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigrepository",{"_index":1072,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["credentialconfigs",{"_index":1691,"title":{},"body":{"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{}}}],["credentialconfigservice",{"_index":1063,"title":{"injectables/CredentialConfigService.html":{}},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"coverage.html":{},"overview.html":{}}}],["credentialconfiguration",{"_index":1213,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.claims",{"_index":1218,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.disclosureframe",{"_index":1219,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigurationid",{"_index":1188,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["credentialconfigurationids",{"_index":2048,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{}}}],["credentialconfigurationsupported",{"_index":1027,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{}}}],["credentialcount",{"_index":2352,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialid",{"_index":1195,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialissuer",{"_index":2121,"title":{},"body":{"injectables/Oid4vciService.html":{},"controllers/WellKnownController.html":{}}}],["credentialissuermetadatadto",{"_index":1097,"title":{"classes/CredentialIssuerMetadataDto.html":{}},"body":{"classes/CredentialIssuerMetadataDto.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["credentialofferobject",{"_index":2622,"title":{},"body":{"entities/Session.html":{}}}],["credentialpayload",{"_index":2144,"title":{},"body":{"injectables/Oid4vciService.html":{},"entities/Session.html":{},"injectables/WebhookService.html":{}}}],["credentialrequest",{"_index":2148,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentialresponse",{"_index":2071,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{}}}],["credentials",{"_index":161,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"injectables/WebhookService.html":{},"index.html":{}}}],["credentials.dto",{"_index":530,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials.dto.ts",{"_index":993,"title":{},"body":{"classes/ClientCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:5",{"_index":994,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.dto.ts:7",{"_index":995,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.length",{"_index":2189,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["credentials.push(cred",{"_index":2178,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentials.push(credential",{"_index":1770,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentials.split",{"_index":567,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials/credential",{"_index":1760,"title":{},"body":{"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["credentials/credentials.controller",{"_index":1842,"title":{},"body":{"modules/IssuerModule.html":{}}}],["credentials/credentials.service",{"_index":1169,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{}}}],["credentials/entities/credential.entity",{"_index":1710,"title":{},"body":{"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["credentials?.length",{"_index":2353,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialsconfigservice",{"_index":1747,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialscontroller",{"_index":1128,"title":{"controllers/CredentialsController.html":{}},"body":{"controllers/CredentialsController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialsissued",{"_index":2188,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentialsize",{"_index":2180,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentialsmetadatacontroller",{"_index":1158,"title":{"controllers/CredentialsMetadataController.html":{}},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialsservice",{"_index":1151,"title":{"injectables/CredentialsService.html":{}},"body":{"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"coverage.html":{},"overview.html":{}}}],["credentialtype",{"_index":2766,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["cron",{"_index":2837,"title":{},"body":{"injectables/SessionService.html":{}}}],["cross",{"_index":3652,"title":{},"body":{"license.html":{}}}],["crpytoservice",{"_index":1184,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["crt",{"_index":14,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/RegistrarService.html":{}}}],["crv",{"_index":1510,"title":{},"body":{"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"classes/JwksResponseDto.html":{}}}],["crypto",{"_index":1463,"title":{},"body":{"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{}}}],["crypto.service",{"_index":1273,"title":{},"body":{"modules/CryptoModule.html":{}}}],["crypto.webcrypto.subtle.exportkey",{"_index":3845,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.generatekey",{"_index":3843,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.importkey",{"_index":3848,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.sign",{"_index":3849,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.verify",{"_index":3855,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto/crypto",{"_index":1602,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["crypto/crypto.module",{"_index":388,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{}}}],["crypto/crypto.service",{"_index":48,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["crypto/encryption/encryption.service",{"_index":2263,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["crypto/key/crypto/crypto.module",{"_index":404,"title":{},"body":{"modules/AppModule.html":{}}}],["crypto/key/key.module",{"_index":402,"title":{},"body":{"modules/AppModule.html":{}}}],["crypto_alg",{"_index":3840,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto_validation_schema",{"_index":403,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cryptographic",{"_index":99,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"index.html":{}}}],["cryptoimplementation",{"_index":1245,"title":{"interfaces/CryptoImplementation.html":{}},"body":{"interfaces/CryptoImplementation.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cryptokey",{"_index":1539,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{}}}],["cryptomodule",{"_index":372,"title":{"modules/CryptoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["cryptoservice",{"_index":47,"title":{"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{},"coverage.html":{},"overview.html":{}}}],["cryptotype",{"_index":1464,"title":{},"body":{"injectables/CryptoService-1.html":{},"injectables/VaultKeyService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["csr",{"_index":1390,"title":{},"body":{"injectables/CryptoService.html":{}}}],["ctx",{"_index":2992,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":2993,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["curl",{"_index":3478,"title":{},"body":{"index.html":{}}}],["current_timestamp",{"_index":1696,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["currentdate",{"_index":1421,"title":{},"body":{"injectables/CryptoService.html":{}}}],["currently",{"_index":332,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["curve",{"_index":1508,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["customary",{"_index":3719,"title":{},"body":{"license.html":{}}}],["customprops",{"_index":468,"title":{},"body":{"modules/AppModule.html":{}}}],["d",{"_index":3481,"title":{},"body":{"index.html":{},"license.html":{}}}],["d6205da",{"_index":3276,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":3752,"title":{},"body":{"license.html":{}}}],["data",{"_index":226,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TokenPayload.html":{},"injectables/WebhookService.html":{},"miscellaneous/variables.html":{}}}],["data.revoked",{"_index":228,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["database",{"_index":1503,"title":{},"body":{"modules/DatabaseModule.html":{},"controllers/HealthController.html":{},"index.html":{}}}],["database/database.module",{"_index":410,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":373,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":169,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"license.html":{}}}],["date((payload.exp",{"_index":1423,"title":{},"body":{"injectables/CryptoService.html":{}}}],["date().gettime",{"_index":1233,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{}}}],["date(date.now",{"_index":2862,"title":{},"body":{"injectables/SessionService.html":{}}}],["date(token.expiresat",{"_index":171,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["date.gettime",{"_index":183,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["date.now",{"_index":2718,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["day",{"_index":2842,"title":{},"body":{"injectables/SessionService.html":{}}}],["days",{"_index":1387,"title":{},"body":{"injectables/CryptoService.html":{}}}],["db",{"_index":1682,"title":{},"body":{"controllers/HealthController.html":{},"changelog.html":{}}}],["db_database",{"_index":1489,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_host",{"_index":1480,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_password",{"_index":1488,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_port",{"_index":1485,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_type",{"_index":1477,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_username",{"_index":1487,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_validation_schema",{"_index":1476,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbtype",{"_index":1491,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dc+sd",{"_index":2296,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcql",{"_index":2367,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["dcql_query",{"_index":249,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{}}}],["dcql_query.length",{"_index":2284,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcqlquerycount",{"_index":2282,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dd",{"_index":464,"title":{},"body":{"modules/AppModule.html":{}}}],["de",{"_index":985,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["deal",{"_index":1801,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["debug",{"_index":430,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["debugging",{"_index":1664,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["declarations",{"_index":365,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["decode",{"_index":1662,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodedvc",{"_index":2492,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.header",{"_index":2495,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.payload",{"_index":2494,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodejwt",{"_index":1634,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodejwt(token",{"_index":1666,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodetoken",{"_index":1880,"title":{},"body":{"injectables/JwtService.html":{}}}],["decodetoken(token",{"_index":1665,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decorator",{"_index":3858,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":311,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"entities/CredentialConfig.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"controllers/IssuerManagementController.html":{},"entities/KeyEntity.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["decryptjwe",{"_index":1528,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["decryptjwe(response",{"_index":1532,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["dedicated",{"_index":2359,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["deeppartial",{"_index":2825,"title":{},"body":{"injectables/SessionService.html":{}}}],["default",{"_index":433,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"entities/IssuanceConfig.html":{},"injectables/JwtService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"miscellaneous/variables.html":{}}}],["defend",{"_index":3781,"title":{},"body":{"license.html":{}}}],["define",{"_index":743,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"entities/PresentationConfig.html":{}}}],["defined",{"_index":313,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"classes/ClientCredentialsDto.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"license.html":{}}}],["defines",{"_index":2529,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["definition",{"_index":3545,"title":{},"body":{"license.html":{}}}],["definitions",{"_index":3530,"title":{},"body":{"license.html":{}}}],["delete",{"_index":1067,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["delete(':id",{"_index":1135,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/PresentationManagementController.html":{}}}],["delete(tenantid",{"_index":1073,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["deleteconfiguration",{"_index":2380,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(@param('id",{"_index":2410,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(id",{"_index":2384,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteissuanceconfiguration",{"_index":1131,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["deleteissuanceconfiguration(id",{"_index":1134,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{}}}],["deleteissuanceconfiguration(tenantid",{"_index":1750,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["deletepresentationconfig",{"_index":2433,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletepresentationconfig(id",{"_index":2444,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletes",{"_index":1075,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["deletion",{"_index":2446,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deliberate",{"_index":3747,"title":{},"body":{"license.html":{}}}],["dependencies",{"_index":363,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":3204,"title":{},"body":{"changelog.html":{}}}],["deployment",{"_index":3210,"title":{},"body":{"changelog.html":{}}}],["der",{"_index":3013,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["der.slice(2",{"_index":3081,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["derivative",{"_index":3583,"title":{},"body":{"license.html":{}}}],["derived",{"_index":3585,"title":{},"body":{"license.html":{}}}],["dersignature",{"_index":3014,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["dertojwtsignature",{"_index":3005,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["dertojwtsignature(dersignature",{"_index":3010,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["desc",{"_index":2485,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["describing",{"_index":3720,"title":{},"body":{"license.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"interfaces/CryptoImplementation.html":{},"classes/EC_Public.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"interfaces/TokenPayload.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"license.html":{},"properties.html":{}}}],["designated",{"_index":3618,"title":{},"body":{"license.html":{}}}],["details",{"_index":690,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/IssuanceDto.html":{},"entities/PresentationConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{}}}],["determines",{"_index":628,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["determining",{"_index":3738,"title":{},"body":{"license.html":{}}}],["dev",{"_index":983,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["developers",{"_index":3504,"title":{},"body":{"index.html":{}}}],["development",{"_index":3442,"title":{},"body":{"index.html":{}}}],["development/testing",{"_index":962,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["df29d1e",{"_index":3253,"title":{},"body":{"changelog.html":{}}}],["different",{"_index":280,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["differnt",{"_index":2195,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["digest",{"_index":1199,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/PresentationsService.html":{}}}],["diplomatic",{"_index":3393,"title":{},"body":{"index.html":{}}}],["direct",{"_index":3548,"title":{},"body":{"license.html":{}}}],["direct_post.jwt",{"_index":2289,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["direction",{"_index":3551,"title":{},"body":{"license.html":{}}}],["directly",{"_index":935,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["disable",{"_index":175,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["disclaimer",{"_index":3723,"title":{},"body":{"license.html":{}}}],["disclosure",{"_index":1034,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["disclosureframe",{"_index":1013,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{}}}],["discord",{"_index":3513,"title":{},"body":{"index.html":{}}}],["discoveryendpoint",{"_index":123,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["discussing",{"_index":3613,"title":{},"body":{"license.html":{}}}],["display",{"_index":1108,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{},"license.html":{}}}],["display.json",{"_index":989,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vciService.html":{}}}],["displayinfo",{"_index":981,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["distribute",{"_index":3634,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":3686,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":3529,"title":{},"body":{"license.html":{}}}],["dns",{"_index":238,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["docker",{"_index":3273,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["document",{"_index":2575,"title":{},"body":{"injectables/ResolverService.html":{},"license.html":{}}}],["documentation",{"_index":3190,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{},"license.html":{}}}],["documents",{"_index":2443,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["don't",{"_index":3794,"title":{},"body":{"license.html":{}}}],["dpop",{"_index":866,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dpop_jkt",{"_index":751,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["dpop_signing_alg_values_supported",{"_index":832,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dpopvalue",{"_index":864,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dto",{"_index":611,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/IssuanceDto.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["dto/auth",{"_index":2477,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["dto/authentication",{"_index":1711,"title":{},"body":{"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{}}}],["dto/authorization",{"_index":2229,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["dto/authorize",{"_index":725,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dto/client",{"_index":529,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/credential",{"_index":3173,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["dto/issuance.dto",{"_index":1724,"title":{},"body":{"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["dto/issuer",{"_index":2578,"title":{},"body":{"injectables/ResolverService.html":{}}}],["dto/jwks",{"_index":3171,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["dto/notification",{"_index":2072,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{}}}],["dto/oauth",{"_index":3172,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["dto/offer",{"_index":2114,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["dto/par",{"_index":729,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["dto/presentation",{"_index":2265,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dto/status",{"_index":2890,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["dto/token",{"_index":533,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/vp",{"_index":2371,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["dummy",{"_index":1368,"title":{},"body":{"injectables/CryptoService.html":{}}}],["dummy.csr",{"_index":1343,"title":{},"body":{"injectables/CryptoService.html":{}}}],["dummy_key.pem",{"_index":1341,"title":{},"body":{"injectables/CryptoService.html":{}}}],["dummycsr",{"_index":1342,"title":{},"body":{"injectables/CryptoService.html":{}}}],["dummykey",{"_index":1340,"title":{},"body":{"injectables/CryptoService.html":{}}}],["duration",{"_index":2721,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["duration}ms",{"_index":2728,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["during",{"_index":1026,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/WebhookService.html":{},"index.html":{}}}],["dynamicmodule",{"_index":1945,"title":{},"body":{"modules/KeyModule.html":{}}}],["e",{"_index":3470,"title":{},"body":{"index.html":{}}}],["e.g",{"_index":2666,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["e3e5971",{"_index":3226,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":660,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/IssuanceDto.html":{},"injectables/Oid4vciService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/VaultKeyService.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["early",{"_index":3441,"title":{},"body":{"index.html":{}}}],["easier",{"_index":274,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["easily",{"_index":3425,"title":{},"body":{"index.html":{}}}],["easy",{"_index":3447,"title":{},"body":{"index.html":{}}}],["ec",{"_index":1376,"title":{},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["ec_paramgen_curve:prime256v1",{"_index":1378,"title":{},"body":{"injectables/CryptoService.html":{}}}],["ec_public",{"_index":1325,"title":{"classes/EC_Public.html":{}},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"coverage.html":{}}}],["ecdh",{"_index":1558,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["ecdsa",{"_index":3045,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["echo",{"_index":3465,"title":{},"body":{"index.html":{}}}],["ecosystem",{"_index":3406,"title":{},"body":{"index.html":{}}}],["ed25519",{"_index":1468,"title":{},"body":{"injectables/CryptoService-1.html":{},"injectables/VaultKeyService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["ed25519').default('es256",{"_index":3842,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eddsa",{"_index":2294,"title":{},"body":{"injectables/Oid4vpService.html":{},"miscellaneous/variables.html":{}}}],["editorial",{"_index":3586,"title":{},"body":{"license.html":{}}}],["elaborations",{"_index":3589,"title":{},"body":{"license.html":{}}}],["electronic",{"_index":3432,"title":{},"body":{"index.html":{},"license.html":{}}}],["element",{"_index":1032,"title":{},"body":{"entities/CredentialConfig.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["elements",{"_index":1126,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["elliptic",{"_index":1507,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["emits",{"_index":2685,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["emitter",{"_index":65,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["emitter.module",{"_index":416,"title":{},"body":{"modules/AppModule.html":{}}}],["emitter/dist/event",{"_index":415,"title":{},"body":{"modules/AppModule.html":{}}}],["empty",{"_index":291,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["enabled",{"_index":134,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/RegistrarService.html":{}}}],["enabledebugmode",{"_index":2010,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["enablehttplogger",{"_index":449,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["enablesessionlogger",{"_index":2009,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["enclosed",{"_index":3790,"title":{},"body":{"license.html":{}}}],["encode",{"_index":3108,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encodedheader",{"_index":3069,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encodedheader}.${encodedpayload",{"_index":3075,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encodedheader}.${encodedpayload}.${signature",{"_index":3077,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encodedpayload",{"_index":3072,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["encodeuricomponent(key)}=${encodeuricomponent(value",{"_index":2339,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["encryption.json",{"_index":1547,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryption/encryption.service",{"_index":1274,"title":{},"body":{"modules/CryptoModule.html":{}}}],["encryptionservice",{"_index":1271,"title":{"injectables/EncryptionService.html":{}},"body":{"modules/CryptoModule.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"coverage.html":{},"overview.html":{}}}],["end",{"_index":1414,"title":{},"body":{"injectables/CryptoService.html":{},"license.html":{}}}],["endpoint",{"_index":514,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/HealthController.html":{},"controllers/IssuerManagementController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["endpoints",{"_index":695,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/HealthController.html":{},"controllers/WellKnownController.html":{}}}],["ensure",{"_index":164,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["entities",{"_index":1009,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{},"license.html":{},"overview.html":{}}}],["entities/credential.entity",{"_index":1091,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{}}}],["entities/issuance",{"_index":1759,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["entities/key.entity",{"_index":1952,"title":{},"body":{"modules/KeyModule.html":{}}}],["entities/presentation",{"_index":2394,"title":{},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["entities/session.entity",{"_index":2650,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["entities/status",{"_index":2888,"title":{},"body":{"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["entity",{"_index":1007,"title":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{}},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{},"coverage.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["entries",{"_index":2897,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["entries.length",{"_index":2947,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["entry",{"_index":2931,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["enum",{"_index":327,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/PresentationRequest.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["enumerations",{"_index":3389,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":3239,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["env.example",{"_index":3464,"title":{},"body":{"index.html":{}}}],["environment",{"_index":2003,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/RegistrarModule.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["err",{"_index":1919,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/WebhookService.html":{}}}],["err.message",{"_index":2515,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/WebhookService.html":{}}}],["error",{"_index":251,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{}}}],["error('credential",{"_index":914,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["error('error",{"_index":240,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["error('invalid",{"_index":2150,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/VaultKeyService.html":{}}}],["error('issuer",{"_index":2581,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error('key",{"_index":1626,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/ResolverService.html":{}}}],["error('no",{"_index":2503,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["error('signer",{"_index":1437,"title":{},"body":{"injectables/CryptoService.html":{}}}],["error('stack",{"_index":2937,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["error('subject",{"_index":2589,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error(`error",{"_index":3152,"title":{},"body":{"injectables/WebhookService.html":{}}}],["error(`invalid",{"_index":1660,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["error(`unsupported",{"_index":1472,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["error.message",{"_index":1661,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.name",{"_index":2732,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.stack",{"_index":2735,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error_description",{"_index":902,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["errors",{"_index":2747,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["es",{"_index":1551,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["es256",{"_index":833,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"miscellaneous/typealiases.html":{}}}],["es256.getverifier(publickey",{"_index":2497,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["es256k",{"_index":2299,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["es384",{"_index":2295,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["eslint",{"_index":174,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["eslint/no",{"_index":179,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["etc",{"_index":3498,"title":{},"body":{"index.html":{}}}],["eudi",{"_index":982,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"index.html":{},"properties.html":{}}}],["eudiplo",{"_index":352,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"index.html":{}}}],["even",{"_index":3436,"title":{},"body":{"index.html":{},"license.html":{}}}],["event",{"_index":972,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/NotificationRequestDto.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"license.html":{}}}],["eventemitter",{"_index":947,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{}}}],["eventemitter2",{"_index":942,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{}}}],["eventemittermodule",{"_index":414,"title":{},"body":{"modules/AppModule.html":{}}}],["eventemittermodule.forroot",{"_index":499,"title":{},"body":{"modules/AppModule.html":{}}}],["events",{"_index":68,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["events.ts",{"_index":3298,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["example",{"_index":317,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["examples",{"_index":507,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["except",{"_index":3636,"title":{},"body":{"license.html":{}}}],["exchange",{"_index":719,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/SessionLoggerService.html":{}}}],["excluding",{"_index":3615,"title":{},"body":{"license.html":{}}}],["exclusive",{"_index":3627,"title":{},"body":{"license.html":{}}}],["execsync",{"_index":1327,"title":{},"body":{"injectables/CryptoService.html":{}}}],["execsync(cmd",{"_index":1364,"title":{},"body":{"injectables/CryptoService.html":{}}}],["executed",{"_index":3710,"title":{},"body":{"license.html":{}}}],["execution",{"_index":2680,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["executioncontext",{"_index":1868,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["exercise",{"_index":3742,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":3562,"title":{},"body":{"license.html":{}}}],["exist",{"_index":289,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialsService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/IssuanceService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"index.html":{}}}],["existing",{"_index":202,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"index.html":{}}}],["exists",{"_index":205,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialConfigService.html":{},"injectables/CryptoService.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["existssync",{"_index":54,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["existssync(certout",{"_index":1352,"title":{},"body":{"injectables/CryptoService.html":{}}}],["existssync(dummykey",{"_index":1371,"title":{},"body":{"injectables/CryptoService.html":{}}}],["existssync(file",{"_index":1406,"title":{},"body":{"injectables/CryptoService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["existssync(filepath",{"_index":288,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["existssync(folder",{"_index":978,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["existssync(join(folder",{"_index":1408,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["existssync(this.folder",{"_index":1331,"title":{},"body":{"injectables/CryptoService.html":{}}}],["existssync(this.privateenncryptionpath",{"_index":1549,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exp",{"_index":2306,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["expandvariables",{"_index":445,"title":{},"body":{"modules/AppModule.html":{}}}],["expected",{"_index":2052,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["expectedcode",{"_index":879,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expectednonce",{"_index":2173,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["expectedpreauthorizedcode",{"_index":874,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expectedtxcode",{"_index":876,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expiration",{"_index":2364,"title":{},"body":{"classes/ParResponseDto.html":{}}}],["expirationdate",{"_index":170,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["expirationdate.gettime",{"_index":182,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["expire",{"_index":1934,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expires_in",{"_index":548,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"classes/ParResponseDto.html":{},"classes/TokenResponse.html":{}}}],["expiresin",{"_index":579,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["expiresinseconds",{"_index":888,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["explicitly",{"_index":3702,"title":{},"body":{"license.html":{}}}],["export",{"_index":79,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{}}}],["exportable",{"_index":3050,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["exportjwk",{"_index":1543,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["exportjwk(cryptokey",{"_index":3061,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["exportjwk(secret.privatekey",{"_index":1555,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exportjwk(secret.publickey",{"_index":1556,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exportpkcs8",{"_index":1594,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["exportpkcs8((await",{"_index":1619,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["exports",{"_index":368,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["exportspki",{"_index":1595,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["exportspki((await",{"_index":1621,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["express",{"_index":722,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"dependencies.html":{},"license.html":{}}}],["extends",{"_index":1861,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{}}}],["extends#integrity",{"_index":2374,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["extension",{"_index":1393,"title":{},"body":{"injectables/CryptoService.html":{}}}],["external",{"_index":552,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["extfile",{"_index":1401,"title":{},"body":{"injectables/CryptoService.html":{}}}],["extract",{"_index":557,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/VaultKeyService.html":{}}}],["extractable",{"_index":1553,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{}}}],["extractjwt",{"_index":1902,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1925,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9",{"_index":546,"title":{},"body":{"controllers/AuthController.html":{}}}],["f15f6ab",{"_index":3196,"title":{},"body":{"changelog.html":{}}}],["f75298f",{"_index":3232,"title":{},"body":{"changelog.html":{}}}],["f7e7505",{"_index":3250,"title":{},"body":{"changelog.html":{}}}],["face",{"_index":3407,"title":{},"body":{"index.html":{}}}],["failed",{"_index":2214,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/SessionLoggerService.html":{}}}],["failure",{"_index":3762,"title":{},"body":{"license.html":{}}}],["fall",{"_index":569,"title":{},"body":{"controllers/AuthController.html":{}}}],["false",{"_index":138,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"injectables/CryptoService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/variables.html":{}}}],["fatal",{"_index":432,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["features",{"_index":3197,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["fee",{"_index":3769,"title":{},"body":{"license.html":{}}}],["fetch",{"_index":2470,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["fields",{"_index":259,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["fifty",{"_index":3555,"title":{},"body":{"license.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"coverage.html":{},"license.html":{}}}],["file.bits",{"_index":2916,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["file.elements[id",{"_index":2942,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["file.jwt",{"_index":2922,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["file.stack.pop",{"_index":2936,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["filed",{"_index":3662,"title":{},"body":{"license.html":{}}}],["filename",{"_index":2891,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["filepath",{"_index":285,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["files",{"_index":3568,"title":{},"body":{"license.html":{}}}],["filesystem",{"_index":1947,"title":{},"body":{"modules/KeyModule.html":{}}}],["filesystemkeyservice",{"_index":1565,"title":{"injectables/FileSystemKeyService.html":{}},"body":{"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"coverage.html":{}}}],["fill(0",{"_index":2907,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["finally",{"_index":2576,"title":{},"body":{"injectables/ResolverService.html":{}}}],["find",{"_index":969,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["findclientbyid",{"_index":996,"title":{},"body":{"injectables/ClientService.html":{}}}],["findclientbyid(clientid",{"_index":970,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["finding",{"_index":225,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["findonebyorfail",{"_index":1215,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["findoptionswhere",{"_index":2831,"title":{},"body":{"injectables/SessionService.html":{}}}],["first",{"_index":2574,"title":{},"body":{"injectables/ResolverService.html":{}}}],["firstvaluefrom",{"_index":2473,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{}}}],["firstvaluefrom(this.httpservice.get(uri)).then",{"_index":2501,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["fitness",{"_index":3735,"title":{},"body":{"license.html":{}}}],["fixes",{"_index":3189,"title":{},"body":{"changelog.html":{}}}],["flow",{"_index":475,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/typealiases.html":{}}}],["flow_complete",{"_index":2794,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_error",{"_index":2795,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_start",{"_index":2792,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flows",{"_index":3194,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["flowtype",{"_index":2161,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["focus",{"_index":3427,"title":{},"body":{"index.html":{}}}],["folder",{"_index":423,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["following",{"_index":3667,"title":{},"body":{"license.html":{}}}],["force_pubkey",{"_index":1397,"title":{},"body":{"injectables/CryptoService.html":{}}}],["foreach((file",{"_index":1405,"title":{},"body":{"injectables/CryptoService.html":{}}}],["form",{"_index":3104,"title":{},"body":{"injectables/VaultKeyService.html":{},"license.html":{}}}],["format",{"_index":24,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"classes/EC_Public.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"license.html":{}}}],["forroot",{"_index":1943,"title":{},"body":{"modules/KeyModule.html":{}}}],["forwardref",{"_index":2422,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["found",{"_index":849,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["foundation",{"_index":358,"title":{},"body":{"controllers/AppController.html":{},"index.html":{},"properties.html":{}}}],["frame",{"_index":1035,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["free",{"_index":2930,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"license.html":{}}}],["friendly",{"_index":3452,"title":{},"body":{"index.html":{}}}],["fs",{"_index":944,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["full",{"_index":3483,"title":{},"body":{"index.html":{}}}],["function",{"_index":142,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":666,"title":{"miscellaneous/functions.html":{}},"body":{"classes/AuthenticationConfigHelper.html":{},"miscellaneous/functions.html":{}}}],["further",{"_index":2631,"title":{},"body":{"entities/Session.html":{}}}],["g",{"_index":2128,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["general",{"_index":3248,"title":{},"body":{"changelog.html":{}}}],["generate",{"_index":1372,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/PresentationManagementController.html":{}}}],["generated",{"_index":46,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["generated/client.gen",{"_index":39,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["generatekeypair",{"_index":1251,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/EncryptionService.html":{},"miscellaneous/variables.html":{}}}],["generatekeypair('ecdh",{"_index":1550,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["generaterandom",{"_index":1429,"title":{},"body":{"injectables/CryptoService.html":{}}}],["generates",{"_index":1255,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/Oid4vpService.html":{}}}],["generatesalt",{"_index":1200,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["generatetoken",{"_index":1636,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["generatetoken(payload",{"_index":1884,"title":{},"body":{"injectables/JwtService.html":{}}}],["generatetokenoptions",{"_index":1632,"title":{"interfaces/GenerateTokenOptions.html":{}},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{}}}],["generation",{"_index":1638,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"changelog.html":{}}}],["generic",{"_index":1248,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/KeyService.html":{},"injectables/SessionLoggerService.html":{}}}],["genpkey",{"_index":1375,"title":{},"body":{"injectables/CryptoService.html":{}}}],["get(':id",{"_index":2643,"title":{},"body":{"controllers/SessionController.html":{}}}],["get('jwks.json",{"_index":3181,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('oauth",{"_index":3162,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('openid",{"_index":3176,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('request/:requestid/:session",{"_index":2231,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["get('request/:requestid/:session')@sessionlogger('session",{"_index":2222,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["get('schema/:id",{"_index":1163,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get('session",{"_index":2085,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["get('status",{"_index":2869,"title":{},"body":{"controllers/StatusListController.html":{}}}],["get('vct/:id",{"_index":1166,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get()@healthcheck",{"_index":1676,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(state",{"_index":2827,"title":{},"body":{"injectables/SessionService.html":{}}}],["get(tenantid",{"_index":1080,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getaccesscertificateid",{"_index":2537,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["getaccesscertificateid(config",{"_index":216,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["getalg",{"_index":1457,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["getall",{"_index":2815,"title":{},"body":{"injectables/SessionService.html":{}}}],["getallsessions",{"_index":2638,"title":{},"body":{"controllers/SessionController.html":{}}}],["getauthorizationserver",{"_index":772,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["getauthorizationserver(tenantid",{"_index":786,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["getby",{"_index":846,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["getby(where",{"_index":2830,"title":{},"body":{"injectables/SessionService.html":{}}}],["getbyid",{"_index":1068,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getbyid(tenantid",{"_index":1084,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getcallbackcontext",{"_index":1277,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getcallbackcontext(tenantid",{"_index":1287,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getcertchain",{"_index":1278,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getcertchain(type",{"_index":1290,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getclients",{"_index":958,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["getconfig",{"_index":2958,"title":{},"body":{"injectables/StatusListService.html":{}}}],["getconfig(tenantid",{"_index":2925,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["getconfigs",{"_index":1132,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfigs(@token",{"_index":1153,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfigs(user",{"_index":1137,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfiguration",{"_index":1979,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getcredential",{"_index":1176,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{}}}],["getcredential(credentialconfigurationid",{"_index":1185,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredential(req",{"_index":2097,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["getcredentialconfiguration",{"_index":1177,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredentialconfiguration(tenantid",{"_index":1189,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcrypto",{"_index":1458,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["getcrypto(alg",{"_index":1465,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["getencryptionpublickey",{"_index":1529,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["getexternaloidcconfig",{"_index":1890,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getexternaloidcconfig(configservice",{"_index":1893,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getheadersfromrequest",{"_index":807,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getheadersfromrequest(req",{"_index":856,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"miscellaneous/functions.html":{}}}],["gethello",{"_index":348,"title":{},"body":{"controllers/AppController.html":{}}}],["getintegratedoauth2config",{"_index":1891,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getintegratedoauth2config(configservice",{"_index":1897,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getissuanceconfiguration",{"_index":1744,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfiguration(tenantid",{"_index":1752,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurationbyid",{"_index":1745,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurationbyid(body.issuanceid",{"_index":2134,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["getissuanceconfigurationbyid(issuanceconfigid",{"_index":1754,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurations",{"_index":1715,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuanceconfigurations(@token",{"_index":1725,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuanceconfigurations(user",{"_index":1718,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getjwk",{"_index":3006,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["getjwk(key",{"_index":3015,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["getjwks",{"_index":1279,"title":{},"body":{"injectables/CryptoService.html":{},"controllers/WellKnownController.html":{}}}],["getjwks(tenantid",{"_index":1295,"title":{},"body":{"injectables/CryptoService.html":{},"controllers/WellKnownController.html":{}}}],["getkeys",{"_index":1570,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["getkeys(tenantid",{"_index":1574,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["getkid",{"_index":1571,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["getkid(tenantid",{"_index":1577,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["getlist",{"_index":2867,"title":{},"body":{"controllers/StatusListController.html":{},"injectables/StatusListService.html":{}}}],["getlist(@param('tenantid",{"_index":2876,"title":{},"body":{"controllers/StatusListController.html":{}}}],["getlist(tenantid",{"_index":2868,"title":{},"body":{"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["getlogformat",{"_index":1980,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getloglevel",{"_index":1981,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getoauth2token",{"_index":503,"title":{},"body":{"controllers/AuthController.html":{}}}],["getoauth2token(body",{"_index":504,"title":{},"body":{"controllers/AuthController.html":{}}}],["getoffer",{"_index":1782,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["getoffer(res",{"_index":1783,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["getorthrow('public_url",{"_index":234,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/IssuerModule.html":{},"injectables/RegistrarService.html":{}}}],["getpresentationconfig",{"_index":668,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{},"injectables/PresentationsService.html":{}}}],["getpresentationconfig(config",{"_index":672,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["getpresentationconfig(id",{"_index":2448,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs",{"_index":2434,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs(tenantid",{"_index":2450,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpublickey",{"_index":1572,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["getpublickey(type",{"_index":1579,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["getrequestwithsession",{"_index":2219,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getrequestwithsession(tenantid",{"_index":2221,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getresponse",{"_index":2220,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["getresponse(body",{"_index":2224,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["gets",{"_index":3020,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["getschema",{"_index":1178,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getschema(credentialconfigurationid",{"_index":1191,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getsession",{"_index":2639,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(@param('id",{"_index":2657,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(id",{"_index":2642,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsigner",{"_index":1252,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getsigner(privatekeyjwk",{"_index":1257,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["getsignjwtcallback",{"_index":1280,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getsignjwtcallback(tenantid",{"_index":1297,"title":{},"body":{"injectables/CryptoService.html":{}}}],["getting",{"_index":1122,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["getvct",{"_index":1179,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getvct(credentialid",{"_index":1193,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getverifier",{"_index":1253,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getverifier(publickeyjwk",{"_index":1262,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["ghcr.io/openwallet",{"_index":3476,"title":{},"body":{"index.html":{}}}],["git",{"_index":3459,"title":{},"body":{"index.html":{}}}],["give",{"_index":3668,"title":{},"body":{"license.html":{}}}],["given",{"_index":1076,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/VaultKeyService.html":{}}}],["global",{"_index":1946,"title":{},"body":{"modules/KeyModule.html":{}}}],["globalthis.headers",{"_index":1294,"title":{},"body":{"injectables/CryptoService.html":{},"miscellaneous/functions.html":{}}}],["goodwill",{"_index":3759,"title":{},"body":{"license.html":{}}}],["governing",{"_index":3808,"title":{},"body":{"license.html":{}}}],["grade",{"_index":3439,"title":{},"body":{"index.html":{}}}],["grant",{"_index":555,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"license.html":{}}}],["grant_type",{"_index":540,"title":{},"body":{"controllers/AuthController.html":{}}}],["granted",{"_index":3564,"title":{},"body":{"license.html":{}}}],["granting",{"_index":3538,"title":{},"body":{"license.html":{}}}],["grants",{"_index":2138,"title":{},"body":{"injectables/Oid4vciService.html":{},"license.html":{}}}],["granttype",{"_index":814,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["granular",{"_index":3192,"title":{},"body":{"changelog.html":{}}}],["graph",{"_index":3813,"title":{},"body":{"modules.html":{}}}],["grossly",{"_index":3748,"title":{},"body":{"license.html":{}}}],["guard",{"_index":676,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["guide",{"_index":3486,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":3511,"title":{},"body":{"index.html":{}}}],["h",{"_index":3480,"title":{},"body":{"index.html":{}}}],["handle",{"_index":707,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["handled",{"_index":1658,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{}}}],["handlenotification",{"_index":2091,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["handlenotification(req",{"_index":2099,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["handler",{"_index":2682,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["handles",{"_index":696,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["handlesigningkeyerror",{"_index":1918,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["handling",{"_index":101,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/WebhookService.html":{},"changelog.html":{}}}],["harmless",{"_index":3783,"title":{},"body":{"license.html":{}}}],["hascerts",{"_index":1281,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hascerts(tenantid",{"_index":1300,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hash",{"_index":1425,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hashalg",{"_index":1224,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["hashalgorithm",{"_index":1318,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hashalgorithm.sha256",{"_index":1445,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hashcallback",{"_index":1442,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hasher",{"_index":1223,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["hasresponsedata",{"_index":3151,"title":{},"body":{"injectables/WebhookService.html":{}}}],["haswebhook",{"_index":2347,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["header",{"_index":315,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["header('content",{"_index":2875,"title":{},"body":{"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["header.kid",{"_index":2603,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c",{"_index":2582,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c.map",{"_index":2584,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header['jwk",{"_index":2593,"title":{},"body":{"injectables/ResolverService.html":{}}}],["headername",{"_index":309,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["headers",{"_index":483,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{}}}],["headers.append(key",{"_index":1454,"title":{},"body":{"injectables/CryptoService.html":{}}}],["headers.authorization",{"_index":559,"title":{},"body":{"controllers/AuthController.html":{}}}],["headers.set(key",{"_index":1455,"title":{},"body":{"injectables/CryptoService.html":{}}}],["headers[session.webhook!.auth.config.headername",{"_index":3134,"title":{},"body":{"injectables/WebhookService.html":{}}}],["headers[webhook.auth.config.headername",{"_index":3155,"title":{},"body":{"injectables/WebhookService.html":{}}}],["health",{"_index":1671,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":1686,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":411,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1678,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1673,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1669,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":374,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["help",{"_index":3516,"title":{},"body":{"index.html":{}}}],["helper",{"_index":1359,"title":{},"body":{"injectables/CryptoService.html":{}}}],["here",{"_index":929,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["hereby",{"_index":3623,"title":{},"body":{"license.html":{}}}],["herein",{"_index":3706,"title":{},"body":{"license.html":{}}}],["hh:mm:ss",{"_index":465,"title":{},"body":{"modules/AppModule.html":{}}}],["hold",{"_index":3782,"title":{},"body":{"license.html":{}}}],["host",{"_index":232,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialsService.html":{},"modules/DatabaseModule.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["hosted",{"_index":1061,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["hostname",{"_index":1357,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{}}}],["host}/${tenantid",{"_index":2271,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${tenantid}/credentials",{"_index":1241,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["host}/${tenantid}/oid4vp/response",{"_index":2287,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["hot",{"_index":2001,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["hour",{"_index":2810,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["hours",{"_index":583,"title":{},"body":{"controllers/AuthController.html":{},"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["hs256",{"_index":1646,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["http",{"_index":2006,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{},"index.html":{}}}],["http://localhost:3000/auth/oauth2/token",{"_index":3479,"title":{},"body":{"index.html":{}}}],["http://www.apache.org/licenses",{"_index":3525,"title":{},"body":{"license.html":{}}}],["http://www.apache.org/licenses/license",{"_index":3806,"title":{},"body":{"license.html":{}}}],["httpmethod",{"_index":802,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["httpmodule",{"_index":1852,"title":{},"body":{"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"modules/VerifierModule.html":{}}}],["https://github.com/openwallet",{"_index":3460,"title":{},"body":{"index.html":{},"properties.html":{}}}],["https://json",{"_index":2604,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["https://openwallet",{"_index":357,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["httpservice",{"_index":1950,"title":{},"body":{"modules/KeyModule.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{}}}],["iat",{"_index":1231,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["id",{"_index":15,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/variables.html":{}}}],["identification",{"_index":3800,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":26,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsMetadataController.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"interfaces/IssuerMetadata.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"coverage.html":{}}}],["identifying",{"_index":3793,"title":{},"body":{"license.html":{}}}],["ids",{"_index":1737,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["idx",{"_index":2935,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["ignore",{"_index":466,"title":{},"body":{"modules/AppModule.html":{}}}],["ignoreexpiration",{"_index":1932,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ignoring",{"_index":948,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["ii",{"_index":3553,"title":{},"body":{"license.html":{}}}],["iii",{"_index":3559,"title":{},"body":{"license.html":{}}}],["image",{"_index":1821,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png",{"_index":1804,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png')@apibody({type",{"_index":1789,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["image/png')@useguards(jwtauthguard)@apisecurity('oauth2')@apibody({type",{"_index":2387,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["imeplement",{"_index":1249,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implement",{"_index":950,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["implementation",{"_index":1469,"title":{},"body":{"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{}}}],["implementation.ts",{"_index":1247,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["implementation.ts:19",{"_index":1254,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:24",{"_index":1259,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:29",{"_index":1263,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implements",{"_index":81,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/FileSystemKeyService.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["implied",{"_index":3731,"title":{},"body":{"license.html":{}}}],["import",{"_index":29,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"license.html":{}}}],["importjwk",{"_index":1321,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/PresentationsService.html":{}}}],["importjwk(payload.cnf.jwk",{"_index":2504,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["importjwk(privatekey",{"_index":1620,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["importjwk(publicjwk",{"_index":1419,"title":{},"body":{"injectables/CryptoService.html":{}}}],["importjwk(publickey",{"_index":1622,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["importpkcs8",{"_index":1596,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["imports",{"_index":385,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{}}}],["importspki",{"_index":1597,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["importspki(key",{"_index":3059,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["improve",{"_index":3198,"title":{},"body":{"changelog.html":{}}}],["improvements",{"_index":3249,"title":{},"body":{"changelog.html":{}}}],["improving",{"_index":3614,"title":{},"body":{"license.html":{}}}],["inability",{"_index":3757,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":3754,"title":{},"body":{"license.html":{}}}],["include",{"_index":3592,"title":{},"body":{"license.html":{}}}],["included",{"_index":1702,"title":{},"body":{"entities/IssuanceConfig.html":{},"injectables/Oid4vciService.html":{},"license.html":{}}}],["includes",{"_index":1733,"title":{},"body":{"classes/IssuanceDto.html":{},"injectables/Oid4vpService.html":{},"entities/Session.html":{},"license.html":{}}}],["including",{"_index":73,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/SessionLogContext.html":{},"license.html":{}}}],["inclusion",{"_index":3602,"title":{},"body":{"license.html":{}}}],["incorporated",{"_index":3621,"title":{},"body":{"license.html":{}}}],["incurred",{"_index":3784,"title":{},"body":{"license.html":{}}}],["indemnify",{"_index":3780,"title":{},"body":{"license.html":{}}}],["indemnity",{"_index":3771,"title":{},"body":{"license.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":2663,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["indexes",{"_index":2898,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["indicated",{"_index":3578,"title":{},"body":{"license.html":{}}}],["indicates",{"_index":28,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/RegistrarService.html":{}}}],["indicating",{"_index":2413,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["indirect",{"_index":3549,"title":{},"body":{"license.html":{}}}],["individual",{"_index":3561,"title":{},"body":{"license.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{}}}],["information",{"_index":356,"title":{},"body":{"controllers/AppController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/IssuerManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["informational",{"_index":3693,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":3645,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":3659,"title":{},"body":{"license.html":{}}}],["inherit",{"_index":1366,"title":{},"body":{"injectables/CryptoService.html":{}}}],["inherited",{"_index":3017,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["init",{"_index":1530,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["init(tenant",{"_index":1583,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["init(tenantid",{"_index":1536,"title":{},"body":{"injectables/EncryptionService.html":{},"classes/KeyService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["initialconfig",{"_index":292,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["initialization",{"_index":2793,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["initialize",{"_index":1605,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"miscellaneous/functions.html":{}}}],["initialized",{"_index":151,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["initializes",{"_index":103,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/CredentialsController.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["inject",{"_index":447,"title":{},"body":{"modules/AppModule.html":{},"injectables/CryptoService.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["inject('keyservice",{"_index":1312,"title":{},"body":{"injectables/CryptoService.html":{}}}],["injectable",{"_index":30,"title":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{},"coverage.html":{}}}],["injectables",{"_index":769,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{},"overview.html":{}}}],["injectrepository",{"_index":1089,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["injectrepository(credentialconfig",{"_index":1092,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{}}}],["injectrepository(issuanceconfig",{"_index":1761,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["injectrepository(presentationconfig",{"_index":2478,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["injectrepository(session",{"_index":2846,"title":{},"body":{"injectables/SessionService.html":{}}}],["injectrepository(statusmapping",{"_index":2893,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["input",{"_index":3065,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["install",{"_index":3269,"title":{},"body":{"changelog.html":{}}}],["instance",{"_index":95,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/VaultKeyService.html":{}}}],["instance.decode(`${data}.${signature",{"_index":2493,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["instanceof",{"_index":1922,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["instead",{"_index":3212,"title":{},"body":{"changelog.html":{}}}],["institute",{"_index":3649,"title":{},"body":{"license.html":{}}}],["institutions",{"_index":3505,"title":{},"body":{"index.html":{}}}],["insufficient_authorization",{"_index":901,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["int",{"_index":2978,"title":{},"body":{"entities/StatusMapping.html":{}}}],["integrated",{"_index":1635,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["integrates",{"_index":3424,"title":{},"body":{"index.html":{}}}],["integration",{"_index":945,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"index.html":{}}}],["intended",{"_index":1515,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["intentionally",{"_index":3600,"title":{},"body":{"license.html":{}}}],["interact",{"_index":3817,"title":{},"body":{"properties.html":{}}}],["interacting",{"_index":83,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["interaction",{"_index":72,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["intercept",{"_index":2672,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["intercept(context",{"_index":2676,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interceptor",{"_index":2670,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["intercepts",{"_index":2679,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interested",{"_index":3507,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/StatusListFile.html":{},"interfaces/TokenPayload.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/RegistrarService.html":{},"interfaces/SessionLogContext.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/StatusListFile.html":{},"interfaces/TokenPayload.html":{},"license.html":{},"overview.html":{}}}],["interval",{"_index":2850,"title":{},"body":{"injectables/SessionService.html":{}}}],["intervaltime",{"_index":2848,"title":{},"body":{"injectables/SessionService.html":{}}}],["invalid",{"_index":512,"title":{},"body":{"controllers/AuthController.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{}}}],["irrevocable",{"_index":3630,"title":{},"body":{"license.html":{}}}],["is_public_key",{"_index":1873,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isabsolute",{"_index":400,"title":{},"body":{"modules/AppModule.html":{}}}],["isabsolute(folder",{"_index":496,"title":{},"body":{"modules/AppModule.html":{}}}],["isarray",{"_index":1741,"title":{},"body":{"classes/IssuanceDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["isarray()@isoptional",{"_index":2049,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["isauthurlauth",{"_index":669,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["isauthurlauth(config",{"_index":674,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["isdebugmodeenabled",{"_index":1982,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isenabled",{"_index":140,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["isenum",{"_index":2033,"title":{},"body":{"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{}}}],["isenum(['credential_accepted",{"_index":2031,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["isenum(responsetype",{"_index":2058,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{}}}],["isglobal",{"_index":444,"title":{},"body":{"modules/AppModule.html":{}}}],["ishttploggerenabled",{"_index":1983,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isin",{"_index":320,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isin(['apikey",{"_index":334,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isin(['none",{"_index":643,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["isin([0",{"_index":2989,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isnoneauth",{"_index":670,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["isnoneauth(config",{"_index":677,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["isnumber",{"_index":2988,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isnumber()@isin(['0",{"_index":2986,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isobject",{"_index":321,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isobject()@column('json",{"_index":1693,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["isobject()@isoptional",{"_index":2055,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/PresentationRequest.html":{}}}],["isobject()@isoptional()@validatenested()@type(undefined",{"_index":685,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{},"classes/IssuanceDto.html":{}}}],["isobject()@validatenested()@type(undefined",{"_index":1731,"title":{},"body":{"classes/IssuanceDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["isoptional",{"_index":322,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizeQueries.html":{},"entities/CredentialConfig.html":{},"classes/IssuanceDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isoptional()@isstring",{"_index":757,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["ispresentationduringissuanceauth",{"_index":671,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["ispresentationduringissuanceauth(config",{"_index":679,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["ispublic",{"_index":1875,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["iss",{"_index":1230,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["issessionloggerenabled",{"_index":1984,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isstring",{"_index":312,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"classes/IssuanceDto.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isstring()@isoptional",{"_index":2983,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isstring({each",{"_index":1734,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["issuance",{"_index":630,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{},"changelog.html":{}}}],["issuance.service",{"_index":1723,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["issuance/dto/authentication",{"_index":811,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuance/entities/issuance",{"_index":1059,"title":{},"body":{"entities/CredentialConfig.html":{},"modules/IssuerModule.html":{}}}],["issuance/issuance.controller",{"_index":1848,"title":{},"body":{"modules/IssuerModule.html":{}}}],["issuance/issuance.service",{"_index":810,"title":{},"body":{"injectables/AuthorizeService.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuanceconfig",{"_index":1014,"title":{"entities/IssuanceConfig.html":{}},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"coverage.html":{}}}],["issuanceconfig.authenticationconfig.method",{"_index":2139,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuanceconfig.credentialconfigs",{"_index":1042,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["issuanceconfig.credentialconfigs.map((config",{"_index":2137,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuanceconfigid",{"_index":1756,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuanceconfigrepo",{"_index":1749,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuancecontroller",{"_index":1712,"title":{"controllers/IssuanceController.html":{}},"body":{"controllers/IssuanceController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["issuancedto",{"_index":1721,"title":{"classes/IssuanceDto.html":{}},"body":{"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"coverage.html":{}}}],["issuanceid",{"_index":916,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["issuanceservice",{"_index":780,"title":{"injectables/IssuanceService.html":{}},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{},"overview.html":{}}}],["issuance—and",{"_index":3437,"title":{},"body":{"index.html":{}}}],["issue",{"_index":2066,"title":{},"body":{"controllers/Oid4vciController.html":{},"license.html":{}}}],["issued",{"_index":1023,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["issuer",{"_index":824,"title":{},"body":{"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{},"coverage.html":{},"index.html":{}}}],["issuer.png",{"_index":988,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["issuer/authorize/authorize.service",{"_index":3170,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["issuer/authorize/dto/authorize",{"_index":2632,"title":{},"body":{"entities/Session.html":{}}}],["issuer/issuer.module",{"_index":393,"title":{},"body":{"modules/AppModule.html":{}}}],["issuer/oid4vci/dto/offer",{"_index":2264,"title":{},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{}}}],["issuer/oid4vci/oid4vci.service",{"_index":1795,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/WellKnownController.html":{}}}],["issuer/status",{"_index":2651,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{}}}],["issuer_cert.pem",{"_index":1347,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuer_cert.srl",{"_index":1404,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuer_key.pem",{"_index":1345,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuer_state",{"_index":752,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["issuer_validation_schema",{"_index":392,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["issuercert",{"_index":1346,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuerkey",{"_index":1344,"title":{},"body":{"injectables/CryptoService.html":{}}}],["issuermanagementcontroller",{"_index":1778,"title":{"controllers/IssuerManagementController.html":{}},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["issuermetadata",{"_index":1824,"title":{"interfaces/IssuerMetadata.html":{}},"body":{"interfaces/IssuerMetadata.html":{},"injectables/Oid4vciService.html":{},"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["issuermetadata(@param('tenantid",{"_index":3177,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["issuermetadata(tenantid",{"_index":2102,"title":{},"body":{"injectables/Oid4vciService.html":{},"controllers/WellKnownController.html":{}}}],["issuermetadata.authorizationservers",{"_index":2153,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuermetadata.credentialissuer.credential_issuer",{"_index":2155,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuermetadataresult",{"_index":2111,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuermodule",{"_index":375,"title":{"modules/IssuerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules.html":{},"overview.html":{}}}],["issuing",{"_index":2798,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["isurl",{"_index":647,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["isusingexternaloidc",{"_index":1667,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["isverified",{"_index":3854,"title":{},"body":{"miscellaneous/variables.html":{}}}],["it's",{"_index":3143,"title":{},"body":{"injectables/WebhookService.html":{}}}],["item.name",{"_index":210,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["january",{"_index":3523,"title":{},"body":{"license.html":{}}}],["job",{"_index":2838,"title":{},"body":{"injectables/SessionService.html":{}}}],["jobs",{"_index":3281,"title":{},"body":{"changelog.html":{}}}],["joi",{"_index":387,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/RegistrarModule.html":{},"modules/SessionModule.html":{},"dependencies.html":{}}}],["joi.boolean().default(false",{"_index":437,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.exist",{"_index":2535,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["joi.number().default(24",{"_index":2812,"title":{},"body":{"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["joi.number().default(60",{"_index":2809,"title":{},"body":{"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["joi.number().when('db_type",{"_index":1486,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["joi.object",{"_index":422,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.optional",{"_index":1483,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["joi.required",{"_index":1484,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string",{"_index":428,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default('./tmp",{"_index":424,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('24h",{"_index":605,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default('eudiplo",{"_index":426,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('key",{"_index":1962,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().optional",{"_index":596,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().optional().default('eudiplo",{"_index":603,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().required",{"_index":599,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().uri().when('km_type",{"_index":1958,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().valid('es256",{"_index":3841,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().valid('file",{"_index":1954,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().valid('sqlite",{"_index":1478,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().when('db_type",{"_index":1481,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().when('km_type",{"_index":1960,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().when('registrar_url",{"_index":2534,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["joi.when('oidc",{"_index":598,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["join",{"_index":61,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"index.html":{}}}],["join(__dirname",{"_index":498,"title":{},"body":{"modules/AppModule.html":{}}}],["join(folder",{"_index":497,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{}}}],["join(this.configservice.getorthrow('folder",{"_index":1330,"title":{},"body":{"injectables/CryptoService.html":{}}}],["join(this.folder",{"_index":1333,"title":{},"body":{"injectables/CryptoService.html":{}}}],["joining",{"_index":3405,"title":{},"body":{"index.html":{}}}],["jointable",{"_index":1055,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["jose",{"_index":1323,"title":{},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{}}}],["joseheaderparameters",{"_index":1974,"title":{},"body":{"classes/KeyService.html":{}}}],["josepublickey",{"_index":1438,"title":{},"body":{"injectables/CryptoService.html":{}}}],["json",{"_index":443,"title":{},"body":{"modules/AppModule.html":{},"entities/CredentialConfig.html":{},"classes/EC_Public.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/PresentationManagementController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"controllers/WellKnownController.html":{},"index.html":{}}}],["json.parse",{"_index":296,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["json.parse(readfilesync(file",{"_index":2926,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["json.parse(readfilesync(this.privateenncryptionpath",{"_index":1557,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["json.stringify",{"_index":2635,"title":{},"body":{"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["json.stringify(await",{"_index":1554,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["json.stringify(config",{"_index":302,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["json.stringify(content",{"_index":2929,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["json.stringify(credentialissuer).replace",{"_index":2127,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["json.stringify(data",{"_index":2725,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["json.stringify(displayinfo",{"_index":990,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["json.stringify(initialconfig",{"_index":294,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["json.stringify(values.dcql_query).replace",{"_index":2274,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["json.stringify(values.registrationcert).replace",{"_index":2277,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["jsonwebkey",{"_index":1258,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"entities/KeyEntity.html":{}}}],["jwk",{"_index":803,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/variables.html":{}}}],["jwk.kid",{"_index":3062,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["jwk_ec_public",{"_index":1509,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["jwks",{"_index":1521,"title":{},"body":{"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["jwks_uri",{"_index":829,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["jwksrequestsperminute",{"_index":1914,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwksresponsedto",{"_index":1522,"title":{"classes/JwksResponseDto.html":{}},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["jwksuri",{"_index":1915,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwkthumbprint",{"_index":1444,"title":{},"body":{"injectables/CryptoService.html":{}}}],["jwt",{"_index":872,"title":{},"body":{"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{},"index.html":{}}}],["jwt.service",{"_index":525,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["jwt.setaudience(options.audience",{"_index":1653,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.sign(secretkey",{"_index":1654,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.strategy",{"_index":593,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt/crypto",{"_index":1201,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoService-1.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["jwt/jwt",{"_index":2886,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["jwt/sd",{"_index":1204,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["jwt/types",{"_index":1601,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{}}}],["jwt_alg_values",{"_index":2298,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["jwt_expires_in",{"_index":604,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["jwt_issuer",{"_index":602,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["jwt_secret",{"_index":601,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["jwt_secret=$(openssl",{"_index":3466,"title":{},"body":{"index.html":{}}}],["jwt_secret=your",{"_index":3472,"title":{},"body":{"index.html":{}}}],["jwtauthguard",{"_index":588,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AuthModule.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"coverage.html":{},"overview.html":{}}}],["jwtdecrypt",{"_index":1544,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtdecrypt(response",{"_index":1563,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtfromrequest",{"_index":1896,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtheaderparameters",{"_index":1590,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["jwtpayload",{"_index":1589,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["jwtservice",{"_index":524,"title":{"injectables/JwtService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{},"overview.html":{}}}],["jwtstrategy",{"_index":589,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtstrategy.getexternaloidcconfig(configservice",{"_index":1909,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtstrategy.getintegratedoauth2config(configservice",{"_index":1910,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtverify",{"_index":1322,"title":{},"body":{"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/PresentationsService.html":{}}}],["jwtverify(`${data}.${signature",{"_index":2505,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["jwtverify(compact",{"_index":1420,"title":{},"body":{"injectables/CryptoService.html":{}}}],["jwtverify(token",{"_index":1659,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwtwithstatuslistpayload",{"_index":2883,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["kb",{"_index":2297,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["kbverifier",{"_index":2430,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["key",{"_index":22,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/AuthResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["key).then",{"_index":2506,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["key.kid",{"_index":2602,"title":{},"body":{"injectables/ResolverService.html":{}}}],["key.pem",{"_index":1339,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["key.service",{"_index":1600,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"injectables/VaultKeyService.html":{}}}],["key.service.ts",{"_index":1567,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{},"coverage.html":{}}}],["key.service.ts:101",{"_index":3022,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:102",{"_index":3023,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:118",{"_index":1578,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:121",{"_index":3016,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:131",{"_index":1580,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:132",{"_index":1581,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:133",{"_index":1582,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:137",{"_index":3026,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:15",{"_index":3033,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:150",{"_index":1591,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:17",{"_index":3032,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:185",{"_index":3011,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:19",{"_index":3007,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key.service.ts:29",{"_index":1592,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:31",{"_index":1593,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:32",{"_index":1573,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:41",{"_index":1585,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:42",{"_index":1584,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:51",{"_index":1587,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:60",{"_index":1575,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["key.service.ts:68",{"_index":3009,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["key/key.service",{"_index":1324,"title":{},"body":{"injectables/CryptoService.html":{}}}],["key_validation_schema",{"_index":401,"title":{},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["keybinding",{"_index":2468,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keybindingnonce",{"_index":2455,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keybindings",{"_index":2467,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keycloak",{"_index":1924,"title":{},"body":{"injectables/JwtStrategy.html":{},"changelog.html":{}}}],["keycloak_client_id",{"_index":600,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["keycloak_internal_issuer_url",{"_index":597,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["keyentity",{"_index":1938,"title":{"entities/KeyEntity.html":{}},"body":{"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"coverage.html":{}}}],["keylike",{"_index":3021,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keymodule",{"_index":376,"title":{"modules/KeyModule.html":{}},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{},"modules.html":{},"overview.html":{}}}],["keymodule.forroot",{"_index":491,"title":{},"body":{"modules/AppModule.html":{}}}],["keypair",{"_index":1256,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/VaultKeyService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["keypair.privatekey",{"_index":3847,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keypair.publickey",{"_index":3846,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keys",{"_index":1334,"title":{},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["keys.privatekey",{"_index":1612,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["keys.publickey",{"_index":1613,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["keys.publickey.kid",{"_index":1625,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["keyservice",{"_index":1276,"title":{"classes/KeyService.html":{}},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{},"coverage.html":{}}}],["keyservice:100",{"_index":3019,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keyservice:156",{"_index":3029,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keyservice:45",{"_index":3024,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keyservice:57",{"_index":3028,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["keyservice:90",{"_index":3018,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["kind",{"_index":3730,"title":{},"body":{"license.html":{}}}],["km_type",{"_index":1953,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["kmtype",{"_index":1965,"title":{},"body":{"modules/KeyModule.html":{}}}],["know",{"_index":252,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["known",{"_index":3161,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller",{"_index":391,"title":{},"body":{"modules/AppModule.html":{}}}],["known.controller.ts",{"_index":3159,"title":{},"body":{"controllers/WellKnownController.html":{},"coverage.html":{}}}],["known.controller.ts:26",{"_index":3169,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:36",{"_index":3163,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:50",{"_index":3166,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known/dto/credential",{"_index":1099,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"coverage.html":{}}}],["known/dto/jwks",{"_index":1326,"title":{},"body":{"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"coverage.html":{}}}],["known/dto/oauth",{"_index":2035,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"coverage.html":{}}}],["known/jwks.json",{"_index":831,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["known/jwt",{"_index":2596,"title":{},"body":{"injectables/ResolverService.html":{}}}],["known/openid",{"_index":125,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["known/well",{"_index":390,"title":{},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["kty",{"_index":1511,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["labs.github.io/eudiplo/latest",{"_index":359,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["labs.github.io/eudiplo/latest/api",{"_index":3482,"title":{},"body":{"index.html":{}}}],["labs.github.io/eudiplo/main",{"_index":3493,"title":{},"body":{"index.html":{}}}],["labs/eudiplo.git",{"_index":3461,"title":{},"body":{"index.html":{},"properties.html":{}}}],["labs/eudiplo/issues",{"_index":3819,"title":{},"body":{"properties.html":{}}}],["labs/eudiplo:latest",{"_index":3477,"title":{},"body":{"index.html":{}}}],["language",{"_index":3807,"title":{},"body":{"license.html":{}}}],["last",{"_index":2934,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["later",{"_index":954,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/IssuerManagementController.html":{}}}],["latest",{"_index":3488,"title":{},"body":{"index.html":{}}}],["law",{"_index":3726,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":3655,"title":{},"body":{"license.html":{}}}],["layer",{"_index":3394,"title":{},"body":{"index.html":{}}}],["legal",{"_index":3539,"title":{},"body":{"license.html":{}}}],["legend",{"_index":364,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["length",{"_index":2726,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/VaultKeyService.html":{}}}],["lessthan",{"_index":2843,"title":{},"body":{"injectables/SessionService.html":{}}}],["lessthan(new",{"_index":2861,"title":{},"body":{"injectables/SessionService.html":{}}}],["level",{"_index":452,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["levels",{"_index":2017,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["levels[level.tolowercase",{"_index":2020,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["liability",{"_index":3743,"title":{},"body":{"license.html":{}}}],["liable",{"_index":3751,"title":{},"body":{"license.html":{}}}],["libraries",{"_index":3412,"title":{},"body":{"index.html":{}}}],["licensable",{"_index":3643,"title":{},"body":{"license.html":{}}}],["license",{"_index":3518,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":3519,"title":{},"body":{"index.html":{},"license.html":{}}}],["licenses",{"_index":3660,"title":{},"body":{"license.html":{}}}],["licensor",{"_index":3535,"title":{},"body":{"license.html":{}}}],["lightweight",{"_index":3420,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":3732,"title":{},"body":{"license.html":{}}}],["limitations",{"_index":3809,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3566,"title":{},"body":{"license.html":{}}}],["line",{"_index":177,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["link",{"_index":1046,"title":{},"body":{"entities/CredentialConfig.html":{},"license.html":{}}}],["links",{"_index":1701,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["list",{"_index":1113,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/PresentationsService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"dependencies.html":{},"index.html":{}}}],["list')@header('content",{"_index":2870,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.controller",{"_index":2955,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.controller.ts",{"_index":2865,"title":{},"body":{"controllers/StatusListController.html":{},"coverage.html":{}}}],["list.controller.ts:16",{"_index":2872,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.json",{"_index":2892,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["list.module",{"_index":1841,"title":{},"body":{"modules/IssuerModule.html":{},"modules/SessionModule.html":{}}}],["list.module.ts",{"_index":2954,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.service",{"_index":1206,"title":{},"body":{"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{}}}],["list.service.ts",{"_index":2879,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"coverage.html":{}}}],["list.service.ts:112",{"_index":2967,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:116",{"_index":2966,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:125",{"_index":2972,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:138",{"_index":2964,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:178",{"_index":2971,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:189",{"_index":2973,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:31",{"_index":2962,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:39",{"_index":2969,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:42",{"_index":2970,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:52",{"_index":2968,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:79",{"_index":2965,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list/dto/status",{"_index":2652,"title":{},"body":{"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["list/entities/status",{"_index":2974,"title":{},"body":{"entities/StatusMapping.html":{},"coverage.html":{}}}],["list/status",{"_index":1205,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"coverage.html":{}}}],["listen",{"_index":974,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["lists",{"_index":3610,"title":{},"body":{"license.html":{}}}],["literal",{"_index":618,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/OfferRequestDto.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["litigation",{"_index":3650,"title":{},"body":{"license.html":{}}}],["load",{"_index":283,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["loadclients",{"_index":961,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["loadconfig",{"_index":2538,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["loadconfig(tenantid",{"_index":284,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["loadconfiguration",{"_index":1985,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loadtypemetadataformat",{"_index":1228,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["locale",{"_index":984,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["lock",{"_index":3418,"title":{},"body":{"index.html":{}}}],["log",{"_index":2019,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["log_debug_mode",{"_index":439,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_enable_http_logger",{"_index":436,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_enable_session_logger",{"_index":438,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["log_format",{"_index":440,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_level",{"_index":427,"title":{},"body":{"modules/AppModule.html":{}}}],["logauthorizationrequest",{"_index":2749,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logauthorizationrequest(context",{"_index":2762,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcontext",{"_index":2160,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/WebhookService.html":{}}}],["logcredentialissuance",{"_index":2750,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialissuance(context",{"_index":2765,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification",{"_index":2751,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification(context",{"_index":2768,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowcomplete",{"_index":2752,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowcomplete(context",{"_index":2770,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror",{"_index":2753,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror(context",{"_index":2773,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart",{"_index":2754,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart(context",{"_index":2775,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logformat",{"_index":2011,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["logged",{"_index":2665,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["logger",{"_index":1978,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger.decorator",{"_index":2075,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["logger.decorator.ts",{"_index":3339,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger.interceptor",{"_index":1847,"title":{},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["logger.interceptor.ts",{"_index":2669,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{}}}],["logger.interceptor.ts:141",{"_index":2687,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:19",{"_index":2675,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:44",{"_index":2678,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.service",{"_index":1846,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"injectables/WebhookService.html":{}}}],["logger.service.ts",{"_index":2746,"title":{},"body":{"injectables/SessionLoggerService.html":{},"coverage.html":{}}}],["logger.service.ts:102",{"_index":2767,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:12",{"_index":2761,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:124",{"_index":2769,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:146",{"_index":2764,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:163",{"_index":2784,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:180",{"_index":2778,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:202",{"_index":2780,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:221",{"_index":2782,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:30",{"_index":2785,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:37",{"_index":2776,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:56",{"_index":2771,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:75",{"_index":2774,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger/session",{"_index":3131,"title":{},"body":{"injectables/WebhookService.html":{}}}],["loggerconfigservice",{"_index":1976,"title":{"injectables/LoggerConfigService.html":{}},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["loggerconfiguration",{"_index":1991,"title":{"interfaces/LoggerConfiguration.html":{}},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["loggermodule",{"_index":417,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loggermodule.forrootasync",{"_index":446,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":2008,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["logic",{"_index":3429,"title":{},"body":{"index.html":{}}}],["loglevel",{"_index":1994,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["lognotification",{"_index":2755,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["lognotification(context",{"_index":2777,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logo",{"_index":986,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["logs",{"_index":2253,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"changelog.html":{}}}],["logsession",{"_index":2756,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsession(context",{"_index":2779,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror",{"_index":2757,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror(context",{"_index":2781,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtokenexchange",{"_index":2758,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtokenexchange(context",{"_index":2783,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["long",{"_index":3454,"title":{},"body":{"index.html":{}}}],["loss",{"_index":3758,"title":{},"body":{"license.html":{}}}],["losses",{"_index":3765,"title":{},"body":{"license.html":{}}}],["made",{"_index":2370,"title":{},"body":{"entities/PresentationConfig.html":{},"license.html":{}}}],["mailing",{"_index":3609,"title":{},"body":{"license.html":{}}}],["main",{"_index":3275,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["maintain",{"_index":615,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["major",{"_index":3492,"title":{},"body":{"index.html":{}}}],["make",{"_index":3251,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["making",{"_index":2441,"title":{},"body":{"injectables/PresentationsService.html":{},"license.html":{}}}],["malfunction",{"_index":3763,"title":{},"body":{"license.html":{}}}],["manage",{"_index":1011,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{}}}],["managed",{"_index":3612,"title":{},"body":{"license.html":{}}}],["management",{"_index":1147,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"index.html":{},"license.html":{}}}],["management.controller",{"_index":1843,"title":{},"body":{"modules/IssuerModule.html":{}}}],["management.controller.ts",{"_index":1781,"title":{},"body":{"controllers/IssuerManagementController.html":{},"coverage.html":{}}}],["management.controller.ts:63",{"_index":1791,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["management/credentials",{"_index":1130,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["management/issuance",{"_index":1714,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["management/issuer",{"_index":1780,"title":{},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["managing",{"_index":71,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/FileSystemKeyService.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"modules/SessionModule.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["manytomany",{"_index":1056,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{}}}],["manytomany(undefined",{"_index":1041,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{}}}],["map",{"_index":2338,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/VaultKeyService.html":{}}}],["map((_",{"_index":2908,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["mapping",{"_index":2938,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity",{"_index":2889,"title":{},"body":{"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity.ts",{"_index":2975,"title":{},"body":{"entities/StatusMapping.html":{},"coverage.html":{}}}],["mapping.entity.ts:12",{"_index":2979,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:15",{"_index":2977,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:6",{"_index":2981,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:9",{"_index":2980,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mark",{"_index":3859,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marked",{"_index":3617,"title":{},"body":{"license.html":{}}}],["marks",{"_index":3716,"title":{},"body":{"license.html":{}}}],["match",{"_index":2590,"title":{},"body":{"injectables/ResolverService.html":{}}}],["matching",{"_index":260,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor(date.now",{"_index":2307,"title":{},"body":{"injectables/Oid4vpService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["math.floor(new",{"_index":2309,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["math.random",{"_index":2911,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["math.round(new",{"_index":1232,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["maybe",{"_index":278,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["mean",{"_index":3532,"title":{},"body":{"license.html":{}}}],["means",{"_index":3546,"title":{},"body":{"license.html":{}}}],["mechanical",{"_index":3570,"title":{},"body":{"license.html":{}}}],["mechanism",{"_index":953,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["media",{"_index":3575,"title":{},"body":{"license.html":{}}}],["medium",{"_index":3665,"title":{},"body":{"license.html":{}}}],["meet",{"_index":3666,"title":{},"body":{"license.html":{}}}],["merchantability",{"_index":3734,"title":{},"body":{"license.html":{}}}],["merely",{"_index":3595,"title":{},"body":{"license.html":{}}}],["message",{"_index":2733,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["metadata",{"_index":1030,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsMetadataController.html":{},"interfaces/IssuerMetadata.html":{},"injectables/Oid4vciService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["metadata.'})@get('openid",{"_index":3168,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["metadata.controller",{"_index":1849,"title":{},"body":{"modules/IssuerModule.html":{}}}],["metadata.controller.ts",{"_index":1161,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"coverage.html":{}}}],["metadata.controller.ts:13",{"_index":1167,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["metadata.controller.ts:23",{"_index":1164,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["metadata.dto",{"_index":2579,"title":{},"body":{"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{}}}],["metadata.dto.ts",{"_index":1100,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"coverage.html":{}}}],["metadata.dto.ts:12",{"_index":1112,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:16",{"_index":1119,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:20",{"_index":1123,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:24",{"_index":1115,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:33",{"_index":1121,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:37",{"_index":1117,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:41",{"_index":1110,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:8",{"_index":1120,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata/credentials",{"_index":1160,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["metadata/dto/credential",{"_index":650,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/VCT.html":{},"coverage.html":{}}}],["metadata/dto/schema",{"_index":1058,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/SchemaResponse.html":{},"coverage.html":{}}}],["metadata/vct/${credentialconfig.id",{"_index":1242,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["method",{"_index":162,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/typealiases.html":{}}}],["methods",{"_index":347,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigHelper.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/variables.html":{}}}],["middleware",{"_index":3396,"title":{},"body":{"index.html":{},"properties.html":{}}}],["mirko",{"_index":3802,"title":{},"body":{"license.html":{},"properties.html":{}}}],["miscellaneous",{"_index":3388,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":1370,"title":{},"body":{"injectables/CryptoService.html":{}}}],["misused",{"_index":180,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["mkdirsync",{"_index":943,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["mkdirsync(folder",{"_index":979,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["mkdirsync(this.folder",{"_index":1332,"title":{},"body":{"injectables/CryptoService.html":{}}}],["mm",{"_index":463,"title":{},"body":{"modules/AppModule.html":{}}}],["modifications",{"_index":3565,"title":{},"body":{"license.html":{}}}],["modified",{"_index":3671,"title":{},"body":{"license.html":{}}}],["modify",{"_index":1813,"title":{},"body":{"controllers/IssuerManagementController.html":{},"license.html":{}}}],["modifying",{"_index":2738,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["module",{"_index":360,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":362,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["mollik",{"_index":3803,"title":{},"body":{"license.html":{},"properties.html":{}}}],["more",{"_index":355,"title":{},"body":{"controllers/AppController.html":{},"entities/Session.html":{},"changelog.html":{},"license.html":{}}}],["move",{"_index":2358,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["mso_mdoc",{"_index":2293,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["multi",{"_index":2626,"title":{},"body":{"entities/Session.html":{},"changelog.html":{}}}],["multiple",{"_index":2193,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["mysql2",{"_index":3372,"title":{},"body":{"dependencies.html":{}}}],["n${json.stringify(signer.publicjwk",{"_index":1448,"title":{},"body":{"injectables/CryptoService.html":{}}}],["name",{"_index":192,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigHelper.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationDuringIssuance.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["name)?.id",{"_index":211,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["namedcurve",{"_index":3844,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nameing",{"_index":3267,"title":{},"body":{"changelog.html":{}}}],["names",{"_index":3715,"title":{},"body":{"license.html":{}}}],["necessarily",{"_index":3644,"title":{},"body":{"license.html":{}}}],["necessary",{"_index":104,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/VaultKeyService.html":{}}}],["need",{"_index":217,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["needed",{"_index":187,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{}}}],["needs",{"_index":910,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["negligence",{"_index":3746,"title":{},"body":{"license.html":{}}}],["negligent",{"_index":3749,"title":{},"body":{"license.html":{}}}],["nestinterceptor",{"_index":2692,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["nestjs",{"_index":418,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["nestjs/axios",{"_index":1853,"title":{},"body":{"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"injectables/WebhookService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":33,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":35,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1871,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":64,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":592,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":3355,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":409,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionService.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":398,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":351,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":1680,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":1090,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/DatabaseModule.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["nestjs/typeorm/dist/typeorm.module",{"_index":1951,"title":{},"body":{"modules/KeyModule.html":{}}}],["new",{"_index":119,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":176,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["next.handle",{"_index":2698,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["next.handle().pipe",{"_index":2719,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["node:child_process",{"_index":1328,"title":{},"body":{"injectables/CryptoService.html":{}}}],["node:crypto",{"_index":721,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{}}}],["node:fs",{"_index":57,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["node:path",{"_index":62,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["nodejs",{"_index":1202,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoService-1.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["non",{"_index":3626,"title":{},"body":{"license.html":{}}}],["noncce",{"_index":2629,"title":{},"body":{"entities/Session.html":{}}}],["nonce",{"_index":2171,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["none",{"_index":637,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/WebhookService.html":{}}}],["normally",{"_index":3690,"title":{},"body":{"license.html":{}}}],["nothing",{"_index":3705,"title":{},"body":{"license.html":{}}}],["notice",{"_index":3579,"title":{},"body":{"license.html":{}}}],["notices",{"_index":3674,"title":{},"body":{"license.html":{}}}],["notification",{"_index":1124,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["notification.id",{"_index":2199,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notification_endpoint",{"_index":1109,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["notification_id",{"_index":2029,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["notificationevent",{"_index":2030,"title":{},"body":{"classes/NotificationRequestDto.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["notificationid",{"_index":2183,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notificationindex",{"_index":2204,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notificationrequestdto",{"_index":2027,"title":{"classes/NotificationRequestDto.html":{}},"body":{"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"coverage.html":{}}}],["notifications",{"_index":341,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["notifications(body",{"_index":2067,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["notifywebhook",{"_index":1692,"title":{},"body":{"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"entities/Session.html":{}}}],["notitification",{"_index":2101,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notwithstanding",{"_index":3703,"title":{},"body":{"license.html":{}}}],["now",{"_index":907,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["null",{"_index":264,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AuthenticationConfigHelper.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/RegistrarService.html":{}}}],["nullable",{"_index":1019,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["number",{"_index":172,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/ParResponseDto.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{}}}],["oauth",{"_index":2312,"title":{},"body":{"injectables/Oid4vpService.html":{},"index.html":{}}}],["oauth2",{"_index":82,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/RegistrarService.html":{}}}],["oauth2authorizationserver",{"_index":788,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["oauth2authorizationserverresponse",{"_index":2034,"title":{"classes/Oauth2AuthorizationServerResponse.html":{}},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["oauth2client",{"_index":36,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["oauth2resourceserver",{"_index":2108,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["object",{"_index":1118,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["object.entries(params",{"_index":2337,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["object.entries(req.headers",{"_index":1451,"title":{},"body":{"injectables/CryptoService.html":{}}}],["object.keys(res.vp_token",{"_index":2507,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["obligations",{"_index":3772,"title":{},"body":{"license.html":{}}}],["observable",{"_index":2684,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["obtain",{"_index":3805,"title":{},"body":{"license.html":{}}}],["offer",{"_index":915,"title":{},"body":{"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{},"license.html":{}}}],["offer.credentialoffer",{"_index":2145,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["offer.credentialofferobject",{"_index":2143,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["offered",{"_index":2208,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["offerrequestdto",{"_index":1784,"title":{"classes/OfferRequestDto.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"coverage.html":{}}}],["offerresponse",{"_index":1787,"title":{"classes/OfferResponse.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"coverage.html":{}}}],["oid4vci",{"_index":477,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"interfaces/SessionLogContext.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["oid4vci/dto/offer",{"_index":1796,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["oid4vci/oid4vci.controller",{"_index":1839,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/oid4vci.service",{"_index":1838,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/util",{"_index":808,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["oid4vcicontroller",{"_index":1836,"title":{"controllers/Oid4vciController.html":{}},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"coverage.html":{}}}],["oid4vciservice",{"_index":1794,"title":{"injectables/Oid4vciService.html":{}},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/WellKnownController.html":{},"coverage.html":{},"overview.html":{}}}],["oid4vp",{"_index":479,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"interfaces/SessionLogContext.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["oid4vp.controller",{"_index":2244,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["oid4vp.service",{"_index":2228,"title":{},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["oid4vp/dto/presentation",{"_index":2395,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vp/oid4vp.module",{"_index":2425,"title":{},"body":{"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{}}}],["oid4vp/oid4vp.service",{"_index":2396,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vpcontroller",{"_index":2215,"title":{"controllers/Oid4vpController.html":{}},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"coverage.html":{}}}],["oid4vpmodule",{"_index":1830,"title":{"modules/Oid4vpModule.html":{}},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["oid4vpservice",{"_index":779,"title":{"injectables/Oid4vpService.html":{}},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"coverage.html":{},"overview.html":{}}}],["oidc",{"_index":84,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["oidcissuerurl",{"_index":111,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/.well",{"_index":124,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/protocol/openid",{"_index":121,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["older",{"_index":2841,"title":{},"body":{"injectables/SessionService.html":{}}}],["omit",{"_index":1289,"title":{},"body":{"injectables/CryptoService.html":{}}}],["onapplicationbootstrap",{"_index":31,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{}}}],["once",{"_index":188,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["one",{"_index":213,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"changelog.html":{},"license.html":{}}}],["onevent",{"_index":63,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["onevent(tenant_events.tenant_init",{"_index":1303,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{}}}],["onevent(tenant_events.tenant_keys",{"_index":153,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["onmoduleinit",{"_index":32,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["ontenantinit",{"_index":1282,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["ontenantinit(tenantid",{"_index":154,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["open",{"_index":3395,"title":{},"body":{"index.html":{}}}],["openid",{"_index":2218,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["openid4vc",{"_index":629,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"miscellaneous/typealiases.html":{}}}],["openid4vc/oauth2",{"_index":806,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"dependencies.html":{}}}],["openid4vc/openid4vci",{"_index":1053,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["openid4vc/openid4vp",{"_index":3363,"title":{},"body":{"dependencies.html":{}}}],["openid4vc/utils",{"_index":3364,"title":{},"body":{"dependencies.html":{}}}],["openid4vci",{"_index":694,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/WellKnownController.html":{}}}],["openid4vcidraftversion",{"_index":2112,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["openid4vcidraftversion.draft14",{"_index":2131,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["openid4vciissuer",{"_index":2106,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["openid4vp://?${(await",{"_index":898,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["openid4vp://?${values.uri",{"_index":2406,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["openssl",{"_index":1374,"title":{},"body":{"injectables/CryptoService.html":{}}}],["operation",{"_index":1079,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["operations",{"_index":100,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService-1.html":{},"controllers/Oid4vpController.html":{},"injectables/RegistrarService.html":{}}}],["optional",{"_index":16,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"classes/OfferRequestDto.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":458,"title":{},"body":{"modules/AppModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"changelog.html":{}}}],["options.audience",{"_index":1652,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["options.dto",{"_index":2266,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["options.dto.ts",{"_index":2414,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{},"coverage.html":{}}}],["options.expiresin",{"_index":1641,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["order",{"_index":2484,"title":{},"body":{"injectables/PresentationsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["organizations",{"_index":3404,"title":{},"body":{"index.html":{}}}],["origin",{"_index":3721,"title":{},"body":{"license.html":{}}}],["original",{"_index":2739,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"license.html":{}}}],["originaldraftversion",{"_index":2130,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["otherwhise",{"_index":1800,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["otherwise",{"_index":139,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"injectables/RegistrarService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":382,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"license.html":{},"overview.html":{}}}],["outstanding",{"_index":3557,"title":{},"body":{"license.html":{}}}],["over",{"_index":3423,"title":{},"body":{"index.html":{}}}],["overview",{"_index":3403,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["overwrite",{"_index":1198,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{}}}],["overwritten",{"_index":1024,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{}}}],["owner",{"_index":3537,"title":{},"body":{"license.html":{}}}],["ownership",{"_index":3554,"title":{},"body":{"license.html":{}}}],["p",{"_index":1552,"title":{},"body":{"injectables/EncryptionService.html":{},"index.html":{}}}],["p256",{"_index":3046,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["package",{"_index":3348,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pad",{"_index":3090,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["page",{"_index":3277,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["pair",{"_index":1369,"title":{},"body":{"injectables/CryptoService.html":{}}}],["pairs",{"_index":622,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["par",{"_index":699,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["par(body",{"_index":710,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["param",{"_index":94,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{}}}],["param('id",{"_index":1156,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{}}}],["param('requestid",{"_index":2233,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["param('session",{"_index":2234,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["param('tenantid",{"_index":732,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{}}}],["parameter",{"_index":614,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["parameterize",{"_index":1354,"title":{},"body":{"injectables/CryptoService.html":{}}}],["parameters",{"_index":518,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthenticationConfigHelper.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":2333,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["parresponsedto",{"_index":728,"title":{"classes/ParResponseDto.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/ParResponseDto.html":{},"coverage.html":{}}}],["parse",{"_index":1358,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/PresentationsService.html":{}}}],["parseaccesstokenrequest",{"_index":854,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsechallengerequest",{"_index":773,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsechallengerequest(body",{"_index":789,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["parsed",{"_index":2457,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parsedaccesstokenauthorizationcoderequestgrant",{"_index":813,"title":{"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["parsedaccesstokenpreauthorizedcoderequestgrant",{"_index":815,"title":{"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["parsedaccesstokenrequest",{"_index":853,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.accesstokenrequest",{"_index":869,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.dpop?.jwt",{"_index":873,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant",{"_index":868,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.granttype",{"_index":865,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.preauthorizedcode",{"_index":875,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.txcode",{"_index":877,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedcredentialrequest",{"_index":2146,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest.credentialconfigurationid",{"_index":2165,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest.proofs.jwt",{"_index":2168,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest.proofs?.jwt?.length",{"_index":2167,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest?.proofs?.jwt",{"_index":2149,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parseloglevel",{"_index":1986,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["parseloglevel(level",{"_index":1998,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["parseresponse",{"_index":2435,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parseresponse(res",{"_index":2453,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["part",{"_index":2472,"title":{},"body":{"injectables/PresentationsService.html":{},"license.html":{}}}],["particular",{"_index":3736,"title":{},"body":{"license.html":{}}}],["parties",{"_index":76,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["party",{"_index":186,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["pass",{"_index":1812,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["passed",{"_index":1025,"title":{},"body":{"entities/CredentialConfig.html":{},"interfaces/CryptoImplementation.html":{},"injectables/Oid4vciService.html":{}}}],["passport",{"_index":1904,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportjwtsecret",{"_index":1905,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportmodule",{"_index":591,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1901,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1889,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":1501,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["patch",{"_index":3410,"title":{},"body":{"index.html":{}}}],["patent",{"_index":3635,"title":{},"body":{"license.html":{}}}],["path",{"_index":220,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["payload",{"_index":575,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/variables.html":{}}}],["payload.cnf",{"_index":2502,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["payload.iss",{"_index":2580,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.iss}/.well",{"_index":2595,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.sub",{"_index":1650,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["payload?.exp",{"_index":1422,"title":{},"body":{"injectables/CryptoService.html":{}}}],["payloads",{"_index":2568,"title":{},"body":{"injectables/ResolverService.html":{}}}],["pem",{"_index":23,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["percent",{"_index":3556,"title":{},"body":{"license.html":{}}}],["perform",{"_index":1674,"title":{},"body":{"controllers/HealthController.html":{},"license.html":{}}}],["periodically",{"_index":163,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["permission",{"_index":3713,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":3563,"title":{},"body":{"license.html":{}}}],["perpetual",{"_index":3624,"title":{},"body":{"license.html":{}}}],["pertain",{"_index":3681,"title":{},"body":{"license.html":{}}}],["pg",{"_index":3376,"title":{},"body":{"dependencies.html":{}}}],["pid",{"_index":1809,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["pid,hostname",{"_index":467,"title":{},"body":{"modules/AppModule.html":{}}}],["pino",{"_index":419,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"dependencies.html":{}}}],["pinohttp",{"_index":451,"title":{},"body":{"modules/AppModule.html":{}}}],["pinologger",{"_index":2674,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["pipeline",{"_index":3208,"title":{},"body":{"changelog.html":{}}}],["pkcecodechallengemethod",{"_index":804,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["pkcecodechallengemethod.s256",{"_index":839,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["pkcs#8",{"_index":1373,"title":{},"body":{"injectables/CryptoService.html":{}}}],["pkeyopt",{"_index":1377,"title":{},"body":{"injectables/CryptoService.html":{}}}],["placeholders",{"_index":2126,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["places",{"_index":3685,"title":{},"body":{"license.html":{}}}],["pluggable",{"_index":3449,"title":{},"body":{"index.html":{}}}],["plumbing",{"_index":3430,"title":{},"body":{"index.html":{}}}],["png",{"_index":1802,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["pnpm",{"_index":3270,"title":{},"body":{"changelog.html":{}}}],["port",{"_index":1497,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["possession",{"_index":3031,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["possibility",{"_index":3767,"title":{},"body":{"license.html":{}}}],["post",{"_index":519,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"index.html":{}}}],["post('challenge",{"_index":702,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post('credential",{"_index":2078,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('credential')@sessionlogger('state",{"_index":2064,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('notification",{"_index":2081,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('notification')@sessionlogger('notification_id",{"_index":2068,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('oauth2/token",{"_index":537,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('offer",{"_index":1811,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["post('par",{"_index":734,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post('request",{"_index":2401,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["post('response",{"_index":2236,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["post('response')@sessionlogger('state",{"_index":2225,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["post('revoke",{"_index":2647,"title":{},"body":{"controllers/SessionController.html":{}}}],["post('token",{"_index":716,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["postgres",{"_index":1495,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgres').default('sqlite",{"_index":1479,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["power",{"_index":3547,"title":{},"body":{"license.html":{}}}],["pre",{"_index":639,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["preauthorizedcode",{"_index":816,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["preauthorizedcodegrantidentifier",{"_index":805,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["preferred",{"_index":1111,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"license.html":{}}}],["prefix",{"_index":502,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["preheader",{"_index":2918,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["prepare",{"_index":3068,"title":{},"body":{"injectables/VaultKeyService.html":{},"license.html":{}}}],["prepayload",{"_index":2917,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["presentation",{"_index":621,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["presentationconfig",{"_index":922,"title":{"entities/PresentationConfig.html":{}},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"coverage.html":{}}}],["presentationconfig.webhook",{"_index":2331,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationconfig?.presentation.webhook",{"_index":924,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["presentationduringissuance",{"_index":642,"title":{"classes/PresentationDuringIssuance.html":{}},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/VCT.html":{},"coverage.html":{}}}],["presentationduringissuanceconfig",{"_index":633,"title":{"classes/PresentationDuringIssuanceConfig.html":{}},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["presentationmanagementcontroller",{"_index":2378,"title":{"controllers/PresentationManagementController.html":{}},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"coverage.html":{}}}],["presentationrequest",{"_index":2386,"title":{"classes/PresentationRequest.html":{}},"body":{"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"coverage.html":{}}}],["presentationrequestoptions",{"_index":2256,"title":{"interfaces/PresentationRequestOptions.html":{}},"body":{"injectables/Oid4vpService.html":{},"interfaces/PresentationRequestOptions.html":{},"coverage.html":{}}}],["presentations",{"_index":102,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["presentations.controller",{"_index":2423,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["presentations.service",{"_index":2393,"title":{},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{}}}],["presentations/dto/auth",{"_index":2262,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentations/presentations.module",{"_index":2245,"title":{},"body":{"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["presentations/presentations.service",{"_index":2261,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationsmodule",{"_index":2242,"title":{"modules/PresentationsModule.html":{}},"body":{"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["presentationsservice",{"_index":52,"title":{"injectables/PresentationsService.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"coverage.html":{},"overview.html":{}}}],["presented",{"_index":657,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["pretty",{"_index":442,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"dependencies.html":{}}}],["primary",{"_index":964,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/StatusMapping.html":{}}}],["primarycolumn",{"_index":2633,"title":{},"body":{"entities/Session.html":{}}}],["primarycolumn('uuid",{"_index":2617,"title":{},"body":{"entities/Session.html":{}}}],["primarygeneratedcolumn",{"_index":1708,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":1703,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["printed",{"_index":3799,"title":{},"body":{"license.html":{}}}],["privacy",{"_index":3451,"title":{},"body":{"index.html":{}}}],["private",{"_index":86,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{}}}],["private_key",{"_index":2741,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["privateencryptionkey",{"_index":1524,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["privateenncryptionpath",{"_index":1525,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["privatekey",{"_index":1266,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/FileSystemKeyService.html":{},"entities/KeyEntity.html":{},"miscellaneous/variables.html":{}}}],["privatekey.alg",{"_index":1616,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["privatekey.kid",{"_index":1615,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["privatekeyinstance",{"_index":1629,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["privatekeyjwk",{"_index":1261,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["privatekeypath",{"_index":1568,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["privatethumbprint",{"_index":1446,"title":{},"body":{"injectables/CryptoService.html":{}}}],["proceed",{"_index":2683,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["process",{"_index":631,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{}}}],["process.env.node_env",{"_index":434,"title":{},"body":{"modules/AppModule.html":{}}}],["process_presentation_response",{"_index":2346,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["processes",{"_index":2259,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["product",{"_index":3717,"title":{},"body":{"license.html":{}}}],["production",{"_index":435,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["progress",{"_index":2668,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["prominent",{"_index":3673,"title":{},"body":{"license.html":{}}}],["promise",{"_index":191,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["promise.all(att",{"_index":2516,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["promise.resolve((input",{"_index":3041,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["promise.resolve(keys.publickey",{"_index":1628,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["promise.resolve(tenantid",{"_index":3056,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["promises",{"_index":181,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["proof",{"_index":3030,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["proofcount",{"_index":2166,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["proofverified",{"_index":2182,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["proper",{"_index":951,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["properties",{"_index":13,"title":{"properties.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"entities/KeyEntity.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"properties.html":{}}}],["proprietary",{"_index":3414,"title":{},"body":{"index.html":{}}}],["protected",{"_index":1792,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["protocol",{"_index":2151,"title":{},"body":{"injectables/Oid4vciService.html":{},"index.html":{}}}],["protocols",{"_index":3402,"title":{},"body":{"index.html":{}}}],["protocol}//${req.host}${req.url",{"_index":2154,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["provide",{"_index":1964,"title":{},"body":{"modules/KeyModule.html":{},"license.html":{}}}],["provided",{"_index":342,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"license.html":{}}}],["provider",{"_index":85,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{}}}],["providers",{"_index":367,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["provides",{"_index":1743,"title":{},"body":{"injectables/IssuanceService.html":{},"modules/RegistrarModule.html":{},"license.html":{}}}],["providing",{"_index":1672,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["prs",{"_index":3503,"title":{},"body":{"index.html":{}}}],["pubkey",{"_index":1338,"title":{},"body":{"injectables/CryptoService.html":{}}}],["public",{"_index":21,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/IssuanceService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/KeyService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@post('oauth2/token')@apibody({type",{"_index":505,"title":{},"body":{"controllers/AuthController.html":{}}}],["public.decorator",{"_index":528,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["public_url",{"_index":1854,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"miscellaneous/variables.html":{}}}],["public_url=https://example.com",{"_index":3471,"title":{},"body":{"index.html":{}}}],["publiccryptokey",{"_index":1418,"title":{},"body":{"injectables/CryptoService.html":{}}}],["publicencryptionkey",{"_index":1526,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["publicencryptionpath",{"_index":1527,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["publicjwk",{"_index":886,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["publickey",{"_index":236,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/FileSystemKeyService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/variables.html":{}}}],["publickey.alg",{"_index":1618,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["publickey.kid",{"_index":1614,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["publickeyjwk",{"_index":1265,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["publickeypath",{"_index":1569,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["publicly",{"_index":3632,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":253,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["purposes",{"_index":3544,"title":{},"body":{"license.html":{}}}],["pushed",{"_index":712,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{}}}],["pushed_authorization_request_endpoint",{"_index":836,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["pwd)/config:/app/config",{"_index":3475,"title":{},"body":{"index.html":{}}}],["qr",{"_index":1807,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["qrcode",{"_index":1799,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["qrcode.tobuffer(values.uri",{"_index":1819,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["qrcodebuffer",{"_index":1818,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["queries",{"_index":708,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["queries.request_uri",{"_index":844,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["query",{"_index":207,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{}}}],["querydeeppartialentity",{"_index":2822,"title":{},"body":{"injectables/SessionService.html":{}}}],["querystring",{"_index":2336,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["questions",{"_index":3512,"title":{},"body":{"index.html":{}}}],["quick",{"_index":3456,"title":{},"body":{"index.html":{}}}],["quickstart",{"_index":3485,"title":{},"body":{"index.html":{}}}],["r",{"_index":2597,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["r.data",{"_index":2598,"title":{},"body":{"injectables/ResolverService.html":{}}}],["r.length",{"_index":3094,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["r.slice(1",{"_index":3098,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["r[0",{"_index":3096,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["rand",{"_index":3467,"title":{},"body":{"index.html":{}}}],["random",{"_index":1433,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["randombytes",{"_index":1315,"title":{},"body":{"injectables/CryptoService.html":{}}}],["randombytes(bytes",{"_index":1431,"title":{},"body":{"injectables/CryptoService.html":{}}}],["randomness",{"_index":2900,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["randomuuid",{"_index":720,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["ratelimit",{"_index":1913,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["raw",{"_index":3105,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["rawsignature",{"_index":3106,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["re",{"_index":896,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["reach",{"_index":928,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["reachable",{"_index":2600,"title":{},"body":{"injectables/ResolverService.html":{}}}],["react",{"_index":975,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["readable",{"_index":3683,"title":{},"body":{"license.html":{}}}],["readfilesync",{"_index":55,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["readfilesync(filepath",{"_index":297,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["readfilesync(join(folder",{"_index":1623,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["readfilesync(this.publicencryptionpath",{"_index":1562,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["readonly",{"_index":731,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CryptoService.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/WellKnownController.html":{}}}],["real",{"_index":1434,"title":{},"body":{"injectables/CryptoService.html":{}}}],["reason",{"_index":3786,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":3718,"title":{},"body":{"license.html":{}}}],["receive",{"_index":2227,"title":{},"body":{"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{}}}],["received",{"_index":3146,"title":{},"body":{"injectables/WebhookService.html":{},"license.html":{}}}],["recent",{"_index":3491,"title":{},"body":{"index.html":{}}}],["recipients",{"_index":3669,"title":{},"body":{"license.html":{}}}],["recommend",{"_index":3798,"title":{},"body":{"license.html":{}}}],["recommended",{"_index":3490,"title":{},"body":{"index.html":{}}}],["record",{"_index":1017,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"classes/SchemaResponse.html":{},"injectables/WebhookService.html":{}}}],["recursive",{"_index":980,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{}}}],["redacted",{"_index":2745,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["redirect",{"_index":645,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["redirect_uri",{"_index":753,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["redirected",{"_index":652,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["redistributing",{"_index":3740,"title":{},"body":{"license.html":{}}}],["redistribution",{"_index":3663,"title":{},"body":{"license.html":{}}}],["reference",{"_index":1040,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/FileSystemKeyService.html":{},"index.html":{}}}],["reflect",{"_index":3381,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":1865,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["refresh",{"_index":146,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["refresh_token",{"_index":2742,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["refreshaccesstoken",{"_index":166,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["refreshes",{"_index":159,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["regarding",{"_index":3711,"title":{},"body":{"license.html":{}}}],["regcert",{"_index":2273,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["register",{"_index":2835,"title":{},"body":{"injectables/SessionService.html":{}}}],["registrar",{"_index":59,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar.json",{"_index":287,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["registrar.service",{"_index":2527,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["registrar/generated",{"_index":2561,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["registrar/registrar.module",{"_index":396,"title":{},"body":{"modules/AppModule.html":{},"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["registrar/registrar.service",{"_index":2260,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["registrar_oidc_client_id",{"_index":115,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar_oidc_client_secret",{"_index":117,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar_oidc_url",{"_index":2533,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["registrar_url",{"_index":2532,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["registrar_validation_schema",{"_index":395,"title":{},"body":{"modules/AppModule.html":{},"modules/RegistrarModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["registrarconfig",{"_index":58,"title":{"classes/RegistrarConfig.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"coverage.html":{}}}],["registrarmodule",{"_index":377,"title":{"modules/RegistrarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["registrarservice",{"_index":69,"title":{"injectables/RegistrarService.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"coverage.html":{},"overview.html":{}}}],["registration",{"_index":78,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["registrationcert",{"_index":2276,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{}}}],["registrationcertid",{"_index":2464,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["registrationcertificatecontrollerall",{"_index":42,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["registrationcertificatecontrollerregister",{"_index":43,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["registrationcertificatecreation",{"_index":2559,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["registrationcertificaterequest",{"_index":49,"title":{"classes/RegistrationCertificateRequest.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"coverage.html":{}}}],["related",{"_index":1956,"title":{},"body":{"modules/KeyModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["relations",{"_index":1763,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["release",{"_index":3207,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["relevant",{"_index":2084,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["reload",{"_index":2002,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["reloadconfiguration",{"_index":1987,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["rely",{"_index":3413,"title":{},"body":{"index.html":{}}}],["relying",{"_index":75,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerfindall",{"_index":44,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerregister",{"_index":45,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["remain",{"_index":3593,"title":{},"body":{"license.html":{}}}],["remove",{"_index":2513,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"changelog.html":{}}}],["replace",{"_index":1412,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{}}}],["replace('https",{"_index":235,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["replace(/=/g",{"_index":3113,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["replace(/\\+/g",{"_index":3110,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["replace(/\\//g",{"_index":3111,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["replace(/\\r?\\n|\\r/g",{"_index":1415,"title":{},"body":{"injectables/CryptoService.html":{}}}],["replaced",{"_index":3792,"title":{},"body":{"license.html":{}}}],["repository",{"_index":1070,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"properties.html":{}}}],["represent",{"_index":3590,"title":{},"body":{"license.html":{}}}],["representatives",{"_index":3608,"title":{},"body":{"license.html":{}}}],["representing",{"_index":623,"title":{},"body":{"interfaces/AuthResponse.html":{},"interfaces/IssuerMetadata.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["represents",{"_index":1101,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/RegistrarConfig.html":{},"entities/Session.html":{},"miscellaneous/typealiases.html":{}}}],["reproduce",{"_index":3631,"title":{},"body":{"license.html":{}}}],["reproducing",{"_index":3722,"title":{},"body":{"license.html":{}}}],["reproduction",{"_index":3528,"title":{},"body":{"license.html":{}}}],["repsonse",{"_index":8,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["req",{"_index":247,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"miscellaneous/functions.html":{}}}],["req+jwt",{"_index":2314,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["req.body",{"_index":270,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["req.body?.session_id",{"_index":473,"title":{},"body":{"modules/AppModule.html":{}}}],["req.headers['content",{"_index":488,"title":{},"body":{"modules/AppModule.html":{}}}],["req.headers['user",{"_index":486,"title":{},"body":{"modules/AppModule.html":{}}}],["req.headers['x",{"_index":470,"title":{},"body":{"modules/AppModule.html":{}}}],["req.id",{"_index":266,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["req.method",{"_index":481,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["req.params?.session",{"_index":472,"title":{},"body":{"modules/AppModule.html":{}}}],["req.params?.tenantid",{"_index":474,"title":{},"body":{"modules/AppModule.html":{}}}],["req.url",{"_index":482,"title":{},"body":{"modules/AppModule.html":{}}}],["req.url?.includes('/oid4vp",{"_index":478,"title":{},"body":{"modules/AppModule.html":{}}}],["req.url?.includes('/vci",{"_index":476,"title":{},"body":{"modules/AppModule.html":{}}}],["request",{"_index":11,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"injectables/CryptoService.html":{},"entities/IssuanceConfig.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["request.'})@isenum(responsetype",{"_index":2053,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.body?.[sessionidparam",{"_index":2704,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.dto",{"_index":51,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{}}}],["request.dto.ts",{"_index":747,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["request.dto.ts:12",{"_index":759,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["request.dto.ts:15",{"_index":764,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:17",{"_index":2560,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["request.dto.ts:18",{"_index":766,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:20",{"_index":2054,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:21",{"_index":768,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:24",{"_index":760,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:26",{"_index":2050,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/PresentationRequest.html":{}}}],["request.dto.ts:27",{"_index":761,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:30",{"_index":762,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:33",{"_index":765,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/OfferRequestDto.html":{},"classes/PresentationRequest.html":{}}}],["request.dto.ts:36",{"_index":758,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:37",{"_index":2056,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:41",{"_index":2060,"title":{},"body":{"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{}}}],["request.dto.ts:42",{"_index":2059,"title":{},"body":{"classes/OfferResponse.html":{}}}],["request.dto.ts:6",{"_index":763,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.dto.ts:9",{"_index":767,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.header",{"_index":2319,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.headers['content",{"_index":2714,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.headers['user",{"_index":2713,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.headers['x",{"_index":2705,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.method",{"_index":2708,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.params?.[sessionidparam",{"_index":2703,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.params?.tenantid",{"_index":2707,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.payload",{"_index":2322,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.query?.[sessionidparam",{"_index":2706,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.url",{"_index":2709,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.user",{"_index":2994,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["request/response",{"_index":2007,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["request_error",{"_index":2731,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_start",{"_index":2712,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_success",{"_index":2722,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_uri",{"_index":735,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["requested",{"_index":258,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["requestid",{"_index":254,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{}}}],["requesting",{"_index":3435,"title":{},"body":{"index.html":{}}}],["requests",{"_index":91,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["require_pushed_authorization_requests",{"_index":835,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["required",{"_index":335,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"modules/RegistrarModule.html":{},"classes/SchemaResponse.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["requiredclaimkeys",{"_index":2511,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requiredfields",{"_index":2454,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requires",{"_index":2045,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["res",{"_index":271,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/EncryptionService.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["res.data",{"_index":227,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["res.data!['crt",{"_index":244,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.data!['id",{"_index":245,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.data!['jwt",{"_index":282,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.data.data.keys['1'].public_key",{"_index":3057,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["res.data.id",{"_index":3053,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["res.data?.filter",{"_index":262,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.error",{"_index":223,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["res.payload",{"_index":1564,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["res.redirect(`${values.redirect_uri}?code=${code",{"_index":851,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.send",{"_index":939,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.send(qrcodebuffer",{"_index":1822,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.send(values",{"_index":1823,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.setheader('content",{"_index":1820,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.state",{"_index":2342,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["res.status(400).send(response",{"_index":926,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.statuscode",{"_index":490,"title":{},"body":{"modules/AppModule.html":{}}}],["reset",{"_index":381,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}],["resolve",{"_index":2573,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolvepublickey",{"_index":2569,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolvepublickey(payload",{"_index":2571,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolver.service",{"_index":2566,"title":{},"body":{"modules/ResolverModule.html":{}}}],["resolver/resolver.module",{"_index":2424,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["resolver/resolver.service",{"_index":2475,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["resolvermodule",{"_index":2420,"title":{"modules/ResolverModule.html":{}},"body":{"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"modules.html":{},"overview.html":{}}}],["resolverservice",{"_index":2438,"title":{"injectables/ResolverService.html":{}},"body":{"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"coverage.html":{},"overview.html":{}}}],["resolves",{"_index":1077,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/PresentationsService.html":{}}}],["resolving",{"_index":2442,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{}}}],["resource",{"_index":754,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["resourceserver",{"_index":2089,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["response",{"_index":196,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["response.data!.find((item",{"_index":209,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["response.data!['id",{"_index":200,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["response.dto",{"_index":534,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"controllers/WellKnownController.html":{}}}],["response.dto.ts",{"_index":610,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{},"coverage.html":{}}}],["response.dto.ts:11",{"_index":689,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{}}}],["response.dto.ts:13",{"_index":2037,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:15",{"_index":1514,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:17",{"_index":2042,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:19",{"_index":1518,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:2",{"_index":2607,"title":{},"body":{"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:21",{"_index":2039,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:23",{"_index":1520,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:25",{"_index":2040,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:29",{"_index":2043,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:3",{"_index":2609,"title":{},"body":{"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:33",{"_index":1859,"title":{},"body":{"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:37",{"_index":2036,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:4",{"_index":2608,"title":{},"body":{"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:5",{"_index":2041,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/SchemaResponse.html":{}}}],["response.dto.ts:9",{"_index":2046,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{}}}],["response.error",{"_index":197,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["response.jwks.keys.find((key",{"_index":2601,"title":{},"body":{"injectables/ResolverService.html":{}}}],["response.statuscode",{"_index":2723,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["response_mode",{"_index":2288,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_processing",{"_index":2345,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_type",{"_index":755,"title":{},"body":{"classes/AuthorizeQueries.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["response_types_supported",{"_index":2304,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_uri",{"_index":2286,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["responses",{"_index":2671,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsesize",{"_index":2724,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsestatus",{"_index":3149,"title":{},"body":{"injectables/WebhookService.html":{}}}],["responsetype",{"_index":1797,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["responsetype.qrcode",{"_index":1808,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsetype.uri",{"_index":1810,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsibility",{"_index":3778,"title":{},"body":{"license.html":{}}}],["responsible",{"_index":70,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/SessionModule.html":{},"license.html":{}}}],["result",{"_index":1078,"title":{},"body":{"injectables/CredentialConfigService.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"license.html":{}}}],["result.payload",{"_index":2512,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["resulting",{"_index":3569,"title":{},"body":{"license.html":{}}}],["results",{"_index":303,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retain",{"_index":3678,"title":{},"body":{"license.html":{}}}],["retrieve",{"_index":738,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/PresentationsService.html":{}}}],["retrieves",{"_index":1082,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{}}}],["return",{"_index":109,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigHelper.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":230,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{}}}],["returns",{"_index":136,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigHelper.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/functions.html":{}}}],["reuse",{"_index":2360,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["revisions",{"_index":3587,"title":{},"body":{"license.html":{}}}],["revokeall",{"_index":2640,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(@body",{"_index":2659,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(value",{"_index":2645,"title":{},"body":{"controllers/SessionController.html":{}}}],["revoked",{"_index":17,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"classes/StatusUpdateDto.html":{}}}],["right",{"_index":3054,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["rights",{"_index":3774,"title":{},"body":{"license.html":{}}}],["risk",{"_index":3416,"title":{},"body":{"index.html":{}}}],["risks",{"_index":3741,"title":{},"body":{"license.html":{}}}],["rlength",{"_index":3084,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["root",{"_index":542,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{},"index.html":{}}}],["rootpath",{"_index":495,"title":{},"body":{"modules/AppModule.html":{}}}],["royalty",{"_index":3629,"title":{},"body":{"license.html":{}}}],["rp",{"_index":221,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["rp_name",{"_index":425,"title":{},"body":{"modules/AppModule.html":{}}}],["rpadded",{"_index":3092,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["rs256",{"_index":1926,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["rsa",{"_index":1906,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["run",{"_index":1360,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/SessionService.html":{},"index.html":{}}}],["running",{"_index":354,"title":{},"body":{"controllers/AppController.html":{}}}],["runs",{"_index":3448,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":2474,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":2695,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["s",{"_index":3078,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["s's",{"_index":3088,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["s.length",{"_index":3100,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["s.slice(1",{"_index":3102,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["s[0",{"_index":3101,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["saltgenerator",{"_index":1227,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["same",{"_index":894,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"license.html":{}}}],["san",{"_index":1392,"title":{},"body":{"injectables/CryptoService.html":{}}}],["san.ext",{"_index":1351,"title":{},"body":{"injectables/CryptoService.html":{}}}],["sanext",{"_index":1350,"title":{},"body":{"injectables/CryptoService.html":{}}}],["sanitize",{"_index":2690,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody",{"_index":2673,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody(body",{"_index":2686,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized",{"_index":2691,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized[field",{"_index":2744,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizes",{"_index":2688,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["satisfies",{"_index":2132,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["save",{"_index":300,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/RegistrarService.html":{}}}],["saveconfig",{"_index":2539,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["saveconfig(config",{"_index":301,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["scalable",{"_index":3445,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":408,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":492,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulerregistry",{"_index":2818,"title":{},"body":{"injectables/SessionService.html":{}}}],["schema",{"_index":1015,"title":{},"body":{"entities/CredentialConfig.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"controllers/PresentationManagementController.html":{},"modules/RegistrarModule.html":{},"classes/SchemaResponse.html":{},"miscellaneous/variables.html":{}}}],["schema(@param('id",{"_index":1173,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["schema(id",{"_index":1162,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["schema.org/draft/2020",{"_index":2605,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["schema_uri",{"_index":2375,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["schema_uri#integrity",{"_index":2376,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["schemaresponse",{"_index":1048,"title":{"classes/SchemaResponse.html":{}},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/SchemaResponse.html":{},"coverage.html":{}}}],["scope",{"_index":756,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["script",{"_index":1356,"title":{},"body":{"injectables/CryptoService.html":{}}}],["sd",{"_index":1036,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"dependencies.html":{},"index.html":{}}}],["sdjwt",{"_index":1220,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwt.issue",{"_index":1229,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwtinstance",{"_index":2431,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["sdjwtvcinstance",{"_index":1203,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["seconds",{"_index":584,"title":{},"body":{"controllers/AuthController.html":{},"classes/ParResponseDto.html":{}}}],["secret",{"_index":566,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/SessionLoggerInterceptor.html":{},"index.html":{}}}],["secretkey",{"_index":1643,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["secretorkey",{"_index":1929,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secretorkeyprovider",{"_index":1895,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["section",{"_index":3638,"title":{},"body":{"license.html":{}}}],["sections",{"_index":3499,"title":{},"body":{"index.html":{},"license.html":{}}}],["secure",{"_index":3444,"title":{},"body":{"index.html":{}}}],["see",{"_index":3509,"title":{},"body":{"index.html":{},"license.html":{}}}],["select",{"_index":1764,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["selected",{"_index":636,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["self",{"_index":1380,"title":{},"body":{"injectables/CryptoService.html":{}}}],["sell",{"_index":3639,"title":{},"body":{"license.html":{}}}],["semantic",{"_index":3256,"title":{},"body":{"changelog.html":{}}}],["send",{"_index":340,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["sendauthorizationcode",{"_index":774,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sendauthorizationcode(res",{"_index":792,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sendauthorizationresponse",{"_index":775,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sendauthorizationresponse(queries",{"_index":794,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sending",{"_index":932,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/WebhookService.html":{}}}],["sends",{"_index":971,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/WebhookService.html":{}}}],["sendwebhook",{"_index":3124,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sendwebhook(session",{"_index":3127,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sendwebhooknotification",{"_index":3125,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sendwebhooknotification(session",{"_index":3129,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sensitive",{"_index":2689,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields",{"_index":2740,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields.foreach((field",{"_index":2743,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sent",{"_index":316,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"license.html":{}}}],["separable",{"_index":3594,"title":{},"body":{"license.html":{}}}],["separate",{"_index":3708,"title":{},"body":{"license.html":{}}}],["sequence",{"_index":3080,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["sequence.slice(2",{"_index":3086,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["sequence[1",{"_index":3085,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["serializers",{"_index":480,"title":{},"body":{"modules/AppModule.html":{}}}],["server",{"_index":120,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["server's",{"_index":2038,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["servers",{"_index":1114,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["servestaticmodule",{"_index":397,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forrootasync",{"_index":493,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":133,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["service.db",{"_index":1505,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["services",{"_index":337,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["session",{"_index":471,"title":{"entities/Session.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["session.auth_queries",{"_index":848,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.authorization_code",{"_index":880,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.controller",{"_index":2807,"title":{},"body":{"modules/SessionModule.html":{}}}],["session.credentialpayload",{"_index":3148,"title":{},"body":{"injectables/WebhookService.html":{}}}],["session.credentialpayload!.values",{"_index":3145,"title":{},"body":{"injectables/WebhookService.html":{}}}],["session.credentialpayload?.values?.[credentialconfigurationid",{"_index":1217,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["session.credentials",{"_index":908,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.id",{"_index":887,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{}}}],["session.issuanceid",{"_index":917,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.notifications",{"_index":2186,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifications.findindex",{"_index":2198,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifications.push",{"_index":2184,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifications[index",{"_index":2212,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifications[index].event",{"_index":2201,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifywebhook",{"_index":2210,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/WebhookService.html":{}}}],["session.service",{"_index":2649,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{}}}],["session.tenantid",{"_index":1216,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{}}}],["session.vp_nonce",{"_index":2350,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook",{"_index":2348,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook!.auth",{"_index":3132,"title":{},"body":{"injectables/WebhookService.html":{}}}],["session.webhook!.auth.config.value",{"_index":3135,"title":{},"body":{"injectables/WebhookService.html":{}}}],["session.webhook!.auth.type",{"_index":3133,"title":{},"body":{"injectables/WebhookService.html":{}}}],["session.webhook!.auth?.type",{"_index":3140,"title":{},"body":{"injectables/WebhookService.html":{}}}],["session.webhook!.url",{"_index":3138,"title":{},"body":{"injectables/WebhookService.html":{}}}],["session/entities/session.entity",{"_index":1207,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{}}}],["session/session.module",{"_index":407,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["session/session.service",{"_index":727,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/WebhookService.html":{}}}],["session_id",{"_index":2087,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["session_logger_key",{"_index":2696,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["session_tidy_up_interval",{"_index":2808,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["session_ttl",{"_index":2811,"title":{},"body":{"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["session_validation_schema",{"_index":406,"title":{},"body":{"modules/AppModule.html":{},"modules/SessionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessioncontroller",{"_index":2636,"title":{"controllers/SessionController.html":{}},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"coverage.html":{}}}],["sessionid",{"_index":469,"title":{},"body":{"modules/AppModule.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["sessionidparam",{"_index":2699,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["sessionlogcontext",{"_index":2115,"title":{"interfaces/SessionLogContext.html":{}},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{},"coverage.html":{}}}],["sessionlogger",{"_index":2073,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessionlogger('notification_id",{"_index":2082,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["sessionlogger('session",{"_index":2232,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["sessionlogger('state",{"_index":2079,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["sessionloggerinterceptor",{"_index":1832,"title":{"injectables/SessionLoggerInterceptor.html":{}},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{},"overview.html":{}}}],["sessionloggerservice",{"_index":1833,"title":{"injectables/SessionLoggerService.html":{}},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"overview.html":{}}}],["sessionmodule",{"_index":378,"title":{"modules/SessionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/SessionModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["sessionrepository",{"_index":2820,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessions",{"_index":2634,"title":{},"body":{"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["sessionservice",{"_index":726,"title":{"injectables/SessionService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"overview.html":{}}}],["set",{"_index":106,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/EC_Public.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/WellKnownController.html":{},"changelog.html":{}}}],["set+json",{"_index":3180,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["set+json')@get('jwks.json",{"_index":3165,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["setauthcode",{"_index":776,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["setauthcode(issuer_state",{"_index":796,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["setentry",{"_index":2959,"title":{},"body":{"injectables/StatusListService.html":{}}}],["setentry(id",{"_index":2941,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["setexpirationtime(expiresin",{"_index":1651,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setglobalconfig",{"_index":1850,"title":{},"body":{"modules/IssuerModule.html":{}}}],["setinterval(callback",{"_index":2851,"title":{},"body":{"injectables/SessionService.html":{}}}],["setissuedat",{"_index":1647,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setissuer(issuer",{"_index":1648,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setmetadata(is_public_key",{"_index":3856,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(session_logger_key",{"_index":3857,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setprotectedheader",{"_index":1645,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setprotectedheader(header",{"_index":1630,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["setsubject(options.subject",{"_index":1649,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["settimeout",{"_index":173,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["setup",{"_index":3484,"title":{},"body":{"index.html":{}}}],["setupclient",{"_index":997,"title":{},"body":{"injectables/ClientService.html":{}}}],["setupclient(id",{"_index":977,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["sha",{"_index":1225,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["shall",{"_index":3531,"title":{},"body":{"license.html":{}}}],["shares",{"_index":3558,"title":{},"body":{"license.html":{}}}],["shell",{"_index":1361,"title":{},"body":{"injectables/CryptoService.html":{}}}],["shouldenableautologging",{"_index":1988,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["shouldlog",{"_index":2759,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["shuffel",{"_index":2905,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["shuffled",{"_index":2899,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["sign",{"_index":1396,"title":{},"body":{"injectables/CryptoService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/variables.html":{}}}],["sign(privatekeyinstance",{"_index":1631,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["sign(value",{"_index":3025,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["signalg",{"_index":1222,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["signature",{"_index":1267,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/variables.html":{}}}],["signature).catch((err",{"_index":2499,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["signaturebase64url",{"_index":3852,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signed",{"_index":1381,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signedjwt",{"_index":2320,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwt.length",{"_index":2326,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwtlength",{"_index":2325,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signer",{"_index":884,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/VaultKeyService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["signer(tenantid",{"_index":1586,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["signer.alg",{"_index":1440,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signer.method",{"_index":1436,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signer.publicjwk",{"_index":1439,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signerjwk",{"_index":1441,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signing",{"_index":1238,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{}}}],["signingcert",{"_index":1409,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signinginput",{"_index":3074,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["signjwt",{"_index":1283,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["signjwt(header",{"_index":1305,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signjwt(payload",{"_index":1588,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/VaultKeyService.html":{}}}],["signjwtcallback",{"_index":1299,"title":{},"body":{"injectables/CryptoService.html":{}}}],["signs",{"_index":3027,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["simplicity",{"_index":2514,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["singleline",{"_index":460,"title":{},"body":{"modules/AppModule.html":{}}}],["size",{"_index":2902,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["skip",{"_index":3082,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["software",{"_index":3567,"title":{},"body":{"license.html":{}}}],["sole",{"_index":3777,"title":{},"body":{"license.html":{}}}],["solely",{"_index":3737,"title":{},"body":{"license.html":{}}}],["solutions",{"_index":3415,"title":{},"body":{"index.html":{}}}],["solves",{"_index":3419,"title":{},"body":{"index.html":{}}}],["someone",{"_index":279,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["sort",{"_index":2909,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"index.html":{},"license.html":{}}}],["sources",{"_index":2702,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["spadded",{"_index":3093,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["special",{"_index":3753,"title":{},"body":{"license.html":{}}}],["specific",{"_index":635,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/FileSystemKeyService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["specifies",{"_index":656,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["split",{"_index":3280,"title":{},"body":{"changelog.html":{}}}],["sqlite",{"_index":1482,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["sqlite3",{"_index":3384,"title":{},"body":{"dependencies.html":{}}}],["src/.../auth.module.ts",{"_index":3828,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../authentication",{"_index":3824,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../crypto",{"_index":3826,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../crypto.module.ts",{"_index":3829,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../crypto.service.ts",{"_index":3825,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../database.module.ts",{"_index":3830,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../ed25519.ts",{"_index":3831,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../issuer.module.ts",{"_index":3833,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../key.module.ts",{"_index":3834,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":3391,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../presentation",{"_index":3390,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../public.decorator.ts",{"_index":3832,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../registrar.module.ts",{"_index":3835,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session",{"_index":3836,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session.entity.ts",{"_index":3827,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../session.module.ts",{"_index":3837,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../tenant",{"_index":3838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../token.decorator.ts",{"_index":3839,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../util.ts",{"_index":3392,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../webhook.dto.ts",{"_index":3823,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.module.ts",{"_index":383,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/app.controller.ts",{"_index":346,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app/app.controller.ts:8",{"_index":349,"title":{},"body":{"controllers/AppController.html":{}}}],["src/auth/auth.controller.ts",{"_index":501,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:60",{"_index":513,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.guard.ts",{"_index":1860,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/auth.guard.ts:12",{"_index":1869,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.guard.ts:7",{"_index":1866,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.module.ts",{"_index":590,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/client.service.ts",{"_index":941,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"coverage.html":{}}}],["src/auth/client.service.ts:16",{"_index":999,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:23",{"_index":1003,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:35",{"_index":1001,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:45",{"_index":1002,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:61",{"_index":1006,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:74",{"_index":1000,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:82",{"_index":1005,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/dto/client",{"_index":992,"title":{},"body":{"classes/ClientCredentialsDto.html":{},"coverage.html":{}}}],["src/auth/dto/token",{"_index":2995,"title":{},"body":{"classes/TokenResponse.html":{},"coverage.html":{}}}],["src/auth/jwt.service.ts",{"_index":1633,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{}}}],["src/auth/jwt.service.ts:13",{"_index":1882,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:19",{"_index":1885,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:56",{"_index":1887,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:83",{"_index":1883,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:94",{"_index":1886,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":1888,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:20",{"_index":1894,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:47",{"_index":1898,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:66",{"_index":1900,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:9",{"_index":1892,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/public.decorator.ts",{"_index":3296,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/tenant",{"_index":3297,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/token.decorator.ts",{"_index":2990,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/crypto.module.ts",{"_index":1272,"title":{},"body":{"modules/CryptoModule.html":{}}}],["src/crypto/crypto.service.ts",{"_index":1275,"title":{},"body":{"injectables/CryptoService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/crypto.service.ts:144",{"_index":1292,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:157",{"_index":1308,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:164",{"_index":1306,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:172",{"_index":1310,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:191",{"_index":1288,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:229",{"_index":1298,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:266",{"_index":1293,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:280",{"_index":1296,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:32",{"_index":1286,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:36",{"_index":1313,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:39",{"_index":1302,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:47",{"_index":1304,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:61",{"_index":1301,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/encryption/encryption.service.ts",{"_index":1523,"title":{},"body":{"injectables/EncryptionService.html":{},"coverage.html":{}}}],["src/crypto/encryption/encryption.service.ts:11",{"_index":1540,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:12",{"_index":1542,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:13",{"_index":1541,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:14",{"_index":1531,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:19",{"_index":1538,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:23",{"_index":1537,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:58",{"_index":1533,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:63",{"_index":1535,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/key/crypto/crypto",{"_index":1246,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/key/crypto/crypto.module.ts",{"_index":3304,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/key/crypto/crypto.service.ts",{"_index":1456,"title":{},"body":{"injectables/CryptoService-1.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/key/crypto/crypto.service.ts:10",{"_index":1460,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["src/crypto/key/crypto/crypto.service.ts:17",{"_index":1462,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["src/crypto/key/crypto/crypto.service.ts:21",{"_index":1466,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["src/crypto/key/crypto/ed25519.ts",{"_index":3307,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/key/entities/key.entity.ts",{"_index":1939,"title":{},"body":{"entities/KeyEntity.html":{},"coverage.html":{}}}],["src/crypto/key/entities/key.entity.ts:6",{"_index":1941,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/key.entity.ts:8",{"_index":1940,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/filesystem",{"_index":1566,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"coverage.html":{}}}],["src/crypto/key/key.module.ts",{"_index":1942,"title":{},"body":{"modules/KeyModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/key/key.module.ts:36",{"_index":1944,"title":{},"body":{"modules/KeyModule.html":{}}}],["src/crypto/key/key.service.ts",{"_index":1966,"title":{},"body":{"classes/KeyService.html":{},"coverage.html":{}}}],["src/crypto/key/key.service.ts:11",{"_index":1972,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:17",{"_index":1973,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:23",{"_index":1968,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:29",{"_index":1969,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:30",{"_index":1970,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:31",{"_index":1971,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:37",{"_index":1975,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/vault",{"_index":3003,"title":{},"body":{"injectables/VaultKeyService.html":{},"coverage.html":{}}}],["src/database/database.module.ts",{"_index":1473,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/health/health.controller.ts",{"_index":1670,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:25",{"_index":1677,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":1685,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/issuer/authorize/authorize.controller.ts",{"_index":692,"title":{},"body":{"controllers/AuthorizeController.html":{},"coverage.html":{}}}],["src/issuer/authorize/authorize.controller.ts:36",{"_index":706,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:58",{"_index":714,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:82",{"_index":717,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:98",{"_index":703,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.service.ts",{"_index":770,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["src/issuer/authorize/authorize.service.ts:104",{"_index":799,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:210",{"_index":790,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:228",{"_index":782,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:306",{"_index":793,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:320",{"_index":797,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:37",{"_index":781,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:48",{"_index":787,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:55",{"_index":784,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:78",{"_index":795,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/dto/authorize",{"_index":746,"title":{},"body":{"classes/AuthorizeQueries.html":{},"coverage.html":{}}}],["src/issuer/authorize/dto/par",{"_index":2363,"title":{},"body":{"classes/ParResponseDto.html":{},"coverage.html":{}}}],["src/issuer/credentials",{"_index":1159,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"classes/PresentationDuringIssuance.html":{},"classes/SchemaResponse.html":{},"classes/VCT.html":{},"coverage.html":{}}}],["src/issuer/credentials/credential",{"_index":1064,"title":{},"body":{"injectables/CredentialConfigService.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.controller.ts",{"_index":1129,"title":{},"body":{"controllers/CredentialsController.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.controller.ts:35",{"_index":1138,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:45",{"_index":1140,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:58",{"_index":1136,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.service.ts",{"_index":1175,"title":{},"body":{"injectables/CredentialsService.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.service.ts:127",{"_index":1194,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:153",{"_index":1192,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:17",{"_index":1183,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:33",{"_index":1197,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:46",{"_index":1190,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:62",{"_index":1187,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts",{"_index":1010,"title":{},"body":{"entities/CredentialConfig.html":{},"coverage.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:17",{"_index":1039,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:22",{"_index":1051,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:28",{"_index":1029,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:34",{"_index":1021,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:40",{"_index":1033,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:47",{"_index":1052,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:54",{"_index":1050,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:64",{"_index":1045,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/issuance/dto/authentication",{"_index":625,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts",{"_index":1730,"title":{},"body":{"classes/IssuanceDto.html":{},"coverage.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:20",{"_index":1739,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:27",{"_index":1736,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:36",{"_index":1732,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:45",{"_index":1740,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/entities/issuance",{"_index":1688,"title":{},"body":{"entities/IssuanceConfig.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.controller.ts",{"_index":1713,"title":{},"body":{"controllers/IssuanceController.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.controller.ts:28",{"_index":1719,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.controller.ts:38",{"_index":1722,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.controller.ts:54",{"_index":1717,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.service.ts",{"_index":1742,"title":{},"body":{"injectables/IssuanceService.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.service.ts:128",{"_index":1751,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:15",{"_index":1748,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:32",{"_index":1753,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:53",{"_index":1755,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:69",{"_index":1758,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuer",{"_index":1779,"title":{},"body":{"controllers/IssuerManagementController.html":{},"coverage.html":{}}}],["src/issuer/issuer.module.ts",{"_index":1835,"title":{},"body":{"modules/IssuerModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/issuer/oid4vci/dto/notification",{"_index":2028,"title":{},"body":{"classes/NotificationRequestDto.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/dto/offer",{"_index":2047,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts",{"_index":2061,"title":{},"body":{"controllers/Oid4vciController.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:28",{"_index":2065,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:42",{"_index":2069,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts",{"_index":2088,"title":{},"body":{"injectables/Oid4vciService.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:115",{"_index":2096,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:180",{"_index":2098,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:297",{"_index":2100,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:40",{"_index":2107,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:42",{"_index":2093,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:47",{"_index":2105,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:54",{"_index":2104,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:65",{"_index":2103,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/util.ts",{"_index":3329,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/issuer/status",{"_index":2864,"title":{},"body":{"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":3332,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/registrar/registrar",{"_index":2517,"title":{},"body":{"classes/RegistrarConfig.html":{},"coverage.html":{}}}],["src/registrar/registrar.module.ts",{"_index":2526,"title":{},"body":{"modules/RegistrarModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/registrar/registrar.service.ts",{"_index":6,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"coverage.html":{}}}],["src/registrar/registrar.service.ts:111",{"_index":2548,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:119",{"_index":2550,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:131",{"_index":2552,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:146",{"_index":2553,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:163",{"_index":2546,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:190",{"_index":2555,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:208",{"_index":2547,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:235",{"_index":2543,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:276",{"_index":2545,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:333",{"_index":2549,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:356",{"_index":2554,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:53",{"_index":2557,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:57",{"_index":2556,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:61",{"_index":2541,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:78",{"_index":2551,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/session/entities/session.entity.ts",{"_index":2610,"title":{},"body":{"entities/Session.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/session/entities/session.entity.ts:104",{"_index":2625,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:41",{"_index":2618,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:44",{"_index":2619,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:49",{"_index":2616,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:54",{"_index":2612,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:59",{"_index":2624,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:64",{"_index":2611,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:69",{"_index":2628,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:74",{"_index":2613,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:79",{"_index":2623,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:84",{"_index":2614,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:89",{"_index":2630,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:94",{"_index":2621,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:99",{"_index":2620,"title":{},"body":{"entities/Session.html":{}}}],["src/session/session.controller.ts",{"_index":2637,"title":{},"body":{"controllers/SessionController.html":{},"coverage.html":{}}}],["src/session/session.controller.ts:23",{"_index":2641,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:32",{"_index":2644,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:42",{"_index":2648,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.module.ts",{"_index":2806,"title":{},"body":{"modules/SessionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/session/session.service.ts",{"_index":2814,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["src/session/session.service.ts:10",{"_index":2819,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:23",{"_index":2834,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:40",{"_index":2826,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:50",{"_index":2823,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:65",{"_index":2829,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:74",{"_index":2828,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:83",{"_index":2832,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:90",{"_index":2840,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/utils/logger/logger",{"_index":1977,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["src/utils/logger/session",{"_index":2661,"title":{},"body":{"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/webhook/webhook.dto.ts",{"_index":306,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/utils/webhook/webhook.dto.ts:13",{"_index":314,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:19",{"_index":318,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:36",{"_index":3119,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:43",{"_index":3118,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:54",{"_index":3122,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:62",{"_index":3121,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/utils/webhook/webhook.service.ts",{"_index":3123,"title":{},"body":{"injectables/WebhookService.html":{},"coverage.html":{}}}],["src/utils/webhook/webhook.service.ts:102",{"_index":3130,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/utils/webhook/webhook.service.ts:13",{"_index":3126,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/utils/webhook/webhook.service.ts:32",{"_index":3128,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/verifier/oid4vp/dto/authorization",{"_index":688,"title":{},"body":{"classes/AuthorizationResponse.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/dto/presentation",{"_index":2412,"title":{},"body":{"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts",{"_index":2216,"title":{},"body":{"controllers/Oid4vpController.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:34",{"_index":2223,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:53",{"_index":2226,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.module.ts",{"_index":2243,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts",{"_index":2246,"title":{},"body":{"injectables/Oid4vpService.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:19",{"_index":2250,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:218",{"_index":2257,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:267",{"_index":2258,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:40",{"_index":2252,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/presentations/dto/auth",{"_index":609,"title":{},"body":{"interfaces/AuthResponse.html":{},"coverage.html":{}}}],["src/verifier/presentations/dto/vp",{"_index":2558,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{},"coverage.html":{}}}],["src/verifier/presentations/entities/presentation",{"_index":2365,"title":{},"body":{"entities/PresentationConfig.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.controller.ts",{"_index":2379,"title":{},"body":{"controllers/PresentationManagementController.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.controller.ts:111",{"_index":2383,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:121",{"_index":2391,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:137",{"_index":2385,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:79",{"_index":2389,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.module.ts",{"_index":2421,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["src/verifier/presentations/presentations.service.ts",{"_index":2427,"title":{},"body":{"injectables/PresentationsService.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.service.ts:109",{"_index":2463,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:122",{"_index":2471,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:145",{"_index":2469,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:160",{"_index":2466,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:177",{"_index":2456,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:22",{"_index":2440,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:40",{"_index":2452,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:54",{"_index":2451,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:67",{"_index":2460,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:78",{"_index":2445,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:88",{"_index":2449,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/resolver/dto/issuer",{"_index":1825,"title":{},"body":{"interfaces/IssuerMetadata.html":{},"coverage.html":{}}}],["src/verifier/resolver/resolver.module.ts",{"_index":2565,"title":{},"body":{"modules/ResolverModule.html":{}}}],["src/verifier/resolver/resolver.service.ts",{"_index":2567,"title":{},"body":{"injectables/ResolverService.html":{},"coverage.html":{}}}],["src/verifier/resolver/resolver.service.ts:12",{"_index":2570,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/resolver/resolver.service.ts:21",{"_index":2572,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/verifier.module.ts",{"_index":3116,"title":{},"body":{"modules/VerifierModule.html":{}}}],["src/well",{"_index":1098,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["stable",{"_index":3489,"title":{},"body":{"index.html":{}}}],["stack",{"_index":2734,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"index.html":{}}}],["stack—so",{"_index":3426,"title":{},"body":{"index.html":{}}}],["stage",{"_index":2162,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{}}}],["standardized",{"_index":3401,"title":{},"body":{"index.html":{}}}],["start",{"_index":2254,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"index.html":{}}}],["started",{"_index":2789,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"injectables/SessionLoggerService.html":{}}}],["starting",{"_index":2716,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["starts",{"_index":145,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["startswith('http",{"_index":1857,"title":{},"body":{"modules/IssuerModule.html":{}}}],["starttime",{"_index":2717,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["state",{"_index":612,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{},"license.html":{}}}],["stated",{"_index":3637,"title":{},"body":{"license.html":{}}}],["statement",{"_index":3697,"title":{},"body":{"license.html":{}}}],["statements",{"_index":3284,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":399,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthenticationConfigHelper.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"changelog.html":{},"dependencies.html":{}}}],["stating",{"_index":3675,"title":{},"body":{"license.html":{}}}],["status",{"_index":544,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"dependencies.html":{},"index.html":{}}}],["status_list",{"_index":2940,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuscode",{"_index":489,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["statuslist",{"_index":2884,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslist(file.elements",{"_index":2915,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslist+jwt",{"_index":2919,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslistcontroller",{"_index":2863,"title":{"controllers/StatusListController.html":{}},"body":{"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"coverage.html":{}}}],["statuslistfetcher",{"_index":2432,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["statuslistfile",{"_index":2878,"title":{"interfaces/StatusListFile.html":{}},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"coverage.html":{}}}],["statuslistjwtheaderparameters",{"_index":2885,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statuslistmodule",{"_index":1831,"title":{"modules/StatusListModule.html":{}},"body":{"modules/IssuerModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules.html":{},"overview.html":{}}}],["statuslistservice",{"_index":1181,"title":{"injectables/StatusListService.html":{}},"body":{"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"coverage.html":{},"overview.html":{}}}],["statusmapping",{"_index":2887,"title":{"entities/StatusMapping.html":{}},"body":{"interfaces/StatusListFile.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"coverage.html":{}}}],["statusmappingrepository",{"_index":2894,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["statusupdatedto",{"_index":2646,"title":{"classes/StatusUpdateDto.html":{}},"body":{"controllers/SessionController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["stdio",{"_index":1365,"title":{},"body":{"injectables/CryptoService.html":{}}}],["step",{"_index":739,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/CryptoService.html":{},"injectables/SessionLoggerService.html":{},"injectables/VaultKeyService.html":{}}}],["still",{"_index":215,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"index.html":{}}}],["stoppage",{"_index":3760,"title":{},"body":{"license.html":{}}}],["storage",{"_index":3450,"title":{},"body":{"index.html":{}}}],["store",{"_index":241,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{}}}],["store(tenantid",{"_index":1086,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["storeaccesscertificate",{"_index":1284,"title":{},"body":{"injectables/CryptoService.html":{}}}],["storeaccesscertificate(crt",{"_index":1307,"title":{},"body":{"injectables/CryptoService.html":{}}}],["storeconfig",{"_index":2960,"title":{},"body":{"injectables/StatusListService.html":{}}}],["storeconfig(content",{"_index":2927,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["storecredentialconfiguration",{"_index":1133,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{}}}],["storecredentialconfiguration(config",{"_index":1139,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["storecredentialconfiguration(tenantid",{"_index":1196,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["stored",{"_index":1088,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["storeexistingrp",{"_index":2540,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["storeexistingrp(name",{"_index":206,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["storeissuanceconfiguration",{"_index":1716,"title":{},"body":{"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["storeissuanceconfiguration(config",{"_index":1720,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["storeissuanceconfiguration(tenantid",{"_index":1757,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["storepresentationconfig",{"_index":2381,"title":{},"body":{"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["storepresentationconfig(config",{"_index":2390,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["storepresentationconfig(vprequest",{"_index":2459,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid",{"_index":2436,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid(registrationcertid",{"_index":2462,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["stores",{"_index":201,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["strategy",{"_index":1903,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":18,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":919,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{}}}],["structured",{"_index":2748,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["sub",{"_index":576,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{}}}],["subj",{"_index":1383,"title":{},"body":{"injectables/CryptoService.html":{}}}],["subject",{"_index":257,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{},"license.html":{}}}],["subjectaltname=dns:${hostname",{"_index":1386,"title":{},"body":{"injectables/CryptoService.html":{}}}],["sublicense",{"_index":3633,"title":{},"body":{"license.html":{}}}],["submission",{"_index":3699,"title":{},"body":{"license.html":{}}}],["submit",{"_index":3603,"title":{},"body":{"license.html":{}}}],["submitted",{"_index":3601,"title":{},"body":{"license.html":{}}}],["subsequently",{"_index":3620,"title":{},"body":{"license.html":{}}}],["succeeded",{"_index":2800,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["successfully",{"_index":2324,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/WebhookService.html":{}}}],["such",{"_index":1516,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"entities/Session.html":{},"license.html":{}}}],["summary",{"_index":539,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/WellKnownController.html":{}}}],["super",{"_index":1874,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/VaultKeyService.html":{}}}],["super.canactivate(context",{"_index":1879,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["supersede",{"_index":3707,"title":{},"body":{"license.html":{}}}],["support",{"_index":553,"title":{},"body":{"controllers/AuthController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/Session.html":{},"changelog.html":{},"index.html":{},"license.html":{},"modules.html":{}}}],["supported",{"_index":333,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/CryptoService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"index.html":{}}}],["supportedauthenticationscheme",{"_index":2110,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["supportedauthenticationscheme.clientattestationjwt",{"_index":843,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["supportedauthenticationscheme.dpop",{"_index":2157,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["supports",{"_index":515,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["svg",{"_index":3811,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":1470,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["symmetric",{"_index":1931,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["synchronize",{"_index":1493,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["syntax",{"_index":3797,"title":{},"body":{"license.html":{}}}],["system",{"_index":1576,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["systems",{"_index":3611,"title":{},"body":{"license.html":{}}}],["t",{"_index":1534,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["table",{"_index":3347,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3346,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":3083,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["tap",{"_index":2693,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["tap((data",{"_index":2720,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["target",{"_index":457,"title":{},"body":{"modules/AppModule.html":{}}}],["tell",{"_index":2354,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["tenancy",{"_index":2627,"title":{},"body":{"entities/Session.html":{}}}],["tenant",{"_index":150,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/FileSystemKeyService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"changelog.html":{}}}],["tenant.init",{"_index":3861,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tenant.keys",{"_index":3863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tenant_events",{"_index":66,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tenant_init",{"_index":3860,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tenant_keys",{"_index":3862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tenantid",{"_index":152,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{}}}],["tenantid)).uri",{"_index":900,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["tenantid/.well",{"_index":3160,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["tenantid/authorize",{"_index":693,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["tenantid/oid4vp",{"_index":2217,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["tenantid/status",{"_index":2866,"title":{},"body":{"controllers/StatusListController.html":{}}}],["tenantid/vci",{"_index":2062,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["tenanturl",{"_index":2270,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["term",{"_index":3455,"title":{},"body":{"index.html":{}}}],["terminate",{"_index":3661,"title":{},"body":{"license.html":{}}}],["terminusmodule",{"_index":1687,"title":{},"body":{"modules/HealthModule.html":{}}}],["terms",{"_index":3526,"title":{},"body":{"license.html":{}}}],["test",{"_index":1911,"title":{},"body":{"injectables/JwtStrategy.html":{},"changelog.html":{}}}],["text",{"_index":3682,"title":{},"body":{"license.html":{}}}],["textencoder().encode(data",{"_index":3850,"title":{},"body":{"miscellaneous/variables.html":{}}}],["textencoder().encode(secret",{"_index":1644,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["then((cryptokey",{"_index":3060,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["then((key",{"_index":1559,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["then((res",{"_index":222,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["then((response",{"_index":208,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["then((session",{"_index":847,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["then(async",{"_index":195,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"injectables/VaultKeyService.html":{}}}],["theory",{"_index":3744,"title":{},"body":{"license.html":{}}}],["thereof",{"_index":3597,"title":{},"body":{"license.html":{}}}],["third",{"_index":3689,"title":{},"body":{"license.html":{}}}],["this.accesstoken",{"_index":131,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.addaccesscertificate(config",{"_index":219,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.addrp(tenantid",{"_index":157,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.authorizeservice.authorizationchallengeendpoint",{"_index":745,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.authzmetadata",{"_index":3179,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.authorizeservice.sendauthorizationresponse",{"_index":733,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.validatetokenrequest(body",{"_index":744,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authzmetadata(tenantid",{"_index":863,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.authzservice.authzmetadata(tenantid",{"_index":2120,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.client",{"_index":126,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.client.setconfig",{"_index":127,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.clients",{"_index":959,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clientservice.validateclient",{"_index":573,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.config",{"_index":2013,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enabledebugmode",{"_index":2023,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enablehttplogger",{"_index":2022,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enablesessionlogger",{"_index":2021,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.level",{"_index":2024,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.logformat",{"_index":2025,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.configservice",{"_index":233,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.get",{"_index":2016,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/VaultKeyService.html":{}}}],["this.configservice.get('log_level",{"_index":2015,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.configservice.get('oidc",{"_index":1668,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["this.configservice.get('registrar_url",{"_index":141,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.get('vault_url",{"_index":3035,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.configservice.getorthrow",{"_index":114,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('auth_client_id",{"_index":963,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.configservice.getorthrow('folder",{"_index":286,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["this.configservice.getorthrow('jwt_expires_in",{"_index":1642,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow('jwt_issuer",{"_index":1640,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow('jwt_secret",{"_index":1639,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow('public_url",{"_index":821,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.configservice.getorthrow('public_url')}${req.url",{"_index":852,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.configservice.getorthrow('public_url')}/${session.tenantid}/credentials/vct/${credentialconfigurationid",{"_index":1234,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.configservice.getorthrow('public_url')}/${tenantid",{"_index":883,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.configservice.getorthrow('public_url')}/${tenantid}/oid4vp/request/${requestid}/${values.session",{"_index":2335,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.configservice.getorthrow('registrar_oidc_url",{"_index":112,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('registrar_url",{"_index":129,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('rp_name",{"_index":193,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('session_tidy_up_interval",{"_index":2849,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.configservice.getorthrow('session_ttl",{"_index":2859,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.configservie.get('crypto_alg",{"_index":1467,"title":{},"body":{"injectables/CryptoService-1.html":{}}}],["this.create(tenantid",{"_index":3040,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.createlist(tenantid",{"_index":2912,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.credentialconfigrepo",{"_index":1214,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepo.findby",{"_index":1210,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepo.findonebyorfail",{"_index":1243,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepo.save(value",{"_index":1209,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepository.delete",{"_index":1096,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.find",{"_index":1093,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.findone",{"_index":1094,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.save",{"_index":1095,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialsconfigservice.getbyid",{"_index":1769,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.credentialsservice.delete(user.sub",{"_index":1157,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.get(user.sub",{"_index":1154,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.getcredential",{"_index":2177,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.credentialsservice.getcredentialconfiguration",{"_index":2123,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.credentialsservice.getschema(id",{"_index":1174,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["this.credentialsservice.getvct(id",{"_index":1172,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["this.credentialsservice.store(user.sub",{"_index":1155,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.crpytoservice.getcertchain",{"_index":1237,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.crpytoservice.keyservice.signer",{"_index":1221,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.crypto",{"_index":1603,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.crypto.alg",{"_index":1617,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.crypto.generatekeypair",{"_index":1611,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.crypto.getsigner(keys.privatekey",{"_index":1608,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.cryptoservice.getalg",{"_index":1627,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/VaultKeyService.html":{}}}],["this.cryptoservice.getcallbackcontext",{"_index":2117,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.cryptoservice.getcallbackcontext(tenantid",{"_index":819,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.cryptoservice.getcertchain",{"_index":2316,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.cryptoservice.getcertchain('signing",{"_index":2920,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.cryptoservice.getcrypto",{"_index":1604,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.cryptoservice.getjwks(tenantid).then((key",{"_index":3182,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.cryptoservice.keyservice.getpublickey",{"_index":237,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{}}}],["this.cryptoservice.signjwt",{"_index":2321,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.cryptoservice.signjwt(header",{"_index":2921,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.cryptoservice.storeaccesscertificate",{"_index":243,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.db.pingcheck('database",{"_index":1684,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.dertojwtsignature(res.data.data.signature.split(':')[2",{"_index":3067,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.encryptionservice.decryptjwe",{"_index":2340,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.encryptionservice.getencryptionpublickey",{"_index":2291,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.eventemitter.emit(tenant_events.tenant_init",{"_index":991,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.eventemitter.emit(tenant_events.tenant_keys",{"_index":1337,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.filename",{"_index":2901,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.folder",{"_index":1329,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/VaultKeyService.html":{}}}],["this.getaccesscertificateid(config",{"_index":158,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.getauthorizationserver",{"_index":822,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.getauthorizationserver(tenantid).createaccesstokenresponse",{"_index":882,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.getcallbackcontext(tenantid).hash",{"_index":1443,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.getclients",{"_index":955,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.getclients().find((c",{"_index":966,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.getconfig(session.tenantid",{"_index":2933,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.getconfig(tenantid",{"_index":2914,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.getconfig(tenantid).jwt",{"_index":2924,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.getjwk",{"_index":3058,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.getkeys(tenant",{"_index":1606,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.getkeys(tenantid",{"_index":1607,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.getkeys(tenantid).then((keys",{"_index":1624,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.getkid(tenantid",{"_index":3063,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.getpublickey('jwk",{"_index":3052,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.getpublickey('pem",{"_index":3037,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.getsignjwtcallback(tenantid",{"_index":1435,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.hascerts(tenantid",{"_index":1336,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.headers",{"_index":3036,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.health.check",{"_index":1683,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.httpservice.get",{"_index":2594,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["this.httpservice.post",{"_index":3048,"title":{},"body":{"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{}}}],["this.init(tenantid",{"_index":1545,"title":{},"body":{"injectables/EncryptionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.isenabled",{"_index":108,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.ishttploggerenabled",{"_index":2026,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.ispresentationduringissuanceauth(config",{"_index":682,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["this.issuanceconfigrepo.create",{"_index":1775,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.delete",{"_index":1777,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.find",{"_index":1762,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.findoneorfail",{"_index":1766,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.save(issuanceconfig",{"_index":1776,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceservice",{"_index":2133,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuanceservice.deleteissuanceconfiguration(user.sub",{"_index":1729,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.issuanceservice.getissuanceconfiguration(user.sub",{"_index":1726,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.issuanceservice.getissuanceconfigurationbyid",{"_index":918,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.issuanceservice.storeissuanceconfiguration",{"_index":1727,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.issuer",{"_index":2118,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.createcredentialissuermetadata",{"_index":2122,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.createcredentialresponse",{"_index":2190,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.parsecredentialrequest",{"_index":2147,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.verifycredentialrequestjwtproof",{"_index":2170,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuermetadata(tenantid",{"_index":2140,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.isusingexternaloidc",{"_index":1637,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.jwtservice.generatetoken(payload",{"_index":578,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.jwtservice.isusingexternaloidc",{"_index":550,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.kbverifier.bind(this",{"_index":2481,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.keyservice.getpublickey",{"_index":1447,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.keyservice.getpublickey('jwk",{"_index":1417,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.keyservice.init(tenantid",{"_index":1335,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.keyservice.signjwt(payload",{"_index":1416,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.loadclients",{"_index":960,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.loadconfig(tenantid",{"_index":155,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.loadconfig(tenantid).id",{"_index":255,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.loadconfiguration",{"_index":2012,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.logger.error",{"_index":2730,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.logger.info",{"_index":2711,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.logger.setcontext('sessionlogger",{"_index":2710,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.logger.setcontext('sessionloggerservice",{"_index":2786,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["this.oauth2client",{"_index":118,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.oauth2client.clientcredentials().then((token",{"_index":167,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.oid4vciservice.createoffer",{"_index":1815,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["this.oid4vciservice.getcredential(req",{"_index":2080,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.handlenotification(req",{"_index":2083,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.issuermetadata(tenantid",{"_index":3178,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.oid4vpservice.createauthorizationrequest",{"_index":2235,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.oid4vpservice.createrequest",{"_index":2402,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.oid4vpservice.createrequest('pid",{"_index":899,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.oid4vpservice.getresponse(body",{"_index":2237,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.parsechallengerequest",{"_index":925,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.parseloglevel",{"_index":2014,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.presentationsservice.deletepresentationconfig(id",{"_index":2411,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.getpresentationconfig",{"_index":2272,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.getpresentationconfigs(user.sub",{"_index":2408,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.parseresponse",{"_index":2349,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.storepresentationconfig",{"_index":2409,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.storercid",{"_index":281,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.privateencryptionkey",{"_index":1560,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.privateenncryptionpath",{"_index":1546,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.privatekeypath",{"_index":1609,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.publicencryptionkey",{"_index":1561,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.publicencryptionpath",{"_index":1548,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.publickeypath",{"_index":1610,"title":{},"body":{"injectables/FileSystemKeyService.html":{}}}],["this.reflector.get",{"_index":2697,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.reflector.getallandoverride",{"_index":1876,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.refreshaccesstoken",{"_index":149,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.registrarservice.addregistrationcertificate",{"_index":2278,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.registrarservice.isenabled",{"_index":2275,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.resolverservice.resolvepublickey",{"_index":2496,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.resourceserver",{"_index":2119,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.resourceserver.verifyresourcerequest",{"_index":2152,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sanitizebody(request.body",{"_index":2715,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.saveconfig(config",{"_index":199,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.schedulerregistry.addinterval('tidyupsessions",{"_index":2852,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sdjwtinstance",{"_index":2479,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.sendauthorizationcode",{"_index":909,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sendauthorizationcode(res",{"_index":933,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionlogger.logauthorizationrequest(logcontext",{"_index":2281,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logcredentialissuance",{"_index":2179,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sessionlogger.logcredentialverification",{"_index":2351,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowcomplete(logcontext",{"_index":2187,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowerror(logcontext",{"_index":2196,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowstart(logcontext",{"_index":2164,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.lognotification(logcontext",{"_index":2203,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sessionlogger.logsession",{"_index":2323,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/WebhookService.html":{}}}],["this.sessionlogger.logsession(logcontext",{"_index":3136,"title":{},"body":{"injectables/WebhookService.html":{}}}],["this.sessionlogger.logsessionerror",{"_index":2213,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/WebhookService.html":{}}}],["this.sessionrepository.delete",{"_index":2860,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.find",{"_index":2855,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail",{"_index":2856,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail(where",{"_index":2857,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.save(session",{"_index":2853,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.update",{"_index":2854,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionservice",{"_index":845,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.add",{"_index":3147,"title":{},"body":{"injectables/WebhookService.html":{}}}],["this.sessionservice.add(auth_session",{"_index":2279,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.add(body.issuer_state",{"_index":740,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.sessionservice.add(issuer_state",{"_index":940,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.add(res.state",{"_index":2355,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.add(session.id",{"_index":2185,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sessionservice.add(values.session",{"_index":2332,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.create",{"_index":2142,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionservice.get",{"_index":2158,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sessionservice.get(body.auth_session",{"_index":905,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.get(body.issuer_state",{"_index":913,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.get(id",{"_index":2658,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.get(res.state",{"_index":2344,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.getall",{"_index":2656,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.getby",{"_index":857,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.setauthcode",{"_index":938,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.setauthcode(values.issuer_state",{"_index":850,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.setentry(entry.index",{"_index":2948,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.setupclient(client.id",{"_index":957,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.shouldlog",{"_index":2787,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["this.sign(input",{"_index":3042,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.sign(signinginput",{"_index":3076,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.signjwt(header",{"_index":1449,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.statuslistfetcher.bind(this",{"_index":2482,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.statuslistservice.createentry",{"_index":1235,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.statuslistservice.getlist(tenantid",{"_index":2877,"title":{},"body":{"controllers/StatusListController.html":{}}}],["this.statuslistservice.updatestatus(value",{"_index":2660,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.statusmappingrepository.findby",{"_index":2944,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.statusmappingrepository.save",{"_index":2939,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.storeconfig(file",{"_index":2923,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["this.storeexistingrp(name",{"_index":198,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["this.tidyupsessions",{"_index":2847,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.vaulturl",{"_index":3034,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.vaulturl}/keys/${tenantid",{"_index":3049,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.vaulturl}/sign/${tenantid",{"_index":3064,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["this.verifier.bind(this",{"_index":2480,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository",{"_index":2489,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.delete",{"_index":2488,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.find",{"_index":2483,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.save(vprequest",{"_index":2487,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.update",{"_index":2491,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.webhookservice.sendwebhook",{"_index":2361,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.webhookservice.sendwebhooknotification",{"_index":2211,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["those",{"_index":3642,"title":{},"body":{"license.html":{}}}],["through",{"_index":3533,"title":{},"body":{"license.html":{}}}],["throw",{"_index":239,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{}}}],["tidy",{"_index":2836,"title":{},"body":{"injectables/SessionService.html":{}}}],["tidyupsessions",{"_index":2816,"title":{},"body":{"injectables/SessionService.html":{}}}],["time",{"_index":2206,"title":{},"body":{"injectables/Oid4vciService.html":{},"classes/ParResponseDto.html":{}}}],["times",{"_index":2194,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["timestamp",{"_index":1698,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["title",{"_index":3733,"title":{},"body":{"license.html":{}}}],["tmp",{"_index":3216,"title":{},"body":{"changelog.html":{}}}],["todo",{"_index":248,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"injectables/WebhookService.html":{}}}],["together",{"_index":3411,"title":{},"body":{"index.html":{}}}],["token",{"_index":89,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["token(body",{"_index":715,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["token.accesstoken",{"_index":168,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["token.decorator",{"_index":532,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["token_endpoint",{"_index":825,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["token_endpoint_auth_methods_supported",{"_index":842,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["token_exchange",{"_index":2801,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["token_type",{"_index":547,"title":{},"body":{"controllers/AuthController.html":{},"classes/TokenResponse.html":{}}}],["tokenpayload",{"_index":531,"title":{"interfaces/TokenPayload.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CredentialsController.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tokenpayload.nonce",{"_index":2174,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["tokenpayload.sub",{"_index":2159,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["tokenresponse",{"_index":510,"title":{"classes/TokenResponse.html":{}},"body":{"controllers/AuthController.html":{},"classes/TokenResponse.html":{},"coverage.html":{}}}],["tokens",{"_index":1933,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["tolowercase",{"_index":1427,"title":{},"body":{"injectables/CryptoService.html":{}}}],["tort",{"_index":3745,"title":{},"body":{"license.html":{}}}],["tostring('ascii",{"_index":565,"title":{},"body":{"controllers/AuthController.html":{}}}],["tostring('base64",{"_index":3109,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["tough",{"_index":3408,"title":{},"body":{"index.html":{}}}],["tracking",{"_index":2415,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"license.html":{}}}],["trade",{"_index":3714,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":3679,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":3712,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":3640,"title":{},"body":{"license.html":{}}}],["transformation",{"_index":3571,"title":{},"body":{"license.html":{}}}],["transformer",{"_index":319,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/IssuanceDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["translatetime",{"_index":461,"title":{},"body":{"modules/AppModule.html":{}}}],["translation",{"_index":3572,"title":{},"body":{"license.html":{}}}],["transport",{"_index":455,"title":{},"body":{"modules/AppModule.html":{}}}],["triggered",{"_index":2207,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["true",{"_index":137,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"miscellaneous/variables.html":{}}}],["true})@isarray",{"_index":1735,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["true})@isobject",{"_index":1020,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/PresentationConfig.html":{}}}],["true})@isobject()@isoptional",{"_index":1049,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["true})@isstring",{"_index":2368,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@jointable",{"_index":1044,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["trust",{"_index":2583,"title":{},"body":{"injectables/ResolverService.html":{}}}],["try",{"_index":556,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/VaultKeyService.html":{}}}],["ts",{"_index":3229,"title":{},"body":{"changelog.html":{}}}],["ttl",{"_index":2858,"title":{},"body":{"injectables/SessionService.html":{}}}],["txcode",{"_index":817,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["typ",{"_index":2311,"title":{},"body":{"injectables/Oid4vpService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["type",{"_index":19,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"modules/DatabaseModule.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"classes/RegistrarConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponse.html":{},"classes/VCT.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type(undefined)@isobject",{"_index":3117,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["type(undefined)@isoptional()@isobject",{"_index":3120,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["typealiases",{"_index":3821,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":88,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["typeorm",{"_index":1057,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"dependencies.html":{}}}],["typeorm/query",{"_index":2844,"title":{},"body":{"injectables/SessionService.html":{}}}],["typeorm/repository/repository",{"_index":2476,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["typeormhealthindicator",{"_index":1679,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormmodule",{"_index":1474,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/PresentationsModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{}}}],["typeormmodule.forfeature([issuanceconfig",{"_index":1855,"title":{},"body":{"modules/IssuerModule.html":{}}}],["typeormmodule.forfeature([keyentity",{"_index":1963,"title":{},"body":{"modules/KeyModule.html":{}}}],["typeormmodule.forfeature([presentationconfig",{"_index":2426,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["typeormmodule.forfeature([session",{"_index":2813,"title":{},"body":{"modules/SessionModule.html":{}}}],["typeormmodule.forfeature([statusmapping",{"_index":2956,"title":{},"body":{"modules/StatusListModule.html":{}}}],["typeormmodule.forrootasync",{"_index":1490,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeormmoduleoptions",{"_index":1475,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":2531,"title":{},"body":{"modules/RegistrarModule.html":{},"injectables/VaultKeyService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["types.get(this.cryptoservice.getalg",{"_index":3051,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["types.set('ed25519",{"_index":3047,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["types.set('es256",{"_index":3044,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["typescript",{"_index":178,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["typically",{"_index":930,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["unauthorizedexception",{"_index":520,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception('invalid",{"_index":574,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined",{"_index":456,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["undefined})@apiproduces('application/json",{"_index":1788,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["undefined})@apiresponse({status",{"_index":508,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@post('offer",{"_index":1790,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["undefined})@post('request",{"_index":2388,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["under",{"_index":3520,"title":{},"body":{"index.html":{},"license.html":{}}}],["unified",{"_index":3400,"title":{},"body":{"index.html":{}}}],["union",{"_index":659,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["unique",{"_index":25,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{}}}],["unknown",{"_index":709,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/variables.html":{}}}],["unless",{"_index":3701,"title":{},"body":{"license.html":{}}}],["unlinksync",{"_index":1316,"title":{},"body":{"injectables/CryptoService.html":{}}}],["unlinksync(file",{"_index":1407,"title":{},"body":{"injectables/CryptoService.html":{}}}],["unsecure",{"_index":1856,"title":{},"body":{"modules/IssuerModule.html":{}}}],["unsupported",{"_index":936,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["unused",{"_index":2317,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["up",{"_index":353,"title":{},"body":{"controllers/AppController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/SessionService.html":{}}}],["update",{"_index":2465,"title":{},"body":{"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["update(data",{"_index":1428,"title":{},"body":{"injectables/CryptoService.html":{}}}],["update.dto",{"_index":2653,"title":{},"body":{"controllers/SessionController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["update.dto.ts",{"_index":2982,"title":{},"body":{"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["update.dto.ts:16",{"_index":2984,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:24",{"_index":2987,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:8",{"_index":2985,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["updated",{"_index":2392,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["updatestatus",{"_index":2961,"title":{},"body":{"injectables/StatusListService.html":{}}}],["updatestatus(value",{"_index":2943,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["upload",{"_index":3231,"title":{},"body":{"changelog.html":{}}}],["uri",{"_index":987,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"miscellaneous/enumerations.html":{}}}],["url",{"_index":339,"title":{},"body":{"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/CryptoService.html":{},"interfaces/IssuerMetadata.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"changelog.html":{}}}],["url(payload.iss).hostname",{"_index":2588,"title":{},"body":{"injectables/ResolverService.html":{}}}],["urn:${randomuuid",{"_index":736,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["use",{"_index":107,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"classes/EC_Public.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"changelog.html":{},"license.html":{}}}],["used",{"_index":203,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CryptoService-1.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/typealiases.html":{}}}],["useexternaloidc",{"_index":1907,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["usefactory",{"_index":448,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["useful",{"_index":2667,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["useguards",{"_index":1141,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["useguards(jwtauthguard",{"_index":1148,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["useinterceptors",{"_index":2070,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["useinterceptors(sessionloggerinterceptor",{"_index":2077,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["user",{"_index":484,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/CredentialsController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"modules/SessionModule.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["user.sub",{"_index":1728,"title":{},"body":{"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["username",{"_index":1499,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["users",{"_index":653,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["uses",{"_index":638,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/HealthController.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/SessionLoggerService.html":{}}}],["using",{"_index":160,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"injectables/CryptoService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"index.html":{},"license.html":{}}}],["utf",{"_index":298,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["util",{"_index":2113,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["utility",{"_index":665,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{},"injectables/CryptoService.html":{}}}],["utils.ts",{"_index":1450,"title":{},"body":{"injectables/CryptoService.html":{}}}],["utils/logger//session",{"_index":2074,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["utils/logger/session",{"_index":1845,"title":{},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["utils/webhook/webhook.dto",{"_index":649,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/VCT.html":{}}}],["utils/webhook/webhook.service",{"_index":1851,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["uuid",{"_index":1599,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"dependencies.html":{}}}],["v",{"_index":1453,"title":{},"body":{"injectables/CryptoService.html":{},"index.html":{}}}],["v1",{"_index":3496,"title":{},"body":{"index.html":{}}}],["v2",{"_index":3497,"title":{},"body":{"index.html":{}}}],["v4",{"_index":1598,"title":{},"body":{"injectables/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["valid",{"_index":165,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/StatusUpdateDto.html":{}}}],["valid('json",{"_index":441,"title":{},"body":{"modules/AppModule.html":{}}}],["valid('trace",{"_index":429,"title":{},"body":{"modules/AppModule.html":{}}}],["validate",{"_index":718,"title":{},"body":{"controllers/AuthorizeController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/ResolverService.html":{},"injectables/VaultKeyService.html":{}}}],["validate(payload",{"_index":1899,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateclient",{"_index":998,"title":{},"body":{"injectables/ClientService.html":{}}}],["validateclient(clientid",{"_index":965,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["validated",{"_index":2172,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["validatenested",{"_index":648,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/IssuanceDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["validatetokenrequest",{"_index":777,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["validatetokenrequest(body",{"_index":798,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["validation",{"_index":1062,"title":{},"body":{"entities/CredentialConfig.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["validationschema",{"_index":421,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":323,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["value",{"_index":310,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoService.html":{},"injectables/CryptoService-1.html":{},"injectables/FileSystemKeyService.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"classes/SchemaResponse.html":{},"controllers/SessionController.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.authenticationconfig",{"_index":1774,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.authenticationconfig.config",{"_index":1773,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.authenticationconfig.method",{"_index":1772,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.config",{"_index":1212,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.credentialconfigs",{"_index":1768,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.credentialconfigurationid",{"_index":2946,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["value.sessionid",{"_index":2945,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["value.status",{"_index":2949,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["value.tenantid",{"_index":1208,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["values",{"_index":98,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"interfaces/TokenPayload.html":{}}}],["values.session",{"_index":2329,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["values.uri",{"_index":2405,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["values.webhook",{"_index":2330,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["varchar",{"_index":2976,"title":{},"body":{"entities/StatusMapping.html":{}}}],["variable",{"_index":2839,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["variables",{"_index":2530,"title":{"miscellaneous/variables.html":{}},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":336,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["vars",{"_index":2318,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["vault",{"_index":1949,"title":{},"body":{"modules/KeyModule.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/variables.html":{}}}],["vault').default('file",{"_index":1955,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["vault_key_id",{"_index":1961,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["vault_token",{"_index":1959,"title":{},"body":{"modules/KeyModule.html":{},"injectables/VaultKeyService.html":{},"miscellaneous/variables.html":{}}}],["vault_url",{"_index":1957,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["vaultkeyservice",{"_index":1948,"title":{"injectables/VaultKeyService.html":{}},"body":{"modules/KeyModule.html":{},"injectables/VaultKeyService.html":{},"coverage.html":{}}}],["vaulturl",{"_index":3004,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["vc",{"_index":1037,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"dependencies.html":{},"index.html":{}}}],["vcs",{"_index":2429,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vct",{"_index":1016,"title":{"classes/VCT.html":{}},"body":{"entities/CredentialConfig.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{},"coverage.html":{}}}],["vct(@param('id",{"_index":1171,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["vct(id",{"_index":1165,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["vendor",{"_index":3417,"title":{},"body":{"index.html":{}}}],["verbal",{"_index":3605,"title":{},"body":{"license.html":{}}}],["verbose",{"_index":2018,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["verifiable",{"_index":1168,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{}}}],["verification",{"_index":1657,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["verificationresult",{"_index":2615,"title":{},"body":{"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["verified",{"_index":1424,"title":{},"body":{"injectables/CryptoService.html":{},"entities/Session.html":{}}}],["verifiedproof",{"_index":2169,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["verifiedproof.signer.publicjwk",{"_index":2175,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["verifier",{"_index":1264,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["verifier/oid4vp/dto/presentation",{"_index":1798,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["verifier/oid4vp/oid4vp.module",{"_index":1844,"title":{},"body":{"modules/IssuerModule.html":{}}}],["verifier/oid4vp/oid4vp.service",{"_index":809,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifier/presentations/dto/vp",{"_index":50,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["verifier/presentations/presentations.module",{"_index":2528,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["verifier/presentations/presentations.service",{"_index":53,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["verifier/verifier.module",{"_index":394,"title":{},"body":{"modules/AppModule.html":{}}}],["verifier_attestations",{"_index":2310,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["verifiermodule",{"_index":379,"title":{"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VerifierModule.html":{},"modules.html":{},"overview.html":{}}}],["verify",{"_index":834,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"miscellaneous/variables.html":{}}}],["verify(data",{"_index":2498,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verify(res.vp_token[att",{"_index":2510,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verifyauthorizationcodeaccesstokenrequest",{"_index":878,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifyjwt",{"_index":1285,"title":{},"body":{"injectables/CryptoService.html":{}}}],["verifyjwt(compact",{"_index":1309,"title":{},"body":{"injectables/CryptoService.html":{}}}],["verifypreauthorizedcodeaccesstokenrequest",{"_index":867,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifytoken",{"_index":1881,"title":{},"body":{"injectables/JwtService.html":{}}}],["verifytoken(token",{"_index":1656,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["version",{"_index":3205,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["versions",{"_index":3495,"title":{},"body":{"index.html":{}}}],["via",{"_index":658,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"classes/KeyService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/SessionService.html":{},"index.html":{}}}],["vitest",{"_index":3233,"title":{},"body":{"changelog.html":{}}}],["void",{"_index":1004,"title":{},"body":{"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["vp",{"_index":619,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"changelog.html":{}}}],["vp_formats",{"_index":2292,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["vp_nonce",{"_index":2280,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["vp_token",{"_index":613,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["vprequest",{"_index":2461,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vprequest.tenantid",{"_index":2486,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vprequestrepository",{"_index":2439,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vps",{"_index":2428,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["wallet",{"_index":893,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"index.html":{},"properties.html":{}}}],["wallets",{"_index":3399,"title":{},"body":{"index.html":{}}}],["want",{"_index":1765,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{}}}],["warn",{"_index":431,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["warranties",{"_index":3729,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":3724,"title":{},"body":{"license.html":{}}}],["way",{"_index":3055,"title":{},"body":{"injectables/VaultKeyService.html":{},"changelog.html":{}}}],["we'll",{"_index":931,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["web",{"_index":1506,"title":{},"body":{"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{}}}],["webhook",{"_index":330,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"changelog.html":{}}}],["webhook.auth",{"_index":3153,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhook.auth.config.value",{"_index":3156,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhook.auth.type",{"_index":3154,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhook.auth?.type",{"_index":3158,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhook.url",{"_index":3157,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhookauthconfig",{"_index":331,"title":{"classes/WebHookAuthConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookconfig",{"_index":338,"title":{"classes/WebhookConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookresponse",{"_index":3141,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhookresponse.data",{"_index":3144,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhookresponse.status",{"_index":3150,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhooks",{"_index":308,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"miscellaneous/typealiases.html":{}}}],["webhooksent",{"_index":2362,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webhookservice",{"_index":1834,"title":{"injectables/WebhookService.html":{}},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"overview.html":{}}}],["webhookurl",{"_index":3137,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webook",{"_index":2357,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["welcome",{"_index":3502,"title":{},"body":{"index.html":{}}}],["well",{"_index":389,"title":{},"body":{"modules/AppModule.html":{},"injectables/CryptoService.html":{},"controllers/WellKnownController.html":{}}}],["wellknowncontroller",{"_index":384,"title":{"controllers/WellKnownController.html":{}},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["wherever",{"_index":3688,"title":{},"body":{"license.html":{}}}],["whether",{"_index":2044,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"license.html":{}}}],["whole",{"_index":3591,"title":{},"body":{"license.html":{}}}],["within",{"_index":3622,"title":{},"body":{"license.html":{}}}],["without",{"_index":1663,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"license.html":{}}}],["work",{"_index":3576,"title":{},"body":{"license.html":{}}}],["worker",{"_index":3246,"title":{},"body":{"changelog.html":{}}}],["working",{"_index":667,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["works",{"_index":3584,"title":{},"body":{"license.html":{}}}],["worldwide",{"_index":3625,"title":{},"body":{"license.html":{}}}],["write",{"_index":273,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["writefilesync",{"_index":56,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CryptoService.html":{},"injectables/EncryptionService.html":{},"injectables/FileSystemKeyService.html":{},"injectables/RegistrarService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{},"injectables/VaultKeyService.html":{}}}],["writefilesync(file",{"_index":2928,"title":{},"body":{"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["writefilesync(filepath",{"_index":293,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{}}}],["writefilesync(join(folder",{"_index":1410,"title":{},"body":{"injectables/CryptoService.html":{}}}],["writefilesync(join(this.folder",{"_index":3038,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["writefilesync(sanext",{"_index":1394,"title":{},"body":{"injectables/CryptoService.html":{}}}],["writing",{"_index":275,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/RegistrarService.html":{},"license.html":{}}}],["written",{"_index":3606,"title":{},"body":{"license.html":{}}}],["x",{"_index":1512,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/VaultKeyService.html":{},"index.html":{}}}],["x509",{"_index":1382,"title":{},"body":{"injectables/CryptoService.html":{}}}],["x509_san_dns",{"_index":2285,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509_san_dns:${hostname",{"_index":2334,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509certificate",{"_index":2577,"title":{},"body":{"injectables/ResolverService.html":{}}}],["x509certificate(buffer.from(cert",{"_index":2585,"title":{},"body":{"injectables/ResolverService.html":{}}}],["x5c",{"_index":1236,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"interfaces/StatusListFile.html":{},"injectables/StatusListService.html":{}}}],["y",{"_index":1513,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["yes",{"_index":791,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoService.html":{},"injectables/SessionLoggerService.html":{}}}],["your_api_key_here",{"_index":326,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["yyyy",{"_index":462,"title":{},"body":{"modules/AppModule.html":{}}}],["zeros",{"_index":3091,"title":{},"body":{"injectables/VaultKeyService.html":{}}}],["zoom",{"_index":380,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AccessCertificateResponse.html":{"url":"interfaces/AccessCertificateResponse.html","title":"interface - AccessCertificateResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccessCertificateResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/registrar.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Repsonse of access certificate request.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            crt\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            revoked\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        crt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        crt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The public key in PEM format.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier of the access certificate.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        revoked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        revoked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Indicates if the access certificate is revoked.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n    Injectable,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { OAuth2Client } from '@badgateway/oauth2-client';\nimport { client } from './generated/client.gen';\nimport {\n    accessCertificateControllerFindOne,\n    accessCertificateControllerRegister,\n    registrationCertificateControllerAll,\n    registrationCertificateControllerRegister,\n    relyingPartyControllerFindAll,\n    relyingPartyControllerRegister,\n} from './generated';\nimport { CryptoService } from '../crypto/crypto.service';\nimport { RegistrationCertificateRequest } from '../verifier/presentations/dto/vp-request.dto';\nimport { PresentationsService } from '../verifier/presentations/presentations.service';\nimport { existsSync, readFileSync, writeFileSync } from 'node:fs';\nimport { RegistrarConfig } from './registrar-config';\nimport { join } from 'node:path';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { TENANT_EVENTS } from '../auth/tenant-events';\n\n/**\n * Repsonse of access certificate request.\n */\ninterface AccessCertificateResponse {\n    /**\n     * Unique identifier of the access certificate.\n     */\n    id: string;\n    /**\n     * The public key in PEM format.\n     */\n    crt: string;\n    /**\n     * Indicates if the access certificate is revoked.\n     */\n    revoked?: boolean;\n}\n\n/**\n * RegistrarService is responsible for managing the interaction with the registrar,\n * including adding relying parties, access certificates, and registration certificates.\n */\n@Injectable()\nexport class RegistrarService implements OnApplicationBootstrap, OnModuleInit {\n    /**\n     * OAuth2 client for interacting with the OIDC provider.\n     */\n    private oauth2Client: OAuth2Client;\n    /**\n     * Client for interacting with the registrar API.\n     */\n    private client: typeof client;\n    /**\n     * Access token for authenticating requests to the registrar.\n     */\n    private accessToken: string;\n\n    /**\n     * Constructor for the RegistrarService.\n     * @param configService - Instance of ConfigService for accessing configuration values.\n     * @param cryptoService - Instance of CryptoService for cryptographic operations.\n     * @param presentationsService - Instance of PresentationsService for handling presentations.\n     */\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private presentationsService: PresentationsService,\n    ) {}\n\n    /**\n     * Initializes the OAuth2 client and registrar client with the necessary configurations.\n     */\n    onModuleInit() {\n        //when not set, we will not use the registrar\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const oidcIssuerUrl =\n            this.configService.getOrThrow('REGISTRAR_OIDC_URL');\n        const clientId = this.configService.getOrThrow(\n            'REGISTRAR_OIDC_CLIENT_ID',\n        );\n        const clientSecret = this.configService.getOrThrow(\n            'REGISTRAR_OIDC_CLIENT_SECRET',\n        );\n\n        this.oauth2Client = new OAuth2Client({\n            server: `${oidcIssuerUrl}/protocol/openid-connect/token`,\n            clientId,\n            clientSecret,\n            discoveryEndpoint: `${oidcIssuerUrl}/.well-known/openid-configuration`,\n        });\n\n        this.client = client;\n        this.client.setConfig({\n            baseUrl: this.configService.getOrThrow('REGISTRAR_URL'),\n            auth: () => this.accessToken,\n        });\n    }\n\n    /**\n     * Checks if the registrar service is enabled based on the configuration.\n     * @returns True if the registrar service is enabled, false otherwise.\n     */\n    isEnabled() {\n        return !!this.configService.get('REGISTRAR_URL');\n    }\n\n    /**\n     * This function is called when the application starts.\n     * It will refresh the access token for the registrar.\n     */\n    async onApplicationBootstrap() {\n        if (!this.configService.get('REGISTRAR_URL')) {\n            return;\n        }\n        await this.refreshAccessToken();\n    }\n\n    /**\n     * This function is called when a tenant is initialized.\n     * @param tenantId\n     */\n    @OnEvent(TENANT_EVENTS.TENANT_KEYS, { async: true })\n    async onTenantInit(tenantId: string) {\n        if (!this.isEnabled()) {\n            return;\n        }\n        const config = this.loadConfig(tenantId);\n        if (!config.id) {\n            config.id = await this.addRp(tenantId);\n        }\n        await this.getAccessCertificateId(config, tenantId);\n    }\n\n    /**\n     * Refreshes the access token for the registrar using client credentials.\n     * This method is called periodically to ensure the access token is valid.\n     */\n    async refreshAccessToken() {\n        await this.oauth2Client.clientCredentials().then((token) => {\n            this.accessToken = token.accessToken;\n            const date = new Date();\n            const expirationDate = new Date(token.expiresAt as number);\n            setTimeout(\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                () => this.refreshAccessToken(),\n                expirationDate.getTime() - date.getTime() - 1000,\n            );\n        });\n    }\n\n    /**\n     * Adds a new relying party to the registrar.\n     * This is only needed once, when the relying party is created.\n     */\n    addRp(tenantId: string): Promise {\n        const name = this.configService.getOrThrow('RP_NAME');\n        return relyingPartyControllerRegister({\n            client: this.client,\n            body: {\n                name,\n            },\n        }).then(async (response) => {\n            const config = this.loadConfig(tenantId);\n            if (response.error) {\n                config.id = await this.storeExistingRp(name);\n                this.saveConfig(config, tenantId);\n                return config.id!;\n            } else {\n                config.id = response.data!['id'];\n                this.saveConfig(config, tenantId);\n                return response.data!['id'];\n            }\n        });\n    }\n\n    /**\n     * Stores the existing relying party ID based on the name.\n     * This is used when the relying party already exists in the registrar.\n     * @param name - The name of the relying party.\n     * @returns The ID of the existing relying party.\n     */\n    private storeExistingRp(name: string) {\n        return relyingPartyControllerFindAll({\n            client: this.client,\n            query: {\n                name,\n            },\n        }).then((response) => {\n            return response.data!.find((item) => item.name === name)?.id;\n        });\n    }\n\n    /**\n     * Get the access certificate ID from the registrar.\n     * If there is no access certificate ID in the config, it will add a new one.\n     * If there is one, it will check if it is still valid.\n     * If it is revoked, it will add a new one.\n     * @param config\n     */\n    async getAccessCertificateId(config: RegistrarConfig, tenantId: string) {\n        // if there is no access certificate ID in the config, we need to add it\n        if (!config.accessCertificateId) {\n            await this.addAccessCertificate(config, tenantId);\n        }\n        // if there is one, check if it is still valid\n        await accessCertificateControllerFindOne({\n            client: this.client,\n            path: { rp: config.id, id: config.accessCertificateId! },\n        }).then((res) => {\n            if (res.error) {\n                console.error('Error finding access certificate:', res.error);\n            }\n            const data = res.data as AccessCertificateResponse;\n            if (data.revoked) {\n                console.warn('Access certificate is revoked, adding a new one');\n                return this.addAccessCertificate(config, tenantId);\n            }\n        });\n    }\n\n    /**\n     * Add a new access certificate to the registrar.\n     * This is only needed once, when the access certificate is created.\n     * If the access certificate already exists, it will be returned.\n     * @returns\n     */\n    private async addAccessCertificate(\n        config: RegistrarConfig,\n        tenantId: string,\n    ): Promise {\n        const host = this.configService\n            .getOrThrow('PUBLIC_URL')\n            .replace('https://', '');\n        return accessCertificateControllerRegister({\n            client: this.client,\n            body: {\n                publicKey: await this.cryptoService.keyService.getPublicKey(\n                    'pem',\n                    tenantId,\n                ),\n                dns: [host],\n            },\n            path: {\n                rp: config.id,\n            },\n        }).then((res) => {\n            if (res.error) {\n                console.error('Error adding access certificate:', res.error);\n                throw new Error('Error adding access certificate');\n            }\n            //store the cert\n            this.cryptoService.storeAccessCertificate(\n                res.data!['crt'],\n                tenantId,\n            );\n            config.accessCertificateId = res.data!['id'];\n            this.saveConfig(config, tenantId);\n            return res.data!['id'];\n        });\n    }\n\n    /**\n     * Add a new registration certificate to the registrar.\n     * This is only needed once, when the registration certificate is created.\n     * If the registration certificate already exists, it will be returned.\n     * @returns\n     */\n    async addRegistrationCertificate(\n        req: RegistrationCertificateRequest,\n        //TODO: check if the dcql_query is covered by the registration certificate. If not, we need to throw an error since we do not know the new purpose for it.\n        dcql_query: any,\n        requestId: string,\n        tenantId: string,\n    ) {\n        const rp = this.loadConfig(tenantId).id;\n\n        //TODO: need to check if the access certificate is bound to the access certificate with the subject. Also that the requested fields are matching.\n\n        const certs =\n            (await registrationCertificateControllerAll({\n                client: this.client,\n                path: {\n                    rp,\n                },\n            }).then((res) =>\n                res.data?.filter(\n                    (cert) =>\n                        cert.revoked == null && cert.id === (req.id as string),\n                ),\n            )) || [];\n\n        if (certs?.length > 0) {\n            return certs[0].jwt;\n        }\n\n        return registrationCertificateControllerRegister({\n            client: this.client,\n            path: {\n                rp,\n            },\n            body: req.body,\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\n                    'Error adding registration certificate:',\n                    res.error,\n                );\n                throw new Error('Error adding registration certificate');\n            }\n\n            //TODO: write the ID to the config so its easier to use it. Easier than writing the comparison algorithm (any maybe someone wants to use a different one)\n            await this.presentationsService.storeRCID(\n                res.data!['id'],\n                requestId,\n                tenantId,\n            );\n            return res.data!['jwt'];\n        });\n    }\n\n    /**\n     * Load the registrar configuration from the config file.\n     * @returns\n     */\n    private loadConfig(tenantId: string): RegistrarConfig {\n        const filePath = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'registrar.json',\n        );\n\n        if (!existsSync(filePath)) {\n            // If the config file does not exist, create an empty config\n            const initialConfig: RegistrarConfig = {};\n            writeFileSync(filePath, JSON.stringify(initialConfig, null, 2));\n            return initialConfig;\n        }\n        const config = JSON.parse(\n            readFileSync(filePath, 'utf-8'),\n        ) as RegistrarConfig;\n        return config;\n    }\n\n    /**\n     * Save the registrar configuration to the config file.\n     * @param config\n     */\n    private saveConfig(config: RegistrarConfig, tenantId: string) {\n        const filePath = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'registrar.json',\n        );\n        writeFileSync(filePath, JSON.stringify(config, null, 2));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApiKeyConfig.html":{"url":"classes/ApiKeyConfig.html","title":"class - ApiKeyConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiKeyConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for API key authentication in webhooks.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                headerName\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        headerName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:13\n                        \n                    \n\n            \n                \n                    The name of the header where the API key will be sent.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:19\n                        \n                    \n\n            \n                \n                    The value of the API key to be sent in the header.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsIn, IsObject, IsOptional, IsString } from 'class-validator';\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     * @example Authorization\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     * @example Bearer your_api_key_here\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = 'apiKey';\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn(['apiKey'])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app/app.controller.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiExcludeController } from '@nestjs/swagger';\n\n@ApiExcludeController()\n@Controller()\nexport class AppController {\n    @Get()\n    getHello(): string {\n        return 'EUDIPLO is up and running, more information at https://openwallet-foundation-labs.github.io/eudiplo/latest/';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            WellKnownController\n                        \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CryptoModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            IssuerModule\n                        \n                        \n                            KeyModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            VerifierModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport * as Joi from 'joi';\nimport { CryptoModule } from './crypto/crypto.module';\nimport { WellKnownController } from './well-known/well-known.controller';\nimport { ISSUER_VALIDATION_SCHEMA, IssuerModule } from './issuer/issuer.module';\nimport { VerifierModule } from './verifier/verifier.module';\nimport {\n    REGISTRAR_VALIDATION_SCHEMA,\n    RegistrarModule,\n} from './registrar/registrar.module';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join, isAbsolute } from 'path';\nimport { KEY_VALIDATION_SCHEMA, KeyModule } from './crypto/key/key.module';\nimport { CRYPTO_VALIDATION_SCHEMA } from './crypto/key/crypto/crypto.module';\nimport { AppController } from './app/app.controller';\nimport {\n    SESSION_VALIDATION_SCHEMA,\n    SessionModule,\n} from './session/session.module';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { DatabaseModule } from './database/database.module';\nimport { HealthModule } from './health/health.module';\nimport { AUTH_VALIDATION_SCHEMA, AuthModule } from './auth/auth.module';\nimport { EventEmitterModule } from '@nestjs/event-emitter/dist/event-emitter.module';\nimport { LoggerModule } from 'nestjs-pino';\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            validationSchema: Joi.object({\n                FOLDER: Joi.string().default('./tmp'),\n                RP_NAME: Joi.string().default('EUDIPLO'),\n                LOG_LEVEL: Joi.string()\n                    .valid('trace', 'debug', 'info', 'warn', 'error', 'fatal')\n                    .default(\n                        process.env.NODE_ENV === 'production'\n                            ? 'warn'\n                            : 'debug',\n                    ),\n                ...AUTH_VALIDATION_SCHEMA,\n                ...REGISTRAR_VALIDATION_SCHEMA,\n                ...KEY_VALIDATION_SCHEMA,\n                ...CRYPTO_VALIDATION_SCHEMA,\n                ...ISSUER_VALIDATION_SCHEMA,\n                ...SESSION_VALIDATION_SCHEMA,\n                LOG_ENABLE_HTTP_LOGGER: Joi.boolean().default(false),\n                LOG_ENABLE_SESSION_LOGGER: Joi.boolean().default(false),\n                LOG_DEBUG_MODE: Joi.boolean().default(false),\n                LOG_FORMAT: Joi.string()\n                    .valid('json', 'pretty')\n                    .default(\n                        process.env.NODE_ENV === 'production'\n                            ? 'json'\n                            : 'pretty',\n                    ),\n            }),\n            isGlobal: true,\n            expandVariables: true,\n        }),\n        LoggerModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const enableHttpLogger = configService.get(\n                    'LOG_ENABLE_HTTP_LOGGER',\n                    false,\n                );\n\n                return {\n                    pinoHttp: {\n                        level: configService.get('LOG_LEVEL', 'info'),\n                        autoLogging: enableHttpLogger,\n                        transport:\n                            process.env.NODE_ENV === 'production'\n                                ? undefined\n                                : {\n                                      target: 'pino-pretty',\n                                      options: {\n                                          colorize: true,\n                                          singleLine: false,\n                                          translateTime: 'yyyy-mm-dd HH:MM:ss',\n                                          ignore: 'pid,hostname',\n                                      },\n                                  },\n                        customProps: (req: any) => ({\n                            sessionId:\n                                req.headers['x-session-id'] ||\n                                req.params?.session ||\n                                req.body?.session_id,\n                            tenantId: req.params?.tenantId,\n                            flow: req.url?.includes('/vci')\n                                ? 'OID4VCI'\n                                : req.url?.includes('/oid4vp')\n                                  ? 'OID4VP'\n                                  : undefined,\n                        }),\n                        serializers: {\n                            req: (req: any) => ({\n                                method: req.method,\n                                url: req.url,\n                                headers: {\n                                    'user-agent': req.headers['user-agent'],\n                                    'content-type': req.headers['content-type'],\n                                },\n                                sessionId:\n                                    req.headers['x-session-id'] ||\n                                    req.params?.session,\n                                tenantId: req.params?.tenantId,\n                            }),\n                            res: (res: any) => ({\n                                statusCode: res.statusCode,\n                            }),\n                        },\n                    },\n                };\n            },\n        }),\n        KeyModule.forRoot(),\n        CryptoModule,\n        IssuerModule,\n        VerifierModule,\n        RegistrarModule,\n        ScheduleModule.forRoot(),\n        ServeStaticModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const folder = configService.getOrThrow('FOLDER');\n                const rootPath = isAbsolute(folder)\n                    ? join(folder, 'public')\n                    : join(__dirname, '../', folder, 'public');\n                return [\n                    {\n                        rootPath,\n                    },\n                ];\n            },\n        }),\n        EventEmitterModule.forRoot(),\n        DatabaseModule,\n        SessionModule,\n        DatabaseModule,\n        HealthModule,\n        AuthModule,\n    ],\n    controllers: [WellKnownController, AppController],\n    providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOAuth2Token\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getOAuth2Token\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOAuth2Token(body: any, headers: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('oauth2/token')@ApiBody({type: ClientCredentialsDto, examples: undefined})@ApiResponse({status: 200, description: 'OAuth2 token response', type: TokenResponse, example: undefined})@ApiResponse({status: 401, description: 'Invalid client credentials'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:60\n                        \n                    \n\n\n            \n                \n                        OAuth2 Token endpoint - supports client credentials flow only\nAccepts client credentials either in Authorization header (Basic auth) or request body\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                headers\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Post,\n    Body,\n    UnauthorizedException,\n    Headers,\n} from '@nestjs/common';\nimport { ApiTags, ApiResponse, ApiBody } from '@nestjs/swagger';\nimport { JwtService } from './jwt.service';\nimport { ClientService } from './client.service';\nimport { Public } from './public.decorator';\nimport { ClientCredentialsDto } from './dto/client-credentials.dto';\nimport { TokenPayload } from './token.decorator';\nimport { TokenResponse } from './dto/token-response.dto';\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n    constructor(\n        private jwtService: JwtService,\n        private clientService: ClientService,\n    ) {}\n\n    /**\n     * OAuth2 Token endpoint - supports client credentials flow only\n     * Accepts client credentials either in Authorization header (Basic auth) or request body\n     * @param body\n     * @param headers\n     * @returns\n     */\n    @Public()\n    @Post('oauth2/token')\n    @ApiBody({\n        type: ClientCredentialsDto,\n        examples: {\n            client_credentials: {\n                summary: 'Client Credentials Flow',\n                value: {\n                    grant_type: 'client_credentials',\n                    client_id: 'root',\n                    client_secret: 'root',\n                },\n            },\n        },\n    })\n    @ApiResponse({\n        status: 200,\n        description: 'OAuth2 token response',\n        type: TokenResponse,\n        example: {\n            access_token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n            token_type: 'Bearer',\n            expires_in: 86400,\n        },\n    })\n    @ApiResponse({\n        status: 401,\n        description: 'Invalid client credentials',\n    })\n    async getOAuth2Token(\n        @Body() body: any,\n        @Headers() headers: any,\n    ): Promise {\n        if (this.jwtService.isUsingExternalOIDC()) {\n            throw new UnauthorizedException(\n                'OAuth2 token endpoint is not available when using external OIDC provider. Use your external OIDC provider for authentication.',\n            );\n        }\n\n        // Only support client credentials flow\n        if (body.grant_type !== 'client_credentials') {\n            throw new UnauthorizedException(\n                'Only client_credentials grant type is supported',\n            );\n        }\n\n        let clientId: string;\n        let clientSecret: string;\n\n        // Try to extract credentials from Authorization header (Basic auth)\n        const authHeader = headers.authorization;\n        if (authHeader && authHeader.startsWith('Basic ')) {\n            try {\n                const base64Credentials = authHeader.substring(6);\n                const credentials = Buffer.from(\n                    base64Credentials,\n                    'base64',\n                ).toString('ascii');\n                const [id, secret] = credentials.split(':');\n                clientId = id;\n                clientSecret = secret;\n            } catch {\n                throw new UnauthorizedException(\n                    'Invalid Authorization header format',\n                );\n            }\n        } else {\n            // Fall back to request body\n            clientId = body.client_id;\n            clientSecret = body.client_secret;\n        }\n\n        if (!clientId || !clientSecret) {\n            throw new UnauthorizedException(\n                'Client credentials must be provided either in Authorization header (Basic auth) or request body',\n            );\n        }\n\n        const client = this.clientService.validateClient(\n            clientId,\n            clientSecret,\n        );\n        if (!client) {\n            throw new UnauthorizedException('Invalid client credentials');\n        }\n\n        const payload: TokenPayload = {\n            sub: client.id,\n        };\n\n        const token = await this.jwtService.generateToken(payload, {\n            expiresIn: '24h',\n            audience: 'eudiplo-service',\n        });\n\n        return {\n            access_token: token,\n            token_type: 'Bearer',\n            expires_in: 86400, // 24 hours in seconds\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\n\n\nJwtService \n\nJwtService \n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nAuthModule\n\nAuthModule\n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nClientService\n\nClientService\n\nAuthModule -->\n\nClientService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ClientService\n                        \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtStrategy } from './jwt.strategy';\nimport { JwtAuthGuard } from './auth.guard';\nimport { JwtService } from './jwt.service';\nimport { AuthController } from './auth.controller';\nimport { ClientService } from './client.service';\nimport * as Joi from 'joi';\nimport { ConfigModule } from '@nestjs/config';\n\nexport const AUTH_VALIDATION_SCHEMA = {\n    OIDC: Joi.string().optional(),\n    KEYCLOAK_INTERNAL_ISSUER_URL: Joi.when('OIDC', {\n        then: Joi.string().required(),\n        otherwise: Joi.string().optional(),\n    }),\n    KEYCLOAK_CLIENT_ID: Joi.when('OIDC', {\n        then: Joi.string().required(),\n        otherwise: Joi.string().optional(),\n    }),\n    JWT_SECRET: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().required(),\n    }),\n    JWT_ISSUER: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().optional().default('eudiplo-service'),\n    }),\n    JWT_EXPIRES_IN: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default('24h'),\n    }),\n    AUTH_CLIENT_SECRET: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().required(),\n    }),\n    AUTH_CLIENT_ID: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().required(),\n    }),\n};\n\n@Module({\n    imports: [PassportModule, ConfigModule],\n    providers: [JwtStrategy, JwtAuthGuard, JwtService, ClientService],\n    controllers: [AuthController],\n    exports: [PassportModule, JwtStrategy, JwtAuthGuard, JwtService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthResponse.html":{"url":"interfaces/AuthResponse.html","title":"interface - AuthResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/auth-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                AuthResponse DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            state\n                                        \n                                \n                                \n                                        \n                                            vp_token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The state parameter to maintain state between the request and callback.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        vp_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        vp_token:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The VP token containing the presentation data.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AuthResponse {\n    /**\n     * The VP token containing the presentation data.\n     */\n    vp_token: {\n        /**\n         * Key-value pairs representing the VP token data.\n         */\n        [key: string]: string;\n    };\n    /**\n     * The state parameter to maintain state between the request and callback.\n     */\n    state: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationConfigDto.html":{"url":"classes/AuthenticationConfigDto.html","title":"class - AuthenticationConfigDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationConfigDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Base class for authentication configurations\nDetermines which OpenID4VC flow to use for the issuance process\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                config\n                            \n                            \n                                    \n                                method\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthenticationUrlConfig | PresentationDuringIssuanceConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:69\n                        \n                    \n\n            \n                \n                    Configuration specific to the selected authentication method\n\nFor 'none': no config needed (undefined) - uses pre-authorized code flow\nFor 'auth': AuthenticationUrlConfig - for OID4VCI authorized code flow\nFor 'presentationDuringIssuance': PresentationDuringIssuanceConfig - for OID4VP flow\n\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"none\" | \"auth\" | \"presentationDuringIssuance\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['none', 'auth', 'presentationDuringIssuance'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:60\n                        \n                    \n\n            \n                \n                    The authentication method to use:\n\n'none': Pre-authorized code flow (no user authentication)\n'auth': OID4VCI authorized code flow (user redirect for authentication)\n'presentationDuringIssuance': OID4VP flow (credential presentation required)\n\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsObject,\n    IsOptional,\n    IsUrl,\n    IsIn,\n    ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\nimport { PresentationDuringIssuance } from '../../credentials-metadata/dto/credential-config.dto';\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsUrl()\n    authUrl: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Presentation configuration that specifies what credentials need to be presented via OID4VP\n     */\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuance)\n    presentation: PresentationDuringIssuance;\n}\n\n/**\n * Base class for authentication configurations\n * Determines which OpenID4VC flow to use for the issuance process\n */\nexport class AuthenticationConfigDto {\n    /**\n     * The authentication method to use:\n     * - 'none': Pre-authorized code flow (no user authentication)\n     * - 'auth': OID4VCI authorized code flow (user redirect for authentication)\n     * - 'presentationDuringIssuance': OID4VP flow (credential presentation required)\n     */\n    @IsIn(['none', 'auth', 'presentationDuringIssuance'])\n    method: 'none' | 'auth' | 'presentationDuringIssuance';\n\n    /**\n     * Configuration specific to the selected authentication method\n     * - For 'none': no config needed (undefined) - uses pre-authorized code flow\n     * - For 'auth': AuthenticationUrlConfig - for OID4VCI authorized code flow\n     * - For 'presentationDuringIssuance': PresentationDuringIssuanceConfig - for OID4VP flow\n     */\n    @IsOptional()\n    config?: AuthenticationUrlConfig | PresentationDuringIssuanceConfig;\n}\n\n/**\n * Union type for authentication configurations\n * Each method corresponds to a specific OpenID4VC flow\n */\nexport type AuthenticationConfig =\n    | { method: 'none' } // Pre-authorized code flow\n    | { method: 'auth'; config: AuthenticationUrlConfig } // OID4VCI authorized code flow\n    | {\n          method: 'presentationDuringIssuance'; // OID4VP flow\n          config: PresentationDuringIssuanceConfig;\n      };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationConfigHelper.html":{"url":"classes/AuthenticationConfigHelper.html","title":"class - AuthenticationConfigHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationConfigHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.helper.ts\n        \n\n\n            \n                Description\n            \n            \n                Utility functions for working with OpenID4VC authentication configurations\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getPresentationConfig\n                            \n                            \n                                    Static\n                                isAuthUrlAuth\n                            \n                            \n                                    Static\n                                isNoneAuth\n                            \n                            \n                                    Static\n                                isPresentationDuringIssuanceAuth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getPresentationConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPresentationConfig(config: AuthenticationConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/dto/authentication-config.helper.ts:44\n                        \n                    \n\n\n            \n                \n                        Get the presentation configuration if the method is 'presentationDuringIssuance'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            AuthenticationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PresentationDuringIssuanceConfig | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isAuthUrlAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuthUrlAuth(config: AuthenticationConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/dto/authentication-config.helper.ts:23\n                        \n                    \n\n\n            \n                \n                        Type guard to check if the config uses OID4VCI authorized code flow\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            AuthenticationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isNoneAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isNoneAuth(config: AuthenticationConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/dto/authentication-config.helper.ts:14\n                        \n                    \n\n\n            \n                \n                        Type guard to check if the config uses pre-authorized code flow\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            AuthenticationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isPresentationDuringIssuanceAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isPresentationDuringIssuanceAuth(config: AuthenticationConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/dto/authentication-config.helper.ts:32\n                        \n                    \n\n\n            \n                \n                        Type guard to check if the config uses OID4VP flow\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            AuthenticationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    AuthenticationConfig,\n    AuthenticationUrlConfig,\n    PresentationDuringIssuanceConfig,\n} from './authentication-config.dto';\n\n/**\n * Utility functions for working with OpenID4VC authentication configurations\n */\nexport class AuthenticationConfigHelper {\n    /**\n     * Type guard to check if the config uses pre-authorized code flow\n     */\n    static isNoneAuth(\n        config: AuthenticationConfig,\n    ): config is { method: 'none' } {\n        return config.method === 'none';\n    }\n\n    /**\n     * Type guard to check if the config uses OID4VCI authorized code flow\n     */\n    static isAuthUrlAuth(\n        config: AuthenticationConfig,\n    ): config is { method: 'auth'; config: AuthenticationUrlConfig } {\n        return config.method === 'auth';\n    }\n\n    /**\n     * Type guard to check if the config uses OID4VP flow\n     */\n    static isPresentationDuringIssuanceAuth(\n        config: AuthenticationConfig,\n    ): config is {\n        method: 'presentationDuringIssuance';\n        config: PresentationDuringIssuanceConfig;\n    } {\n        return config.method === 'presentationDuringIssuance';\n    }\n\n    /**\n     * Get the presentation configuration if the method is 'presentationDuringIssuance'\n     */\n    static getPresentationConfig(\n        config: AuthenticationConfig,\n    ): PresentationDuringIssuanceConfig | null {\n        if (this.isPresentationDuringIssuanceAuth(config)) {\n            return config.config;\n        }\n        return null;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationUrlConfig.html":{"url":"classes/AuthenticationUrlConfig.html","title":"class - AuthenticationUrlConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationUrlConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for authentication method 'auth'\nUsed for OID4VCI authorized code flow where the user will be redirected for authentication\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:22\n                        \n                    \n\n            \n                \n                    The URL used in the OID4VCI authorized code flow.\nThis URL is where users will be redirected for authentication.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:31\n                        \n                    \n\n            \n                \n                    Optional webhook configuration for authentication callbacks\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsObject,\n    IsOptional,\n    IsUrl,\n    IsIn,\n    ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\nimport { PresentationDuringIssuance } from '../../credentials-metadata/dto/credential-config.dto';\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsUrl()\n    authUrl: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Presentation configuration that specifies what credentials need to be presented via OID4VP\n     */\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuance)\n    presentation: PresentationDuringIssuance;\n}\n\n/**\n * Base class for authentication configurations\n * Determines which OpenID4VC flow to use for the issuance process\n */\nexport class AuthenticationConfigDto {\n    /**\n     * The authentication method to use:\n     * - 'none': Pre-authorized code flow (no user authentication)\n     * - 'auth': OID4VCI authorized code flow (user redirect for authentication)\n     * - 'presentationDuringIssuance': OID4VP flow (credential presentation required)\n     */\n    @IsIn(['none', 'auth', 'presentationDuringIssuance'])\n    method: 'none' | 'auth' | 'presentationDuringIssuance';\n\n    /**\n     * Configuration specific to the selected authentication method\n     * - For 'none': no config needed (undefined) - uses pre-authorized code flow\n     * - For 'auth': AuthenticationUrlConfig - for OID4VCI authorized code flow\n     * - For 'presentationDuringIssuance': PresentationDuringIssuanceConfig - for OID4VP flow\n     */\n    @IsOptional()\n    config?: AuthenticationUrlConfig | PresentationDuringIssuanceConfig;\n}\n\n/**\n * Union type for authentication configurations\n * Each method corresponds to a specific OpenID4VC flow\n */\nexport type AuthenticationConfig =\n    | { method: 'none' } // Pre-authorized code flow\n    | { method: 'auth'; config: AuthenticationUrlConfig } // OID4VCI authorized code flow\n    | {\n          method: 'presentationDuringIssuance'; // OID4VP flow\n          config: PresentationDuringIssuanceConfig;\n      };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizationResponse.html":{"url":"classes/AuthorizationResponse.html","title":"class - AuthorizationResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizationResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/authorization-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the authorization response containing the VP token.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                response\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/authorization-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The response string containing the authorization details.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\n/**\n * DTO for the authorization response containing the VP token.\n */\nexport class AuthorizationResponse {\n    /**\n     * The response string containing the authorization details.\n     */\n    @IsString()\n    response: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthorizeController.html":{"url":"controllers/AuthorizeController.html","title":"controller - AuthorizeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthorizeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/authorize\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI authorization endpoints.\nThis controller handles the authorization requests, token requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authorizationChallengeEndpoint\n                            \n                            \n                                    \n                                    Async\n                                authorize\n                            \n                            \n                                    \n                                    \n                                    Async\n                                par\n                            \n                            \n                                    \n                                    Async\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(res: Response, body: AuthorizeQueries, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('challenge')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:98\n                        \n                    \n\n\n            \n                \n                        Endpoint for the authorization challenge.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        authorize\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorize(queries: AuthorizeQueries, res: Response, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:36\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Authorization Request.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        par\n                        \n                    \n                \n            \n            \n                \n                        \n                    par(body: AuthorizeQueries, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({description: 'Pushed Authorization Request', type: AuthorizeQueries})@Post('par')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:58\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Pushed Authorization Request (PAR).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        token\n                        \n                    \n                \n            \n            \n                \n                        \n                    token(body: any, req: Request, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('token')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:82\n                        \n                    \n\n\n            \n                \n                        Endpoint to validate the token request.\nThis endpoint is used to exchange the authorization code for an access token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\nimport {\n    Body,\n    Controller,\n    Get,\n    Param,\n    Post,\n    Query,\n    Req,\n    Res,\n} from '@nestjs/common';\nimport type { Request, Response } from 'express';\nimport { AuthorizeService } from './authorize.service';\nimport { AuthorizeQueries } from './dto/authorize-request.dto';\nimport { SessionService } from '../../session/session.service';\nimport { ParResponseDto } from './dto/par-response.dto';\nimport { ApiBody } from '@nestjs/swagger';\n\n/**\n * Controller for the OpenID4VCI authorization endpoints.\n * This controller handles the authorization requests, token requests.\n */\n@Controller(':tenantId/authorize')\nexport class AuthorizeController {\n    constructor(\n        private readonly authorizeService: AuthorizeService,\n        private sessionService: SessionService,\n    ) {}\n\n    /**\n     * Endpoint to handle the Authorization Request.\n     * @param queries\n     * @param res\n     */\n    @Get()\n    async authorize(\n        @Query() queries: AuthorizeQueries,\n        @Res() res: Response,\n        @Param('tenantId') tenantId: string,\n    ) {\n        return this.authorizeService.sendAuthorizationResponse(\n            queries,\n            res,\n            tenantId,\n        );\n    }\n\n    /**\n     * Endpoint to handle the Pushed Authorization Request (PAR).\n     * @param body\n     * @returns\n     */\n    @ApiBody({\n        description: 'Pushed Authorization Request',\n        type: AuthorizeQueries,\n    })\n    @Post('par')\n    async par(\n        @Body() body: AuthorizeQueries,\n        @Param('tenantId') tenantId: string,\n    ): Promise {\n        const request_uri = `urn:${randomUUID()}`;\n        // save both so we can retrieve the session also via the request_uri in the authorize step.\n        await this.sessionService.add(body.issuer_state!, tenantId, {\n            request_uri,\n            auth_queries: body,\n        });\n        return {\n            expires_in: 500,\n            request_uri,\n        };\n    }\n\n    /**\n     * Endpoint to validate the token request.\n     * This endpoint is used to exchange the authorization code for an access token.\n     * @param body\n     * @param req\n     * @returns\n     */\n    @Post('token')\n    async token(\n        @Body() body: any,\n        @Req() req: Request,\n        @Param('tenantId') tenantId: string,\n    ): Promise {\n        //TODO: define body\n        return this.authorizeService.validateTokenRequest(body, req, tenantId);\n    }\n\n    /**\n     * Endpoint for the authorization challenge.\n     * @param res\n     * @param body\n     * @returns\n     */\n    @Post('challenge')\n    authorizationChallengeEndpoint(\n        @Res() res: Response,\n        @Body() body: AuthorizeQueries,\n        @Param('tenantId') tenantId: string,\n    ) {\n        return this.authorizeService.authorizationChallengeEndpoint(\n            res,\n            body,\n            tenantId,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizeQueries.html":{"url":"classes/AuthorizeQueries.html","title":"class - AuthorizeQueries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizeQueries\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/authorize-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                auth_session\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                client_id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge_method\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                dpop_jkt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                issuer_state\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                redirect_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                resource\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                scope\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        auth_session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge_method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        dpop_jkt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        issuer_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        redirect_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from 'class-validator';\n\nexport class AuthorizeQueries {\n    @IsOptional()\n    @IsString()\n    issuer_state?: string;\n    @IsOptional()\n    @IsString()\n    response_type?: string;\n    @IsOptional()\n    @IsString()\n    client_id?: string;\n    @IsOptional()\n    @IsString()\n    redirect_uri?: string;\n    @IsOptional()\n    @IsString()\n    resource?: string;\n    @IsOptional()\n    @IsString()\n    scope?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge_method?: string;\n    @IsOptional()\n    @IsString()\n    dpop_jkt?: string;\n    @IsOptional()\n    @IsString()\n    request_uri?: string;\n    @IsOptional()\n    @IsString()\n    auth_session?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthorizeService.html":{"url":"injectables/AuthorizeService.html","title":"injectable - AuthorizeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthorizeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authorizationChallengeEndpoint\n                            \n                            \n                                authzMetadata\n                            \n                            \n                                getAuthorizationServer\n                            \n                            \n                                    Async\n                                parseChallengeRequest\n                            \n                            \n                                    Private\n                                    Async\n                                sendAuthorizationCode\n                            \n                            \n                                    Async\n                                sendAuthorizationResponse\n                            \n                            \n                                    Async\n                                setAuthCode\n                            \n                            \n                                    Async\n                                validateTokenRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, oid4vpService: Oid4vpService, sessionService: SessionService, issuanceService: IssuanceService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/authorize/authorize.service.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oid4vpService\n                                                  \n                                                        \n                                                                        Oid4vpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        issuanceService\n                                                  \n                                                        \n                                                                        IssuanceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(res: Response>, body: AuthorizeQueries, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:228\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \nauthzMetadata(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     AuthorizationServerMetadata\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAuthorizationServer\n                        \n                    \n                \n            \n            \n                \ngetAuthorizationServer(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Oauth2AuthorizationServer\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        parseChallengeRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseChallengeRequest(body: AuthorizeQueries, tenantId: string, webhook?: WebhookConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:210\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                webhook\n                                            \n                                                            WebhookConfig\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        sendAuthorizationCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationCode(res: Response, issuer_state: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:306\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendAuthorizationResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationResponse(queries: AuthorizeQueries, res: Response>, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setAuthCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAuthCode(issuer_state: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:320\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateTokenRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateTokenRequest(body: any, req: Request, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\nimport { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    authorizationCodeGrantIdentifier,\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from '@openid4vc/oauth2';\nimport type { Request, Response } from 'express';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { getHeadersFromRequest } from '../oid4vci/util';\nimport { AuthorizeQueries } from './dto/authorize-request.dto';\nimport { Oid4vpService } from '../../verifier/oid4vp/oid4vp.service';\nimport { SessionService } from '../../session/session.service';\nimport { WebhookConfig } from '../../utils/webhook/webhook.dto';\nimport { IssuanceService } from '../issuance/issuance.service';\nimport { AuthenticationConfigHelper } from '../issuance/dto/authentication-config.helper';\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(tenantId: string): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow('PUBLIC_URL') +\n            `/${tenantId}`;\n        return this.getAuthorizationServer(\n            tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: ['ES256'],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n        tenantId: string,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        'request_uri not found or not provided in the request',\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                'request_uri not found or not provided in the request',\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!, tenantId);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        tenantId: string,\n    ): Promise {\n        const url = `${this.configService.getOrThrow('PUBLIC_URL')}${req.url}`;\n\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        const session = await this.sessionService.getBy({\n            authorization_code: body.code ?? body['pre-authorized_code'],\n            tenantId,\n        });\n\n        if (!session) {\n            throw new ConflictException('Authorization code not found');\n        }\n        const authorizationServerMetadata = this.authzMetadata(tenantId);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n\n        const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow('PUBLIC_URL')}/${tenantId}`,\n            signer: {\n                method: 'jwk',\n                alg: 'ES256',\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    'jwk',\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            cNonce,\n            cNonceExpiresIn: 100,\n            clientId: 'wallet', // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest('pid', { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: 'insufficient_authorization',\n            auth_session,\n            presentation,\n            error_description:\n                'Presentation of credential required before issuance',\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        tenantId: string,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(\n                    res,\n                    body.auth_session,\n                    tenantId,\n                );\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    'Session does not have valid credentials for issuance',\n                );\n            }\n        }\n\n        const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        }\n        const issuanceId = session.issuanceId!;\n        const config = await this.issuanceService.getIssuanceConfigurationById(\n            issuanceId,\n            tenantId,\n        );\n\n        // Use the new authentication configuration structure\n        const authConfig = config.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                'No authentication configuration found for issuance config',\n            );\n        }\n\n        if (\n            AuthenticationConfigHelper.isPresentationDuringIssuanceAuth(\n                authConfig,\n            )\n        ) {\n            // OID4VP flow - credential presentation required\n            const presentationConfig =\n                AuthenticationConfigHelper.getPresentationConfig(authConfig);\n            const webhook = presentationConfig?.presentation.webhook;\n            const response = await this.parseChallengeRequest(\n                body,\n                tenantId,\n                webhook,\n            );\n            res.status(400).send(response);\n        } else if (AuthenticationConfigHelper.isAuthUrlAuth(authConfig)) {\n            // OID4VCI authorized code flow - should not reach here typically in challenge endpoint\n            // But we'll handle it by sending authorization code\n            await this.sendAuthorizationCode(res, body.issuer_state!, tenantId);\n        } else if (AuthenticationConfigHelper.isNoneAuth(authConfig)) {\n            // Pre-authorized code flow (method: 'none') - send authorization code directly\n            await this.sendAuthorizationCode(res, body.issuer_state!, tenantId);\n        } else {\n            throw new Error(\n                `Unsupported authentication method: ${(authConfig as any).method}`,\n            );\n        }\n    }\n\n    private async sendAuthorizationCode(\n        res: Response,\n        issuer_state: string,\n        tenantId: string,\n    ) {\n        const authorization_code = await this.setAuthCode(\n            issuer_state,\n            tenantId,\n        );\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string, tenantId: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, tenantId, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Client.html":{"url":"interfaces/Client.html","title":"interface - Client","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Client\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            secret\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { existsSync, mkdirSync, writeFileSync } from 'fs';\nimport { join } from 'path';\nimport { TENANT_EVENTS } from './tenant-events';\n\n// Client interface for service integration\nexport interface Client {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class ClientService implements OnApplicationBootstrap {\n    private clients: Client[] | null = null;\n\n    constructor(\n        private configService: ConfigService,\n        private eventEmitter: EventEmitter2,\n    ) {}\n\n    onApplicationBootstrap() {\n        // were are ignoring clients that are not used anymore for now. Need to implement a proper cleanup mechanism later\n        const clients = this.getClients();\n        clients.forEach((client) => {\n            this.setUpClient(client.id);\n        });\n    }\n\n    /**\n     * Get clients from configuration\n     * @returns\n     */\n    private getClients(): Client[] {\n        if (!this.clients) {\n            this.clients = this.loadClients();\n        }\n        return this.clients;\n    }\n\n    /**\n     * Load clients from configuration\n     */\n    private loadClients(): Client[] {\n        // Default clients for development/testing\n        return [\n            {\n                id: this.configService.getOrThrow('AUTH_CLIENT_ID'),\n                secret: this.configService.getOrThrow(\n                    'AUTH_CLIENT_SECRET',\n                ),\n            },\n        ];\n    }\n\n    /**\n     * Validate client credentials (OAuth2 Client Credentials flow)\n     * This is the primary authentication method for service integration\n     */\n    validateClient(clientId: string, clientSecret: string): Client | null {\n        const client = this.getClients().find((c) => c.id === clientId);\n\n        if (!client || client.secret !== clientSecret) {\n            return null;\n        }\n\n        return client;\n    }\n\n    /**\n     * Find client by ID\n     */\n    findClientById(clientId: string): Client | null {\n        return this.getClients().find((c) => c.id === clientId) || null;\n    }\n\n    /**\n     * Sends an event to set up a client, allowing all other services to listen and react accordingly.\n     * @param id\n     */\n    setUpClient(id: string) {\n        const folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            id,\n        );\n        if (!existsSync(folder)) {\n            mkdirSync(folder, { recursive: true });\n        }\n\n        const displayInfo = [\n            {\n                name: 'EUDI Wallet dev',\n                locale: 'de-DE',\n                logo: {\n                    uri: '/issuer.png',\n                    url: '/issuer.png',\n                },\n            },\n        ];\n        writeFileSync(\n            join(folder, 'display.json'),\n            JSON.stringify(displayInfo, null, 2),\n        );\n\n        this.eventEmitter.emit(TENANT_EVENTS.TENANT_INIT, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClientCredentialsDto.html":{"url":"classes/ClientCredentialsDto.html","title":"class - ClientCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClientCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/client-credentials.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                client_id\n                            \n                            \n                                    \n                                client_secret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_secret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class ClientCredentialsDto {\n    @IsString()\n    client_id: string;\n    @IsString()\n    client_secret: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClientService.html":{"url":"injectables/ClientService.html","title":"injectable - ClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clients\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findClientById\n                            \n                            \n                                    Private\n                                getClients\n                            \n                            \n                                    Private\n                                loadClients\n                            \n                            \n                                onApplicationBootstrap\n                            \n                            \n                                setUpClient\n                            \n                            \n                                validateClient\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/auth/client.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findClientById\n                        \n                    \n                \n            \n            \n                \nfindClientById(clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Find client by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Client | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getClients\n                        \n                    \n                \n            \n            \n                \n                        \n                    getClients()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:35\n                        \n                    \n\n\n            \n                \n                        Get clients from configuration\n\n\n                        \n                            Returns :         Client[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadClients\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadClients()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Load clients from configuration\n\n\n                        \n                            Returns :         Client[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \nonApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setUpClient\n                        \n                    \n                \n            \n            \n                \nsetUpClient(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Sends an event to set up a client, allowing all other services to listen and react accordingly.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateClient\n                        \n                    \n                \n            \n            \n                \nvalidateClient(clientId: string, clientSecret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Validate client credentials (OAuth2 Client Credentials flow)\nThis is the primary authentication method for service integration\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSecret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Client | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        clients\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Client[] | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/auth/client.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { existsSync, mkdirSync, writeFileSync } from 'fs';\nimport { join } from 'path';\nimport { TENANT_EVENTS } from './tenant-events';\n\n// Client interface for service integration\nexport interface Client {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class ClientService implements OnApplicationBootstrap {\n    private clients: Client[] | null = null;\n\n    constructor(\n        private configService: ConfigService,\n        private eventEmitter: EventEmitter2,\n    ) {}\n\n    onApplicationBootstrap() {\n        // were are ignoring clients that are not used anymore for now. Need to implement a proper cleanup mechanism later\n        const clients = this.getClients();\n        clients.forEach((client) => {\n            this.setUpClient(client.id);\n        });\n    }\n\n    /**\n     * Get clients from configuration\n     * @returns\n     */\n    private getClients(): Client[] {\n        if (!this.clients) {\n            this.clients = this.loadClients();\n        }\n        return this.clients;\n    }\n\n    /**\n     * Load clients from configuration\n     */\n    private loadClients(): Client[] {\n        // Default clients for development/testing\n        return [\n            {\n                id: this.configService.getOrThrow('AUTH_CLIENT_ID'),\n                secret: this.configService.getOrThrow(\n                    'AUTH_CLIENT_SECRET',\n                ),\n            },\n        ];\n    }\n\n    /**\n     * Validate client credentials (OAuth2 Client Credentials flow)\n     * This is the primary authentication method for service integration\n     */\n    validateClient(clientId: string, clientSecret: string): Client | null {\n        const client = this.getClients().find((c) => c.id === clientId);\n\n        if (!client || client.secret !== clientSecret) {\n            return null;\n        }\n\n        return client;\n    }\n\n    /**\n     * Find client by ID\n     */\n    findClientById(clientId: string): Client | null {\n        return this.getClients().find((c) => c.id === clientId) || null;\n    }\n\n    /**\n     * Sends an event to set up a client, allowing all other services to listen and react accordingly.\n     * @param id\n     */\n    setUpClient(id: string) {\n        const folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            id,\n        );\n        if (!existsSync(folder)) {\n            mkdirSync(folder, { recursive: true });\n        }\n\n        const displayInfo = [\n            {\n                name: 'EUDI Wallet dev',\n                locale: 'de-DE',\n                logo: {\n                    uri: '/issuer.png',\n                    url: '/issuer.png',\n                },\n            },\n        ];\n        writeFileSync(\n            join(folder, 'display.json'),\n            JSON.stringify(displayInfo, null, 2),\n        );\n\n        this.eventEmitter.emit(TENANT_EVENTS.TENANT_INIT, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CredentialConfig.html":{"url":"entities/CredentialConfig.html","title":"entity - CredentialConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CredentialConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity to manage a credential configuration\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                claims\n                            \n                            \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                    \n                                disclosureFrame\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                issuanceConfig\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:34\n                        \n                    \n\n            \n                \n                    Claims that should be set by default when this credential is being issued. Will be overwritten when passed during a credential offer request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialConfigurationSupported\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:28\n                        \n                    \n\n            \n                \n                    OID4VCI issuer metadata crddential configuration element.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        disclosureFrame\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:40\n                        \n                    \n\n            \n                \n                    Disclosure frame for the sd jwt vc.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:17\n                        \n                    \n\n            \n                \n                    Unique identifier for the configuration to reference it.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        issuanceConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IssuanceConfig[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, issuanceConfig => issuanceConfig.credentialConfigs, {cascade: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:64\n                        \n                    \n\n            \n                \n                    Link to all the issuance configs that are using this credential.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SchemaResponse\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:22\n                        \n                    \n\n            \n                \n                    Tenant ID for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         VCT\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:47\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { CredentialConfigurationSupported } from '@openid4vc/openid4vci';\nimport { IsObject, IsOptional } from 'class-validator';\nimport { Column, Entity, JoinTable, ManyToMany } from 'typeorm';\nimport { VCT } from '../../credentials-metadata/dto/credential-config.dto';\nimport { SchemaResponse } from '../../credentials-metadata/dto/schema-response.dto';\nimport { IssuanceConfig } from '../../issuance/entities/issuance-config.entity';\n\n/**\n * Entity to manage a credential configuration\n */\n@Entity()\nexport class CredentialConfig {\n    /**\n     * Unique identifier for the configuration to reference it.\n     */\n    @Column('varchar', { primary: true })\n    id: string;\n    /**\n     * Tenant ID for the issuance configuration.\n     */\n    @Column('varchar', { primary: true })\n    tenantId: string;\n    /**\n     * OID4VCI issuer metadata crddential configuration element.\n     */\n    @Column('json')\n    @IsObject()\n    config: CredentialConfigurationSupported;\n    /**\n     * Claims that should be set by default when this credential is being issued. Will be overwritten when passed during a credential offer request.\n     */\n    @Column('json', { nullable: true })\n    @IsObject()\n    claims: Record;\n    /**\n     * Disclosure frame for the sd jwt vc.\n     */\n    @Column('json', { nullable: true })\n    @IsObject()\n    disclosureFrame: Record;\n    @Column('json', { nullable: true })\n    /**\n     * VCT values that are hosted by this service.\n     */\n    @IsObject()\n    @IsOptional()\n    vct?: VCT;\n    @Column('json', { nullable: true })\n    /**\n     * json schema that is used during issuance for the validation of the claims.\n     */\n    @IsObject()\n    @IsOptional()\n    schema?: SchemaResponse;\n    /**\n     * Link to all the issuance configs that are using this credential.\n     */\n    @ManyToMany(\n        () => IssuanceConfig,\n        (issuanceConfig) => issuanceConfig.credentialConfigs,\n        { cascade: true },\n    )\n    @JoinTable()\n    issuanceConfig: IssuanceConfig[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CredentialConfigService.html":{"url":"injectables/CredentialConfigService.html","title":"injectable - CredentialConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CredentialConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credential-config/credential-config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing credential configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                getById\n                            \n                            \n                                store\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(credentialConfigRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/credentials/credential-config/credential-config.service.ts:10\n                            \n                        \n\n                \n                    \n                            Constructor for CredentialConfigService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        credentialConfigRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for CredentialConfig entity.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:63\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the CredentialConfig entity to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the result of the delete operation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:25\n                        \n                    \n\n\n            \n                \n                        Retrieves all credential configurations for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to an array of CredentialConfig entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getById\n                        \n                    \n                \n            \n            \n                \ngetById(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Retrieves a credential configuration by its ID for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n            \n                \nstore(tenantId: string, config: CredentialConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:50\n                        \n                    \n\n\n            \n                \n                        Stores a credential configuration for a given tenant.\nIf the configuration already exists, it will be overwritten.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                        \n                                                config\n                                            \n                                                            CredentialConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe CredentialConfig entity to store.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the stored CredentialConfig entity.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CredentialConfig } from '../entities/credential.entity';\n\n/**\n * Service for managing credential configurations.\n */\n@Injectable()\nexport class CredentialConfigService {\n    /**\n     * Constructor for CredentialConfigService.\n     * @param credentialConfigRepository - Repository for CredentialConfig entity.\n     */\n    constructor(\n        @InjectRepository(CredentialConfig)\n        private readonly credentialConfigRepository: Repository,\n    ) {}\n\n    /**\n     * Retrieves all credential configurations for a given tenant.\n     * @param tenantId - The ID of the tenant.\n     * @returns A promise that resolves to an array of CredentialConfig entities.\n     */\n    get(tenantId: string) {\n        return this.credentialConfigRepository.find({\n            where: { tenantId },\n        });\n    }\n\n    /**\n     * Retrieves a credential configuration by its ID for a given tenant.\n     * @param tenantId\n     * @param id\n     * @returns\n     */\n    getById(tenantId: string, id: string) {\n        return this.credentialConfigRepository.findOne({\n            where: { id, tenantId },\n        });\n    }\n\n    /**\n     * Stores a credential configuration for a given tenant.\n     * If the configuration already exists, it will be overwritten.\n     * @param tenantId - The ID of the tenant.\n     * @param config - The CredentialConfig entity to store.\n     * @returns A promise that resolves to the stored CredentialConfig entity.\n     */\n    store(tenantId: string, config: CredentialConfig) {\n        return this.credentialConfigRepository.save({\n            ...config,\n            tenantId,\n        });\n    }\n\n    /**\n     * Deletes a credential configuration for a given tenant.\n     * @param tenantId - The ID of the tenant.\n     * @param id - The ID of the CredentialConfig entity to delete.\n     * @returns A promise that resolves to the result of the delete operation.\n     */\n    delete(tenantId: string, id: string) {\n        return this.credentialConfigRepository.delete({\n            id,\n            tenantId,\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialIssuerMetadataDto.html":{"url":"classes/CredentialIssuerMetadataDto.html","title":"class - CredentialIssuerMetadataDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialIssuerMetadataDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/credential-issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the metadata for a credential issuer.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_server\n                            \n                            \n                                authorization_servers\n                            \n                            \n                                batch_credential_issuance\n                            \n                            \n                                credential_configurations_supported\n                            \n                            \n                                credential_endpoint\n                            \n                            \n                                credential_issuer\n                            \n                            \n                                display\n                            \n                            \n                                notification_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_server\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:41\n                        \n                    \n\n            \n                \n                    The URL of the preferred authorization server.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_servers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:12\n                        \n                    \n\n            \n                \n                    List of authorization servers that support the credential issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        batch_credential_issuance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:24\n                        \n                    \n\n            \n                \n                    Information about batch credential issuance.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_configurations_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:37\n                        \n                    \n\n            \n                \n                    Object of credentials configurations supported by the issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:16\n                        \n                    \n\n            \n                \n                    The URL of the credential issuance endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:8\n                        \n                    \n\n            \n                \n                    The issuer identifier, typically a URL.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        display\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:33\n                        \n                    \n\n            \n                \n                    Display information for the credentials that are getting issued.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notification_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:20\n                        \n                    \n\n            \n                \n                    The URL of the notification endpoint for credential issuance.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CredentialIssuerMetadataDto {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    credential_issuer: string;\n    /**\n     * List of authorization servers that support the credential issuer.\n     */\n    authorization_servers: string[];\n    /**\n     * The URL of the credential issuance endpoint.\n     */\n    credential_endpoint: string;\n    /**\n     * The URL of the notification endpoint for credential issuance.\n     */\n    notification_endpoint: string;\n    /**\n     * Information about batch credential issuance.\n     */\n    batch_credential_issuance: {\n        /**\n         * Amount of elements in a batch.\n         */\n        batch_size: number;\n    };\n    /**\n     * Display information for the credentials that are getting issued.\n     */\n    display: Array;\n    /**\n     * Object of credentials configurations supported by the issuer.\n     */\n    credential_configurations_supported: any;\n    /**\n     * The URL of the preferred authorization server.\n     */\n    authorization_server: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CredentialsController.html":{"url":"controllers/CredentialsController.html","title":"controller - CredentialsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CredentialsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management/credentials\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing credential configurations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    \n                                getConfigs\n                            \n                            \n                                    \n                                storeCredentialConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteIssuanceConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:58\n                        \n                    \n\n\n            \n                \n                        Deletes an credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getConfigs\n                        \n                    \n                \n            \n            \n                \n                        \n                    getConfigs(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:35\n                        \n                    \n\n\n            \n                \n                        Returns the credential configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storeCredentialConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeCredentialConfiguration(config: CredentialConfig, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:45\n                        \n                    \n\n\n            \n                \n                        Stores the credential configuration for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            CredentialConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Body,\n    UseGuards,\n} from '@nestjs/common';\nimport { ApiSecurity, ApiTags } from '@nestjs/swagger';\nimport { Token, TokenPayload } from '../../auth/token.decorator';\nimport { CredentialConfigService } from './credential-config/credential-config.service';\nimport { CredentialConfig } from './entities/credential.entity';\nimport { JwtAuthGuard } from '../../auth/auth.guard';\n\n/**\n * Controller for managing credential configurations.\n */\n@ApiTags('Issuer management')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2')\n@Controller('issuer-management/credentials')\nexport class CredentialsController {\n    /**\n     * Initializes the CredentialsController with the CredentialConfigService.\n     * @param credentialsService\n     */\n    constructor(private readonly credentialsService: CredentialConfigService) {}\n\n    /**\n     * Returns the credential configurations for this tenant.\n     * @returns\n     */\n    @Get()\n    getConfigs(@Token() user: TokenPayload) {\n        return this.credentialsService.get(user.sub);\n    }\n\n    /**\n     * Stores the credential configuration for this tenant.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storeCredentialConfiguration(\n        @Body() config: CredentialConfig,\n        @Token() user: TokenPayload,\n    ) {\n        return this.credentialsService.store(user.sub, config);\n    }\n\n    /**\n     * Deletes an credential configuration.\n     * @param id\n     * @returns\n     */\n    @Delete(':id')\n    deleteIssuanceConfiguration(\n        @Param('id') id: string,\n        @Token() user: TokenPayload,\n    ) {\n        return this.credentialsService.delete(user.sub, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CredentialsMetadataController.html":{"url":"controllers/CredentialsMetadataController.html","title":"controller - CredentialsMetadataController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CredentialsMetadataController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/credentials-metadata.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                credentials-metadata\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n            \n                \n                        \n                    schema(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('schema/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials-metadata/credentials-metadata.controller.ts:23\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        vct\n                        \n                    \n                \n            \n            \n                \n                        \n                    vct(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('vct/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials-metadata/credentials-metadata.controller.ts:13\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe identifier of the credential configuration.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from '@nestjs/common';\nimport { CredentialsService } from '../credentials/credentials.service';\n\n@Controller('credentials-metadata')\nexport class CredentialsMetadataController {\n    constructor(private readonly credentialsService: CredentialsService) {}\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n     * @param id - The identifier of the credential configuration.\n     */\n    @Get('vct/:id')\n    vct(@Param('id') id: string, @Param('tenantId') tenantId: string) {\n        return this.credentialsService.getVCT(id, tenantId);\n    }\n\n    /**\n     * Retrieves the schema for a specific credential\n     * @param id\n     * @returns\n     */\n    @Get('schema/:id')\n    schema(@Param('id') id: string, @Param('tenantId') tenantId: string) {\n        return this.credentialsService.getSchema(id, tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CredentialsService.html":{"url":"injectables/CredentialsService.html","title":"injectable - CredentialsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CredentialsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getCredential\n                            \n                            \n                                    Async\n                                getCredentialConfiguration\n                            \n                            \n                                    Async\n                                getSchema\n                            \n                            \n                                    Async\n                                getVCT\n                            \n                            \n                                    Async\n                                storeCredentialConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(crpytoService: CryptoService, configService: ConfigService, statusListService: StatusListService, credentialConfigRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/credentials/credentials.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        crpytoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusListService\n                                                  \n                                                        \n                                                                        StatusListService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialConfigRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredential\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredential(credentialConfigurationId: string, cnf: Jwk, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cnf\n                                            \n                                                        Jwk\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredentialConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredentialConfiguration(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Returns the credential configuration that is required for oid4vci\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSchema\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSchema(credentialConfigurationId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:153\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getVCT\n                        \n                    \n                \n            \n            \n                \n                        \n                    getVCT(credentialId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:127\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        storeCredentialConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeCredentialConfiguration(tenantId: string, value: CredentialConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Store the config. If it already exist, overwrite it.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            CredentialConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport type { Jwk } from '@openid4vc/oauth2';\nimport { digest, generateSalt } from '@sd-jwt/crypto-nodejs';\nimport { SDJwtVcInstance } from '@sd-jwt/sd-jwt-vc';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { StatusListService } from '../status-list/status-list.service';\nimport { CredentialConfigurationSupported } from '@openid4vc/openid4vci';\nimport { Session } from '../../session/entities/session.entity';\nimport { SchemaResponse } from '../credentials-metadata/dto/schema-response.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CredentialConfig } from './entities/credential.entity';\nimport { VCT } from '../credentials-metadata/dto/credential-config.dto';\n\n@Injectable()\nexport class CredentialsService {\n    constructor(\n        private crpytoService: CryptoService,\n        private configService: ConfigService,\n        private statusListService: StatusListService,\n\n        @InjectRepository(CredentialConfig)\n        private credentialConfigRepo: Repository,\n    ) {}\n\n    /**\n     * Store the config. If it already exist, overwrite it.\n     * @param tenantId\n     * @param value\n     * @returns\n     */\n    async storeCredentialConfiguration(\n        tenantId: string,\n        value: CredentialConfig,\n    ) {\n        value.tenantId = tenantId;\n        return this.credentialConfigRepo.save(value);\n    }\n\n    /**\n     * Returns the credential configuration that is required for oid4vci\n     * @param tenantId\n     * @returns\n     */\n    async getCredentialConfiguration(\n        tenantId: string,\n    ): Promise> {\n        const credential_configurations_supported: Record = {};\n\n        const configs = await this.credentialConfigRepo.findBy({ tenantId });\n\n        for (const value of configs) {\n            credential_configurations_supported[value.id] = value.config;\n        }\n        return credential_configurations_supported;\n    }\n\n    async getCredential(\n        credentialConfigurationId: string,\n        cnf: Jwk,\n        session: Session,\n    ) {\n        const credentialConfiguration = await this.credentialConfigRepo\n            .findOneByOrFail({\n                id: credentialConfigurationId,\n                tenantId: session.tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException(\n                    `Credential configuration with id ${credentialConfigurationId} not found`,\n                );\n            });\n\n        const claims =\n            session.credentialPayload?.values?.[credentialConfigurationId] ??\n            credentialConfiguration.claims;\n        const disclosureFrame = credentialConfiguration.disclosureFrame;\n\n        const sdjwt = new SDJwtVcInstance({\n            signer: await this.crpytoService.keyService.signer(\n                session.tenantId,\n            ),\n            signAlg: 'ES256',\n            hasher: digest,\n            hashAlg: 'sha-256',\n            saltGenerator: generateSalt,\n            loadTypeMetadataFormat: true,\n        });\n\n        return sdjwt.issue(\n            {\n                iss: this.configService.getOrThrow('PUBLIC_URL'),\n                iat: Math.round(new Date().getTime() / 1000),\n                vct: `${this.configService.getOrThrow('PUBLIC_URL')}/${session.tenantId}/credentials/vct/${credentialConfigurationId}`,\n                cnf: {\n                    jwk: cnf,\n                },\n                ...(await this.statusListService.createEntry(\n                    session,\n                    credentialConfigurationId,\n                )),\n                ...claims,\n            },\n            disclosureFrame,\n            {\n                header: {\n                    x5c: this.crpytoService.getCertChain(\n                        'signing',\n                        session.tenantId,\n                    ),\n                    alg: 'ES256',\n                },\n            },\n        );\n    }\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n     * @param credentialId\n     * @param tenantId\n     * @returns\n     */\n    async getVCT(credentialId: string, tenantId: string): Promise {\n        const credentialConfig = await this.credentialConfigRepo\n            .findOneByOrFail({\n                tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException(\n                    `Credential configuration with id ${credentialId} not found`,\n                );\n            });\n        if (!credentialConfig.vct) {\n            throw new ConflictException(\n                `VCT for credential configuration with id ${credentialId} not found`,\n            );\n        }\n        const host = this.configService.getOrThrow('PUBLIC_URL');\n        credentialConfig.vct.vct = `${host}/${tenantId}/credentials-metadata/vct/${credentialConfig.id}`;\n        return credentialConfig.vct;\n    }\n\n    /**\n     * Retrieves the schema for a specific credential configuration.\n     * @param id\n     * @param tenantId\n     * @returns\n     */\n    async getSchema(\n        credentialConfigurationId: string,\n        tenantId: string,\n    ): Promise {\n        const credentialConfig =\n            await this.credentialConfigRepo.findOneByOrFail({\n                tenantId,\n            });\n        if (!credentialConfig) {\n            throw new ConflictException(\n                `Credential configuration with id ${credentialConfigurationId} not found`,\n            );\n        }\n        if (!credentialConfig.schema) {\n            throw new ConflictException(\n                `Schema for credential configuration with id ${credentialConfigurationId} not found`,\n            );\n        }\n        return credentialConfig.schema;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CryptoImplementation.html":{"url":"interfaces/CryptoImplementation.html","title":"interface - CryptoImplementation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CryptoImplementation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto/crypto-implementation.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface to imeplement different algorithms.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            alg\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        generateKeyPair\n                                    \n                                \n                                \n                                    \n                                        getSigner\n                                    \n                                \n                                \n                                    \n                                        getVerifier\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateKeyPair\n                        \n                    \n                \n            \n            \n                \ngenerateKeyPair()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto-implementation.ts:19\n                        \n                    \n\n\n            \n                \n                        Generates a new keypair\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSigner\n                        \n                    \n                \n            \n            \n                \ngetSigner(privateKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto-implementation.ts:24\n                        \n                    \n\n\n            \n                \n                        creates a signer based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                privateKeyJWK\n                                            \n                                                        JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getVerifier\n                        \n                    \n                \n            \n            \n                \ngetVerifier(publicKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto-implementation.ts:29\n                        \n                    \n\n\n            \n                \n                        creates a verifier based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                publicKeyJWK\n                                            \n                                                        JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        alg\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        alg:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type KeyPair = {\n    publicKey: JsonWebKey;\n    privateKey: JsonWebKey;\n};\n\ntype Signer = (data: string) => Promise;\n\ntype Verifier = (data: string, signature: string) => Promise;\n\n/**\n * Generic interface to imeplement different algorithms.\n */\nexport interface CryptoImplementation {\n    //name of the algorithm\n    alg: string;\n    /**\n     * Generates a new keypair\n     */\n    generateKeyPair(): Promise;\n    /**\n     * creates a signer based on the passed key.\n     * @param privateKeyJWK\n     */\n    getSigner(privateKeyJWK: JsonWebKey): Promise;\n    /**\n     * creates a verifier based on the passed key.\n     * @param publicKeyJWK\n     */\n    getVerifier(publicKeyJWK: JsonWebKey): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CryptoModule.html":{"url":"modules/CryptoModule.html","title":"module - CryptoModule","body":"\n                   \n\n\n\n\n    Modules\n    CryptoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_providers\n\n\n\ncluster_CryptoModule_exports\n\n\n\n\nCryptoService \n\nCryptoService \n\n\n\nEncryptionService \n\nEncryptionService \n\n\n\nCryptoModule\n\nCryptoModule\n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/crypto.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CryptoService } from './crypto.service';\nimport { EncryptionService } from './encryption/encryption.service';\n\n@Module({\n    imports: [],\n    providers: [CryptoService, EncryptionService],\n    exports: [CryptoService, EncryptionService],\n})\nexport class CryptoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CryptoService.html":{"url":"injectables/CryptoService.html","title":"injectable - CryptoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CryptoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/crypto.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                folder\n                            \n                            \n                                    \n                                    Public\n                                    Readonly\n                                keyService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCallbackContext\n                            \n                            \n                                getCertChain\n                            \n                            \n                                getHeadersFromRequest\n                            \n                            \n                                getJwks\n                            \n                            \n                                getSignJwtCallback\n                            \n                            \n                                hasCerts\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                    \n                                    Async\n                                onTenantInit\n                            \n                            \n                                    Async\n                                signJwt\n                            \n                            \n                                storeAccessCertificate\n                            \n                            \n                                    Async\n                                verifyJwt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, keyService: KeyService, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/crypto.service.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        keyService\n                                                  \n                                                        \n                                                                        KeyService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getCallbackContext\n                        \n                    \n                \n            \n            \n                \ngetCallbackContext(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:191\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Omit\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCertChain\n                        \n                    \n                \n            \n            \n                \ngetCertChain(type: certificateType, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:144\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            certificateType\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'signing'\n                                            \n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHeadersFromRequest\n                        \n                    \n                \n            \n            \n                \ngetHeadersFromRequest(req: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:266\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     globalThis.Headers\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getJwks\n                        \n                    \n                \n            \n            \n                \ngetJwks(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:280\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSignJwtCallback\n                        \n                    \n                \n            \n            \n                \ngetSignJwtCallback(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:229\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SignJwtCallback\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasCerts\n                        \n                    \n                \n            \n            \n                \nhasCerts(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Checks if there is a signing certificate and access certificate available.\nIf not it will be created.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(TENANT_EVENTS.TENANT_INIT, {async: true})\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signJwt\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJwt(header: any, payload: any, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:164\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                header\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storeAccessCertificate\n                        \n                    \n                \n            \n            \n                \nstoreAccessCertificate(crt: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:157\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                crt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyJwt\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyJwt(compact: string, tenantId: string, payload?: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/crypto.service.ts:172\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                compact\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        folder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/crypto.service.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Readonly\n                        keyService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KeyService\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject('KeyService')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/crypto.service.ts:36\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { createHash, randomBytes } from 'node:crypto';\nimport {\n    existsSync,\n    mkdirSync,\n    readFileSync,\n    unlinkSync,\n    writeFileSync,\n} from 'node:fs';\nimport { Inject, Injectable, OnModuleInit } from '@nestjs/common';\nimport {\n    type CallbackContext,\n    HashAlgorithm,\n    type Jwk,\n    SignJwtCallback,\n    calculateJwkThumbprint,\n    clientAuthenticationNone,\n} from '@openid4vc/oauth2';\nimport type { Request } from 'express';\nimport { type JWK, importJWK, jwtVerify } from 'jose';\nimport { ConfigService } from '@nestjs/config';\nimport { join } from 'node:path';\nimport { KeyService } from './key/key.service';\nimport { EC_Public } from '../well-known/dto/jwks-response.dto';\nimport { execSync } from 'node:child_process';\nimport { EventEmitter2, OnEvent } from '@nestjs/event-emitter';\nimport { TENANT_EVENTS } from '../auth/tenant-events';\n\ntype certificateType = 'access' | 'signing';\n\n@Injectable()\nexport class CryptoService implements OnModuleInit {\n    folder: string;\n\n    constructor(\n        private readonly configService: ConfigService,\n        @Inject('KeyService') public readonly keyService: KeyService,\n        private readonly eventEmitter: EventEmitter2,\n    ) {}\n    onModuleInit() {\n        this.folder = join(this.configService.getOrThrow('FOLDER'));\n        if (!existsSync(this.folder)) {\n            mkdirSync(this.folder, { recursive: true });\n        }\n    }\n\n    @OnEvent(TENANT_EVENTS.TENANT_INIT, { async: true })\n    async onTenantInit(tenantId: string) {\n        const folder = join(this.folder, tenantId, 'keys');\n        if (!existsSync(folder)) {\n            mkdirSync(folder, { recursive: true });\n        }\n        await this.keyService.init(tenantId);\n        this.hasCerts(tenantId);\n        this.eventEmitter.emit(TENANT_EVENTS.TENANT_KEYS, tenantId);\n    }\n\n    /**\n     * Checks if there is a signing certificate and access certificate available.\n     * If not it will be created.\n     */\n    hasCerts(tenantId: string) {\n        const folder = join(this.folder, tenantId, 'keys');\n        const pubkey = join(folder, 'public-key.pem');\n        const dummyKey = join(folder, 'dummy_key.pem');\n        const dummyCsr = join(folder, 'dummy.csr');\n        const issuerKey = join(folder, 'issuer_key.pem');\n        const issuerCert = join(folder, 'issuer_cert.pem');\n        const certOut = join(folder, 'signing-certificate.pem');\n        const sanExt = join(folder, 'san.ext');\n        if (!existsSync(certOut)) {\n            // === Configurable parameters (you can parameterize these when calling the script) ===\n            const subject = this.configService.getOrThrow('RP_NAME');\n            const hostname = new URL(\n                this.configService.getOrThrow('PUBLIC_URL'),\n            ).hostname; // Use URL to parse and get hostname\n\n            // === Helper to run shell commands ===\n            const run = (cmd) => {\n                execSync(cmd, { stdio: 'inherit' });\n            };\n\n            // === Step-by-step ===\n            mkdirSync(this.folder, { recursive: true });\n\n            // Step 1: Create dummy key pair if public key is missing\n            if (!existsSync(dummyKey)) {\n                // Generate private key (PKCS#8)\n                run(\n                    `openssl genpkey -algorithm EC -pkeyopt ec_paramgen_curve:prime256v1 -out \"${dummyKey}\"`,\n                );\n            } else {\n                if (!existsSync(dummyKey)) {\n                    throw new Error(\n                        `Public key exists but ${dummyKey} is missing.`,\n                    );\n                }\n            }\n\n            // Step 2: Generate issuer key\n            run(\n                `openssl genpkey -algorithm EC -pkeyopt ec_paramgen_curve:prime256v1 -out \"${issuerKey}\"`,\n            );\n\n            // Step 3: Create self-signed issuer cert\n            run(\n                `openssl req -x509 -new -key \"${issuerKey}\" -subj \"/CN=${subject}\" -addext \"subjectAltName=DNS:${hostname}\" -days 365 -out \"${issuerCert}\"`,\n            );\n\n            // Step 4: Create dummy CSR\n            run(\n                `openssl req -new -key \"${dummyKey}\" -subj \"/CN=${subject}\" -addext \"subjectAltName=DNS:${hostname}\" -out \"${dummyCsr}\"`,\n            );\n\n            // Step 5: Create SAN extension file\n            writeFileSync(sanExt, `subjectAltName=DNS:${hostname}`);\n\n            // Step 6: Sign certificate using issuer\n            run(\n                `openssl x509 -req -in \"${dummyCsr}\" -force_pubkey \"${pubkey}\" -CA \"${issuerCert}\" -CAkey \"${issuerKey}\" -CAcreateserial -days 365 -extfile \"${sanExt}\" -out \"${certOut}\"`,\n            );\n\n            // Step 7: Clean up\n            [\n                issuerKey,\n                issuerCert,\n                dummyCsr,\n                dummyKey,\n                join(folder, 'issuer_cert.srl'),\n                sanExt,\n            ].forEach((file) => {\n                if (existsSync(file)) unlinkSync(file);\n            });\n        }\n        if (!existsSync(join(folder, 'access-certificate.pem'))) {\n            // Create access certificate from signing certificate\n            const signingCert = readFileSync(\n                join(folder, 'signing-certificate.pem'),\n                'utf-8',\n            );\n            writeFileSync(join(folder, 'access-certificate.pem'), signingCert);\n        }\n    }\n\n    getCertChain(type: certificateType = 'signing', tenantId: string) {\n        const cert = readFileSync(\n            join(this.folder, tenantId, 'keys', `${type}-certificate.pem`),\n            'utf-8',\n        );\n\n        const chain = cert\n            .replace('-----BEGIN CERTIFICATE-----', '')\n            .replace('-----END CERTIFICATE-----', '')\n            .replace(/\\r?\\n|\\r/g, '');\n        return [chain];\n    }\n\n    storeAccessCertificate(crt: string, tenantId: string) {\n        writeFileSync(\n            join(this.folder, tenantId, 'keys', `access-certificate.pem`),\n            crt,\n        );\n    }\n\n    async signJwt(\n        header: any,\n        payload: any,\n        tenantId: string,\n    ): Promise {\n        return this.keyService.signJWT(payload, header, tenantId);\n    }\n\n    async verifyJwt(\n        compact: string,\n        tenantId: string,\n        payload?: Record,\n    ): Promise {\n        const publicJwk = await this.keyService.getPublicKey('jwk', tenantId);\n        const publicCryptoKey = await importJWK(publicJwk, 'ES256');\n\n        try {\n            await jwtVerify(compact, publicCryptoKey, {\n                currentDate: payload?.exp\n                    ? new Date((payload.exp - 300) * 1000)\n                    : undefined,\n            });\n            return { verified: true };\n        } catch {\n            return { verified: false };\n        }\n    }\n    getCallbackContext(\n        tenantId: string,\n    ): Omit {\n        return {\n            hash: (data, alg) =>\n                createHash(alg.replace('-', '').toLowerCase())\n                    .update(data)\n                    .digest(),\n            generateRandom: (bytes) => randomBytes(bytes),\n            clientAuthentication: clientAuthenticationNone({\n                clientId: 'some-random',\n            }),\n            //clientId: 'some-random-client-id', // TODO: Replace with your real clientId if necessary\n            signJwt: this.getSignJwtCallback(tenantId),\n            verifyJwt: async (signer, { compact, payload }) => {\n                if (signer.method !== 'jwk') {\n                    throw new Error('Signer method not supported');\n                }\n\n                const josePublicKey = await importJWK(\n                    signer.publicJwk as JWK,\n                    signer.alg,\n                );\n                try {\n                    await jwtVerify(compact, josePublicKey, {\n                        currentDate: payload?.exp\n                            ? new Date((payload.exp - 300) * 1000)\n                            : undefined,\n                    });\n                    return { verified: true, signerJwk: signer.publicJwk };\n                } catch {\n                    return { verified: false };\n                }\n            },\n        };\n    }\n\n    // Helper to generate signJwt callback\n    getSignJwtCallback(tenantId: string): SignJwtCallback {\n        return async (signer, { header, payload }) => {\n            if (signer.method !== 'jwk') {\n                throw new Error('Signer method not supported');\n            }\n            const hashCallback = this.getCallbackContext(tenantId).hash;\n            const jwkThumbprint = await calculateJwkThumbprint({\n                jwk: signer.publicJwk,\n                hashAlgorithm: HashAlgorithm.Sha256,\n                hashCallback,\n            });\n\n            const privateThumbprint = await calculateJwkThumbprint({\n                jwk: (await this.keyService.getPublicKey(\n                    'jwk',\n                    tenantId,\n                )) as Jwk,\n                hashAlgorithm: HashAlgorithm.Sha256,\n                hashCallback,\n            });\n\n            if (jwkThumbprint !== privateThumbprint) {\n                throw new Error(\n                    `No private key available for public jwk \\n${JSON.stringify(signer.publicJwk, null, 2)}`,\n                );\n            }\n\n            const jwt = await this.signJwt(header, payload, tenantId);\n\n            return {\n                jwt,\n                signerJwk: signer.publicJwk,\n            };\n        };\n    }\n\n    // Utility method like in your utils.ts\n    getHeadersFromRequest(req: Request): globalThis.Headers {\n        const headers = new Headers();\n        for (const [key, value] of Object.entries(req.headers)) {\n            if (Array.isArray(value)) {\n                for (const v of value) {\n                    headers.append(key, v);\n                }\n            } else if (value !== undefined) {\n                headers.set(key, value);\n            }\n        }\n        return headers;\n    }\n\n    getJwks(tenantId: string) {\n        return this.keyService.getPublicKey(\n            'jwk',\n            tenantId,\n        ) as Promise;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CryptoService-1.html":{"url":"injectables/CryptoService-1.html","title":"injectable - CryptoService-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CryptoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto/crypto.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAlg\n                            \n                            \n                                getCrypto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configServie: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/crypto/crypto.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configServie\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAlg\n                        \n                    \n                \n            \n            \n                \ngetAlg()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto.service.ts:17\n                        \n                    \n\n\n            \n                \n                        Return the algorithm that is used for the crypto operations like signing.\n\n\n                        \n                            Returns :         CryptoType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCrypto\n                        \n                    \n                \n            \n            \n                \ngetCrypto(alg)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto/crypto.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                alg\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    this.configServie.get('CRYPTO_ALG')\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CryptoImplementation\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config';\nimport { ES256 } from '@sd-jwt/crypto-nodejs';\nimport { ED25519 } from './ed25519';\nimport { CryptoImplementation } from './crypto-implementation';\nimport { Injectable } from '@nestjs/common';\n\nexport type CryptoType = 'ES256' | 'Ed25519';\n\n@Injectable()\nexport class CryptoService {\n    constructor(private configServie: ConfigService) {}\n\n    /**\n     * Return the algorithm that is used for the crypto operations like signing.\n     * @returns\n     */\n    getAlg(): CryptoType {\n        return this.configServie.get('CRYPTO_ALG') as CryptoType;\n    }\n\n    getCrypto(\n        alg = this.configServie.get('CRYPTO_ALG'),\n    ): CryptoImplementation {\n        switch (alg) {\n            case 'Ed25519':\n                return ED25519;\n            case 'ES256':\n                return ES256;\n            default:\n                throw new Error(`Unsupported algorithm ${alg}`);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule, TypeOrmModuleOptions } from '@nestjs/typeorm';\nimport { join } from 'path';\nimport * as Joi from 'joi';\n\nexport const DB_VALIDATION_SCHEMA = {\n    DB_TYPE: Joi.string().valid('sqlite', 'postgres').default('sqlite'),\n    DB_HOST: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PORT: Joi.number().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_USERNAME: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PASSWORD: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_DATABASE: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n};\n\n@Module({\n    imports: [\n        TypeOrmModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (\n                configService: ConfigService,\n            ): TypeOrmModuleOptions => {\n                const dbType = configService.get(\n                    'DB_TYPE',\n                );\n\n                const commonOptions = {\n                    synchronize: true,\n                    autoLoadEntities: true,\n                };\n\n                if (dbType === 'postgres') {\n                    return {\n                        type: 'postgres',\n                        host: configService.getOrThrow('DB_HOST'),\n                        port: configService.getOrThrow('DB_PORT'),\n                        username:\n                            configService.getOrThrow('DB_USERNAME'),\n                        password:\n                            configService.getOrThrow('DB_PASSWORD'),\n                        database:\n                            configService.getOrThrow('DB_DATABASE'),\n                        ...commonOptions,\n                    };\n                }\n\n                return {\n                    type: 'sqlite',\n                    database: join(\n                        configService.getOrThrow('FOLDER'),\n                        'service.db',\n                    ),\n                    ...commonOptions,\n                };\n            },\n        }),\n    ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EC_Public.html":{"url":"classes/EC_Public.html","title":"class - EC_Public","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EC_Public\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\nThis class is used to define the structure of EC public keys in JWK format.\n\n            \n\n\n            \n                Implements\n            \n            \n                            JWK_EC_Public\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                crv\n                            \n                            \n                                kty\n                            \n                            \n                                x\n                            \n                            \n                                y\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        crv\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:15\n                        \n                    \n\n            \n                \n                    The algorithm intended for use with the key, such as 'ES256'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        kty\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The key type, which is always 'EC' for Elliptic Curve keys.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        x\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:19\n                        \n                    \n\n            \n                \n                    The x coordinate of the EC public key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        y\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:23\n                        \n                    \n\n            \n                \n                    The y coordinate of the EC public key.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from 'jose';\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: 'EC';\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EncryptionService.html":{"url":"injectables/EncryptionService.html","title":"injectable - EncryptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EncryptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/encryption/encryption.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                privateEncryptionKey\n                            \n                            \n                                    Private\n                                privateEnncryptionPath\n                            \n                            \n                                    Private\n                                publicEncryptionKey\n                            \n                            \n                                    Private\n                                publicEncryptionPath\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decryptJwe\n                            \n                            \n                                getEncryptionPublicKey\n                            \n                            \n                                    Async\n                                init\n                            \n                            \n                                    \n                                    Async\n                                onTenantInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/encryption/encryption.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decryptJwe\n                        \n                    \n                \n            \n            \n                \n                        \n                    decryptJwe(response: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:58\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEncryptionPublicKey\n                        \n                    \n                \n            \n            \n                \ngetEncryptionPublicKey()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     JWK\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(TENANT_EVENTS.TENANT_INIT, {async: true})\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        privateEncryptionKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CryptoKey\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/encryption/encryption.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        privateEnncryptionPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/encryption/encryption.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        publicEncryptionKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JWK\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/encryption/encryption.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        publicEncryptionPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/encryption/encryption.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { existsSync, readFileSync, writeFileSync } from 'fs';\nimport { importJWK, exportJWK, generateKeyPair, jwtDecrypt, JWK } from 'jose';\nimport { join } from 'path';\nimport { TENANT_EVENTS } from '../../auth/tenant-events';\nimport { OnEvent } from '@nestjs/event-emitter';\n\n@Injectable()\nexport class EncryptionService {\n    private privateEncryptionKey: CryptoKey;\n    private publicEncryptionKey: JWK;\n    private privateEnncryptionPath: string;\n    private publicEncryptionPath: string;\n\n    constructor(private configService: ConfigService) {}\n\n    @OnEvent(TENANT_EVENTS.TENANT_INIT, { async: true })\n    async onTenantInit(tenantId: string) {\n        await this.init(tenantId);\n    }\n\n    async init(tenantId: string) {\n        const folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'keys',\n        );\n        this.privateEnncryptionPath = join(folder, 'private-encryption.json');\n        this.publicEncryptionPath = join(folder, 'public-encryption.json');\n        if (!existsSync(this.privateEnncryptionPath)) {\n            await generateKeyPair('ECDH-ES', {\n                crv: 'P-256',\n                extractable: true,\n            }).then(async (secret) => {\n                writeFileSync(\n                    this.privateEnncryptionPath,\n                    JSON.stringify(await exportJWK(secret.privateKey), null, 2),\n                );\n                writeFileSync(\n                    this.publicEncryptionPath,\n                    JSON.stringify(await exportJWK(secret.publicKey), null, 2),\n                );\n            });\n        }\n\n        await importJWK(\n            JSON.parse(readFileSync(this.privateEnncryptionPath, 'utf-8')),\n            'ECDH-ES',\n        ).then((key) => {\n            this.privateEncryptionKey = key as CryptoKey;\n        });\n        this.publicEncryptionKey = JSON.parse(\n            readFileSync(this.publicEncryptionPath, 'utf-8'),\n        ) as JWK;\n    }\n\n    async decryptJwe(response: string): Promise {\n        const res = await jwtDecrypt(response, this.privateEncryptionKey);\n        return res.payload;\n    }\n\n    getEncryptionPublicKey() {\n        return this.publicEncryptionKey;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FileSystemKeyService.html":{"url":"injectables/FileSystemKeyService.html","title":"injectable - FileSystemKeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FileSystemKeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/filesystem-key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The key service is responsible for managing the keys of the issuer.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                crypto\n                            \n                            \n                                    Private\n                                privateKeyPath\n                            \n                            \n                                    Private\n                                publicKeyPath\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                getKeys\n                            \n                            \n                                getKid\n                            \n                            \n                                getPublicKey\n                            \n                            \n                                getPublicKey\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                    Async\n                                init\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                signer\n                            \n                            \n                                    Async\n                                signJWT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/filesystem-key.service.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        getKeys\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKeys(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Get the keys from the file system or generate them if they do not exist\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getKid\n                        \n                    \n                \n            \n            \n                \ngetKid(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Get the key id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \ngetPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:131\n                        \n                    \n\n\n            \n                \n                        Get the public key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \ngetPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"pem\" | \"jwk\", tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:133\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"pem\" | \"jwk\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenant: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenant\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signer\n                        \n                    \n                \n            \n            \n                \n                        \n                    signer(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Get the signer for the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JWTPayload, header: JWTHeaderParameters, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/filesystem-key.service.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWTHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        crypto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CryptoImplementation\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/filesystem-key.service.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        privateKeyPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'private-key.pem'\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/filesystem-key.service.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        publicKeyPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'public-key.pem'\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/filesystem-key.service.ts:32\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { existsSync, mkdirSync, writeFileSync, readFileSync } from 'node:fs';\nimport {\n    JWK,\n    JWTHeaderParameters,\n    JWTPayload,\n    CryptoKey,\n    SignJWT,\n    importJWK,\n    exportPKCS8,\n    exportSPKI,\n    importPKCS8,\n    importSPKI,\n    exportJWK,\n} from 'jose';\nimport { v4 } from 'uuid';\nimport { KeyService } from './key.service';\nimport { Injectable } from '@nestjs/common';\nimport { Signer } from '@sd-jwt/types';\nimport { ConfigService } from '@nestjs/config';\nimport { CryptoImplementation } from './crypto/crypto-implementation';\nimport { CryptoService } from './crypto/crypto.service';\nimport { join } from 'node:path';\n\n/**\n * The key service is responsible for managing the keys of the issuer.\n */\n@Injectable()\nexport class FileSystemKeyService implements KeyService {\n    private crypto: CryptoImplementation;\n\n    private privateKeyPath = 'private-key.pem';\n    private publicKeyPath = 'public-key.pem';\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n    ) {\n        this.crypto = this.cryptoService.getCrypto();\n    }\n\n    async onModuleInit(): Promise {}\n    async init(tenant: string) {\n        // Initialize the key service for a specific tenant\n        // This will create the keys if they do not exist\n        await this.getKeys(tenant);\n    }\n\n    /**\n     * Get the signer for the key service\n     */\n    async signer(tenantId: string): Promise {\n        const keys = await this.getKeys(tenantId);\n        return this.crypto.getSigner(keys.privateKey);\n    }\n\n    /**\n     * Get the keys from the file system or generate them if they do not exist\n     * @returns\n     */\n    private async getKeys(tenantId: string) {\n        let privateKey: JWK;\n        let publicKey: JWK;\n        const folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'keys',\n        );\n        if (!existsSync(folder)) {\n            mkdirSync(folder, { recursive: true });\n        }\n        if (\n            !existsSync(join(folder, this.privateKeyPath)) &&\n            !existsSync(join(folder, this.publicKeyPath))\n        ) {\n            const keys = await this.crypto.generateKeyPair();\n            privateKey = keys.privateKey as JWK;\n            publicKey = keys.publicKey as JWK;\n            //add a random key id for reference\n            publicKey.kid = v4();\n            privateKey.kid = publicKey.kid;\n            privateKey.alg = this.crypto.alg;\n            publicKey.alg = this.crypto.alg;\n            writeFileSync(\n                join(folder, this.privateKeyPath),\n                await exportPKCS8((await importJWK(privateKey)) as CryptoKey),\n            );\n            writeFileSync(\n                join(folder, this.publicKeyPath),\n                await exportSPKI((await importJWK(publicKey)) as CryptoKey),\n            );\n            return { privateKey, publicKey };\n        }\n\n        privateKey = await exportJWK(\n            await importPKCS8(\n                readFileSync(join(folder, this.privateKeyPath), 'utf-8'),\n                this.crypto.alg,\n                {\n                    extractable: true,\n                },\n            ),\n        );\n        //should be stored the cert\n        privateKey.alg = this.crypto.alg;\n        publicKey = await exportJWK(\n            await importSPKI(\n                readFileSync(join(folder, this.publicKeyPath), 'utf-8'),\n                this.crypto.alg,\n            ),\n        );\n        return { privateKey, publicKey };\n    }\n\n    /**\n     * Get the key id\n     * @returns\n     */\n    getKid(tenantId: string): Promise {\n        return this.getKeys(tenantId).then((keys) => {\n            if (keys.publicKey.kid) {\n                return keys.publicKey.kid;\n            }\n            throw new Error('Key id not found');\n        });\n    }\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    getPublicKey(type: 'jwk', tenantId: string): Promise;\n    getPublicKey(type: 'pem', tenantId: string): Promise;\n    async getPublicKey(\n        type: 'pem' | 'jwk',\n        tenantId: string,\n    ): Promise {\n        const keys = await this.getKeys(tenantId);\n        if (type === 'pem') {\n            return exportSPKI(\n                (await importJWK(\n                    keys.publicKey,\n                    this.cryptoService.getAlg(),\n                )) as CryptoKey,\n            );\n        } else {\n            return Promise.resolve(keys.publicKey);\n        }\n    }\n\n    async signJWT(\n        payload: JWTPayload,\n        header: JWTHeaderParameters,\n        tenantId: string,\n    ): Promise {\n        const keys = await this.getKeys(tenantId);\n        const privateKeyInstance = (await importJWK(\n            keys.privateKey,\n        )) as CryptoKey;\n        return new SignJWT(payload)\n            .setProtectedHeader(header)\n            .sign(privateKeyInstance);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GenerateTokenOptions.html":{"url":"interfaces/GenerateTokenOptions.html","title":"interface - GenerateTokenOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GenerateTokenOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            audience\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expiresIn\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            subject\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresIn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresIn:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { SignJWT, jwtVerify, decodeJwt } from 'jose';\nimport { TokenPayload } from './token.decorator';\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject?: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {}\n\n    /**\n     * Generate a JWT token for integrated OAuth2 server\n     */\n    async generateToken(\n        payload: TokenPayload,\n        options: GenerateTokenOptions = {},\n    ): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                'Token generation is not available when using external OIDC provider. Use your external OIDC provider for token generation.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow('JWT_EXPIRES_IN');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: 'HS256' })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject || payload.sub)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                'Token verification is handled by external OIDC provider.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: ['HS256'],\n            });\n\n            return payload as TokenPayload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Decode token without verification (for debugging)\n     */\n    decodeToken(token: string): TokenPayload | null {\n        try {\n            return decodeJwt(token) as TokenPayload;\n        } catch {\n            return null;\n        }\n    }\n\n    /**\n     * Check if the service is using external OIDC provider\n     */\n    isUsingExternalOIDC(): boolean {\n        return this.configService.get('OIDC') !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n            \n                Description\n            \n            \n                HealthController is responsible for providing health check endpoints.\nIt uses the HealthCheckService to perform checks on the database connection.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        check\n                        \n                    \n                \n            \n            \n                \n                        \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Endpoint to check the health of the service.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport {\n    HealthCheck,\n    HealthCheckService,\n    TypeOrmHealthIndicator,\n} from '@nestjs/terminus';\n\n/**\n * HealthController is responsible for providing health check endpoints.\n * It uses the HealthCheckService to perform checks on the database connection.\n */\n@Controller('health')\nexport class HealthController {\n    constructor(\n        private health: HealthCheckService,\n        private db: TypeOrmHealthIndicator,\n    ) {}\n\n    /**\n     * Endpoint to check the health of the service.\n     * @returns\n     */\n    @Get()\n    @HealthCheck()\n    check() {\n        return this.health.check([() => this.db.pingCheck('database')]);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HealthController } from './health.controller';\nimport { TerminusModule } from '@nestjs/terminus';\n\n@Module({\n    imports: [TerminusModule],\n    controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/IssuanceConfig.html":{"url":"entities/IssuanceConfig.html","title":"entity - IssuanceConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  IssuanceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/entities/issuance-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity to manage issuance configs\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                authenticationConfig\n                            \n                            \n                                    \n                                    Optional\n                                createdAt\n                            \n                            \n                                    \n                                credentialConfigs\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                notifyWebhook\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        authenticationConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthenticationConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:44\n                        \n                    \n\n            \n                \n                    Authentication configuration for the issuance process.\nThis determines which OpenID4VC flow to use:\n\n'none': Pre-authorized code flow (no user authentication required)\n'auth': OID4VCI authorized code flow (user will be redirected for authentication)\n'presentationDuringIssuance': OID4VP request is sent (credential presentation required)\n\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:50\n                        \n                    \n\n            \n                \n                    The timestamp when the issuance configuration was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialConfig[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, credentialConfig => credentialConfig.issuanceConfig)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:33\n                        \n                    \n\n            \n                \n                    Links to all credential configs that are included in this issuance config.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:17\n                        \n                    \n\n            \n                \n                    Unique identifier for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notifyWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:56\n                        \n                    \n\n            \n                \n                    Webhook to send the result of the notification response\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:24\n                        \n                    \n\n            \n                \n                    Tenant ID for the issuance configuration.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { IsObject } from 'class-validator';\nimport { Column, Entity, ManyToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { ApiHideProperty } from '@nestjs/swagger';\nimport { CredentialConfig } from '../../credentials/entities/credential.entity';\nimport type { AuthenticationConfig } from '../dto/authentication-config.dto';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\n\n/**\n * Entity to manage issuance configs\n */\n@Entity()\nexport class IssuanceConfig {\n    /**\n     * Unique identifier for the issuance configuration.\n     */\n    @PrimaryGeneratedColumn('uuid')\n    id: string;\n\n    /**\n     * Tenant ID for the issuance configuration.\n     */\n    @ApiHideProperty()\n    @Column('varchar')\n    tenantId: string;\n\n    /**\n     * Links to all credential configs that are included in this issuance config.\n     */\n    @ManyToMany(\n        () => CredentialConfig,\n        (credentialConfig) => credentialConfig.issuanceConfig,\n    )\n    credentialConfigs: CredentialConfig[];\n\n    /**\n     * Authentication configuration for the issuance process.\n     * This determines which OpenID4VC flow to use:\n     * - 'none': Pre-authorized code flow (no user authentication required)\n     * - 'auth': OID4VCI authorized code flow (user will be redirected for authentication)\n     * - 'presentationDuringIssuance': OID4VP request is sent (credential presentation required)\n     */\n    @IsObject()\n    @Column('json')\n    authenticationConfig: AuthenticationConfig;\n\n    /**\n     * The timestamp when the issuance configuration was created.\n     */\n    @Column({ type: 'date', default: () => 'CURRENT_TIMESTAMP' })\n    createdAt?: Date;\n\n    /**\n     * Webhook to send the result of the notification response\n     */\n    @Column('json', { nullable: true })\n    notifyWebhook: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssuanceController.html":{"url":"controllers/IssuanceController.html","title":"controller - IssuanceController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssuanceController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/issuance.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management/issuance\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    \n                                getIssuanceConfigurations\n                            \n                            \n                                    \n                                storeIssuanceConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteIssuanceConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:54\n                        \n                    \n\n\n            \n                \n                        Deletes an issuance configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getIssuanceConfigurations\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuanceConfigurations(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:28\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storeIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeIssuanceConfiguration(config: IssuanceDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:38\n                        \n                    \n\n\n            \n                \n                        Stores the issuance configuration for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            IssuanceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    UseGuards,\n    Body,\n} from '@nestjs/common';\nimport { Token, TokenPayload } from '../../auth/token.decorator';\nimport { ApiTags, ApiSecurity } from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../../auth/auth.guard';\nimport { IssuanceService } from './issuance.service';\nimport { IssuanceDto } from './dto/issuance.dto';\n\n@ApiTags('Issuer management')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2')\n@Controller('issuer-management/issuance')\nexport class IssuanceController {\n    constructor(private readonly issuanceService: IssuanceService) {}\n\n    /**\n     * Returns the issuance configurations for this tenant.\n     * @returns\n     */\n    @Get()\n    getIssuanceConfigurations(@Token() user: TokenPayload) {\n        return this.issuanceService.getIssuanceConfiguration(user.sub);\n    }\n\n    /**\n     * Stores the issuance configuration for this tenant.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storeIssuanceConfiguration(\n        @Body() config: IssuanceDto,\n        @Token() user: TokenPayload,\n    ) {\n        return this.issuanceService.storeIssuanceConfiguration(\n            user.sub,\n            config,\n        );\n    }\n\n    /**\n     * Deletes an issuance configuration.\n     * @param id\n     * @returns\n     */\n    @Delete(':id')\n    deleteIssuanceConfiguration(\n        @Param('id') id: string,\n        @Token() user: TokenPayload,\n    ) {\n        return this.issuanceService.deleteIssuanceConfiguration(user.sub, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IssuanceDto.html":{"url":"classes/IssuanceDto.html","title":"class - IssuanceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IssuanceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/issuance.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for Issuance Configuration.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authenticationConfig\n                            \n                            \n                                    \n                                    \n                                credentialConfigs\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                notifyWebhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authenticationConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthenticationConfigDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:36\n                        \n                    \n\n            \n                \n                    Authentication configuration for the issuance process.\nThis includes details like the authentication method and any required parameters.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credentialConfigs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({each: true})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:27\n                        \n                    \n\n            \n                \n                    Ids of the credential configurations associated with this issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:20\n                        \n                    \n\n            \n                \n                    Unique identifier for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        notifyWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:45\n                        \n                    \n\n            \n                \n                    Optional webhook configuration to send the results of the notification response.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsArray,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { AuthenticationConfigDto } from './authentication-config.dto';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\n\n/**\n * DTO for Issuance Configuration.\n */\nexport class IssuanceDto {\n    /**\n     * Unique identifier for the issuance configuration.\n     */\n    @IsString()\n    id: string;\n\n    /**\n     * Ids of the credential configurations associated with this issuance configuration.\n     */\n    @IsString({ each: true })\n    @IsArray()\n    credentialConfigs: string[];\n\n    /**\n     * Authentication configuration for the issuance process.\n     * This includes details like the authentication method and any required parameters.\n     */\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationConfigDto)\n    authenticationConfig: AuthenticationConfigDto;\n\n    /**\n     * Optional webhook configuration to send the results of the notification response.\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    notifyWebhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IssuanceService.html":{"url":"injectables/IssuanceService.html","title":"injectable - IssuanceService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IssuanceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/issuance.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing issuance configurations.\nIt provides methods to get, store, and delete issuance configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    Public\n                                    Async\n                                getIssuanceConfiguration\n                            \n                            \n                                    Async\n                                getIssuanceConfigurationById\n                            \n                            \n                                    Async\n                                storeIssuanceConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(issuanceConfigRepo: Repository, credentialsConfigService: CredentialConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/issuance/issuance.service.ts:15\n                            \n                        \n\n                \n                    \n                            Constructor for IssuanceService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        issuanceConfigRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialsConfigService\n                                                  \n                                                        \n                                                                        CredentialConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \ndeleteIssuanceConfiguration(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:128\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuanceConfiguration(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:32\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getIssuanceConfigurationById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuanceConfigurationById(issuanceConfigId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:53\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configuration by ID for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuanceConfigId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        storeIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeIssuanceConfiguration(tenantId: string, value: IssuanceDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:69\n                        \n                    \n\n\n            \n                \n                        Store the config. If it already exist, overwrite it.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            IssuanceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { IssuanceConfig } from './entities/issuance-config.entity';\nimport { CredentialConfigService } from '../credentials/credential-config/credential-config.service';\nimport { IssuanceDto } from './dto/issuance.dto';\nimport { CredentialConfig } from '../credentials/entities/credential.entity';\nimport { AuthenticationConfig } from './dto/authentication-config.dto';\n\n/**\n * Service for managing issuance configurations.\n * It provides methods to get, store, and delete issuance configurations.\n */\n@Injectable()\nexport class IssuanceService {\n    /**\n     * Constructor for IssuanceService.\n     * @param issuanceConfigRepo\n     * @param credentialsConfigService\n     */\n    constructor(\n        @InjectRepository(IssuanceConfig)\n        private issuanceConfigRepo: Repository,\n        private credentialsConfigService: CredentialConfigService,\n    ) {}\n\n    /**\n     * Returns the issuance configurations for this tenant.\n     * @param tenantId\n     * @returns\n     */\n    public async getIssuanceConfiguration(tenantId: string) {\n        return this.issuanceConfigRepo.find({\n            where: { tenantId },\n            relations: ['credentialConfigs'],\n            select: {\n                id: true,\n                tenantId: true,\n                // Add other fields you want from IssuanceConfig\n                credentialConfigs: {\n                    id: true, // Only select the id from credentialConfigs\n                },\n            },\n        });\n    }\n\n    /**\n     * Returns the issuance configuration by ID for a given tenant.\n     * @param issuanceConfigId\n     * @param tenantId\n     * @returns\n     */\n    async getIssuanceConfigurationById(\n        issuanceConfigId: string,\n        tenantId: string,\n    ): Promise {\n        return this.issuanceConfigRepo.findOneOrFail({\n            where: { id: issuanceConfigId, tenantId },\n            relations: ['credentialConfigs'],\n        });\n    }\n\n    /**\n     * Store the config. If it already exist, overwrite it.\n     * @param tenantId\n     * @param value\n     * @returns\n     */\n    async storeIssuanceConfiguration(tenantId: string, value: IssuanceDto) {\n        const credentials: CredentialConfig[] = [];\n        for (const credentialConfigId of value.credentialConfigs) {\n            const credential = await this.credentialsConfigService.getById(\n                tenantId,\n                credentialConfigId,\n            );\n            if (credential) {\n                credentials.push(credential);\n            }\n        }\n\n        // Convert AuthenticationConfigDto to AuthenticationConfig union type\n        let authenticationConfig: AuthenticationConfig;\n        if (value.authenticationConfig.method === 'none') {\n            authenticationConfig = { method: 'none' };\n        } else if (value.authenticationConfig.method === 'auth') {\n            if (!value.authenticationConfig.config) {\n                throw new Error(\n                    'AuthenticationConfig is required for auth method',\n                );\n            }\n            authenticationConfig = {\n                method: 'auth',\n                config: value.authenticationConfig.config as any,\n            };\n        } else if (\n            value.authenticationConfig.method === 'presentationDuringIssuance'\n        ) {\n            if (!value.authenticationConfig.config) {\n                throw new Error(\n                    'AuthenticationConfig is required for presentationDuringIssuance method',\n                );\n            }\n            authenticationConfig = {\n                method: 'presentationDuringIssuance',\n                config: value.authenticationConfig.config as any,\n            };\n        } else {\n            throw new Error(\n                `Invalid authentication method: ${(value.authenticationConfig as any).method}`,\n            );\n        }\n\n        const issuanceConfig = this.issuanceConfigRepo.create({\n            ...value,\n            tenantId,\n            credentialConfigs: credentials,\n            authenticationConfig,\n        });\n        return this.issuanceConfigRepo.save(issuanceConfig);\n    }\n\n    /**\n     * Deletes a credential configuration.\n     * @param tenantId\n     * @param id\n     * @returns\n     */\n    deleteIssuanceConfiguration(tenantId: string, id: string) {\n        return this.issuanceConfigRepo.delete({ tenantId, id });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssuerManagementController.html":{"url":"controllers/IssuerManagementController.html","title":"controller - IssuerManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssuerManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuer-management/issuer-management.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(res: Response, body: OfferRequestDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@ApiBody({type: OfferRequestDto, examples: undefined})@Post('offer')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuer-management/issuer-management.controller.ts:63\n                        \n                    \n\n\n            \n                \n                        Create an offer for a credential. This endpoint may be protected\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            OfferRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Res, UseGuards } from '@nestjs/common';\nimport {\n    ApiBody,\n    ApiProduces,\n    ApiResponse,\n    ApiSecurity,\n    ApiTags,\n} from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../../auth/auth.guard';\nimport { Token, TokenPayload } from '../../auth/token.decorator';\nimport { Oid4vciService } from '../../issuer/oid4vci/oid4vci.service';\nimport {\n    OfferResponse,\n    OfferRequestDto,\n} from '../oid4vci/dto/offer-request.dto';\nimport { ResponseType } from '../../verifier/oid4vp/dto/presentation-request.dto';\nimport * as QRCode from 'qrcode';\nimport { Response } from 'express';\n\n@ApiTags('Issuer management')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2')\n@Controller('issuer-management')\nexport class IssuerManagementController {\n    constructor(private readonly oid4vciService: Oid4vciService) {}\n\n    /**\n     * Create an offer for a credential. This endpoint may be protected\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: 'JSON response',\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            'application/json': { schema: { type: 'object' } },\n            'image/png': { schema: { type: 'string', format: 'binary' } },\n        },\n    })\n    @ApiProduces('application/json', 'image/png')\n    @ApiBody({\n        type: OfferRequestDto,\n        examples: {\n            qrcode: {\n                summary: 'QR-Code Example',\n                value: {\n                    response_type: ResponseType.QRCode,\n                    issuanceId: 'pid',\n                } as OfferRequestDto,\n            },\n            uri: {\n                summary: 'URI',\n                value: {\n                    response_type: ResponseType.URI,\n                    issuanceId: 'pid',\n                } as OfferRequestDto,\n            },\n        },\n    })\n    @Post('offer')\n    async getOffer(\n        @Res() res: Response,\n        @Body() body: OfferRequestDto,\n        @Token() user: TokenPayload,\n    ) {\n        // For now, we'll just pass the body to the service as before\n        // You can modify the service later to accept user information if needed\n        const values = await this.oid4vciService.createOffer(\n            body,\n            user,\n            user.sub,\n        );\n\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader('Content-Type', 'image/png');\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IssuerMetadata.html":{"url":"interfaces/IssuerMetadata.html","title":"interface - IssuerMetadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IssuerMetadata\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/dto/issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the issuer metadata.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            issuer\n                                        \n                                \n                                \n                                        \n                                            jwks\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        issuer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        issuer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The issuer identifier, typically a URL.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwks\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwks:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { JWK } from 'jose';\n\n/**\n * Interface representing the issuer metadata.\n */\nexport interface IssuerMetadata {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    issuer: string;\n    /**\n     * The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n     */\n    jwks: {\n        /**\n         * List of keys in the JWKS.\n         */\n        keys: JWK[];\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IssuerModule.html":{"url":"modules/IssuerModule.html","title":"module - IssuerModule","body":"\n                   \n\n\n\n\n    Modules\n    IssuerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_exports\n\n\n\ncluster_IssuerModule_imports\n\n\n\ncluster_IssuerModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialConfigService\n\nCredentialConfigService\n\nIssuerModule -->\n\nCredentialConfigService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nIssuanceService\n\nIssuanceService\n\nIssuerModule -->\n\nIssuanceService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nIssuerModule -->\n\nSessionLoggerInterceptor->IssuerModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nIssuerModule -->\n\nSessionLoggerService->IssuerModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nIssuerModule -->\n\nWebhookService->IssuerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/issuer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            CredentialConfigService\n                        \n                        \n                            CredentialsService\n                        \n                        \n                            IssuanceService\n                        \n                        \n                            Oid4vciService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                        \n                            WebhookService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vciController\n                        \n                        \n                            AuthorizeController\n                        \n                        \n                            CredentialsController\n                        \n                        \n                            IssuerManagementController\n                        \n                        \n                            IssuanceController\n                        \n                        \n                            CredentialsMetadataController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            Oid4vciService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthorizeService } from './authorize/authorize.service';\nimport { CredentialsService } from './credentials/credentials.service';\nimport { Oid4vciService } from './oid4vci/oid4vci.service';\nimport { Oid4vciController } from './oid4vci/oid4vci.controller';\nimport { AuthorizeController } from './authorize/authorize.controller';\nimport { CryptoModule } from '../crypto/crypto.module';\nimport { StatusListModule } from './status-list/status-list.module';\nimport { CredentialsController } from './credentials/credentials.controller';\nimport * as Joi from 'joi';\nimport { SessionModule } from '../session/session.module';\nimport { IssuerManagementController } from './issuer-management/issuer-management.controller';\nimport { Oid4vpModule } from '../verifier/oid4vp/oid4vp.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { IssuanceConfig } from './issuance/entities/issuance-config.entity';\nimport { SessionLoggerService } from '../utils/logger/session-logger.service';\nimport { SessionLoggerInterceptor } from '../utils/logger/session-logger.interceptor';\nimport { CredentialConfig } from './credentials/entities/credential.entity';\nimport { IssuanceController } from './issuance/issuance.controller';\nimport { CredentialsMetadataController } from './credentials-metadata/credentials-metadata.controller';\nimport { IssuanceService } from './issuance/issuance.service';\nimport { CredentialConfigService } from './credentials/credential-config/credential-config.service';\nimport { setGlobalConfig } from '@openid4vc/openid4vci';\nimport { ConfigService } from '@nestjs/config';\nimport { WebhookService } from '../utils/webhook/webhook.service';\nimport { HttpModule } from '@nestjs/axios';\n\nexport const ISSUER_VALIDATION_SCHEMA = {\n    PUBLIC_URL: Joi.string(),\n};\n\n@Module({\n    imports: [\n        CryptoModule,\n        StatusListModule,\n        Oid4vpModule,\n        SessionModule,\n        HttpModule,\n        TypeOrmModule.forFeature([IssuanceConfig, CredentialConfig]),\n    ],\n    controllers: [\n        Oid4vciController,\n        AuthorizeController,\n        CredentialsController,\n        IssuerManagementController,\n        IssuanceController,\n        CredentialsMetadataController,\n    ],\n    providers: [\n        AuthorizeService,\n        CredentialsService,\n        Oid4vciService,\n        SessionLoggerService,\n        SessionLoggerInterceptor,\n        IssuanceService,\n        CredentialConfigService,\n        WebhookService,\n    ],\n    exports: [AuthorizeService, Oid4vciService],\n})\nexport class IssuerModule {\n    constructor(configService: ConfigService) {\n        const unsecure = configService\n            .getOrThrow('PUBLIC_URL')\n            .startsWith('http://');\n        setGlobalConfig({ allowInsecureUrls: unsecure });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwksResponseDto.html":{"url":"classes/JwksResponseDto.html","title":"class - JwksResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwksResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                keys\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    An array of EC public keys in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from 'jose';\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: 'EC';\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.guard.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n    constructor(private reflector: Reflector) {\n        super();\n    }\n\n    canActivate(context: ExecutionContext) {\n        const isPublic = this.reflector.getAllAndOverride(\n            IS_PUBLIC_KEY,\n            [context.getHandler(), context.getClass()],\n        );\n        if (isPublic) {\n            return true;\n        }\n        return super.canActivate(context);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtService.html":{"url":"injectables/JwtService.html","title":"injectable - JwtService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                decodeToken\n                            \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                isUsingExternalOIDC\n                            \n                            \n                                    Async\n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        decodeToken\n                        \n                    \n                \n            \n            \n                \ndecodeToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:83\n                        \n                    \n\n\n            \n                \n                        Decode token without verification (for debugging)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         TokenPayload | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(payload: TokenPayload, options: GenerateTokenOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:19\n                        \n                    \n\n\n            \n                \n                        Generate a JWT token for integrated OAuth2 server\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                options\n                                            \n                                                            GenerateTokenOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isUsingExternalOIDC\n                        \n                    \n                \n            \n            \n                \nisUsingExternalOIDC()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Check if the service is using external OIDC provider\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Verify a JWT token (for additional validation if needed)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { SignJWT, jwtVerify, decodeJwt } from 'jose';\nimport { TokenPayload } from './token.decorator';\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject?: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {}\n\n    /**\n     * Generate a JWT token for integrated OAuth2 server\n     */\n    async generateToken(\n        payload: TokenPayload,\n        options: GenerateTokenOptions = {},\n    ): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                'Token generation is not available when using external OIDC provider. Use your external OIDC provider for token generation.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow('JWT_EXPIRES_IN');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: 'HS256' })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject || payload.sub)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                'Token verification is handled by external OIDC provider.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: ['HS256'],\n            });\n\n            return payload as TokenPayload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Decode token without verification (for debugging)\n     */\n    decodeToken(token: string): TokenPayload | null {\n        try {\n            return decodeJwt(token) as TokenPayload;\n        } catch {\n            return null;\n        }\n    }\n\n    /**\n     * Check if the service is using external OIDC provider\n     */\n    isUsingExternalOIDC(): boolean {\n        return this.configService.get('OIDC') !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                getExternalOIDCConfig\n                            \n                            \n                                    Private\n                                    Static\n                                getIntegratedOAuth2Config\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getExternalOIDCConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getExternalOIDCConfig(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { secretOrKeyProvider: any; jwtFromRequest: any; algorithms: {}; issuer: any; audience: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getIntegratedOAuth2Config\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIntegratedOAuth2Config(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: TokenPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { passportJwtSecret } from 'jwks-rsa';\nimport { ConfigService } from '@nestjs/config';\nimport { TokenPayload } from './token.decorator';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n    constructor(private configService: ConfigService) {\n        const useExternalOIDC = configService.get('OIDC');\n\n        super(\n            useExternalOIDC\n                ? JwtStrategy.getExternalOIDCConfig(configService)\n                : JwtStrategy.getIntegratedOAuth2Config(configService),\n        );\n    }\n\n    private static getExternalOIDCConfig(configService: ConfigService) {\n        //TODO: test it\n        return {\n            secretOrKeyProvider: passportJwtSecret({\n                cache: true,\n                rateLimit: true,\n                jwksRequestsPerMinute: 5,\n                jwksUri: `${configService.get('KEYCLOAK_INTERNAL_ISSUER_URL')}/protocol/openid-connect/certs`,\n                handleSigningKeyError: (err, cb) => {\n                    console.log('Keycloak JWKS error:', err);\n                    if (err instanceof Error) {\n                        return cb(err);\n                    }\n                    return cb(\n                        new Error(\n                            'Could not get the signing key from Keycloak',\n                        ),\n                    );\n                },\n            }),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: ['RS256'],\n            issuer: configService.get('KEYCLOAK_INTERNAL_ISSUER_URL'),\n            audience: configService.get('KEYCLOAK_CLIENT_ID'), // You may want to add this to validation schema\n        };\n    }\n\n    private static getIntegratedOAuth2Config(\n        configService: ConfigService,\n    ): any {\n        const config = {\n            secretOrKey: configService.get('JWT_SECRET'),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: ['HS256'], // Using symmetric key for integrated OAuth2\n            ignoreExpiration: false, // Ensure tokens expire\n        };\n\n        // Add issuer validation only if JWT_ISSUER is configured\n        const issuer = configService.get('JWT_ISSUER');\n        if (issuer) {\n            (config as any).issuer = issuer;\n        }\n\n        return config;\n    }\n\n    validate(payload: TokenPayload): unknown {\n        const useExternalOIDC =\n            this.configService.get('OIDC') !== undefined;\n\n        if (useExternalOIDC) {\n            // External OIDC: Extract user info from external provider token\n            return payload;\n        } else {\n            // Integrated OAuth2: Use integrated server token validation\n            return payload;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/KeyEntity.html":{"url":"entities/KeyEntity.html","title":"entity - KeyEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  KeyEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/entities/key.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                privateKey\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        privateKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JsonWebKey\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/key.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/key.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\n\n@Entity()\nexport class KeyEntity {\n    @Column('varchar', { primary: true })\n    tenantId: string;\n    @Column('json')\n    privateKey: JsonWebKey;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KeyModule.html":{"url":"modules/KeyModule.html","title":"module - KeyModule","body":"\n                   \n\n\n\n\n    Modules\n    KeyModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/key/key.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.module.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DynamicModule, Global, Module } from '@nestjs/common';\nimport { FileSystemKeyService } from './filesystem-key.service';\nimport { VaultKeyService } from './vault-key.service';\nimport { CryptoModule } from './crypto/crypto.module';\nimport { CryptoService } from './crypto/crypto.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { HttpModule, HttpService } from '@nestjs/axios';\nimport * as Joi from 'joi';\nimport { TypeOrmModule } from '@nestjs/typeorm/dist/typeorm.module';\nimport { KeyEntity } from './entities/key.entity';\n\nexport const KEY_VALIDATION_SCHEMA = {\n    KM_TYPE: Joi.string().valid('file', 'vault').default('file'),\n\n    // Vault-related config\n    VAULT_URL: Joi.string().uri().when('KM_TYPE', {\n        is: 'vault',\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n    VAULT_TOKEN: Joi.string().when('KM_TYPE', {\n        is: 'vault',\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n    VAULT_KEY_ID: Joi.string().when('KM_TYPE', {\n        is: 'vault',\n        then: Joi.string().default('key-id'),\n        otherwise: Joi.optional(),\n    }),\n};\n\n@Global()\n@Module({})\nexport class KeyModule {\n    static forRoot(): DynamicModule {\n        return {\n            module: KeyModule,\n            imports: [\n                HttpModule,\n                ConfigModule,\n                CryptoModule,\n                TypeOrmModule.forFeature([KeyEntity]),\n            ],\n            providers: [\n                {\n                    provide: 'KeyService',\n                    useFactory: (\n                        configService: ConfigService,\n                        httpService: HttpService,\n                        cryptoService: CryptoService,\n                    ) => {\n                        const kmType = configService.get(\n                            'KM_TYPE',\n                        );\n                        if (kmType === 'vault') {\n                            return new VaultKeyService(\n                                httpService,\n                                configService,\n                                cryptoService,\n                            );\n                        }\n\n                        return new FileSystemKeyService(\n                            configService,\n                            cryptoService,\n                        );\n                    },\n                    inject: [ConfigService, HttpService, CryptoService],\n                },\n            ],\n            exports: ['KeyService'],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyService.html":{"url":"classes/KeyService.html","title":"class - KeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface for a key service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                getKid\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                init\n                            \n                            \n                                    Abstract\n                                signer\n                            \n                            \n                                    Abstract\n                                signJWT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getKid\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKid(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:23\n                        \n                    \n\n\n            \n                \n                        Get the key id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Get the public key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"pem\" | \"jwk\", tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"pem\" | \"jwk\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:11\n                        \n                    \n\n\n            \n                \n                        Initialize the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signer\n                        \n                    \n                \n            \n            \n                \n                        \n                    signer(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:17\n                        \n                    \n\n\n            \n                \n                        Get the callback for the signer function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JWTPayload, header: JoseHeaderParameters, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JoseHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Signer } from '@sd-jwt/types';\nimport { JWK, JWTPayload, JoseHeaderParameters } from 'jose';\n\n/**\n * Generic interface for a key service\n */\nexport abstract class KeyService {\n    /**\n     * Initialize the key service\n     */\n    abstract init(tenantId): Promise;\n\n    /**\n     * Get the callback for the signer function\n     * @param tenantId\n     */\n    abstract signer(tenantId: string): Promise;\n\n    /**\n     * Get the key id\n     * @returns\n     */\n    abstract getKid(tenantId: string): Promise;\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    abstract getPublicKey(type: 'jwk', tenantId: string): Promise;\n    abstract getPublicKey(type: 'pem', tenantId: string): Promise;\n    abstract getPublicKey(\n        type: 'pem' | 'jwk',\n        tenantId: string,\n    ): Promise;\n\n    //TODO: this can be handled via the signer callback\n    abstract signJWT(\n        payload: JWTPayload,\n        header: JoseHeaderParameters,\n        tenantId: string,\n    ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerConfigService.html":{"url":"injectables/LoggerConfigService.html","title":"injectable - LoggerConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/logger-config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing logger configuration\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getConfiguration\n                            \n                            \n                                getLogFormat\n                            \n                            \n                                getLogLevel\n                            \n                            \n                                isDebugModeEnabled\n                            \n                            \n                                isHttpLoggerEnabled\n                            \n                            \n                                isSessionLoggerEnabled\n                            \n                            \n                                    Private\n                                loadConfiguration\n                            \n                            \n                                    Private\n                                parseLogLevel\n                            \n                            \n                                reloadConfiguration\n                            \n                            \n                                shouldEnableAutoLogging\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/logger-config.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getConfiguration\n                        \n                    \n                \n            \n            \n                \ngetConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         LoggerConfiguration\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLogFormat\n                        \n                    \n                \n            \n            \n                \ngetLogFormat()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     \"json\" | \"pretty\"\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLogLevel\n                        \n                    \n                \n            \n            \n                \ngetLogLevel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     LogLevel\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDebugModeEnabled\n                        \n                    \n                \n            \n            \n                \nisDebugModeEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isHttpLoggerEnabled\n                        \n                    \n                \n            \n            \n                \nisHttpLoggerEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSessionLoggerEnabled\n                        \n                    \n                \n            \n            \n                \nisSessionLoggerEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parseLogLevel\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseLogLevel(level: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                level\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     LogLevel\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reloadConfiguration\n                        \n                    \n                \n            \n            \n                \nreloadConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:86\n                        \n                    \n\n\n            \n                \n                        Hot reload configuration from environment\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        shouldEnableAutoLogging\n                        \n                    \n                \n            \n            \n                \nshouldEnableAutoLogging()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Check if automatic HTTP request/response logging should be enabled\nThis is used by the LoggerModule configuration\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LoggerConfiguration\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/logger-config.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, LogLevel } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nexport interface LoggerConfiguration {\n    level: LogLevel;\n    enableSessionLogger: boolean;\n    enableHttpLogger: boolean;\n    enableDebugMode: boolean;\n    logFormat: 'json' | 'pretty';\n}\n\n/**\n * Service for managing logger configuration\n */\n@Injectable()\nexport class LoggerConfigService {\n    private config: LoggerConfiguration;\n\n    constructor(private readonly configService: ConfigService) {\n        this.loadConfiguration();\n    }\n\n    private loadConfiguration(): void {\n        this.config = {\n            level: this.parseLogLevel(\n                this.configService.get('LOG_LEVEL', 'info'),\n            ),\n            enableSessionLogger: this.configService.get(\n                'LOG_ENABLE_SESSION_LOGGER',\n                false,\n            ),\n            enableHttpLogger: this.configService.get(\n                'LOG_ENABLE_HTTP_LOGGER',\n                false,\n            ),\n            enableDebugMode: this.configService.get(\n                'LOG_DEBUG_MODE',\n                false,\n            ),\n            logFormat: this.configService.get(\n                'LOG_FORMAT',\n                'pretty',\n            ),\n        };\n    }\n\n    private parseLogLevel(level: string): LogLevel {\n        const levels: Record = {\n            verbose: 'verbose',\n            debug: 'debug',\n            log: 'log',\n            warn: 'warn',\n            error: 'error',\n            fatal: 'fatal',\n        };\n        return levels[level.toLowerCase()] || 'log';\n    }\n\n    getConfiguration(): LoggerConfiguration {\n        return { ...this.config };\n    }\n\n    isSessionLoggerEnabled(): boolean {\n        return this.config.enableSessionLogger;\n    }\n\n    isHttpLoggerEnabled(): boolean {\n        return this.config.enableHttpLogger;\n    }\n\n    isDebugModeEnabled(): boolean {\n        return this.config.enableDebugMode;\n    }\n\n    getLogLevel(): LogLevel {\n        return this.config.level;\n    }\n\n    getLogFormat(): 'json' | 'pretty' {\n        return this.config.logFormat;\n    }\n\n    /**\n     * Hot reload configuration from environment\n     */\n    reloadConfiguration(): void {\n        this.loadConfiguration();\n    }\n\n    /**\n     * Check if automatic HTTP request/response logging should be enabled\n     * This is used by the LoggerModule configuration\n     */\n    shouldEnableAutoLogging(): boolean {\n        return this.isHttpLoggerEnabled();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoggerConfiguration.html":{"url":"interfaces/LoggerConfiguration.html","title":"interface - LoggerConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoggerConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/logger-config.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            enableDebugMode\n                                        \n                                \n                                \n                                        \n                                            enableHttpLogger\n                                        \n                                \n                                \n                                        \n                                            enableSessionLogger\n                                        \n                                \n                                \n                                        \n                                            level\n                                        \n                                \n                                \n                                        \n                                            logFormat\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enableDebugMode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableDebugMode:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableHttpLogger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableHttpLogger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableSessionLogger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableSessionLogger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:     LogLevel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     LogLevel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logFormat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logFormat:     \"json\" | \"pretty\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"json\" | \"pretty\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, LogLevel } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nexport interface LoggerConfiguration {\n    level: LogLevel;\n    enableSessionLogger: boolean;\n    enableHttpLogger: boolean;\n    enableDebugMode: boolean;\n    logFormat: 'json' | 'pretty';\n}\n\n/**\n * Service for managing logger configuration\n */\n@Injectable()\nexport class LoggerConfigService {\n    private config: LoggerConfiguration;\n\n    constructor(private readonly configService: ConfigService) {\n        this.loadConfiguration();\n    }\n\n    private loadConfiguration(): void {\n        this.config = {\n            level: this.parseLogLevel(\n                this.configService.get('LOG_LEVEL', 'info'),\n            ),\n            enableSessionLogger: this.configService.get(\n                'LOG_ENABLE_SESSION_LOGGER',\n                false,\n            ),\n            enableHttpLogger: this.configService.get(\n                'LOG_ENABLE_HTTP_LOGGER',\n                false,\n            ),\n            enableDebugMode: this.configService.get(\n                'LOG_DEBUG_MODE',\n                false,\n            ),\n            logFormat: this.configService.get(\n                'LOG_FORMAT',\n                'pretty',\n            ),\n        };\n    }\n\n    private parseLogLevel(level: string): LogLevel {\n        const levels: Record = {\n            verbose: 'verbose',\n            debug: 'debug',\n            log: 'log',\n            warn: 'warn',\n            error: 'error',\n            fatal: 'fatal',\n        };\n        return levels[level.toLowerCase()] || 'log';\n    }\n\n    getConfiguration(): LoggerConfiguration {\n        return { ...this.config };\n    }\n\n    isSessionLoggerEnabled(): boolean {\n        return this.config.enableSessionLogger;\n    }\n\n    isHttpLoggerEnabled(): boolean {\n        return this.config.enableHttpLogger;\n    }\n\n    isDebugModeEnabled(): boolean {\n        return this.config.enableDebugMode;\n    }\n\n    getLogLevel(): LogLevel {\n        return this.config.level;\n    }\n\n    getLogFormat(): 'json' | 'pretty' {\n        return this.config.logFormat;\n    }\n\n    /**\n     * Hot reload configuration from environment\n     */\n    reloadConfiguration(): void {\n        this.loadConfiguration();\n    }\n\n    /**\n     * Check if automatic HTTP request/response logging should be enabled\n     * This is used by the LoggerModule configuration\n     */\n    shouldEnableAutoLogging(): boolean {\n        return this.isHttpLoggerEnabled();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotificationRequestDto.html":{"url":"classes/NotificationRequestDto.html","title":"class - NotificationRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotificationRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/notification-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                event\n                            \n                            \n                                    \n                                notification_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationEvent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(['credential_accepted', 'credential_revoked'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notification_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotificationEvent } from '@openid4vc/openid4vci';\nimport { IsEnum, IsString } from 'class-validator';\n\nexport class NotificationRequestDto {\n    @IsString()\n    notification_id: string;\n\n    @IsEnum(['credential_accepted', 'credential_revoked'])\n    event: NotificationEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Oauth2AuthorizationServerResponse.html":{"url":"classes/Oauth2AuthorizationServerResponse.html","title":"class - Oauth2AuthorizationServerResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Oauth2AuthorizationServerResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/oauth-authorization-server-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the response from an OAuth2 authorization server.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_challenge_endpoint\n                            \n                            \n                                authorization_endpoint\n                            \n                            \n                                code_challenge_methods_supported\n                            \n                            \n                                dpop_signing_alg_values_supported\n                            \n                            \n                                issuer\n                            \n                            \n                                jwks_uri\n                            \n                            \n                                pushed_authorization_request_endpoint\n                            \n                            \n                                require_pushed_authorization_requests\n                            \n                            \n                                token_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_challenge_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:37\n                        \n                    \n\n            \n                \n                    The URL of the authorization challenge endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:13\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's authorization endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        code_challenge_methods_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:21\n                        \n                    \n\n            \n                \n                    List of supported algorithms to sign the challenge\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dpop_signing_alg_values_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:25\n                        \n                    \n\n            \n                \n                    List of supported algorithms for DPoP signing.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jwks_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:17\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pushed_authorization_request_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    The URL of the pushed authorization request endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        require_pushed_authorization_requests\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:29\n                        \n                    \n\n            \n                \n                    Indicates whether the server requires pushed authorization requests.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's token endpoint.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Oauth2AuthorizationServerResponse {\n    issuer: string;\n    /**\n     * The URL of the OAuth2 authorization server's token endpoint.\n     */\n    token_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's authorization endpoint.\n     */\n    authorization_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n     */\n    jwks_uri: string;\n    /**\n     * List of supported algorithms to sign the challenge\n     */\n    code_challenge_methods_supported: string[];\n    /**\n     * List of supported algorithms for DPoP signing.\n     */\n    dpop_signing_alg_values_supported: string[];\n    /**\n     * Indicates whether the server requires pushed authorization requests.\n     */\n    require_pushed_authorization_requests: boolean;\n    /**\n     * The URL of the pushed authorization request endpoint.\n     */\n    pushed_authorization_request_endpoint: string;\n    /**\n     * The URL of the authorization challenge endpoint.\n     */\n    authorization_challenge_endpoint: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferRequestDto.html":{"url":"classes/OfferRequestDto.html","title":"class - OfferRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                credentialConfigurationIds\n                            \n                            \n                                    \n                                issuanceId\n                            \n                            \n                                    \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credentialConfigurationIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:33\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        issuanceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:26\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'qrcode', description: 'The type of response expected for the offer request.'})@IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:20\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsArray,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n} from 'class-validator';\nimport { ResponseType } from '../../../verifier/oid4vp/dto/presentation-request.dto';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class OfferRequestDto {\n    /**\n     * @example \"qrcode\"\n     */\n    @ApiProperty({\n        example: 'qrcode',\n        description: 'The type of response expected for the offer request.',\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * @example \"pid\"\n     */\n    @IsString()\n    issuanceId: string;\n\n    /**\n     * @example [\"pid\"]\n     */\n    @IsArray()\n    @IsOptional()\n    credentialConfigurationIds?: string[];\n\n    @IsObject()\n    @IsOptional()\n    values?: { [key: string]: Record };\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferResponse.html":{"url":"classes/OfferResponse.html","title":"class - OfferResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                session\n                            \n                            \n                                uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsArray,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n} from 'class-validator';\nimport { ResponseType } from '../../../verifier/oid4vp/dto/presentation-request.dto';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class OfferRequestDto {\n    /**\n     * @example \"qrcode\"\n     */\n    @ApiProperty({\n        example: 'qrcode',\n        description: 'The type of response expected for the offer request.',\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * @example \"pid\"\n     */\n    @IsString()\n    issuanceId: string;\n\n    /**\n     * @example [\"pid\"]\n     */\n    @IsArray()\n    @IsOptional()\n    credentialConfigurationIds?: string[];\n\n    @IsObject()\n    @IsOptional()\n    values?: { [key: string]: Record };\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vciController.html":{"url":"controllers/Oid4vciController.html","title":"controller - Oid4vciController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Oid4vciController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/oid4vci.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/vci\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                credential\n                            \n                            \n                                    \n                                    \n                                notifications\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credential\n                        \n                    \n                \n            \n            \n                \n                        \n                    credential(req: Request, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('credential')@SessionLogger('state', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:28\n                        \n                    \n\n\n            \n                \n                        Endpoint to issue credentials\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        notifications\n                        \n                    \n                \n            \n            \n                \n                        \n                    notifications(body: NotificationRequestDto, req: Request, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('notification')@SessionLogger('notification_id', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:42\n                        \n                    \n\n\n            \n                \n                        Notification endpoint\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            NotificationRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Param,\n    Post,\n    Req,\n    UseInterceptors,\n} from '@nestjs/common';\nimport type { CredentialResponse } from '@openid4vc/openid4vci';\nimport type { Request } from 'express';\nimport { Oid4vciService } from '../../issuer/oid4vci/oid4vci.service';\nimport { NotificationRequestDto } from './dto/notification-request.dto';\nimport { SessionLogger } from '../../utils/logger//session-logger.decorator';\nimport { SessionLoggerInterceptor } from '../../utils/logger/session-logger.interceptor';\n\n@Controller(':tenantId/vci')\n@UseInterceptors(SessionLoggerInterceptor)\nexport class Oid4vciController {\n    constructor(private readonly oid4vciService: Oid4vciService) {}\n\n    /**\n     * Endpoint to issue credentials\n     * @param req\n     * @returns\n     */\n    @Post('credential')\n    @SessionLogger('state', 'OID4VCI')\n    credential(\n        @Req() req: Request,\n        @Param('tenantId') tenantId: string,\n    ): Promise {\n        return this.oid4vciService.getCredential(req, tenantId);\n    }\n\n    /**\n     * Notification endpoint\n     * @param body\n     * @returns\n     */\n    @Post('notification')\n    @SessionLogger('notification_id', 'OID4VCI')\n    notifications(\n        @Body() body: NotificationRequestDto,\n        @Req() req: Request,\n        @Param('tenantId') tenantId: string,\n    ) {\n        return this.oid4vciService.handleNotification(req, body, tenantId);\n    }\n\n    //TODO: this endpoint may be relevant for the wallet attestation.\n    /* @Get('session')\n  session() {\n    console.log('Session requested');\n    //TODO store session and created at\n    const session = randomUUID();\n    return {\n      session_id: session,\n    };\n  } */\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Oid4vciService.html":{"url":"injectables/Oid4vciService.html","title":"injectable - Oid4vciService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Oid4vciService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/oid4vci.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                credentialsService\n                            \n                            \n                                    Private\n                                issuer\n                            \n                            \n                                resourceServer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createOffer\n                            \n                            \n                                    Async\n                                getCredential\n                            \n                            \n                                    Async\n                                handleNotification\n                            \n                            \n                                    Async\n                                issuerMetadata\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authzService: AuthorizeService, cryptoService: CryptoService, credentialsService: CredentialsService, configService: ConfigService, sessionService: SessionService, sessionLogger: SessionLoggerService, issuanceService: IssuanceService, webhookService: WebhookService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:42\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authzService\n                                                  \n                                                        \n                                                                        AuthorizeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialsService\n                                                  \n                                                        \n                                                                        CredentialsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        issuanceService\n                                                  \n                                                        \n                                                                        IssuanceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        webhookService\n                                                  \n                                                        \n                                                                        WebhookService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOffer(body: OfferRequestDto, user: TokenPayload, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:115\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            OfferRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredential\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredential(req: Request, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:180\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleNotification(req: Request, body: NotificationRequestDto, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:297\n                        \n                    \n\n\n            \n                \n                        Store the notification in the session based on the notitification id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            NotificationRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        issuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    issuerMetadata(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        credentialsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialsService\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Openid4vciIssuer\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resourceServer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Oauth2ResourceServer\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:42\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    BadRequestException,\n    ConflictException,\n    Injectable,\n    OnModuleInit,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    type HttpMethod,\n    Oauth2ResourceServer,\n    SupportedAuthenticationScheme,\n    authorizationCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from '@openid4vc/oauth2';\nimport {\n    type CredentialResponse,\n    type IssuerMetadataResult,\n    Openid4vciDraftVersion,\n    Openid4vciIssuer,\n} from '@openid4vc/openid4vci';\nimport type { Request } from 'express';\nimport { CredentialsService } from '../credentials/credentials.service';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { AuthorizeService } from '../authorize/authorize.service';\nimport { getHeadersFromRequest } from './util';\nimport { readFileSync } from 'node:fs';\nimport { join } from 'node:path';\nimport { SessionService } from '../../session/session.service';\nimport { v4 } from 'uuid';\nimport { OfferRequestDto, OfferResponse } from './dto/offer-request.dto';\nimport { NotificationRequestDto } from './dto/notification-request.dto';\nimport { SessionLoggerService } from '../../utils/logger/session-logger.service';\nimport { SessionLogContext } from '../../utils/logger/session-logger-context';\nimport { TokenPayload } from '../../auth/token.decorator';\nimport { IssuanceService } from '../issuance/issuance.service';\nimport { WebhookService } from '../../utils/webhook/webhook.service';\n\n@Injectable()\nexport class Oid4vciService implements OnModuleInit {\n    private issuer: Openid4vciIssuer;\n\n    resourceServer: Oauth2ResourceServer;\n\n    constructor(\n        private readonly authzService: AuthorizeService,\n        private readonly cryptoService: CryptoService,\n        public readonly credentialsService: CredentialsService,\n        private readonly configService: ConfigService,\n        private readonly sessionService: SessionService,\n        private readonly sessionLogger: SessionLoggerService,\n        private readonly issuanceService: IssuanceService,\n        private readonly webhookService: WebhookService,\n    ) {}\n    onModuleInit() {\n        //TODO: align for tenant\n        const callbacks = this.cryptoService.getCallbackContext('');\n        this.issuer = new Openid4vciIssuer({\n            callbacks,\n        });\n        this.resourceServer = new Oauth2ResourceServer({\n            callbacks,\n        });\n    }\n\n    async issuerMetadata(tenantId: string): Promise {\n        const credential_issuer = `${this.configService.getOrThrow(\n            'PUBLIC_URL',\n        )}/${tenantId}`;\n\n        const display = JSON.parse(\n            readFileSync(\n                join(\n                    this.configService.getOrThrow('FOLDER'),\n                    tenantId,\n                    'display.json',\n                ),\n                'utf-8',\n            ),\n        );\n\n        const authorizationServerMetadata =\n            this.authzService.authzMetadata(tenantId);\n\n        let credentialIssuer = this.issuer.createCredentialIssuerMetadata({\n            credential_issuer,\n            credential_configurations_supported:\n                await this.credentialsService.getCredentialConfiguration(\n                    tenantId,\n                ),\n            credential_endpoint: `${credential_issuer}/vci/credential`,\n            authorization_servers: [authorizationServerMetadata.issuer],\n            authorization_server: authorizationServerMetadata.issuer,\n            notification_endpoint: `${credential_issuer}/vci/notification`,\n            batch_credential_issuance: {\n                batch_size: 1,\n            },\n            display,\n        });\n\n        //replace placeholders in the issuer metadata\n        credentialIssuer = JSON.parse(\n            JSON.stringify(credentialIssuer).replace(\n                //g,\n                this.configService.getOrThrow('PUBLIC_URL'),\n            ),\n        );\n\n        return {\n            credentialIssuer,\n            authorizationServers: [authorizationServerMetadata],\n            originalDraftVersion: Openid4vciDraftVersion.Draft14,\n        } as const satisfies IssuerMetadataResult;\n    }\n\n    async createOffer(\n        body: OfferRequestDto,\n        user: TokenPayload,\n        tenantId: string,\n    ): Promise {\n        const issuanceConfig = await this.issuanceService\n            .getIssuanceConfigurationById(body.issuanceId, tenantId)\n            .catch(() => {\n                throw new BadRequestException(\n                    `Issuance configuration with ID ${body.issuanceId} not found`,\n                );\n            });\n        const credentialConfigurationIds =\n            body.credentialConfigurationIds ||\n            issuanceConfig.credentialConfigs.map((config) => config.id);\n\n        let authorization_code: string | undefined;\n        let grants: any;\n        const issuer_state = v4();\n        if (issuanceConfig.authenticationConfig.method === 'none') {\n            authorization_code = v4();\n            grants = {\n                [preAuthorizedCodeGrantIdentifier]: {\n                    'pre-authorized_code': authorization_code,\n                },\n            };\n        } else {\n            grants = {\n                [authorizationCodeGrantIdentifier]: {\n                    issuer_state,\n                },\n            };\n        }\n\n        const issuerMetadata = await this.issuerMetadata(tenantId);\n\n        return this.issuer\n            .createCredentialOffer({\n                credentialConfigurationIds,\n                grants,\n                issuerMetadata,\n            })\n            .then(\n                async (offer) => {\n                    await this.sessionService.create({\n                        id: issuer_state,\n                        offer: offer.credentialOfferObject,\n                        credentialPayload: body,\n                        tenantId: user.sub,\n                        issuanceId: body.issuanceId,\n                        authorization_code,\n                    });\n                    return {\n                        session: issuer_state,\n                        uri: offer.credentialOffer,\n                    } as OfferResponse;\n                },\n                () => {\n                    throw new ConflictException(\n                        `Invalid credential configuration ID`,\n                    );\n                },\n            );\n    }\n\n    async getCredential(\n        req: Request,\n        tenantId: string,\n    ): Promise {\n        const issuerMetadata = await this.issuerMetadata(tenantId);\n        const parsedCredentialRequest = this.issuer.parseCredentialRequest({\n            issuerMetadata,\n            credentialRequest: req.body as Record,\n        });\n\n        if (parsedCredentialRequest?.proofs?.jwt === undefined) {\n            throw new Error('Invalid credential request');\n        }\n\n        const protocol = new URL(\n            this.configService.getOrThrow('PUBLIC_URL'),\n        ).protocol;\n\n        const headers = getHeadersFromRequest(req);\n        const { tokenPayload } =\n            await this.resourceServer.verifyResourceRequest({\n                authorizationServers: issuerMetadata.authorizationServers,\n                request: {\n                    url: `${protocol}//${req.host}${req.url}`,\n                    method: req.method as HttpMethod,\n                    headers,\n                },\n                resourceServer:\n                    issuerMetadata.credentialIssuer.credential_issuer,\n                allowedAuthenticationSchemes: [\n                    SupportedAuthenticationScheme.DPoP,\n                ],\n            });\n\n        const session = await this.sessionService.get(\n            tokenPayload.sub as string,\n        );\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: session.id,\n            tenantId,\n            flowType: 'OID4VCI',\n            stage: 'credential_request',\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            credentialConfigurationId:\n                parsedCredentialRequest.credentialConfigurationId,\n            proofCount: parsedCredentialRequest.proofs?.jwt?.length || 0,\n        });\n\n        try {\n            const credentials: string[] = [];\n            for (const jwt of parsedCredentialRequest.proofs.jwt) {\n                const verifiedProof =\n                    await this.issuer.verifyCredentialRequestJwtProof({\n                        //check if this is correct or if the passed nonce is validated.\n                        expectedNonce: tokenPayload.nonce as string,\n                        issuerMetadata: await this.issuerMetadata(tenantId),\n                        jwt,\n                    });\n                const cnf = verifiedProof.signer.publicJwk;\n                const cred = await this.credentialsService.getCredential(\n                    parsedCredentialRequest.credentialConfigurationId as string,\n                    cnf as any,\n                    session,\n                );\n                credentials.push(cred);\n\n                this.sessionLogger.logCredentialIssuance(\n                    logContext,\n                    parsedCredentialRequest.credentialConfigurationId as string,\n                    {\n                        credentialSize: cred.length,\n                        proofVerified: true,\n                    },\n                );\n            }\n\n            const notificationId = v4();\n            session.notifications.push({\n                id: notificationId,\n                credentialConfigurationId:\n                    parsedCredentialRequest.credentialConfigurationId as string,\n            });\n            await this.sessionService.add(session.id, tenantId, {\n                notifications: session.notifications,\n            });\n\n            this.sessionLogger.logFlowComplete(logContext, {\n                credentialsIssued: credentials.length,\n                notificationId,\n            });\n\n            return this.issuer.createCredentialResponse({\n                credentials,\n                credentialRequest: parsedCredentialRequest,\n                cNonce: tokenPayload.nonce as string,\n                cNonceExpiresInSeconds: 3600,\n                //this should be stored in the session in case this endpoint is requested multiple times, but the response is differnt.\n                notificationId,\n            });\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                credentialConfigurationId:\n                    parsedCredentialRequest.credentialConfigurationId,\n            });\n            throw error;\n        }\n    }\n\n    /**\n     * Store the notification in the session based on the notitification id.\n     * @param req\n     * @param body\n     */\n    async handleNotification(\n        req: Request,\n        body: NotificationRequestDto,\n        tenantId: string,\n    ) {\n        const issuerMetadata = await this.issuerMetadata(tenantId);\n        const headers = getHeadersFromRequest(req);\n        const protocol = new URL(\n            this.configService.getOrThrow('PUBLIC_URL'),\n        ).protocol;\n        const { tokenPayload } =\n            await this.resourceServer.verifyResourceRequest({\n                authorizationServers: issuerMetadata.authorizationServers,\n                request: {\n                    url: `${protocol}//${req.host}${req.url}`,\n                    method: req.method as HttpMethod,\n                    headers,\n                },\n                resourceServer:\n                    issuerMetadata.credentialIssuer.credential_issuer,\n                allowedAuthenticationSchemes: [\n                    SupportedAuthenticationScheme.DPoP,\n                ],\n            });\n\n        const session = await this.sessionService.get(\n            tokenPayload.sub as string,\n        );\n        if (session === undefined) {\n            throw new BadRequestException('Session not found');\n        }\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: session.id,\n            tenantId,\n            flowType: 'OID4VCI',\n            stage: 'notification',\n        };\n\n        try {\n            const index = session.notifications.findIndex(\n                (notification) => notification.id === body.notification_id,\n            );\n            if (index === -1) {\n                throw new BadRequestException(\n                    'No notifications found in session',\n                );\n            }\n\n            session.notifications[index].event = body.event;\n            await this.sessionService.add(session.id, tenantId, {\n                notifications: session.notifications,\n            });\n\n            this.sessionLogger.logNotification(logContext, body.event || '', {\n                notificationId: body.notification_id,\n                notificationIndex: index,\n            });\n\n            //check for the webhook and send it.\n            //TODO: in case multiple batches are included, check if each time the notification endpoint is triggered. Also when multiple credentials got offered in the request, try to bundle them maybe?\n            if (session.notifyWebhook) {\n                await this.webhookService.sendWebhookNotification(\n                    session,\n                    logContext,\n                    session.notifications[index],\n                );\n            }\n        } catch (error) {\n            this.sessionLogger.logSessionError(\n                logContext,\n                error as Error,\n                'Failed to handle notification',\n                {\n                    notificationId: body.notification_id,\n                },\n            );\n            throw error;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vpController.html":{"url":"controllers/Oid4vpController.html","title":"controller - Oid4vpController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Oid4vpController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/oid4vp\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getRequestWithSession\n                            \n                            \n                                    \n                                    \n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getRequestWithSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRequestWithSession(tenantId: string, requestId: string, session: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('request/:requestId/:session')@SessionLogger('session', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:34\n                        \n                    \n\n\n            \n                \n                        Returns the authorization request for a given requestId and session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('response')@SessionLogger('state', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:53\n                        \n                    \n\n\n            \n                \n                        Endpoint to receive the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Get,\n    Param,\n    Post,\n    UseInterceptors,\n} from '@nestjs/common';\nimport { Oid4vpService } from './oid4vp.service';\nimport { AuthorizationResponse } from './dto/authorization-response.dto';\nimport { SessionLogger } from '../../utils/logger/session-logger.decorator';\nimport { SessionLoggerInterceptor } from '../../utils/logger/session-logger.interceptor';\n\n/**\n * Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n */\n@Controller(':tenantId/oid4vp')\n@UseInterceptors(SessionLoggerInterceptor)\nexport class Oid4vpController {\n    /**\n     * Constructor for the Oid4vpController.\n     * @param oid4vpService - Instance of Oid4vpService for handling OID4VP operations.\n     */\n    constructor(private readonly oid4vpService: Oid4vpService) {}\n\n    /**\n     * Returns the authorization request for a given requestId and session.\n     * @param requestId\n     * @param session\n     * @returns\n     */\n    @Get('request/:requestId/:session')\n    @SessionLogger('session', 'OID4VP')\n    getRequestWithSession(\n        @Param('tenantId') tenantId: string,\n        @Param('requestId') requestId: string,\n        @Param('session') session: string,\n    ) {\n        return this.oid4vpService.createAuthorizationRequest(\n            requestId,\n            tenantId,\n            session,\n        );\n    }\n\n    /**\n     * Endpoint to receive the response from the wallet.\n     * @param body\n     * @returns\n     */\n    @Post('response')\n    @SessionLogger('state', 'OID4VP')\n    getResponse(\n        @Body() body: AuthorizationResponse,\n        @Param('tenantId') tenantId: string,\n    ) {\n        return this.oid4vpService.getResponse(body, tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/Oid4vpModule.html":{"url":"modules/Oid4vpModule.html","title":"module - Oid4vpModule","body":"\n                   \n\n\n\n\n    Modules\n    Oid4vpModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_imports\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nOid4vpModule -->\n\nPresentationsModule->Oid4vpModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nOid4vpModule -->\n\nRegistrarModule->Oid4vpModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nOid4vpModule -->\n\nSessionLoggerService->Oid4vpModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nOid4vpModule -->\n\nWebhookService->Oid4vpModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            Oid4vpService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                        \n                            WebhookService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vpController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            PresentationsModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            Oid4vpService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { Oid4vpService } from './oid4vp.service';\nimport { Oid4vpController } from './oid4vp.controller';\nimport { CryptoModule } from '../../crypto/crypto.module';\nimport { RegistrarModule } from '../../registrar/registrar.module';\nimport { PresentationsModule } from '../presentations/presentations.module';\nimport { SessionModule } from '../../session/session.module';\nimport { HttpModule } from '@nestjs/axios';\nimport { SessionLoggerInterceptor } from '../../utils/logger/session-logger.interceptor';\nimport { SessionLoggerService } from '../../utils/logger/session-logger.service';\nimport { WebhookService } from '../../utils/webhook/webhook.service';\n\n@Module({\n    imports: [\n        CryptoModule,\n        RegistrarModule,\n        PresentationsModule,\n        SessionModule,\n        HttpModule,\n    ],\n    controllers: [Oid4vpController],\n    providers: [\n        Oid4vpService,\n        SessionLoggerService,\n        SessionLoggerInterceptor,\n        WebhookService,\n    ],\n    exports: [Oid4vpService],\n})\nexport class Oid4vpModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Oid4vpService.html":{"url":"injectables/Oid4vpService.html","title":"injectable - Oid4vpService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Oid4vpService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAuthorizationRequest\n                            \n                            \n                                    Async\n                                createRequest\n                            \n                            \n                                    Async\n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cryptoService: CryptoService, encryptionService: EncryptionService, configService: ConfigService, registrarService: RegistrarService, presentationsService: PresentationsService, sessionService: SessionService, sessionLogger: SessionLoggerService, webhookService: WebhookService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/oid4vp/oid4vp.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        encryptionService\n                                                  \n                                                        \n                                                                        EncryptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registrarService\n                                                  \n                                                        \n                                                                        RegistrarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        webhookService\n                                                  \n                                                        \n                                                                        WebhookService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAuthorizationRequest(requestId: string, tenantId: string, auth_session: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Creates an authorization request for the OID4VP flow.\nThis method generates a JWT that includes the necessary parameters for the authorization request.\nIt initializes the session logging context and logs the start of the flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                auth_session\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRequest(requestId: string, values: PresentationRequestOptions, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:218\n                        \n                    \n\n\n            \n                \n                        Creates a request for the OID4VP flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            PresentationRequestOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:267\n                        \n                    \n\n\n            \n                \n                        Processes the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { randomUUID } from 'node:crypto';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { AuthorizationResponse } from './dto/authorization-response.dto';\nimport { RegistrarService } from '../../registrar/registrar.service';\nimport { PresentationsService } from '../presentations/presentations.service';\nimport { AuthResponse } from '../presentations/dto/auth-response.dto';\nimport { EncryptionService } from '../../crypto/encryption/encryption.service';\nimport { v4 } from 'uuid';\nimport { SessionService } from '../../session/session.service';\nimport { OfferResponse } from '../../issuer/oid4vci/dto/offer-request.dto';\nimport { PresentationRequestOptions } from './dto/presentation-request-options.dto';\nimport { WebhookService } from '../../utils/webhook/webhook.service';\nimport { SessionLoggerService } from '../../utils/logger/session-logger.service';\nimport { SessionLogContext } from '../../utils/logger/session-logger-context';\n\n@Injectable()\nexport class Oid4vpService {\n    constructor(\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private configService: ConfigService,\n        private registrarService: RegistrarService,\n        private presentationsService: PresentationsService,\n        private sessionService: SessionService,\n        private sessionLogger: SessionLoggerService,\n        private webhookService: WebhookService,\n    ) {}\n\n    /**\n     * Creates an authorization request for the OID4VP flow.\n     * This method generates a JWT that includes the necessary parameters for the authorization request.\n     * It initializes the session logging context and logs the start of the flow.\n     * @param requestId\n     * @param tenantId\n     * @param auth_session\n     * @returns\n     */\n    async createAuthorizationRequest(\n        requestId: string,\n        tenantId: string,\n        auth_session: string,\n    ): Promise {\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: auth_session,\n            tenantId,\n            flowType: 'OID4VP',\n            stage: 'authorization_request',\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            requestId,\n            action: 'create_authorization_request',\n        });\n\n        try {\n            const host = this.configService.getOrThrow('PUBLIC_URL');\n            const tenantUrl = `${host}/${tenantId}`;\n\n            const values =\n                await this.presentationsService.getPresentationConfig(\n                    requestId,\n                    tenantId,\n                );\n            let regCert: string | undefined = undefined;\n\n            const dcql_query = JSON.parse(\n                JSON.stringify(values.dcql_query).replace(\n                    //g,\n                    tenantUrl,\n                ),\n            );\n\n            if (this.registrarService.isEnabled()) {\n                const registrationCert = JSON.parse(\n                    JSON.stringify(values.registrationCert).replace(\n                        //g,\n                        tenantUrl,\n                    ),\n                );\n                regCert =\n                    await this.registrarService.addRegistrationCertificate(\n                        registrationCert,\n                        dcql_query,\n                        requestId,\n                        tenantId,\n                    );\n            }\n            const nonce = randomUUID();\n            await this.sessionService.add(auth_session, tenantId, {\n                vp_nonce: nonce,\n            });\n\n            this.sessionLogger.logAuthorizationRequest(logContext, {\n                requestId,\n                nonce,\n                regCert,\n                dcqlQueryCount: Array.isArray(dcql_query)\n                    ? dcql_query.length\n                    : 1,\n            });\n\n            const hostname = new URL(\n                this.configService.getOrThrow('PUBLIC_URL'),\n            ).hostname;\n\n            const request = {\n                payload: {\n                    response_type: 'vp_token',\n                    client_id: 'x509_san_dns:' + hostname,\n                    response_uri: `${host}/${tenantId}/oid4vp/response`,\n                    response_mode: 'direct_post.jwt',\n                    nonce,\n                    dcql_query,\n                    client_metadata: {\n                        jwks: {\n                            keys: [\n                                this.encryptionService.getEncryptionPublicKey(),\n                            ],\n                        },\n                        vp_formats: {\n                            mso_mdoc: {\n                                alg: ['EdDSA', 'ES256', 'ES384'],\n                            },\n                            'dc+sd-jwt': {\n                                'kb-jwt_alg_values': [\n                                    'EdDSA',\n                                    'ES256',\n                                    'ES384',\n                                    'ES256K',\n                                ],\n                                'sd-jwt_alg_values': [\n                                    'EdDSA',\n                                    'ES256',\n                                    'ES384',\n                                    'ES256K',\n                                ],\n                            },\n                        },\n                        authorization_encrypted_response_alg: 'ECDH-ES',\n                        authorization_encrypted_response_enc: 'A128GCM',\n                        client_name:\n                            this.configService.getOrThrow('RP_NAME'),\n                        response_types_supported: ['vp_token'],\n                    },\n                    state: auth_session,\n                    aud: host,\n                    exp: Math.floor(Date.now() / 1000) + 60 * 5,\n                    iat: Math.floor(new Date().getTime() / 1000),\n                    verifier_attestations: regCert\n                        ? [\n                              {\n                                  format: 'jwt',\n                                  data: regCert,\n                              },\n                          ]\n                        : undefined,\n                },\n                header: {\n                    typ: 'oauth-authz-req+jwt',\n                },\n            };\n\n            let accessCert: string[] | undefined = undefined;\n            try {\n                accessCert = this.cryptoService.getCertChain(\n                    'access',\n                    tenantId,\n                );\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            } catch (err: any) {\n                accessCert = this.cryptoService.getCertChain(\n                    'signing',\n                    tenantId,\n                );\n            }\n\n            const header = {\n                ...request.header,\n                alg: 'ES256',\n                x5c: accessCert,\n            };\n\n            const signedJwt = await this.cryptoService.signJwt(\n                header,\n                request.payload,\n                tenantId,\n            );\n\n            this.sessionLogger.logSession(\n                logContext,\n                'Authorization request created successfully',\n                {\n                    signedJwtLength: signedJwt.length,\n                    certificateChainLength: accessCert?.length || 0,\n                },\n            );\n\n            return signedJwt;\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                requestId,\n                action: 'create_authorization_request',\n            });\n            throw error;\n        }\n    }\n\n    /**\n     * Creates a request for the OID4VP flow.\n     * @param requestId\n     * @param values\n     * @param tenantId\n     * @returns\n     */\n    async createRequest(\n        requestId: string,\n        values: PresentationRequestOptions,\n        tenantId: string,\n    ): Promise {\n        const presentationConfig =\n            await this.presentationsService.getPresentationConfig(\n                requestId,\n                tenantId,\n            );\n\n        if (!values.session) {\n            values.session = v4();\n            await this.sessionService.create({\n                id: values.session,\n                webhook: values.webhook ?? presentationConfig.webhook,\n                tenantId,\n            });\n        } else {\n            await this.sessionService.add(values.session, tenantId, {\n                webhook: values.webhook ?? presentationConfig.webhook,\n            });\n        }\n\n        const hostname = new URL(\n            this.configService.getOrThrow('PUBLIC_URL'),\n        ).hostname;\n        const params = {\n            client_id: `x509_san_dns:${hostname}`,\n            request_uri: `${this.configService.getOrThrow('PUBLIC_URL')}/${tenantId}/oid4vp/request/${requestId}/${values.session}`,\n        };\n        const queryString = Object.entries(params)\n            .map(\n                ([key, value]) =>\n                    `${encodeURIComponent(key)}=${encodeURIComponent(value)}`,\n            )\n            .join('&');\n\n        return {\n            uri: queryString,\n            session: values.session,\n        };\n    }\n\n    /**\n     * Processes the response from the wallet.\n     * @param body\n     * @param tenantId\n     */\n    async getResponse(body: AuthorizationResponse, tenantId: string) {\n        const res = await this.encryptionService.decryptJwe(\n            body.response,\n        );\n        if (!res.state) {\n            throw new ConflictException('No state found in the response');\n        }\n        const session = await this.sessionService.get(res.state);\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: res.state,\n            tenantId,\n            flowType: 'OID4VP',\n            stage: 'response_processing',\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            action: 'process_presentation_response',\n            hasWebhook: !!session.webhook,\n        });\n\n        try {\n            //TODO: load required fields from the config\n            const credentials = await this.presentationsService.parseResponse(\n                res,\n                [],\n                session.vp_nonce as string,\n            );\n\n            this.sessionLogger.logCredentialVerification(\n                logContext,\n                !!credentials && credentials.length > 0,\n                {\n                    credentialCount: credentials?.length || 0,\n                    nonce: session.vp_nonce,\n                },\n            );\n\n            //tell the auth server the result of the session.\n            await this.sessionService.add(res.state, tenantId, {\n                //TODO: not clear why it has to be any\n                credentials: credentials as any,\n            });\n            // if there a a webook URL, send the response there\n            //TODO: move to dedicated service to reuse it also in the oid4vci flow.\n            if (session.webhook) {\n                await this.webhookService.sendWebhook(\n                    session,\n                    logContext,\n                    credentials,\n                );\n            }\n\n            this.sessionLogger.logFlowComplete(logContext, {\n                credentialCount: credentials?.length || 0,\n                webhookSent: !!session.webhook,\n            });\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                action: 'process_presentation_response',\n            });\n            throw error;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParResponseDto.html":{"url":"classes/ParResponseDto.html","title":"class - ParResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/par-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expires_in\n                            \n                            \n                                request_uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The expiration time for the request URI in seconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:5\n                        \n                    \n\n            \n                \n                    The request URI for the Pushed Authorization Request.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ParResponseDto {\n    /**\n     * The request URI for the Pushed Authorization Request.\n     */\n    request_uri: string;\n    /**\n     * The expiration time for the request URI in seconds.\n     */\n    expires_in: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{"url":"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html","title":"interface - ParsedAccessTokenAuthorizationCodeRequestGrant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParsedAccessTokenAuthorizationCodeRequestGrant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            code\n                                        \n                                \n                                \n                                        \n                                            grantType\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        grantType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        grantType:     AuthorizationCodeGrantIdentifier\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AuthorizationCodeGrantIdentifier\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\nimport { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    authorizationCodeGrantIdentifier,\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from '@openid4vc/oauth2';\nimport type { Request, Response } from 'express';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { getHeadersFromRequest } from '../oid4vci/util';\nimport { AuthorizeQueries } from './dto/authorize-request.dto';\nimport { Oid4vpService } from '../../verifier/oid4vp/oid4vp.service';\nimport { SessionService } from '../../session/session.service';\nimport { WebhookConfig } from '../../utils/webhook/webhook.dto';\nimport { IssuanceService } from '../issuance/issuance.service';\nimport { AuthenticationConfigHelper } from '../issuance/dto/authentication-config.helper';\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(tenantId: string): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow('PUBLIC_URL') +\n            `/${tenantId}`;\n        return this.getAuthorizationServer(\n            tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: ['ES256'],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n        tenantId: string,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        'request_uri not found or not provided in the request',\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                'request_uri not found or not provided in the request',\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!, tenantId);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        tenantId: string,\n    ): Promise {\n        const url = `${this.configService.getOrThrow('PUBLIC_URL')}${req.url}`;\n\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        const session = await this.sessionService.getBy({\n            authorization_code: body.code ?? body['pre-authorized_code'],\n            tenantId,\n        });\n\n        if (!session) {\n            throw new ConflictException('Authorization code not found');\n        }\n        const authorizationServerMetadata = this.authzMetadata(tenantId);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n\n        const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow('PUBLIC_URL')}/${tenantId}`,\n            signer: {\n                method: 'jwk',\n                alg: 'ES256',\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    'jwk',\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            cNonce,\n            cNonceExpiresIn: 100,\n            clientId: 'wallet', // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest('pid', { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: 'insufficient_authorization',\n            auth_session,\n            presentation,\n            error_description:\n                'Presentation of credential required before issuance',\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        tenantId: string,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(\n                    res,\n                    body.auth_session,\n                    tenantId,\n                );\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    'Session does not have valid credentials for issuance',\n                );\n            }\n        }\n\n        const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        }\n        const issuanceId = session.issuanceId!;\n        const config = await this.issuanceService.getIssuanceConfigurationById(\n            issuanceId,\n            tenantId,\n        );\n\n        // Use the new authentication configuration structure\n        const authConfig = config.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                'No authentication configuration found for issuance config',\n            );\n        }\n\n        if (\n            AuthenticationConfigHelper.isPresentationDuringIssuanceAuth(\n                authConfig,\n            )\n        ) {\n            // OID4VP flow - credential presentation required\n            const presentationConfig =\n                AuthenticationConfigHelper.getPresentationConfig(authConfig);\n            const webhook = presentationConfig?.presentation.webhook;\n            const response = await this.parseChallengeRequest(\n                body,\n                tenantId,\n                webhook,\n            );\n            res.status(400).send(response);\n        } else if (AuthenticationConfigHelper.isAuthUrlAuth(authConfig)) {\n            // OID4VCI authorized code flow - should not reach here typically in challenge endpoint\n            // But we'll handle it by sending authorization code\n            await this.sendAuthorizationCode(res, body.issuer_state!, tenantId);\n        } else if (AuthenticationConfigHelper.isNoneAuth(authConfig)) {\n            // Pre-authorized code flow (method: 'none') - send authorization code directly\n            await this.sendAuthorizationCode(res, body.issuer_state!, tenantId);\n        } else {\n            throw new Error(\n                `Unsupported authentication method: ${(authConfig as any).method}`,\n            );\n        }\n    }\n\n    private async sendAuthorizationCode(\n        res: Response,\n        issuer_state: string,\n        tenantId: string,\n    ) {\n        const authorization_code = await this.setAuthCode(\n            issuer_state,\n            tenantId,\n        );\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string, tenantId: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, tenantId, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{"url":"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html","title":"interface - ParsedAccessTokenPreAuthorizedCodeRequestGrant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParsedAccessTokenPreAuthorizedCodeRequestGrant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            grantType\n                                        \n                                \n                                \n                                        \n                                            preAuthorizedCode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            txCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        grantType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        grantType:     PreAuthorizedCodeGrantIdentifier\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     PreAuthorizedCodeGrantIdentifier\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        preAuthorizedCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        preAuthorizedCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        txCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        txCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\nimport { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    authorizationCodeGrantIdentifier,\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from '@openid4vc/oauth2';\nimport type { Request, Response } from 'express';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { getHeadersFromRequest } from '../oid4vci/util';\nimport { AuthorizeQueries } from './dto/authorize-request.dto';\nimport { Oid4vpService } from '../../verifier/oid4vp/oid4vp.service';\nimport { SessionService } from '../../session/session.service';\nimport { WebhookConfig } from '../../utils/webhook/webhook.dto';\nimport { IssuanceService } from '../issuance/issuance.service';\nimport { AuthenticationConfigHelper } from '../issuance/dto/authentication-config.helper';\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(tenantId: string): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow('PUBLIC_URL') +\n            `/${tenantId}`;\n        return this.getAuthorizationServer(\n            tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: ['ES256'],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n        tenantId: string,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        'request_uri not found or not provided in the request',\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                'request_uri not found or not provided in the request',\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!, tenantId);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        tenantId: string,\n    ): Promise {\n        const url = `${this.configService.getOrThrow('PUBLIC_URL')}${req.url}`;\n\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        const session = await this.sessionService.getBy({\n            authorization_code: body.code ?? body['pre-authorized_code'],\n            tenantId,\n        });\n\n        if (!session) {\n            throw new ConflictException('Authorization code not found');\n        }\n        const authorizationServerMetadata = this.authzMetadata(tenantId);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n\n        const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow('PUBLIC_URL')}/${tenantId}`,\n            signer: {\n                method: 'jwk',\n                alg: 'ES256',\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    'jwk',\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            cNonce,\n            cNonceExpiresIn: 100,\n            clientId: 'wallet', // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest('pid', { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: 'insufficient_authorization',\n            auth_session,\n            presentation,\n            error_description:\n                'Presentation of credential required before issuance',\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        tenantId: string,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(\n                    res,\n                    body.auth_session,\n                    tenantId,\n                );\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    'Session does not have valid credentials for issuance',\n                );\n            }\n        }\n\n        const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        }\n        const issuanceId = session.issuanceId!;\n        const config = await this.issuanceService.getIssuanceConfigurationById(\n            issuanceId,\n            tenantId,\n        );\n\n        // Use the new authentication configuration structure\n        const authConfig = config.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                'No authentication configuration found for issuance config',\n            );\n        }\n\n        if (\n            AuthenticationConfigHelper.isPresentationDuringIssuanceAuth(\n                authConfig,\n            )\n        ) {\n            // OID4VP flow - credential presentation required\n            const presentationConfig =\n                AuthenticationConfigHelper.getPresentationConfig(authConfig);\n            const webhook = presentationConfig?.presentation.webhook;\n            const response = await this.parseChallengeRequest(\n                body,\n                tenantId,\n                webhook,\n            );\n            res.status(400).send(response);\n        } else if (AuthenticationConfigHelper.isAuthUrlAuth(authConfig)) {\n            // OID4VCI authorized code flow - should not reach here typically in challenge endpoint\n            // But we'll handle it by sending authorization code\n            await this.sendAuthorizationCode(res, body.issuer_state!, tenantId);\n        } else if (AuthenticationConfigHelper.isNoneAuth(authConfig)) {\n            // Pre-authorized code flow (method: 'none') - send authorization code directly\n            await this.sendAuthorizationCode(res, body.issuer_state!, tenantId);\n        } else {\n            throw new Error(\n                `Unsupported authentication method: ${(authConfig as any).method}`,\n            );\n        }\n    }\n\n    private async sendAuthorizationCode(\n        res: Response,\n        issuer_state: string,\n        tenantId: string,\n    ) {\n        const authorization_code = await this.setAuthCode(\n            issuer_state,\n            tenantId,\n        );\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string, tenantId: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, tenantId, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PresentationConfig.html":{"url":"entities/PresentationConfig.html","title":"entity - PresentationConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PresentationConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a configuration for a Verifiable Presentation (VP) request.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                dcql_query\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                registrationCert\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:50\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        dcql_query\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:32\n                        \n                    \n\n            \n                \n                    The DCQL query to be used for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:17\n                        \n                    \n\n            \n                \n                    Unique identifier for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        registrationCert\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RegistrationCertificateRequest\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:38\n                        \n                    \n\n            \n                \n                    The registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:24\n                        \n                    \n\n            \n                \n                    The tenant ID for which the VP request is made.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:44\n                        \n                    \n\n            \n                \n                    Optional webhook URL to receive the response.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { IsString, IsObject } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\nimport { RegistrationCertificateRequest } from '../dto/vp-request.dto';\nimport { Column, Entity } from 'typeorm';\nimport { ApiHideProperty } from '@nestjs/swagger';\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column('varchar', { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column('varchar', { primary: true })\n    tenantId: string;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column('json')\n    @IsObject()\n    //TODO: define the structure of the DCQL query\n    dcql_query: any;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsObject()\n    @Column('json')\n    registrationCert: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column('json', { nullable: true })\n    @IsObject()\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @Column({ type: 'date', default: () => 'CURRENT_TIMESTAMP' })\n    createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationDuringIssuance.html":{"url":"classes/PresentationDuringIssuance.html","title":"class - PresentationDuringIssuance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationDuringIssuance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/dto/credential-config.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsString } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\n\nexport class VCT {\n    @IsString()\n    vct: string;\n    @IsString()\n    name?: string;\n    @IsString()\n    description?: string;\n    @IsString()\n    extends?: string;\n    @IsString()\n    'extends#integrity'?: string;\n    @IsString()\n    schema_uri?: string;\n    @IsString()\n    'schema_uri#integrity'?: string;\n}\n\nexport class PresentationDuringIssuance {\n    @IsString()\n    type: string;\n    @IsObject()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationDuringIssuanceConfig.html":{"url":"classes/PresentationDuringIssuanceConfig.html","title":"class - PresentationDuringIssuanceConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationDuringIssuanceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for authentication method 'presentationDuringIssuance'\nUsed for OID4VP flow where a credential presentation request is sent\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                presentation\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        presentation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PresentationDuringIssuance\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:45\n                        \n                    \n\n            \n                \n                    Presentation configuration that specifies what credentials need to be presented via OID4VP\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsObject,\n    IsOptional,\n    IsUrl,\n    IsIn,\n    ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\nimport { PresentationDuringIssuance } from '../../credentials-metadata/dto/credential-config.dto';\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsUrl()\n    authUrl: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Presentation configuration that specifies what credentials need to be presented via OID4VP\n     */\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuance)\n    presentation: PresentationDuringIssuance;\n}\n\n/**\n * Base class for authentication configurations\n * Determines which OpenID4VC flow to use for the issuance process\n */\nexport class AuthenticationConfigDto {\n    /**\n     * The authentication method to use:\n     * - 'none': Pre-authorized code flow (no user authentication)\n     * - 'auth': OID4VCI authorized code flow (user redirect for authentication)\n     * - 'presentationDuringIssuance': OID4VP flow (credential presentation required)\n     */\n    @IsIn(['none', 'auth', 'presentationDuringIssuance'])\n    method: 'none' | 'auth' | 'presentationDuringIssuance';\n\n    /**\n     * Configuration specific to the selected authentication method\n     * - For 'none': no config needed (undefined) - uses pre-authorized code flow\n     * - For 'auth': AuthenticationUrlConfig - for OID4VCI authorized code flow\n     * - For 'presentationDuringIssuance': PresentationDuringIssuanceConfig - for OID4VP flow\n     */\n    @IsOptional()\n    config?: AuthenticationUrlConfig | PresentationDuringIssuanceConfig;\n}\n\n/**\n * Union type for authentication configurations\n * Each method corresponds to a specific OpenID4VC flow\n */\nexport type AuthenticationConfig =\n    | { method: 'none' } // Pre-authorized code flow\n    | { method: 'auth'; config: AuthenticationUrlConfig } // OID4VCI authorized code flow\n    | {\n          method: 'presentationDuringIssuance'; // OID4VP flow\n          config: PresentationDuringIssuanceConfig;\n      };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PresentationManagementController.html":{"url":"controllers/PresentationManagementController.html","title":"controller - PresentationManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PresentationManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                presentation-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                configuration\n                            \n                            \n                                    \n                                deleteConfiguration\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                            \n                                    \n                                storePresentationConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        configuration\n                        \n                    \n                \n            \n            \n                \n                        \n                    configuration(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:111\n                        \n                    \n\n\n            \n                \n                        Returns the presentation request configurations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:137\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation request configuration by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(res: Response, body: PresentationRequest, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@UseGuards(JwtAuthGuard)@ApiSecurity('oauth2')@ApiBody({type: PresentationRequest, examples: undefined})@Post('request')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:79\n                        \n                    \n\n\n            \n                \n                        Create an presentation request that can be sent to the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            PresentationRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    storePresentationConfig(config: PresentationConfig, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:121\n                        \n                    \n\n\n            \n                \n                        Store a presentation request configuration. If it already exists, it will be updated.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            PresentationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Res,\n    UseGuards,\n} from '@nestjs/common';\nimport {\n    ApiBody,\n    ApiProduces,\n    ApiResponse,\n    ApiSecurity,\n    ApiTags,\n} from '@nestjs/swagger';\nimport { PresentationsService } from './presentations.service';\nimport { PresentationConfig } from './entities/presentation-config.entity';\nimport { JwtAuthGuard } from '../../auth/auth.guard';\nimport { Token, TokenPayload } from '../../auth/token.decorator';\nimport { OfferResponse } from '../../issuer/oid4vci/dto/offer-request.dto';\nimport {\n    PresentationRequest,\n    ResponseType,\n} from '../oid4vp/dto/presentation-request.dto';\nimport { Oid4vpService } from '../oid4vp/oid4vp.service';\nimport * as QRCode from 'qrcode';\nimport { Response } from 'express';\n\n@ApiTags('Presentation management')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2', ['api:read', 'api:write'])\n@Controller('presentation-management')\nexport class PresentationManagementController {\n    constructor(\n        private readonly presentationsService: PresentationsService,\n        private readonly oid4vpService: Oid4vpService,\n    ) {}\n\n    /**\n     * Create an presentation request that can be sent to the user\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: 'JSON response',\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            'application/json': { schema: { type: 'object' } },\n            'image/png': { schema: { type: 'string', format: 'binary' } },\n        },\n    })\n    @ApiProduces('application/json', 'image/png')\n    @UseGuards(JwtAuthGuard)\n    @ApiSecurity('oauth2')\n    @ApiBody({\n        type: PresentationRequest,\n        examples: {\n            qrcode: {\n                summary: 'QR-Code Example',\n                value: {\n                    response_type: ResponseType.QRCode,\n                    requestId: 'pid',\n                },\n            },\n            uri: {\n                summary: 'URI',\n                value: {\n                    response_type: ResponseType.URI,\n                    requestId: 'pid',\n                },\n            },\n        },\n    })\n    @Post('request')\n    async getOffer(\n        @Res() res: Response,\n        @Body() body: PresentationRequest,\n        @Token() user: TokenPayload,\n    ) {\n        const values = await this.oid4vpService.createRequest(\n            body.requestId,\n            {\n                webhook: body.webhook,\n            },\n            user.sub,\n        );\n        values.uri = `openid4vp://?${values.uri}`;\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader('Content-Type', 'image/png');\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n\n    /**\n     * Returns the presentation request configurations.\n     * @returns\n     */\n    @Get()\n    configuration(@Token() user: TokenPayload) {\n        return this.presentationsService.getPresentationConfigs(user.sub);\n    }\n\n    /**\n     * Store a presentation request configuration. If it already exists, it will be updated.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storePresentationConfig(\n        @Body() config: PresentationConfig,\n        @Token() user: TokenPayload,\n    ) {\n        return this.presentationsService.storePresentationConfig(\n            config,\n            user.sub,\n        );\n    }\n\n    /**\n     * Deletes a presentation request configuration by its ID.\n     * @param id\n     * @returns\n     */\n    @Delete(':id')\n    deleteConfiguration(@Param('id') id: string, @Token() user: TokenPayload) {\n        return this.presentationsService.deletePresentationConfig(id, user.sub);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationRequest.html":{"url":"classes/PresentationRequest.html","title":"class - PresentationRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the presentation request containing the response type and request ID.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                requestId\n                            \n                            \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        requestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:33\n                        \n                    \n\n            \n                \n                    Identifier of the presentation configuration\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:26\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:41\n                        \n                    \n\n            \n                \n                    Webhook configuration to receive the response.\nIf not provided, the configured webhook from the configuration will be used.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsObject, IsOptional, IsString } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\n\n/**\n * Enum for the type of response expected from the presentation request.\n */\nexport enum ResponseType {\n    /**\n     * Response type indicating a QR code will be returned.\n     */\n    QRCode = 'qrcode',\n    /**\n     * Response type indicating a URI will be returned.\n     */\n    URI = 'uri',\n}\n\n/**\n * DTO for the presentation request containing the response type and request ID.\n */\nexport class PresentationRequest {\n    /**\n     * @example qrcode\n     */\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Identifier of the presentation configuration\n     * @example pid\n     */\n    @IsString()\n    requestId: string;\n\n    /**\n     * Webhook configuration to receive the response.\n     * If not provided, the configured webhook from the configuration will be used.\n     */\n    @IsObject()\n    @IsOptional()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PresentationRequestOptions.html":{"url":"interfaces/PresentationRequestOptions.html","title":"interface - PresentationRequestOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PresentationRequestOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PresentationRequestOptions DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            session\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            webhook\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        session\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        session:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional session identifier for tracking the request.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        webhook\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        webhook:         WebhookConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         WebhookConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional webhook configuration to receive the response.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { WebhookConfig } from '../../../utils/webhook/webhook.dto';\n\n/**\n * PresentationRequestOptions DTO\n */\nexport interface PresentationRequestOptions {\n    /**\n     * Optional session identifier for tracking the request.\n     */\n    session?: string;\n    /**\n     * Optional webhook configuration to receive the response.\n     */\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PresentationsModule.html":{"url":"modules/PresentationsModule.html","title":"module - PresentationsModule","body":"\n                   \n\n\n\n\n    Modules\n    PresentationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_imports\n\n\n\ncluster_PresentationsModule_exports\n\n\n\ncluster_PresentationsModule_providers\n\n\n\n\nResolverModule\n\nResolverModule\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/presentations/presentations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PresentationManagementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ResolverModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { PresentationManagementController } from './presentations.controller';\nimport { PresentationsService } from './presentations.service';\nimport { ResolverModule } from '../resolver/resolver.module';\nimport { HttpModule } from '@nestjs/axios';\nimport { Oid4vpModule } from '../oid4vp/oid4vp.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PresentationConfig } from './entities/presentation-config.entity';\n\n@Module({\n    imports: [\n        ResolverModule,\n        HttpModule,\n        forwardRef(() => Oid4vpModule),\n        TypeOrmModule.forFeature([PresentationConfig]),\n    ],\n    controllers: [PresentationManagementController],\n    providers: [PresentationsService],\n    exports: [PresentationsService],\n})\nexport class PresentationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PresentationsService.html":{"url":"injectables/PresentationsService.html","title":"injectable - PresentationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PresentationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                kbVerifier\n                            \n                            \n                                sdjwtInstance\n                            \n                            \n                                    Private\n                                statusListFetcher\n                            \n                            \n                                verifier\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deletePresentationConfig\n                            \n                            \n                                    Async\n                                getPresentationConfig\n                            \n                            \n                                getPresentationConfigs\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                parseResponse\n                            \n                            \n                                storePresentationConfig\n                            \n                            \n                                    Public\n                                storeRCID\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, resolverService: ResolverService, vpRequestRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/presentations/presentations.service.ts:22\n                            \n                        \n\n                \n                    \n                            Constructor for the PresentationsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of HttpService for making HTTP requests.\n\n\n                                                        \n                                                \n                                                \n                                                        resolverService\n                                                  \n                                                        \n                                                                        ResolverService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ResolverService for resolving DID documents.\n\n\n                                                        \n                                                \n                                                \n                                                        vpRequestRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for managing VP request configurations.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deletePresentationConfig\n                        \n                    \n                \n            \n            \n                \ndeletePresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:78\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to delete.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to delete the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves when the deletion is complete.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPresentationConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:88\n                        \n                    \n\n\n            \n                \n                        Retrieves a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to retrieve.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the requested PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPresentationConfigs\n                        \n                    \n                \n            \n            \n                \ngetPresentationConfigs(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:54\n                        \n                    \n\n\n            \n                \n                        Retrieves all presentation configurations for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve configurations.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to an array of PresentationConfig entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Initializes the SDJwtVcInstance with the necessary configurations.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseResponse\n                        \n                    \n                \n            \n            \n                \nparseResponse(res: AuthResponse, requiredFields: string[], keyBindingNonce: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:177\n                        \n                    \n\n\n            \n                \n                        Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            AuthResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requiredFields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyBindingNonce\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \nstorePresentationConfig(vprequest: PresentationConfig, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Stores a new presentation configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                vprequest\n                                            \n                                                            PresentationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe PresentationConfig entity to store.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the stored PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        storeRCID\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeRCID(registrationCertId: string, id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Stores the new registration certificate.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                registrationCertId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the registration certificate to store.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to update.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the registration certificate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        kbVerifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KbVerifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:160\n                        \n                    \n\n            \n                \n                    Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                            \n                                            \n                                                    signature\n                                            \n                                            \n                                                    payload\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sdjwtInstance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SDJwtVcInstance\n\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:22\n                        \n                    \n\n            \n                \n                    Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        statusListFetcher\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:145\n                        \n                    \n\n            \n                \n                    Fetch the status list from the uri.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    uri\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Verifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:122\n                        \n                    \n\n            \n                \n                    Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                                    \n                                                            \nThe data part of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                            \n                                                    signature\n                                                    \n                                                            \nThe signature of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { ConflictException, Injectable, OnModuleInit } from '@nestjs/common';\nimport { digest, ES256 } from '@sd-jwt/crypto-nodejs';\nimport { SDJwtVcInstance } from '@sd-jwt/sd-jwt-vc';\nimport { KbVerifier, Verifier } from '@sd-jwt/types';\nimport { importJWK, JWK, JWTPayload, jwtVerify } from 'jose';\nimport { firstValueFrom } from 'rxjs';\nimport { ResolverService } from '../resolver/resolver.service';\nimport { PresentationConfig } from './entities/presentation-config.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm/repository/Repository';\nimport { AuthResponse } from './dto/auth-response.dto';\n\n/**\n * Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n */\n@Injectable()\nexport class PresentationsService implements OnModuleInit {\n    /**\n     * Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n     */\n    sdjwtInstance: SDJwtVcInstance;\n\n    /**\n     * Constructor for the PresentationsService.\n     * @param httpService - Instance of HttpService for making HTTP requests.\n     * @param resolverService - Instance of ResolverService for resolving DID documents.\n     * @param vpRequestRepository - Repository for managing VP request configurations.\n     */\n    constructor(\n        private httpService: HttpService,\n        private resolverService: ResolverService,\n        @InjectRepository(PresentationConfig)\n        private vpRequestRepository: Repository,\n    ) {}\n\n    /**\n     * Initializes the SDJwtVcInstance with the necessary configurations.\n     */\n    onModuleInit() {\n        this.sdjwtInstance = new SDJwtVcInstance({\n            hasher: digest,\n            verifier: this.verifier.bind(this),\n            kbVerifier: this.kbVerifier.bind(this),\n            statusListFetcher: this.statusListFetcher.bind(this),\n        });\n    }\n\n    /**\n     * Retrieves all presentation configurations for a given tenant.\n     * @param tenantId - The ID of the tenant for which to retrieve configurations.\n     * @returns A promise that resolves to an array of PresentationConfig entities.\n     */\n    getPresentationConfigs(tenantId: string): Promise {\n        return this.vpRequestRepository.find({\n            where: { tenantId },\n            order: { createdAt: 'DESC' },\n        });\n    }\n\n    /**\n     * Stores a new presentation configuration.\n     * @param vprequest - The PresentationConfig entity to store.\n     * @param tenantId - The ID of the tenant for which to store the configuration.\n     * @returns A promise that resolves to the stored PresentationConfig entity.\n     */\n    storePresentationConfig(vprequest: PresentationConfig, tenantId: string) {\n        vprequest.tenantId = tenantId;\n        return this.vpRequestRepository.save(vprequest);\n    }\n\n    /**\n     * Deletes a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to delete.\n     * @param tenantId - The ID of the tenant for which to delete the configuration.\n     * @returns A promise that resolves when the deletion is complete.\n     */\n    deletePresentationConfig(id: string, tenantId: string) {\n        return this.vpRequestRepository.delete({ id, tenantId });\n    }\n\n    /**\n     * Retrieves a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to retrieve.\n     * @param tenantId - The ID of the tenant for which to retrieve the configuration.\n     * @returns A promise that resolves to the requested PresentationConfig entity.\n     */\n    async getPresentationConfig(\n        id: string,\n        tenantId: string,\n    ): Promise {\n        return this.vpRequestRepository\n            .findOneByOrFail({\n                id,\n                tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException('Request ID invalid not found');\n            });\n    }\n\n    /**\n     * Stores the new registration certificate.\n     * @param registrationCertId - The ID of the registration certificate to store.\n     * @param id - The ID of the presentation configuration to update.\n     * @param tenantId - The ID of the tenant for which to store the registration certificate.\n     * @returns\n     */\n    public storeRCID(registrationCertId: string, id: string, tenantId: string) {\n        return this.vpRequestRepository.update(\n            { id, tenantId },\n            { registrationCert: { id: registrationCertId } },\n        );\n    }\n\n    /**\n     * Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n     * @param data - The data part of the SD-JWT-VC.\n     * @param signature - The signature of the SD-JWT-VC.\n     * @returns\n     */\n    verifier: Verifier = async (data, signature) => {\n        const instance = new SDJwtVcInstance({\n            hasher: digest,\n        });\n        const decodedVC = await instance.decode(`${data}.${signature}`);\n        const payload = decodedVC.jwt?.payload as JWTPayload;\n        const header = decodedVC.jwt?.header as JWK;\n        const publicKey = await this.resolverService.resolvePublicKey(\n            payload,\n            header,\n        );\n        const verify = await ES256.getVerifier(publicKey);\n        return verify(data, signature).catch((err) => {\n            console.log(err);\n            return false;\n        });\n    };\n\n    /**\n     * Fetch the status list from the uri.\n     * @param uri\n     * @returns\n     */\n    private statusListFetcher: (uri: string) => Promise = async (\n        uri: string,\n    ) => {\n        return firstValueFrom(this.httpService.get(uri)).then(\n            (res) => res.data,\n        );\n    };\n\n    /**\n     * Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n     * @param data\n     * @param signature\n     * @param payload\n     * @returns\n     */\n    private kbVerifier: KbVerifier = async (data, signature, payload) => {\n        if (!payload.cnf) {\n            throw new Error('No cnf found in the payload');\n        }\n        const key = await importJWK(payload.cnf.jwk as JWK, 'ES256');\n        return jwtVerify(`${data}.${signature}`, key).then(\n            () => true,\n            () => false,\n        );\n    };\n\n    /**\n     * Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n     * @param res\n     * @param requiredFields\n     * @returns\n     */\n    parseResponse(\n        res: AuthResponse,\n        requiredFields: string[],\n        keyBindingNonce: string,\n    ) {\n        const attestations = Object.keys(res.vp_token);\n        const att = attestations.map((att) =>\n            this.sdjwtInstance\n                .verify(res.vp_token[att], {\n                    requiredClaimKeys: requiredFields,\n                    keyBindingNonce,\n                })\n                .then(\n                    (result) => {\n                        return {\n                            id: att,\n                            values: {\n                                ...result.payload,\n                                cnf: undefined, // remove cnf for simplicity\n                                status: undefined, // remove status for simplicity\n                            },\n                        };\n                    },\n                    /* (err) => {\n                        throw new Error\n                        //(console.log(err);\n                        return {\n                            id: att,\n                            error: err.message,\n                        };\n                    }, */\n                ),\n        );\n        return Promise.all(att);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistrarConfig.html":{"url":"classes/RegistrarConfig.html","title":"class - RegistrarConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistrarConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/registrar-config.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrarConfig class represents the configuration for the registrar service.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                accessCertificateId\n                            \n                            \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        accessCertificateId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar-config.ts:12\n                        \n                    \n\n            \n                \n                    ID of the access certificate.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar-config.ts:8\n                        \n                    \n\n            \n                \n                    ID of the relying party.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class RegistrarConfig {\n    /**\n     * ID of the relying party.\n     */\n    id?: string;\n    /**\n     * ID of the access certificate.\n     */\n    accessCertificateId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RegistrarModule.html":{"url":"modules/RegistrarModule.html","title":"module - RegistrarModule","body":"\n                   \n\n\n\n\n    Modules\n    RegistrarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_providers\n\n\n\ncluster_RegistrarModule_imports\n\n\n\ncluster_RegistrarModule_exports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/registrar/registrar.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            RegistrarModule is responsible for managing the registrar service.\nIt provides the RegistrarService and imports necessary modules.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            PresentationsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RegistrarService } from './registrar.service';\nimport { CryptoModule } from '../crypto/crypto.module';\nimport * as Joi from 'joi';\nimport { PresentationsModule } from '../verifier/presentations/presentations.module';\n\n/**\n * Validation schema for the registrar module.\n * Defines the required environment variables and their types.\n */\nexport const REGISTRAR_VALIDATION_SCHEMA = {\n    REGISTRAR_URL: Joi.string(),\n    REGISTRAR_OIDC_URL: Joi.string().when('REGISTRAR_URL', {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    REGISTRAR_OIDC_CLIENT_ID: Joi.string().when('REGISTRAR_URL', {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    REGISTRAR_OIDC_CLIENT_SECRET: Joi.string().when('REGISTRAR_URL', {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n};\n\n/**\n * RegistrarModule is responsible for managing the registrar service.\n * It provides the RegistrarService and imports necessary modules.\n */\n@Module({\n    imports: [CryptoModule, PresentationsModule],\n    providers: [RegistrarService],\n    exports: [RegistrarService],\n})\nexport class RegistrarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RegistrarService.html":{"url":"injectables/RegistrarService.html","title":"injectable - RegistrarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RegistrarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/registrar.service.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrarService is responsible for managing the interaction with the registrar,\nincluding adding relying parties, access certificates, and registration certificates.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                accessToken\n                            \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                oauth2Client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                addAccessCertificate\n                            \n                            \n                                    Async\n                                addRegistrationCertificate\n                            \n                            \n                                addRp\n                            \n                            \n                                    Async\n                                getAccessCertificateId\n                            \n                            \n                                isEnabled\n                            \n                            \n                                    Private\n                                loadConfig\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                    \n                                    Async\n                                onTenantInit\n                            \n                            \n                                    Async\n                                refreshAccessToken\n                            \n                            \n                                    Private\n                                saveConfig\n                            \n                            \n                                    Private\n                                storeExistingRp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, presentationsService: PresentationsService)\n                    \n                \n                        \n                            \n                                Defined in src/registrar/registrar.service.ts:61\n                            \n                        \n\n                \n                    \n                            Constructor for the RegistrarService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ConfigService for accessing configuration values.\n\n\n                                                        \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of CryptoService for cryptographic operations.\n\n\n                                                        \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of PresentationsService for handling presentations.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        addAccessCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addAccessCertificate(config: RegistrarConfig, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:235\n                        \n                    \n\n\n            \n                \n                        Add a new access certificate to the registrar.\nThis is only needed once, when the access certificate is created.\nIf the access certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            RegistrarConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addRegistrationCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addRegistrationCertificate(req: RegistrationCertificateRequest, dcql_query: any, requestId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:276\n                        \n                    \n\n\n            \n                \n                        Add a new registration certificate to the registrar.\nThis is only needed once, when the registration certificate is created.\nIf the registration certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RegistrationCertificateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dcql_query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addRp\n                        \n                    \n                \n            \n            \n                \naddRp(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:163\n                        \n                    \n\n\n            \n                \n                        Adds a new relying party to the registrar.\nThis is only needed once, when the relying party is created.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAccessCertificateId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAccessCertificateId(config: RegistrarConfig, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:208\n                        \n                    \n\n\n            \n                \n                        Get the access certificate ID from the registrar.\nIf there is no access certificate ID in the config, it will add a new one.\nIf there is one, it will check if it is still valid.\nIf it is revoked, it will add a new one.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            RegistrarConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEnabled\n                        \n                    \n                \n            \n            \n                \nisEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:111\n                        \n                    \n\n\n            \n                \n                        Checks if the registrar service is enabled based on the configuration.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the registrar service is enabled, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadConfig(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:333\n                        \n                    \n\n\n            \n                \n                        Load the registrar configuration from the config file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         RegistrarConfig\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:119\n                        \n                    \n\n\n            \n                \n                        This function is called when the application starts.\nIt will refresh the access token for the registrar.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:78\n                        \n                    \n\n\n            \n                \n                        Initializes the OAuth2 client and registrar client with the necessary configurations.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(TENANT_EVENTS.TENANT_KEYS, {async: true})\n                \n            \n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:131\n                        \n                    \n\n\n            \n                \n                        This function is called when a tenant is initialized.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshAccessToken()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:146\n                        \n                    \n\n\n            \n                \n                        Refreshes the access token for the registrar using client credentials.\nThis method is called periodically to ensure the access token is valid.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        saveConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveConfig(config: RegistrarConfig, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:356\n                        \n                    \n\n\n            \n                \n                        Save the registrar configuration to the config file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            RegistrarConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        storeExistingRp\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeExistingRp(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:190\n                        \n                    \n\n\n            \n                \n                        Stores the existing relying party ID based on the name.\nThis is used when the relying party already exists in the registrar.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the relying party.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The ID of the existing relying party.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:61\n                        \n                    \n\n            \n                \n                    Access token for authenticating requests to the registrar.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:57\n                        \n                    \n\n            \n                \n                    Client for interacting with the registrar API.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oauth2Client\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:53\n                        \n                    \n\n            \n                \n                    OAuth2 client for interacting with the OIDC provider.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { OAuth2Client } from '@badgateway/oauth2-client';\nimport { client } from './generated/client.gen';\nimport {\n    accessCertificateControllerFindOne,\n    accessCertificateControllerRegister,\n    registrationCertificateControllerAll,\n    registrationCertificateControllerRegister,\n    relyingPartyControllerFindAll,\n    relyingPartyControllerRegister,\n} from './generated';\nimport { CryptoService } from '../crypto/crypto.service';\nimport { RegistrationCertificateRequest } from '../verifier/presentations/dto/vp-request.dto';\nimport { PresentationsService } from '../verifier/presentations/presentations.service';\nimport { existsSync, readFileSync, writeFileSync } from 'node:fs';\nimport { RegistrarConfig } from './registrar-config';\nimport { join } from 'node:path';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { TENANT_EVENTS } from '../auth/tenant-events';\n\n/**\n * Repsonse of access certificate request.\n */\ninterface AccessCertificateResponse {\n    /**\n     * Unique identifier of the access certificate.\n     */\n    id: string;\n    /**\n     * The public key in PEM format.\n     */\n    crt: string;\n    /**\n     * Indicates if the access certificate is revoked.\n     */\n    revoked?: boolean;\n}\n\n/**\n * RegistrarService is responsible for managing the interaction with the registrar,\n * including adding relying parties, access certificates, and registration certificates.\n */\n@Injectable()\nexport class RegistrarService implements OnApplicationBootstrap, OnModuleInit {\n    /**\n     * OAuth2 client for interacting with the OIDC provider.\n     */\n    private oauth2Client: OAuth2Client;\n    /**\n     * Client for interacting with the registrar API.\n     */\n    private client: typeof client;\n    /**\n     * Access token for authenticating requests to the registrar.\n     */\n    private accessToken: string;\n\n    /**\n     * Constructor for the RegistrarService.\n     * @param configService - Instance of ConfigService for accessing configuration values.\n     * @param cryptoService - Instance of CryptoService for cryptographic operations.\n     * @param presentationsService - Instance of PresentationsService for handling presentations.\n     */\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private presentationsService: PresentationsService,\n    ) {}\n\n    /**\n     * Initializes the OAuth2 client and registrar client with the necessary configurations.\n     */\n    onModuleInit() {\n        //when not set, we will not use the registrar\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const oidcIssuerUrl =\n            this.configService.getOrThrow('REGISTRAR_OIDC_URL');\n        const clientId = this.configService.getOrThrow(\n            'REGISTRAR_OIDC_CLIENT_ID',\n        );\n        const clientSecret = this.configService.getOrThrow(\n            'REGISTRAR_OIDC_CLIENT_SECRET',\n        );\n\n        this.oauth2Client = new OAuth2Client({\n            server: `${oidcIssuerUrl}/protocol/openid-connect/token`,\n            clientId,\n            clientSecret,\n            discoveryEndpoint: `${oidcIssuerUrl}/.well-known/openid-configuration`,\n        });\n\n        this.client = client;\n        this.client.setConfig({\n            baseUrl: this.configService.getOrThrow('REGISTRAR_URL'),\n            auth: () => this.accessToken,\n        });\n    }\n\n    /**\n     * Checks if the registrar service is enabled based on the configuration.\n     * @returns True if the registrar service is enabled, false otherwise.\n     */\n    isEnabled() {\n        return !!this.configService.get('REGISTRAR_URL');\n    }\n\n    /**\n     * This function is called when the application starts.\n     * It will refresh the access token for the registrar.\n     */\n    async onApplicationBootstrap() {\n        if (!this.configService.get('REGISTRAR_URL')) {\n            return;\n        }\n        await this.refreshAccessToken();\n    }\n\n    /**\n     * This function is called when a tenant is initialized.\n     * @param tenantId\n     */\n    @OnEvent(TENANT_EVENTS.TENANT_KEYS, { async: true })\n    async onTenantInit(tenantId: string) {\n        if (!this.isEnabled()) {\n            return;\n        }\n        const config = this.loadConfig(tenantId);\n        if (!config.id) {\n            config.id = await this.addRp(tenantId);\n        }\n        await this.getAccessCertificateId(config, tenantId);\n    }\n\n    /**\n     * Refreshes the access token for the registrar using client credentials.\n     * This method is called periodically to ensure the access token is valid.\n     */\n    async refreshAccessToken() {\n        await this.oauth2Client.clientCredentials().then((token) => {\n            this.accessToken = token.accessToken;\n            const date = new Date();\n            const expirationDate = new Date(token.expiresAt as number);\n            setTimeout(\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                () => this.refreshAccessToken(),\n                expirationDate.getTime() - date.getTime() - 1000,\n            );\n        });\n    }\n\n    /**\n     * Adds a new relying party to the registrar.\n     * This is only needed once, when the relying party is created.\n     */\n    addRp(tenantId: string): Promise {\n        const name = this.configService.getOrThrow('RP_NAME');\n        return relyingPartyControllerRegister({\n            client: this.client,\n            body: {\n                name,\n            },\n        }).then(async (response) => {\n            const config = this.loadConfig(tenantId);\n            if (response.error) {\n                config.id = await this.storeExistingRp(name);\n                this.saveConfig(config, tenantId);\n                return config.id!;\n            } else {\n                config.id = response.data!['id'];\n                this.saveConfig(config, tenantId);\n                return response.data!['id'];\n            }\n        });\n    }\n\n    /**\n     * Stores the existing relying party ID based on the name.\n     * This is used when the relying party already exists in the registrar.\n     * @param name - The name of the relying party.\n     * @returns The ID of the existing relying party.\n     */\n    private storeExistingRp(name: string) {\n        return relyingPartyControllerFindAll({\n            client: this.client,\n            query: {\n                name,\n            },\n        }).then((response) => {\n            return response.data!.find((item) => item.name === name)?.id;\n        });\n    }\n\n    /**\n     * Get the access certificate ID from the registrar.\n     * If there is no access certificate ID in the config, it will add a new one.\n     * If there is one, it will check if it is still valid.\n     * If it is revoked, it will add a new one.\n     * @param config\n     */\n    async getAccessCertificateId(config: RegistrarConfig, tenantId: string) {\n        // if there is no access certificate ID in the config, we need to add it\n        if (!config.accessCertificateId) {\n            await this.addAccessCertificate(config, tenantId);\n        }\n        // if there is one, check if it is still valid\n        await accessCertificateControllerFindOne({\n            client: this.client,\n            path: { rp: config.id, id: config.accessCertificateId! },\n        }).then((res) => {\n            if (res.error) {\n                console.error('Error finding access certificate:', res.error);\n            }\n            const data = res.data as AccessCertificateResponse;\n            if (data.revoked) {\n                console.warn('Access certificate is revoked, adding a new one');\n                return this.addAccessCertificate(config, tenantId);\n            }\n        });\n    }\n\n    /**\n     * Add a new access certificate to the registrar.\n     * This is only needed once, when the access certificate is created.\n     * If the access certificate already exists, it will be returned.\n     * @returns\n     */\n    private async addAccessCertificate(\n        config: RegistrarConfig,\n        tenantId: string,\n    ): Promise {\n        const host = this.configService\n            .getOrThrow('PUBLIC_URL')\n            .replace('https://', '');\n        return accessCertificateControllerRegister({\n            client: this.client,\n            body: {\n                publicKey: await this.cryptoService.keyService.getPublicKey(\n                    'pem',\n                    tenantId,\n                ),\n                dns: [host],\n            },\n            path: {\n                rp: config.id,\n            },\n        }).then((res) => {\n            if (res.error) {\n                console.error('Error adding access certificate:', res.error);\n                throw new Error('Error adding access certificate');\n            }\n            //store the cert\n            this.cryptoService.storeAccessCertificate(\n                res.data!['crt'],\n                tenantId,\n            );\n            config.accessCertificateId = res.data!['id'];\n            this.saveConfig(config, tenantId);\n            return res.data!['id'];\n        });\n    }\n\n    /**\n     * Add a new registration certificate to the registrar.\n     * This is only needed once, when the registration certificate is created.\n     * If the registration certificate already exists, it will be returned.\n     * @returns\n     */\n    async addRegistrationCertificate(\n        req: RegistrationCertificateRequest,\n        //TODO: check if the dcql_query is covered by the registration certificate. If not, we need to throw an error since we do not know the new purpose for it.\n        dcql_query: any,\n        requestId: string,\n        tenantId: string,\n    ) {\n        const rp = this.loadConfig(tenantId).id;\n\n        //TODO: need to check if the access certificate is bound to the access certificate with the subject. Also that the requested fields are matching.\n\n        const certs =\n            (await registrationCertificateControllerAll({\n                client: this.client,\n                path: {\n                    rp,\n                },\n            }).then((res) =>\n                res.data?.filter(\n                    (cert) =>\n                        cert.revoked == null && cert.id === (req.id as string),\n                ),\n            )) || [];\n\n        if (certs?.length > 0) {\n            return certs[0].jwt;\n        }\n\n        return registrationCertificateControllerRegister({\n            client: this.client,\n            path: {\n                rp,\n            },\n            body: req.body,\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\n                    'Error adding registration certificate:',\n                    res.error,\n                );\n                throw new Error('Error adding registration certificate');\n            }\n\n            //TODO: write the ID to the config so its easier to use it. Easier than writing the comparison algorithm (any maybe someone wants to use a different one)\n            await this.presentationsService.storeRCID(\n                res.data!['id'],\n                requestId,\n                tenantId,\n            );\n            return res.data!['jwt'];\n        });\n    }\n\n    /**\n     * Load the registrar configuration from the config file.\n     * @returns\n     */\n    private loadConfig(tenantId: string): RegistrarConfig {\n        const filePath = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'registrar.json',\n        );\n\n        if (!existsSync(filePath)) {\n            // If the config file does not exist, create an empty config\n            const initialConfig: RegistrarConfig = {};\n            writeFileSync(filePath, JSON.stringify(initialConfig, null, 2));\n            return initialConfig;\n        }\n        const config = JSON.parse(\n            readFileSync(filePath, 'utf-8'),\n        ) as RegistrarConfig;\n        return config;\n    }\n\n    /**\n     * Save the registrar configuration to the config file.\n     * @param config\n     */\n    private saveConfig(config: RegistrarConfig, tenantId: string) {\n        const filePath = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            'registrar.json',\n        );\n        writeFileSync(filePath, JSON.stringify(config, null, 2));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistrationCertificateRequest.html":{"url":"classes/RegistrationCertificateRequest.html","title":"class - RegistrationCertificateRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistrationCertificateRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/vp-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrationCertificateRequest DTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                body\n                            \n                            \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RegistrationCertificateCreation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:17\n                        \n                    \n\n            \n                \n                    The body of the registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:12\n                        \n                    \n\n            \n                \n                    Identifier of the registration certificate that got issued.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsString } from 'class-validator';\nimport { RegistrationCertificateCreation } from '../../../registrar/generated';\n\n/**\n * RegistrationCertificateRequest DTO\n */\nexport class RegistrationCertificateRequest {\n    /**\n     * Identifier of the registration certificate that got issued.\n     */\n    @IsString()\n    id?: string;\n    /**\n     * The body of the registration certificate request containing the necessary details.\n     */\n    @IsObject()\n    body: RegistrationCertificateCreation;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ResolverModule.html":{"url":"modules/ResolverModule.html","title":"module - ResolverModule","body":"\n                   \n\n\n\n\n    Modules\n    ResolverModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_providers\n\n\n\ncluster_ResolverModule_exports\n\n\n\n\nResolverService \n\nResolverService \n\n\n\nResolverModule\n\nResolverModule\n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/resolver/resolver.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ResolverService } from './resolver.service';\nimport { HttpModule } from '@nestjs/axios';\n\n@Module({\n    imports: [HttpModule],\n    providers: [ResolverService],\n    exports: [ResolverService],\n})\nexport class ResolverModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResolverService.html":{"url":"injectables/ResolverService.html","title":"injectable - ResolverService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResolverService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/resolver.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for resolving public keys from JWT payloads and headers.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                resolvePublicKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/resolver/resolver.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resolvePublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolvePublicKey(payload: JWTPayload, header: JWK)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/resolver/resolver.service.ts:21\n                        \n                    \n\n\n            \n                \n                        Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWK\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { JWK, JWTPayload } from 'jose';\nimport { HttpService } from '@nestjs/axios';\nimport { firstValueFrom } from 'rxjs';\nimport { X509Certificate } from 'node:crypto';\nimport { IssuerMetadata } from './dto/issuer-metadata.dto';\n\n/**\n * Service for resolving public keys from JWT payloads and headers.\n */\n@Injectable()\nexport class ResolverService {\n    constructor(private httpService: HttpService) {}\n\n    /**\n     * Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n     * @param payload\n     * @param header\n     * @returns\n     */\n    async resolvePublicKey(payload: JWTPayload, header: JWK): Promise {\n        if (!payload.iss) {\n            throw new Error('Issuer not found');\n        }\n\n        if (header.x5c) {\n            //TODO: validate the certificate and the chain of trust!\n            const certs = header.x5c.map(\n                (cert) => new X509Certificate(Buffer.from(cert, 'base64')),\n            );\n            const cert = certs[0];\n            if (!cert.subjectAltName?.includes(new URL(payload.iss).hostname)) {\n                throw new Error('Subject and issuer do not match');\n            }\n            return cert.publicKey.export({ format: 'jwk' }) as JWK;\n        }\n        //checl if the key is in the header as jwk\n        if (header['jwk']) {\n            return header['jwk'] as JWK;\n        }\n\n        const response = await firstValueFrom(\n            this.httpService.get(\n                `${payload.iss}/.well-known/jwt-vc-issuer`,\n            ),\n        ).then(\n            (r) => r.data,\n            () => {\n                throw new ConflictException('Issuer not reachable');\n            },\n        );\n        const key = response.jwks.keys.find((key) => key.kid === header.kid);\n        if (!key) {\n            throw new Error('Key not found');\n        }\n        return key;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SchemaResponse.html":{"url":"classes/SchemaResponse.html","title":"class - SchemaResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SchemaResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/dto/schema-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                $schema\n                            \n                            \n                                properties\n                            \n                            \n                                required\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        $schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'https://json-schema.org/draft/2020-12/schema'\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        required\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'object'\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class SchemaResponse {\n    '$schema' = 'https://json-schema.org/draft/2020-12/schema';\n    type = 'object';\n    properties: Record;\n    required: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Session.html":{"url":"entities/Session.html","title":"entity - Session","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Session\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/entities/session.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a user session in the application.\nIt includes various properties such as credentials, authorization code,\nrequest URI, authorization queries, and more.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                auth_queries\n                            \n                            \n                                    \n                                    Optional\n                                authorization_code\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                credentialPayload\n                            \n                            \n                                    \n                                    Optional\n                                credentials\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                issuanceId\n                            \n                            \n                                    \n                                notifications\n                            \n                            \n                                    \n                                    Optional\n                                notifyWebhook\n                            \n                            \n                                    \n                                    Optional\n                                offer\n                            \n                            \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    Optional\n                                vp_nonce\n                            \n                            \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        auth_queries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthorizeQueries\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:64\n                        \n                    \n\n            \n                \n                    Authorization queries associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        authorization_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:54\n                        \n                    \n\n            \n                \n                    Authorization code for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:74\n                        \n                    \n\n            \n                \n                    Credential offer object containing details about the credential offer or presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentialPayload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OfferRequestDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:84\n                        \n                    \n\n            \n                \n                    Credential payload containing the offer request details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :     VerificationResult[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:49\n                        \n                    \n\n            \n                \n                    Verified credentials from the verification process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:41\n                        \n                    \n\n            \n                \n                    Unique identifier for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        issuanceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Notification[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:99\n                        \n                    \n\n            \n                \n                    Notifications associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        notifyWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:94\n                        \n                    \n\n            \n                \n                    Webhook configuration to send the result of the notification response.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        offer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CredentialOfferObject\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:79\n                        \n                    \n\n            \n                \n                    Credential offer object containing details about the credential offer or presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:59\n                        \n                    \n\n            \n                \n                    Request URI from the authorization request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:104\n                        \n                    \n\n            \n                \n                    Tenant ID for multi-tenancy support.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        vp_nonce\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:69\n                        \n                    \n\n            \n                \n                    Noncce from the Verifiable Presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:89\n                        \n                    \n\n            \n                \n                    Webhook configuration to send result and may receive further information.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n    CredentialOfferObject,\n    NotificationEvent,\n} from '@openid4vc/openid4vci';\nimport { VerificationResult } from '@sd-jwt/sd-jwt-vc';\nimport { AuthorizeQueries } from '../../issuer/authorize/dto/authorize-request.dto';\nimport { OfferRequestDto } from '../../issuer/oid4vci/dto/offer-request.dto';\nimport { Column, Entity, PrimaryColumn } from 'typeorm';\nimport { WebhookConfig } from '../../utils/webhook/webhook.dto';\n\n/**\n * Represents a session entity for managing user sessions in the application.\n */\nexport type Notification = {\n    /**\n     * Unique identifier for the notification.\n     */\n    id: string;\n    /**\n     * The type of notification.\n     */\n    event?: NotificationEvent;\n\n    /**\n     * The credential ID associated with the notification.\n     */\n    credentialConfigurationId: string;\n};\n\n/**\n * Entity representing a user session in the application.\n * It includes various properties such as credentials, authorization code,\n * request URI, authorization queries, and more.\n */\n@Entity()\nexport class Session {\n    /**\n     * Unique identifier for the session.\n     */\n    @PrimaryColumn('uuid')\n    id: string;\n\n    @Column('varchar', { nullable: true })\n    issuanceId?: string;\n    /**\n     * Verified credentials from the verification process.\n     */\n    @Column('json', { nullable: true })\n    credentials?: VerificationResult[];\n    /**\n     * Authorization code for the session.\n     */\n    @Column('varchar', { nullable: true })\n    authorization_code?: string;\n    /**\n     * Request URI from the authorization request.\n     */\n    @Column('varchar', { nullable: true })\n    request_uri?: string;\n    /**\n     * Authorization queries associated with the session.\n     */\n    @Column('json', { nullable: true })\n    auth_queries?: AuthorizeQueries;\n    /**\n     * Noncce from the Verifiable Presentation request.\n     */\n    @Column('varchar', { nullable: true })\n    vp_nonce?: string;\n    /**\n     * Credential offer object containing details about the credential offer or presentation request.\n     */\n    @Column({ type: 'date', default: () => 'CURRENT_TIMESTAMP' })\n    createdAt: Date;\n    /**\n     * Credential offer object containing details about the credential offer or presentation request.\n     */\n    @Column('json', { nullable: true })\n    offer?: CredentialOfferObject;\n    /**\n     * Credential payload containing the offer request details.\n     */\n    @Column('json', { nullable: true })\n    credentialPayload?: OfferRequestDto;\n    /**\n     * Webhook configuration to send result and may receive further information.\n     */\n    @Column('json', { nullable: true })\n    webhook?: WebhookConfig;\n    /**\n     * Webhook configuration to send the result of the notification response.\n     */\n    @Column('json', { nullable: true })\n    notifyWebhook?: WebhookConfig;\n    /**\n     * Notifications associated with the session.\n     */\n    @Column('json', { default: JSON.stringify([]) })\n    notifications: Notification[];\n    /**\n     * Tenant ID for multi-tenancy support.\n     */\n    @Column('varchar')\n    tenantId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SessionController.html":{"url":"controllers/SessionController.html","title":"controller - SessionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SessionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                session\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getAllSessions\n                            \n                            \n                                    \n                                getSession\n                            \n                            \n                                    \n                                revokeAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getAllSessions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllSessions()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:23\n                        \n                    \n\n\n            \n                \n                        Retrieves all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSession(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:32\n                        \n                    \n\n\n            \n                \n                        Retrieves the session information for a given session ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe identifier of the session.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        revokeAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    revokeAll(value: StatusUpdateDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('revoke')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:42\n                        \n                    \n\n\n            \n                \n                        Update the status of the credentials of a specific session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Post, UseGuards, Body } from '@nestjs/common';\nimport { ApiSecurity, ApiTags } from '@nestjs/swagger';\nimport { SessionService } from './session.service';\nimport { Session } from './entities/session.entity';\nimport { JwtAuthGuard } from '../auth/auth.guard';\nimport { Token, TokenPayload } from '../auth/token.decorator';\nimport { StatusUpdateDto } from '../issuer/status-list/dto/status-update.dto';\nimport { StatusListService } from '../issuer/status-list/status-list.service';\n\n@ApiTags('Session management')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2')\n@Controller('session')\nexport class SessionController {\n    constructor(\n        private readonly sessionService: SessionService,\n        private readonly statusListService: StatusListService,\n    ) {}\n\n    /**\n     * Retrieves all sessions.\n     */ @Get()\n    getAllSessions(): Promise {\n        return this.sessionService.getAll();\n    }\n\n    /**\n     * Retrieves the session information for a given session ID.\n     * @param id - The identifier of the session.\n     */\n    @Get(':id')\n    getSession(@Param('id') id: string): Promise {\n        return this.sessionService.get(id);\n    }\n\n    /**\n     * Update the status of the credentials of a specific session.\n     * @param value\n     * @returns\n     */\n    @Post('revoke')\n    revokeAll(@Body() value: StatusUpdateDto, @Token() user: TokenPayload) {\n        return this.statusListService.updateStatus(value, user.sub);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SessionLogContext.html":{"url":"interfaces/SessionLogContext.html","title":"interface - SessionLogContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SessionLogContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger-context.ts\n        \n\n\n            \n                Description\n            \n            \n                Context for session logging, including session ID, tenant ID, flow type, and optional stage.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            flowType\n                                        \n                                \n                                \n                                        \n                                            sessionId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stage\n                                        \n                                \n                                \n                                        \n                                            tenantId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger-context.ts:21\n                            \n                        \n                \n                    \n                        Additional context information for the session.\n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        flowType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        flowType:     \"OID4VCI\" | \"OID4VP\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"OID4VCI\" | \"OID4VP\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Type of flow being logged (e.g., OID4VCI, OID4VP).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sessionId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sessionId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier for the session.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional stage of the flow, useful for tracking progress.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tenantId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tenantId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identifier for the tenant associated with the session.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SessionLogContext {\n    /**\n     * Unique identifier for the session.\n     */\n    sessionId: string;\n    /**\n     * Identifier for the tenant associated with the session.\n     */\n    tenantId: string;\n    /**\n     * Type of flow being logged (e.g., OID4VCI, OID4VP).\n     */\n    flowType: 'OID4VCI' | 'OID4VP';\n    /**\n     * Optional stage of the flow, useful for tracking progress.\n     */\n    stage?: string;\n    /**\n     * Additional context information for the session.\n     */\n    [key: string]: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerInterceptor.html":{"url":"injectables/SessionLoggerInterceptor.html","title":"injectable - SessionLoggerInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor for logging session-related requests and responses.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                isEnabled\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                            \n                                    Private\n                                sanitizeBody\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, logger: PinoLogger, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger.interceptor.ts:19\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerInterceptor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nReflector instance for accessing metadata.\n\n\n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPinoLogger instance for logging.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfigService for accessing configuration.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.interceptor.ts:44\n                        \n                    \n\n\n            \n                \n                        Intercepts the request and logs session-related information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nExecution context of the request.\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCall handler to proceed with the request.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that emits the response data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sanitizeBody\n                        \n                    \n                \n            \n            \n                \n                        \n                    sanitizeBody(body: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.interceptor.ts:141\n                        \n                    \n\n\n            \n                \n                        Sanitizes the request body to remove sensitive information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request body to sanitize.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Sanitized body.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        isEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/session-logger.interceptor.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ConfigService } from '@nestjs/config';\nimport { Observable } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { PinoLogger } from 'nestjs-pino';\nimport { SESSION_LOGGER_KEY } from './session-logger.decorator';\n\n/**\n * Interceptor for logging session-related requests and responses.\n */\n@Injectable()\nexport class SessionLoggerInterceptor implements NestInterceptor {\n    private readonly isEnabled: boolean;\n\n    /**\n     * Constructor for SessionLoggerInterceptor.\n     * @param reflector - Reflector instance for accessing metadata.\n     * @param logger - PinoLogger instance for logging.\n     * @param configService - ConfigService for accessing configuration.\n     */\n    constructor(\n        private readonly reflector: Reflector,\n        private readonly logger: PinoLogger,\n        private readonly configService: ConfigService,\n    ) {\n        this.isEnabled = this.configService.get(\n            'LOG_ENABLE_SESSION_LOGGER',\n            false,\n        );\n    }\n\n    /**\n     * Intercepts the request and logs session-related information.\n     * @param context - Execution context of the request.\n     * @param next - Call handler to proceed with the request.\n     * @returns An observable that emits the response data.\n     */\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        const metadata = this.reflector.get(\n            SESSION_LOGGER_KEY,\n            context.getHandler(),\n        );\n\n        if (!metadata || !this.isEnabled) {\n            return next.handle();\n        }\n\n        const { sessionIdParam, flowType } = metadata;\n        const request = context.switchToHttp().getRequest();\n        const response = context.switchToHttp().getResponse();\n\n        // Extract session ID from various sources\n        const sessionId =\n            request.params?.[sessionIdParam] ||\n            request.body?.[sessionIdParam] ||\n            request.headers['x-session-id'] ||\n            request.query?.[sessionIdParam];\n\n        const tenantId = request.params?.tenantId;\n        const method = request.method;\n        const url = request.url;\n\n        // Set context for this logger instance\n        this.logger.setContext('SessionLogger');\n\n        // Create log context\n        const logContext = {\n            sessionId,\n            tenantId,\n            flowType,\n            endpoint: `${method} ${url}`,\n        };\n\n        // Log the start of the request\n        this.logger.info(\n            {\n                ...logContext,\n                event: 'request_start',\n                method,\n                url,\n                headers: {\n                    'user-agent': request.headers['user-agent'],\n                    'content-type': request.headers['content-type'],\n                },\n                body: this.sanitizeBody(request.body),\n            },\n            `[${flowType}] Starting ${method} ${url} for session ${sessionId}`,\n        );\n\n        const startTime = Date.now();\n\n        return next.handle().pipe(\n            tap((data) => {\n                const duration = Date.now() - startTime;\n                this.logger.info(\n                    {\n                        ...logContext,\n                        event: 'request_success',\n                        method,\n                        url,\n                        statusCode: response.statusCode,\n                        duration,\n                        responseSize: JSON.stringify(data || {}).length,\n                    },\n                    `[${flowType}] Completed ${method} ${url} for session ${sessionId} in ${duration}ms`,\n                );\n            }),\n            catchError((error) => {\n                const duration = Date.now() - startTime;\n                this.logger.error(\n                    {\n                        ...logContext,\n                        event: 'request_error',\n                        method,\n                        url,\n                        error: {\n                            name: error.name,\n                            message: error.message,\n                            stack: error.stack,\n                        },\n                        duration,\n                    },\n                    `[${flowType}] Error in ${method} ${url} for session ${sessionId}: ${error.message}`,\n                );\n                throw error;\n            }),\n        );\n    }\n\n    /**\n     * Sanitizes the request body to remove sensitive information.\n     * @param body - The request body to sanitize.\n     * @returns Sanitized body.\n     */\n    private sanitizeBody(body: any): any {\n        if (!body) return body;\n\n        // Create a copy to avoid modifying the original\n        const sanitized = { ...body };\n\n        // Remove sensitive fields\n        const sensitiveFields = [\n            'password',\n            'token',\n            'secret',\n            'key',\n            'private_key',\n            'access_token',\n            'refresh_token',\n        ];\n\n        sensitiveFields.forEach((field) => {\n            if (sanitized[field]) {\n                sanitized[field] = '[REDACTED]';\n            }\n        });\n\n        return sanitized;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerService.html":{"url":"injectables/SessionLoggerService.html","title":"injectable - SessionLoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for logging session-related events and errors.\nUses PinoLogger for structured logging.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                isEnabled\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logAuthorizationRequest\n                            \n                            \n                                logCredentialIssuance\n                            \n                            \n                                logCredentialVerification\n                            \n                            \n                                logFlowComplete\n                            \n                            \n                                logFlowError\n                            \n                            \n                                logFlowStart\n                            \n                            \n                                logNotification\n                            \n                            \n                                logSession\n                            \n                            \n                                logSessionError\n                            \n                            \n                                logTokenExchange\n                            \n                            \n                                    Private\n                                shouldLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: PinoLogger, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger.service.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPinoLogger instance for logging.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfigService for accessing environment configuration.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \nlogAuthorizationRequest(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:146\n                        \n                    \n\n\n            \n                \n                        Log authorization request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialIssuance\n                        \n                    \n                \n            \n            \n                \nlogCredentialIssuance(context: SessionLogContext, credentialType: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Log credential issuance step\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialVerification\n                        \n                    \n                \n            \n            \n                \nlogCredentialVerification(context: SessionLogContext, verificationResult: boolean, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Log credential presentation verification\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                verificationResult\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowComplete\n                        \n                    \n                \n            \n            \n                \nlogFlowComplete(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Log session flow completion\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowError\n                        \n                    \n                \n            \n            \n                \nlogFlowError(context: SessionLogContext, error: Error, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Log session flow error\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowStart\n                        \n                    \n                \n            \n            \n                \nlogFlowStart(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Log session flow start\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logNotification\n                        \n                    \n                \n            \n            \n                \nlogNotification(context: SessionLogContext, notificationEvent: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:180\n                        \n                    \n\n\n            \n                \n                        Log notification events\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                notificationEvent\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSession\n                        \n                    \n                \n            \n            \n                \nlogSession(context: SessionLogContext, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:202\n                        \n                    \n\n\n            \n                \n                        Generic session log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSessionError\n                        \n                    \n                \n            \n            \n                \nlogSessionError(context: SessionLogContext, error: Error, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:221\n                        \n                    \n\n\n            \n                \n                        Generic session error log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logTokenExchange\n                        \n                    \n                \n            \n            \n                \nlogTokenExchange(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:163\n                        \n                    \n\n\n            \n                \n                        Log token exchange\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldLog\n                        \n                    \n                \n            \n            \n                \n                        \n                    shouldLog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        isEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/session-logger.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PinoLogger } from 'nestjs-pino';\nimport { ConfigService } from '@nestjs/config';\nimport { SessionLogContext } from './session-logger-context';\n\n/**\n * Service for logging session-related events and errors.\n * Uses PinoLogger for structured logging.\n */\n@Injectable()\nexport class SessionLoggerService {\n    private readonly isEnabled: boolean;\n\n    /**\n     * Constructor for SessionLoggerService.\n     * @param logger - PinoLogger instance for logging.\n     * @param configService - ConfigService for accessing environment configuration.\n     */\n    constructor(\n        private readonly logger: PinoLogger,\n        private readonly configService: ConfigService,\n    ) {\n        this.logger.setContext('SessionLoggerService');\n        this.isEnabled = this.configService.get(\n            'LOG_ENABLE_SESSION_LOGGER',\n            false,\n        );\n    }\n\n    private shouldLog(): boolean {\n        return this.isEnabled;\n    }\n\n    /**\n     * Log session flow start\n     */\n    logFlowStart(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow started for session ${context.sessionId} in tenant ${context.tenantId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'flow_start',\n                stage: 'initialization',\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow completion\n     */\n    logFlowComplete(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow completed for session ${context.sessionId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'flow_complete',\n                stage: 'completion',\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow error\n     */\n    logFlowError(\n        context: SessionLogContext,\n        error: Error,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow error for session ${context.sessionId}: ${error.message}`;\n\n        this.logger.error(\n            {\n                ...context,\n                event: 'flow_error',\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log credential issuance step\n     */\n    logCredentialIssuance(\n        context: SessionLogContext,\n        credentialType: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'credential_issuance',\n                stage: 'credential_creation',\n                credentialType,\n                ...additionalData,\n            },\n            `[${context.flowType}] Issuing credential of type ${credentialType} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log credential presentation verification\n     */\n    logCredentialVerification(\n        context: SessionLogContext,\n        verificationResult: boolean,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'credential_verification',\n                stage: 'verification',\n                verificationResult,\n                ...additionalData,\n            },\n            `[${context.flowType}] Credential verification ${verificationResult ? 'succeeded' : 'failed'} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log authorization request\n     */\n    logAuthorizationRequest(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'authorization_request',\n                stage: 'authorization',\n                ...additionalData,\n            },\n            `[${context.flowType}] Authorization request created for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log token exchange\n     */\n    logTokenExchange(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'token_exchange',\n                stage: 'token_exchange',\n                ...additionalData,\n            },\n            `[${context.flowType}] Token exchange for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log notification events\n     */\n    logNotification(\n        context: SessionLogContext,\n        notificationEvent: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'notification',\n                stage: 'notification',\n                notificationEvent,\n                ...additionalData,\n            },\n            `[${context.flowType}] Notification ${notificationEvent} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Generic session log method\n     */\n    logSession(\n        context: SessionLogContext,\n        message: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}`,\n        );\n    }\n\n    /**\n     * Generic session error log method\n     */\n    logSessionError(\n        context: SessionLogContext,\n        error: Error,\n        message: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.error(\n            {\n                ...context,\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}: ${error.message}`,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SessionModule.html":{"url":"modules/SessionModule.html","title":"module - SessionModule","body":"\n                   \n\n\n\n\n    Modules\n    SessionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_SessionModule_exports\n\n\n\ncluster_SessionModule_imports\n\n\n\n\nStatusListModule\n\nStatusListModule\n\n\n\nSessionModule\n\nSessionModule\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/session/session.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            SessionModule is responsible for managing user sessions.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SessionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SessionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SessionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SessionService } from './session.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Session } from './entities/session.entity';\nimport { SessionController } from './session.controller';\nimport * as Joi from 'joi';\nimport { StatusListModule } from '../issuer/status-list/status-list.module';\n\n/**\n * Module for managing user sessions.\n */\nexport const SESSION_VALIDATION_SCHEMA = {\n    SESSION_TIDY_UP_INTERVAL: Joi.number().default(60 * 60), // default to every hour\n    SESSION_TTL: Joi.number().default(24 * 60 * 60), // default to 24 hours\n};\n\n/**\n * SessionModule is responsible for managing user sessions.\n */\n@Module({\n    imports: [TypeOrmModule.forFeature([Session]), StatusListModule],\n    providers: [SessionService],\n    exports: [SessionService],\n    controllers: [SessionController],\n})\nexport class SessionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionService.html":{"url":"injectables/SessionService.html","title":"injectable - SessionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                create\n                            \n                            \n                                get\n                            \n                            \n                                getAll\n                            \n                            \n                                getBy\n                            \n                            \n                                onApplicationBootstrap\n                            \n                            \n                                tidyUpSessions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionRepository: Repository, configService: ConfigService, schedulerRegistry: SchedulerRegistry)\n                    \n                \n                        \n                            \n                                Defined in src/session/session.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schedulerRegistry\n                                                  \n                                                        \n                                                                    SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(issuer_state: string, tenantId: string, values: QueryDeepPartialEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:50\n                        \n                    \n\n\n            \n                \n                        Update an existing session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            QueryDeepPartialEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(session: DeepPartial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Create a new session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Get a session by its state.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAll\n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:65\n                        \n                    \n\n\n            \n                \n                        Get all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBy\n                        \n                    \n                \n            \n            \n                \ngetBy(where: FindOptionsWhere)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:83\n                        \n                    \n\n\n            \n                \n                        Get a session by a specific condition.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                            FindOptionsWhere\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \nonApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:23\n                        \n                    \n\n\n            \n                \n                        Register the tidy up cron job on application bootstrap.\nThis will run every hour by default, but can be configured via the SESSION_TIDY_UP_INTERVAL config variable.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tidyUpSessions\n                        \n                    \n                \n            \n            \n                \ntidyUpSessions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:90\n                        \n                    \n\n\n            \n                \n                        Tidy up sessions that are older than 1 day.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from '@nestjs/common';\nimport { Session } from './entities/session.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DeepPartial, FindOptionsWhere, LessThan, Repository } from 'typeorm';\nimport { QueryDeepPartialEntity } from 'typeorm/query-builder/QueryPartialEntity';\nimport { SchedulerRegistry } from '@nestjs/schedule';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class SessionService implements OnApplicationBootstrap {\n    constructor(\n        @InjectRepository(Session)\n        private sessionRepository: Repository,\n        private readonly configService: ConfigService,\n        private readonly schedulerRegistry: SchedulerRegistry,\n    ) {}\n\n    /**\n     * Register the tidy up cron job on application bootstrap.\n     * This will run every hour by default, but can be configured via the `SESSION_TIDY_UP_INTERVAL` config variable.\n     * @returns\n     */\n    onApplicationBootstrap() {\n        const callback = () => {\n            void this.tidyUpSessions();\n        };\n        const intervalTime =\n            this.configService.getOrThrow('SESSION_TIDY_UP_INTERVAL') *\n            1000;\n        const interval = setInterval(callback, intervalTime);\n        this.schedulerRegistry.addInterval('tidyUpSessions', interval);\n        return this.tidyUpSessions();\n    }\n\n    /**\n     * Create a new session.\n     * @param session\n     * @returns\n     */\n    create(session: DeepPartial) {\n        return this.sessionRepository.save(session);\n    }\n\n    /**\n     * Update an existing session.\n     * @param issuer_state\n     * @param values\n     * @returns\n     */\n    add(\n        issuer_state: string,\n        tenantId: string,\n        values: QueryDeepPartialEntity,\n    ) {\n        return this.sessionRepository.update(\n            { id: issuer_state, tenantId },\n            values,\n        );\n    }\n\n    /**\n     * Get all sessions.\n     * @returns\n     */\n    getAll(): Promise {\n        return this.sessionRepository.find();\n    }\n\n    /**\n     * Get a session by its state.\n     * @param state\n     * @returns\n     */\n    get(state: string) {\n        return this.sessionRepository.findOneByOrFail({ id: state });\n    }\n\n    /**\n     * Get a session by a specific condition.\n     * @param where\n     * @returns\n     */\n    getBy(where: FindOptionsWhere) {\n        return this.sessionRepository.findOneByOrFail(where);\n    }\n\n    /**\n     * Tidy up sessions that are older than 1 day.\n     */\n    tidyUpSessions() {\n        const ttl = this.configService.getOrThrow('SESSION_TTL') * 1000;\n        return this.sessionRepository.delete({\n            createdAt: LessThan(new Date(Date.now() - ttl)),\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StatusListController.html":{"url":"controllers/StatusListController.html","title":"controller - StatusListController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StatusListController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/status-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getList\n                        \n                    \n                \n            \n            \n                \n                        \n                    getList(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('status-list')@Header('Content-Type', 'application/statuslist+jwt')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.controller.ts:16\n                        \n                    \n\n\n            \n                \n                        Get the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header, Param } from '@nestjs/common';\nimport { StatusListService } from './status-list.service';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('Status management')\n@Controller(':tenantId/status-management')\nexport class StatusListController {\n    constructor(private statusListService: StatusListService) {}\n\n    /**\n     * Get the status list\n     * @returns\n     */\n    @Get('status-list')\n    @Header('Content-Type', 'application/statuslist+jwt')\n    getList(@Param('tenantId') tenantId: string) {\n        return this.statusListService.getList(tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StatusListFile.html":{"url":"interfaces/StatusListFile.html","title":"interface - StatusListFile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StatusListFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            bits\n                                        \n                                \n                                \n                                        \n                                            elements\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            jwt\n                                        \n                                \n                                \n                                        \n                                            stack\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bits:     BitsPerStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BitsPerStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elements\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        elements:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stack\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stack:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ConflictException, Injectable, OnModuleInit } from '@nestjs/common';\nimport { join } from 'path';\nimport { existsSync, readFileSync, writeFileSync } from 'fs';\nimport {\n    BitsPerStatus,\n    createHeaderAndPayload,\n    JWTwithStatusListPayload,\n    StatusList,\n    StatusListJWTHeaderParameters,\n} from '@sd-jwt/jwt-status-list';\nimport { JwtPayload } from '@sd-jwt/types';\nimport { ConfigService } from '@nestjs/config';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { StatusMapping } from './entities/status-mapping.entity';\nimport { Repository } from 'typeorm';\nimport { StatusUpdateDto } from './dto/status-update.dto';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { Session } from '../../session/entities/session.entity';\nimport { TENANT_EVENTS } from '../../auth/tenant-events';\n\ninterface StatusListFile {\n    elements: number[];\n    stack: number[];\n    bits: BitsPerStatus;\n    jwt?: string;\n}\n\n@Injectable()\nexport class StatusListService implements OnModuleInit {\n    private fileName: string = 'status-list.json';\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        @InjectRepository(StatusMapping)\n        private statusMappingRepository: Repository,\n    ) {}\n    onModuleInit() {}\n\n    @OnEvent(TENANT_EVENTS.TENANT_KEYS, { async: true })\n    onTenantInit(tenantId: string) {\n        return this.init(tenantId);\n    }\n\n    /**\n     * Initialize the status list service by checking if the status list file exists.\n     * If it does not exist, create a new status list with 10,000 entries and a stack\n     * of 10,000 indexes. The stack is shuffled to ensure randomness in the order of\n     * entries. The status list is stored in the file system as a JSON file.\n     */\n    private async init(tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        if (!existsSync(file)) {\n            const size = 10000;\n            // create an empty array with the size of 1000\n            const elements = new Array(size).fill(0).map(() => 0);\n            // create a list of 1000 indexes and shuffel them\n            const stack = new Array(size)\n                .fill(0)\n                .map((_, i) => i)\n                .sort(() => 0.5 - Math.random());\n\n            writeFileSync(\n                file,\n                JSON.stringify({ elements, stack, bits: 1 } as StatusListFile),\n            );\n            await this.createList(tenantId);\n        }\n    }\n\n    /**\n     * Create a new status list and stored it in the file\n     */\n    async createList(tenantId: string) {\n        const file = this.getConfig(tenantId);\n        const list = new StatusList(file.elements, file.bits);\n        const iss = `${this.configService.getOrThrow('PUBLIC_URL')}`;\n\n        const sub = join(\n            this.configService.getOrThrow('PUBLIC_URL'),\n            tenantId,\n            'status-management',\n            'status-list',\n        );\n\n        const prePayload: JwtPayload = {\n            iss,\n            sub,\n            iat: Math.floor(Date.now() / 1000),\n        };\n        const preHeader: StatusListJWTHeaderParameters = {\n            alg: 'ES256',\n            typ: 'statuslist+jwt',\n            x5c: this.cryptoService.getCertChain('signing', tenantId),\n        };\n        const { header, payload } = createHeaderAndPayload(\n            list,\n            prePayload,\n            preHeader,\n        );\n\n        const jwt = await this.cryptoService.signJwt(header, payload, tenantId);\n        file.jwt = jwt;\n        this.storeConfig(file, tenantId);\n    }\n\n    getList(tenantId: string) {\n        return this.getConfig(tenantId).jwt;\n    }\n\n    private getConfig(tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        return JSON.parse(readFileSync(file, 'utf-8')) as StatusListFile;\n    }\n\n    private storeConfig(content: StatusListFile, tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        writeFileSync(file, JSON.stringify(content));\n    }\n\n    /**\n     * Get the next free entry in the status list\n     * @returns\n     */\n    async createEntry(\n        session: Session,\n        credentialConfigurationId: string,\n    ): Promise {\n        const file = this.getConfig(session.tenantId);\n        // get the last element from the stack\n        const idx = file.stack.pop();\n        //TODO: what to do if the stack is empty\n        if (idx === undefined) {\n            throw new Error('Stack for status list is empty!!!');\n        }\n        const sub = join(\n            this.configService.getOrThrow('PUBLIC_URL'),\n            session.tenantId,\n            'status-management',\n            'status-list',\n        );\n        // store the index in the status mapping\n        await this.statusMappingRepository.save({\n            sessionId: session.id,\n            index: idx,\n            list: sub,\n            credentialConfigurationId,\n        });\n        this.storeConfig(file, session.tenantId);\n        return {\n            status: {\n                status_list: {\n                    idx: idx,\n                    uri: sub,\n                },\n            },\n        };\n    }\n\n    /**\n     * Update the value of an entry in the status list\n     * @param id\n     * @param value\n     */\n    private setEntry(id: number, value: number, tenantId: string) {\n        const file = this.getConfig(tenantId);\n        file.elements[id] = value;\n        this.storeConfig(file, tenantId);\n        return this.createList(tenantId);\n    }\n\n    /**\n     * Update the status of a session and its credential configuration\n     * @param value\n     */\n    async updateStatus(value: StatusUpdateDto, tenantId: string) {\n        const entries = await this.statusMappingRepository.findBy({\n            sessionId: value.sessionId,\n            credentialConfigurationId: value.credentialConfigurationId,\n        });\n        if (entries.length === 0) {\n            throw new ConflictException(\n                `No status mapping found for session ${value.sessionId} and credential configuration ${value.credentialConfigurationId}`,\n            );\n        }\n        for (const entry of entries) {\n            await this.setEntry(entry.index, value.status, tenantId);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StatusListModule.html":{"url":"modules/StatusListModule.html","title":"module - StatusListModule","body":"\n                   \n\n\n\n\n    Modules\n    StatusListModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_imports\n\n\n\ncluster_StatusListModule_providers\n\n\n\ncluster_StatusListModule_exports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/status-list/status-list.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StatusListController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StatusListController } from './status-list.controller';\nimport { StatusListService } from './status-list.service';\nimport { CryptoModule } from '../../crypto/crypto.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { StatusMapping } from './entities/status-mapping.entity';\n\n@Module({\n    imports: [CryptoModule, TypeOrmModule.forFeature([StatusMapping])],\n    controllers: [StatusListController],\n    providers: [StatusListService],\n    exports: [StatusListService],\n})\nexport class StatusListModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StatusListService.html":{"url":"injectables/StatusListService.html","title":"injectable - StatusListService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StatusListService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fileName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEntry\n                            \n                            \n                                    Async\n                                createList\n                            \n                            \n                                    Private\n                                getConfig\n                            \n                            \n                                getList\n                            \n                            \n                                    Private\n                                    Async\n                                init\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                    \n                                onTenantInit\n                            \n                            \n                                    Private\n                                setEntry\n                            \n                            \n                                    Private\n                                storeConfig\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, statusMappingRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/status-list/status-list.service.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusMappingRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    createEntry(session: Session, credentialConfigurationId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:138\n                        \n                    \n\n\n            \n                \n                        Get the next free entry in the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createList\n                        \n                    \n                \n            \n            \n                \n                        \n                    createList(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:79\n                        \n                    \n\n\n            \n                \n                        Create a new status list and stored it in the file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getConfig(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         StatusListFile\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getList\n                        \n                    \n                \n            \n            \n                \ngetList(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:52\n                        \n                    \n\n\n            \n                \n                        Initialize the status list service by checking if the status list file exists.\nIf it does not exist, create a new status list with 10,000 entries and a stack\nof 10,000 indexes. The stack is shuffled to ensure randomness in the order of\nentries. The status list is stored in the file system as a JSON file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(TENANT_EVENTS.TENANT_KEYS, {async: true})\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    setEntry(id: number, value: number, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:178\n                        \n                    \n\n\n            \n                \n                        Update the value of an entry in the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        storeConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeConfig(content: StatusListFile, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                content\n                                            \n                                                            StatusListFile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(value: StatusUpdateDto, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:189\n                        \n                    \n\n\n            \n                \n                        Update the status of a session and its credential configuration\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        fileName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'status-list.json'\n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/status-list.service.ts:31\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, OnModuleInit } from '@nestjs/common';\nimport { join } from 'path';\nimport { existsSync, readFileSync, writeFileSync } from 'fs';\nimport {\n    BitsPerStatus,\n    createHeaderAndPayload,\n    JWTwithStatusListPayload,\n    StatusList,\n    StatusListJWTHeaderParameters,\n} from '@sd-jwt/jwt-status-list';\nimport { JwtPayload } from '@sd-jwt/types';\nimport { ConfigService } from '@nestjs/config';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { StatusMapping } from './entities/status-mapping.entity';\nimport { Repository } from 'typeorm';\nimport { StatusUpdateDto } from './dto/status-update.dto';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { Session } from '../../session/entities/session.entity';\nimport { TENANT_EVENTS } from '../../auth/tenant-events';\n\ninterface StatusListFile {\n    elements: number[];\n    stack: number[];\n    bits: BitsPerStatus;\n    jwt?: string;\n}\n\n@Injectable()\nexport class StatusListService implements OnModuleInit {\n    private fileName: string = 'status-list.json';\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        @InjectRepository(StatusMapping)\n        private statusMappingRepository: Repository,\n    ) {}\n    onModuleInit() {}\n\n    @OnEvent(TENANT_EVENTS.TENANT_KEYS, { async: true })\n    onTenantInit(tenantId: string) {\n        return this.init(tenantId);\n    }\n\n    /**\n     * Initialize the status list service by checking if the status list file exists.\n     * If it does not exist, create a new status list with 10,000 entries and a stack\n     * of 10,000 indexes. The stack is shuffled to ensure randomness in the order of\n     * entries. The status list is stored in the file system as a JSON file.\n     */\n    private async init(tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        if (!existsSync(file)) {\n            const size = 10000;\n            // create an empty array with the size of 1000\n            const elements = new Array(size).fill(0).map(() => 0);\n            // create a list of 1000 indexes and shuffel them\n            const stack = new Array(size)\n                .fill(0)\n                .map((_, i) => i)\n                .sort(() => 0.5 - Math.random());\n\n            writeFileSync(\n                file,\n                JSON.stringify({ elements, stack, bits: 1 } as StatusListFile),\n            );\n            await this.createList(tenantId);\n        }\n    }\n\n    /**\n     * Create a new status list and stored it in the file\n     */\n    async createList(tenantId: string) {\n        const file = this.getConfig(tenantId);\n        const list = new StatusList(file.elements, file.bits);\n        const iss = `${this.configService.getOrThrow('PUBLIC_URL')}`;\n\n        const sub = join(\n            this.configService.getOrThrow('PUBLIC_URL'),\n            tenantId,\n            'status-management',\n            'status-list',\n        );\n\n        const prePayload: JwtPayload = {\n            iss,\n            sub,\n            iat: Math.floor(Date.now() / 1000),\n        };\n        const preHeader: StatusListJWTHeaderParameters = {\n            alg: 'ES256',\n            typ: 'statuslist+jwt',\n            x5c: this.cryptoService.getCertChain('signing', tenantId),\n        };\n        const { header, payload } = createHeaderAndPayload(\n            list,\n            prePayload,\n            preHeader,\n        );\n\n        const jwt = await this.cryptoService.signJwt(header, payload, tenantId);\n        file.jwt = jwt;\n        this.storeConfig(file, tenantId);\n    }\n\n    getList(tenantId: string) {\n        return this.getConfig(tenantId).jwt;\n    }\n\n    private getConfig(tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        return JSON.parse(readFileSync(file, 'utf-8')) as StatusListFile;\n    }\n\n    private storeConfig(content: StatusListFile, tenantId: string) {\n        const file = join(\n            this.configService.getOrThrow('FOLDER'),\n            tenantId,\n            this.fileName,\n        );\n        writeFileSync(file, JSON.stringify(content));\n    }\n\n    /**\n     * Get the next free entry in the status list\n     * @returns\n     */\n    async createEntry(\n        session: Session,\n        credentialConfigurationId: string,\n    ): Promise {\n        const file = this.getConfig(session.tenantId);\n        // get the last element from the stack\n        const idx = file.stack.pop();\n        //TODO: what to do if the stack is empty\n        if (idx === undefined) {\n            throw new Error('Stack for status list is empty!!!');\n        }\n        const sub = join(\n            this.configService.getOrThrow('PUBLIC_URL'),\n            session.tenantId,\n            'status-management',\n            'status-list',\n        );\n        // store the index in the status mapping\n        await this.statusMappingRepository.save({\n            sessionId: session.id,\n            index: idx,\n            list: sub,\n            credentialConfigurationId,\n        });\n        this.storeConfig(file, session.tenantId);\n        return {\n            status: {\n                status_list: {\n                    idx: idx,\n                    uri: sub,\n                },\n            },\n        };\n    }\n\n    /**\n     * Update the value of an entry in the status list\n     * @param id\n     * @param value\n     */\n    private setEntry(id: number, value: number, tenantId: string) {\n        const file = this.getConfig(tenantId);\n        file.elements[id] = value;\n        this.storeConfig(file, tenantId);\n        return this.createList(tenantId);\n    }\n\n    /**\n     * Update the status of a session and its credential configuration\n     * @param value\n     */\n    async updateStatus(value: StatusUpdateDto, tenantId: string) {\n        const entries = await this.statusMappingRepository.findBy({\n            sessionId: value.sessionId,\n            credentialConfigurationId: value.credentialConfigurationId,\n        });\n        if (entries.length === 0) {\n            throw new ConflictException(\n                `No status mapping found for session ${value.sessionId} and credential configuration ${value.credentialConfigurationId}`,\n            );\n        }\n        for (const entry of entries) {\n            await this.setEntry(entry.index, value.status, tenantId);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/StatusMapping.html":{"url":"entities/StatusMapping.html","title":"entity - StatusMapping","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  StatusMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/entities/status-mapping.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                credentialConfigurationId\n                            \n                            \n                                    \n                                index\n                            \n                            \n                                    \n                                list\n                            \n                            \n                                    \n                                sessionId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        list\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\n\n@Entity()\nexport class StatusMapping {\n    @Column({ type: 'varchar', primary: true })\n    sessionId: string;\n\n    @Column({ type: 'varchar', primary: true })\n    list: string;\n\n    @Column({ type: 'int', primary: true })\n    index: number;\n\n    @Column({ type: 'varchar', primary: true })\n    credentialConfigurationId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StatusUpdateDto.html":{"url":"classes/StatusUpdateDto.html","title":"class - StatusUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StatusUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/dto/status-update.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                credentialConfigurationId\n                            \n                            \n                                    \n                                sessionId\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:16\n                        \n                    \n\n            \n                \n                    The ID of the credential configuration\nThis is optional, if not provided, all credentials will be revoked of the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:8\n                        \n                    \n\n            \n                \n                    The session ID of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsIn(['0', '1'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:24\n                        \n                    \n\n            \n                \n                    The status of the credential\n0 = valid, 1 = revoked\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsNumber, IsOptional, IsString } from 'class-validator';\n\nexport class StatusUpdateDto {\n    /**\n     * The session ID of the user\n     */\n    @IsString()\n    sessionId: string;\n\n    /**\n     * The ID of the credential configuration\n     * This is optional, if not provided, all credentials will be revoked of the session.\n     */\n    @IsString()\n    @IsOptional()\n    credentialConfigurationId?: string;\n\n    /**\n     * The status of the credential\n     * 0 = valid, 1 = revoked\n     */\n    @IsNumber()\n    @IsIn([0, 1])\n    status: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.decorator.ts\n        \n\n\n            \n                Description\n            \n            \n                Values of the user token\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext } from '@nestjs/common';\n\nexport const Token = createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user as TokenPayload; // Access the token payload on the request object\n    },\n);\n\n/**\n * Values of the user token\n */\nexport interface TokenPayload {\n    sub: string; // Subject (client_id for client credentials)\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenResponse.html":{"url":"classes/TokenResponse.html","title":"class - TokenResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/token-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access_token\n                            \n                            \n                                expires_in\n                            \n                            \n                                token_type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_type\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TokenResponse {\n    access_token: string;\n    token_type: 'Bearer';\n    expires_in: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VCT.html":{"url":"classes/VCT.html","title":"class - VCT","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VCT\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/dto/credential-config.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                extends\n                            \n                            \n                                    \n                                    Optional\n                                extends#integrity\n                            \n                            \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    Optional\n                                schema_uri\n                            \n                            \n                                    \n                                    Optional\n                                schema_uri#integrity\n                            \n                            \n                                    \n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        extends\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        extends#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema_uri#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsString } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\n\nexport class VCT {\n    @IsString()\n    vct: string;\n    @IsString()\n    name?: string;\n    @IsString()\n    description?: string;\n    @IsString()\n    extends?: string;\n    @IsString()\n    'extends#integrity'?: string;\n    @IsString()\n    schema_uri?: string;\n    @IsString()\n    'schema_uri#integrity'?: string;\n}\n\nexport class PresentationDuringIssuance {\n    @IsString()\n    type: string;\n    @IsObject()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VaultKeyService.html":{"url":"injectables/VaultKeyService.html","title":"injectable - VaultKeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VaultKeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/vault-key.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            KeyService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                folder\n                            \n                            \n                                    Private\n                                headers\n                            \n                            \n                                    Private\n                                vaultUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                derToJwtSignature\n                            \n                            \n                                    Private\n                                getJWK\n                            \n                            \n                                getKid\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                    Async\n                                init\n                            \n                            \n                                sign\n                            \n                            \n                                signer\n                            \n                            \n                                    Async\n                                signJWT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, configService: ConfigService, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/vault-key.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:68\n                        \n                    \n\n\n            \n                \n                        Creates a new keypair in the vault.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        derToJwtSignature\n                        \n                    \n                \n            \n            \n                \nderToJwtSignature(derSignature: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:185\n                        \n                    \n\n\n            \n                \n                        Converts a DER signature to a JWT signature.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                derSignature\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getJWK\n                        \n                    \n                \n            \n            \n                \n                        \n                    getJWK(key: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:121\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getKid\n                        \n                    \n                \n            \n            \n                \ngetKid(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:90\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:100\n\n                        \n                    \n\n\n            \n                \n                        Gets the public key and converts it to a KeyLike object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"jwk\" | \"pem\", tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"jwk\" | \"pem\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:45\n\n                        \n                    \n\n\n            \n                \n                        Check if the vault has a key with the given id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sign\n                        \n                    \n                \n            \n            \n                \nsign(value: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/vault-key.service.ts:137\n                        \n                    \n\n\n            \n                \n                        Signs a value with a key in the vault.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signer\n                        \n                    \n                \n            \n            \n                \nsigner(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:57\n\n                        \n                    \n\n\n            \n                \n                        Get the signer for the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JwtPayload, header: JWTHeaderParameters, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:156\n\n                        \n                    \n\n\n            \n                \n                        Creates a proof of possession jwt.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWTHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        folder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/vault-key.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        headers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/vault-key.service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        vaultUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/vault-key.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { KeyService } from './key.service';\nimport { HttpService } from '@nestjs/axios';\nimport { firstValueFrom } from 'rxjs';\nimport { importSPKI, exportJWK, JWTHeaderParameters, JWK } from 'jose';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtPayload, Signer } from '@sd-jwt/types';\nimport { CryptoService, CryptoType } from './crypto/crypto.service';\nimport { writeFileSync } from 'fs';\nimport { join } from 'path';\n\n@Injectable()\nexport class VaultKeyService extends KeyService {\n    // url to the vault instance\n    private vaultUrl: string;\n    // headers for the vault api\n    private headers: { headers: { 'X-Vault-Token': string } };\n\n    private folder: string;\n\n    constructor(\n        private httpService: HttpService,\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n    ) {\n        super();\n        this.folder = join(\n            this.configService.getOrThrow('FOLDER'),\n            'keys',\n        );\n\n        this.vaultUrl = this.configService.get('VAULT_URL') as string;\n        this.headers = {\n            headers: {\n                'X-Vault-Token': this.configService.get(\n                    'VAULT_TOKEN',\n                ) as string,\n            },\n        };\n    }\n\n    /**\n     * Check if the vault has a key with the given id\n     */\n    async init(tenantId: string) {\n        //TODO: need to update this since signing cert is not created by the vault\n        await this.getPublicKey('pem', tenantId)\n            .then((res) => {\n                writeFileSync(join(this.folder, 'public-key.pem'), res);\n            })\n            .catch(async () => this.create(tenantId));\n    }\n\n    /**\n     * Get the signer for the key service\n     */\n    signer(tenantId: string): Promise {\n        //TODO: validate if this is correct.\n        return Promise.resolve((input: string) => this.sign(input, tenantId));\n    }\n\n    /**\n     * Creates a new keypair in the vault.\n     * @param createKeyDto\n     * @param user\n     * @returns\n     */\n    async create(tenantId: string) {\n        const types: Map = new Map();\n        types.set('ES256', 'ecdsa-p256');\n        types.set('Ed25519', 'ed25519');\n\n        const res = await firstValueFrom(\n            this.httpService.post(\n                `${this.vaultUrl}/keys/${tenantId}`,\n                {\n                    exportable: false,\n                    type: types.get(this.cryptoService.getAlg()),\n                },\n                this.headers,\n            ),\n        );\n        const jwk = await this.getPublicKey('jwk', tenantId);\n        return {\n            id: res.data.id,\n            publicKey: jwk,\n        };\n    }\n\n    getKid(tenantId: string): Promise {\n        //TODO: check if this is the right way to get the key id.\n        return Promise.resolve(tenantId);\n    }\n\n    /**\n     * Gets the public key and converts it to a KeyLike object.\n     * @param id\n     * @returns\n     */\n    async getPublicKey(type: 'pem', tenantId: string): Promise;\n    async getPublicKey(type: 'jwk', tenantId: string): Promise;\n    async getPublicKey(\n        type: 'jwk' | 'pem',\n        tenantId: string,\n    ): Promise {\n        return firstValueFrom(\n            this.httpService.get(\n                `${this.vaultUrl}/keys/${tenantId}`,\n                this.headers,\n            ),\n        ).then(async (res) => {\n            return type === 'pem'\n                ? (res.data.data.keys['1'].public_key as string)\n                : await this.getJWK(\n                      res.data.data.keys['1'].public_key,\n                      tenantId,\n                  );\n        });\n    }\n\n    private getJWK(key: string, tenantId: string): Promise {\n        return importSPKI(key, this.cryptoService.getAlg())\n            .then((cryptoKey) => exportJWK(cryptoKey))\n            .then(async (jwk) => {\n                jwk.kid = await this.getKid(tenantId);\n                return jwk;\n            });\n    }\n\n    /**\n     * Signs a value with a key in the vault.\n     * @param id\n     * @param user\n     * @param value\n     * @returns\n     */\n    sign(value: string, tenantId: string): Promise {\n        return firstValueFrom(\n            this.httpService.post(\n                `${this.vaultUrl}/sign/${tenantId}`,\n                {\n                    input: Buffer.from(value).toString('base64'),\n                },\n                this.headers,\n            ),\n        ).then((res) =>\n            this.derToJwtSignature(res.data.data.signature.split(':')[2]),\n        );\n    }\n\n    /**\n     * Creates a proof of possession jwt.\n     * @param user\n     * @param value\n     */\n    async signJWT(\n        payload: JwtPayload,\n        header: JWTHeaderParameters,\n        tenantId: string,\n    ): Promise {\n        // Convert header and payload to Base64 to prepare for Vault\n        const encodedHeader = Buffer.from(JSON.stringify(header)).toString(\n            'base64url',\n        );\n        const encodedPayload = Buffer.from(JSON.stringify(payload)).toString(\n            'base64url',\n        );\n        const signingInput = `${encodedHeader}.${encodedPayload}`;\n\n        // Request to Vault for signing\n        try {\n            const signature = await this.sign(signingInput, tenantId);\n            return `${encodedHeader}.${encodedPayload}.${signature}`;\n        } catch (error) {\n            console.error('Error signing JWT with Vault:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Converts a DER signature to a JWT signature.\n     * @param derSignature\n     * @returns\n     */\n    derToJwtSignature(derSignature: string) {\n        // Step 1: Extract r and s from DER signature\n        const der = Buffer.from(derSignature, 'base64');\n        const sequence = der.slice(2); // Skip the sequence tag and length\n        const rLength = sequence[1];\n        const r = sequence.slice(2, 2 + rLength);\n        const s = sequence.slice(2 + rLength + 2); // Skip r, its tag and length byte, and s's tag and length byte\n\n        // Step 2: Ensure r and s are 32 bytes each (pad with zeros if necessary)\n        // Ensure r and s are 32 bytes each\n        let rPadded: Buffer;\n        let sPadded: Buffer;\n        if (r.length > 32) {\n            if (r.length === 33 && r[0] === 0x00) {\n                rPadded = r.slice(1);\n            } else {\n                throw new Error('Invalid r length in DER signature');\n            }\n        } else {\n            rPadded = Buffer.concat([Buffer.alloc(32 - r.length), r]);\n        }\n        if (s.length > 32) {\n            if (s.length === 33 && s[0] === 0x00) {\n                sPadded = s.slice(1);\n            } else {\n                throw new Error('Invalid s length in DER signature');\n            }\n        } else {\n            sPadded = Buffer.concat([Buffer.alloc(32 - s.length), s]);\n        }\n\n        // Step 3: Concatenate r and s to form the raw signature\n        const rawSignature = Buffer.concat([rPadded, sPadded]);\n\n        // Step 4: Base64url encode the raw signature\n        return rawSignature\n            .toString('base64')\n            .replace(/\\+/g, '-')\n            .replace(/\\//g, '_')\n            .replace(/=/g, '');\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VerifierModule.html":{"url":"modules/VerifierModule.html","title":"module - VerifierModule","body":"\n                   \n\n\n\n\n    Modules\n    VerifierModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VerifierModule\n\n\n\ncluster_VerifierModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/verifier.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            PresentationsModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CryptoModule } from '../crypto/crypto.module';\nimport { RegistrarModule } from '../registrar/registrar.module';\nimport { SessionModule } from '../session/session.module';\nimport { HttpModule } from '@nestjs/axios';\nimport { PresentationsModule } from './presentations/presentations.module';\nimport { Oid4vpModule } from './oid4vp/oid4vp.module';\n\n@Module({\n    imports: [\n        CryptoModule,\n        RegistrarModule,\n        SessionModule,\n        HttpModule,\n        PresentationsModule,\n        Oid4vpModule,\n    ],\n})\nexport class VerifierModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebHookAuthConfig.html":{"url":"classes/WebHookAuthConfig.html","title":"class - WebHookAuthConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebHookAuthConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhook authentication.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApiKeyConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:43\n                        \n                    \n\n            \n                \n                    Configuration for API key authentication.\nThis is required if the type is 'apiKey'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['apiKey'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:36\n                        \n                    \n\n            \n                \n                    The type of authentication used for the webhook.\nCurrently, only 'apiKey' is supported.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsIn, IsObject, IsOptional, IsString } from 'class-validator';\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     * @example Authorization\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     * @example Bearer your_api_key_here\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = 'apiKey';\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn(['apiKey'])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebhookConfig.html":{"url":"classes/WebhookConfig.html","title":"class - WebhookConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebhookConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhooks used in various services.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                auth\n                            \n                            \n                                    \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        auth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebHookAuthConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsOptional()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:62\n                        \n                    \n\n            \n                \n                    Optional authentication configuration for the webhook.\nIf not provided, no authentication will be used.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:54\n                        \n                    \n\n            \n                \n                    The URL to which the webhook will send notifications.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsIn, IsObject, IsOptional, IsString } from 'class-validator';\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     * @example Authorization\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     * @example Bearer your_api_key_here\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = 'apiKey';\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn(['apiKey'])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WebhookService.html":{"url":"injectables/WebhookService.html","title":"injectable - WebhookService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WebhookService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling webhooks in the application.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendWebhook\n                            \n                            \n                                    Async\n                                sendWebhookNotification\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, sessionService: SessionService, sessionLogger: SessionLoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/webhook/webhook.service.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor for WebhookService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendWebhook\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendWebhook(session: Session, logContext: SessionLogContext, credentials: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/webhook/webhook.service.ts:32\n                        \n                    \n\n\n            \n                \n                        Sends a webhook with the provided credentials, also return the response data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                logContext\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentials\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendWebhookNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendWebhookNotification(session: Session, logContext: SessionLogContext, notification: Notification)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/webhook/webhook.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Sends a webhook notification for a session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                logContext\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                notification\n                                            \n                                                            Notification\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { Injectable } from '@nestjs/common';\nimport { firstValueFrom } from 'rxjs';\nimport { SessionService } from '../../session/session.service';\nimport { SessionLoggerService } from '../logger/session-logger.service';\nimport { Notification, Session } from '../../session/entities/session.entity';\nimport { SessionLogContext } from '../logger/session-logger-context';\n\n/**\n * Service for handling webhooks in the application.\n */\n@Injectable()\nexport class WebhookService {\n    /**\n     * Constructor for WebhookService.\n     * @param httpService\n     * @param sessionService\n     * @param sessionLogger\n     */\n    constructor(\n        private httpService: HttpService,\n        private sessionService: SessionService,\n        private sessionLogger: SessionLoggerService,\n    ) {}\n\n    /**\n     * Sends a webhook with the provided credentials, also return the response data.\n     * @param session\n     * @param logContext\n     * @param credentials\n     */\n    async sendWebhook(\n        session: Session,\n        logContext: SessionLogContext,\n        credentials: any[],\n    ) {\n        const headers: Record = {};\n        if (session.webhook!.auth && session.webhook!.auth.type === 'apiKey') {\n            headers[session.webhook!.auth.config.headerName] =\n                session.webhook!.auth.config.value;\n        }\n        this.sessionLogger.logSession(logContext, 'Sending webhook', {\n            webhookUrl: session.webhook!.url,\n            authType: session.webhook!.auth?.type || 'none',\n        });\n\n        await firstValueFrom(\n            this.httpService.post(\n                session.webhook!.url,\n                {\n                    credentials,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data) {\n                    session.credentialPayload!.values = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(\n                        session.id,\n                        session.tenantId,\n                        {\n                            credentialPayload: session.credentialPayload,\n                        },\n                    );\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    'Webhook sent successfully',\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    'Error sending webhook',\n                    {\n                        webhookUrl: session.webhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n\n    /**\n     * Sends a webhook notification for a session.\n     * @param session\n     * @param logContext\n     * @param notification\n     */\n    async sendWebhookNotification(\n        session: Session,\n        logContext: SessionLogContext,\n        notification: Notification,\n    ) {\n        const headers: Record = {};\n        const webhook = session.notifyWebhook!;\n\n        if (webhook.auth && webhook.auth.type === 'apiKey') {\n            headers[webhook.auth.config.headerName] = webhook.auth.config.value;\n        }\n        this.sessionLogger.logSession(\n            logContext,\n            'Sending webhook notification',\n            {\n                webhookUrl: webhook.url,\n                authType: webhook.auth?.type || 'none',\n            },\n        );\n\n        await firstValueFrom(\n            this.httpService.post(\n                webhook.url,\n                {\n                    notification,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data) {\n                    session.credentialPayload!.values = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(\n                        session.id,\n                        session.tenantId,\n                        {\n                            credentialPayload: session.credentialPayload,\n                        },\n                    );\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    'Webhook notification sent successfully',\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    'Error sending webhook',\n                    {\n                        webhookUrl: session.webhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/WellKnownController.html":{"url":"controllers/WellKnownController.html","title":"controller - WellKnownController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  WellKnownController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/well-known.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/.well-known\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI well-known endpoints.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authzMetadata\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getJwks\n                            \n                            \n                                    \n                                    \n                                    Async\n                                issuerMetadata\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    authzMetadata(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('oauth-authorization-server')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:36\n                        \n                    \n\n\n            \n                \n                        Authorization Server Metadata\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Oauth2AuthorizationServerResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getJwks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getJwks(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Header('Content-Type', 'application/jwk-set+json')@Get('jwks.json')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:50\n                        \n                    \n\n\n            \n                \n                        Returns the JSON Web Key Set (JWKS) for the authorization server.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        issuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    issuerMetadata(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get OpenID4VCI issuer metadata', description: 'Returns the OpenID4VCI issuer metadata.'})@Get('openid-credential-issuer')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header, Param } from '@nestjs/common';\nimport { CryptoService } from '../crypto/crypto.service';\nimport { AuthorizeService } from '../issuer/authorize/authorize.service';\nimport { Oid4vciService } from '../issuer/oid4vci/oid4vci.service';\nimport { JwksResponseDto } from './dto/jwks-response.dto';\nimport { Oauth2AuthorizationServerResponse } from './dto/oauth-authorization-server-response.dto';\nimport { CredentialIssuerMetadataDto } from './dto/credential-issuer-metadata.dto';\nimport { ApiOperation } from '@nestjs/swagger';\n\n/**\n * Controller for the OpenID4VCI well-known endpoints.\n */\n@Controller(':tenantId/.well-known')\nexport class WellKnownController {\n    constructor(\n        private readonly oid4vciService: Oid4vciService,\n        private readonly authorizeService: AuthorizeService,\n        private readonly cryptoService: CryptoService,\n    ) {}\n\n    @ApiOperation({\n        summary: 'Get OpenID4VCI issuer metadata',\n        description: 'Returns the OpenID4VCI issuer metadata.',\n    })\n    @Get('openid-credential-issuer')\n    async issuerMetadata(@Param('tenantId') tenantId: string) {\n        return (await this.oid4vciService.issuerMetadata(tenantId))\n            .credentialIssuer as unknown as Promise;\n    }\n\n    /**\n     * Authorization Server Metadata\n     * @returns\n     */\n    @Get('oauth-authorization-server')\n    authzMetadata(\n        @Param('tenantId') tenantId: string,\n    ): Oauth2AuthorizationServerResponse {\n        return this.authorizeService.authzMetadata(\n            tenantId,\n        ) as Oauth2AuthorizationServerResponse;\n    }\n\n    /**\n     * Returns the JSON Web Key Set (JWKS) for the authorization server.\n     * @returns\n     */\n    @Header('Content-Type', 'application/jwk-set+json')\n    @Get('jwks.json')\n    async getJwks(\n        @Param('tenantId') tenantId: string,\n    ): Promise {\n        return this.cryptoService.getJwks(tenantId).then((key) => ({\n            keys: [key],\n        }));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n1.3.0 (2025-07-28)\nBug Fixes\n\nadd documentation\n(1912bb8)\nadd more granular logging\n(53804b0)\nuse oidc for all flows\n(#12)\n(f15f6ab)\n\nFeatures\n\nimprove issuance config\n(#13)\n(b99786b)\n\n1.2.3 (2025-07-20)\nBug Fixes\n\nci deploy with version generation\n(259ab39)\nrelease pipeline\n(7a6a69c)\nset correct way for deployment\n(2aa727a)\nuse oidc url instead of keycloak one\n(2913417)\n\n1.2.2 (2025-07-19)\nBug Fixes\n\nadd tmp logger\n(6bb4aa9)\nset correct url for vp\n(295428b)\n\n1.2.1 (2025-07-18)\nBug Fixes\n\nci\n(8f9498a)\nci\n(905e17c)\n\n1.2.1 (2025-07-18)\nBug Fixes\n\nci\n(905e17c)\n\n1.2.0 (2025-07-18)\nBug Fixes\n\nadd codecov\n(#2)\n(9104df3)\nadd test for presentation\n(#6)\n(e3e5971)\nremove console logs\n(32fbd8e)\nremove ts file from root\n(b989c6c)\nupload test results\n(#3)\n(f75298f)\nvitest config\n(beef4d2)\n\nFeatures\n\nadd multi tenant support\n(#7)\n(46c9ce6)\n\n1.1.0 (2025-07-11)\nBug Fixes\n\nset correct version\n(91b5499)\nupdate db env\n(35f4d1e)\n\nFeatures\n\nadd deployment options\n(937603a)\n\n1.0.1 (2025-07-10)\nBug Fixes\n\nadd auth to webhook\n(c3b1b48)\nadd cloudflare worker example\n(6d31de0)\ngeneral improvements\n(f7e7505)\nmake key folder static\n(6a6cdb6)\nwebhook handling\n(df29d1e)\n\n1.0.0 (2025-07-09)\nBug Fixes\n\nadd semantic release\n(c805439)\nadjust release pipeline\n(3ac47ec)\nci\n(892b30e)\nci\n(40ccd32)\nci\n(12395c8)\nci\n(45f3f7f)\nci\n(4be0171)\nci\n(2f07af2)\nci\n(2a71850)\nci nameing\n(33ac2c7)\nci, install pnpm\n(ac4ee24)\nci, remove version\n(54e8a4e)\ndocker deploy\n(98303c1)\nmain\n(d6205da)\npage build\n(b3abd57)\nsplit jobs\n(2742ec4)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/auth.module.ts\n            \n            variable\n            AUTH_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/client.service.ts\n            \n            injectable\n            ClientService\n            \n                55 %\n                (5/9)\n            \n        \n        \n            \n                \n                src/auth/client.service.ts\n            \n            interface\n            Client\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/client-credentials.dto.ts\n            \n            class\n            ClientCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/token-response.dto.ts\n            \n            class\n            TokenResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/jwt.service.ts\n            \n            injectable\n            JwtService\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/auth/jwt.service.ts\n            \n            interface\n            GenerateTokenOptions\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/tenant-events.ts\n            \n            variable\n            TENANT_EVENTS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/token.decorator.ts\n            \n            interface\n            TokenPayload\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/auth/token.decorator.ts\n            \n            variable\n            Token\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/crypto.service.ts\n            \n            injectable\n            CryptoService\n            \n                6 %\n                (1/15)\n            \n        \n        \n            \n                \n                        src/crypto/crypto.service.ts\n            \n            type alias\n            certificateType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/encryption/encryption.service.ts\n            \n            injectable\n            EncryptionService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/crypto/key/crypto/crypto-implementation.ts\n            \n            interface\n            CryptoImplementation\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto/crypto-implementation.ts\n            \n            type alias\n            KeyPair\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto/crypto-implementation.ts\n            \n            type alias\n            Signer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto/crypto-implementation.ts\n            \n            type alias\n            Verifier\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto/crypto.module.ts\n            \n            variable\n            CRYPTO_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/crypto/crypto.service.ts\n            \n            injectable\n            CryptoService\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto/crypto.service.ts\n            \n            type alias\n            CryptoType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto/ed25519.ts\n            \n            variable\n            ED25519\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/entities/key.entity.ts\n            \n            entity\n            KeyEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/filesystem-key.service.ts\n            \n            injectable\n            FileSystemKeyService\n            \n                35 %\n                (5/14)\n            \n        \n        \n            \n                \n                        src/crypto/key/key.module.ts\n            \n            variable\n            KEY_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/key.service.ts\n            \n            class\n            KeyService\n            \n                62 %\n                (5/8)\n            \n        \n        \n            \n                \n                src/crypto/key/vault-key.service.ts\n            \n            injectable\n            VaultKeyService\n            \n                43 %\n                (7/16)\n            \n        \n        \n            \n                \n                        src/database/database.module.ts\n            \n            variable\n            DB_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.controller.ts\n            \n            controller\n            AuthorizeController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.service.ts\n            \n            injectable\n            AuthorizeService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.service.ts\n            \n            interface\n            ParsedAccessTokenAuthorizationCodeRequestGrant\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.service.ts\n            \n            interface\n            ParsedAccessTokenPreAuthorizedCodeRequestGrant\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/issuer/authorize/dto/authorize-request.dto.ts\n            \n            class\n            AuthorizeQueries\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/issuer/authorize/dto/par-response.dto.ts\n            \n            class\n            ParResponseDto\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/credentials-metadata.controller.ts\n            \n            controller\n            CredentialsMetadataController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/dto/credential-config.dto.ts\n            \n            class\n            PresentationDuringIssuance\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/dto/credential-config.dto.ts\n            \n            class\n            VCT\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/dto/schema-response.dto.ts\n            \n            class\n            SchemaResponse\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/issuer/credentials/credential-config/credential-config.service.ts\n            \n            injectable\n            CredentialConfigService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/issuer/credentials/credentials.controller.ts\n            \n            controller\n            CredentialsController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/issuer/credentials/credentials.service.ts\n            \n            injectable\n            CredentialsService\n            \n                57 %\n                (4/7)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/credential.entity.ts\n            \n            entity\n            CredentialConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationConfigDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationUrlConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            PresentationDuringIssuanceConfig\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            type alias\n            AuthenticationConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.helper.ts\n            \n            class\n            AuthenticationConfigHelper\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/issuance.dto.ts\n            \n            class\n            IssuanceDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/issuer/issuance/entities/issuance-config.entity.ts\n            \n            entity\n            IssuanceConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/issuance/issuance.controller.ts\n            \n            controller\n            IssuanceController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/issuer/issuance/issuance.service.ts\n            \n            injectable\n            IssuanceService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/issuer/issuer-management/issuer-management.controller.ts\n            \n            controller\n            IssuerManagementController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/issuer/issuer.module.ts\n            \n            variable\n            ISSUER_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/dto/notification-request.dto.ts\n            \n            class\n            NotificationRequestDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/dto/offer-request.dto.ts\n            \n            class\n            OfferRequestDto\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/dto/offer-request.dto.ts\n            \n            class\n            OfferResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/oid4vci.controller.ts\n            \n            controller\n            Oid4vciController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/oid4vci.service.ts\n            \n            injectable\n            Oid4vciService\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                        src/issuer/oid4vci/util.ts\n            \n            function\n            getHeadersFromRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/status-list/dto/status-update.dto.ts\n            \n            class\n            StatusUpdateDto\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/issuer/status-list/entities/status-mapping.entity.ts\n            \n            entity\n            StatusMapping\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/status-list/status-list.controller.ts\n            \n            controller\n            StatusListController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/issuer/status-list/status-list.service.ts\n            \n            injectable\n            StatusListService\n            \n                38 %\n                (5/13)\n            \n        \n        \n            \n                \n                src/issuer/status-list/status-list.service.ts\n            \n            interface\n            StatusListFile\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/registrar/registrar-config.ts\n            \n            class\n            RegistrarConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/registrar/registrar.module.ts\n            \n            variable\n            REGISTRAR_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/registrar/registrar.service.ts\n            \n            injectable\n            RegistrarService\n            \n                100 %\n                (17/17)\n            \n        \n        \n            \n                \n                src/registrar/registrar.service.ts\n            \n            interface\n            AccessCertificateResponse\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/session/entities/session.entity.ts\n            \n            entity\n            Session\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/session/entities/session.entity.ts\n            \n            type alias\n            Notification\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/session/session.controller.ts\n            \n            controller\n            SessionController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                        src/session/session.module.ts\n            \n            variable\n            SESSION_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/session/session.service.ts\n            \n            injectable\n            SessionService\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                src/utils/logger/logger-config.service.ts\n            \n            injectable\n            LoggerConfigService\n            \n                23 %\n                (3/13)\n            \n        \n        \n            \n                \n                src/utils/logger/logger-config.service.ts\n            \n            interface\n            LoggerConfiguration\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/utils/logger/session-logger-context.ts\n            \n            interface\n            SessionLogContext\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/utils/logger/session-logger.decorator.ts\n            \n            variable\n            SESSION_LOGGER_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/logger/session-logger.decorator.ts\n            \n            variable\n            SessionLogger\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/logger/session-logger.interceptor.ts\n            \n            injectable\n            SessionLoggerInterceptor\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/utils/logger/session-logger.service.ts\n            \n            injectable\n            SessionLoggerService\n            \n                85 %\n                (12/14)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            ApiKeyConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebHookAuthConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebhookConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/utils/webhook/webhook.dto.ts\n            \n            type alias\n            AuthConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.service.ts\n            \n            injectable\n            WebhookService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/dto/authorization-response.dto.ts\n            \n            class\n            AuthorizationResponse\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/dto/presentation-request-options.dto.ts\n            \n            interface\n            PresentationRequestOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/dto/presentation-request.dto.ts\n            \n            class\n            PresentationRequest\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/oid4vp.controller.ts\n            \n            controller\n            Oid4vpController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/oid4vp.service.ts\n            \n            injectable\n            Oid4vpService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/verifier/presentations/dto/auth-response.dto.ts\n            \n            interface\n            AuthResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/dto/vp-request.dto.ts\n            \n            class\n            RegistrationCertificateRequest\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            entity\n            PresentationConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/verifier/presentations/presentations.controller.ts\n            \n            controller\n            PresentationManagementController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/verifier/presentations/presentations.service.ts\n            \n            injectable\n            PresentationsService\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/verifier/resolver/dto/issuer-metadata.dto.ts\n            \n            interface\n            IssuerMetadata\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/resolver/resolver.service.ts\n            \n            injectable\n            ResolverService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/well-known/dto/credential-issuer-metadata.dto.ts\n            \n            class\n            CredentialIssuerMetadataDto\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/well-known/dto/jwks-response.dto.ts\n            \n            class\n            EC_Public\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/well-known/dto/jwks-response.dto.ts\n            \n            class\n            JwksResponseDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/well-known/dto/oauth-authorization-server-response.dto.ts\n            \n            class\n            Oauth2AuthorizationServerResponse\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/well-known/well-known.controller.ts\n            \n            controller\n            WellKnownController\n            \n                75 %\n                (3/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @badgateway/oauth2-client : ^3.2.0\n        \n            @nestjs/axios : ^4.0.0\n        \n            @nestjs/common : ^11.1.3\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.3\n        \n            @nestjs/event-emitter : ^3.0.1\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.3\n        \n            @nestjs/schedule : ^6.0.0\n        \n            @nestjs/serve-static : ^5.0.3\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/terminus : ^11.0.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @openid4vc/oauth2 : 0.3.0-alpha-20250602121005\n        \n            @openid4vc/openid4vci : 0.3.0-alpha-20250602121005\n        \n            @openid4vc/openid4vp : 0.3.0-alpha-20250602121005\n        \n            @openid4vc/utils : ^0.3.0-alpha-20250602121005\n        \n            @sd-jwt/crypto-nodejs : ^0.14.0\n        \n            @sd-jwt/jwt-status-list : ^0.14.0\n        \n            @sd-jwt/sd-jwt-vc : ^0.14.0\n        \n            @sd-jwt/types : ^0.14.0\n        \n            axios : ^1.10.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            joi : ^17.13.3\n        \n            jose : ^6.0.11\n        \n            jwks-rsa : ^3.2.0\n        \n            mysql2 : ^3.14.1\n        \n            nestjs-pino : ^4.4.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.16.3\n        \n            pino-http : ^10.5.0\n        \n            pino-pretty : ^13.0.0\n        \n            qrcode : ^1.5.4\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            sqlite3 : ^5.1.7\n        \n            typeorm : ^0.3.25\n        \n            uuid : ^11.1.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ResponseType   (src/.../presentation-request.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/verifier/oid4vp/dto/presentation-request.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ResponseType\n                    \n                \n                    \n                        \n                            Enum for the type of response expected from the presentation request.\n\n                        \n                    \n                        \n                            \n                                 QRCode\n                            \n                        \n                        \n                            \n                                Value : qrcode\n                            \n                        \n                        \n                            \n                                 URI\n                            \n                        \n                        \n                            \n                                Value : uri\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            getHeadersFromRequest   (src/.../util.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Bootstrap function to initialize the NestJS application.\n\n\n                \n            \n        \n    \n    src/issuer/oid4vci/util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getHeadersFromRequest\n                        \n                    \n                \n            \n            \n                \ngetHeadersFromRequest(req: Request)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     globalThis.Headers\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n\n\n\nYour Diplomatic Layer for EUDI Wallet Integration\nEUDIPLO is an open-source middleware that bridges your backend and EUDI Wallets\nusing a unified API and standardized protocols.\n\n🧭 Overview\nOrganizations joining the EUDI Wallet ecosystem face a tough choice: patch\ntogether protocol libraries that may not exist for their stack, or rely on\nproprietary solutions that risk vendor lock-in.\nEUDIPLO solves this by providing a lightweight, source-available, protocol\nabstraction layer. It communicates over HTTP and integrates easily with your\nexisting backend stack—so you can focus on your business logic, not\ncryptographic plumbing.\nIt supports all core flows of electronic attribute attestations—issuing,\nrequesting, and even requesting during issuance—and is already\ncompatible with production-grade EUDI Wallets like Animo.\nWhile still in early development, EUDIPLO is built for production: secure key\nmanagement, scalable database support, and clean API boundaries.\n\n🧩 Features\n\n✅ Supports OID4VCI, OID4VP, SD-JWT VC, and OAuth Token Status\nList\n✅ JSON-based credential configuration\n✅ Client credentials authentication for easy service integration\n✅ Runs via Docker with .env config\n✅ HTTP-based integration with any backend\n✅ Secure key management & pluggable storage\n✅ Privacy-friendly: no external calls, no long-term storage\n\n\n🚀 Quick Start\nExample :# Clone and configure\ngit clone https://github.com/openwallet-foundation-labs/eudiplo.git\ncd eudiplo\ncp .env.example .env\n\n# Configure authentication\necho \"JWT_SECRET=$(openssl rand -base64 32)\" >> .env\necho \"AUTH_CLIENT_SECRET=$(openssl rand -base64 24)\" >> .env\n\n# Start with Docker\ndocker run -p 3000:3000 \\\n  -e PUBLIC_URL=https://example.com \\\n  -e JWT_SECRET=your-32-character-secret \\\n  -e AUTH_CLIENT_SECRET=your-issuer-secret \\\n  -v $(pwd)/config:/app/config \\\n  ghcr.io/openwallet-foundation-labs/eudiplo:latest\n\n# Get a token and start using the API\ncurl -X POST http://localhost:3000/auth/oauth2/token \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"client_id\": \"root\",\n    \"client_secret\": \"root\"\n  }'📚 API:\nhttps://openwallet-foundation-labs.github.io/eudiplo/latest/api/📦\nFull setup:\nQuickstart Guide\n\n📚 Documentation\nChoose your documentation version:\n\n🚀 Latest Stable (recommended):\nhttps://openwallet-foundation-labs.github.io/eudiplo/latest/ -\nDocumentation for the most recent major release\n🔬 Development:\nhttps://openwallet-foundation-labs.github.io/eudiplo/main/ -\nLatest features from the main branch\n📚 Specific Major Versions:\nv1,\nv2, etc.\n\nKey sections:\n\nArchitecture\nSupported Protocols\nAPI Reference\nCode Documentation\n\n\n🤝 Contributing\nWe welcome PRs from wallet developers, institutions, and contributors interested\nin advancing the EUDI Wallet ecosystem.\nSee CONTRIBUTING.md for guidelines.\n💬 Have questions? Join our\nDiscord community to ask questions, get help,\nand connect with other developers.\n\n📝 License\nLicensed under the Apache 2.0 License\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nExample :                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\nDefinitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\nGrant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\nGrant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\nRedistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and\n(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.\nYou may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\nSubmission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\nTrademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\nDisclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\nLimitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\nAccepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\n\n\n   END OF TERMS AND CONDITIONS\n   APPENDIX: How to apply the Apache License to your work.\nExample :  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.   Copyright [2025] [Mirko Mollik]\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\nExample :   http://www.apache.org/licenses/LICENSE-2.0   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IssuerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KeyModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        Oid4vpModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PresentationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RegistrarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ResolverModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SessionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StatusListModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VerifierModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_exports\n\n\n\ncluster_CryptoModule_providers\n\n\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_imports\n\n\n\ncluster_IssuerModule_exports\n\n\n\ncluster_IssuerModule_providers\n\n\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_imports\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_imports\n\n\n\ncluster_PresentationsModule_exports\n\n\n\ncluster_PresentationsModule_providers\n\n\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_exports\n\n\n\ncluster_RegistrarModule_providers\n\n\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_exports\n\n\n\ncluster_ResolverModule_providers\n\n\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_exports\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_exports\n\n\n\ncluster_StatusListModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nJwtService \n\nJwtService \n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nCryptoService \n\nCryptoService \n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\n\n\nEncryptionService \n\nEncryptionService \n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\nOid4vpModule -->\n\nRegistrarModule->Oid4vpModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\n\n\nSessionModule\n\nSessionModule\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\nClientService\n\nClientService\n\nAuthModule -->\n\nClientService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialConfigService\n\nCredentialConfigService\n\nIssuerModule -->\n\nCredentialConfigService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nIssuanceService\n\nIssuanceService\n\nIssuerModule -->\n\nIssuanceService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nIssuerModule -->\n\nSessionLoggerInterceptor->IssuerModule\n\n\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nIssuerModule -->\n\nSessionLoggerService->IssuerModule\n\n\n\nOid4vpModule -->\n\nSessionLoggerService->Oid4vpModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nIssuerModule -->\n\nWebhookService->IssuerModule\n\n\n\nOid4vpModule -->\n\nWebhookService->Oid4vpModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\nOid4vpModule -->\n\nPresentationsModule->Oid4vpModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nResolverModule\n\nResolverModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nResolverService \n\nResolverService \n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        15 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    14 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    24 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    28 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    13 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : a middleware to interact with the EUDI Wallet\n        \n            Bugs : https://github.com/openwallet-foundation-labs/eudiplo/issues\n        \n            License : Apache-2.0\n        \n            Repository : https://github.com/openwallet-foundation-labs/eudiplo.git\n        \n            Author : Mirko Mollik \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthConfig   (src/.../webhook.dto.ts)\n                        \n                        \n                            AuthenticationConfig   (src/.../authentication-config.dto.ts)\n                        \n                        \n                            certificateType   (src/.../crypto.service.ts)\n                        \n                        \n                            CryptoType   (src/.../crypto.service.ts)\n                        \n                        \n                            KeyPair   (src/.../crypto-implementation.ts)\n                        \n                        \n                            Notification   (src/.../session.entity.ts)\n                        \n                        \n                            Signer   (src/.../crypto-implementation.ts)\n                        \n                        \n                            Verifier   (src/.../crypto-implementation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/webhook/webhook.dto.ts\n    \n    \n        \n            \n                \n                    \n                    AuthConfig\n                \n            \n            \n                \n                    Enum for the type of authentication used in webhooks.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/issuer/issuance/dto/authentication-config.dto.ts\n    \n    \n        \n            \n                \n                    \n                    AuthenticationConfig\n                \n            \n            \n                \n                    Union type for authentication configurations\nEach method corresponds to a specific OpenID4VC flow\n\n                \n            \n            \n                \n                        literal type | literal type | literal type\n\n                \n            \n        \n    \n    src/crypto/crypto.service.ts\n    \n    \n        \n            \n                \n                    \n                    certificateType\n                \n            \n            \n                \n                        \"access\" | \"signing\"\n\n                \n            \n        \n    \n    src/crypto/key/crypto/crypto.service.ts\n    \n    \n        \n            \n                \n                    \n                    CryptoType\n                \n            \n            \n                \n                        \"ES256\" | \"Ed25519\"\n\n                \n            \n        \n    \n    src/crypto/key/crypto/crypto-implementation.ts\n    \n    \n        \n            \n                \n                    \n                    KeyPair\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Signer\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Verifier\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/session/entities/session.entity.ts\n    \n    \n        \n            \n                \n                    \n                    Notification\n                \n            \n            \n                \n                    Represents a session entity for managing user sessions in the application.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AUTH_VALIDATION_SCHEMA   (src/.../auth.module.ts)\n                        \n                        \n                            CRYPTO_VALIDATION_SCHEMA   (src/.../crypto.module.ts)\n                        \n                        \n                            DB_VALIDATION_SCHEMA   (src/.../database.module.ts)\n                        \n                        \n                            ED25519   (src/.../ed25519.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            ISSUER_VALIDATION_SCHEMA   (src/.../issuer.module.ts)\n                        \n                        \n                            KEY_VALIDATION_SCHEMA   (src/.../key.module.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            REGISTRAR_VALIDATION_SCHEMA   (src/.../registrar.module.ts)\n                        \n                        \n                            SESSION_LOGGER_KEY   (src/.../session-logger.decorator.ts)\n                        \n                        \n                            SESSION_VALIDATION_SCHEMA   (src/.../session.module.ts)\n                        \n                        \n                            SessionLogger   (src/.../session-logger.decorator.ts)\n                        \n                        \n                            TENANT_EVENTS   (src/.../tenant-events.ts)\n                        \n                        \n                            Token   (src/.../token.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    OIDC: Joi.string().optional(),\n    KEYCLOAK_INTERNAL_ISSUER_URL: Joi.when('OIDC', {\n        then: Joi.string().required(),\n        otherwise: Joi.string().optional(),\n    }),\n    KEYCLOAK_CLIENT_ID: Joi.when('OIDC', {\n        then: Joi.string().required(),\n        otherwise: Joi.string().optional(),\n    }),\n    JWT_SECRET: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().required(),\n    }),\n    JWT_ISSUER: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().optional().default('eudiplo-service'),\n    }),\n    JWT_EXPIRES_IN: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default('24h'),\n    }),\n    AUTH_CLIENT_SECRET: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().required(),\n    }),\n    AUTH_CLIENT_ID: Joi.when('OIDC', {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().required(),\n    }),\n}\n                    \n                \n\n\n        \n    \n\n    src/crypto/key/crypto/crypto.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CRYPTO_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    CRYPTO_ALG: Joi.string().valid('ES256', 'Ed25519').default('ES256'),\n}\n                    \n                \n\n\n        \n    \n\n    src/database/database.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DB_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    DB_TYPE: Joi.string().valid('sqlite', 'postgres').default('sqlite'),\n    DB_HOST: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PORT: Joi.number().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_USERNAME: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PASSWORD: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_DATABASE: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n}\n                    \n                \n\n\n        \n    \n\n    src/crypto/key/crypto/ed25519.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ED25519\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CryptoImplementation\n\n                    \n                \n                \n                    \n                        Default value : {\n    alg: 'EdDSA',\n    async generateKeyPair() {\n        const keyPair = await crypto.webcrypto.subtle.generateKey(\n            {\n                name: 'EdDSA',\n                namedCurve: 'Ed25519',\n            },\n            true,\n            ['sign', 'verify'],\n        );\n\n        const publicKey = await crypto.webcrypto.subtle.exportKey(\n            'jwk',\n            keyPair.publicKey,\n        );\n        const privateKey = await crypto.webcrypto.subtle.exportKey(\n            'jwk',\n            keyPair.privateKey,\n        );\n\n        return { publicKey, privateKey };\n    },\n    async getSigner(privateKeyJWK: object) {\n        const privateKey = await crypto.webcrypto.subtle.importKey(\n            'jwk',\n            privateKeyJWK,\n            {\n                name: 'EdDSA',\n                namedCurve: 'Ed25519',\n            },\n            false,\n            ['sign'],\n        );\n\n        return async (data: string) => {\n            const signature = await crypto.webcrypto.subtle.sign(\n                'EdDSA',\n                privateKey,\n                new TextEncoder().encode(data),\n            );\n\n            return Buffer.from(signature).toString('base64url');\n        };\n    },\n    async getVerifier(publicKeyJWK: object) {\n        const publicKey = await crypto.webcrypto.subtle.importKey(\n            'jwk',\n            publicKeyJWK,\n            {\n                name: 'EdDSA',\n                namedCurve: 'Ed25519',\n            },\n            false,\n            ['verify'],\n        );\n\n        return async (data: string, signatureBase64url: string) => {\n            const signature = Buffer.from(signatureBase64url, 'base64url');\n            const isVerified = await crypto.webcrypto.subtle.verify(\n                'EdDSA',\n                publicKey,\n                signature,\n                new TextEncoder().encode(data),\n            );\n\n            return isVerified;\n        };\n    },\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/issuer/issuer.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ISSUER_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    PUBLIC_URL: Joi.string(),\n}\n                    \n                \n\n\n        \n    \n\n    src/crypto/key/key.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        KEY_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    KM_TYPE: Joi.string().valid('file', 'vault').default('file'),\n\n    // Vault-related config\n    VAULT_URL: Joi.string().uri().when('KM_TYPE', {\n        is: 'vault',\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n    VAULT_TOKEN: Joi.string().when('KM_TYPE', {\n        is: 'vault',\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n    VAULT_KEY_ID: Joi.string().when('KM_TYPE', {\n        is: 'vault',\n        then: Joi.string().default('key-id'),\n        otherwise: Joi.optional(),\n    }),\n}\n                    \n                \n\n\n        \n    \n\n    src/registrar/registrar.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REGISTRAR_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    REGISTRAR_URL: Joi.string(),\n    REGISTRAR_OIDC_URL: Joi.string().when('REGISTRAR_URL', {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    REGISTRAR_OIDC_CLIENT_ID: Joi.string().when('REGISTRAR_URL', {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    REGISTRAR_OIDC_CLIENT_SECRET: Joi.string().when('REGISTRAR_URL', {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n}\n                    \n                \n\n            \n                \n                    Validation schema for the registrar module.\nDefines the required environment variables and their types.\n\n                \n            \n\n        \n    \n\n    src/utils/logger/session-logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SESSION_LOGGER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'session-logger'\n                    \n                \n\n            \n                \n                    Key for session logger metadata.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SessionLogger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n    sessionIdParam: string,\n    flowType: 'OID4VCI' | 'OID4VP',\n) => SetMetadata(SESSION_LOGGER_KEY, { sessionIdParam, flowType })\n                    \n                \n\n            \n                \n                    Decorator to mark methods that should have session-based logging\n\n                \n            \n\n        \n    \n\n    src/session/session.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SESSION_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    SESSION_TIDY_UP_INTERVAL: Joi.number().default(60 * 60), // default to every hour\n    SESSION_TTL: Joi.number().default(24 * 60 * 60), // default to 24 hours\n}\n                    \n                \n\n            \n                \n                    Module for managing user sessions.\n\n                \n            \n\n        \n    \n\n    src/auth/tenant-events.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TENANT_EVENTS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    TENANT_INIT: 'tenant.init',\n    TENANT_KEYS: 'tenant.keys',\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/token.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Token\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user as TokenPayload; // Access the token payload on the request object\n    },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
