var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AccessCertificateResponse.html",[0,1.437,1,3.686]],["body/interfaces/AccessCertificateResponse.html",[0,2.006,1,6.273,2,3.142,3,0.103,4,0.103,5,0.092,6,5.618,7,4.488,8,5.618,9,0.818,10,6.337,11,4.554,12,1.661,13,0.257,14,1.116,15,6.174,16,2.056,17,0.888,18,8.024,19,0.739,20,0.321,21,0.008,22,2.931,23,1.83,24,4.749,25,4.087,26,3.832,27,3.002,28,4.563,29,6.85,30,0.103,31,0.006,32,0.006]],["title/classes/ApiKeyConfig.html",[33,0.149,34,3.229]],["body/classes/ApiKeyConfig.html",[3,0.084,4,0.084,5,0.075,9,0.668,13,0.21,14,0.981,17,0.595,19,0.683,20,0.35,21,0.008,23,2.074,30,0.131,31,0.006,32,0.006,33,0.274,34,5.733,35,1.33,36,3.682,37,2.077,38,6.62,39,3.821,40,5.733,41,6.161,42,2.538,43,1.398,44,3.259,45,0.461,46,5.176,47,1.163,48,4.125,49,4.575,50,3.997,51,5.176,52,0.223,53,2.49,54,3.053,55,3.18,56,3.003,57,1.603,58,2.168,59,3.325,60,4.202,61,3.325,62,2.786,63,4.177,64,5.737,65,3.132,66,5.399,67,4.202,68,3.489,69,4.202,70,1.963,71,1.603,72,3.912,73,3.682,74,2.113,75,2.707,76,2.567,77,3.489,78,2.737,79,2.286]],["title/controllers/AppController.html",[80,1.377,81,3.432]],["body/controllers/AppController.html",[3,0.11,4,0.11,5,0.098,13,0.274,19,0.656,21,0.008,30,0.11,31,0.007,32,0.007,33,0.222,43,1.393,45,0.459,52,0.263,80,2.438,81,6.079,82,2.394,83,6.003,84,1.688,85,8.875,86,6.771,87,1.393,88,1.043,89,4.942,90,2.508,91,1.208,92,6.003,93,4.35,94,6.771,95,6.003,96,4.35,97,6.003,98,5.496,99,6.003]],["title/modules/AppModule.html",[100,1.266,101,3.432]],["body/modules/AppModule.html",[3,0.103,4,0.06,5,0.078,20,0.207,21,0.008,22,2.037,30,0.06,31,0.004,32,0.004,33,0.121,52,0.301,75,1.467,81,4.789,82,1.899,88,0.568,91,0.958,100,1.767,101,7.084,102,1.504,103,1.721,104,1.827,105,1.827,106,1.673,107,2.96,108,1.721,109,3.266,110,3.266,111,3.266,112,5.496,113,4.086,114,5.93,115,5.496,116,5.209,117,5.265,118,5.496,119,4.748,120,4.748,121,4.99,122,5.496,123,5.209,124,2.663,125,1.827,126,1.827,127,3.684,128,4.789,129,2.917,130,4.272,131,2.524,132,1.117,133,3.684,134,2.991,135,3.684,136,3.266,137,2.484,138,2.939,139,2.991,140,2.173,141,3.3,142,3.684,143,2.173,144,2.173,145,3.684,146,4.059,147,3.684,148,2.264,149,4.059,150,2.991,151,2.017,152,3.266,153,4.059,154,3.684,155,3.684,156,3.684,157,4.059,158,3.266,159,3.684,160,4.059,161,2.785,162,4.059,163,2.785,164,4.059,165,3.266,166,3.684,167,3.62,168,4.059,169,3.684,170,3.266,171,3.266,172,3.684,173,3.684,174,4.789,175,3.684,176,3.684,177,3.684,178,3.684,179,4.359,180,3.684,181,4.359,182,4.359,183,1.467,184,2.991,185,1.943,186,5.37,187,4.359,188,3.684,189,6.008,190,3.684,191,3.684,192,3.684,193,4.359,194,2.62,195,2.991,196,2.991,197,3.684,198,4.789,199,1.721,200,3.266,201,1.628,202,3.684,203,3.684,204,3.3,205,4.059,206,1.252,207,4.359,208,2.785,209,2.193,210,1.504,211,1.584,212,3.167,213,2.091,214,3.684,215,3.684,216,3.684,217,3.684,218,3.684,219,2.785,220,3.684,221,3.684,222,3.684,223,3.684,224,2.62,225,3.684,226,3.684,227,3.684,228,3.684,229,3.266,230,3.684,231,3.684,232,3.684,233,3.684,234,3.684,235,3.596,236,3.167,237,5.37,238,3.684,239,1.543,240,2.62,241,3.684,242,2.017,243,1.584,244,4.76,245,3.684,246,2.484,247,3.684,248,1.117,249,3.684,250,2.748,251,3.266,252,3.684,253,3.684,254,3.684,255,3.684,256,3.684,257,5.37,258,3.684,259,3.684,260,3.684,261,3.684]],["title/classes/AuthConfigValidator.html",[33,0.149,262,3.061]],["body/classes/AuthConfigValidator.html",[3,0.058,4,0.058,5,0.052,9,0.464,12,0.941,13,0.145,17,0.717,19,0.43,20,0.342,21,0.008,30,0.119,31,0.004,32,0.004,33,0.259,35,0.922,37,1.77,39,3.75,45,0.357,47,1.068,49,2.037,52,0.225,53,1.727,54,2.117,55,2.615,56,2.757,57,1.933,62,2.158,65,2.047,70,1.361,71,2.849,74,2.549,75,2.739,79,3.77,84,1.106,87,1.084,91,1.448,206,1.041,209,2.151,213,2.037,239,3.84,243,2.684,262,4.208,263,4.01,264,2.206,265,3.983,266,3.384,267,3.983,268,2.266,269,4.718,270,5.269,271,3.194,272,3.983,273,5.981,274,3.59,275,1.151,276,5.198,277,3.421,278,4.238,279,4.918,280,4.918,281,4.814,282,3.748,283,3.748,284,3.552,285,3.59,286,3.983,287,4.208,288,3.983,289,1.677,290,1.667,291,2.117,292,1.965,293,1.022,294,3.748,295,3.983,296,3.682,297,5.787,298,3.983,299,3.384,300,4.44,301,2.884,302,2.713,303,3.235,304,2.713,305,3.326,306,4.787,307,4.024,308,3.782,309,3.748,310,2.713,311,2.206,312,3.748,313,1.667,314,2.713,315,2.206,316,2.713,317,2.117,318,2.713,319,2.392,320,2.553,321,3.384,322,2.207,323,1.269,324,2.206,325,3.301,326,2.713,327,2.713,328,2.884,329,2.713,330,2.306,331,2.713,332,2.42,333,2.117,334,2.553,335,1.965]],["title/controllers/AuthController.html",[80,1.377,336,3.432]],["body/controllers/AuthController.html",[3,0.049,4,0.049,5,0.044,9,1.074,12,1.652,13,0.122,16,1.094,17,0.346,19,0.377,20,0.262,21,0.008,22,1.143,23,1.87,25,1.594,30,0.049,31,0.004,32,0.004,33,0.099,37,1.861,39,1.987,42,0.914,43,1.156,45,0.381,47,0.516,48,3.477,50,2.291,52,0.264,58,3.126,59,2.968,68,2.032,78,1.594,79,2.783,80,1.401,82,1.066,84,0.97,87,1.584,88,0.464,89,1.852,90,1.116,91,1.124,92,2.672,97,2.672,98,2.446,99,2.672,131,1.778,132,0.914,199,3.597,201,0.774,206,1.521,213,1.71,242,3.924,275,0.659,290,2.78,293,1.6,308,3.311,315,2.84,322,1.262,328,1.65,336,3.493,337,2.672,338,6.301,339,5.62,340,6.301,341,6.301,342,3.014,343,4.542,344,3.144,345,3.056,346,3.014,347,7.169,348,3.014,349,4.248,350,2.623,351,3.798,352,4.103,353,5.114,354,4.621,355,3.751,356,2.84,357,2.786,358,4.248,359,3.014,360,3.014,361,4.248,362,3.751,363,4.621,364,4.175,365,1.431,366,4.248,367,4.096,368,3.997,369,3.014,370,4.621,371,4.621,372,6.301,373,2.924,374,1.401,375,4.096,376,3.014,377,5.191,378,7.7,379,4.581,380,6.301,381,3.014,382,3.014,383,4.621,384,4.096,385,2.972,386,3.788,387,4.562,388,4.982,389,1.65,390,6.023,391,3.493,392,4.562,393,5.515,394,1.852,395,3.014,396,2.291,397,3.453,398,2.446,399,3.014,400,3.014,401,3.014,402,3.014,403,2.446,404,3.61,405,2.672,406,2.223,407,2.278,408,1.936,409,3.014,410,0.806,411,1.668,412,1.372,413,3.014,414,6.023,415,3.997,416,2.672,417,3.287,418,2.639,419,3.287,420,3.014,421,3.493,422,3.115,423,4.621,424,3.014,425,2.577,426,2.017,427,2.032,428,3.751,429,3.493,430,2.278,431,3.014,432,2.032,433,4.175,434,4.833,435,3.115,436,2.446,437,4.621,438,3.014,439,3.014,440,4.621,441,3.014,442,3.014,443,2.446,444,3.014,445,2.84,446,3.014,447,1.594,448,3.014,449,3.014,450,3.014,451,3.014,452,3.014,453,2.672,454,1.368,455,2.968,456,3.014,457,0.933,458,3.014,459,2.278,460,3.014,461,2.032,462,1.019,463,2.446,464,2.446,465,2.278,466,4.621,467,1.852,468,1.23,469,2.144,470,3.014,471,2.144,472,3.014,473,3.493,474,2.672,475,3.014,476,2.278,477,3.014,478,3.014,479,3.014,480,3.014,481,1.65,482,3.014,483,3.014,484,2.144,485,2.278,486,2.144,487,2.032,488,3.014,489,2.032,490,1.936,491,2.672,492,3.014,493,2.786,494,1.09,495,3.014,496,2.278,497,2.446,498,1.45]],["title/modules/AuthModule.html",[100,1.266,112,3.229]],["body/modules/AuthModule.html",[3,0.073,4,0.073,5,0.065,21,0.008,30,0.129,31,0.005,32,0.005,33,0.147,47,0.766,52,0.303,82,2.179,88,0.689,100,1.966,102,1.827,103,2.09,104,2.218,105,2.218,106,2.031,107,3.293,108,3.293,112,6.688,113,4.355,116,5.551,119,5.06,121,3.016,124,3.056,125,2.218,126,2.218,129,2.581,130,4.154,132,1.356,138,3.373,146,3.381,148,2.749,158,3.966,161,3.381,165,3.966,206,1.501,336,5.328,377,3.016,397,5.06,398,3.631,404,5.775,405,3.966,417,4.383,462,1.512,494,1.619,499,3.966,500,3.966,501,3.966,502,3.966,503,5.29,504,4.921,505,6.395,506,3.631,507,7.05,508,3.381,509,2.639,510,1.827,511,5.463,512,2.874,513,3.016,514,3.182,515,2.449,516,3.631,517,4.474,518,4.474,519,3.016,520,3.631,521,4.474,522,3.182,523,3.966,524,3.631,525,3.631,526,6.978,527,3.631,528,7.48,529,3.966,530,6.001,531,3.966,532,3.966,533,3.966,534,3.966,535,3.631,536,3.966,537,3.966,538,3.966,539,3.381,540,3.966,541,3.966,542,3.966,543,4.474,544,4.474,545,3.966,546,3.631,547,1.924,548,3.182]],["title/interfaces/AuthResponse.html",[0,1.437,549,3.229]],["body/interfaces/AuthResponse.html",[0,2.009,2,3.148,3,0.103,4,0.103,5,0.092,9,0.82,12,2.028,13,0.257,14,1.117,19,0.727,20,0.335,21,0.008,23,1.832,30,0.103,31,0.006,32,0.006,42,1.925,303,3.417,345,3.165,549,5.935,550,5.629,551,3.475,552,3.358,553,5.943,554,7.05,555,7.737,556,7.737,557,6.28,558,6.28,559,5.216,560,6.307,561,4.391,562,5.128,563,6.349,564,4.516]],["title/classes/AuthenticationConfigDto.html",[33,0.149,296,2.678]],["body/classes/AuthenticationConfigDto.html",[3,0.057,4,0.057,5,0.051,9,0.452,12,0.918,13,0.142,14,0.747,17,0.707,19,0.422,20,0.327,21,0.008,30,0.118,31,0.004,32,0.004,33,0.264,35,0.899,37,1.834,39,3.843,43,1.064,45,0.351,47,0.599,49,1.987,52,0.223,53,1.684,54,2.064,55,2.576,56,2.717,57,1.602,62,2.126,65,2.009,70,1.961,71,2.809,74,2.511,75,2.705,79,3.867,91,1.437,206,1.022,209,2.112,213,2.935,239,3.815,243,3.117,262,3.486,263,3.951,264,2.151,265,2.646,266,2.248,267,2.646,268,1.505,269,3.909,271,1.791,272,2.646,273,4.649,276,2.646,277,3.386,278,4.344,279,5.042,280,5.042,281,4.892,282,2.49,283,2.49,284,2.36,286,3.909,287,4.147,288,3.909,289,1.635,290,1.637,291,2.064,292,1.916,293,0.996,294,3.678,295,3.909,296,4.007,297,5.735,298,3.909,299,3.322,300,4.375,301,2.831,302,2.646,303,3.351,304,2.646,305,3.564,306,5.067,307,4.259,308,3.916,309,3.678,310,2.646,311,2.151,312,4.017,313,1.947,314,2.646,315,2.151,316,2.646,317,2.064,318,3.909,319,2.793,320,3.678,321,3.951,322,2.846,323,1.829,324,3.178,325,3.833,326,3.909,327,3.909,328,3.367,329,3.909,330,3.322,331,2.646,332,2.36,333,2.064,334,2.49,335,1.916,565,3.5,566,3.5,567,3.5]],["title/classes/AuthenticationConfigHelper.html",[33,0.149,568,2.916]],["body/classes/AuthenticationConfigHelper.html",[3,0.077,4,0.077,5,0.069,9,0.615,13,0.193,17,0.896,20,0.352,21,0.008,30,0.077,31,0.005,32,0.005,33,0.156,35,1.222,37,1.553,39,3.13,45,0.529,47,1.334,52,0.156,71,2.901,79,2.839,84,1.349,87,1.603,91,1.452,137,6.122,211,3.607,239,3.41,263,5.229,275,1.703,278,3.289,279,4.129,280,5.007,281,4.266,292,2.605,303,2.839,305,2.918,306,4.597,307,3.865,308,3.607,312,3.289,319,2.918,321,4.129,325,3.399,330,5.389,335,5.003,559,4.907,568,4.129,569,4.218,570,5.698,571,5.217,572,6.428,573,6.452,574,7.278,575,7.278,576,7.278,577,4.759,578,4.759,579,4.907,580,4.759,581,4.759,582,5.967,583,4.759,584,4.759,585,4.759,586,4.759,587,7.278,588,4.759,589,4.759]],["title/classes/AuthenticationUrlConfig.html",[33,0.149,279,2.916]],["body/classes/AuthenticationUrlConfig.html",[3,0.059,4,0.059,5,0.053,9,0.471,12,0.956,13,0.148,14,0.77,17,0.796,19,0.514,20,0.33,21,0.008,30,0.12,31,0.004,32,0.004,33,0.261,35,0.937,37,1.922,39,3.845,43,1.097,45,0.362,47,0.624,49,2.071,52,0.227,53,1.755,54,2.152,55,2.639,56,2.783,57,1.651,62,2.548,65,2.865,70,1.384,71,2.785,74,2.83,75,3.247,79,3.783,91,1.454,206,1.053,209,2.177,213,2.071,239,3.786,243,2.98,262,3.594,263,4.047,264,2.242,265,2.758,266,2.343,267,2.758,268,1.569,269,4.03,271,1.867,272,2.758,273,4.762,276,2.758,277,3.237,278,4.172,279,4.946,280,4.736,281,4.787,282,2.595,283,2.595,284,2.459,286,4.762,287,4.248,288,4.03,289,1.704,290,1.687,291,2.152,292,1.997,293,1.039,294,3.792,295,4.03,296,3.716,297,5.82,298,4.03,299,3.425,300,4.481,301,2.918,302,2.758,303,3.257,304,2.758,305,3.611,306,4.985,307,4.19,308,3.845,309,4.929,310,4.03,311,3.276,312,3.773,313,1.687,314,2.758,315,2.242,316,2.758,317,2.152,318,2.758,319,2.421,320,2.595,321,3.425,322,2.233,323,1.29,324,2.242,325,3.332,326,2.758,327,2.758,328,2.918,329,2.758,330,2.343,331,2.758,332,2.459,333,2.152,334,2.595,335,1.997,590,3.648,591,3.234,592,3.648]],["title/classes/AuthorizationResponse.html",[33,0.149,593,3.229]],["body/classes/AuthorizationResponse.html",[3,0.107,4,0.107,5,0.095,9,0.849,13,0.266,14,1.141,19,0.717,20,0.253,21,0.008,30,0.107,31,0.007,32,0.007,33,0.259,35,1.688,43,1.352,44,3.213,45,0.446,52,0.215,57,2.036,58,3.681,345,2.996,365,2.859,551,3.598,552,4.178,560,5.971,561,4.987,593,5.619,594,7.003,595,5.827,596,5.326]],["title/controllers/AuthorizeController.html",[80,1.377,597,3.432]],["body/controllers/AuthorizeController.html",[3,0.064,4,0.064,5,0.057,9,0.729,11,2.889,12,2.305,13,0.16,17,0.826,20,0.314,21,0.008,30,0.064,31,0.005,32,0.005,33,0.129,43,1.479,45,0.488,47,1.231,52,0.285,58,3.744,62,1.951,80,2.306,82,1.396,84,1.185,87,1.676,88,0.608,89,2.426,90,1.462,91,1.282,201,1.014,206,0.78,210,1.612,235,4.623,250,4.5,271,2.889,275,1.571,293,1.876,307,2.799,317,2.329,345,3.216,351,4.138,365,2.523,373,3.351,374,2.18,389,2.161,391,4.267,396,1.958,408,2.536,410,1.056,411,1.676,412,2.418,422,2.662,457,1.223,597,4.267,598,3.5,599,1.958,600,3.948,601,5.004,602,4.267,603,5.645,604,4.618,605,4.98,606,6.589,607,7.19,608,3.5,609,5.35,610,2.991,611,3.948,612,3.948,613,4.015,614,3.948,615,3.948,616,4.847,617,4.686,618,3.948,619,3.948,620,5.836,621,3.948,622,3.948,623,3.948,624,3.948,625,3.948,626,5.004,627,2.536,628,2.662,629,3.205,630,2.241,631,2.161,632,2.02,633,4.442,634,2.984,635,2.536,636,2.984,637,3.267,638,2.536,639,3.74,640,3.948,641,2.984,642,1.844,643,2.984,644,3.948,645,4.98,646,3.948,647,1.572,648,3.948,649,3.948,650,3.948,651,3.948,652,4.418,653,3.948,654,3.5,655,3.205,656,3.205,657,3.5,658,3.948,659,3.5,660,3.948,661,3.5,662,2.984,663,3.948,664,3.948,665,3.948]],["title/classes/AuthorizeQueries.html",[33,0.149,609,2.79]],["body/classes/AuthorizeQueries.html",[3,0.083,4,0.083,5,0.074,13,0.207,14,0.975,17,1.091,19,0.775,20,0.352,21,0.008,30,0.083,31,0.006,32,0.006,33,0.221,35,1.315,43,1.877,44,3.484,45,0.619,52,0.168,56,4.057,57,1.586,386,5.09,609,4.148,652,4.64,666,8.143,667,3.02,668,5.371,669,7.551,670,7.551,671,7.551,672,5.09,673,7.551,674,6.694,675,4.85,676,5.707,677,9.125,678,5.121,679,4.157,680,5.121,681,5.121,682,5.121,683,4.54,684,5.121,685,4.157,686,5.121,687,4.54,688,4.54]],["title/injectables/AuthorizeService.html",[639,2.577,689,0.897]],["body/injectables/AuthorizeService.html",[0,1.229,3,0.039,4,0.039,5,0.035,12,1.981,13,0.098,17,0.846,19,0.677,20,0.308,21,0.008,22,0.916,30,0.063,31,0.003,32,0.003,33,0.079,37,0.939,39,2.094,42,0.733,45,0.499,47,1.26,52,0.266,58,1.627,63,3.428,65,2.537,70,2.116,71,1.203,74,2.278,75,2.222,76,1.198,78,2.576,79,2.151,84,0.815,87,1.468,88,0.372,91,1.165,131,2.066,132,0.733,183,1.939,201,1.251,206,1.732,210,1.989,211,1.039,235,2.764,239,2.735,240,3.464,242,2.666,248,2.292,250,3.652,275,1.609,278,1.236,289,1.129,290,0.765,293,2.404,303,2.7,305,1.097,306,2.291,307,3.748,308,2.094,311,2.387,312,1.236,313,1.229,322,1.012,323,1.722,325,1.278,351,1.162,352,1.129,357,1.198,365,2.476,373,2.728,374,1.178,385,1.278,410,1.039,411,2.118,425,2.707,426,2.244,432,2.618,433,1.485,447,1.278,457,2.541,461,1.629,467,1.485,468,1.989,469,1.718,471,1.718,473,1.826,476,1.826,481,2.126,490,1.552,553,2.495,568,1.552,605,3.681,608,2.142,609,4.645,610,2.966,613,1.718,616,2.618,617,3.464,627,3.129,628,1.629,631,1.322,632,1.236,637,3.403,638,1.552,639,2.204,641,1.826,642,1.129,652,2.993,668,3.968,672,3.761,689,0.767,690,0.895,691,1.826,692,3.443,693,3.884,694,3.953,695,3.884,696,3.953,697,3.884,698,3.953,699,1.322,700,2.875,701,3.895,702,3.756,703,2.416,704,2.416,705,2.936,706,2.416,707,4.935,708,3.153,709,2.416,710,4.962,711,2.416,712,2.416,713,1.371,714,2.054,715,3.153,716,2.416,717,2.416,718,2.416,719,3.153,720,2.416,721,2.416,722,2.416,723,3.469,724,4.217,725,4.217,726,2.533,727,1.961,728,4.217,729,1.629,730,1.198,731,1.961,732,1.826,733,1.826,734,1.629,735,1.629,736,1.961,737,2.763,738,3.153,739,2.763,740,1.961,741,1.961,742,3.153,743,1.961,744,2.936,745,2.387,746,4.529,747,3.291,748,1.961,749,1.961,750,1.826,751,1.961,752,1.826,753,1.826,754,1.552,755,1.826,756,1.826,757,1.961,758,1.826,759,1.961,760,1.826,761,1.961,762,1.961,763,1.988,764,3.153,765,1.961,766,1.826,767,1.961,768,1.961,769,3.756,770,1.961,771,1.961,772,1.961,773,1.961,774,1.961,775,3.953,776,3.464,777,1.961,778,3.968,779,1.961,780,1.961,781,1.826,782,1.961,783,1.961,784,4.529,785,3.153,786,5.187,787,1.961,788,3.153,789,3.153,790,3.153,791,3.153,792,1.764,793,3.153,794,1.961,795,1.961,796,1.961,797,1.961,798,1.961,799,1.961,800,1.961,801,2.936,802,1.961,803,1.961,804,1.425,805,1.162,806,1.961,807,1.826,808,1.552,809,1.961,810,1.826,811,1.961,812,1.961,813,1.826,814,1.425,815,3.153,816,1.826,817,1.961,818,3.953,819,1.961,820,1.961,821,1.961,822,1.961,823,1.961,824,1.826,825,3.153,826,1.961,827,3.153,828,2.618,829,1.961,830,3.953,831,1.961,832,1.961,833,1.826,834,1.961,835,1.961,836,1.425,837,2.291,838,1.629,839,1.826,840,1.552,841,1.961,842,1.961,843,1.371,844,1.961,845,1.961,846,1.961,847,1.961,848,1.961,849,1.961,850,1.826,851,1.718,852,1.718,853,1.826,854,1.961,855,1.961,856,1.961,857,1.826,858,1.961,859,1.961,860,1.826]],["title/entities/CertEntity.html",[861,1.501,862,2.678]],["body/entities/CertEntity.html",[3,0.082,4,0.082,5,0.073,7,3.968,9,1.104,11,3.849,13,0.206,14,0.97,15,5.351,16,1.971,17,0.772,19,0.722,20,0.356,21,0.008,23,2.096,24,4.127,25,3.552,26,3.33,27,2.609,30,0.109,31,0.006,32,0.006,33,0.167,43,1.759,45,0.58,52,0.166,185,2.896,201,2.273,248,2.281,493,3.33,494,2.43,498,4.003,861,2.646,862,3.961,863,2.445,864,4.125,865,5.077,866,5.954,867,4.27,868,5.042,869,3.615,870,4.777,871,5.082,872,6.716,873,5.333,874,5.082,875,4.314,876,5.082,877,4.852,878,5.082,879,5.082,880,5.351,881,5.082,882,3.552,883,2.129]],["title/interfaces/Client.html",[0,1.437,352,2.121]],["body/interfaces/Client.html",[0,1.74,2,1.887,3,0.062,4,0.062,5,0.055,13,0.154,14,0.794,16,2.104,19,0.705,20,0.212,21,0.008,30,0.089,31,0.005,32,0.005,33,0.125,37,1.329,39,1.636,52,0.286,73,2.706,87,1.131,88,0.586,91,1.437,93,5.481,131,2.042,132,1.154,183,2.815,185,1.377,201,0.977,206,1.086,211,1.636,239,1.594,250,1.947,268,1.636,271,1.947,290,1.74,293,2.012,308,1.636,344,3.346,352,4.323,364,2.338,397,2.338,410,1.018,411,2.565,412,1.632,418,3.273,425,2.085,426,1.632,433,3.378,434,3.91,445,4.608,457,2.643,462,1.858,496,4.155,510,1.554,512,2.444,513,2.565,514,2.706,515,2.083,519,2.565,520,3.089,539,2.876,548,5.028,579,5.268,689,1.086,700,2.703,730,1.887,877,2.16,884,3.089,885,5.239,886,4.59,887,2.083,888,3.089,889,4.462,890,2.876,891,2.644,892,2.444,893,3.966,894,3.089,895,3.663,896,2.706,897,3.12,898,2.565,899,3.966,900,3.089,901,4.873,902,3.373,903,3.373,904,3.373,905,3.373,906,3.373,907,2.338,908,2.876,909,5.239,910,3.373,911,4.873,912,3.373,913,5.721,914,3.373,915,3.089,916,3.373,917,3.373,918,3.373,919,2.876,920,3.373,921,4.873,922,4.873,923,3.373,924,3.373,925,3.373,926,3.373,927,2.16,928,3.373,929,3.373,930,3.373,931,3.373,932,3.373,933,4.873,934,4.873,935,2.012,936,3.373,937,3.089,938,3.373,939,3.373,940,2.565,941,3.373,942,3.706,943,4.873,944,2.876,945,3.089,946,3.373,947,3.373,948,3.089,949,2.244,950,3.373,951,3.373,952,3.373,953,3.373,954,3.373,955,3.373,956,3.373,957,3.373,958,3.373,959,3.373]],["title/classes/ClientCredentialsDto.html",[33,0.149,361,3.432]],["body/classes/ClientCredentialsDto.html",[3,0.11,4,0.11,5,0.098,13,0.274,14,1.161,19,0.724,20,0.31,21,0.008,30,0.11,31,0.007,32,0.007,33,0.264,35,1.739,43,1.654,44,3.437,45,0.545,52,0.222,57,2.097,361,6.079,386,5.783,387,6.963,960,7.605,961,6.003,962,6.771,963,6.771]],["title/entities/ClientEntry.html",[519,3.061,861,1.501]],["body/entities/ClientEntry.html",[3,0.102,4,0.102,5,0.091,13,0.256,14,1.113,16,1.972,17,0.886,19,0.708,20,0.334,21,0.008,30,0.125,31,0.006,32,0.006,33,0.207,43,1.712,45,0.564,52,0.207,93,4.055,183,3.452,185,2.79,201,1.98,344,2.514,418,3.487,519,5.198,861,2.549,863,3.037,873,5.113,875,4.952,882,3.339,883,2.645,964,5.125,965,6.314,966,6.756,967,6.314,968,6.756,969,6.291,970,6.314]],["title/injectables/ClientService.html",[397,2.79,689,0.897]],["body/injectables/ClientService.html",[0,1.514,3,0.051,4,0.051,5,0.046,13,0.128,14,0.691,16,2.034,17,0.797,19,0.718,20,0.281,21,0.008,30,0.078,31,0.004,32,0.004,33,0.103,37,1.559,39,2.058,42,0.957,45,0.542,47,1.187,52,0.275,73,3.404,84,1.004,87,1.645,88,0.486,91,1.353,93,5.461,131,2.31,132,0.957,183,2.569,185,1.731,201,0.81,206,0.945,211,2.058,239,2.004,250,1.615,268,1.357,271,2.449,275,1.515,290,2.042,293,2.322,308,2.058,344,3.346,352,4.335,364,2.941,397,2.941,410,1.28,411,2.61,412,1.42,418,3.057,425,1.815,426,1.42,433,3.965,434,4.589,445,2.941,457,2.526,462,1.954,496,3.617,510,1.288,512,2.027,513,2.127,514,2.244,515,1.727,519,2.127,520,2.561,539,2.385,548,5.557,579,5.498,689,0.945,690,1.169,699,1.727,700,3.177,730,1.564,877,2.716,884,2.561,885,4.692,886,5.192,887,1.727,888,2.561,889,5.237,890,2.385,891,3.103,892,2.027,893,4.66,894,2.561,895,4.304,896,2.244,897,3.662,898,2.127,899,4.66,900,2.561,901,5.124,902,5.124,903,2.797,904,5.124,905,2.797,906,5.124,907,1.939,908,2.385,909,4.692,910,2.797,911,4.242,912,5.719,913,5.124,914,2.797,915,3.884,916,5.719,917,2.797,918,2.797,919,2.385,920,4.242,921,4.242,922,4.242,923,2.797,924,4.242,925,4.242,926,4.242,927,1.791,928,2.797,929,2.797,930,2.797,931,2.797,932,2.797,933,4.242,934,4.242,935,1.669,936,2.797,937,2.561,938,2.797,939,2.797,940,2.127,941,2.797,942,3.226,943,4.242,944,2.385,945,2.561,946,2.797,947,2.797,948,3.884,949,2.822,950,4.242,951,4.242,952,4.242,953,4.242,954,4.242,955,2.797,956,2.797,957,2.797,958,2.797,959,2.797,971,4.785,972,4.785,973,4.785,974,4.785,975,4.785,976,3.155,977,3.155,978,3.155,979,3.155,980,3.155,981,3.155,982,3.155]],["title/classes/CreateCredentialIssuanceBindingDto.html",[33,0.149,983,3.229]],["body/classes/CreateCredentialIssuanceBindingDto.html",[3,0.077,4,0.077,5,0.068,9,1.153,13,0.192,14,0.925,16,2.15,19,0.735,20,0.28,21,0.008,23,2.092,26,2.349,27,1.841,30,0.118,31,0.005,32,0.005,33,0.255,35,1.217,37,2.025,43,1.494,44,2.951,45,0.492,50,4.5,52,0.21,57,1.468,62,1.638,71,1.985,90,1.755,313,2.825,322,3.042,323,3.209,365,1.468,426,2.156,498,4.191,552,4.115,867,2.689,868,2.795,983,4.559,984,5.881,985,3.582,986,5.202,987,5.149,988,5.534,989,5.534,990,4.16,991,5.166,992,5.895,993,4.738,994,4.738,995,6.316,996,6.316,997,6.316,998,6.316,999,4.738,1000,4.738,1001,6.598,1002,4.738,1003,4.738,1004,5.734,1005,4.559,1006,5.202,1007,5.895,1008,5.202,1009,3.846,1010,3.37,1011,3.37,1012,3.846,1013,3.37,1014,3.194,1015,2.594,1016,3.846,1017,3.846]],["title/entities/CredentialConfig.html",[861,1.501,1018,2.678]],["body/entities/CredentialConfig.html",[3,0.055,4,0.055,5,0.049,9,0.442,12,1.333,13,0.139,14,0.734,16,1.846,17,1.029,19,0.614,20,0.333,21,0.008,23,1.896,26,2.522,27,1.976,28,3.678,30,0.055,31,0.004,32,0.004,33,0.167,37,2.108,43,1.777,44,2.302,45,0.586,52,0.255,55,3.152,56,3.442,57,1.06,62,2.601,71,2.331,185,2.723,199,2.376,201,2.219,209,2.743,210,1.397,248,1.84,290,1.609,291,2.018,292,1.873,305,2.309,313,2.874,323,2.755,344,2.025,356,3.125,385,2.689,396,1.697,418,2.815,462,1.157,465,3.844,468,2.076,490,2.198,494,1.84,498,2.446,547,2.187,763,1.751,792,2.309,836,3,861,2.221,862,3.963,863,1.646,865,3.844,873,3,875,5.347,877,3.814,882,1.809,883,1.433,987,3.125,990,3.106,1018,3,1019,3.033,1020,5.542,1021,4.927,1022,5.38,1023,5.38,1024,4.588,1025,4.413,1026,6.069,1027,5.005,1028,3.678,1029,5.254,1030,5.086,1031,3.422,1032,4.508,1033,4.508,1034,4.128,1035,5.957,1036,5.38,1037,3.033,1038,3.422,1039,2.522,1040,4.508,1041,4.316,1042,3.422,1043,5.086,1044,3.422,1045,5.086,1046,4.508,1047,3.422,1048,5.086,1049,5.086,1050,2.784,1051,3.428,1052,3.422,1053,3.422,1054,3.617,1055,3.422,1056,3.422,1057,3.422,1058,3.422,1059,2.777,1060,3.422,1061,5.086,1062,3.422,1063,3.422,1064,5.086,1065,4.317,1066,2.777,1067,3.422,1068,3,1069,3.422,1070,3.422,1071,3.963,1072,5.086,1073,5.086,1074,3.422,1075,3.422,1076,3.422,1077,3.422,1078,2.103,1079,6.069,1080,5.957,1081,3.844,1082,4.508,1083,4.508,1084,3.422,1085,2.586,1086,3.033,1087,2.586,1088,3.422,1089,2.777,1090,3.422,1091,3.033,1092,5.086,1093,2.777]],["title/classes/CredentialConfigMapping.html",[33,0.149,1094,3.432]],["body/classes/CredentialConfigMapping.html",[3,0.088,4,0.088,5,0.078,9,0.697,13,0.219,14,1.009,16,1.941,17,0.621,19,0.632,20,0.327,21,0.008,26,3.842,27,3.01,30,0.113,31,0.006,32,0.006,33,0.268,35,1.387,37,2.138,39,3.332,42,1.637,43,1.111,44,3.107,45,0.366,52,0.268,53,2.598,55,3.245,56,3.422,57,1.673,65,2.098,70,2.048,74,3.163,76,2.678,185,1.954,201,1.387,239,2.262,275,1.18,287,5.523,289,2.523,290,1.709,292,2.956,296,4.57,313,2.685,319,3.518,323,3.074,324,3.319,333,3.185,335,2.956,356,3.319,365,1.673,547,2.322,552,4.097,596,3.641,1081,5.282,1094,6.193,1095,4.384,1096,5.673,1097,5.401,1098,5.282,1099,3.641,1100,4.082,1101,4.082,1102,4.788,1103,4.082,1104,2.956,1105,4.082,1106,4.082,1107,4.082,1108,4.082,1109,2.956,1110,3.841]],["title/injectables/CredentialConfigService.html",[689,0.897,1111,2.916]],["body/injectables/CredentialConfigService.html",[3,0.049,4,0.049,5,0.108,7,1.486,9,0.875,13,0.121,16,2.131,17,0.779,19,0.716,20,0.261,21,0.008,22,2.124,23,1.09,30,0.049,31,0.004,32,0.004,33,0.184,37,1.858,42,1.395,45,0.505,47,1.16,52,0.286,53,1.442,57,0.928,71,2.573,78,1.585,84,0.966,87,1.621,88,0.462,91,1.121,129,1.928,131,2.357,132,0.909,140,1.768,141,1.842,143,1.768,144,2.714,174,2.266,201,1.439,206,1.679,209,1.224,211,1.289,248,2.518,271,2.355,275,1.481,284,2.021,290,1.456,293,1.594,299,2.956,313,2.591,319,2.853,344,1.194,368,3.273,374,2.169,410,1.681,411,1.865,412,2.282,454,2.543,457,1.946,462,1.893,494,3.195,510,1.224,647,1.194,689,0.909,690,1.11,700,3.12,730,1.486,861,2.541,863,2.214,883,1.256,887,1.641,891,3.441,949,3.303,990,2.355,1018,5.062,1033,4.079,1068,2.714,1111,4.036,1112,6.604,1113,5.298,1114,2.266,1115,2.214,1116,3.441,1117,4.602,1118,3.566,1119,2.998,1120,2.866,1121,4.236,1122,2.657,1123,5.601,1124,4.602,1125,2.998,1126,2.828,1127,4.363,1128,6.342,1129,3.273,1130,4.602,1131,4.602,1132,2.998,1133,3.861,1134,3.102,1135,4.602,1136,2.998,1137,2.998,1138,3.984,1139,4.602,1140,2.998,1141,3.273,1142,3.984,1143,4.06,1144,3.478,1145,2.433,1146,2.433,1147,2.266,1148,2.266,1149,2.433,1150,2.657,1151,2.433,1152,2.433,1153,3.735,1154,2.998,1155,4.546,1156,2.433,1157,2.433,1158,3.735,1159,2.433,1160,2.433,1161,2.433,1162,2.433,1163,4.546,1164,2.714,1165,2.433,1166,2.433,1167,2.021,1168,2.433,1169,6.047,1170,3.735,1171,2.433,1172,2.132,1173,2.433,1174,2.433,1175,2.433,1176,2.433,1177,2.998,1178,2.998,1179,4.546,1180,4.546,1181,2.433,1182,2.998,1183,2.433,1184,2.433,1185,2.433,1186,5.601,1187,4.234,1188,2.998,1189,3.273,1190,3.735,1191,3.273,1192,3.735,1193,2.998,1194,2.021,1195,2.828,1196,2.998,1197,2.433,1198,2.433,1199,2.433,1200,2.433,1201,2.433,1202,2.998,1203,2.132,1204,2.433,1205,2.998,1206,2.657,1207,2.998,1208,2.998,1209,2.998]],["title/entities/CredentialIssuanceBinding.html",[861,1.501,1041,2.916]],["body/entities/CredentialIssuanceBinding.html",[3,0.082,4,0.082,5,0.073,9,0.654,13,0.205,14,0.968,17,0.77,19,0.653,20,0.329,21,0.008,23,1.588,30,0.082,31,0.006,32,0.006,33,0.166,37,1.932,43,1.71,45,0.564,52,0.246,62,2.317,185,2.425,210,2.069,211,2.179,313,2.121,315,3.114,323,3.165,498,3.224,557,5.441,861,2.643,863,2.437,867,4.263,868,4.715,869,3.604,870,4.768,882,3.545,883,2.122,966,6.748,987,4.119,988,5.343,989,5.343,990,3.43,1014,4.519,1015,3.669,1018,5.373,1041,4.306,1054,5.686,1082,6.659,1210,7.572,1211,4.492,1212,6.703,1213,8.542,1214,7.512,1215,5.598,1216,5.067,1217,6.703,1218,6.703,1219,5.067,1220,6.703,1221,6.703,1222,5.067,1223,5.067,1224,6.703,1225,5.067,1226,5.067,1227,4.113,1228,3.255,1229,5.067,1230,4.492,1231,5.067]],["title/classes/CredentialIssuanceBindingResponseDto.html",[33,0.149,1013,3.229]],["body/classes/CredentialIssuanceBindingResponseDto.html",[3,0.073,4,0.073,5,0.065,9,1.142,13,0.182,14,0.894,16,2.16,19,0.735,20,0.308,21,0.008,23,2.069,26,3.07,27,2.405,30,0.115,31,0.005,32,0.005,33,0.25,35,1.157,37,1.994,43,1.643,44,2.889,45,0.541,50,4.522,52,0.203,57,1.395,62,2.14,71,1.395,90,1.668,313,2.798,322,2.593,323,3.205,365,1.917,426,1.838,498,4.141,552,4.028,867,4.015,868,3.651,983,3.203,984,6.237,985,3.404,986,3.656,987,5.291,988,5.418,989,5.418,990,4.086,991,5.68,992,5.742,995,6.482,996,6.482,997,6.482,998,6.482,1001,6.698,1004,5.678,1005,4.403,1006,5.742,1007,6.482,1008,5.742,1009,3.656,1010,3.203,1011,3.203,1012,3.656,1013,4.403,1014,4.173,1015,3.388,1016,5.025,1017,5.025,1232,4.504,1233,4.504,1234,4.504,1235,4.504,1236,4.504]],["title/classes/CredentialIssuerMetadataDto.html",[33,0.149,1237,3.432]],["body/classes/CredentialIssuerMetadataDto.html",[3,0.081,4,0.081,5,0.072,9,0.647,13,0.203,14,0.96,19,0.736,20,0.344,21,0.008,27,2.584,30,0.081,31,0.005,32,0.005,33,0.164,35,1.286,45,0.598,58,3.332,68,4.483,75,3.513,96,5.11,290,2.518,301,3.64,313,2.826,319,3.019,323,3.01,351,3.827,356,4.087,357,3.297,430,5.026,468,3.809,547,2.153,559,3.375,851,4.73,937,5.398,1039,2.482,1089,6.722,1104,3.64,1107,3.784,1108,5.644,1110,3.561,1134,4.483,1167,3.375,1237,5.026,1238,5.736,1239,7.916,1240,4.064,1241,3.077,1242,6.619,1243,6.619,1244,7.467,1245,6.061,1246,6.619,1247,6.619,1248,6.619,1249,5.007,1250,6.65,1251,5.007,1252,3.774,1253,6.65,1254,5.007,1255,5.007,1256,5.007,1257,5.007,1258,5.007,1259,5.007]],["title/controllers/CredentialsController.html",[80,1.377,1260,3.432]],["body/controllers/CredentialsController.html",[3,0.081,4,0.081,5,0.072,9,0.644,13,0.202,16,1.881,17,0.856,19,0.608,20,0.287,21,0.008,30,0.081,31,0.005,32,0.005,33,0.163,37,1.919,43,1.533,45,0.505,47,1.275,52,0.278,71,2.46,80,2.259,82,1.762,84,1.392,87,1.813,88,0.768,90,1.846,91,1.329,243,3.79,275,1.628,313,2.824,319,3.606,345,2.826,373,2.456,389,4.078,394,3.063,406,4.334,412,2.357,468,2.035,494,2.873,504,2.728,599,2.471,630,2.829,647,1.985,1018,4.684,1071,2.94,1111,4.786,1113,3.545,1115,3.189,1116,2.398,1126,4.074,1141,4.716,1149,4.046,1260,5.632,1261,4.419,1262,6.63,1263,6.048,1264,6.63,1265,7.451,1266,4.419,1267,4.716,1268,4.984,1269,4.984,1270,4.984,1271,4.984,1272,4.984,1273,3.36,1274,3.36,1275,3.202,1276,4.046,1277,4.046,1278,3.36,1279,3.36,1280,4.046,1281,3.545,1282,4.074,1283,2.202,1284,4.984,1285,4.984,1286,4.984,1287,3.767,1288,4.984]],["title/controllers/CredentialsMetadataController.html",[80,1.377,1289,3.432]],["body/controllers/CredentialsMetadataController.html",[3,0.09,4,0.09,5,0.08,9,0.715,13,0.224,16,2.072,17,0.816,19,0.758,20,0.319,21,0.008,27,2.758,30,0.09,31,0.006,32,0.006,33,0.181,37,1.716,43,1.46,45,0.481,47,1.215,52,0.257,80,1.678,82,1.957,84,1.49,87,1.612,88,0.852,89,3.401,90,2.05,91,1.266,201,1.421,248,2.732,275,1.551,290,2.247,313,2.769,328,3.886,408,3.555,412,2.327,462,2.4,599,2.744,647,2.204,1025,5.081,1027,5.311,1039,3.52,1133,5.081,1282,4.817,1283,2.444,1289,5.366,1290,5.575,1291,6.363,1292,4.906,1293,5.534,1294,5.534,1295,7.099,1296,5.534,1297,5.534,1298,7.099,1299,5.534,1300,4.56,1301,4.492,1302,5.534,1303,5.534,1304,7.099,1305,5.534,1306,5.534,1307,5.534]],["title/injectables/CredentialsService.html",[689,0.897,1282,2.79]],["body/injectables/CredentialsService.html",[3,0.045,4,0.045,5,0.04,9,0.355,13,0.111,16,1.769,17,0.748,19,0.688,20,0.288,21,0.008,23,1.018,30,0.045,31,0.004,32,0.004,33,0.09,37,1.993,42,0.832,45,0.468,47,1.114,48,1.405,52,0.283,70,2.009,78,2.273,84,0.902,87,1.615,88,0.423,91,1.069,131,2.363,132,0.832,150,2.229,151,1.503,201,0.705,206,1.696,248,2.531,275,1.422,277,2.475,290,1.897,291,1.619,292,1.503,293,2.315,305,1.952,313,2.669,319,1.952,328,3.281,344,1.093,374,2.093,396,1.361,410,1.604,411,2.049,412,2.478,418,3.022,425,2.468,426,2.049,447,2.273,457,2.432,462,1.453,467,2.642,484,1.953,486,3.768,487,3.571,497,2.229,498,2.068,510,1.121,515,1.503,547,1.181,610,2.814,632,1.405,689,0.849,690,1.017,700,3.022,702,3.281,714,1.452,723,3.917,726,3.486,729,1.851,730,1.361,734,1.851,747,4.255,769,3.562,792,1.952,804,1.619,805,1.321,838,1.851,883,1.15,887,1.503,891,2.883,897,4.238,898,1.851,935,1.452,987,3.999,990,2.2,1018,3.838,1020,3.058,1022,3.811,1024,2.075,1025,3.256,1027,4.18,1028,1.503,1036,2.434,1050,2.9,1051,1.851,1065,1.953,1071,1.619,1078,1.687,1085,2.075,1115,2.068,1133,3.684,1138,3.058,1149,2.229,1150,2.434,1215,4.589,1228,1.764,1245,3.489,1252,1.558,1282,3.684,1300,2.761,1308,2.434,1309,4.696,1310,5.298,1311,5.298,1312,4.299,1313,2.434,1314,5.995,1315,5.995,1316,4.404,1317,2.745,1318,2.745,1319,6.508,1320,2.745,1321,4.299,1322,2.898,1323,5.483,1324,2.745,1325,2.745,1326,2.745,1327,2.745,1328,4.299,1329,2.745,1330,5.995,1331,3.811,1332,4.299,1333,2.075,1334,2.075,1335,3.811,1336,2.075,1337,3.811,1338,2.075,1339,1.953,1340,2.434,1341,2.745,1342,1.503,1343,3.811,1344,2.745,1345,2.745,1346,5.314,1347,2.745,1348,2.745,1349,2.745,1350,4.299,1351,4.299,1352,2.745,1353,2.745,1354,2.745,1355,2.745,1356,5.298,1357,2.745,1358,2.745,1359,4.299,1360,2.761,1361,2.745,1362,2.745,1363,2.745,1364,2.745,1365,2.745,1366,2.229,1367,2.745,1368,2.745,1369,2.745,1370,2.434,1371,2.745,1372,2.434,1373,2.229,1374,2.745,1375,2.745,1376,4.299,1377,3.058,1378,2.229,1379,2.745,1380,2.745,1381,2.745,1382,2.229,1383,1.764,1384,2.434,1385,2.229,1386,4.299,1387,4.866,1388,2.745,1389,2.745,1390,2.745,1391,1.953,1392,2.075,1393,4.299,1394,2.075,1395,2.745,1396,2.745,1397,2.745,1398,4.299]],["title/modules/CryptoImplementatationModule.html",[100,1.266,1399,3.229]],["body/modules/CryptoImplementatationModule.html",[3,0.103,4,0.103,5,0.092,21,0.008,30,0.125,31,0.006,32,0.006,33,0.208,52,0.284,88,0.978,100,2.327,102,2.592,103,2.966,104,3.148,105,3.148,106,2.883,107,3.898,108,3.898,124,3.836,125,3.148,126,3.148,129,2.66,130,5.216,132,1.925,138,4.235,149,4.799,151,3.475,206,1.254,349,5.848,1194,4.28,1316,5.579,1339,4.516,1399,6.52,1400,5.629,1401,5.629,1402,5.629,1403,4.28,1404,5.154,1405,5.629,1406,5.629]],["title/interfaces/CryptoImplementation.html",[0,1.437,1407,3.061]],["body/interfaces/CryptoImplementation.html",[0,2.475,2,2.73,3,0.089,4,0.089,5,0.08,9,0.711,13,0.223,14,1.022,17,0.813,19,0.713,20,0.337,21,0.008,23,1.955,30,0.089,31,0.006,32,0.006,45,0.53,47,1.338,84,1.485,87,1.609,151,4.518,275,1.546,374,2.729,412,2.101,426,2.101,562,4.349,804,4.612,805,3.97,1034,6.7,1322,5.564,1403,5.564,1407,4.771,1408,4.47,1409,5.744,1410,7.077,1411,5.744,1412,5.034,1413,6.7,1414,7.077,1415,7.077,1416,5.507,1417,6.274,1418,5.272,1419,6.274,1420,9.002,1421,5.507,1422,6.239,1423,5.744,1424,6.274,1425,5.507,1426,5.911,1427,6.274,1428,3.712,1429,3.712,1430,4.47,1431,3.537]],["title/injectables/CryptoImplementationService.html",[689,0.897,1316,2.678]],["body/injectables/CryptoImplementationService.html",[3,0.089,4,0.089,5,0.079,13,0.221,17,0.809,20,0.271,21,0.008,30,0.114,31,0.006,32,0.006,33,0.179,42,1.656,45,0.528,47,1.205,52,0.279,62,2.433,84,1.478,87,1.793,88,0.841,91,1.519,131,2.604,132,1.656,151,4.504,185,2.547,275,1.538,410,1.461,412,1.621,425,2.072,426,1.621,481,4.504,498,3.386,689,1.391,690,2.023,805,4.096,1050,2.99,1194,5.741,1283,2.413,1316,4.152,1322,4.746,1333,4.129,1334,4.129,1403,5.547,1407,5.252,1431,5.47,1432,4.434,1433,8.228,1434,7.79,1435,5.462,1436,5.462,1437,7.04,1438,5.462,1439,5.321,1440,6.679,1441,5.462,1442,5.462,1443,6.323,1444,5.007,1445,7.79,1446,6.437,1447,5.462,1448,6.241,1449,5.462]],["title/modules/CryptoModule.html",[100,1.266,113,2.401]],["body/modules/CryptoModule.html",[3,0.098,4,0.098,5,0.088,21,0.008,30,0.098,31,0.006,32,0.006,33,0.199,52,0.297,82,2.662,88,0.936,100,2.281,102,2.48,103,2.837,104,3.012,105,3.012,106,2.758,107,3.822,108,3.822,113,4.925,124,3.733,125,3.012,126,3.012,129,2.544,509,3.582,510,2.48,700,3.94,862,3.582,893,5.78,1450,5.385,1451,5.385,1452,5.385,1453,6.074,1454,6.184,1455,5.385,1456,6.074,1457,6.074,1458,4.836,1459,5.385,1460,6.074,1461,5.385]],["title/modules/DatabaseModule.html",[100,1.266,114,3.229]],["body/modules/DatabaseModule.html",[3,0.091,4,0.091,5,0.081,20,0.276,21,0.008,30,0.116,31,0.006,32,0.006,33,0.184,52,0.281,88,0.864,91,1.277,100,1.996,102,2.29,114,5.093,129,2.999,130,4.827,131,2.63,132,1.7,138,3.919,143,4.223,144,3.308,201,1.839,204,3.446,205,4.239,206,1.558,208,4.239,509,3.308,510,2.29,530,6.107,1394,4.239,1462,4.552,1463,7.16,1464,4.552,1465,6.347,1466,4.971,1467,4.971,1468,4.971,1469,7.366,1470,7.783,1471,6.489,1472,6.107,1473,4.971,1474,4.971,1475,4.971,1476,4.971,1477,4.971,1478,5.608,1479,7.16,1480,7.888,1481,5.608,1482,5.608,1483,7.16,1484,5.608,1485,5.608,1486,5.608,1487,5.608,1488,5.608,1489,4.971,1490,5.608,1491,5.812,1492,5.608,1493,5.608,1494,5.608]],["title/entities/DisplayEntity.html",[861,1.501,1495,3.229]],["body/entities/DisplayEntity.html",[3,0.106,4,0.106,5,0.094,13,0.264,14,1.134,19,0.744,20,0.325,21,0.008,30,0.106,31,0.006,32,0.006,33,0.213,42,2.557,43,1.616,45,0.533,47,1.114,52,0.213,75,2.592,201,2.017,248,2.557,861,2.596,863,3.131,873,3.839,877,4.458,882,3.442,883,2.727,1029,4.181,1495,5.586,1496,5.284,1497,6.509,1498,6.847,1499,6.509,1500,5.77,1501,5.77,1502,3.331,1503,4.63,1504,4.92]],["title/classes/EC_Public.html",[33,0.149,1505,2.916]],["body/classes/EC_Public.html",[3,0.084,4,0.084,5,0.075,9,0.673,13,0.211,14,0.985,19,0.703,20,0.323,21,0.008,22,3.444,23,2.193,25,4.026,30,0.111,31,0.006,32,0.006,33,0.265,35,1.338,45,0.548,52,0.171,62,2.359,199,3.556,268,2.935,322,2.859,343,4.491,344,2.074,350,2.956,365,1.613,481,3.736,493,4.349,551,2.851,561,2.956,595,4.617,662,5.159,726,3.809,840,4.384,1134,5.133,1238,5.388,1241,4.679,1431,4.384,1505,4.384,1506,5.655,1507,7.163,1508,6.107,1509,6.998,1510,6.749,1511,5.415,1512,5.755,1513,6.34,1514,6.34,1515,5.208,1516,6.051,1517,5.54,1518,6.051,1519,5.208,1520,6.107,1521,5.208,1522,2.582,1523,3.511]],["title/injectables/EncryptionService.html",[689,0.897,893,2.79]],["body/injectables/EncryptionService.html",[3,0.069,4,0.069,5,0.061,9,0.958,13,0.171,16,1.968,17,0.852,19,0.738,20,0.301,21,0.008,22,3.069,23,1.968,30,0.069,31,0.005,32,0.005,33,0.139,45,0.503,47,1.269,52,0.272,84,1.244,87,1.606,88,0.652,91,1.221,131,1.339,199,2.769,201,1.087,206,1.352,248,2.676,250,2.165,275,1.706,293,2.304,343,3.497,365,2.704,374,2.367,385,3.135,410,1.984,411,1.256,412,2.318,445,2.6,457,2.12,462,2.004,493,3.677,494,3.159,510,1.728,631,2.316,656,4.812,689,1.171,690,1.567,726,3.107,887,2.316,891,3.567,892,2.718,893,4.557,907,3.643,1116,2.035,1127,4.209,1133,3.643,1281,4.217,1360,3.808,1373,3.435,1413,3.435,1429,3.997,1439,4.481,1458,3.808,1459,3.751,1511,3.01,1522,2.098,1524,3.751,1525,3.997,1526,8.73,1527,5.929,1528,5.929,1529,5.929,1530,4.481,1531,4.231,1532,4.231,1533,4.812,1534,5.929,1535,4.231,1536,4.231,1537,5.929,1538,7.416,1539,6.745,1540,5.929,1541,5.929,1542,4.231,1543,4.481,1544,4.231,1545,4.231,1546,3.751,1547,3.435,1548,4.231,1549,4.481,1550,3.01,1551,4.231,1552,4.231,1553,5.256,1554,3.751,1555,3.751,1556,3.751,1557,4.231,1558,4.231,1559,5.555,1560,5.929,1561,5.256,1562,4.231,1563,3.751,1564,4.231,1565,4.231,1566,4.231,1567,4.231,1568,4.231]],["title/interfaces/FileStorage.html",[0,1.437,1569,2.916]],["body/interfaces/FileStorage.html",[0,1.638,2,2.567,3,0.084,4,0.084,5,0.075,13,0.21,17,1.021,19,0.774,20,0.338,21,0.008,22,2.578,23,2.129,30,0.131,31,0.006,32,0.006,45,0.568,47,1.433,52,0.17,75,3.023,84,1.427,87,1.722,206,1.023,275,1.829,373,2.811,374,2.751,411,1.537,443,4.202,547,3.466,713,2.938,1028,3.721,1039,3.371,1116,3.27,1143,3.858,1569,4.367,1570,3.912,1571,6.026,1572,5.737,1573,6.161,1574,5.138,1575,5.176,1576,5.518,1577,5.176,1578,4.589,1579,6.729,1580,5.176,1581,3.912,1582,5.176,1583,4.202,1584,5.117,1585,6.093,1586,6.161,1587,5.733,1588,5.176,1589,3.912,1590,4.177,1591,4.202,1592,4.589,1593,5.518,1594,5.176,1595,3.489,1596,5.176,1597,5.176,1598,4.589,1599,3.912,1600,5.176,1601,5.176,1602,5.176,1603,3.682,1604,3.682,1605,4.589]],["title/classes/FileSystemKeyService.html",[33,0.149,1606,3.432]],["body/classes/FileSystemKeyService.html",[3,0.04,4,0.04,5,0.089,7,1.216,9,0.317,13,0.099,14,0.568,16,1.753,17,0.922,19,0.764,20,0.339,21,0.008,22,2.722,23,2.171,24,4.04,30,0.08,31,0.003,32,0.003,33,0.08,35,0.63,42,0.744,45,0.552,47,1.374,48,2.518,52,0.277,84,0.825,87,1.742,91,1.355,131,2.08,132,0.744,151,2.152,167,1.654,183,1.566,185,0.888,201,1.01,206,1.561,248,2.676,275,1.754,293,2.344,328,2.152,373,2.085,374,2.588,396,1.216,410,1.052,411,2.534,412,1.828,425,1.491,426,1.461,454,1.785,457,2.293,462,2.426,468,1.605,493,3.424,494,2.378,498,1.891,654,3.485,699,1.343,700,2.061,713,3.731,714,1.297,726,3.135,804,3.633,862,1.447,880,4.003,891,3.321,892,1.576,907,2.416,935,2.976,969,2.972,990,4.536,1050,1.343,1054,1.745,1115,1.891,1116,1.891,1127,1.392,1143,2.232,1194,4.153,1316,3.32,1339,1.745,1342,1.343,1360,2.526,1407,3.317,1418,2.651,1422,2.972,1423,1.991,1428,4.153,1429,5.23,1443,1.991,1458,1.576,1505,3.615,1506,1.654,1522,1.216,1533,3.994,1546,3.485,1547,3.994,1549,2.972,1550,1.745,1555,3.485,1561,4.362,1606,2.972,1607,6.121,1608,2.175,1609,2.651,1610,2.797,1611,5.23,1612,4.362,1613,3.932,1614,3.932,1615,6.362,1616,4.254,1617,3.485,1618,3.485,1619,4.568,1620,3.932,1621,3.485,1622,7.176,1623,3.932,1624,3.932,1625,4.568,1626,3.191,1627,2.175,1628,2.453,1629,3.932,1630,3.485,1631,3.932,1632,2.453,1633,2.651,1634,4.568,1635,3.932,1636,6.16,1637,2.453,1638,4.989,1639,2.453,1640,2.453,1641,2.453,1642,3.485,1643,3.615,1644,2.453,1645,3.932,1646,2.453,1647,3.485,1648,2.453,1649,3.485,1650,4.003,1651,5.628,1652,2.453,1653,2.175,1654,1.745,1655,5.628,1656,2.453,1657,1.991,1658,1.991,1659,1.854,1660,2.175,1661,1.991,1662,2.453,1663,2.453,1664,2.453,1665,2.453,1666,6.16,1667,1.991,1668,2.453,1669,3.932,1670,2.453,1671,2.453,1672,2.453,1673,2.453,1674,2.453,1675,2.453,1676,2.453,1677,2.453,1678,2.453,1679,2.453,1680,3.191,1681,2.453,1682,2.453,1683,2.453,1684,4.921,1685,2.453,1686,2.453,1687,2.453,1688,2.453,1689,2.453,1690,2.175,1691,2.453,1692,2.175,1693,2.175,1694,2.175,1695,4.921,1696,3.932,1697,3.932,1698,2.453,1699,2.453,1700,2.453,1701,2.453,1702,2.453,1703,2.453]],["title/injectables/FilesService.html",[689,0.897,1704,3.432]],["body/injectables/FilesService.html",[3,0.078,4,0.078,5,0.07,13,0.196,17,0.94,19,0.764,20,0.315,21,0.008,22,1.831,23,1.857,30,0.078,31,0.005,32,0.005,33,0.158,42,1.968,45,0.555,47,1.4,52,0.268,80,1.463,84,1.362,87,1.613,88,0.744,91,1.459,144,2.847,185,2.348,204,2.966,206,1.448,209,2.65,210,1.971,248,1.968,275,1.788,317,2.847,373,2.904,374,1.968,410,1.291,411,1.926,547,2.79,627,3.1,689,1.282,690,1.788,713,2.74,810,4.905,1039,2.393,1116,3.122,1194,3.254,1342,2.642,1569,5.036,1572,4.905,1574,4.905,1581,4.905,1584,4.942,1585,5.926,1589,3.648,1590,4.818,1591,3.918,1592,5.753,1595,3.254,1603,3.433,1604,3.433,1704,4.905,1705,4.279,1706,6.49,1707,7.331,1708,4.827,1709,4.827,1710,6.49,1711,4.827,1712,6.49,1713,7.84,1714,4.827,1715,4.827,1716,4.827,1717,7.84,1718,6.364,1719,4.827,1720,4.827,1721,4.827,1722,4.827,1723,6.49,1724,4.827,1725,4.827,1726,4.827,1727,4.827,1728,4.827,1729,4.827,1730,4.279,1731,4.827,1732,4.827,1733,4.827,1734,4.827,1735,4.827,1736,4.827,1737,4.827,1738,4.827,1739,4.827,1740,4.827,1741,3.433,1742,4.827,1743,4.827]],["title/interfaces/GenerateTokenOptions.html",[0,1.437,1744,3.432]],["body/interfaces/GenerateTokenOptions.html",[0,1.427,2,2.236,3,0.073,4,0.073,5,0.065,13,0.183,14,0.895,17,0.948,19,0.729,20,0.273,21,0.008,28,2.468,30,0.1,31,0.005,32,0.005,33,0.148,52,0.262,88,0.695,91,1.425,131,2.24,132,1.367,183,2.819,185,1.632,187,3.66,206,1.726,211,1.939,213,2.559,224,3.208,277,2.107,293,1.764,322,1.889,345,3.207,357,2.236,364,2.771,374,1.879,377,5.138,385,3.744,404,2.897,406,3.843,407,3.409,425,2.685,426,2.45,427,3.04,428,6.187,429,5.761,435,4.177,445,4.35,447,3.277,454,3.628,457,1.919,459,6.039,461,5.138,462,1.524,468,2.89,489,4.177,522,4.407,579,4.177,689,1.224,754,2.897,792,3.461,805,2.169,808,4.896,1068,2.66,1216,3.409,1283,1.992,1412,3.208,1522,2.236,1616,4.684,1633,3.04,1744,5.351,1745,3.66,1746,3.998,1747,3.66,1748,3.998,1749,3.998,1750,3.998,1751,3.998,1752,3.998,1753,3.66,1754,3.998,1755,5.493,1756,5.493,1757,5.493,1758,5.493,1759,3.998,1760,3.998,1761,6.276,1762,5.493,1763,3.998,1764,5.03,1765,3.998,1766,3.998,1767,3.998,1768,3.66,1769,3.998,1770,3.998,1771,3.998,1772,3.998,1773,3.998,1774,3.66,1775,3.998,1776,3.998,1777,3.409,1778,3.998,1779,3.998,1780,3.66,1781,3.998,1782,3.998,1783,3.998,1784,3.998]],["title/controllers/HealthController.html",[80,1.377,1785,3.432]],["body/controllers/HealthController.html",[3,0.1,4,0.1,5,0.089,9,0.796,13,0.25,21,0.008,30,0.1,31,0.006,32,0.006,33,0.202,43,1.268,45,0.418,52,0.249,80,1.869,82,2.179,84,1.594,87,1.563,88,0.949,91,1.099,211,3.957,330,4.88,351,3.654,410,1.649,411,2.255,462,2.568,599,3.056,602,5.742,1491,6.166,1609,5.121,1785,6.498,1786,5.463,1787,8.991,1788,7.597,1789,8.597,1790,7.597,1791,6.734,1792,7.597,1793,6.163,1794,6.163,1795,7.597,1796,7.597,1797,5.003,1798,6.163,1799,6.163,1800,6.163,1801,6.163]],["title/modules/HealthModule.html",[100,1.266,115,3.229]],["body/modules/HealthModule.html",[3,0.113,4,0.113,5,0.101,21,0.008,30,0.113,31,0.007,32,0.007,33,0.229,52,0.285,82,2.899,88,1.078,100,2.286,102,2.857,115,5.832,129,2.931,1785,6.574,1797,5.679,1802,6.997,1803,8.199,1804,6.997]],["title/entities/IssuanceConfig.html",[861,1.501,1215,2.79]],["body/entities/IssuanceConfig.html",[3,0.068,4,0.068,5,0.06,9,0.539,12,1.539,13,0.169,14,0.848,16,1.84,17,0.926,19,0.602,20,0.331,21,0.008,26,2.911,27,2.281,30,0.068,31,0.005,32,0.005,33,0.192,37,2.042,39,3.465,42,1.78,43,1.703,45,0.561,49,3.333,52,0.264,55,2.46,57,1.293,65,2.281,70,2.796,71,2.283,74,2.774,76,2.911,79,2.594,90,1.546,185,2.915,201,1.508,243,3.17,248,2.06,278,3.005,281,3.214,289,1.95,290,1.858,292,2.284,303,2.594,305,2.666,306,4.348,307,3.655,308,3.465,309,4.176,312,3.005,313,2.458,320,4.176,321,3.772,322,2.46,323,3.166,324,3.608,325,3.105,335,4.41,356,3.608,365,1.819,494,2.125,547,2.525,861,2.437,863,2.008,865,4.438,867,3.855,868,4.348,869,2.969,870,4.176,875,3.772,882,3.105,883,1.748,987,3.608,1014,3.958,1015,3.214,1021,5.514,1029,2.681,1041,4.735,1046,5.205,1083,5.205,1087,3.155,1093,3.388,1104,3.214,1105,5.135,1106,4.438,1107,4.438,1108,4.438,1109,4.035,1110,4.832,1129,4.176,1138,4.176,1215,3.608,1503,2.969,1504,4.438,1805,7.491,1806,3.388,1807,4.174,1808,4.174,1809,4.174,1810,4.174,1811,4.174,1812,5.872,1813,3.7,1814,5.872,1815,5.205,1816,4.174,1817,3.7,1818,4.174,1819,3.7,1820,4.174,1821,5.205,1822,4.174,1823,3.7,1824,4.174,1825,3.7]],["title/controllers/IssuanceController.html",[80,1.377,1826,3.432]],["body/controllers/IssuanceController.html",[3,0.083,4,0.083,5,0.074,13,0.208,16,1.905,17,0.87,19,0.618,20,0.292,21,0.008,30,0.083,31,0.006,32,0.006,33,0.169,37,1.944,43,1.557,45,0.513,47,1.295,52,0.281,71,2.491,80,1.56,82,1.819,84,1.421,87,1.825,88,0.792,90,1.905,91,1.35,243,3.816,275,1.654,319,3.074,323,3.033,345,2.87,373,2.508,389,4.142,394,3.161,406,4.359,412,2.246,468,2.1,494,2.91,504,2.816,599,2.551,630,2.92,647,2.048,702,4.142,1071,3.034,1099,5.421,1116,2.475,1126,4.161,1141,4.816,1263,6.143,1266,4.561,1267,4.816,1273,3.468,1274,3.468,1275,3.304,1277,4.176,1278,3.468,1279,3.468,1280,4.176,1283,2.272,1287,3.889,1826,5.118,1827,4.561,1828,6.771,1829,6.771,1830,6.709,1831,5.145,1832,5.145,1833,5.145,1834,5.145,1835,5.145,1836,4.561,1837,5.145,1838,5.145,1839,5.145,1840,5.145,1841,3.659,1842,5.145]],["title/classes/IssuanceDto.html",[33,0.149,1099,3.061]],["body/classes/IssuanceDto.html",[3,0.078,4,0.078,5,0.07,9,0.623,13,0.196,14,0.937,16,1.857,17,0.968,19,0.598,20,0.342,21,0.008,26,3.635,27,2.848,30,0.105,31,0.006,32,0.005,33,0.257,35,1.24,37,2.184,39,3.517,42,1.968,43,1.683,44,2.973,45,0.555,52,0.257,53,2.322,55,3.071,56,3.238,57,1.495,65,2.521,70,2.461,74,3.201,76,3.218,185,2.348,201,1.24,239,2.718,275,1.418,287,5.285,289,2.255,290,2.054,292,2.642,296,4.624,313,2.481,319,3.329,323,3.134,324,3.988,333,2.847,335,4.013,356,3.988,365,2.01,547,2.79,552,3.877,591,4.279,596,4.375,1081,4.905,1094,5.926,1095,3.918,1096,3.918,1098,4.905,1099,4.375,1100,4.905,1101,4.905,1102,6.499,1103,4.905,1104,3.552,1105,5.541,1106,4.905,1107,4.905,1108,4.905,1109,3.552,1110,5.214,1843,4.279,1844,4.827,1845,4.827,1846,4.827,1847,4.827,1848,4.827,1849,4.827,1850,4.827,1851,4.827]],["title/injectables/IssuanceService.html",[689,0.897,702,2.485]],["body/injectables/IssuanceService.html",[3,0.042,4,0.042,5,0.091,9,0.333,13,0.104,16,1.731,17,0.726,19,0.712,20,0.259,21,0.008,22,1.929,30,0.042,31,0.003,32,0.003,33,0.167,37,1.4,39,1.109,42,2.038,45,0.478,47,1.081,52,0.292,53,1.241,57,0.799,70,1.552,71,2.388,79,2.247,84,1.215,87,1.693,88,0.397,91,1.199,131,2.229,132,0.782,140,1.521,141,1.585,143,2.414,144,2.414,174,4.773,183,2.306,201,1.307,204,1.585,206,1.732,209,1.053,211,1.109,219,1.949,224,1.834,239,2.815,248,2.524,268,1.109,271,2.603,275,1.38,278,2.094,281,2.784,290,1.295,292,1.412,293,2.142,296,1.521,299,1.657,313,2.312,319,3.635,323,2.943,332,1.739,335,4.22,344,1.027,353,3.322,368,2.911,374,1.241,410,1.549,411,2.234,412,2.234,425,1.929,426,1.51,447,1.364,454,2.31,457,2.331,462,1.383,494,2.549,510,1.053,557,2.093,689,0.808,690,0.955,700,2.95,702,3.169,714,1.364,730,1.279,857,1.949,883,1.08,887,1.412,891,3.388,949,2.414,987,1.585,988,1.834,989,4.119,990,2.094,1018,3.415,1021,2.093,1028,1.412,1041,1.657,1068,1.521,1087,1.949,1099,4.748,1111,3.719,1113,1.834,1115,1.968,1116,1.968,1118,3.584,1120,2.603,1121,3.904,1126,2.515,1127,2.322,1138,2.911,1142,3.618,1143,2.887,1145,2.093,1146,2.093,1147,1.949,1148,1.949,1151,2.093,1152,2.093,1153,3.322,1155,4.129,1156,2.093,1157,2.093,1158,3.322,1159,2.093,1160,2.093,1161,2.093,1162,2.093,1163,4.129,1164,3.415,1165,2.093,1166,2.093,1167,1.739,1168,2.093,1169,5.455,1170,3.322,1171,2.093,1172,1.834,1173,2.093,1174,2.093,1175,2.093,1176,3.322,1179,3.322,1180,3.322,1181,2.093,1183,3.322,1184,2.093,1185,2.093,1189,1.834,1190,2.093,1191,1.834,1192,4.129,1195,1.585,1197,2.093,1198,2.093,1199,4.129,1200,4.129,1201,2.093,1203,1.834,1204,2.093,1206,3.628,1215,3.558,1227,2.093,1228,1.657,1263,3.322,1276,2.093,1342,2.24,1411,2.093,1444,4.119,1634,4.129,1693,2.286,1823,2.286,1830,3.628,1836,2.286,1852,2.286,1853,4.092,1854,5.087,1855,5.08,1856,2.579,1857,5.087,1858,5.791,1859,2.579,1860,5.087,1861,4.092,1862,2.579,1863,4.092,1864,2.579,1865,2.579,1866,2.579,1867,2.579,1868,2.579,1869,4.092,1870,2.579,1871,4.092,1872,2.286,1873,2.579,1874,2.579,1875,2.579,1876,2.579,1877,2.579,1878,2.579,1879,2.286,1880,2.579,1881,2.579,1882,2.579,1883,2.579,1884,2.579,1885,2.579,1886,5.087,1887,2.579,1888,4.092,1889,2.579,1890,2.579,1891,2.579,1892,4.092,1893,2.579,1894,2.579,1895,2.579,1896,4.092,1897,2.579,1898,2.579,1899,2.579,1900,2.579,1901,2.579,1902,2.579,1903,2.579,1904,2.579,1905,2.579,1906,2.579,1907,2.579,1908,2.579,1909,5.087,1910,5.791,1911,2.579,1912,2.579,1913,2.579,1914,2.579,1915,2.579,1916,2.579,1917,2.579]],["title/controllers/IssuerManagementController.html",[80,1.377,1918,3.432]],["body/controllers/IssuerManagementController.html",[3,0.069,4,0.069,5,0.062,9,0.553,13,0.174,17,0.492,19,0.35,20,0.333,21,0.008,25,2.266,30,0.069,31,0.005,32,0.005,33,0.14,42,2.261,43,0.881,45,0.291,47,0.733,50,2.125,52,0.283,76,2.125,79,1.893,80,1.299,82,1.515,84,1.255,87,0.881,88,0.66,90,1.587,96,2.753,199,3.219,206,1.182,210,1.75,213,2.432,243,3.373,246,4.645,250,4.014,275,0.936,278,2.193,293,1.961,301,2.346,307,3.417,308,1.843,313,1.893,322,1.795,344,1.706,345,2.269,362,4.855,365,2.677,373,3.151,389,2.346,391,4.521,393,4.855,394,2.633,406,3.587,412,1.776,415,5.304,418,2.505,457,1.853,462,2.022,468,1.75,490,2.753,496,3.239,504,2.346,599,2.125,610,1.977,630,2.432,631,2.346,642,2.794,647,1.706,655,3.478,675,4.79,763,2.193,824,3.239,836,3.528,837,4.398,852,3.048,895,3.911,896,3.048,935,3.163,1020,3.048,1025,3.676,1071,4.064,1273,2.889,1274,2.889,1275,2.753,1277,3.478,1278,2.889,1279,2.889,1280,3.478,1283,1.893,1502,3.061,1584,2.889,1633,2.889,1841,3.048,1918,4.521,1919,5.302,1920,4.855,1921,3.799,1922,6.108,1923,3.799,1924,5.622,1925,3.799,1926,5.302,1927,4.234,1928,3.799,1929,4.285,1930,4.285,1931,4.285,1932,3.478,1933,4.426,1934,2.889,1935,3.478,1936,4.285,1937,3.799,1938,3.799,1939,5.302,1940,3.239,1941,6.611,1942,3.799,1943,3.799,1944,5.593,1945,6.611,1946,5.579,1947,3.799,1948,4.285,1949,4.285,1950,4.285,1951,4.285,1952,4.285,1953,4.285,1954,4.285,1955,4.521,1956,4.285,1957,4.285,1958,4.285,1959,3.799,1960,4.285,1961,3.799,1962,4.285,1963,3.799,1964,3.799,1965,3.799,1966,3.799,1967,3.799,1968,3.799,1969,3.799]],["title/interfaces/IssuerMetadata.html",[0,1.437,1970,3.061]],["body/interfaces/IssuerMetadata.html",[0,2.617,2,3.084,3,0.101,4,0.101,5,0.09,9,0.803,13,0.252,14,1.103,19,0.675,20,0.332,21,0.008,22,2.898,23,1.81,27,2.968,30,0.101,31,0.006,32,0.006,52,0.204,75,3.042,199,3.569,343,4.506,344,3.042,350,5.181,468,3.816,493,4.276,559,5.15,561,4.336,564,5.434,726,3.469,851,5.434,1039,3.788,1240,5.049,1252,3.53,1522,3.084,1970,5.15,1971,5.514]],["title/modules/IssuerModule.html",[100,1.266,116,3.061]],["body/modules/IssuerModule.html",[3,0.068,4,0.068,5,0.061,21,0.008,30,0.096,31,0.005,32,0.005,33,0.138,52,0.309,82,2.093,88,0.65,100,1.906,102,1.723,103,1.972,104,2.093,105,2.093,106,1.916,107,3.192,108,3.192,113,4.276,116,6.387,120,4.969,124,2.934,125,2.093,126,2.093,129,2.479,131,2.163,132,1.28,138,3.239,148,2.594,157,3.19,163,3.19,206,1.169,290,1.336,323,1.492,418,1.768,468,1.723,503,5.194,509,2.489,510,1.723,515,2.31,516,3.426,597,5.166,639,5.052,699,2.31,702,4.426,734,2.845,895,5.052,1018,3.491,1041,3.802,1078,2.594,1086,3.742,1087,3.19,1111,5.194,1113,3.002,1215,3.637,1227,3.426,1228,2.711,1260,5.166,1276,3.426,1282,4.969,1289,5.166,1291,3.426,1301,3.426,1340,3.742,1495,4.209,1826,5.166,1872,3.742,1918,5.166,1920,3.426,1972,3.742,1973,3.742,1974,3.742,1975,3.742,1976,5.194,1977,4.969,1978,4.769,1979,4.969,1980,3.426,1981,5.166,1982,3.99,1983,2.31,1984,5.918,1985,3.99,1986,3.19,1987,3.002,1988,3.19,1989,4.221,1990,4.221,1991,3.742,1992,4.221,1993,4.221,1994,4.221,1995,4.221,1996,4.221,1997,4.221,1998,4.221,1999,3.426,2000,3.742,2001,4.221,2002,5.918,2003,3.742,2004,4.221,2005,4.221]],["title/classes/JwksResponseDto.html",[33,0.149,1523,3.061]],["body/classes/JwksResponseDto.html",[3,0.092,4,0.092,5,0.082,9,0.729,13,0.229,14,1.038,19,0.646,20,0.277,21,0.008,22,3.431,23,2.143,25,4.184,30,0.117,31,0.006,32,0.006,33,0.259,35,1.45,45,0.383,52,0.185,62,1.951,199,3.696,268,2.428,322,2.365,343,4.667,344,2.863,350,4.081,365,2.227,481,3.09,493,4.529,551,3.09,561,4.081,662,4.267,726,3.782,840,3.626,1134,5.929,1238,4.619,1241,4.862,1431,3.626,1505,3.626,1506,4.847,1507,6.374,1508,5.435,1509,6.958,1510,6.374,1511,4.016,1512,4.267,1513,5.435,1514,5.435,1516,5.005,1517,4.583,1518,5.005,1520,5.435,1522,2.799,1523,4.847,2006,5.005]],["title/injectables/JwtAuthGuard.html",[504,2.485,689,0.897]],["body/injectables/JwtAuthGuard.html",[3,0.101,4,0.101,5,0.09,13,0.252,17,0.879,20,0.295,21,0.008,30,0.101,31,0.006,32,0.006,33,0.204,45,0.519,47,1.309,52,0.283,84,1.605,87,1.282,88,0.96,91,1.364,201,1.601,206,1.231,275,1.671,410,1.667,504,4.186,508,4.71,689,1.511,690,2.308,1283,2.752,1610,5.44,1718,6.208,2007,5.524,2008,7.649,2009,6.78,2010,5.524,2011,7.992,2012,6.232,2013,6.78,2014,6.138,2015,6.232,2016,3.829,2017,5.058,2018,6.232,2019,6.208,2020,6.232,2021,6.232,2022,6.232,2023,5.524,2024,6.232,2025,6.232]],["title/injectables/JwtService.html",[404,2.916,689,0.897]],["body/injectables/JwtService.html",[0,1.294,3,0.066,4,0.066,5,0.059,13,0.166,17,0.839,19,0.698,20,0.282,21,0.008,28,3.167,30,0.094,31,0.005,32,0.005,33,0.134,42,1.239,45,0.523,47,1.25,52,0.252,84,1.214,87,1.502,88,0.63,91,1.375,131,2.533,132,1.239,183,2.674,185,2.093,187,3.318,206,1.689,211,2.488,213,3.284,224,4.777,275,1.596,277,1.909,293,2.278,322,1.712,345,3.357,357,2.869,364,3.556,374,2.214,377,5.196,385,3.862,404,3.716,406,4.043,407,3.09,410,1.094,425,2.547,426,2.376,427,2.755,428,6.256,429,5.826,435,3.9,445,4.127,447,3.06,454,3.634,457,1.792,459,4.373,461,2.755,462,1.956,468,2.742,489,4.528,522,4.115,579,4.528,689,1.143,690,1.514,699,2.237,754,3.716,792,3.634,805,1.966,808,2.625,1068,3.413,1216,4.373,1283,1.805,1412,2.907,1522,2.027,1616,4.373,1633,3.9,1744,5.52,1745,3.318,1746,3.623,1747,3.318,1748,3.623,1749,3.623,1750,3.623,1751,3.623,1752,3.623,1753,4.696,1754,5.954,1755,5.129,1756,5.129,1757,5.129,1758,5.129,1759,3.623,1760,3.623,1761,5.954,1762,5.129,1763,3.623,1764,4.696,1765,3.623,1766,3.623,1767,3.623,1768,3.318,1769,3.623,1770,3.623,1771,3.623,1772,3.623,1773,5.129,1774,3.318,1775,3.623,1776,3.623,1777,3.09,1778,5.129,1779,5.129,1780,4.696,1781,5.129,1782,3.623,1783,6.474,1784,3.623,2026,5.786,2027,5.786,2028,4.087,2029,4.087,2030,4.087,2031,4.087,2032,4.087,2033,4.087]],["title/injectables/JwtStrategy.html",[505,3.229,689,0.897]],["body/injectables/JwtStrategy.html",[3,0.066,4,0.066,5,0.059,9,0.529,13,0.166,17,0.886,20,0.297,21,0.008,23,1.372,30,0.066,31,0.005,32,0.005,33,0.134,45,0.523,47,1.32,52,0.27,71,2.263,84,1.215,87,1.586,88,0.63,91,1.428,93,3.72,131,2.862,132,1.241,137,5.397,183,3.07,201,1.726,204,2.515,206,1.661,208,3.093,209,1.671,211,2.49,224,5.197,235,2.323,266,2.629,271,3.739,275,1.685,277,1.912,293,1.913,344,2.306,350,3.287,352,2.705,355,3.322,364,2.515,367,3.628,374,1.756,384,5.958,385,2.164,397,5.058,398,3.322,406,3.515,407,3.093,410,1.549,411,2.496,412,1.215,425,1.552,426,1.215,454,3.883,455,3.72,457,1.268,468,3.269,498,1.968,505,4.119,508,3.093,527,3.322,535,3.322,689,1.144,690,1.516,699,2.24,713,2.323,792,3.737,940,4.531,1068,2.414,1191,2.911,1342,3.17,1412,4.78,1444,2.911,1610,4.119,1753,3.322,1764,3.322,1768,3.322,1780,3.322,1955,3.093,2034,3.628,2035,5.791,2036,5.791,2037,6.721,2038,4.092,2039,5.791,2040,4.092,2041,5.791,2042,4.092,2043,5.791,2044,6.721,2045,4.092,2046,4.092,2047,5.791,2048,4.092,2049,5.134,2050,4.092,2051,5.791,2052,3.628,2053,4.092,2054,4.092,2055,3.628,2056,7.307,2057,4.092,2058,4.092,2059,4.092,2060,4.092,2061,4.092,2062,4.092,2063,4.092,2064,4.092,2065,5.791,2066,6.721,2067,4.092,2068,4.092,2069,3.628,2070,4.092,2071,4.092,2072,3.628,2073,4.092,2074,5.791,2075,3.628,2076,5.134,2077,3.628,2078,4.092,2079,5.791,2080,4.092,2081,4.092,2082,4.092,2083,4.092,2084,4.092,2085,4.092,2086,4.092,2087,4.092,2088,4.092,2089,4.092,2090,4.092]],["title/classes/Key.html",[23,1.075,33,0.149]],["body/classes/Key.html",[3,0.083,4,0.083,5,0.074,7,2.531,9,0.87,13,0.207,14,0.973,15,3.631,16,1.209,17,0.587,19,0.763,20,0.349,21,0.008,23,2.16,24,3.137,25,3.562,30,0.083,31,0.006,32,0.006,33,0.263,35,1.311,42,1.548,43,1.795,44,3.533,45,0.592,47,0.874,52,0.247,53,2.456,55,2.822,56,3.33,57,1.581,62,1.765,268,2.897,411,2,493,3.975,552,2.7,726,3.64,805,3.627,1429,3.442,1431,3.279,1508,3.859,1509,6.06,1511,5.363,1512,5.699,1513,6.06,1514,6.06,1520,5.092,1522,2.531,1643,3.279,1667,6.12,2091,6.302,2092,4.144,2093,6.684,2094,5.105,2095,5.105,2096,5.105,2097,5.105,2098,5.972,2099,5.105,2100,5.105,2101,5.105,2102,3.442,2103,4.526]],["title/controllers/KeyController.html",[80,1.377,1454,3.432]],["body/controllers/KeyController.html",[3,0.077,4,0.077,5,0.069,9,0.615,13,0.193,16,2.032,17,0.837,19,0.595,20,0.281,21,0.008,22,1.807,23,2.094,30,0.077,31,0.005,32,0.005,33,0.156,43,1.498,45,0.494,47,1.247,52,0.286,80,1.445,82,1.685,84,1.35,87,1.675,88,0.734,90,1.765,91,1.299,204,2.928,206,1.439,248,1.951,275,1.592,293,2.073,345,3.42,373,3.177,374,2.365,389,3.987,406,4.299,410,1.275,411,1.415,412,2.491,426,1.91,457,1.476,462,2.636,493,3.867,494,2.328,504,2.608,599,2.363,630,2.705,647,1.897,700,3.051,862,2.811,1115,3.095,1116,3.504,1267,4.576,1273,3.212,1274,3.212,1275,3.061,1278,3.212,1279,3.212,1287,3.602,1342,3.521,1454,5.895,1455,4.224,1609,4.337,1611,4.91,1625,5.222,1643,5.009,1657,3.868,1658,3.868,1659,3.602,1661,3.868,2104,4.224,2105,7.284,2106,6.434,2107,6.434,2108,4.765,2109,4.765,2110,4.765,2111,4.765,2112,4.765,2113,4.765,2114,4.765,2115,4.765,2116,4.765,2117,6.434,2118,4.765,2119,4.765,2120,4.765,2121,4.765]],["title/entities/KeyEntity.html",[861,1.501,1458,2.916]],["body/entities/KeyEntity.html",[3,0.092,4,0.092,5,0.082,13,0.231,14,1.044,16,2.043,19,0.682,20,0.345,21,0.008,23,2.209,26,3.584,27,2.809,30,0.117,31,0.006,32,0.006,33,0.187,43,1.719,45,0.567,52,0.237,185,2.616,201,2.146,248,2.408,494,2.616,726,3.607,861,2.39,863,2.739,873,4.685,877,4.743,882,3.011,883,2.385,1029,3.657,1458,4.644,1503,5.65,1504,4.303,1522,2.823,1539,4.621,1559,7.155,2122,4.621,2123,5.693,2124,5.693,2125,7.229,2126,5.693,2127,6.448,2128,5.65,2129,5.693,2130,4.05]],["title/classes/KeyImportDto.html",[33,0.149,1643,2.916]],["body/classes/KeyImportDto.html",[3,0.086,4,0.086,5,0.077,7,3.437,9,1.119,13,0.216,14,1.001,15,5.477,16,1.263,17,0.995,19,0.75,20,0.334,21,0.008,23,2.21,24,4.259,25,4.312,30,0.086,31,0.006,32,0.006,33,0.267,35,1.37,42,1.617,43,1.584,44,3.428,45,0.522,47,0.913,52,0.252,53,2.565,55,2.903,56,3.401,57,1.652,62,1.843,268,2.293,411,2.286,493,4.043,552,3.665,726,3.702,805,2.565,1059,5.626,1429,5.191,1431,3.425,1508,4.03,1509,6.163,1511,3.793,1512,4.03,1513,5.239,1514,5.239,1520,5.239,1522,2.644,1643,4.452,1667,4.328,2091,5.799,2092,4.328,2093,4.727,2098,4.727,2102,3.595,2103,6.144,2131,5.332,2132,5.332,2133,5.332,2134,5.332]],["title/modules/KeyModule.html",[100,1.266,117,3.229]],["body/modules/KeyModule.html",[3,0.084,4,0.084,5,0.074,21,0.008,30,0.11,31,0.006,32,0.006,33,0.169,45,0.349,52,0.303,71,1.596,84,1.081,87,1.06,88,0.794,91,1.351,100,2.112,102,2.104,107,2.407,108,2.407,117,5.387,129,2.158,130,4.569,131,2.716,132,1.562,137,4.569,138,3.71,140,3.039,141,3.166,151,3.71,152,4.568,153,3.894,204,3.166,205,3.894,206,1.339,208,3.894,349,5.123,426,2.012,509,3.039,510,2.104,530,4.82,700,3.172,862,3.039,891,3.643,892,3.31,1121,3.473,1194,4.569,1316,4.467,1339,3.665,1399,4.82,1458,4.353,1461,4.568,1471,5.123,1472,4.82,1533,5.501,1606,5.123,1611,4.569,1619,6.148,1659,3.894,1660,4.568,1661,5.501,1982,4.569,1983,2.82,2135,4.182,2136,6.714,2137,5.152,2138,6.714,2139,5.946,2140,5.152,2141,5.152,2142,6.008,2143,5.152,2144,6.008,2145,4.568,2146,4.568,2147,7.133,2148,3.894,2149,4.568,2150,4.568,2151,4.568,2152,4.568,2153,4.568,2154,6.777,2155,5.152,2156,5.152]],["title/classes/KeyObj.html",[33,0.149,2157,3.432]],["body/classes/KeyObj.html",[3,0.099,4,0.099,5,0.089,7,4.254,9,0.792,13,0.248,14,1.093,15,5.843,16,1.946,19,0.7,20,0.317,21,0.008,22,3.254,23,2.177,24,4.653,25,4.537,26,4.254,27,3.334,30,0.099,31,0.006,32,0.006,33,0.201,35,1.574,45,0.557,52,0.201,167,4.132,396,3.039,726,3.438,861,2.503,1241,4.653,1428,5.538,1505,5.277,1506,4.132,2091,6.103,2157,5.723,2158,5.434,2159,6.129,2160,6.129,2161,6.129]],["title/classes/KeyResponseDto.html",[33,0.149,358,3.432]],["body/classes/KeyResponseDto.html",[3,0.114,4,0.114,5,0.101,13,0.284,14,1.185,20,0.27,21,0.008,30,0.114,31,0.007,32,0.007,33,0.23,35,1.801,45,0.475,52,0.23,167,4.727,358,6.205,396,3.477,493,4.316,551,3.838,1505,5.591,1506,4.727,2091,5.839,2162,5.691]],["title/classes/KeyService.html",[33,0.149,1611,3.061]],["body/classes/KeyService.html",[0,1.603,3,0.055,4,0.055,5,0.049,7,2.512,9,0.44,13,0.138,16,1.935,17,0.969,19,0.773,20,0.345,21,0.008,22,1.922,23,2.158,24,4.119,30,0.055,31,0.004,32,0.004,33,0.112,35,0.874,45,0.572,47,1.444,48,3.096,52,0.28,84,1.063,87,1.792,88,0.524,91,0.904,131,2.377,132,1.032,210,1.39,248,2.78,275,1.844,317,2.008,373,2.482,374,2.74,410,1.356,412,2.309,425,1.291,426,1.796,454,2.3,462,2.539,558,4.912,699,1.863,713,4.263,723,1.932,726,3.253,769,1.863,804,4.43,862,2.008,880,4.767,883,1.426,891,3.224,907,3.113,935,2.679,969,3.83,990,4.625,1050,1.863,1127,2.876,1187,2.573,1360,2.187,1409,4.113,1418,3.416,1422,3.83,1522,1.688,1611,3.416,1612,4.491,1615,7.241,1616,4.574,1617,6.352,1618,4.491,1619,4.912,1621,4.491,1626,4.113,1627,4.491,1638,5.364,1642,4.491,1643,4.305,1647,4.491,1649,3.018,1650,4.767,1653,4.491,1654,2.421,1657,4.113,1658,2.763,1659,2.573,1690,3.018,1774,2.763,2157,2.573,2163,3.018,2164,9.268,2165,3.404,2166,3.404,2167,3.404,2168,3.404,2169,3.404,2170,3.404,2171,3.404,2172,3.404,2173,5.067,2174,3.404,2175,4.491,2176,3.404,2177,3.254,2178,6.703,2179,3.404,2180,3.404,2181,3.404,2182,3.404]],["title/classes/LocalFileStorage.html",[33,0.149,2183,3.432]],["body/classes/LocalFileStorage.html",[3,0.08,4,0.08,5,0.071,13,0.199,17,0.946,19,0.757,20,0.317,21,0.008,23,2.129,30,0.08,31,0.005,32,0.005,33,0.161,35,1.263,45,0.558,47,1.409,52,0.259,84,1.379,87,1.625,91,1.409,143,2.901,144,2.901,201,1.688,206,1.626,268,2.826,275,1.799,293,2.107,373,3.049,374,1.993,410,1.316,426,1.46,457,1.523,713,2.792,1116,3.161,1143,3.73,1148,3.718,1283,2.173,1569,4.754,1572,4.968,1573,6.008,1574,4.968,1576,5.335,1581,4.968,1583,3.993,1584,4.989,1585,6.222,1586,6.008,1587,5.619,1589,4.968,1590,3.023,1595,3.316,1599,3.718,2077,4.36,2183,4.968,2184,4.36,2185,4.919,2186,4.919,2187,6.572,2188,4.919,2189,4.919,2190,4.919,2191,4.919,2192,4.919,2193,4.919,2194,4.919,2195,4.919,2196,4.919,2197,4.919,2198,4.919,2199,3.993,2200,6.572,2201,6.572,2202,4.919,2203,6.572,2204,4.919,2205,6.572,2206,4.36,2207,4.919,2208,4.919,2209,4.919,2210,4.919,2211,4.919,2212,4.36,2213,4.919,2214,4.919,2215,4.919,2216,4.919,2217,4.36,2218,5.826,2219,4.919,2220,4.919,2221,4.919]],["title/injectables/LoggerConfigService.html",[689,0.897,2222,3.432]],["body/injectables/LoggerConfigService.html",[0,1.349,3,0.097,4,0.069,5,0.062,9,0.551,13,0.173,14,0.861,17,0.685,19,0.561,20,0.265,21,0.008,28,4.837,30,0.097,31,0.005,32,0.005,33,0.14,37,1.961,45,0.605,47,1.02,52,0.195,62,2.06,71,2.128,84,1.251,87,1.799,88,0.657,91,1.515,131,2.567,132,1.293,139,4.838,181,4.838,182,4.838,183,2.373,184,4.838,193,3.461,194,3.033,195,3.461,196,3.461,198,5.624,199,3.21,206,0.842,207,4.838,209,2.806,211,2.563,212,3.515,219,5.194,275,1.302,410,1.141,411,2.562,462,2.015,647,1.698,689,1.177,690,1.579,699,2.334,927,4.223,1028,2.334,1114,3.223,1115,2.867,1120,3.05,1122,5.284,1283,1.883,1377,4.239,1741,4.239,2222,4.505,2223,7.294,2224,6.596,2225,6.596,2226,6.596,2227,6.596,2228,6.596,2229,6.596,2230,6.596,2231,5.96,2232,6.596,2233,6.596,2234,4.264,2235,5.918,2236,4.264,2237,4.264,2238,7.191,2239,4.264,2240,4.264,2241,4.264,2242,4.264,2243,5.284,2244,4.264,2245,4.264,2246,5.284,2247,5.284,2248,4.018,2249,4.264,2250,5.284,2251,5.284,2252,5.284,2253,5.284,2254,5.284,2255,5.284,2256,5.284,2257,3.78,2258,3.78,2259,5.292,2260,3.78,2261,5.284,2262,5.194,2263,3.78,2264,3.78,2265,3.78,2266,3.78,2267,3.78,2268,3.78,2269,3.78]],["title/interfaces/LoggerConfiguration.html",[0,1.437,2235,3.432]],["body/interfaces/LoggerConfiguration.html",[0,1.563,2,2.45,3,0.107,4,0.08,5,0.071,13,0.2,14,0.952,19,0.403,20,0.318,21,0.008,28,5.03,30,0.107,31,0.005,32,0.005,33,0.162,37,1.793,52,0.216,62,1.708,71,1.53,88,0.761,91,1.569,131,2.347,132,1.498,139,4.01,181,5.35,182,5.35,183,2.625,184,5.35,193,4.01,194,3.514,195,4.01,196,4.01,198,6.232,199,3.697,206,0.976,207,6.692,209,3.029,211,2.124,212,2.914,219,6.232,411,2.202,462,1.67,647,1.967,689,1.302,927,3.741,1028,2.704,1114,3.734,1115,2.376,1120,2.528,1283,2.182,1377,3.514,1741,3.514,2222,3.734,2223,4.01,2224,4.38,2225,4.38,2226,4.38,2227,4.38,2228,4.38,2229,4.38,2230,4.38,2232,4.38,2233,4.38,2235,5.982,2238,7.518,2243,4.38,2246,4.38,2247,4.38,2248,3.33,2250,4.38,2251,4.38,2252,7.309,2253,7.309,2254,7.309,2255,5.843,2256,5.843,2257,4.38,2258,4.38,2259,5.629,2260,4.38,2261,5.843,2262,5.607,2263,4.38,2264,4.38,2265,4.38,2266,4.38,2267,4.38,2268,4.38,2269,4.38]],["title/modules/MetricModule.html",[100,1.266,118,3.229]],["body/modules/MetricModule.html",[3,0.112,4,0.112,5,0.1,21,0.008,30,0.112,31,0.007,32,0.007,33,0.226,52,0.267,88,1.065,100,2.269,102,2.822,118,5.789,129,2.895,209,2.822,210,2.822,351,3.324,512,4.439,513,4.659,582,4.915,908,5.223,1342,3.782,1377,4.915,2270,6.911,2271,6.911,2272,6.911,2273,6.911,2274,6.911]],["title/classes/NotificationRequestDto.html",[33,0.149,2275,3.229]],["body/classes/NotificationRequestDto.html",[3,0.108,4,0.108,5,0.096,13,0.27,14,1.15,19,0.65,20,0.307,21,0.008,30,0.108,31,0.007,32,0.007,33,0.261,35,1.712,43,1.639,44,3.232,45,0.54,52,0.261,57,2.064,667,3.93,683,5.908,687,5.908,949,5.025,1078,4.095,2102,4.492,2275,5.666,2276,7.553,2277,8.521,2278,6.916,2279,7.966,2280,7.966]],["title/controllers/OAuthController.html",[80,1.377,2281,3.432]],["body/controllers/OAuthController.html",[3,0.09,4,0.09,5,0.081,9,0.922,11,4.244,13,0.226,17,0.641,20,0.275,21,0.008,30,0.09,31,0.006,32,0.006,33,0.183,43,1.148,45,0.378,47,0.955,52,0.281,80,1.692,82,1.973,84,1.498,87,1.148,88,0.86,90,2.067,91,0.995,275,1.219,290,2.775,293,2.24,308,3.069,345,3.325,351,4.218,352,4.096,355,5.793,373,2.643,374,2.164,385,4.386,389,3.054,392,5.793,394,3.429,396,2.767,403,5.793,415,3.969,432,4.811,457,1.728,548,5.076,599,2.767,642,2.607,647,2.222,661,4.947,1283,2.465,2281,5.395,2282,4.947,2283,6.479,2284,7.869,2285,5.58,2286,5.899,2287,4.947,2288,6.958,2289,8.294,2290,5.58,2291,5.58,2292,7.137,2293,7.869,2294,3.969,2295,5.305,2296,4.947,2297,5.58,2298,5.58,2299,5.58]],["title/modules/OAuthModule.html",[100,1.266,2300,3.432]],["body/modules/OAuthModule.html",[3,0.1,4,0.1,5,0.089,21,0.008,30,0.123,31,0.006,32,0.006,33,0.202,52,0.289,82,2.689,88,0.951,100,2.298,102,2.521,103,2.884,104,3.061,105,3.061,106,2.803,107,3.85,108,3.85,113,4.757,124,3.771,125,3.061,126,3.061,129,3.186,138,4.163,148,3.794,206,1.22,526,6.173,2281,6.23,2295,6.354,2296,5.474,2300,7.013,2301,5.474,2302,6.174,2303,5.474,2304,5.474,2305,5.012,2306,6.174,2307,5.012,2308,5.474,2309,5.012]],["title/injectables/OAuthService.html",[689,0.897,2295,3.061]],["body/injectables/OAuthService.html",[3,0.062,4,0.062,5,0.055,11,1.963,12,1.449,13,0.155,14,0.798,17,0.928,19,0.758,20,0.311,21,0.008,23,0.908,28,3.884,30,0.062,31,0.005,32,0.005,33,0.126,37,0.927,42,1.163,45,0.571,47,1.382,52,0.246,59,2.464,84,1.361,87,1.661,88,0.591,91,1.266,131,2.48,132,1.163,185,2.346,206,1.548,248,1.676,271,1.963,275,1.765,290,1.75,293,2.23,322,2.316,345,1.455,352,3.028,374,2.151,379,3.727,390,3.4,396,1.902,403,4.488,410,1.479,411,2.64,417,3.933,419,2.728,421,2.899,422,2.586,425,1.455,426,1.924,427,2.586,433,5.08,434,5.879,453,3.4,454,2.51,455,2.464,457,1.712,467,3.398,484,2.728,485,2.899,486,2.728,487,2.586,490,3.551,494,1.388,498,2.659,548,5.35,642,1.792,647,2.995,676,5.922,689,1.092,690,1.421,699,2.099,700,3.383,713,2.177,730,1.902,805,1.845,852,2.728,865,2.899,907,2.357,927,4.269,1109,3.026,1118,2.177,1342,2.099,1383,3.551,1443,4.488,1491,3.113,1633,2.586,1730,3.4,2248,2.586,2259,2.728,2283,2.899,2286,5.047,2294,2.728,2295,3.727,2309,3.113,2310,3.4,2311,5.529,2312,6.483,2313,6.483,2314,5.529,2315,7.095,2316,5.529,2317,6.483,2318,5.529,2319,5.529,2320,3.836,2321,3.836,2322,3.836,2323,3.836,2324,3.836,2325,5.529,2326,3.836,2327,3.836,2328,5.529,2329,3.836,2330,3.836,2331,3.836,2332,4.901,2333,5.529,2334,3.836,2335,3.836,2336,3.4,2337,3.836,2338,2.899,2339,5.529,2340,3.836,2341,6.483,2342,3.836,2343,3.836,2344,5.529,2345,3.836,2346,4.901,2347,3.836,2348,5.529,2349,4.488,2350,3.933,2351,5.529,2352,3.836,2353,4.488,2354,3.4,2355,2.899,2356,3.836,2357,3.836,2358,3.836,2359,3.836,2360,3.836]],["title/classes/Oauth2AuthorizationServerResponse.html",[33,0.149,2361,3.229]],["body/classes/Oauth2AuthorizationServerResponse.html",[3,0.077,4,0.077,5,0.069,9,0.613,12,1.682,13,0.192,14,0.926,19,0.757,20,0.341,21,0.008,23,1.52,28,3.511,29,5.687,30,0.077,31,0.005,32,0.005,33,0.155,35,1.219,45,0.599,58,3.974,68,5.248,75,3.556,199,2.997,343,3.784,344,2.554,345,2.433,350,3.641,351,4.295,357,4.53,364,5.266,365,1.47,468,2.967,469,5.169,471,5.169,498,3.086,551,2.597,604,4.121,613,5.537,620,6.319,750,5.494,753,5.494,755,5.494,756,5.494,758,5.494,760,5.494,786,4.849,1238,5.736,1241,2.916,1252,4.419,1412,5.537,2006,4.206,2128,4.563,2361,4.563,2362,7.916,2363,4.745,2364,4.745,2365,8.382,2366,4.745,2367,4.745,2368,3.852,2369,4.745,2370,4.745,2371,6.415,2372,6.415,2373,4.206]],["title/classes/OfferRequestDto.html",[33,0.149,1924,2.916]],["body/classes/OfferRequestDto.html",[3,0.083,4,0.083,5,0.074,9,0.87,12,1.338,13,0.207,14,0.973,16,1.899,17,0.984,19,0.732,20,0.342,21,0.008,23,1.209,30,0.109,31,0.006,32,0.006,33,0.247,35,1.311,37,1.628,43,1.714,44,2.859,45,0.592,50,4.132,52,0.247,55,2.822,56,3.541,57,1.581,71,2.087,90,1.891,185,2.901,313,2.537,323,2.835,325,3.562,365,2.087,559,3.442,610,2.83,642,2.385,667,3.011,675,4.843,688,4.526,763,4.103,836,3.973,837,4.447,1004,4.327,1005,4.792,1020,5.928,1028,2.794,1054,4.792,1066,4.144,1098,5.092,1100,5.092,1502,2.613,1924,4.327,1927,3.137,1933,4.843,1934,5.083,1935,4.144,1946,3.631,1955,5.092,2102,3.442,2374,6.948,2375,6.12,2376,5.105,2377,5.105,2378,5.105,2379,5.972,2380,5.105,2381,5.105,2382,5.092,2383,5.105,2384,5.105,2385,5.105,2386,4.144]],["title/classes/OfferResponse.html",[33,0.149,1927,2.79]],["body/classes/OfferResponse.html",[3,0.094,4,0.094,5,0.084,9,0.747,12,1.516,13,0.234,14,1.054,16,1.729,19,0.742,20,0.308,21,0.008,23,1.369,30,0.118,31,0.006,32,0.006,33,0.262,35,1.485,37,1.397,44,2.769,45,0.542,50,3.967,52,0.262,55,3.058,56,3.712,57,1.791,71,1.791,90,2.141,185,2.641,313,2.31,323,2.581,325,3.057,365,1.791,610,2.865,642,2.701,667,3.41,675,3.714,763,3.735,836,3.41,837,3.41,1004,4.689,1005,5.192,1020,5.192,1028,3.164,1054,4.112,1098,5.518,1100,4.37,1502,4.094,1924,3.714,1927,4.486,1933,4.689,1934,4.921,1935,4.693,1946,4.112,1955,4.37,2102,3.898,2374,6.494,2375,4.693,2379,5.125,2382,4.37,2386,4.693,2387,5.782,2388,5.782]],["title/controllers/Oid4vciController.html",[80,1.377,1981,3.432]],["body/controllers/Oid4vciController.html",[3,0.074,4,0.074,5,0.066,9,0.59,12,2.225,13,0.185,17,0.819,20,0.309,21,0.008,30,0.074,31,0.005,32,0.005,33,0.15,43,1.466,45,0.483,47,1.312,52,0.293,70,1.734,77,4.806,80,2.162,82,1.616,84,1.313,87,1.651,88,0.704,89,2.809,90,1.693,91,1.367,201,1.606,206,0.903,210,2.554,235,4.974,275,1.558,290,1.979,305,3.923,313,2.541,323,2.211,351,3.861,373,3.07,374,1.896,379,4.216,389,2.502,408,2.936,412,1.857,599,2.266,604,4.017,610,3.127,627,2.936,630,2.594,631,2.502,632,2.339,633,4.806,634,3.455,635,2.936,636,3.455,642,2.135,645,3.455,647,1.82,814,2.696,816,3.455,895,4.046,896,3.251,1015,2.502,1078,2.809,1104,3.423,1118,2.594,1283,2.019,1300,4.017,1525,4.216,1977,2.809,1981,4.727,1985,3.081,1986,3.455,2275,5.452,2389,4.052,2390,4.571,2391,4.727,2392,4.571,2393,4.571,2394,4.571,2395,6.254,2396,4.571,2397,4.571,2398,4.571,2399,4.571,2400,4.571,2401,4.571,2402,4.052,2403,5.077,2404,4.052,2405,2.936,2406,4.571,2407,3.71,2408,4.052,2409,4.571,2410,4.052,2411,4.571,2412,4.052,2413,4.571,2414,4.571,2415,4.571,2416,4.571,2417,4.571,2418,4.571,2419,4.571,2420,4.571,2421,4.571,2422,4.571,2423,4.571,2424,3.455,2425,4.571]],["title/injectables/Oid4vciService.html",[689,0.897,895,2.577]],["body/injectables/Oid4vciService.html",[3,0.032,4,0.032,5,0.028,12,1.895,13,0.199,14,0.472,16,1.398,17,0.72,19,0.636,20,0.296,21,0.008,22,1.595,30,0.032,31,0.003,32,0.003,33,0.064,37,0.79,42,0.991,45,0.49,47,1.124,52,0.282,58,1.762,65,0.76,71,0.606,75,2.175,76,0.97,77,2.836,84,0.686,87,1.351,88,0.301,91,1.053,131,1.983,132,0.593,143,1.154,183,2.615,201,0.502,206,1.735,210,1.717,211,1.809,212,1.927,235,3.101,236,2.481,239,1.368,240,2.324,242,2.689,243,1.809,248,2.192,268,0.841,275,1.369,277,1.965,278,1.001,290,1.331,293,2.248,305,1.91,311,2.585,313,1.034,323,0.692,325,1.034,333,1.154,351,1.571,357,2.436,365,1.012,368,1.391,373,2.32,374,1.79,375,1.734,406,2.84,410,0.874,411,2.196,412,1.249,425,2.67,426,2.196,435,2.836,447,2.224,457,2.549,467,3.019,468,2.006,485,1.479,494,0.708,510,0.799,553,2.098,568,1.257,610,2.932,616,1.319,631,1.071,632,1.001,637,3.106,638,1.257,639,2.788,642,1.526,647,2.945,672,3.312,674,1.734,689,0.645,690,0.725,700,2.624,702,3.429,707,4.463,714,1.034,723,1.854,724,2.469,725,3.179,728,2.469,729,1.319,730,0.97,732,1.479,733,1.479,734,1.319,735,1.319,744,4.129,745,3.85,747,3.222,752,1.479,769,2.99,776,2.324,778,3.494,781,1.479,792,1.483,801,1.479,814,1.154,833,1.479,836,1.927,837,1.154,838,1.319,839,1.479,860,1.479,861,1.08,885,3.988,887,1.071,891,2.363,892,1.257,895,1.854,919,1.479,927,1.11,935,2.598,940,2.202,945,1.588,1028,1.071,1034,1.588,1039,2.086,1078,1.202,1089,2.652,1104,3.232,1109,1.071,1110,1.391,1118,2.788,1120,1.001,1144,1.479,1147,1.479,1164,1.154,1172,1.391,1195,2.585,1215,2.585,1242,1.734,1243,1.734,1245,1.588,1246,1.734,1247,2.896,1248,1.734,1275,1.257,1282,4.327,1301,1.588,1309,3.729,1322,2.202,1323,2.836,1360,1.257,1385,1.588,1387,2.652,1448,2.896,1495,1.391,1500,1.734,1501,1.734,1502,1.672,1530,2.469,1543,2.469,1549,4.129,1550,1.391,1815,1.734,1841,1.391,1855,4.463,1924,3.156,1927,2.008,1970,4.427,1978,2.897,1979,3.85,1983,1.071,1985,2.202,1987,1.391,1988,1.479,1991,1.734,1999,1.588,2016,2.585,2049,1.734,2076,1.734,2139,4.456,2275,3.494,2349,1.588,2375,2.652,2391,4.463,2404,1.734,2405,2.702,2408,1.734,2424,1.479,2426,1.734,2427,5.463,2428,4.206,2429,4.206,2430,3.267,2431,1.956,2432,4.206,2433,3.267,2434,3.267,2435,1.956,2436,1.956,2437,1.956,2438,1.956,2439,1.956,2440,1.956,2441,3.267,2442,2.896,2443,1.956,2444,3.267,2445,1.956,2446,1.956,2447,1.956,2448,1.956,2449,4.913,2450,1.956,2451,4.913,2452,1.956,2453,1.956,2454,1.956,2455,3.267,2456,1.956,2457,2.469,2458,1.319,2459,2.324,2460,3.156,2461,1.956,2462,1.956,2463,1.956,2464,1.956,2465,1.956,2466,1.956,2467,3.267,2468,1.956,2469,1.956,2470,1.734,2471,1.956,2472,3.267,2473,3.267,2474,1.956,2475,1.734,2476,1.956,2477,1.956,2478,1.956,2479,1.956,2480,2.896,2481,1.734,2482,1.956,2483,4.463,2484,2.992,2485,3.179,2486,3.267,2487,2.896,2488,1.956,2489,3.729,2490,1.956,2491,1.956,2492,1.956,2493,1.956,2494,1.956,2495,1.956,2496,3.267,2497,1.956,2498,1.956,2499,1.956,2500,1.956,2501,1.734,2502,4.206,2503,1.956,2504,1.956,2505,1.956,2506,1.956,2507,1.956,2508,3.267,2509,1.956,2510,1.956,2511,1.956,2512,4.913,2513,1.956,2514,1.956,2515,1.734,2516,1.588,2517,4.913,2518,1.956,2519,1.956,2520,1.734,2521,3.267,2522,3.414,2523,1.956,2524,3.267,2525,1.956,2526,3.267,2527,1.734,2528,1.956,2529,1.956,2530,4.913,2531,3.267,2532,3.267,2533,3.267,2534,1.956,2535,3.267,2536,3.267,2537,3.267,2538,1.956,2539,3.267,2540,3.267,2541,1.734,2542,5.463,2543,1.956,2544,1.956,2545,4.206,2546,3.267,2547,1.956,2548,1.956,2549,1.956,2550,1.956,2551,1.956,2552,1.956,2553,1.956,2554,1.956,2555,1.956,2556,1.956,2557,1.956,2558,1.956,2559,1.956,2560,5.904,2561,1.956,2562,3.267,2563,1.734,2564,1.956,2565,1.734,2566,1.956,2567,1.956,2568,4.206,2569,1.956,2570,1.956,2571,1.956,2572,1.956,2573,4.206,2574,1.956,2575,4.206,2576,1.956,2577,1.956,2578,1.956,2579,1.956,2580,1.956,2581,1.956,2582,1.734,2583,1.734,2584,1.956,2585,1.956,2586,1.956,2587,1.319,2588,1.956,2589,1.734]],["title/controllers/Oid4vpController.html",[80,1.377,2590,3.432]],["body/controllers/Oid4vpController.html",[3,0.081,4,0.081,5,0.072,9,0.643,12,1.736,13,0.202,17,0.761,20,0.255,21,0.008,30,0.081,31,0.005,32,0.005,33,0.163,43,1.362,45,0.449,47,1.274,52,0.292,58,2.775,70,1.888,80,2.257,82,1.76,84,1.39,87,1.748,88,0.767,89,3.058,90,1.843,91,1.181,201,1.701,210,2.032,275,1.447,312,4.439,315,3.058,351,3.186,365,2.052,373,3.061,379,4.465,389,3.625,396,2.468,408,3.197,410,1.332,412,2.356,497,4.04,593,5.645,599,2.468,604,4.255,610,3.102,630,2.825,632,2.547,633,4.465,634,3.762,635,3.197,636,3.762,645,3.762,647,1.982,701,4.691,814,3.907,1127,3.759,1283,2.198,1300,4.255,1439,3.762,1525,5.019,1977,3.058,1985,4.465,1986,3.762,2402,4.412,2403,5.377,2405,3.197,2407,4.04,2410,4.412,2412,5.872,2590,5.627,2591,4.412,2592,4.977,2593,5.377,2594,6.624,2595,6.6,2596,4.977,2597,4.977,2598,4.977,2599,5.351,2600,4.412,2601,4.977,2602,4.977,2603,4.711,2604,4.412,2605,4.412,2606,4.977,2607,3.54,2608,4.977,2609,4.977,2610,4.977]],["title/modules/Oid4vpModule.html",[100,1.266,1976,2.916]],["body/modules/Oid4vpModule.html",[3,0.089,4,0.089,5,0.079,21,0.008,30,0.089,31,0.006,32,0.006,33,0.18,52,0.302,82,2.5,88,0.847,100,2.179,102,2.245,103,2.568,104,2.726,105,2.726,106,2.496,107,3.65,108,3.65,113,4.619,119,4.344,120,5.367,124,3.505,125,2.726,126,2.726,129,2.961,148,3.379,161,4.156,163,4.156,701,5.267,1976,6.073,1977,5.367,1978,5.151,1979,5.367,1982,4.766,1983,3.009,1985,4.766,1986,4.156,1987,3.91,1988,4.156,2590,5.906,2605,4.874,2611,4.874,2612,5.498,2613,4.874,2614,4.874,2615,5.498,2616,6.927,2617,4.541,2618,4.874,2619,5.498]],["title/injectables/Oid4vpService.html",[689,0.897,701,2.577]],["body/injectables/Oid4vpService.html",[3,0.042,4,0.042,5,0.038,11,2.113,12,1.98,13,0.106,16,0.618,17,0.67,19,0.599,20,0.225,21,0.008,23,0.618,25,1.38,30,0.042,31,0.003,32,0.003,33,0.085,42,0.791,45,0.395,47,0.997,48,2.623,52,0.278,58,2.66,65,1.605,70,0.99,71,0.808,75,2.041,76,1.294,79,1.152,84,0.867,87,1.306,88,0.402,91,0.737,131,2.239,132,0.791,143,1.539,183,2.921,206,1.716,210,2.093,212,3.437,236,2.436,239,1.73,248,2.346,250,2.113,275,1.476,277,2.394,290,2.01,293,2.15,305,1.185,308,3.042,312,3.456,350,1.481,357,1.294,365,1.805,373,1.53,374,1.767,386,2.784,396,2.048,410,1.105,411,2.178,412,2.178,425,1.944,426,1.521,435,2.784,447,2.184,454,1.185,457,2.556,462,0.882,467,3.15,474,2.313,481,3.19,485,1.972,486,1.856,487,1.759,493,1.294,549,1.856,553,2.653,554,3.352,562,1.603,593,4.145,610,2.833,627,2.653,628,1.759,632,1.335,637,3.508,638,1.676,642,1.219,652,1.603,668,1.856,675,1.676,689,0.816,690,0.966,700,2.829,701,2.344,723,1.481,730,1.294,745,2.538,747,4.455,763,3.25,769,1.428,792,2.646,805,1.986,814,2.436,843,1.481,893,4.348,894,2.118,899,4.348,900,2.118,915,2.118,935,2.184,990,2.113,1015,1.428,1050,1.428,1103,3.122,1109,1.428,1120,1.335,1129,1.856,1164,3.437,1172,2.937,1281,2.937,1313,2.313,1343,2.313,1366,2.118,1382,2.118,1383,2.653,1391,1.856,1392,1.972,1394,3.122,1417,3.661,1422,4.405,1502,1.335,1549,3.122,1550,1.856,1553,2.313,1563,2.313,1927,1.603,1978,3.437,1979,4.348,1985,2.784,1987,1.856,1988,1.972,2016,3.903,2072,2.313,2283,1.972,2332,2.313,2336,2.313,2353,2.118,2354,2.313,2355,1.972,2391,4.8,2405,3.292,2460,3.292,2483,4.8,2484,2.937,2485,3.122,2487,3.661,2501,3.661,2515,2.313,2522,2.118,2541,3.661,2563,2.313,2565,2.313,2595,3.661,2599,5.093,2600,3.661,2604,2.313,2620,2.313,2621,4.13,2622,5.126,2623,4.348,2624,2.609,2625,4.13,2626,2.609,2627,2.784,2628,3.661,2629,3.352,2630,2.609,2631,4.405,2632,2.609,2633,2.609,2634,4.13,2635,2.118,2636,2.609,2637,2.609,2638,2.609,2639,2.609,2640,2.313,2641,6.351,2642,5.828,2643,4.13,2644,5.126,2645,2.609,2646,4.13,2647,6.351,2648,4.16,2649,2.609,2650,2.609,2651,3.352,2652,2.609,2653,2.609,2654,2.313,2655,2.609,2656,2.609,2657,2.609,2658,2.609,2659,6.351,2660,2.609,2661,2.609,2662,2.609,2663,2.609,2664,2.609,2665,2.609,2666,2.609,2667,2.609,2668,2.609,2669,2.609,2670,4.13,2671,2.609,2672,2.609,2673,2.609,2674,2.609,2675,2.609,2676,1.972,2677,2.313,2678,2.609,2679,2.118,2680,2.609,2681,2.609,2682,4.13,2683,2.609,2684,4.13,2685,2.609,2686,2.313,2687,2.313,2688,2.609,2689,2.609,2690,2.609,2691,2.609,2692,2.609,2693,2.609,2694,2.609,2695,5.828,2696,2.609,2697,2.609,2698,5.828,2699,4.13,2700,4.13,2701,3.661,2702,2.609,2703,2.609,2704,2.609,2705,4.13,2706,2.609,2707,2.609,2708,4.13,2709,2.609,2710,5.126,2711,2.118,2712,2.609,2713,4.13,2714,2.609,2715,4.13,2716,4.13,2717,2.609,2718,2.609,2719,2.609,2720,2.609,2721,2.609,2722,2.609,2723,2.609]],["title/classes/ParResponseDto.html",[33,0.149,643,3.432]],["body/classes/ParResponseDto.html",[3,0.107,4,0.107,5,0.096,12,2.396,13,0.268,14,1.145,19,0.647,20,0.306,21,0.008,30,0.107,31,0.007,32,0.007,33,0.217,35,1.698,45,0.538,58,3.321,422,5.725,465,5.993,547,3.409,551,3.619,620,6.435,643,5.993,652,5.218,1384,7.028,1385,6.435,1502,4.506,2368,5.367,2373,5.861,2724,7.528]],["title/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,1.437,737,3.229]],["body/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,1.375,2,1.38,3,0.045,4,0.045,5,0.04,12,1.967,13,0.113,14,0.627,19,0.644,20,0.268,21,0.008,22,1.056,30,0.07,31,0.004,32,0.004,33,0.091,37,1.05,39,2.299,42,0.844,52,0.274,58,1.82,63,3.712,65,2.347,70,2.291,71,1.346,74,1.774,75,2.405,76,1.38,78,2.827,79,2.361,88,0.429,91,1.238,131,1.692,132,0.844,183,2.129,201,1.373,206,1.767,210,2.183,211,1.197,235,1.58,239,2.908,240,3.802,242,2.926,248,2.199,250,3.091,278,1.425,289,1.301,290,0.881,293,1.976,303,2.894,305,1.264,306,2.563,307,4.102,308,2.299,311,2.671,312,1.425,313,1.375,322,1.166,323,1.89,325,1.472,351,1.339,352,1.301,357,1.38,365,2.246,373,2.426,374,0.844,385,1.472,410,0.745,411,2.061,425,2.845,426,2.34,432,2.93,433,1.711,447,1.472,457,2.62,461,1.877,467,1.711,468,2.183,469,1.98,471,1.98,473,2.104,476,2.104,481,2.379,490,1.788,553,2.792,568,1.788,605,2.104,609,3.712,610,2.885,613,1.98,616,2.93,617,3.091,627,3.434,628,1.877,631,1.524,632,1.425,637,2.651,638,1.788,639,1.58,641,2.104,642,1.301,652,3.285,668,4.296,672,1.877,689,0.859,691,2.104,694,2.26,696,2.26,698,2.26,700,2.239,701,3.034,702,2.926,705,2.104,707,4.952,708,2.26,710,4.903,715,2.26,719,2.26,723,3.718,724,5.247,725,4.566,726,2.743,727,2.26,728,4.566,729,1.877,730,1.38,731,2.26,732,2.104,733,2.104,734,1.877,735,1.877,736,2.26,737,3.802,738,5.318,739,3.091,740,2.26,741,2.26,742,3.528,743,2.26,744,3.285,745,2.671,746,4.903,747,3.563,748,2.26,749,2.26,750,2.104,751,2.26,752,2.104,753,2.104,754,1.788,755,2.104,756,2.104,757,2.26,758,2.104,759,2.26,760,2.104,761,2.26,762,2.26,763,2.224,764,3.528,765,2.26,766,2.104,767,2.26,768,2.26,769,3.969,770,2.26,771,2.26,772,2.26,773,2.26,774,2.26,775,4.339,776,3.802,777,2.26,778,4.296,779,2.26,780,2.26,781,2.104,782,2.26,783,2.26,784,4.903,785,3.528,786,5.481,787,2.26,788,3.528,789,3.528,790,3.528,791,3.528,792,1.973,793,3.528,794,2.26,795,2.26,796,2.26,797,2.26,798,2.26,799,2.26,800,2.26,801,3.285,802,2.26,803,2.26,804,1.642,805,1.339,806,2.26,807,2.104,808,1.788,809,2.26,810,2.104,811,2.26,812,2.26,813,2.104,814,1.642,815,3.528,816,2.104,817,2.26,818,4.339,819,2.26,820,2.26,821,2.26,822,2.26,823,2.26,824,2.104,825,3.528,826,2.26,827,3.528,828,2.93,829,2.26,830,4.339,831,2.26,832,2.26,833,2.104,834,2.26,835,2.26,836,1.642,837,2.563,838,1.877,839,2.104,840,1.788,841,2.26,842,2.26,843,1.58,844,2.26,845,2.26,846,2.26,847,2.26,848,2.26,849,2.26,850,2.104,851,1.98,852,1.98,853,2.104,854,2.26,855,2.26,856,2.26,857,2.104,858,2.26,859,2.26,860,2.104]],["title/interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html",[0,1.437,739,3.229]],["body/interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html",[0,1.367,2,1.37,3,0.045,4,0.045,5,0.04,12,1.962,13,0.112,14,0.624,17,0.496,19,0.665,20,0.279,21,0.008,22,1.048,30,0.07,31,0.004,32,0.004,33,0.091,37,1.044,39,2.288,42,0.838,52,0.274,58,1.81,63,3.697,65,2.337,70,2.282,71,1.338,74,1.764,75,2.395,76,1.37,78,2.813,79,2.35,88,0.426,91,1.235,131,1.684,132,0.838,183,2.118,201,1.367,206,1.766,210,2.172,211,1.188,235,1.568,239,2.899,240,3.784,242,2.912,248,2.193,250,3.078,278,1.414,289,1.291,290,0.875,293,1.97,303,2.883,305,1.255,306,2.548,307,3.901,308,2.288,311,2.655,312,1.414,313,1.367,322,1.158,323,1.881,325,1.461,351,1.329,352,1.291,357,1.37,365,2.24,373,2.418,374,0.838,385,1.461,410,0.739,411,2.054,425,2.838,426,2.336,432,2.913,433,1.698,447,1.461,457,2.616,461,1.863,467,1.698,468,2.172,469,1.966,471,1.966,473,2.089,476,2.089,481,2.365,490,1.775,553,2.775,568,1.775,605,2.089,609,3.697,610,2.881,613,1.966,616,2.913,617,3.073,627,3.417,628,1.863,631,1.513,632,1.414,637,2.638,638,1.775,639,1.568,641,2.089,642,1.291,652,3.269,668,4.279,672,1.863,689,0.854,691,2.089,694,2.243,696,2.243,698,2.243,700,2.229,701,3.02,702,2.912,705,2.089,707,4.934,708,2.243,710,4.883,715,2.243,719,2.243,723,3.705,724,4.547,725,4.547,726,2.731,727,2.243,728,5.231,729,1.863,730,1.37,731,2.243,732,2.089,733,2.089,734,1.863,735,1.863,736,2.243,737,3.073,738,5.299,739,3.784,740,4.883,741,4.883,742,3.507,743,2.243,744,3.266,745,2.655,746,4.883,747,3.548,748,2.243,749,2.243,750,2.089,751,2.243,752,2.089,753,2.089,754,1.775,755,2.089,756,2.089,757,2.243,758,2.089,759,2.243,760,2.089,761,2.243,762,2.243,763,2.211,764,3.507,765,2.243,766,2.089,767,2.243,768,2.243,769,3.958,770,2.243,771,2.243,772,2.243,773,2.243,774,2.243,775,4.318,776,3.784,777,2.243,778,4.279,779,2.243,780,2.243,781,2.089,782,2.243,783,2.243,784,4.883,785,3.507,786,5.466,787,2.243,788,3.507,789,3.507,790,3.507,791,3.507,792,1.962,793,3.507,794,2.243,795,2.243,796,2.243,797,2.243,798,2.243,799,2.243,800,2.243,801,3.266,802,2.243,803,2.243,804,1.63,805,1.329,806,2.243,807,2.089,808,1.775,809,2.243,810,2.089,811,2.243,812,2.243,813,2.089,814,1.63,815,3.507,816,2.089,817,2.243,818,4.318,819,2.243,820,2.243,821,2.243,822,2.243,823,2.243,824,2.089,825,3.507,826,2.243,827,3.507,828,2.913,829,2.243,830,4.318,831,2.243,832,2.243,833,2.089,834,2.243,835,2.243,836,1.63,837,2.548,838,1.863,839,2.089,840,1.775,841,2.243,842,2.243,843,1.568,844,2.243,845,2.243,846,2.243,847,2.243,848,2.243,849,2.243,850,2.089,851,1.966,852,1.966,853,2.089,854,2.243,855,2.243,856,2.243,857,2.089,858,2.243,859,2.243,860,2.089]],["title/entities/PresentationConfig.html",[843,2.577,861,1.501]],["body/entities/PresentationConfig.html",[3,0.075,4,0.075,5,0.067,7,3.133,9,0.599,12,2.371,13,0.188,14,0.912,16,1.912,17,0.957,19,0.63,20,0.328,21,0.008,26,3.133,27,2.455,30,0.075,31,0.005,32,0.005,33,0.207,37,1.527,43,1.713,44,2.396,45,0.565,52,0.264,55,3.231,56,3.174,57,1.437,62,2.184,65,3.135,74,2.934,75,2.516,90,1.719,185,2.286,201,2.073,210,1.895,248,2.178,289,2.168,303,2.791,365,1.957,494,2.286,560,6.721,561,3.586,564,4.494,596,4.26,629,5.832,642,2.168,662,3.507,840,2.981,843,3.586,861,2.55,863,2.232,867,4.078,868,4.55,870,4.494,873,4.238,875,4.955,877,4.378,882,3.341,883,1.944,1014,4.26,1015,3.459,1029,4.955,1037,4.114,1080,6.369,1300,4.059,1806,3.767,1813,4.114,1817,4.114,1819,4.114,1821,5.601,2603,4.494,2627,4.26,2648,5.832,2651,5.832,2725,7.553,2726,4.64,2727,4.64,2728,7.185,2729,4.64,2730,5.11,2731,4.64,2732,4.64,2733,4.776,2734,4.64,2735,4.64,2736,6.319,2737,4.64,2738,4.64,2739,4.64]],["title/classes/PresentationDuringIssuance.html",[33,0.149,281,2.485]],["body/classes/PresentationDuringIssuance.html",[3,0.102,4,0.102,5,0.091,9,0.814,13,0.255,14,1.112,17,0.885,19,0.76,20,0.343,21,0.008,30,0.125,31,0.006,32,0.006,33,0.273,35,1.619,43,1.584,44,3.552,45,0.522,47,1.079,52,0.252,55,3.484,57,1.952,65,3.231,74,3.396,264,3.873,281,4.215,289,2.944,291,4.905,1027,4.947,1290,5.915,1610,4.482,2740,6.302,2741,6.302,2742,5.586,2743,5.586,2744,5.586]],["title/classes/PresentationDuringIssuanceConfig.html",[33,0.149,280,2.916]],["body/classes/PresentationDuringIssuanceConfig.html",[3,0.061,4,0.061,5,0.054,9,0.482,12,1.421,13,0.151,14,0.783,17,0.429,19,0.443,20,0.328,21,0.008,30,0.121,31,0.004,32,0.004,33,0.262,35,0.959,37,1.936,39,3.777,43,0.768,45,0.253,47,0.639,49,3.077,52,0.229,53,1.796,54,2.202,55,2.674,56,2.82,57,1.679,62,2.422,65,2.107,70,1.416,71,2.795,74,2.607,75,2.79,79,3.753,91,1.464,206,1.071,209,2.214,213,2.119,239,3.798,243,2.745,262,3.655,263,3.483,264,2.294,265,2.822,266,2.398,267,2.822,268,1.605,269,4.098,271,1.91,272,2.822,273,4.826,276,2.822,277,3.273,278,4.199,279,4.78,280,4.986,281,4.881,282,2.655,283,2.655,284,2.517,286,4.098,287,4.304,288,4.098,289,1.744,290,2.02,291,2.202,292,2.043,293,1.063,294,3.856,295,4.098,296,3.766,297,5.867,298,4.098,299,3.483,300,4.541,301,2.968,302,2.822,303,3.695,304,2.822,305,3.379,306,4.84,307,4.069,308,3.834,309,3.856,310,2.822,311,2.294,312,4.099,313,2.02,314,4.098,315,3.332,316,4.098,317,3.198,318,2.822,319,2.462,320,2.655,321,3.483,322,2.271,323,1.32,324,2.294,325,3.376,326,2.822,327,2.822,328,2.968,329,2.822,330,2.398,331,2.822,332,2.517,333,2.202,334,2.655,335,2.043,1843,3.31,2745,3.733]],["title/controllers/PresentationManagementController.html",[80,1.377,2746,3.432]],["body/controllers/PresentationManagementController.html",[3,0.06,4,0.06,5,0.054,9,0.482,12,2.15,13,0.151,16,1.762,17,0.805,19,0.572,20,0.335,21,0.008,25,1.972,30,0.06,31,0.004,32,0.004,33,0.122,37,1.875,42,1.643,43,1.44,45,0.475,47,1.198,49,3.075,50,1.849,52,0.282,65,1.449,71,2.169,76,1.849,80,1.131,82,1.319,84,1.137,87,1.72,88,0.574,90,1.381,91,1.138,199,2.98,206,1.07,210,1.523,243,3.776,246,4.301,250,3.806,275,1.53,293,1.816,301,2.041,303,3.693,307,3.164,319,2.46,322,1.562,344,1.485,345,2.656,362,4.397,365,2.59,373,2.966,389,3.492,391,4.095,393,4.397,394,2.292,406,4.224,410,0.998,411,1.608,412,2.208,415,3.853,418,2.269,457,1.678,504,2.041,599,1.849,630,2.117,631,2.041,642,2.531,647,2.157,655,3.027,675,3.48,701,3.621,763,1.908,843,3.975,935,2.865,1025,3.329,1071,3.763,1116,1.794,1118,3.075,1126,3.329,1142,3.853,1143,3.075,1228,2.395,1267,3.853,1273,2.514,1274,2.514,1275,2.395,1278,3.652,1279,3.652,1502,2.772,1584,2.514,1633,2.514,1841,4.538,1922,5.656,1923,3.306,1925,3.306,1926,4.803,1927,3.921,1928,3.306,1932,3.027,1933,4.098,1934,2.514,1937,3.306,1938,3.306,1939,4.803,1940,2.819,1941,6.208,1942,3.306,1943,3.306,1944,5.179,1945,4.803,1946,3.853,1947,3.306,1963,3.306,1964,3.306,1965,3.306,1966,3.306,1967,3.306,1968,3.306,1969,3.306,2599,3.652,2623,3.921,2635,3.027,2746,4.095,2747,3.306,2748,5.418,2749,5.656,2750,3.729,2751,3.729,2752,3.729,2753,3.729,2754,5.865,2755,3.729,2756,3.729,2757,3.729,2758,3.729,2759,3.729,2760,5.418,2761,3.729,2762,3.729,2763,3.027,2764,3.306,2765,3.729,2766,3.729,2767,3.729,2768,3.729,2769,3.729,2770,3.729,2771,3.729,2772,3.729,2773,3.729,2774,3.729,2775,3.729,2776,3.729,2777,3.729,2778,3.729,2779,3.729]],["title/classes/PresentationRequest.html",[33,0.149,2754,3.432]],["body/classes/PresentationRequest.html",[3,0.088,4,0.088,5,0.078,9,0.699,12,2.226,13,0.219,14,1.01,16,1.657,17,0.804,19,0.571,20,0.346,21,0.008,27,2.718,30,0.113,31,0.006,32,0.006,33,0.229,35,1.389,37,2.102,43,1.595,44,2.941,45,0.526,50,4.065,52,0.229,55,2.93,56,3.09,57,1.675,61,4.494,62,2.418,65,3.438,74,3.166,78,3.7,289,2.527,303,3.75,307,2.682,365,2.741,552,3.7,561,3.971,667,3.19,675,4.981,685,4.391,1066,4.391,1444,4.976,1502,3.968,1933,4.981,1934,5.227,1944,4.391,1946,3.848,2102,3.647,2382,4.089,2386,5.679,2599,5.227,2603,4.976,2754,5.288,2780,6.197,2781,4.795,2782,5.409,2783,6.996,2784,5.679]],["title/interfaces/PresentationRequestOptions.html",[0,1.437,2631,3.432]],["body/interfaces/PresentationRequestOptions.html",[0,2.029,2,3.178,3,0.104,4,0.104,5,0.093,9,0.828,12,2.196,13,0.26,14,1.123,17,1.065,19,0.684,20,0.3,21,0.008,27,3.023,30,0.104,31,0.006,32,0.006,37,1.881,52,0.21,65,3.526,74,3.558,289,2.994,365,2.41,552,4.115,610,3,2603,5.535,2631,6.586,2780,4.845,2785,5.682,2786,6.898]],["title/modules/PresentationsModule.html",[100,1.266,2617,2.916]],["body/modules/PresentationsModule.html",[3,0.097,4,0.097,5,0.087,21,0.008,30,0.097,31,0.006,32,0.006,33,0.197,52,0.3,82,2.644,88,0.926,100,2.27,102,2.453,103,2.807,104,2.979,105,2.979,106,2.728,107,3.803,108,3.803,124,3.708,125,2.979,126,2.979,129,3.133,509,3.544,510,2.453,843,3.41,1228,3.86,1976,4.804,1982,5.041,1983,3.289,2616,6.63,2617,5.932,2623,5.772,2746,6.154,2763,4.877,2764,5.327,2787,5.327,2788,5.327,2789,5.327,2790,5.327,2791,6.355,2792,6.009,2793,5.327,2794,6.009,2795,6.009,2796,6.009]],["title/injectables/PresentationsService.html",[689,0.897,2623,2.79]],["body/injectables/PresentationsService.html",[3,0.031,4,0.031,5,0.077,7,2.872,9,0.835,12,0.83,13,0.076,14,0.457,16,2.146,17,0.707,19,0.721,20,0.275,21,0.008,22,1.553,23,0.446,30,0.031,31,0.003,32,0.003,33,0.134,37,1.935,42,1.454,45,0.515,47,1.189,48,1.62,52,0.275,53,0.906,57,0.584,71,1.657,84,0.664,87,1.647,88,0.29,91,1.428,129,2.009,131,1.949,132,0.571,140,1.111,141,1.158,143,1.111,144,1.867,174,1.424,183,1.26,185,1.481,201,1.66,206,1.639,209,1.671,248,2.496,250,2.455,268,0.81,271,1.62,275,1.518,277,1.479,284,1.27,293,1.84,299,1.21,303,3.636,319,3.318,344,0.75,365,0.98,368,1.34,374,2.261,396,0.934,410,1.283,411,2.254,412,2.444,418,2.009,425,1.553,426,1.995,447,1.674,454,3.052,457,2.002,462,1.07,481,1.733,494,2.927,510,0.769,549,3.412,554,2.569,560,2.393,562,3.971,573,3.629,604,2.033,656,4.702,689,0.625,690,0.698,723,1.069,726,1.859,754,3.955,763,0.964,769,1.733,792,3.502,814,1.867,828,3.234,840,3.081,843,4.233,861,1.915,863,1.523,867,1.069,886,3.412,887,1.031,891,2.786,892,1.21,927,1.069,940,1.27,942,2.134,944,1.424,949,1.867,1023,2.806,1050,4.334,1051,4.151,1068,1.111,1115,2.307,1116,2.307,1118,3.668,1120,2.095,1121,3.234,1126,1.945,1127,1.797,1128,5.729,1129,1.34,1133,2.948,1134,2.134,1138,1.34,1141,3.412,1142,1.34,1143,1.069,1144,2.393,1145,1.529,1146,1.529,1147,1.424,1148,1.424,1151,1.529,1152,1.529,1153,2.569,1155,3.323,1156,1.529,1157,1.529,1158,2.569,1159,1.529,1160,1.529,1161,1.529,1162,1.529,1163,3.323,1164,1.867,1165,1.529,1166,1.529,1167,1.27,1168,1.529,1169,4.341,1170,2.569,1171,1.529,1172,1.34,1173,1.529,1174,1.529,1175,1.529,1176,1.529,1179,2.569,1180,2.569,1181,1.529,1183,1.529,1184,1.529,1185,1.529,1189,1.34,1190,1.529,1191,1.34,1192,1.529,1195,1.158,1197,1.529,1198,1.529,1199,1.529,1200,1.529,1201,1.529,1203,1.34,1204,1.529,1228,1.21,1252,1.797,1281,2.251,1300,2.033,1331,3.629,1333,1.424,1334,1.424,1337,5.959,1338,1.424,1360,1.21,1370,2.806,1387,3.323,1426,5.396,1428,1.27,1430,5.932,1502,2.964,1522,0.934,1525,3.234,1547,1.529,1650,2.251,1654,1.34,1680,2.569,1741,2.251,1747,1.529,1855,4.378,1879,1.67,1983,1.031,2139,4.781,2177,1.21,2424,2.393,2457,1.424,2458,1.27,2480,2.806,2593,2.569,2607,4.379,2623,2.948,2627,2.134,2651,1.529,2733,4.378,2749,2.806,2763,1.529,2797,1.67,2798,3.165,2799,6.462,2800,6.157,2801,4.094,2802,4.797,2803,3.165,2804,3.165,2805,4.094,2806,3.165,2807,1.529,2808,4.682,2809,4.797,2810,3.165,2811,3.165,2812,2.806,2813,3.165,2814,3.165,2815,1.884,2816,3.165,2817,3.165,2818,1.884,2819,1.884,2820,3.165,2821,1.884,2822,1.884,2823,4.797,2824,4.797,2825,1.884,2826,1.884,2827,1.884,2828,5.348,2829,4.797,2830,1.884,2831,3.165,2832,3.165,2833,4.094,2834,3.165,2835,4.797,2836,1.884,2837,3.165,2838,1.884,2839,4.094,2840,1.884,2841,3.165,2842,1.884,2843,1.884,2844,3.165,2845,1.884,2846,1.884,2847,1.884,2848,3.165,2849,1.884,2850,1.884,2851,1.884,2852,3.165,2853,1.884,2854,1.884,2855,1.884,2856,1.884,2857,1.67,2858,1.884,2859,1.884,2860,1.884,2861,1.884,2862,1.884,2863,1.884,2864,1.884,2865,1.884,2866,1.884,2867,1.884,2868,1.884,2869,1.884,2870,1.884,2871,1.884,2872,1.884,2873,3.165,2874,1.884,2875,1.884,2876,1.884,2877,1.884,2878,1.884,2879,1.884,2880,1.884,2881,1.884,2882,4.094,2883,1.884,2884,1.884,2885,1.884,2886,1.884,2887,3.165,2888,1.884]],["title/entities/RegistrarEntity.html",[861,1.501,2889,3.229]],["body/entities/RegistrarEntity.html",[3,0.106,4,0.106,5,0.095,13,0.265,14,1.138,19,0.745,20,0.326,21,0.008,30,0.106,31,0.006,32,0.006,33,0.215,43,1.739,45,0.573,52,0.214,201,2.024,248,2.564,861,2.606,863,3.149,873,4.988,877,4.473,882,3.462,883,2.742,1503,6.015,2889,5.606,2890,5.804,2891,7.496,2892,7.496,2893,6.547,2894,6.547,2895,6.547]],["title/modules/RegistrarModule.html",[100,1.266,119,2.79]],["body/modules/RegistrarModule.html",[3,0.089,4,0.089,5,0.079,9,0.705,21,0.008,30,0.114,31,0.006,32,0.006,33,0.179,52,0.291,70,2.072,88,0.841,100,2.294,102,3.181,103,2.551,104,2.708,105,2.708,106,2.48,107,3.639,108,3.639,113,4.611,119,5.726,124,3.491,125,2.708,126,2.708,129,3.447,138,3.853,148,3.357,160,4.129,179,4.434,206,1.079,353,5.714,462,2.379,509,3.222,510,2.23,899,5.75,1025,3.357,1068,3.222,1115,3.386,1472,5.541,1609,4.746,2130,3.885,2248,3.682,2338,4.129,2617,5.601,2627,4.746,2889,3.885,2896,4.842,2897,4.842,2898,4.842,2899,5.462,2900,4.434,2901,6.323,2902,5.462,2903,4.842,2904,5.462,2905,4.842,2906,4.842,2907,4.842,2908,6.906,2909,6.906,2910,4.434,2911,4.434,2912,5.462]],["title/injectables/RegistrarService.html",[689,0.897,899,2.79]],["body/injectables/RegistrarService.html",[3,0.036,4,0.036,5,0.032,7,4.151,9,0.593,11,4.317,13,0.09,14,0.523,16,1.384,17,0.721,19,0.71,20,0.266,21,0.008,24,1.361,28,1.213,30,0.036,31,0.003,32,0.004,33,0.073,37,1.413,38,2.737,45,0.53,47,1.407,52,0.247,62,1.251,71,0.686,79,0.979,84,0.76,87,1.607,88,0.341,91,1.394,131,2.261,132,0.672,144,2.708,183,1.442,201,0.93,206,1.517,209,1.478,210,2.165,211,1.557,213,3.56,235,2.055,239,1.517,248,2.369,250,1.853,266,2.326,268,0.953,275,1.371,290,1.146,293,2.289,300,1.576,315,2.225,319,1.644,322,1.923,344,0.882,345,2.619,352,3.994,357,1.098,364,3.258,365,0.686,373,1.7,374,1.608,377,2.441,385,1.915,410,1.419,411,2.485,412,1.735,425,1.741,426,2.28,429,2.737,433,2.225,434,2.575,457,2.379,462,1.792,494,1.31,510,0.905,530,2.575,547,0.953,579,1.493,604,2.326,629,1.798,642,1.035,689,0.715,690,0.821,699,1.213,700,3.079,714,1.172,730,1.098,763,1.853,807,1.675,808,1.423,828,2.441,866,4.7,868,2.135,883,0.928,886,4.462,887,1.213,891,2.55,899,3.855,919,2.737,927,1.257,990,2.349,1010,3.771,1015,3.434,1091,1.964,1115,1.741,1118,1.257,1141,2.575,1142,4.462,1143,3.56,1164,1.307,1187,2.737,1281,2.575,1322,3.574,1342,2.902,1377,3.771,1378,1.798,1383,1.423,1394,2.737,1411,1.798,1428,1.493,1431,1.423,1439,2.737,1525,2.441,1530,2.737,1543,2.737,1556,4.07,1609,2.441,1626,1.798,1630,1.964,1692,1.964,1791,3.21,1855,4.742,1959,1.964,2003,1.964,2075,1.964,2175,3.21,2177,3.406,2206,1.964,2346,4.07,2424,1.675,2475,1.964,2527,1.964,2582,1.964,2593,2.939,2599,3.574,2607,4.462,2623,4.517,2627,2.441,2648,4.304,2711,1.798,2730,3.771,2733,5.689,2784,4.304,2889,1.576,2891,3.21,2892,5.868,2901,7.056,2903,1.964,2910,1.798,2911,1.798,2913,1.964,2914,3.621,2915,3.21,2916,6.273,2917,7.934,2918,3.621,2919,6.62,2920,4.591,2921,4.591,2922,3.621,2923,3.621,2924,4.304,2925,5.302,2926,4.591,2927,3.621,2928,2.939,2929,3.621,2930,2.215,2931,2.215,2932,6.273,2933,2.215,2934,2.215,2935,3.621,2936,2.215,2937,3.621,2938,7.68,2939,3.621,2940,2.215,2941,2.215,2942,2.215,2943,6.273,2944,2.326,2945,3.621,2946,3.621,2947,2.215,2948,2.215,2949,2.215,2950,3.621,2951,3.621,2952,3.621,2953,2.215,2954,5.302,2955,2.215,2956,1.964,2957,2.215,2958,2.215,2959,3.621,2960,3.621,2961,3.621,2962,3.621,2963,3.621,2964,2.215,2965,2.215,2966,2.939,2967,2.215,2968,2.215,2969,2.215,2970,2.215,2971,2.215,2972,2.215,2973,2.215,2974,2.215,2975,6.273,2976,2.215,2977,2.215,2978,2.215,2979,3.621,2980,3.621,2981,3.621,2982,1.964,2983,2.215,2984,2.215,2985,2.215,2986,2.215,2987,2.215,2988,2.215,2989,2.215,2990,2.215,2991,2.215,2992,2.215,2993,2.215,2994,1.798,2995,2.215,2996,2.215,2997,2.215,2998,2.215,2999,2.215,3000,2.215,3001,2.215,3002,5.302,3003,2.215,3004,2.215,3005,2.215,3006,2.215,3007,2.215,3008,2.215,3009,2.215,3010,2.215,3011,2.215,3012,2.215,3013,2.215,3014,4.591,3015,5.302,3016,2.215,3017,3.621,3018,2.215,3019,2.215,3020,3.621,3021,2.215,3022,2.215,3023,2.215,3024,2.215,3025,1.964,3026,3.621,3027,2.215,3028,2.215,3029,2.215,3030,2.215,3031,2.215,3032,3.621,3033,2.215,3034,2.215,3035,2.215,3036,2.215,3037,2.215]],["title/classes/RegistrationCertificateRequest.html",[33,0.149,2730,3.229]],["body/classes/RegistrationCertificateRequest.html",[3,0.101,4,0.101,5,0.09,7,4.276,9,0.803,12,2.003,13,0.252,14,1.103,16,1.959,17,0.878,19,0.624,20,0.295,21,0.008,27,2.968,30,0.101,31,0.006,32,0.006,33,0.25,35,1.598,43,1.572,44,3.136,45,0.518,52,0.25,55,3.464,57,1.927,356,4.695,373,3.279,552,4.04,561,4.336,596,5.15,667,3.669,679,5.049,2627,5.15,2730,6.134,2733,6.519,3038,7.33,3039,8.269,3040,6.22,3041,6.22]],["title/modules/ResolverModule.html",[100,1.266,2791,3.229]],["body/modules/ResolverModule.html",[3,0.106,4,0.106,5,0.095,21,0.008,30,0.106,31,0.007,32,0.007,33,0.215,52,0.277,88,1.01,100,2.36,102,2.678,103,3.064,104,3.253,105,3.253,106,2.978,107,3.953,108,3.953,124,3.913,125,3.253,126,3.253,129,2.748,1982,5.32,1983,3.591,2791,6.564,2808,6.402,3042,5.815,3043,5.815,3044,5.815,3045,6.56,3046,6.56]],["title/injectables/ResolverService.html",[689,0.897,2808,3.061]],["body/injectables/ResolverService.html",[3,0.079,4,0.079,5,0.07,7,2.414,9,0.629,13,0.197,17,0.75,20,0.252,21,0.008,22,2.984,23,2,25,2.575,30,0.079,31,0.005,32,0.005,33,0.16,45,0.443,47,1.117,48,4.414,52,0.277,84,1.37,87,1.343,88,0.75,91,1.313,206,1.554,210,1.988,211,2.807,242,3.573,271,2.491,275,1.426,282,3.463,293,2.096,365,1.508,374,1.979,410,1.303,412,1.938,425,2.984,426,2.435,443,3.952,454,2.964,457,1.508,462,2.206,468,3.448,493,3.236,628,3.282,689,1.289,690,1.803,723,2.763,726,3.981,769,3.573,792,2.964,1039,3.236,1051,3.282,1187,4.934,1283,2.151,1391,4.643,1522,2.414,1650,5.596,1694,5.786,1970,3.282,1983,2.665,2139,6.007,2177,4.193,2212,5.786,2457,4.934,2458,3.282,2481,4.316,2807,3.952,2808,4.4,2812,5.786,3025,4.316,3047,4.316,3048,6.527,3049,6.527,3050,4.869,3051,6.527,3052,4.869,3053,5.786,3054,6.527,3055,4.869,3056,4.869,3057,4.316,3058,4.869,3059,4.869,3060,4.869,3061,4.869,3062,4.869,3063,4.869,3064,4.869,3065,4.869,3066,4.869,3067,4.869,3068,4.869,3069,4.869,3070,4.869,3071,6.527,3072,4.869,3073,4.869,3074,4.869,3075,4.869,3076,4.869,3077,4.869,3078,4.869,3079,4.869,3080,4.869,3081,4.869]],["title/classes/S3FileStorage.html",[33,0.149,3082,3.432]],["body/classes/S3FileStorage.html",[3,0.067,4,0.067,5,0.059,12,1.078,13,0.167,17,0.967,19,0.757,20,0.309,21,0.008,22,2.556,23,2.183,30,0.067,31,0.005,32,0.005,33,0.135,35,1.056,45,0.544,47,1.372,52,0.24,75,2.683,84,1.22,87,1.589,91,1.378,201,1.056,206,1.447,209,1.679,268,2.499,275,1.752,277,2.714,293,2.522,294,2.925,373,2.861,374,1.762,410,1.555,411,2,426,2.38,435,2.772,447,2.175,457,2.393,459,3.108,547,2.898,713,3.298,714,3.073,1039,2.039,1116,2.795,1143,3.298,1569,4.328,1571,5.974,1572,4.392,1573,5.47,1574,4.392,1576,4.717,1578,5.151,1579,6.492,1581,4.392,1583,3.338,1584,4.543,1585,5.839,1586,5.47,1587,5.209,1589,5.093,1590,4.141,1591,3.338,1593,3.338,1595,2.772,1598,3.646,1599,4.392,2128,4.133,2199,3.338,2217,5.151,2218,3.646,3082,4.392,3083,3.646,3084,4.112,3085,6.492,3086,8.561,3087,6.739,3088,4.112,3089,4.793,3090,4.112,3091,4.112,3092,4.112,3093,4.112,3094,4.112,3095,5.811,3096,6.739,3097,6.739,3098,5.811,3099,4.717,3100,3.338,3101,3.646,3102,3.646,3103,4.112,3104,7.725,3105,8.019,3106,4.112,3107,5.811,3108,4.112,3109,4.112,3110,4.112,3111,4.112,3112,4.112,3113,4.112,3114,4.112,3115,4.112,3116,4.112,3117,4.112,3118,4.112,3119,4.112,3120,4.112,3121,4.112,3122,4.112,3123,4.112]],["title/classes/SchemaResponse.html",[33,0.149,1065,3.229]],["body/classes/SchemaResponse.html",[3,0.105,4,0.105,5,0.093,13,0.261,14,1.291,19,0.713,20,0.355,21,0.008,30,0.105,31,0.006,32,0.006,33,0.211,35,1.656,42,2.367,45,0.592,70,3.186,185,2.825,301,4.274,551,3.529,1025,5.162,1028,4.274,1065,5.554,1085,6.759,1290,6.36,2162,5.233,2368,5.233,3124,7.809,3125,7.809,3126,7.809,3127,5.715,3128,5.715]],["title/entities/Session.html",[610,1.501,861,1.501]],["body/entities/Session.html",[3,0.046,4,0.046,5,0.041,9,0.363,12,2.241,13,0.114,14,0.876,16,1.831,17,1.043,19,0.725,20,0.344,21,0.008,26,2.665,27,2.088,30,0.087,31,0.004,32,0.004,33,0.092,37,1.684,43,1.797,45,0.592,52,0.228,58,3.31,62,1.512,65,2.826,72,3.306,74,2.685,75,2.416,76,3.008,77,4.434,79,1.932,95,3.878,96,2.81,185,2.521,201,2.345,243,2.311,248,1.629,277,1.311,289,1.311,290,2.302,301,3.321,303,3.491,305,1.986,307,3.008,308,1.881,313,2.623,324,2.688,365,1.355,418,2.251,430,3.306,454,1.986,489,2.949,494,1.583,561,3.954,564,3.111,596,4.696,609,3.302,610,2.801,617,4.316,642,2.043,652,3.302,659,4.764,778,3.822,792,1.275,836,5.083,837,3.17,861,2.174,863,1.35,867,3.05,868,3.579,869,1.997,870,3.111,873,5.184,875,5.865,882,2.313,883,1.176,949,1.656,966,2.279,1029,5.387,1050,1.537,1051,1.893,1078,1.725,1101,5.498,1103,3.306,1104,4.118,1105,4.062,1115,1.35,1129,4.316,1195,1.725,1241,1.725,1300,2.81,1323,1.893,1338,2.122,1502,3.105,1517,3.551,1924,3.452,2278,3.551,2391,4.971,2459,3.822,2516,4.362,2520,4.764,2587,1.893,2599,3.623,2603,3.111,2635,2.279,2654,4.764,2701,4.764,2944,3.452,3129,2.279,3130,2.807,3131,2.807,3132,2.807,3133,2.807,3134,4.764,3135,2.807,3136,4.374,3137,4.374,3138,2.807,3139,2.807,3140,2.807,3141,2.807,3142,2.807,3143,5.374,3144,2.807,3145,2.807,3146,2.807,3147,2.807,3148,2.807,3149,4.362,3150,2.807,3151,2.807,3152,4.374,3153,4.374,3154,2.807,3155,4.374,3156,2.807,3157,4.374,3158,2.807,3159,2.279,3160,1.893,3161,2.807]],["title/controllers/SessionController.html",[80,1.377,3162,3.432]],["body/controllers/SessionController.html",[3,0.077,4,0.077,5,0.068,9,0.61,13,0.191,16,2.113,17,0.833,19,0.683,20,0.28,21,0.008,27,2.485,30,0.077,31,0.005,32,0.005,33,0.155,42,2.199,43,1.599,45,0.527,47,1.241,52,0.285,80,1.433,82,1.671,84,1.343,87,1.722,88,0.728,90,1.75,91,1.386,96,4.109,243,3.681,275,1.585,290,2.024,328,3.501,345,2.751,373,1.75,374,2.538,389,2.586,394,2.904,406,4.118,410,1.264,411,1.899,412,2.411,418,2.68,504,2.586,514,4.55,515,2.586,599,2.343,610,2.999,630,2.682,637,3.596,647,2.547,897,4.116,898,3.185,942,4.312,1071,2.787,1116,2.273,1126,3.931,1127,3.631,1133,4.776,1267,4.55,1273,3.185,1274,3.185,1275,3.035,1278,3.185,1279,3.185,1287,3.572,1841,4.55,3160,4.312,3162,4.835,3163,4.189,3164,7.252,3165,7.772,3166,6.397,3167,6.397,3168,4.725,3169,4.725,3170,4.725,3171,4.725,3172,6.397,3173,4.725,3174,4.725,3175,5.528,3176,6.397,3177,4.725,3178,3.835,3179,4.189,3180,3.835,3181,3.835,3182,4.725,3183,4.725,3184,4.725,3185,4.725,3186,4.725,3187,4.725,3188,4.725,3189,4.725]],["title/guards/SessionGuard.html",[582,3.229,635,2.916]],["body/guards/SessionGuard.html",[3,0.097,4,0.097,5,0.087,12,1.96,13,0.243,16,1.771,17,0.859,20,0.288,21,0.008,30,0.097,31,0.006,32,0.006,33,0.197,45,0.507,47,1.28,52,0.245,84,1.57,87,1.236,88,0.926,91,1.072,201,1.543,206,1.608,236,4.802,268,2.584,275,1.779,293,2.318,374,2.267,410,1.608,425,2.836,426,2.22,457,1.861,610,2.897,635,4.804,637,4.43,647,2.393,689,1.477,769,4.093,1283,2.654,2009,7.553,2013,6.63,2014,6.06,2016,3.693,3181,4.877,3190,6.009,3191,5.327,3192,6.009,3193,6.009,3194,6.009,3195,8.142,3196,5.327,3197,6.009,3198,6.009,3199,5.327]],["title/interfaces/SessionLogContext.html",[0,1.437,2460,2.916]],["body/interfaces/SessionLogContext.html",[0,1.796,2,2.813,3,0.092,4,0.092,5,0.082,9,0.733,13,0.23,14,1.041,16,1.709,17,0.99,19,0.757,20,0.345,21,0.008,23,1.709,26,3.577,27,3.243,30,0.092,31,0.006,32,0.006,45,0.385,96,4.634,212,3.347,236,4.922,248,2.53,305,3.912,308,3.705,312,4.409,494,2.87,610,2.994,1032,6.395,1101,5.453,1120,3.691,1216,5.453,1593,5.855,2016,4.874,2460,4.634,2484,5.936,2485,6.763,2786,6.395,2915,5.03,3200,5.131,3201,5.03,3202,5.674,3203,5.674,3204,7.214,3205,7.214,3206,7.214]],["title/injectables/SessionLoggerInterceptor.html",[689,0.897,1977,2.79]],["body/injectables/SessionLoggerInterceptor.html",[3,0.057,4,0.057,5,0.05,9,0.877,12,2.251,13,0.142,14,0.746,17,0.706,20,0.292,21,0.008,23,0.827,28,2.826,30,0.057,31,0.004,32,0.004,33,0.114,37,1.248,45,0.46,47,1.162,52,0.257,75,3.207,84,1.084,87,1.396,88,0.538,91,1.211,96,4.36,131,2.647,132,1.059,140,2.06,141,2.146,183,2.446,194,2.484,206,1.729,209,1.426,212,4.003,236,4.272,239,3.373,242,1.912,243,1.502,244,4.578,246,2.355,248,1.566,251,3.096,268,1.502,275,1.342,344,1.391,345,1.325,351,1.68,365,1.903,373,3.18,410,1.816,411,2.441,412,2.251,419,2.484,425,1.325,445,2.146,562,3.173,604,3.317,610,2.662,647,3.019,689,1.02,690,1.294,935,2.731,949,3.623,1039,3.591,1120,3.706,1121,5.111,1189,2.484,1203,3.673,1489,3.096,1680,4.987,1777,3.903,1977,4.171,2010,3.096,2011,7.29,2014,4.827,2016,4.659,2017,2.835,2023,3.096,2148,5.13,2259,2.484,2262,3.903,2407,2.835,2458,2.355,2483,5.13,2484,5.151,2587,2.355,2607,5.151,2628,4.578,2629,2.835,2711,2.835,2924,4.987,2928,5.509,2966,4.191,2982,4.578,2994,5.509,3196,3.096,3200,5.151,3207,3.096,3208,5.164,3209,5.164,3210,5.164,3211,5.164,3212,5.164,3213,5.164,3214,6.787,3215,3.493,3216,5.164,3217,5.164,3218,5.164,3219,5.164,3220,7.243,3221,5.164,3222,5.164,3223,3.493,3224,5.164,3225,6.143,3226,5.164,3227,6.787,3228,5.164,3229,3.493,3230,3.493,3231,3.493,3232,4.191,3233,3.493,3234,3.493,3235,3.096,3236,3.493,3237,3.493,3238,3.493,3239,3.493,3240,3.493,3241,3.493,3242,3.493,3243,3.493,3244,3.493,3245,3.493,3246,3.493,3247,6.143,3248,6.143,3249,3.493,3250,3.493,3251,6.787,3252,3.493,3253,3.493,3254,3.493,3255,3.493,3256,3.493,3257,3.493,3258,3.493,3259,3.493,3260,3.096,3261,3.096,3262,2.64,3263,3.096,3264,3.493,3265,3.493,3266,3.493,3267,3.493,3268,3.493,3269,3.493,3270,3.493,3271,3.493,3272,5.164,3273,3.493]],["title/injectables/SessionLoggerService.html",[689,0.897,1978,2.678]],["body/injectables/SessionLoggerService.html",[3,0.045,4,0.045,5,0.04,9,0.557,12,1.392,13,0.112,14,0.622,17,0.92,19,0.664,20,0.318,21,0.008,28,3.953,30,0.045,31,0.004,32,0.004,33,0.09,37,1.042,45,0.56,47,1.412,52,0.197,58,2.515,84,0.905,87,1.648,88,0.424,91,1.429,131,2.488,132,0.835,140,1.625,141,1.693,183,3.468,194,1.959,206,1.049,209,1.125,212,4.076,239,2.515,275,1.75,303,1.904,308,3.304,313,2.187,323,1.524,330,2.768,345,2.014,410,1.607,411,2.219,412,1.279,462,1.457,489,4.048,494,0.997,610,2.913,626,4.706,647,2.595,657,3.821,689,0.851,690,1.02,713,4.461,927,4.461,949,4.409,1015,1.508,1104,3.568,1120,3.073,1121,5.04,1189,3.065,1191,3.065,1195,1.693,1203,5.317,1409,4.874,1777,4.539,1978,3.542,2016,5.55,2148,3.258,2248,2.905,2259,1.959,2262,6.624,2278,5.291,2460,5.868,2485,5.46,2587,1.857,2607,3.065,2629,3.498,2640,2.442,2924,4.309,2928,3.498,2966,3.498,3134,5.778,3200,5.94,3260,3.821,3261,7.551,3262,3.258,3263,3.821,3274,2.442,3275,6.005,3276,4.31,3277,4.31,3278,5.309,3279,5.309,3280,4.31,3281,5.309,3282,4.31,3283,5.309,3284,5.309,3285,5.309,3286,4.31,3287,6.005,3288,2.754,3289,4.31,3290,4.31,3291,9.297,3292,2.754,3293,2.754,3294,6.518,3295,2.754,3296,2.754,3297,2.754,3298,4.31,3299,2.754,3300,5.309,3301,2.754,3302,2.754,3303,4.31,3304,2.754,3305,2.754,3306,2.754,3307,2.754,3308,2.754,3309,2.754,3310,2.754,3311,4.31,3312,2.754,3313,2.754,3314,2.754,3315,7.861,3316,7.861,3317,2.754,3318,7.476,3319,2.754,3320,2.754,3321,2.754,3322,2.754,3323,2.754,3324,2.754,3325,2.754,3326,2.754,3327,2.754,3328,2.754,3329,4.31]],["title/modules/SessionModule.html",[100,1.266,120,2.79]],["body/modules/SessionModule.html",[3,0.089,4,0.089,5,0.079,9,0.709,21,0.008,30,0.115,31,0.006,32,0.006,33,0.18,47,0.939,52,0.295,82,2.497,88,0.846,100,2.298,102,2.241,103,2.564,104,2.722,105,2.722,106,2.492,107,3.647,108,3.647,120,5.669,124,3.502,125,2.722,126,2.722,129,2.958,138,3.865,162,4.149,185,2.555,206,1.084,243,3.357,418,2.958,463,4.455,464,4.455,503,5.608,509,3.237,510,2.241,511,6.26,512,3.526,513,3.7,514,3.904,515,3.004,516,4.455,545,4.866,546,4.455,547,2.36,610,1.815,637,4.6,1115,3.756,1609,4.761,2350,3.904,2676,5.902,3160,5.75,3162,5.902,3180,4.455,3181,4.455,3330,4.866,3331,5.489,3332,4.866,3333,4.866,3334,4.455,3335,5.489,3336,4.455,3337,4.866,3338,4.866,3339,4.866,3340,5.489,3341,5.489,3342,4.866,3343,4.866]],["title/injectables/SessionService.html",[637,2.251,689,0.897]],["body/injectables/SessionService.html",[3,0.051,4,0.051,5,0.045,13,0.126,16,1.925,17,0.867,19,0.684,20,0.291,21,0.008,30,0.051,31,0.004,32,0.004,33,0.102,45,0.551,47,1.292,52,0.261,71,1.468,84,0.994,87,1.792,88,0.48,91,1.388,93,4.117,106,2.151,131,2.389,132,0.944,134,2.528,185,2.075,206,1.632,248,2.202,268,1.339,275,1.65,293,2.269,317,2.794,323,2.028,328,2.593,344,1.24,352,1.455,374,1.943,410,1.268,411,1.902,412,2.366,417,2.215,418,3.509,426,1.406,455,4.429,457,1.985,489,3.866,494,1.714,510,1.272,512,2,546,2.528,553,5.221,558,2.528,610,2.965,637,2.349,647,1.887,672,3.866,689,0.936,690,1.153,714,2.506,745,1.914,747,2.794,763,3.716,766,3.581,837,2.794,838,2.099,867,1.768,883,1.304,886,5.165,887,1.705,888,2.528,889,5.202,890,2.354,891,3.083,908,2.354,909,4.655,927,1.768,935,3.389,942,3.194,1010,3.37,1015,1.705,1109,2.593,1116,2.279,1126,2.912,1195,3.524,1342,2.593,1383,3.043,1444,3.37,2350,3.37,2459,4.904,2587,3.194,2944,3.043,3149,5.202,3159,2.528,3160,5.09,3180,2.528,3336,3.846,3342,6.112,3343,6.112,3344,2.761,3345,6.409,3346,4.738,3347,6.409,3348,3.114,3349,7.55,3350,5.735,3351,3.114,3352,4.738,3353,4.738,3354,6.409,3355,3.114,3356,4.738,3357,6.409,3358,3.114,3359,4.738,3360,3.114,3361,4.738,3362,3.114,3363,3.114,3364,4.738,3365,6.409,3366,3.114,3367,4.738,3368,3.114,3369,4.738,3370,6.409,3371,4.738,3372,4.738,3373,4.738,3374,4.2,3375,4.738,3376,3.114,3377,4.738,3378,4.738,3379,3.114,3380,4.738,3381,4.738,3382,3.114,3383,4.738,3384,3.114,3385,3.114,3386,3.114,3387,3.114,3388,3.114,3389,4.738,3390,4.738,3391,3.114,3392,4.738,3393,3.114,3394,3.114,3395,4.738,3396,4.738,3397,4.738,3398,3.114,3399,4.738,3400,4.738,3401,4.738,3402,3.114,3403,4.738,3404,3.114,3405,3.114,3406,5.735,3407,4.738,3408,3.114,3409,3.114,3410,3.114,3411,3.114,3412,3.114,3413,3.114,3414,3.114,3415,4.738,3416,3.114,3417,4.738,3418,3.114,3419,3.114]],["title/controllers/StatusListController.html",[80,1.377,3420,3.432]],["body/controllers/StatusListController.html",[3,0.101,4,0.101,5,0.09,13,0.252,17,0.715,19,0.675,20,0.319,21,0.008,30,0.101,31,0.006,32,0.006,33,0.204,43,1.279,45,0.422,47,1.065,48,3.183,52,0.271,80,1.886,82,2.199,84,1.604,87,1.572,88,0.958,89,3.822,90,2.304,91,1.109,201,1.598,248,2.316,275,1.359,394,3.822,408,3.995,412,1.846,418,3.464,515,4.182,599,3.084,897,4.693,898,4.193,1071,4.877,1252,4.693,1283,2.747,3420,5.775,3421,4.907,3422,5.514,3423,6.22,3424,6.773,3425,5.514,3426,7.64,3427,6.22,3428,7.64,3429,6.22,3430,6.22,3431,6.22,3432,5.514,3433,6.22,3434,6.22]],["title/entities/StatusListEntity.html",[861,1.501,3435,3.229]],["body/entities/StatusListEntity.html",[3,0.084,4,0.084,5,0.075,9,0.67,13,0.21,14,0.982,16,1.612,17,0.782,19,0.658,20,0.323,21,0.008,30,0.084,31,0.006,32,0.006,33,0.17,43,1.723,45,0.568,52,0.223,62,2.352,199,3.179,201,2.072,248,2.303,333,4.013,343,4.013,345,2.581,418,3.91,427,4.587,494,2.918,547,3.696,564,4.84,792,3.803,861,2.666,863,2.494,873,4.013,875,4.371,877,3.862,882,2.741,883,2.172,1029,4.371,1050,2.838,1093,4.208,1167,5.646,1252,5.251,1336,3.918,1503,4.84,1504,5.143,1825,4.596,3262,6.331,3421,5.522,3435,4.84,3436,6.978,3437,4.596,3438,7.425,3439,7.596,3440,5.184,3441,5.184,3442,5.184,3443,5.184,3444,6.032,3445,5.184,3446,6.805]],["title/modules/StatusListModule.html",[100,1.266,503,2.916]],["body/modules/StatusListModule.html",[3,0.098,4,0.098,5,0.087,21,0.008,30,0.098,31,0.006,32,0.006,33,0.198,52,0.297,82,2.656,88,0.932,100,2.278,102,2.471,103,2.827,104,3.001,105,3.001,106,2.748,107,3.816,108,3.816,113,4.733,124,3.725,125,3.001,126,3.001,129,3.147,148,3.719,418,3.147,503,5.939,509,3.57,510,2.471,515,3.313,897,5.336,898,4.08,3420,6.174,3421,3.888,3435,5.343,3447,5.365,3448,5.365,3449,5.365,3450,6.052,3451,6.052,3452,6.659,3453,5.365,3454,4.305,3455,5.365,3456,6.052,3457,6.052]],["title/injectables/StatusListService.html",[689,0.897,897,2.577]],["body/injectables/StatusListService.html",[3,0.046,4,0.046,5,0.115,9,0.369,13,0.22,16,1.452,17,0.842,19,0.694,20,0.282,21,0.008,30,0.046,31,0.004,32,0.004,33,0.094,37,1.314,42,2.357,45,0.497,47,1.253,48,2.271,52,0.269,84,0.931,87,1.557,88,0.441,91,0.97,131,2.222,132,0.867,143,3.207,144,1.687,199,2.073,206,1.708,210,1.168,236,2.617,248,2.601,266,2.851,275,1.6,277,1.336,293,2.421,313,1.721,374,1.346,410,1.187,411,2.174,412,1.819,418,3.822,425,1.683,426,2.308,454,2.015,455,4.261,457,2.506,462,1.5,481,1.565,484,3.156,487,1.928,491,4.821,494,2.217,498,1.376,510,1.168,515,4.144,547,3.018,610,2.57,632,1.463,689,0.877,690,1.059,699,1.565,700,3.068,714,1.512,723,2.519,730,1.418,745,1.757,747,2.617,769,1.565,792,3.187,805,1.376,883,1.198,887,1.565,891,3.523,897,2.519,907,2.727,935,3.712,942,4.131,1040,2.535,1050,2.429,1071,2.617,1096,3.602,1109,1.565,1118,1.623,1134,1.928,1143,2.519,1144,4.632,1164,2.617,1167,3.666,1252,5.133,1323,4.472,1335,2.535,1336,2.162,1360,1.837,1378,6.145,1383,3.493,1391,2.034,1392,2.162,1502,1.463,1530,3.354,1543,3.354,1599,3.354,1625,3.602,1634,3.602,1650,3.156,1654,2.034,2353,2.321,2355,2.162,2679,2.321,2857,3.934,2994,3.602,3175,4.359,3179,2.535,3262,5.722,3421,4.863,3424,3.934,3425,3.934,3435,4.359,3438,2.535,3444,4.821,3452,3.934,3453,2.535,3454,2.034,3455,2.535,3458,2.535,3459,5.438,3460,4.438,3461,4.438,3462,4.438,3463,5.438,3464,5.438,3465,2.86,3466,2.86,3467,2.86,3468,4.438,3469,4.438,3470,2.86,3471,2.86,3472,2.86,3473,4.438,3474,6.128,3475,7.02,3476,4.438,3477,4.438,3478,4.438,3479,2.86,3480,4.438,3481,2.86,3482,4.438,3483,2.86,3484,4.438,3485,2.86,3486,2.86,3487,2.86,3488,2.86,3489,2.86,3490,2.86,3491,2.86,3492,2.86,3493,2.86,3494,2.86,3495,2.86,3496,2.86,3497,2.86,3498,4.438,3499,2.86,3500,2.86,3501,5.438,3502,6.128,3503,4.438,3504,4.438,3505,2.86,3506,4.438,3507,2.86,3508,2.86,3509,2.86,3510,4.438,3511,2.86,3512,6.634,3513,2.86,3514,2.86,3515,2.86,3516,2.86,3517,2.86,3518,2.86,3519,2.86,3520,4.438,3521,4.438,3522,2.86,3523,2.86,3524,2.86]],["title/entities/StatusMapping.html",[861,1.501,3454,3.229]],["body/entities/StatusMapping.html",[3,0.097,4,0.097,5,0.086,13,0.345,14,1.076,19,0.728,20,0.353,21,0.008,30,0.097,31,0.006,32,0.006,33,0.196,43,1.749,45,0.577,52,0.196,201,2.35,236,4.791,547,3.205,861,2.464,863,2.875,869,6.049,877,5.193,882,4.628,883,2.504,1252,4.61,1323,5.476,3421,5.621,3436,7.103,3454,5.301,3525,5.298,3526,8.923,3527,5.977,3528,7.454,3529,5.977,3530,5.977,3531,5.977]],["title/classes/StatusUpdateDto.html",[33,0.149,3175,3.229]],["body/classes/StatusUpdateDto.html",[3,0.095,4,0.095,5,0.085,13,0.238,14,1.064,16,2.002,17,0.971,18,7.491,19,0.69,20,0.311,21,0.008,30,0.095,31,0.006,32,0.006,33,0.242,35,1.508,37,1.782,43,1.657,44,3.205,45,0.546,52,0.192,54,3.464,56,3.256,57,1.819,78,3.898,236,4.752,243,3.17,290,2.333,313,2.674,418,3.647,547,3.17,610,2.794,828,4.97,1059,4.767,1081,5.572,1109,4.625,1164,4.348,1323,5.432,3175,5.243,3178,6.86,3421,5.428,3532,5.206,3533,5.872,3534,5.872,3535,5.872,3536,5.872,3537,5.872]],["title/modules/StorageModule.html",[100,1.266,121,3.061]],["body/modules/StorageModule.html",[3,0.083,4,0.083,5,0.074,20,0.198,21,0.008,30,0.11,31,0.006,32,0.006,33,0.168,45,0.348,52,0.291,84,1.078,87,1.057,88,0.791,91,1.349,100,2.108,102,2.097,107,2.399,108,2.399,121,5.098,129,2.152,130,3.463,131,2.393,132,1.557,137,4.56,138,3.702,164,3.883,171,4.554,189,4.169,200,4.554,201,1.319,204,3.157,205,3.883,206,1.336,290,1.626,349,5.112,351,2.471,426,2.245,1471,3.883,1472,5.94,1569,4.345,1603,5.379,1604,5.379,1704,3.883,2136,6.704,2138,6.704,2153,4.554,2183,5.112,2199,4.169,3082,5.112,3085,5.996,3089,6.444,3099,4.169,3100,4.169,3538,3.883,3539,5.137,3540,5.137,3541,5.137,3542,5.137,3543,6.138,3544,4.554,3545,4.554,3546,4.554,3547,4.554,3548,7.749,3549,4.554,3550,4.554,3551,4.554,3552,5.996,3553,5.996,3554,4.554,3555,5.996,3556,4.554,3557,4.554,3558,5.137,3559,5.137,3560,5.137,3561,5.137,3562,5.137,3563,5.137,3564,7.562,3565,5.137,3566,5.137,3567,5.137,3568,5.137,3569,5.137]],["title/interfaces/TokenPayload.html",[0,1.437,406,2.184]],["body/interfaces/TokenPayload.html",[0,2.056,2,3.221,3,0.105,4,0.105,5,0.094,9,0.839,11,3.324,12,2.056,13,0.263,14,1.133,19,0.688,20,0.25,21,0.008,30,0.127,31,0.006,32,0.006,52,0.213,88,1.001,91,1.159,206,1.55,243,3.373,290,2.056,301,3.556,345,3.32,352,3.035,386,4.38,406,4.054,454,2.95,455,5.623,562,3.992,714,3.435,763,4.014,808,4.173,2014,5.58,3570,5.273,3571,6.954,3572,5.759,3573,5.759,3574,5.759]],["title/classes/TokenRequestDto.html",[33,0.149,2286,3.229]],["body/classes/TokenRequestDto.html",[3,0.093,4,0.093,5,0.083,9,1.081,11,3.711,12,1.901,13,0.232,14,1.047,16,1.355,17,0.833,19,0.72,20,0.333,21,0.008,27,2.818,30,0.093,31,0.006,32,0.006,33,0.238,35,1.47,43,1.722,44,3.175,45,0.568,50,4.498,52,0.238,54,3.375,57,1.772,61,4.659,70,2.751,90,2.119,209,2.961,277,2.673,352,4.238,379,4.889,386,5.368,387,6.463,414,7.058,416,7.058,432,4.889,445,4.893,667,3.375,676,6.529,679,4.645,685,4.645,991,5.955,1004,5.549,2286,5.158,2781,5.073,3575,7.012,3576,5.723,3577,5.723,3578,5.723,3579,5.723,3580,5.723]],["title/classes/TokenResponse.html",[33,0.149,366,3.432]],["body/classes/TokenResponse.html",[3,0.111,4,0.111,5,0.099,13,0.278,14,1.171,19,0.662,20,0.313,21,0.008,30,0.111,31,0.007,32,0.007,33,0.225,35,1.764,45,0.585,59,4.412,366,6.13,419,6.138,421,6.523,422,5.818,547,3.487,551,3.759,2162,5.575,3127,6.089,3128,6.089,3581,7.904]],["title/classes/TokenResponseDto.html",[33,0.149,2294,3.229]],["body/classes/TokenResponseDto.html",[3,0.095,4,0.095,5,0.085,9,1.091,11,4.546,13,0.238,14,1.064,17,0.847,19,0.69,20,0.336,21,0.008,30,0.095,31,0.006,32,0.006,33,0.192,35,1.508,43,1.738,45,0.573,50,4.521,52,0.192,59,5.176,70,2.796,90,2.175,209,3.01,345,3.458,379,4.97,419,5.731,421,6.09,422,5.432,465,5.572,547,3.17,551,3.214,676,6.58,991,6.011,1004,5.592,1024,5.572,2294,5.243,2349,5.984,3575,7.066,3582,7.372,3583,5.872,3584,5.872,3585,5.872,3586,5.872]],["title/classes/UpdateCredentialIssuanceBindingDto.html",[33,0.149,1011,3.229]],["body/classes/UpdateCredentialIssuanceBindingDto.html",[3,0.081,4,0.081,5,0.073,9,1.165,13,0.203,14,0.962,16,2.155,19,0.729,20,0.194,21,0.008,23,2.137,26,2.49,27,1.951,30,0.121,31,0.005,32,0.005,33,0.261,35,1.29,37,1.925,43,1.033,44,3.021,45,0.34,50,4.474,52,0.218,57,1.555,62,1.736,71,1.555,90,1.86,313,2.794,322,3.132,323,3.074,365,1.555,426,2.22,498,4.246,552,4.212,867,2.85,868,2.962,983,3.572,984,5.036,985,3.796,986,4.076,987,5.236,988,4.739,989,4.739,990,4.242,991,3.572,992,5.409,995,6.07,996,6.07,997,6.07,998,6.07,1001,6.728,1004,5.796,1005,4.739,1006,5.409,1007,6.07,1008,5.409,1009,5.409,1010,4.739,1011,4.739,1012,4.076,1013,3.572,1014,3.385,1015,2.749,1016,4.076,1017,4.076,3587,5.022,3588,5.022]],["title/classes/VCT.html",[33,0.149,1027,2.916]],["body/classes/VCT.html",[3,0.09,4,0.09,5,0.081,9,1.015,13,0.226,14,1.029,17,1.068,19,0.768,20,0.348,21,0.008,30,0.116,31,0.006,32,0.006,33,0.258,35,1.431,43,1.833,44,3.581,45,0.604,47,1.346,52,0.234,55,2.986,57,1.725,65,2.164,74,2.911,264,3.423,281,3.049,289,2.602,291,5.322,1027,5.504,1290,6.418,1610,5.593,2742,6.97,2743,6.97,2744,6.97,3589,5.571,3590,5.571,3591,5.571,3592,5.571,3593,5.571,3594,5.571,3595,5.571]],["title/modules/VerifierModule.html",[100,1.266,122,3.229]],["body/modules/VerifierModule.html",[3,0.098,4,0.098,5,0.088,21,0.008,30,0.098,31,0.006,32,0.006,33,0.199,52,0.297,88,0.934,100,2.279,102,2.475,103,2.832,104,3.006,105,3.006,106,2.753,107,2.832,108,2.832,113,4.736,119,5.503,120,5.503,122,6.737,124,3.729,125,3.006,126,3.006,129,3.15,148,3.726,161,4.583,163,4.583,1976,5.752,1982,5.07,1983,3.319,2617,5.752,2618,5.375,2793,5.375,3596,6.063,3597,6.063,3598,6.063]],["title/classes/WebHookAuthConfig.html",[33,0.149,66,3.229]],["body/classes/WebHookAuthConfig.html",[3,0.084,4,0.084,5,0.075,9,0.671,13,0.21,14,0.983,17,0.597,19,0.621,20,0.358,21,0.008,23,1.985,30,0.131,31,0.006,32,0.006,33,0.275,34,5.74,35,1.334,36,3.693,37,2.118,38,6.334,39,3.903,40,5.407,41,4.215,42,2.065,43,1.401,44,3.061,45,0.462,47,0.889,48,3.486,49,3.866,50,3.377,52,0.223,53,2.497,54,3.062,55,3.184,56,3.009,57,1.608,58,2.175,59,3.335,60,4.215,61,3.335,62,2.897,63,4.672,64,6.334,65,3.341,66,5.74,67,5.529,68,4.592,69,5.529,70,2.583,71,2.355,72,3.925,73,3.693,74,2.12,75,2.712,76,2.574,77,3.5,78,2.746,79,2.293,3599,5.192,3600,5.192,3601,5.192]],["title/classes/WebhookConfig.html",[33,0.149,74,1.854]],["body/classes/WebhookConfig.html",[3,0.084,4,0.084,5,0.075,9,0.67,13,0.21,14,0.982,17,0.927,19,0.658,20,0.35,21,0.008,23,1.91,30,0.131,31,0.006,32,0.006,33,0.274,34,5.403,35,1.332,36,3.687,37,2.117,38,6.096,39,3.866,40,5.737,41,4.208,42,2.063,43,1.4,44,3.177,45,0.461,47,0.887,48,3.482,49,3.862,50,3.374,52,0.223,53,2.494,54,3.058,55,3.182,56,3.006,57,1.606,58,2.172,59,3.33,60,4.208,61,3.33,62,2.971,63,4.182,64,5.742,65,3.34,66,5.737,67,4.208,68,3.495,69,4.208,70,1.966,71,1.606,72,5.143,73,4.84,74,2.778,75,3.335,76,3.374,77,4.587,78,3.598,79,3.355,3602,5.184,3603,5.184,3604,5.184]],["title/injectables/WebhookService.html",[689,0.897,1979,2.79]],["body/injectables/WebhookService.html",[3,0.061,4,0.061,5,0.055,9,0.488,13,0.153,17,0.738,20,0.248,21,0.008,30,0.061,31,0.005,32,0.005,33,0.124,40,3.888,45,0.436,47,1.1,49,3.102,52,0.263,64,4.132,65,3.471,78,2.891,84,1.147,87,1.124,88,0.582,91,0.975,183,2.177,206,1.269,210,2.232,242,3.855,275,1.404,278,2.797,290,2.543,293,2.343,303,2.414,323,1.933,365,2.181,410,1.884,411,1.907,412,2.49,425,2.073,426,1.623,457,2.181,462,1.847,562,3.359,610,2.988,632,1.932,637,4.081,638,2.425,689,1.08,690,1.398,745,3.359,853,5.89,940,5.253,944,4.132,948,5.717,1028,2.992,1035,4.846,1104,4.817,1118,3.997,1120,1.932,1525,3.685,1978,4.154,1979,4.328,1983,2.066,1987,2.685,2016,2.32,2139,5.716,2405,4.524,2457,4.857,2458,2.545,2460,5.162,2483,6.653,2516,4.437,2522,4.437,2583,3.347,2589,4.846,2686,5.696,2687,4.846,2807,3.064,2944,3.511,3605,3.347,3606,6.425,3607,6.425,3608,3.775,3609,3.775,3610,3.775,3611,3.775,3612,3.775,3613,5.466,3614,3.775,3615,3.775,3616,3.775,3617,3.775,3618,3.775,3619,7.043,3620,7.043,3621,5.466,3622,3.775,3623,5.466,3624,5.466,3625,5.466,3626,5.466,3627,7.793,3628,5.466,3629,5.466,3630,5.466,3631,5.466,3632,5.466,3633,5.466,3634,5.466,3635,3.775,3636,3.775,3637,3.775,3638,3.775,3639,5.466,3640,3.775]],["title/controllers/WellKnownController.html",[80,1.377,128,3.432]],["body/controllers/WellKnownController.html",[3,0.071,4,0.071,5,0.064,9,0.902,13,0.178,17,0.803,20,0.305,21,0.008,23,1.442,30,0.071,31,0.005,32,0.005,33,0.144,43,1.437,45,0.474,47,1.291,48,2.25,52,0.288,58,3.518,70,1.668,80,2.118,82,1.555,84,1.278,87,1.81,88,0.677,89,2.702,90,1.629,91,1.246,123,5.084,128,5.28,167,4.71,168,5.7,170,3.898,199,2.845,201,1.564,248,1.333,275,1.527,313,1.927,317,2.594,343,3.592,344,2.782,350,3.456,357,4.164,374,1.846,392,4.943,396,3.02,408,2.825,410,1.177,412,2.074,415,3.128,468,3.495,494,2.203,599,2.18,601,7.589,602,4.603,610,3.048,630,2.496,632,2.25,633,4.71,634,3.324,635,2.825,636,3.324,645,3.324,647,1.751,692,6.193,705,3.324,1039,4.164,1127,3.456,1133,3.742,1238,4.844,1283,1.942,1523,2.965,1590,5.161,1932,3.57,1961,3.898,1970,4.71,2287,3.898,2361,4.969,2403,4.943,2442,3.898,3432,5.399,3641,3.898,3642,4.398,3643,6.685,3644,5.399,3645,6.09,3646,4.398,3647,4.398,3648,6.09,3649,4.398,3650,4.398,3651,6.121,3652,4.398,3653,4.398,3654,4.398,3655,5.399,3656,4.398,3657,3.898,3658,3.898,3659,3.898,3660,4.398,3661,4.398,3662,4.398,3663,4.398,3664,3.898,3665,4.398,3666,4.398,3667,4.398,3668,4.398,3669,4.398,3670,4.398,3671,4.398]],["title/injectables/WellKnownService.html",[123,3.061,689,0.897]],["body/injectables/WellKnownService.html",[3,0.061,4,0.061,5,0.055,9,0.488,11,2.799,12,0.991,13,0.153,17,0.81,19,0.525,20,0.328,21,0.008,23,1.523,30,0.061,31,0.005,32,0.005,33,0.124,42,1.659,45,0.478,47,1.206,52,0.279,58,2.693,84,1.148,87,1.753,88,0.582,91,1.257,123,4.751,150,3.068,151,2.069,167,3.688,168,5.652,199,3.641,206,1.081,229,3.35,246,3.688,248,1.659,275,1.54,283,3.891,293,1.83,313,1.731,343,4.156,344,2.178,345,2.075,350,3.105,356,2.323,357,3.188,374,1.659,385,3.726,396,2.712,410,1.885,411,2.092,412,2.22,454,2.484,455,2.428,457,1.991,462,1.849,468,3.283,484,2.688,486,2.688,487,2.548,493,1.874,494,2.821,561,3.105,602,4.135,610,2.817,616,3.688,632,1.934,639,4.673,647,2.806,689,1.081,690,1.4,700,3.449,714,2.893,730,1.874,747,3.792,792,2.919,805,1.818,850,2.857,895,4.563,896,2.688,990,2.799,1024,2.857,1039,4.4,1109,2.069,1127,4.425,1133,3.362,1237,4.135,1238,4.803,1316,4.742,1339,2.688,1342,2.069,1346,3.35,1366,3.068,1382,3.068,1383,2.428,1391,2.688,1392,2.857,1523,2.548,1590,4.595,1940,4.135,2069,4.849,2283,4.135,2288,4.44,2350,3.891,2355,2.857,2361,5.012,2489,3.35,2677,3.35,2679,3.068,2784,4.44,3053,4.849,3057,3.35,3643,4.849,3644,4.849,3651,5.72,3655,3.35,3657,3.35,3658,3.35,3659,3.35,3664,3.35,3672,3.35,3673,5.471,3674,5.471,3675,5.471,3676,3.78,3677,3.78,3678,5.471,3679,3.78,3680,5.471,3681,3.78,3682,5.471,3683,5.471,3684,5.471,3685,5.72,3686,6.429,3687,4.849,3688,5.471,3689,3.78,3690,3.78,3691,3.78,3692,3.78,3693,3.78,3694,3.78,3695,5.471,3696,3.78,3697,3.78,3698,3.78,3699,3.78,3700,3.78]],["title/coverage.html",[3701,5.519]],["body/coverage.html",[0,2.562,1,1.851,5,0.033,6,2.021,7,1.13,8,2.021,12,0.598,20,0.316,21,0.008,22,0.865,23,0.54,27,0.886,31,0.003,32,0.003,33,0.3,34,1.622,36,3.836,58,0.955,63,1.401,66,1.622,74,0.931,80,2.483,81,1.723,83,2.021,106,1.035,123,1.537,128,1.723,146,1.723,149,1.723,151,3.668,153,1.723,157,1.723,160,1.723,162,1.723,164,1.723,168,2.801,262,1.537,263,4.084,264,4.118,279,1.465,280,1.465,281,1.248,291,2.186,296,1.345,323,1.907,335,1.248,336,1.723,337,2.021,345,0.865,352,1.065,357,1.13,358,1.723,361,1.723,366,1.723,388,3.286,397,1.401,404,1.465,406,1.097,426,0.677,468,0.931,504,1.248,505,1.622,506,4.378,515,2.029,519,1.537,522,1.622,524,1.851,525,1.851,549,1.622,550,2.021,551,4.061,568,1.465,569,2.021,582,1.622,593,1.622,594,2.021,597,1.723,598,2.021,609,1.401,610,0.754,633,1.537,635,1.465,637,1.13,639,1.294,643,1.723,666,2.021,667,3.952,689,1.725,691,3.54,700,0.955,701,1.294,702,1.248,735,1.537,737,1.622,739,1.622,804,1.345,813,7.061,843,1.294,861,2.56,862,1.345,864,3.008,880,1.622,884,3.008,893,1.401,895,1.294,897,1.294,899,1.401,960,2.021,961,2.021,964,3.008,968,1.851,983,1.622,984,3.54,985,3.54,1011,1.622,1013,1.622,1018,1.345,1019,2.021,1027,1.465,1041,1.465,1065,1.622,1085,1.723,1094,1.723,1095,3.008,1099,1.537,1104,1.248,1111,1.465,1112,2.021,1113,1.622,1114,3.54,1120,1.167,1164,5.526,1210,2.021,1211,2.021,1215,1.401,1230,2.021,1237,1.723,1238,4.084,1239,2.021,1240,3.008,1260,1.723,1261,2.021,1282,1.401,1289,1.723,1290,3.836,1291,1.851,1292,2.021,1308,2.021,1316,1.345,1403,4.707,1404,1.851,1407,1.537,1408,4.378,1418,1.537,1426,1.723,1432,3.008,1440,1.851,1446,1.723,1454,1.723,1458,1.465,1462,1.851,1464,1.851,1495,1.622,1496,3.008,1498,1.851,1505,1.465,1506,2.499,1523,1.537,1524,2.021,1569,1.465,1570,4.077,1587,1.622,1590,1.401,1595,1.537,1604,1.622,1606,1.723,1607,2.021,1608,3.286,1611,1.537,1643,1.465,1704,1.723,1705,2.021,1744,1.723,1745,3.008,1785,1.723,1786,2.021,1805,2.021,1806,3.008,1826,1.723,1827,2.021,1852,2.021,1918,1.723,1919,2.021,1920,1.851,1921,2.021,1924,1.465,1927,1.401,1970,1.537,1971,2.021,1977,1.401,1978,1.345,1979,1.401,1980,1.851,1981,1.723,2007,2.021,2019,1.851,2034,2.021,2091,3.836,2092,3.008,2104,2.021,2122,3.008,2127,1.851,2135,1.851,2142,2.021,2157,1.723,2158,2.021,2163,2.021,2177,2.381,2183,1.723,2184,2.021,2222,1.723,2223,3.008,2235,1.723,2275,1.622,2276,2.021,2281,1.723,2282,2.021,2286,1.622,2294,1.622,2295,1.537,2305,1.851,2307,1.851,2310,2.021,2361,1.622,2362,2.021,2374,3.008,2389,2.021,2405,1.465,2426,2.021,2459,1.622,2460,1.465,2590,1.723,2591,2.021,2620,2.021,2623,1.401,2631,1.723,2676,2.801,2724,2.021,2725,2.021,2730,1.622,2746,1.723,2747,2.021,2754,1.723,2780,2.801,2785,2.021,2797,2.021,2808,1.537,2889,1.622,2890,2.021,2900,1.851,2913,2.021,3038,2.021,3047,2.021,3082,1.723,3083,2.021,3129,3.801,3162,1.723,3163,2.021,3175,1.622,3178,1.851,3191,2.021,3200,4.22,3201,2.021,3207,2.021,3232,1.851,3274,2.021,3334,1.851,3344,2.021,3374,7.618,3420,1.723,3421,3.811,3422,2.021,3435,1.622,3436,3.008,3437,2.021,3454,1.622,3458,2.021,3525,2.021,3532,2.021,3538,2.801,3543,1.851,3570,3.008,3575,3.008,3581,2.021,3605,2.021,3641,2.021,3672,2.021,3701,2.021,3702,2.28,3703,2.28,3704,3.706,3705,2.28,3706,3.706,3707,3.706,3708,5.934,3709,5.393,3710,6.983,3711,8.989,3712,2.28,3713,2.28,3714,4.683,3715,8.096,3716,6.358,3717,2.28,3718,4.151,3719,3.706,3720,3.286,3721,6.358,3722,5.934,3723,3.286,3724,3.706,3725,2.28,3726,2.021,3727,6.358,3728,2.28,3729,2.28,3730,2.28,3731,2.28,3732,2.28,3733,5.393,3734,5.393,3735,2.021,3736,3.706,3737,6.983,3738,8.349,3739,2.28,3740,5.934,3741,3.706,3742,2.28,3743,4.683,3744,4.683,3745,2.28,3746,3.706,3747,2.28,3748,2.28,3749,7.42,3750,2.021,3751,2.28,3752,2.28,3753,2.28,3754,2.28,3755,2.28,3756,2.021,3757,2.28,3758,2.021,3759,2.28,3760,2.021,3761,2.28,3762,2.28,3763,5.393,3764,2.28,3765,2.28,3766,2.28,3767,3.286,3768,2.28,3769,2.28,3770,1.851,3771,2.021,3772,2.28,3773,2.28,3774,2.28,3775,2.28,3776,2.28]],["title/dependencies.html",[103,2.555,3777,3.349]],["body/dependencies.html",[12,1.43,21,0.008,31,0.006,32,0.006,33,0.23,53,2.623,57,1.689,88,0.84,90,2.02,103,2.547,132,1.653,134,4.426,136,4.834,137,3.676,138,2.985,140,3.216,141,4.783,198,4.122,350,3.095,352,3.285,418,2.284,508,4.122,510,2.227,512,3.503,513,3.676,631,2.985,729,3.676,792,3.193,883,2.284,890,4.122,1039,2.704,1050,4.501,1051,3.676,1078,3.351,1252,3.095,1333,4.122,1334,4.122,1336,4.122,1338,4.122,1522,2.704,1550,3.879,1654,3.879,1741,3.879,1797,4.426,1933,3.503,1983,2.985,2017,4.426,2052,4.834,2055,4.834,2458,3.676,2956,4.834,3089,3.879,3099,5.708,3100,4.426,3101,4.834,3102,4.834,3778,7.033,3779,5.453,3780,7.033,3781,7.784,3782,5.453,3783,5.453,3784,5.453,3785,5.453,3786,5.453,3787,5.453,3788,5.453,3789,5.453,3790,5.453,3791,7.033,3792,8.223,3793,8.223,3794,8.223,3795,5.453,3796,5.453,3797,5.453,3798,5.453,3799,7.784,3800,5.453,3801,5.453,3802,5.453,3803,5.453,3804,5.453,3805,5.453,3806,5.453,3807,5.453,3808,5.453,3809,5.453,3810,5.453,3811,5.453,3812,5.453,3813,5.453,3814,5.453,3815,5.453,3816,5.453,3817,5.453,3818,5.453,3819,5.453,3820,5.453,3821,5.453,3822,5.453,3823,5.453,3824,5.453]],["title/miscellaneous/enumerations.html",[3825,2.322,3826,4.848]],["body/miscellaneous/enumerations.html",[12,1.8,13,0.278,20,0.265,21,0.008,31,0.007,32,0.007,42,2.703,61,4.412,62,2.374,303,3.034,365,2.127,667,4.783,1241,4.221,1502,4.15,1933,5.209,1934,5.467,1940,5.191,2130,4.885,2382,5.191,2780,5.191,2944,4.412,3651,6.583,3685,5.575,3687,6.089,3770,5.575,3825,4.221,3826,6.089,3827,6.089,3828,8.11,3829,6.868,3830,6.868,3831,6.868]],["title/miscellaneous/functions.html",[571,4.439,3825,2.322]],["body/miscellaneous/functions.html",[12,2.276,13,0.282,17,0.801,20,0.269,21,0.007,31,0.007,32,0.007,47,1.193,87,1.433,106,4.067,140,4.11,235,3.955,242,3.814,275,1.523,436,5.656,570,6.177,571,5.656,631,3.814,735,5.514,776,4.956,907,4.282,2177,5.254,2944,4.476,3756,6.177,3758,6.177,3825,4.282,3832,6.968,3833,6.968,3834,6.968]],["title/index.html",[13,0.184,3835,4.025]],["body/index.html",[2,1.811,21,0.008,31,0.004,32,0.004,35,0.938,82,1.291,100,1.018,101,7.052,102,1.491,103,1.706,104,1.811,105,1.811,106,1.658,107,1.706,108,1.706,109,3.238,110,3.238,111,3.238,112,6.533,113,4.729,114,4.932,115,4.484,116,6.314,117,4.484,118,4.484,119,5.324,120,5.265,121,4.25,122,6.222,123,4.25,124,2.646,125,1.811,126,1.811,397,3.874,404,5.11,499,3.238,500,3.238,501,3.238,502,3.238,503,5.43,504,4.354,505,5.658,582,2.598,637,3.945,639,4.515,690,1.353,700,3.332,701,4.515,702,3.451,863,1.757,893,4.889,895,4.515,897,4.515,899,4.889,1109,1.999,1111,4.05,1282,3.874,1316,4.692,1399,5.246,1400,3.238,1401,3.238,1402,3.238,1450,3.238,1451,3.238,1452,3.238,1972,3.238,1973,3.238,1974,3.238,1975,3.238,1976,5.777,1977,4.261,1978,4.09,1979,4.261,2295,5.363,2300,6.013,2301,3.238,2303,3.238,2304,3.238,2611,3.238,2613,3.238,2614,3.238,2617,5.343,2623,4.889,2787,3.238,2788,3.238,2789,3.238,2790,3.238,2791,5.479,2808,5.363,2896,3.238,2897,3.238,2898,3.238,3042,3.238,3043,3.238,3044,3.238,3330,3.238,3332,3.238,3333,3.238,3447,3.238,3448,3.238,3449,3.238,3718,3.238,3750,3.238,3835,3.238,3836,3.652,3837,3.652,3838,3.652,3839,3.652]],["title/modules.html",[102,2.542]],["body/modules.html",[21,0.006,31,0.006,32,0.006,101,4.763,102,2.573,112,4.482,113,3.332,114,4.482,115,4.482,116,4.248,117,4.482,118,4.482,119,3.873,120,3.873,121,4.248,122,4.482,427,5.99,430,7.168,503,4.048,1399,4.482,1976,4.048,2300,4.763,2617,4.048,2791,4.482,3840,9.483,3841,9.483,3842,9.595,3843,8.885]],["title/properties.html",[14,0.79,3777,3.349]],["body/properties.html",[9,0.913,14,1.021,21,0.008,31,0.007,32,0.007,98,6.696,814,4.17,891,3.401,2288,5.739,2470,6.268,3844,7.071,3845,7.071,3846,7.071,3847,7.071,3848,7.071,3849,8.249,3850,7.071,3851,7.071,3852,7.071,3853,7.071,3854,7.071,3855,7.071,3856,7.071]],["title/miscellaneous/typealiases.html",[3825,2.322,3857,5.469]],["body/miscellaneous/typealiases.html",[11,2.928,13,0.232,20,0.358,21,0.008,23,1.355,31,0.006,32,0.006,36,4.07,39,3.119,40,4.07,61,3.676,62,1.978,63,4.457,93,3.676,151,3.97,183,2.279,239,2.397,243,2.461,263,3.676,264,4.457,308,2.461,319,2.598,321,3.676,328,3.132,332,3.858,333,3.375,334,4.07,335,3.97,344,2.279,481,3.132,498,2.753,559,6.116,610,1.892,804,4.278,861,1.892,864,4.645,880,5.158,964,4.645,968,5.887,969,4.325,1104,3.97,1115,2.753,1195,3.517,1241,3.517,1403,4.889,1408,6.795,1418,4.889,1426,5.482,1432,5.887,1440,5.887,1446,4.325,1496,4.645,1498,5.887,1539,4.645,1559,4.645,1570,4.325,1587,5.158,1595,4.889,1603,4.07,2122,4.645,2127,5.887,2128,4.07,2130,4.07,2177,4.659,2459,5.158,2587,3.858,2944,3.676,3089,4.07,3129,4.645,3149,4.645,3159,4.645,3160,3.858,3538,4.325,3543,5.887,3825,3.517,3858,5.723,3859,5.723,3860,5.723,3861,5.723,3862,5.723,3863,7.421,3864,5.723,3865,5.073,3866,5.723,3867,7.253,3868,6.429]],["title/miscellaneous/variables.html",[2338,4.134,3825,2.322]],["body/miscellaneous/variables.html",[11,1.499,12,1.858,13,0.119,19,0.653,20,0.337,21,0.008,22,1.715,23,0.694,31,0.004,32,0.004,42,2.709,47,1.062,62,1.013,70,1.111,71,0.907,84,0.615,91,1.361,100,1.261,146,3.418,149,3.418,151,1.604,153,3.418,157,3.418,160,3.418,162,3.418,164,3.418,179,2.378,185,3.259,189,2.378,201,1.161,206,1.632,209,1.846,212,1.728,242,1.604,243,1.26,246,1.975,277,1.369,293,1.91,301,4.58,305,1.33,312,1.499,345,2.094,377,1.975,406,1.409,417,3.216,426,1.342,436,2.378,454,1.33,457,2.288,462,0.99,463,2.378,464,2.378,506,2.378,522,3.216,523,2.597,524,3.67,525,3.67,526,6.491,527,2.378,528,6.55,529,2.597,530,6.018,531,2.597,532,2.597,533,2.597,534,2.597,535,2.378,536,2.597,537,2.597,538,2.597,539,2.214,540,2.597,541,2.597,542,2.597,562,4.122,610,2.052,633,3.048,714,2.92,726,2.818,754,2.904,805,1.409,1025,1.8,1039,1.453,1068,1.728,1106,2.214,1115,1.409,1120,2.314,1322,1.975,1372,2.597,1373,3.67,1403,3.048,1404,3.67,1405,2.597,1406,2.597,1407,1.975,1413,2.378,1418,1.975,1419,2.597,1423,2.378,1424,2.597,1427,2.597,1428,4.185,1429,4.185,1430,4.482,1446,5.07,1462,2.378,1464,3.67,1465,2.597,1466,2.597,1467,2.597,1468,2.597,1469,5.503,1470,5.946,1471,5.768,1472,6.077,1473,2.597,1474,2.597,1475,2.597,1476,2.597,1477,2.597,1554,2.597,1570,2.214,1590,2.778,1603,2.084,1604,3.216,1605,2.597,1718,2.378,1980,2.378,1999,2.378,2000,2.597,2014,3.927,2019,3.67,2128,3.216,2130,2.084,2135,2.378,2144,2.597,2145,2.597,2146,2.597,2147,4.894,2148,2.214,2149,2.597,2150,2.597,2151,2.597,2152,2.597,2248,1.975,2305,2.378,2307,3.67,2308,2.597,2309,2.378,2338,3.418,2350,2.084,2405,2.904,2484,3.216,2676,4.173,2900,2.378,2901,2.378,2905,2.597,2906,2.597,2907,2.597,2908,4.894,2909,4.894,2910,2.378,2911,2.378,3089,5.255,3160,1.975,3199,2.597,3200,2.084,3232,3.67,3235,4.008,3334,2.378,3336,2.378,3337,2.597,3338,2.597,3339,2.597,3538,2.214,3544,2.597,3545,2.597,3546,2.597,3547,2.597,3548,6.55,3549,2.597,3550,2.597,3551,2.597,3552,2.597,3553,2.597,3554,2.597,3555,2.597,3556,2.597,3557,2.597,3570,2.378,3571,4.894,3572,4.894,3573,4.894,3574,2.597,3685,2.378,3720,2.597,3723,2.597,3726,4.008,3735,2.597,3760,2.597,3767,4.894,3770,2.378,3771,4.008,3825,1.8,3827,2.597,3863,2.597,3865,2.597,3868,2.597,3869,6.208,3870,2.93,3871,2.93,3872,2.93,3873,4.521,3874,2.93,3875,2.93,3876,2.93,3877,2.93,3878,4.521,3879,2.93,3880,2.93,3881,2.93,3882,2.93,3883,5.521,3884,2.93,3885,6.208,3886,2.93,3887,7.089,3888,2.93,3889,4.521,3890,2.93,3891,2.93,3892,4.521,3893,2.93,3894,4.521,3895,2.93,3896,2.93,3897,2.93,3898,2.93,3899,4.521,3900,2.93,3901,2.93,3902,2.93,3903,2.93]]],"invertedIndex":[["",{"_index":21,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1164,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["0.0.1",{"_index":3845,"title":{},"body":{"properties.html":{}}}],["0.14.0",{"_index":3799,"title":{},"body":{"dependencies.html":{}}}],["0.14.1",{"_index":3800,"title":{},"body":{"dependencies.html":{}}}],["0.14.2",{"_index":3805,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":3819,"title":{},"body":{"dependencies.html":{}}}],["0.3.0",{"_index":3792,"title":{},"body":{"dependencies.html":{}}}],["0.3.25",{"_index":3823,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":3495,"title":{},"body":{"injectables/StatusListService.html":{}}}],["0.5.1",{"_index":3804,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":3711,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":3741,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":3742,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":3704,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":3710,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":3714,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":3744,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":3763,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":3764,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":3736,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":1008,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["01'})@isstring",{"_index":1002,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{}}}],["02",{"_index":1012,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["02'})@isstring",{"_index":3587,"title":{},"body":{"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["03t10:30:00z",{"_index":1017,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["08",{"_index":1016,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["1",{"_index":1109,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"injectables/WellKnownService.html":{},"index.html":{}}}],["1.11.0",{"_index":3803,"title":{},"body":{"dependencies.html":{}}}],["1.13.0",{"_index":3798,"title":{},"body":{"dependencies.html":{}}}],["1.5.4",{"_index":3817,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":3738,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":3722,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":3748,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":3751,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":3719,"title":{},"body":{"coverage.html":{}}}],["10)}/${randomuuid()}${safeext",{"_index":1729,"title":{},"body":{"injectables/FilesService.html":{}}}],["10,000",{"_index":3474,"title":{},"body":{"injectables/StatusListService.html":{}}}],["10.5.0",{"_index":3814,"title":{},"body":{"dependencies.html":{}}}],["10/15",{"_index":3728,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":813,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["1000",{"_index":1383,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["10000",{"_index":3488,"title":{},"body":{"injectables/StatusListService.html":{}}}],["11.0.0",{"_index":3791,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":3786,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":3824,"title":{},"body":{"dependencies.html":{}}}],["11.1.6",{"_index":3781,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":3790,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":3837,"title":{},"body":{"index.html":{}}}],["12/14",{"_index":3769,"title":{},"body":{"coverage.html":{}}}],["12/schema",{"_index":3126,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["123e4567",{"_index":995,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["12d3",{"_index":997,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["13.1.1",{"_index":3815,"title":{},"body":{"dependencies.html":{}}}],["14/14",{"_index":3759,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":3839,"title":{},"body":{"index.html":{}}}],["15.1.3",{"_index":3816,"title":{},"body":{"dependencies.html":{}}}],["15/15",{"_index":3773,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":3718,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["18",{"_index":3836,"title":{},"body":{"index.html":{}}}],["18.0.0",{"_index":3806,"title":{},"body":{"dependencies.html":{}}}],["18/20",{"_index":3725,"title":{},"body":{"coverage.html":{}}}],["2.0",{"_index":2288,"title":{},"body":{"controllers/OAuthController.html":{},"injectables/WellKnownService.html":{},"properties.html":{}}}],["2/12",{"_index":3755,"title":{},"body":{"coverage.html":{}}}],["2/2",{"_index":3740,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":3743,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":3732,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{}}}],["201",{"_index":1926,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["2024",{"_index":1001,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["20250714110838",{"_index":3794,"title":{},"body":{"dependencies.html":{}}}],["23",{"_index":3765,"title":{},"body":{"coverage.html":{}}}],["24",{"_index":463,"title":{},"body":{"controllers/AuthController.html":{},"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["24h",{"_index":460,"title":{},"body":{"controllers/AuthController.html":{}}}],["25",{"_index":3750,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["256",{"_index":1373,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"miscellaneous/variables.html":{}}}],["3.0.1",{"_index":3785,"title":{},"body":{"dependencies.html":{}}}],["3.14.3",{"_index":3810,"title":{},"body":{"dependencies.html":{}}}],["3.2.0",{"_index":3808,"title":{},"body":{"dependencies.html":{}}}],["3.3.0",{"_index":3779,"title":{},"body":{"dependencies.html":{}}}],["3.864.0",{"_index":3778,"title":{},"body":{"dependencies.html":{}}}],["3/13",{"_index":3766,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":3749,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":3709,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":3772,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":810,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/FilesService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["33",{"_index":3747,"title":{},"body":{"coverage.html":{}}}],["36/36",{"_index":3707,"title":{},"body":{"coverage.html":{}}}],["3600",{"_index":2349,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/Oid4vciService.html":{},"classes/TokenResponseDto.html":{}}}],["4.0.1",{"_index":3780,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":3782,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":3811,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":3737,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":3734,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":3717,"title":{},"body":{"coverage.html":{}}}],["401",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["42",{"_index":3838,"title":{},"body":{"index.html":{}}}],["426614174000",{"_index":1007,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["426614174000'})@isuuid",{"_index":999,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{}}}],["47",{"_index":3730,"title":{},"body":{"coverage.html":{}}}],["4909",{"_index":1952,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["5",{"_index":2072,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/Oid4vpService.html":{}}}],["5.0.3",{"_index":3789,"title":{},"body":{"dependencies.html":{}}}],["5.1.7",{"_index":3822,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":3727,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":3754,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":3721,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":660,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["6.0.0",{"_index":3788,"title":{},"body":{"dependencies.html":{}}}],["6.0.12",{"_index":3807,"title":{},"body":{"dependencies.html":{}}}],["6.0.2",{"_index":3801,"title":{},"body":{"dependencies.html":{}}}],["6/10",{"_index":3712,"title":{},"body":{"coverage.html":{}}}],["6/6",{"_index":3746,"title":{},"body":{"coverage.html":{}}}],["6/8",{"_index":3757,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":2676,"title":{},"body":{"injectables/Oid4vpService.html":{},"modules/SessionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["66",{"_index":3716,"title":{},"body":{"coverage.html":{}}}],["7.8.2",{"_index":3820,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":3745,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":3708,"title":{},"body":{"coverage.html":{}}}],["8.16.3",{"_index":3813,"title":{},"body":{"dependencies.html":{}}}],["8/12",{"_index":3739,"title":{},"body":{"coverage.html":{}}}],["8/8",{"_index":3752,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":3733,"title":{},"body":{"coverage.html":{}}}],["81",{"_index":3761,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":3753,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":3768,"title":{},"body":{"coverage.html":{}}}],["86400",{"_index":423,"title":{},"body":{"controllers/AuthController.html":{}}}],["8a7a",{"_index":1953,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["8ad6",{"_index":1951,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["9/10",{"_index":3775,"title":{},"body":{"coverage.html":{}}}],["9/11",{"_index":3762,"title":{},"body":{"coverage.html":{}}}],["9/19",{"_index":3731,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":3774,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":3724,"title":{},"body":{"coverage.html":{}}}],["_d",{"_index":1668,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["_ext",{"_index":1672,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["_key_ops",{"_index":1670,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["a128gcm",{"_index":2673,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["a456",{"_index":998,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["a739c2c412c0",{"_index":1954,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["abstract",{"_index":2164,"title":{},"body":{"classes/KeyService.html":{}}}],["accept",{"_index":1961,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/WellKnownController.html":{}}}],["accepts",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{}}}],["access",{"_index":11,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthorizeController.html":{},"entities/CertEntity.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"injectables/WellKnownService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["access_token",{"_index":419,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{}}}],["accesscert",{"_index":2682,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscert?.length",{"_index":2691,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscertificatecontrollerregister",{"_index":2959,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["accesscertificateid",{"_index":2891,"title":{},"body":{"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{}}}],["accesscertificateresponse",{"_index":1,"title":{"interfaces/AccessCertificateResponse.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"coverage.html":{}}}],["accessing",{"_index":2928,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["accesskeyid",{"_index":3565,"title":{},"body":{"modules/StorageModule.html":{}}}],["accesstoken",{"_index":2346,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/RegistrarService.html":{}}}],["accesstokenrequest",{"_index":775,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["accordingly",{"_index":953,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["account",{"_index":2534,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["acl",{"_index":1591,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/S3FileStorage.html":{}}}],["acl=public",{"_index":1600,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["action",{"_index":2642,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["active",{"_index":3149,"title":{},"body":{"entities/Session.html":{},"injectables/SessionService.html":{},"miscellaneous/typealiases.html":{}}}],["actual",{"_index":492,"title":{},"body":{"controllers/AuthController.html":{}}}],["adapters/filesystem",{"_index":2141,"title":{},"body":{"modules/KeyModule.html":{}}}],["adapters/local.storage",{"_index":3540,"title":{},"body":{"modules/StorageModule.html":{}}}],["adapters/s3.storage",{"_index":3541,"title":{},"body":{"modules/StorageModule.html":{}}}],["adapters/vault",{"_index":2143,"title":{},"body":{"modules/KeyModule.html":{}}}],["add",{"_index":1342,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/MetricModule.html":{},"injectables/OAuthService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/WellKnownService.html":{}}}],["add(issuer_state",{"_index":3353,"title":{},"body":{"injectables/SessionService.html":{}}}],["addaccesscertificate",{"_index":2920,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addaccesscertificate(tenantid",{"_index":2930,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addclient",{"_index":2311,"title":{},"body":{"injectables/OAuthService.html":{}}}],["addclient(clientid",{"_index":2319,"title":{},"body":{"injectables/OAuthService.html":{}}}],["adding",{"_index":2916,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["additional",{"_index":1216,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/SessionLogContext.html":{}}}],["additionaldata",{"_index":3291,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["addkey",{"_index":2105,"title":{},"body":{"controllers/KeyController.html":{}}}],["addkey(token",{"_index":2108,"title":{},"body":{"controllers/KeyController.html":{}}}],["addregistrationcertificate",{"_index":2921,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addregistrationcertificate(req",{"_index":2933,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addrp",{"_index":2922,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addrp(name",{"_index":2935,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["adds",{"_index":2937,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["against",{"_index":1181,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["agent",{"_index":244,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["alg",{"_index":805,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["algorithm",{"_index":1431,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/RegistrarService.html":{}}}],["algorithms",{"_index":1412,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["alias",{"_index":3715,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":3858,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":2465,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["allow",{"_index":1088,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["allowedauthenticationschemes",{"_index":2536,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["allowedsigningalgs",{"_index":790,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["allowing",{"_index":950,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["allowinsecureurls",{"_index":2005,"title":{},"body":{"modules/IssuerModule.html":{}}}],["allows",{"_index":2292,"title":{},"body":{"controllers/OAuthController.html":{}}}],["alpha",{"_index":3793,"title":{},"body":{"dependencies.html":{}}}],["already",{"_index":1142,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["always",{"_index":1518,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["amount",{"_index":1107,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{}}}],["any).azp",{"_index":2089,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["any).issuer",{"_index":2087,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["any).method",{"_index":857,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/IssuanceService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["apache",{"_index":3852,"title":{},"body":{"properties.html":{}}}],["api",{"_index":38,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/RegistrarService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["api:read",{"_index":2766,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["api:write",{"_index":2767,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["apibody",{"_index":391,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apibody({description",{"_index":619,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["apiexcludecontroller",{"_index":89,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["apiexcludecontroller(process.env.swagger_all",{"_index":408,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["apiheader",{"_index":3661,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apihideproperty",{"_index":1821,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["apihideproperty()@column('varchar",{"_index":1819,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["apikey",{"_index":64,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{}}}],["apikeyconfig",{"_index":34,"title":{"classes/ApiKeyConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["apioperation",{"_index":392,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OAuthController.html":{},"controllers/WellKnownController.html":{}}}],["apioperation({summary",{"_index":2287,"title":{},"body":{"controllers/OAuthController.html":{},"controllers/WellKnownController.html":{}}}],["apiparam",{"_index":2403,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{}}}],["apiproduces",{"_index":1932,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/WellKnownController.html":{}}}],["apiproduces('application/json",{"_index":1943,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiproduces(mediatype.application_json",{"_index":3663,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apiproperty",{"_index":1004,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["apiproperty({description",{"_index":991,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["apiproperty({example",{"_index":2381,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["apiresponse",{"_index":393,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiresponse({description",{"_index":1925,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apisecurity",{"_index":1273,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["apisecurity('oauth2",{"_index":1279,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["apitags",{"_index":394,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/OAuthController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{}}}],["apitags('authentication",{"_index":409,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('issuer",{"_index":1277,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{}}}],["apitags('oauth",{"_index":2297,"title":{},"body":{"controllers/OAuthController.html":{}}}],["apitags('presentation",{"_index":2765,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["apitags('session",{"_index":3182,"title":{},"body":{"controllers/SessionController.html":{}}}],["apitags('status",{"_index":3430,"title":{},"body":{"controllers/StatusListController.html":{}}}],["app/app.controller",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":81,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":2944,"title":{},"body":{"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["application/json",{"_index":1940,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{}}}],["application/jwk",{"_index":3648,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["application/jwt",{"_index":3687,"title":{},"body":{"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{}}}],["application/statuslist+jwt",{"_index":3428,"title":{},"body":{"controllers/StatusListController.html":{}}}],["application_json",{"_index":3830,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["application_jwt",{"_index":3831,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["applications",{"_index":383,"title":{},"body":{"controllers/AuthController.html":{}}}],["applied",{"_index":1073,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["appmodule",{"_index":101,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["args",{"_index":276,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["args.object",{"_index":295,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["array",{"_index":1134,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{}}}],["array(size",{"_index":3491,"title":{},"body":{"injectables/StatusListService.html":{}}}],["array(size).fill(0).map",{"_index":3489,"title":{},"body":{"injectables/StatusListService.html":{}}}],["array.isarray(dcql_query",{"_index":2657,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["associated",{"_index":1101,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{}}}],["assume",{"_index":827,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["async",{"_index":293,"title":{},"body":{"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/LocalFileStorage.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["att",{"_index":2882,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attestation",{"_index":816,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["attestations",{"_index":2833,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attestations.map((att",{"_index":2883,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attribute",{"_index":1217,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["aud",{"_index":485,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["audience",{"_index":461,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["auth",{"_index":79,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["auth.controller",{"_index":517,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":518,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.module",{"_index":1748,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["auth/auth.guard",{"_index":1274,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["auth/auth.module",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/token.decorator",{"_index":1275,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["auth_client_id",{"_index":541,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["auth_client_secret",{"_index":539,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"miscellaneous/variables.html":{}}}],["auth_queries",{"_index":659,"title":{},"body":{"controllers/AuthorizeController.html":{},"entities/Session.html":{}}}],["auth_session",{"_index":668,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["auth_validation_schema",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authconfig",{"_index":63,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["authconfigvalidator",{"_index":262,"title":{"classes/AuthConfigValidator.html":{}},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authcontroller",{"_index":336,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":384,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["authenticate(req",{"_index":2039,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authenticating",{"_index":2952,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["authentication",{"_index":39,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/typealiases.html":{}}}],["authentication.'})@apiresponse({status",{"_index":381,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticationconfig",{"_index":335,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["authenticationconfigdto",{"_index":296,"title":{"classes/AuthenticationConfigDto.html":{}},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authenticationconfighelper",{"_index":568,"title":{"classes/AuthenticationConfigHelper.html":{}},"body":{"classes/AuthenticationConfigHelper.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["authenticationconfighelper.getpresentationconfig(authconfig",{"_index":844,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authenticationconfighelper.isauthurlauth",{"_index":2477,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["authenticationconfighelper.isauthurlauth(authconfig",{"_index":848,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authenticationconfighelper.isnoneauth(authconfig",{"_index":854,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authenticationconfighelper.ispresentationduringissuanceauth",{"_index":842,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authenticationurlconfig",{"_index":279,"title":{"classes/AuthenticationUrlConfig.html":{}},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authfixed",{"_index":1948,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["authguard",{"_index":2018,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":2008,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authheader",{"_index":437,"title":{},"body":{"controllers/AuthController.html":{}}}],["authheader.startswith('basic",{"_index":439,"title":{},"body":{"controllers/AuthController.html":{}}}],["authheader.substring(6",{"_index":441,"title":{},"body":{"controllers/AuthController.html":{}}}],["authmodule",{"_index":112,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"index.html":{},"modules.html":{}}}],["author",{"_index":3854,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":58,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["authorization_challenge_endpoint",{"_index":760,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorization_code",{"_index":778,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["authorization_encrypted_response_alg",{"_index":2671,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_encrypted_response_enc",{"_index":2672,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_endpoint",{"_index":750,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorization_request",{"_index":2640,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerService.html":{}}}],["authorization_server",{"_index":1242,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["authorization_servers",{"_index":1243,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["authorizationchallengeendpoint",{"_index":605,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationchallengeendpoint(res",{"_index":608,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{}}}],["authorizationcodegrantidentifier",{"_index":724,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationresponse",{"_index":593,"title":{"classes/AuthorizationResponse.html":{}},"body":{"classes/AuthorizationResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"coverage.html":{}}}],["authorizationserver",{"_index":742,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata",{"_index":707,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata.dpop_signing_alg_values_supported",{"_index":791,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata.issuer",{"_index":811,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservers",{"_index":2502,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["authorize",{"_index":606,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize(@query",{"_index":648,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize(queries",{"_index":614,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize.service",{"_index":640,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize/authorize.controller",{"_index":1990,"title":{},"body":{"modules/IssuerModule.html":{}}}],["authorize/authorize.service",{"_index":1991,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{}}}],["authorizecontroller",{"_index":597,"title":{"controllers/AuthorizeController.html":{}},"body":{"controllers/AuthorizeController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["authorized",{"_index":306,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["authorized_code",{"_index":781,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizequeries",{"_index":609,"title":{"classes/AuthorizeQueries.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{},"coverage.html":{}}}],["authorizequeries})@post('par",{"_index":621,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorizeservice",{"_index":639,"title":{"injectables/AuthorizeService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["authresponse",{"_index":549,"title":{"interfaces/AuthResponse.html":{}},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"coverage.html":{}}}],["authserver",{"_index":744,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/.well",{"_index":752,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize",{"_index":751,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/challenge",{"_index":761,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/par",{"_index":757,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/token",{"_index":749,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authtype",{"_index":3621,"title":{},"body":{"injectables/WebhookService.html":{}}}],["authz",{"_index":2680,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authzmetadata",{"_index":692,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/WellKnownController.html":{}}}],["authzmetadata(session",{"_index":705,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/WellKnownController.html":{}}}],["authzservice",{"_index":2434,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["autoloadentities",{"_index":1482,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["autologging",{"_index":221,"title":{},"body":{"modules/AppModule.html":{}}}],["automatic",{"_index":2250,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["available",{"_index":427,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/OAuthService.html":{},"entities/StatusListEntity.html":{},"modules.html":{}}}],["avoid",{"_index":3265,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["await",{"_index":457,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/LocalFileStorage.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["aws",{"_index":3099,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"dependencies.html":{}}}],["axios",{"_index":3802,"title":{},"body":{"dependencies.html":{}}}],["back",{"_index":449,"title":{},"body":{"controllers/AuthController.html":{}}}],["badgateway/oauth2",{"_index":2956,"title":{},"body":{"injectables/RegistrarService.html":{},"dependencies.html":{}}}],["badrequestexception",{"_index":885,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vciService.html":{}}}],["badrequestexception('nonce",{"_index":2548,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["badrequestexception('session",{"_index":2540,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["base",{"_index":318,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["base64",{"_index":443,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/FileStorage.html":{},"injectables/ResolverService.html":{}}}],["base64credentials",{"_index":440,"title":{},"body":{"controllers/AuthController.html":{}}}],["base64url",{"_index":3898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":1322,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["basedir",{"_index":2187,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["baseurl",{"_index":2977,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["basic",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{}}}],["batch",{"_index":1108,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{}}}],["batch_credential_issuance",{"_index":1244,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["batch_size",{"_index":1110,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/Oid4vciService.html":{}}}],["batches",{"_index":2578,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["bearer",{"_index":59,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/OAuthService.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["before",{"_index":824,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["being",{"_index":1032,"title":{},"body":{"entities/CredentialConfig.html":{},"interfaces/SessionLogContext.html":{}}}],["belongs",{"_index":3446,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["better",{"_index":3625,"title":{},"body":{"injectables/WebhookService.html":{}}}],["between",{"_index":557,"title":{},"body":{"interfaces/AuthResponse.html":{},"entities/CredentialIssuanceBinding.html":{},"injectables/IssuanceService.html":{}}}],["binary",{"_index":1942,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["binding",{"_index":987,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["binding.credentialconfig",{"_index":1043,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["binding.credentialconfigid",{"_index":1351,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["binding.dto.ts",{"_index":985,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"coverage.html":{}}}],["binding.dto.ts:13",{"_index":994,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{}}}],["binding.dto.ts:20",{"_index":1000,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{}}}],["binding.dto.ts:28",{"_index":1003,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{}}}],["binding.dto.ts:40",{"_index":3588,"title":{},"body":{"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["binding.dto.ts:51",{"_index":1234,"title":{},"body":{"classes/CredentialIssuanceBindingResponseDto.html":{}}}],["binding.dto.ts:57",{"_index":1233,"title":{},"body":{"classes/CredentialIssuanceBindingResponseDto.html":{}}}],["binding.dto.ts:63",{"_index":1235,"title":{},"body":{"classes/CredentialIssuanceBindingResponseDto.html":{}}}],["binding.dto.ts:69",{"_index":1236,"title":{},"body":{"classes/CredentialIssuanceBindingResponseDto.html":{}}}],["binding.dto.ts:75",{"_index":1232,"title":{},"body":{"classes/CredentialIssuanceBindingResponseDto.html":{}}}],["binding.entity",{"_index":1087,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["binding.entity.ts",{"_index":1211,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"coverage.html":{}}}],["binding.entity.ts:13",{"_index":1223,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["binding.entity.ts:16",{"_index":1226,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["binding.entity.ts:25",{"_index":1222,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["binding.entity.ts:34",{"_index":1225,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["binding.entity.ts:40",{"_index":1219,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["binding.issuanceconfig",{"_index":1812,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["binding?.credentialconfig?.keyid",{"_index":1365,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["bindings",{"_index":1046,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{}}}],["bits",{"_index":3438,"title":{},"body":{"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["bitsperstatus",{"_index":3439,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["body",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/CredentialsController.html":{},"interfaces/FileStorage.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["body.auth_session",{"_index":825,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["body.client_id",{"_index":450,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.client_secret",{"_index":451,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.code",{"_index":779,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["body.credentialconfigurationids",{"_index":2509,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.event",{"_index":2575,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.grant_type",{"_index":431,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.issuanceid",{"_index":2508,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.issuer_state",{"_index":818,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["body.notification_id",{"_index":2573,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.privatekey",{"_index":1665,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["body.requestid",{"_index":2771,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["body.response",{"_index":2704,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["body.response_type",{"_index":1963,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["body.session",{"_index":2513,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["body.webhook",{"_index":2772,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["body['pre",{"_index":780,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["boolean",{"_index":28,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CredentialConfig.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["bootstrap",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["both",{"_index":655,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["bound",{"_index":1091,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/RegistrarService.html":{}}}],["browse",{"_index":3842,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3840,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":3086,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["buffer",{"_index":1584,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/IssuerManagementController.html":{},"classes/LocalFileStorage.html":{},"controllers/PresentationManagementController.html":{},"classes/S3FileStorage.html":{}}}],["buffer.from",{"_index":442,"title":{},"body":{"controllers/AuthController.html":{}}}],["buffer.from(signature).tostring('base64url",{"_index":3895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buffer.from(signaturebase64url",{"_index":3897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bugs",{"_index":3848,"title":{},"body":{"properties.html":{}}}],["builder/querypartialentity",{"_index":3386,"title":{},"body":{"injectables/SessionService.html":{}}}],["bundle",{"_index":2581,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["c.id",{"_index":922,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["c_nonce",{"_index":2523,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["cache",{"_index":2069,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/WellKnownService.html":{}}}],["call",{"_index":2982,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["callback",{"_index":558,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/KeyService.html":{},"injectables/SessionService.html":{}}}],["callbacks",{"_index":311,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["called",{"_index":2943,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["callhandler",{"_index":3214,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["canactivate",{"_index":2009,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/SessionGuard.html":{}}}],["canactivate(context",{"_index":2013,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/SessionGuard.html":{}}}],["canonical",{"_index":1596,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["case",{"_index":1448,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"injectables/Oid4vciService.html":{}}}],["catch",{"_index":447,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"classes/S3FileStorage.html":{}}}],["catcherror",{"_index":3229,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["catcherror((error",{"_index":3258,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["cb",{"_index":2074,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cb(err",{"_index":2078,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cert",{"_index":1187,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["cert.crt",{"_index":2181,"title":{},"body":{"classes/KeyService.html":{}}}],["cert.id",{"_index":1692,"title":{},"body":{"classes/FileSystemKeyService.html":{},"injectables/RegistrarService.html":{}}}],["cert.publickey.export",{"_index":3069,"title":{},"body":{"injectables/ResolverService.html":{}}}],["cert.revoked",{"_index":3028,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["cert.subjectaltname?.includes(new",{"_index":3066,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certentity",{"_index":862,"title":{"entities/CertEntity.html":{}},"body":{"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"modules/CryptoModule.html":{},"classes/FileSystemKeyService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"coverage.html":{}}}],["certificate",{"_index":7,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"injectables/CredentialConfigService.html":{},"classes/FileSystemKeyService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"coverage.html":{}}}],["certificatechainlength",{"_index":2690,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["certificates",{"_index":866,"title":{},"body":{"entities/CertEntity.html":{},"injectables/RegistrarService.html":{}}}],["certificatetype",{"_index":880,"title":{},"body":{"entities/CertEntity.html":{},"classes/FileSystemKeyService.html":{},"classes/KeyService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["certrepository",{"_index":1619,"title":{},"body":{"classes/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{}}}],["certs",{"_index":3025,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["certs?.length",{"_index":3030,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["certs[0",{"_index":3065,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certs[0].jwt",{"_index":3031,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["cfg",{"_index":3558,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get",{"_index":3564,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_bucket",{"_index":3567,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_endpoint",{"_index":3562,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_public_base_url",{"_index":3568,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_region",{"_index":3561,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"storage_driver",{"_index":3559,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.getorthrow(\"local_storage_dir",{"_index":3569,"title":{},"body":{"modules/StorageModule.html":{}}}],["chain",{"_index":3061,"title":{},"body":{"injectables/ResolverService.html":{}}}],["challenge",{"_index":613,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["check",{"_index":211,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthenticationConfigHelper.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["checked",{"_index":832,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["checking",{"_index":3473,"title":{},"body":{"injectables/StatusListService.html":{}}}],["checks",{"_index":1791,"title":{},"body":{"controllers/HealthController.html":{},"injectables/RegistrarService.html":{}}}],["checksum",{"_index":1592,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{}}}],["checksumsha256",{"_index":3109,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["checl",{"_index":3070,"title":{},"body":{"injectables/ResolverService.html":{}}}],["child",{"_index":1894,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["children",{"_index":1891,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["claims",{"_index":1020,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["claims_supported",{"_index":483,"title":{},"body":{"controllers/AuthController.html":{}}}],["class",{"_index":33,"title":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/FileSystemKeyService.html":{},"classes/IssuanceDto.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":35,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/FileSystemKeyService.html":{},"classes/IssuanceDto.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"index.html":{}}}],["clear",{"_index":2719,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client",{"_index":352,"title":{"interfaces/Client.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/JwtStrategy.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["client.id",{"_index":456,"title":{},"body":{"controllers/AuthController.html":{}}}],["client.secret",{"_index":923,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["client.service",{"_index":398,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["client_credentials",{"_index":414,"title":{},"body":{"controllers/AuthController.html":{},"classes/TokenRequestDto.html":{}}}],["client_credentials'})@isstring()@isin(['client_credentials",{"_index":3579,"title":{},"body":{"classes/TokenRequestDto.html":{}}}],["client_id",{"_index":386,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{}}}],["client_metadata",{"_index":2665,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_name",{"_index":2674,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_secret",{"_index":387,"title":{},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{},"classes/TokenRequestDto.html":{}}}],["client_secret_basic",{"_index":477,"title":{},"body":{"controllers/AuthController.html":{}}}],["client_secret_post",{"_index":478,"title":{},"body":{"controllers/AuthController.html":{}}}],["clientcredentialsdto",{"_index":361,"title":{"classes/ClientCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{},"coverage.html":{}}}],["cliententry",{"_index":519,"title":{"entities/ClientEntry.html":{}},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"coverage.html":{}}}],["clientid",{"_index":433,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/OAuthService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{}}}],["clientrepository",{"_index":904,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["clients",{"_index":548,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{}}}],["clientsecret",{"_index":434,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/OAuthService.html":{},"injectables/RegistrarService.html":{}}}],["clientservice",{"_index":397,"title":{"injectables/ClientService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{}}}],["clientstatus",{"_index":968,"title":{},"body":{"entities/ClientEntry.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["cloudfront",{"_index":3103,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["cluster_appmodule",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_providers",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_authmodule",{"_index":499,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_exports",{"_index":502,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_imports",{"_index":501,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_providers",{"_index":500,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_cryptoimplementatationmodule",{"_index":1400,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"index.html":{}}}],["cluster_cryptoimplementatationmodule_exports",{"_index":1401,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"index.html":{}}}],["cluster_cryptoimplementatationmodule_providers",{"_index":1402,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"index.html":{}}}],["cluster_cryptomodule",{"_index":1450,"title":{},"body":{"modules/CryptoModule.html":{},"index.html":{}}}],["cluster_cryptomodule_exports",{"_index":1451,"title":{},"body":{"modules/CryptoModule.html":{},"index.html":{}}}],["cluster_cryptomodule_providers",{"_index":1452,"title":{},"body":{"modules/CryptoModule.html":{},"index.html":{}}}],["cluster_issuermodule",{"_index":1972,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_issuermodule_exports",{"_index":1973,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_issuermodule_imports",{"_index":1974,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_issuermodule_providers",{"_index":1975,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_oauthmodule",{"_index":2301,"title":{},"body":{"modules/OAuthModule.html":{},"index.html":{}}}],["cluster_oauthmodule_exports",{"_index":2303,"title":{},"body":{"modules/OAuthModule.html":{},"index.html":{}}}],["cluster_oauthmodule_imports",{"_index":2302,"title":{},"body":{"modules/OAuthModule.html":{}}}],["cluster_oauthmodule_providers",{"_index":2304,"title":{},"body":{"modules/OAuthModule.html":{},"index.html":{}}}],["cluster_oid4vpmodule",{"_index":2611,"title":{},"body":{"modules/Oid4vpModule.html":{},"index.html":{}}}],["cluster_oid4vpmodule_exports",{"_index":2613,"title":{},"body":{"modules/Oid4vpModule.html":{},"index.html":{}}}],["cluster_oid4vpmodule_imports",{"_index":2612,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["cluster_oid4vpmodule_providers",{"_index":2614,"title":{},"body":{"modules/Oid4vpModule.html":{},"index.html":{}}}],["cluster_presentationsmodule",{"_index":2787,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_presentationsmodule_exports",{"_index":2789,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_presentationsmodule_imports",{"_index":2790,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_presentationsmodule_providers",{"_index":2788,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_registrarmodule",{"_index":2896,"title":{},"body":{"modules/RegistrarModule.html":{},"index.html":{}}}],["cluster_registrarmodule_exports",{"_index":2898,"title":{},"body":{"modules/RegistrarModule.html":{},"index.html":{}}}],["cluster_registrarmodule_imports",{"_index":2899,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["cluster_registrarmodule_providers",{"_index":2897,"title":{},"body":{"modules/RegistrarModule.html":{},"index.html":{}}}],["cluster_resolvermodule",{"_index":3042,"title":{},"body":{"modules/ResolverModule.html":{},"index.html":{}}}],["cluster_resolvermodule_exports",{"_index":3043,"title":{},"body":{"modules/ResolverModule.html":{},"index.html":{}}}],["cluster_resolvermodule_providers",{"_index":3044,"title":{},"body":{"modules/ResolverModule.html":{},"index.html":{}}}],["cluster_sessionmodule",{"_index":3330,"title":{},"body":{"modules/SessionModule.html":{},"index.html":{}}}],["cluster_sessionmodule_exports",{"_index":3333,"title":{},"body":{"modules/SessionModule.html":{},"index.html":{}}}],["cluster_sessionmodule_imports",{"_index":3331,"title":{},"body":{"modules/SessionModule.html":{}}}],["cluster_sessionmodule_providers",{"_index":3332,"title":{},"body":{"modules/SessionModule.html":{},"index.html":{}}}],["cluster_statuslistmodule",{"_index":3447,"title":{},"body":{"modules/StatusListModule.html":{},"index.html":{}}}],["cluster_statuslistmodule_exports",{"_index":3448,"title":{},"body":{"modules/StatusListModule.html":{},"index.html":{}}}],["cluster_statuslistmodule_imports",{"_index":3450,"title":{},"body":{"modules/StatusListModule.html":{}}}],["cluster_statuslistmodule_providers",{"_index":3449,"title":{},"body":{"modules/StatusListModule.html":{},"index.html":{}}}],["cluster_verifiermodule",{"_index":3596,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cluster_verifiermodule_imports",{"_index":3597,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cnf",{"_index":1387,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{}}}],["cnonce",{"_index":801,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["cnonceexpiresin",{"_index":812,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["cnonceexpiresinseconds",{"_index":2567,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["code",{"_index":307,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"entities/Session.html":{}}}],["code_challenge",{"_index":669,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_method",{"_index":670,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_methods_supported",{"_index":758,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["colorize",{"_index":225,"title":{},"body":{"modules/AppModule.html":{}}}],["column",{"_index":882,"title":{},"body":{"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/DisplayEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{}}}],["column(\"int",{"_index":1825,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/StatusListEntity.html":{}}}],["column(\"json",{"_index":1504,"title":{},"body":{"entities/DisplayEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/StatusListEntity.html":{}}}],["column(\"varchar",{"_index":1503,"title":{},"body":{"entities/DisplayEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/RegistrarEntity.html":{},"entities/StatusListEntity.html":{}}}],["column('boolean",{"_index":1092,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["column('int",{"_index":1093,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"entities/StatusListEntity.html":{}}}],["column('json",{"_index":1029,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/DisplayEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{}}}],["column('json')@isobject",{"_index":1037,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/PresentationConfig.html":{}}}],["column('varchar",{"_index":873,"title":{},"body":{"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"entities/CredentialConfig.html":{},"entities/DisplayEntity.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{}}}],["column({type",{"_index":869,"title":{},"body":{"entities/CertEntity.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"entities/Session.html":{},"entities/StatusMapping.html":{}}}],["commonoptions",{"_index":1480,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["comparison",{"_index":3034,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["complete",{"_index":2817,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["completed",{"_index":2587,"title":{},"body":{"injectables/Oid4vciService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"miscellaneous/typealiases.html":{}}}],["completion",{"_index":3300,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["components",{"_index":1697,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["computed",{"_index":3111,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["condition",{"_index":3367,"title":{},"body":{"injectables/SessionService.html":{}}}],["config",{"_index":71,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"controllers/CredentialsController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/variables.html":{}}}],["config.authenticationconfig",{"_index":841,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["config.config",{"_index":589,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.credentialconfigid",{"_index":2511,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["config.dto",{"_index":292,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["config.dto.ts",{"_index":264,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/VCT.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["config.dto.ts:10",{"_index":3589,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:113",{"_index":567,"title":{},"body":{"classes/AuthenticationConfigDto.html":{}}}],["config.dto.ts:12",{"_index":3590,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:123",{"_index":566,"title":{},"body":{"classes/AuthenticationConfigDto.html":{}}}],["config.dto.ts:14",{"_index":3591,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:16",{"_index":3593,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:18",{"_index":3594,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:21",{"_index":285,"title":{},"body":{"classes/AuthConfigValidator.html":{}}}],["config.dto.ts:23",{"_index":2740,"title":{},"body":{"classes/PresentationDuringIssuance.html":{}}}],["config.dto.ts:25",{"_index":2741,"title":{},"body":{"classes/PresentationDuringIssuance.html":{}}}],["config.dto.ts:46",{"_index":274,"title":{},"body":{"classes/AuthConfigValidator.html":{}}}],["config.dto.ts:6",{"_index":3595,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:75",{"_index":590,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{}}}],["config.dto.ts:8",{"_index":3592,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:84",{"_index":592,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{}}}],["config.dto.ts:98",{"_index":2745,"title":{},"body":{"classes/PresentationDuringIssuanceConfig.html":{}}}],["config.entity",{"_index":1228,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["config.entity.ts",{"_index":1806,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"coverage.html":{}}}],["config.entity.ts:17",{"_index":1817,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["config.entity.ts:24",{"_index":1820,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:25",{"_index":2735,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:33",{"_index":1813,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["config.entity.ts:40",{"_index":2732,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:44",{"_index":1808,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:47",{"_index":2738,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:50",{"_index":1810,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:54",{"_index":2727,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:56",{"_index":1818,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:63",{"_index":1809,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.helper",{"_index":733,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["config.helper.ts",{"_index":569,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{},"coverage.html":{}}}],["config.helper.ts:14",{"_index":584,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.helper.ts:23",{"_index":581,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.helper.ts:32",{"_index":586,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.helper.ts:44",{"_index":578,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.key",{"_index":1196,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.keyid",{"_index":1186,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.method",{"_index":587,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.presentation",{"_index":304,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["config.service",{"_index":1276,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["config.service.ts",{"_index":1114,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["config.service.ts:132",{"_index":1132,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:145",{"_index":1136,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:159",{"_index":1140,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:17",{"_index":1122,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/LoggerConfigService.html":{}}}],["config.service.ts:172",{"_index":1125,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:23",{"_index":2242,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:33",{"_index":1137,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:47",{"_index":2244,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:59",{"_index":2234,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:63",{"_index":2241,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:67",{"_index":2240,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:71",{"_index":2239,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:75",{"_index":2237,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:79",{"_index":2236,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:86",{"_index":2245,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:94",{"_index":2249,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.url",{"_index":302,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["config/credential",{"_index":1113,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["config_folder",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["config_import",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["config_import_force",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["config_storage_schema",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configmodule",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["configmodule.forroot",{"_index":171,"title":{},"body":{"modules/AppModule.html":{},"modules/StorageModule.html":{}}}],["configpath",{"_index":1151,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["configs",{"_index":1138,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["configservice",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{}}}],["configservice.get",{"_index":208,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{}}}],["configservice.get(\"jwt_issuer",{"_index":2086,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get(\"jwt_secret",{"_index":2082,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get(\"keycloak_algorithm",{"_index":2080,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get(\"log_level",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(\"oidc",{"_index":2057,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.getorthrow(\"folder",{"_index":256,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.getorthrow('db_database",{"_index":1492,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_host",{"_index":1484,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_password",{"_index":1490,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_port",{"_index":1486,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('db_username",{"_index":1488,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow('folder",{"_index":1493,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservie",{"_index":1437,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["configuration",{"_index":37,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["configuration(@token",{"_index":2775,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["configuration(user",{"_index":2750,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["configurations",{"_index":319,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"miscellaneous/typealiases.html":{}}}],["configured",{"_index":1444,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"classes/PresentationRequest.html":{},"injectables/SessionService.html":{}}}],["conflictexception",{"_index":723,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/KeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{}}}],["conflictexception('authorization",{"_index":782,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["conflictexception('certificate",{"_index":2182,"title":{},"body":{"classes/KeyService.html":{}}}],["conflictexception('issuer",{"_index":3076,"title":{},"body":{"injectables/ResolverService.html":{}}}],["conflictexception('no",{"_index":2706,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["conflictexception(`request",{"_index":2863,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["connect",{"_index":380,"title":{},"body":{"controllers/AuthController.html":{}}}],["connect/certs",{"_index":2068,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["connect/token",{"_index":2971,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["connection",{"_index":1792,"title":{},"body":{"controllers/HealthController.html":{}}}],["console.error",{"_index":2075,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{}}}],["console.error(\"error",{"_index":3016,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["console.error(err",{"_index":941,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["console.log('session",{"_index":2423,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["console.log(err",{"_index":2873,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["console.warn",{"_index":1750,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["const",{"_index":206,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["constraints",{"_index":1192,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["constructor",{"_index":410,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["constructor(@inject(file_storage",{"_index":1722,"title":{},"body":{"injectables/FilesService.html":{}}}],["constructor(authzservice",{"_index":2431,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["constructor(basedir",{"_index":2185,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["constructor(configservice",{"_index":699,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"classes/FileSystemKeyService.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"injectables/OAuthService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["constructor(configservie",{"_index":1435,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["constructor(credentialconfigrepository",{"_index":1119,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["constructor(cryptoservice",{"_index":1313,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{}}}],["constructor(httpservice",{"_index":2807,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/WebhookService.html":{}}}],["constructor(issuanceconfigrepo",{"_index":1856,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["constructor(keyrepository",{"_index":1531,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["constructor(logger",{"_index":3288,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["constructor(oid4vciservice",{"_index":3676,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["constructor(private",{"_index":1283,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CryptoImplementationService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/ResolverService.html":{},"guards/SessionGuard.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["constructor(reflector",{"_index":2010,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["constructor(s3",{"_index":3084,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["constructor(sessionrepository",{"_index":3348,"title":{},"body":{"injectables/SessionService.html":{}}}],["constructor(sessionservice",{"_index":3192,"title":{},"body":{"guards/SessionGuard.html":{}}}],["constructor(storage",{"_index":1708,"title":{},"body":{"injectables/FilesService.html":{}}}],["containing",{"_index":561,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"injectables/WellKnownService.html":{}}}],["content",{"_index":246,"title":{},"body":{"modules/AppModule.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["contenttype",{"_index":1590,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":2016,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{}}}],["context.flowtype",{"_index":3316,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.getclass",{"_index":2024,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":2023,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["context.sessionid",{"_index":3318,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.switchtohttp().getrequest",{"_index":3196,"title":{},"body":{"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":3236,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["context.tenantid",{"_index":3319,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.ts",{"_index":3201,"title":{},"body":{"interfaces/SessionLogContext.html":{},"coverage.html":{}}}],["context.ts:21",{"_index":3203,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["continue",{"_index":1179,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["controller",{"_index":80,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["controller(':session/.well",{"_index":3660,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["controller(':session/authorize",{"_index":646,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["controller(':session/oid4vp",{"_index":2606,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["controller(':session/vci",{"_index":2409,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["controller(':tenantid/credentials",{"_index":1302,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["controller(':tenantid/status",{"_index":3431,"title":{},"body":{"controllers/StatusListController.html":{}}}],["controller('health",{"_index":1798,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('issuer",{"_index":1280,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{}}}],["controller('key",{"_index":2114,"title":{},"body":{"controllers/KeyController.html":{}}}],["controller('oauth",{"_index":2298,"title":{},"body":{"controllers/OAuthController.html":{}}}],["controller('presentation",{"_index":2768,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["controller('session",{"_index":3183,"title":{},"body":{"controllers/SessionController.html":{}}}],["controllers",{"_index":82,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"modules/CryptoModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"controllers/WellKnownController.html":{},"index.html":{}}}],["convert",{"_index":1693,"title":{},"body":{"classes/FileSystemKeyService.html":{},"injectables/IssuanceService.html":{}}}],["coordinate",{"_index":1520,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["copy",{"_index":3264,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["correct",{"_index":833,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["corresponds",{"_index":334,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"miscellaneous/typealiases.html":{}}}],["count",{"_index":909,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/SessionService.html":{}}}],["countby",{"_index":929,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["counter",{"_index":1163,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["coverage",{"_index":3701,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covered",{"_index":3021,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["create",{"_index":935,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"classes/FileSystemKeyService.html":{},"controllers/IssuerManagementController.html":{},"classes/KeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["create(session",{"_index":3356,"title":{},"body":{"injectables/SessionService.html":{}}}],["create(tenantid",{"_index":1621,"title":{},"body":{"classes/FileSystemKeyService.html":{},"classes/KeyService.html":{}}}],["create_authorization_request",{"_index":2643,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest",{"_index":2621,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest(session",{"_index":2625,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationservermetadata",{"_index":748,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["createcredentialissuancebindingdto",{"_index":983,"title":{"classes/CreateCredentialIssuanceBindingDto.html":{}},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"coverage.html":{}}}],["createcredentialoffer",{"_index":2518,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["created",{"_index":1015,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["createdat",{"_index":867,"title":{},"body":{"entities/CertEntity.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["createdsession",{"_index":3401,"title":{},"body":{"injectables/SessionService.html":{}}}],["createdsession.issuanceid",{"_index":3405,"title":{},"body":{"injectables/SessionService.html":{}}}],["createdsession.tenantid",{"_index":3404,"title":{},"body":{"injectables/SessionService.html":{}}}],["createentry",{"_index":3459,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createentry(session",{"_index":3466,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createhash('sha256').update(bufferorstreamtobuffer(body)).digest('base64",{"_index":1733,"title":{},"body":{"injectables/FilesService.html":{}}}],["createheaderandpayload",{"_index":3482,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createlist",{"_index":3460,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createlist(entry",{"_index":3469,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createoffer",{"_index":2428,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["createoffer(body",{"_index":2435,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["createparamdecorator",{"_index":3571,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["createreadstream",{"_index":2192,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["createreadstream(fullpath",{"_index":2219,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["createrequest",{"_index":2622,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createrequest(requestid",{"_index":2630,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["creates",{"_index":1422,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{}}}],["createwritestream",{"_index":2193,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["createwritestream(fullpath",{"_index":2207,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["creating",{"_index":986,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["creation",{"_index":872,"title":{},"body":{"entities/CertEntity.html":{}}}],["cred",{"_index":2553,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["cred.length",{"_index":2558,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential",{"_index":313,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["credential(req",{"_index":2392,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["credential_accepted",{"_index":2586,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential_configurations_supported",{"_index":1245,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{}}}],["credential_configurations_supported[value.id",{"_index":1357,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credential_creation",{"_index":3325,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_endpoint",{"_index":1246,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["credential_issuance",{"_index":3324,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_issuer",{"_index":1247,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["credential_issuer}/vci/credential",{"_index":2492,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential_issuer}/vci/nonce",{"_index":2495,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential_issuer}/vci/notification",{"_index":2493,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential_request",{"_index":2486,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credential_revoked",{"_index":2280,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["credential_signing_alg_values_supported",{"_index":1347,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credential_verification",{"_index":3327,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credentialconfig",{"_index":1018,"title":{"entities/CredentialConfig.html":{}},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialconfig.config",{"_index":1915,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialconfig.credentialissuancebindings",{"_index":1221,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["credentialconfig.keybinding",{"_index":1388,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.keyid",{"_index":1916,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialconfig.lifetime",{"_index":1386,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.schema",{"_index":1398,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.statusmanagement",{"_index":1379,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.vct",{"_index":1393,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.vct.vct",{"_index":1395,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigid",{"_index":988,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"injectables/IssuanceService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["credentialconfigid.id",{"_index":1907,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialconfigmapping",{"_index":1094,"title":{"classes/CredentialConfigMapping.html":{}},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"coverage.html":{}}}],["credentialconfigrepo",{"_index":1314,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigrepository",{"_index":1123,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["credentialconfigs",{"_index":1102,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{}}}],["credentialconfigservice",{"_index":1111,"title":{"injectables/CredentialConfigService.html":{}},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"coverage.html":{},"index.html":{}}}],["credentialconfiguration",{"_index":1358,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.claims",{"_index":1362,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.disclosureframe",{"_index":1363,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigurationid",{"_index":1323,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["credentialconfigurationids",{"_index":2375,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{}}}],["credentialconfigurationsupported",{"_index":1036,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{}}}],["credentialcount",{"_index":2715,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialid",{"_index":1330,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialissuancebinding",{"_index":1041,"title":{"entities/CredentialIssuanceBinding.html":{}},"body":{"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialissuancebindingrepo",{"_index":1857,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialissuancebindingresponsedto",{"_index":1013,"title":{"classes/CredentialIssuanceBindingResponseDto.html":{}},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"coverage.html":{}}}],["credentialissuancebindings",{"_index":1021,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{}}}],["credentialissuancebindings.credentialconfig",{"_index":1904,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialissuer",{"_index":2489,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/WellKnownService.html":{}}}],["credentialissuer.batch_credential_issuance",{"_index":2497,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentialissuermetadatadto",{"_index":1237,"title":{"classes/CredentialIssuerMetadataDto.html":{}},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["credentialofferobject",{"_index":3143,"title":{},"body":{"entities/Session.html":{}}}],["credentialpayload",{"_index":2516,"title":{},"body":{"injectables/Oid4vciService.html":{},"entities/Session.html":{},"injectables/WebhookService.html":{}}}],["credentialrequest",{"_index":2526,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentialresponse",{"_index":2404,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{}}}],["credentials",{"_index":290,"title":{},"body":{"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"injectables/WebhookService.html":{}}}],["credentials.dto",{"_index":400,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials.dto.ts",{"_index":961,"title":{},"body":{"classes/ClientCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:5",{"_index":962,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.dto.ts:7",{"_index":963,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.length",{"_index":2565,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["credentials.push",{"_index":1908,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentials.push(cred",{"_index":2555,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentials.split",{"_index":446,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials/credential",{"_index":1872,"title":{},"body":{"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["credentials/credentials.controller",{"_index":1992,"title":{},"body":{"modules/IssuerModule.html":{}}}],["credentials/credentials.service",{"_index":1301,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{}}}],["credentials/entities/credential.entity",{"_index":1227,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["credentials?.length",{"_index":2716,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialsconfigservice",{"_index":1858,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialscontroller",{"_index":1260,"title":{"controllers/CredentialsController.html":{}},"body":{"controllers/CredentialsController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialsissued",{"_index":2564,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentialsize",{"_index":2557,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["credentialsmetadatacontroller",{"_index":1289,"title":{"controllers/CredentialsMetadataController.html":{}},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialsservice",{"_index":1282,"title":{"injectables/CredentialsService.html":{}},"body":{"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"coverage.html":{},"index.html":{}}}],["credentialtype",{"_index":3294,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["cron",{"_index":3371,"title":{},"body":{"injectables/SessionService.html":{}}}],["crt",{"_index":15,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{}}}],["crv",{"_index":1511,"title":{},"body":{"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["crypto",{"_index":1194,"title":{},"body":{"injectables/CredentialConfigService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"modules/KeyModule.html":{}}}],["crypto.service",{"_index":1455,"title":{},"body":{"modules/CryptoModule.html":{},"controllers/KeyController.html":{}}}],["crypto.webcrypto.subtle.exportkey",{"_index":3889,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.generatekey",{"_index":3888,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.importkey",{"_index":3892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.sign",{"_index":3893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.verify",{"_index":3900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto/crypto.module",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{}}}],["crypto/crypto.service",{"_index":730,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["crypto/encryption/encryption.service",{"_index":894,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vpService.html":{}}}],["crypto/key/crypto",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialsService.html":{},"injectables/WellKnownService.html":{}}}],["crypto/key/dto/key",{"_index":395,"title":{},"body":{"controllers/AuthController.html":{}}}],["crypto/key/entities/cert.entity",{"_index":1084,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["crypto/key/key.module",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["crypto_alg",{"_index":1405,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"miscellaneous/variables.html":{}}}],["crypto_validation_schema",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"modules/CryptoImplementatationModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cryptographic",{"_index":2929,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["cryptographic_binding_methods_supported",{"_index":1348,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["cryptoimplementatationmodule",{"_index":1399,"title":{"modules/CryptoImplementatationModule.html":{}},"body":{"modules/CryptoImplementatationModule.html":{},"modules/KeyModule.html":{},"index.html":{},"modules.html":{}}}],["cryptoimplementation",{"_index":1407,"title":{"interfaces/CryptoImplementation.html":{}},"body":{"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/FileSystemKeyService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cryptoimplementationservice",{"_index":1316,"title":{"injectables/CryptoImplementationService.html":{}},"body":{"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"classes/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["cryptokey",{"_index":1655,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["cryptomodule",{"_index":113,"title":{"modules/CryptoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["cryptoservice",{"_index":700,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"classes/FileSystemKeyService.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["cryptoservice.getcrypto",{"_index":1664,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["cryptotype",{"_index":1440,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["ctx",{"_index":3572,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":3573,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["current",{"_index":1887,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["current_timestamp",{"_index":870,"title":{},"body":{"entities/CertEntity.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["currently",{"_index":67,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["curve",{"_index":1508,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["custom",{"_index":265,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["customprops",{"_index":234,"title":{},"body":{"modules/AppModule.html":{}}}],["d",{"_index":1667,"title":{},"body":{"classes/FileSystemKeyService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["data",{"_index":562,"title":{},"body":{"interfaces/AuthResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TokenPayload.html":{},"injectables/WebhookService.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":1491,"title":{},"body":{"modules/DatabaseModule.html":{},"controllers/HealthController.html":{},"injectables/OAuthService.html":{}}}],["database/database.module",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":114,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"index.html":{},"modules.html":{}}}],["date",{"_index":868,"title":{},"body":{"entities/CertEntity.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["date().gettime",{"_index":1382,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["date().toisostring().slice(0",{"_index":1728,"title":{},"body":{"injectables/FilesService.html":{}}}],["date(date.now",{"_index":3419,"title":{},"body":{"injectables/SessionService.html":{}}}],["date(token.expiresat",{"_index":2990,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["date.gettime",{"_index":3001,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["date.now",{"_index":3248,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["day",{"_index":3381,"title":{},"body":{"injectables/SessionService.html":{}}}],["db",{"_index":1799,"title":{},"body":{"controllers/HealthController.html":{}}}],["db_database",{"_index":1477,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_host",{"_index":1468,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_password",{"_index":1476,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_port",{"_index":1473,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_type",{"_index":1465,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_username",{"_index":1475,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_validation_schema",{"_index":1464,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbtype",{"_index":1479,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dc+sd",{"_index":2669,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcql",{"_index":2728,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["dcql_query",{"_index":2648,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{}}}],["dcql_query.length",{"_index":2658,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcqlquerycount",{"_index":2656,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dd",{"_index":230,"title":{},"body":{"modules/AppModule.html":{}}}],["de",{"_index":2472,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["deal",{"_index":1938,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["debug",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["debugging",{"_index":1780,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["declarations",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["decode",{"_index":1778,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodedvc",{"_index":2865,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.header",{"_index":2868,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.payload",{"_index":2867,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodejwt",{"_index":1746,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodejwt(token",{"_index":1782,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodetoken",{"_index":2026,"title":{},"body":{"injectables/JwtService.html":{}}}],["decodetoken(token",{"_index":1781,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decorator",{"_index":3883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":43,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"entities/CertEntity.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"entities/DisplayEntity.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"controllers/IssuerManagementController.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"classes/OfferRequestDto.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"entities/RegistrarEntity.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["decrease",{"_index":3410,"title":{},"body":{"injectables/SessionService.html":{}}}],["decryption",{"_index":1527,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["decryptjwe",{"_index":1528,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["decryptjwe(response",{"_index":1534,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["dedicated",{"_index":2354,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{}}}],["deeppartial",{"_index":3357,"title":{},"body":{"injectables/SessionService.html":{}}}],["default",{"_index":185,"title":{},"body":{"modules/AppModule.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"entities/CredentialIssuanceBinding.html":{},"injectables/CryptoImplementationService.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/JwtService.html":{},"entities/KeyEntity.html":{},"injectables/OAuthService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["default_auth_client_id",{"_index":524,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_auth_client_secret",{"_index":525,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_jwt_secret",{"_index":522,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultclientid",{"_index":2339,"title":{},"body":{"injectables/OAuthService.html":{}}}],["defaultclientsecret",{"_index":2341,"title":{},"body":{"injectables/OAuthService.html":{}}}],["defaultmessage",{"_index":270,"title":{},"body":{"classes/AuthConfigValidator.html":{}}}],["defaultmessage(args",{"_index":272,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["defaultmetrics",{"_index":2274,"title":{},"body":{"modules/MetricModule.html":{}}}],["define",{"_index":662,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"entities/PresentationConfig.html":{}}}],["defined",{"_index":45,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["defines",{"_index":2905,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["degree",{"_index":1006,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["degree'})@isstring",{"_index":993,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{}}}],["delete",{"_index":1116,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"classes/LocalFileStorage.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{}}}],["delete(':id",{"_index":1267,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["delete(id",{"_index":3359,"title":{},"body":{"injectables/SessionService.html":{}}}],["delete(key",{"_index":1574,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["delete(tenantid",{"_index":1124,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["deleteconfiguration",{"_index":2748,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(@param('id",{"_index":2778,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(id",{"_index":2752,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteissuanceconfiguration",{"_index":1263,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["deleteissuanceconfiguration(id",{"_index":1266,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{}}}],["deleteissuanceconfiguration(tenantid",{"_index":1861,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["deletekey",{"_index":2106,"title":{},"body":{"controllers/KeyController.html":{}}}],["deletekey(@token",{"_index":2120,"title":{},"body":{"controllers/KeyController.html":{}}}],["deletekey(token",{"_index":2110,"title":{},"body":{"controllers/KeyController.html":{}}}],["deleteobjectcommand",{"_index":3095,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["deletepresentationconfig",{"_index":2803,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletepresentationconfig(id",{"_index":2814,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletes",{"_index":1126,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{}}}],["deletesession",{"_index":3164,"title":{},"body":{"controllers/SessionController.html":{}}}],["deletesession(id",{"_index":3168,"title":{},"body":{"controllers/SessionController.html":{}}}],["deletion",{"_index":2816,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["dependencies",{"_index":103,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"dependencies.html":{},"index.html":{}}}],["desc",{"_index":2858,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["description",{"_index":9,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"entities/CertEntity.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"controllers/OAuthController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"properties.html":{}}}],["details",{"_index":596,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"entities/PresentationConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{}}}],["detection",{"_index":1732,"title":{},"body":{"injectables/FilesService.html":{}}}],["determine",{"_index":1106,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"miscellaneous/variables.html":{}}}],["determines",{"_index":320,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["dev",{"_index":2471,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["development/testing",{"_index":917,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["different",{"_index":1411,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/IssuanceService.html":{},"injectables/RegistrarService.html":{}}}],["differnt",{"_index":2570,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["digest",{"_index":1331,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["direct_post.jwt",{"_index":2664,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["directly",{"_index":855,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["directory",{"_index":2824,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["dirname",{"_index":2198,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["disable",{"_index":2993,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["disclosure",{"_index":1048,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["disclosureframe",{"_index":1022,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{}}}],["discovery",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{}}}],["discovery.dto",{"_index":402,"title":{},"body":{"controllers/AuthController.html":{}}}],["discovery.dto.ts",{"_index":3706,"title":{},"body":{"coverage.html":{}}}],["discoveryendpoint",{"_index":2972,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["display",{"_index":1089,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["displayentity",{"_index":1495,"title":{"entities/DisplayEntity.html":{}},"body":{"entities/DisplayEntity.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"coverage.html":{}}}],["displayinfo",{"_index":1498,"title":{},"body":{"entities/DisplayEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["displayrepository",{"_index":2432,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["dns",{"_index":3013,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["document",{"_index":3053,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/WellKnownService.html":{}}}],["documentation",{"_index":3702,"title":{},"body":{"coverage.html":{}}}],["documents",{"_index":2813,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["dpop",{"_index":786,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dpop_jkt",{"_index":671,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["dpop_signing_alg_values_supported",{"_index":753,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dpopvalue",{"_index":784,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["driver",{"_index":3543,"title":{},"body":{"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["dto",{"_index":552,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/IssuanceDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["dto/auth",{"_index":2846,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["dto/authentication",{"_index":1823,"title":{},"body":{"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{}}}],["dto/authorization",{"_index":2604,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["dto/authorize",{"_index":641,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dto/client",{"_index":399,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/credential",{"_index":3691,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["dto/issuance.dto",{"_index":1836,"title":{},"body":{"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["dto/issuer",{"_index":3056,"title":{},"body":{"injectables/ResolverService.html":{}}}],["dto/jwks",{"_index":3658,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["dto/key",{"_index":1657,"title":{},"body":{"classes/FileSystemKeyService.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{}}}],["dto/notification",{"_index":2408,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{}}}],["dto/oauth",{"_index":3659,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["dto/offer",{"_index":2461,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["dto/oidc",{"_index":401,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/par",{"_index":644,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["dto/presentation",{"_index":2638,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dto/status",{"_index":3485,"title":{},"body":{"injectables/StatusListService.html":{}}}],["dto/token",{"_index":403,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{}}}],["dto/vp",{"_index":2739,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["duration",{"_index":3251,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["duration}ms",{"_index":3257,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["during",{"_index":1035,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/WebhookService.html":{}}}],["dynamically",{"_index":2357,"title":{},"body":{"injectables/OAuthService.html":{}}}],["dynamicmodule",{"_index":2138,"title":{},"body":{"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["e",{"_index":1545,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["e.g",{"_index":1593,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{},"interfaces/SessionLogContext.html":{}}}],["e89b",{"_index":996,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["each",{"_index":333,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"injectables/Oid4vciService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/StatusListEntity.html":{},"miscellaneous/typealiases.html":{}}}],["easier",{"_index":3032,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["ec",{"_index":1509,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["ec_public",{"_index":1505,"title":{"classes/EC_Public.html":{}},"body":{"classes/EC_Public.html":{},"classes/FileSystemKeyService.html":{},"classes/JwksResponseDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"coverage.html":{}}}],["ecdh",{"_index":1563,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["ecdsa",{"_index":3884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ecdsa_p256",{"_index":3726,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ed25519",{"_index":1446,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["eddsa",{"_index":3887,"title":{},"body":{"miscellaneous/variables.html":{}}}],["element",{"_index":1040,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/StatusListService.html":{}}}],["elements",{"_index":1167,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["elliptic",{"_index":1507,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["emits",{"_index":3221,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["emitter",{"_index":3784,"title":{},"body":{"dependencies.html":{}}}],["empty",{"_index":491,"title":{},"body":{"controllers/AuthController.html":{},"injectables/StatusListService.html":{}}}],["enabled",{"_index":1377,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"injectables/RegistrarService.html":{}}}],["enabledebugmode",{"_index":2253,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["enablehttplogger",{"_index":207,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["enablesessionlogger",{"_index":2252,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["encodeuri(key",{"_index":3115,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["encodeuricomponent(key)}=${encodeuricomponent(value",{"_index":2697,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["encrypt",{"_index":1539,"title":{},"body":{"injectables/EncryptionService.html":{},"entities/KeyEntity.html":{},"miscellaneous/typealiases.html":{}}}],["encrypted",{"_index":1540,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryption",{"_index":1526,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryption/encryption.service",{"_index":1456,"title":{},"body":{"modules/CryptoModule.html":{}}}],["encryptionservice",{"_index":893,"title":{"injectables/EncryptionService.html":{}},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"modules/CryptoModule.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"coverage.html":{},"index.html":{}}}],["encrypts",{"_index":1537,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["endpoint",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/HealthController.html":{},"modules/MetricModule.html":{},"controllers/OAuthController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionLoggerInterceptor.html":{},"modules/StorageModule.html":{}}}],["endpoints",{"_index":602,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/HealthController.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["enhanced",{"_index":495,"title":{},"body":{"controllers/AuthController.html":{}}}],["ensure",{"_index":266,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/JwtStrategy.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["entities",{"_index":863,"title":{},"body":{"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/DisplayEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"index.html":{}}}],["entities/cert.entity",{"_index":1659,"title":{},"body":{"classes/FileSystemKeyService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{}}}],["entities/credential",{"_index":1873,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["entities/credential.entity",{"_index":1149,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{}}}],["entities/display.entity",{"_index":2462,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["entities/issuance",{"_index":1874,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["entities/keys.entity",{"_index":1660,"title":{},"body":{"classes/FileSystemKeyService.html":{},"modules/KeyModule.html":{}}}],["entities/presentation",{"_index":2763,"title":{},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["entities/registrar.entity",{"_index":2903,"title":{},"body":{"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{}}}],["entities/session.entity",{"_index":3180,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["entities/status",{"_index":3452,"title":{},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["entitites/client.entity",{"_index":520,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["entity",{"_index":861,"title":{"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/DisplayEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{}},"body":{"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/DisplayEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"classes/KeyObj.html":{},"injectables/Oid4vciService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["entries",{"_index":3475,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entries.length",{"_index":3522,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry",{"_index":1378,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["entry.bits",{"_index":3500,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry.elements",{"_index":3518,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry.elements[id",{"_index":3517,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry.key",{"_index":1568,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["entry.key.d",{"_index":1567,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["entry.relyingpartyid",{"_index":3026,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["entry.tenantid",{"_index":3502,"title":{},"body":{"injectables/StatusListService.html":{}}}],["enum",{"_index":61,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/PresentationRequest.html":{},"classes/TokenRequestDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["enumerations",{"_index":3826,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":2248,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"modules/RegistrarModule.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["environments",{"_index":1752,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["err",{"_index":940,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/WebhookService.html":{}}}],["err.message",{"_index":944,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/PresentationsService.html":{},"injectables/WebhookService.html":{}}}],["error",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{},"miscellaneous/typealiases.html":{}}}],["error(\"error",{"_index":3017,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["error(\"stack",{"_index":3514,"title":{},"body":{"injectables/StatusListService.html":{}}}],["error('credential",{"_index":835,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["error('invalid",{"_index":2529,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["error('issuer",{"_index":3059,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error('key",{"_index":3081,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error('no",{"_index":2877,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["error('subject",{"_index":3068,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error(`error",{"_index":3634,"title":{},"body":{"injectables/WebhookService.html":{}}}],["error(`invalid",{"_index":1776,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["error(`unsupported",{"_index":1449,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["error.children",{"_index":1892,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["error.children.length",{"_index":1893,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["error.constraints",{"_index":1200,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["error.message",{"_index":1777,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.name",{"_index":3260,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.property",{"_index":1199,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["error.stack",{"_index":3263,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.value",{"_index":1201,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["error_description",{"_index":823,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["errormessages",{"_index":1896,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["errors",{"_index":1191,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerService.html":{}}}],["es",{"_index":1553,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["es256",{"_index":481,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoImplementationService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{},"miscellaneous/typealiases.html":{}}}],["es256.getverifier(publickey",{"_index":2870,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["eslint",{"_index":2992,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["eslint/no",{"_index":2997,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["etag",{"_index":1598,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{}}}],["eudi",{"_index":2470,"title":{},"body":{"injectables/Oid4vciService.html":{},"properties.html":{}}}],["eudiplo",{"_index":92,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["event",{"_index":949,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"classes/NotificationRequestDto.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["events",{"_index":3275,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["everything",{"_index":946,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["example",{"_index":50,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["examples",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["exchange",{"_index":626,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/SessionLoggerService.html":{}}}],["execution",{"_index":3217,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["executioncontext",{"_index":2014,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1634,"title":{},"body":{"classes/FileSystemKeyService.html":{},"injectables/IssuanceService.html":{},"injectables/StatusListService.html":{}}}],["existing",{"_index":1010,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["exists",{"_index":1143,"title":{},"body":{"injectables/CredentialConfigService.html":{},"interfaces/FileStorage.html":{},"classes/FileSystemKeyService.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"injectables/StatusListService.html":{}}}],["exists(key",{"_index":1576,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["existssync",{"_index":2194,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["exp",{"_index":486,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["expandvariables",{"_index":202,"title":{},"body":{"modules/AppModule.html":{}}}],["expected",{"_index":2382,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["expectedcode",{"_index":799,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expectednonce",{"_index":2545,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["expectedpreauthorizedcode",{"_index":794,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expectedtxcode",{"_index":796,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expiration",{"_index":1384,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/ParResponseDto.html":{}}}],["expirationdate",{"_index":2989,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["expirationdate.gettime",{"_index":3000,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["expire",{"_index":2085,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expired",{"_index":3159,"title":{},"body":{"entities/Session.html":{},"injectables/SessionService.html":{},"miscellaneous/typealiases.html":{}}}],["expires_in",{"_index":422,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/OAuthService.html":{},"classes/ParResponseDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{}}}],["expiresin",{"_index":459,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/S3FileStorage.html":{}}}],["expiresinsec",{"_index":1579,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{}}}],["expiresinseconds",{"_index":809,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["export",{"_index":30,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["exportable",{"_index":1681,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["exportjwk",{"_index":1546,"title":{},"body":{"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{}}}],["exportjwk(secret.privatekey",{"_index":1557,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exports",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["exportspki",{"_index":1656,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["exportspki(publickeyinstance",{"_index":1700,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["expose",{"_index":1740,"title":{},"body":{"injectables/FilesService.html":{}}}],["express",{"_index":631,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/EncryptionService.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["ext",{"_index":1671,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["extends",{"_index":1610,"title":{},"body":{"classes/FileSystemKeyService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["extends#integrity",{"_index":2742,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["external",{"_index":428,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["extname",{"_index":1720,"title":{},"body":{"injectables/FilesService.html":{}}}],["extname(filename",{"_index":1724,"title":{},"body":{"injectables/FilesService.html":{}}}],["extract",{"_index":436,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["extractable",{"_index":1555,"title":{},"body":{"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{}}}],["extracterrormessages",{"_index":1885,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["extracterrormessages(child",{"_index":1895,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["extracterrormessages(error",{"_index":1898,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["extractjwt",{"_index":2053,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":2079,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9",{"_index":420,"title":{},"body":{"controllers/AuthController.html":{}}}],["eyjhbgcioijsuzi1niisinr5cci6ikpxvcj9",{"_index":3582,"title":{},"body":{"classes/TokenResponseDto.html":{}}}],["failed",{"_index":1195,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"miscellaneous/typealiases.html":{}}}],["failure",{"_index":3409,"title":{},"body":{"injectables/SessionService.html":{}}}],["failwitherror",{"_index":2062,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fall",{"_index":448,"title":{},"body":{"controllers/AuthController.html":{}}}],["false",{"_index":209,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"miscellaneous/variables.html":{}}}],["fatal",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["fd3ebf28",{"_index":1950,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["fetch",{"_index":2480,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{}}}],["fields",{"_index":2711,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["file#asynchronous",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["file.jwt",{"_index":3509,"title":{},"body":{"injectables/StatusListService.html":{}}}],["file.replace('.json",{"_index":1175,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["file.stack.pop",{"_index":3513,"title":{},"body":{"injectables/StatusListService.html":{}}}],["file_storage",{"_index":1604,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["filename",{"_index":1717,"title":{},"body":{"injectables/FilesService.html":{}}}],["files",{"_index":1170,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["files.service",{"_index":3542,"title":{},"body":{"modules/StorageModule.html":{}}}],["files/:key",{"_index":1742,"title":{},"body":{"injectables/FilesService.html":{}}}],["filesservice",{"_index":1704,"title":{"injectables/FilesService.html":{}},"body":{"injectables/FilesService.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["filestorage",{"_index":1569,"title":{"interfaces/FileStorage.html":{}},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["filesystemkeyservice",{"_index":1606,"title":{"classes/FileSystemKeyService.html":{}},"body":{"classes/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"coverage.html":{}}}],["fill(0",{"_index":3492,"title":{},"body":{"injectables/StatusListService.html":{}}}],["filter((tenant",{"_index":1161,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["finally",{"_index":3054,"title":{},"body":{"injectables/ResolverService.html":{}}}],["find",{"_index":924,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["findclientbyid",{"_index":971,"title":{},"body":{"injectables/ClientService.html":{}}}],["findclientbyid(clientid",{"_index":925,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["findonebyorfail",{"_index":1360,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{}}}],["findoptionswhere",{"_index":3365,"title":{},"body":{"injectables/SessionService.html":{}}}],["fine",{"_index":947,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["first",{"_index":1694,"title":{},"body":{"classes/FileSystemKeyService.html":{},"injectables/ResolverService.html":{}}}],["firstvaluefrom",{"_index":2457,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/WebhookService.html":{}}}],["firstvaluefrom(this.httpservice.get(uri)).then",{"_index":2874,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["fixed",{"_index":1949,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["flag",{"_index":1072,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["flow",{"_index":308,"title":{},"body":{"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"controllers/OAuthController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/typealiases.html":{}}}],["flow_complete",{"_index":3322,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_error",{"_index":3323,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_start",{"_index":3320,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flowtype",{"_index":2484,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["folder",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["forbidnonwhitelisted",{"_index":1185,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["force",{"_index":1155,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["forcepathstyle",{"_index":3563,"title":{},"body":{"modules/StorageModule.html":{}}}],["format",{"_index":25,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"entities/CertEntity.html":{},"classes/EC_Public.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/ResolverService.html":{}}}],["formats",{"_index":3683,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["forroot",{"_index":2136,"title":{},"body":{"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["forwardref",{"_index":2616,"title":{},"body":{"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{}}}],["found",{"_index":769,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/KeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"guards/SessionGuard.html":{},"injectables/StatusListService.html":{}}}],["foundation",{"_index":98,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"properties.html":{}}}],["frame",{"_index":1049,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["free",{"_index":3468,"title":{},"body":{"injectables/StatusListService.html":{}}}],["fs",{"_index":1148,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"injectables/PresentationsService.html":{}}}],["fullpath",{"_index":2200,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["function",{"_index":2177,"title":{},"body":{"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":571,"title":{"miscellaneous/functions.html":{}},"body":{"classes/AuthenticationConfigHelper.html":{},"miscellaneous/functions.html":{}}}],["further",{"_index":3157,"title":{},"body":{"entities/Session.html":{}}}],["g",{"_index":2501,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["gauge",{"_index":889,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/SessionService.html":{}}}],["generate",{"_index":1633,"title":{},"body":{"classes/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/OAuthService.html":{},"controllers/PresentationManagementController.html":{}}}],["generateaccesstoken",{"_index":2312,"title":{},"body":{"injectables/OAuthService.html":{}}}],["generateaccesstoken(clientid",{"_index":2321,"title":{},"body":{"injectables/OAuthService.html":{}}}],["generated",{"_index":1626,"title":{},"body":{"classes/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{}}}],["generated/client.gen",{"_index":2964,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["generatekeypair",{"_index":1413,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/EncryptionService.html":{},"miscellaneous/variables.html":{}}}],["generatekeypair(\"ecdh",{"_index":1552,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["generates",{"_index":1417,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/Oid4vpService.html":{}}}],["generatesalt",{"_index":1332,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["generatetoken",{"_index":1754,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["generatetoken(payload",{"_index":2030,"title":{},"body":{"injectables/JwtService.html":{}}}],["generatetokenoptions",{"_index":1744,"title":{"interfaces/GenerateTokenOptions.html":{}},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{}}}],["generation",{"_index":1756,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["generic",{"_index":1409,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/KeyService.html":{},"injectables/SessionLoggerService.html":{}}}],["get('.well",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(':id",{"_index":3172,"title":{},"body":{"controllers/SessionController.html":{}}}],["get('jwks.json",{"_index":3669,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('oauth",{"_index":3645,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('openid",{"_index":3665,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('schema/:id",{"_index":1295,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get('session",{"_index":2422,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["get('status",{"_index":3426,"title":{},"body":{"controllers/StatusListController.html":{}}}],["get('vct/:id",{"_index":1298,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get()@healthcheck",{"_index":1793,"title":{},"body":{"controllers/HealthController.html":{}}}],["get()@sessionlogger('session",{"_index":2597,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["get(state",{"_index":3361,"title":{},"body":{"injectables/SessionService.html":{}}}],["get(tenantid",{"_index":1131,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getalg",{"_index":1433,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["getall",{"_index":3345,"title":{},"body":{"injectables/SessionService.html":{}}}],["getallsessions",{"_index":3165,"title":{},"body":{"controllers/SessionController.html":{}}}],["getauthorizationserver",{"_index":693,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["getauthorizationserver(tenantid",{"_index":708,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["getauthzmetadata",{"_index":3674,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getauthzmetadata(session",{"_index":3678,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getby",{"_index":766,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["getby(where",{"_index":3364,"title":{},"body":{"injectables/SessionService.html":{}}}],["getbyid",{"_index":1117,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getbyid(tenantid",{"_index":1135,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getcertificate",{"_index":1618,"title":{},"body":{"classes/FileSystemKeyService.html":{},"classes/KeyService.html":{}}}],["getcertificate(tenantid",{"_index":1653,"title":{},"body":{"classes/FileSystemKeyService.html":{},"classes/KeyService.html":{}}}],["getclients",{"_index":912,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["getconfigs",{"_index":1264,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfigs(@token",{"_index":1284,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfigs(user",{"_index":1269,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfiguration",{"_index":2224,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getcredential",{"_index":1309,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{}}}],["getcredential(credentialconfigurationid",{"_index":1318,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredential(req",{"_index":2437,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["getcredentialconfigurationsupported",{"_index":1310,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredentialconfigurationsupported(session",{"_index":1324,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcrypto",{"_index":1434,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["getcrypto(alg",{"_index":1441,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["getdownloadurl",{"_index":1706,"title":{},"body":{"injectables/FilesService.html":{}}}],["getdownloadurl(key",{"_index":1712,"title":{},"body":{"injectables/FilesService.html":{}}}],["getencryptionpublickey",{"_index":1529,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["getencryptionpublickey(tenantid",{"_index":1541,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["getexistingrp",{"_index":2923,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["getexistingrp(name",{"_index":2939,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["getexternaloidcconfig",{"_index":2036,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getexternaloidcconfig(configservice",{"_index":2041,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getglobaljwks",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{}}}],["getheadersfromrequest",{"_index":735,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getheadersfromrequest(req",{"_index":776,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"miscellaneous/functions.html":{}}}],["getintegratedoauth2config",{"_index":2037,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getintegratedoauth2config(configservice",{"_index":2045,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getissuanceconfiguration",{"_index":1853,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfiguration(tenantid",{"_index":1863,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurationbyid",{"_index":1854,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurationbyid(body.issuanceid",{"_index":2507,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["getissuanceconfigurationbyid(issuanceconfigid",{"_index":1865,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurations",{"_index":1829,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuanceconfigurations(@token",{"_index":1838,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuanceconfigurations(user",{"_index":1832,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuermetadata",{"_index":3675,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getissuermetadata(session",{"_index":3680,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getjwks",{"_index":3644,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["getjwks(@sessionentity",{"_index":3670,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["getjwks(session",{"_index":3647,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["getjwks(tenantid",{"_index":3688,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getkeys",{"_index":2107,"title":{},"body":{"controllers/KeyController.html":{}}}],["getkeys(@token",{"_index":2116,"title":{},"body":{"controllers/KeyController.html":{}}}],["getkeys(token",{"_index":2112,"title":{},"body":{"controllers/KeyController.html":{}}}],["getkid",{"_index":1612,"title":{},"body":{"classes/FileSystemKeyService.html":{},"classes/KeyService.html":{}}}],["getkid(tenantid",{"_index":1627,"title":{},"body":{"classes/FileSystemKeyService.html":{},"classes/KeyService.html":{}}}],["getlist",{"_index":3424,"title":{},"body":{"controllers/StatusListController.html":{},"injectables/StatusListService.html":{}}}],["getlist(@param('tenantid",{"_index":3433,"title":{},"body":{"controllers/StatusListController.html":{}}}],["getlist(tenantid",{"_index":3425,"title":{},"body":{"controllers/StatusListController.html":{},"injectables/StatusListService.html":{}}}],["getlogformat",{"_index":2225,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getloglevel",{"_index":2226,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getoauth2token",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{}}}],["getoauth2token(body",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{}}}],["getobjectcommand",{"_index":3096,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["getoffer",{"_index":1922,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["getoffer(res",{"_index":1923,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["getoidcdiscovery",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{}}}],["getorthrow(\"public_url",{"_index":2003,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/RegistrarService.html":{}}}],["getpresentationconfig",{"_index":573,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{},"injectables/PresentationsService.html":{}}}],["getpresentationconfig(config",{"_index":577,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["getpresentationconfig(id",{"_index":2818,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs",{"_index":2804,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs(tenantid",{"_index":2820,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getprivatekey",{"_index":1613,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["getprivatekey(tenantid",{"_index":1631,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["getpubfromprivatekey",{"_index":1614,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["getpubfromprivatekey(privatekey",{"_index":1635,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["getpublickey",{"_index":1615,"title":{},"body":{"classes/FileSystemKeyService.html":{},"classes/KeyService.html":{}}}],["getpublickey(type",{"_index":1638,"title":{},"body":{"classes/FileSystemKeyService.html":{},"classes/KeyService.html":{}}}],["getrepositorytoken",{"_index":2140,"title":{},"body":{"modules/KeyModule.html":{}}}],["getrepositorytoken(certentity",{"_index":2155,"title":{},"body":{"modules/KeyModule.html":{}}}],["getrepositorytoken(keyentity",{"_index":2156,"title":{},"body":{"modules/KeyModule.html":{}}}],["getrequestwithsession",{"_index":2594,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getrequestwithsession(@sessionentity",{"_index":2608,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getrequestwithsession(session",{"_index":2596,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getresponse",{"_index":2595,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["getresponse(body",{"_index":2600,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["gets",{"_index":1629,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["getschema",{"_index":1311,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getschema(credentialconfigurationid",{"_index":1326,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getsession",{"_index":3166,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(@param('id",{"_index":3185,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(id",{"_index":3171,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsignedurl",{"_index":1571,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{}}}],["getsignedurl(key",{"_index":1578,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{}}}],["getsignedurl?(key",{"_index":1602,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["getsigner",{"_index":1414,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getsigner(privatekeyjwk",{"_index":1419,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["getstream",{"_index":1572,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["getstream(key",{"_index":1581,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["getting",{"_index":937,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/CredentialIssuerMetadataDto.html":{}}}],["gettoken",{"_index":2284,"title":{},"body":{"controllers/OAuthController.html":{}}}],["gettoken(tokenrequest",{"_index":2285,"title":{},"body":{"controllers/OAuthController.html":{}}}],["getvct",{"_index":1312,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getvct(credentialid",{"_index":1328,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getverifier",{"_index":1415,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getverifier(publickeyjwk",{"_index":1424,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["given",{"_index":1127,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{},"injectables/IssuanceService.html":{},"classes/KeyService.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["given_name",{"_index":1956,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["global",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{},"modules/CryptoImplementatationModule.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["globalthis.headers",{"_index":3834,"title":{},"body":{"miscellaneous/functions.html":{}}}],["go",{"_index":1231,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["grant",{"_index":432,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"controllers/OAuthController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/TokenRequestDto.html":{}}}],["grant_type",{"_index":416,"title":{},"body":{"controllers/AuthController.html":{},"classes/TokenRequestDto.html":{}}}],["grant_types_supported",{"_index":475,"title":{},"body":{"controllers/AuthController.html":{}}}],["grants",{"_index":2512,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["granttype",{"_index":738,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["graph",{"_index":3843,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":582,"title":{"guards/SessionGuard.html":{}},"body":{"classes/AuthenticationConfigHelper.html":{},"modules/MetricModule.html":{},"coverage.html":{},"index.html":{}}}],["guards",{"_index":3190,"title":{},"body":{"guards/SessionGuard.html":{}}}],["handle",{"_index":616,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/WellKnownService.html":{}}}],["handleclientcredentialsgrant",{"_index":2313,"title":{},"body":{"injectables/OAuthService.html":{}}}],["handleclientcredentialsgrant(request",{"_index":2323,"title":{},"body":{"injectables/OAuthService.html":{}}}],["handled",{"_index":1774,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{}}}],["handlenotification",{"_index":2429,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["handlenotification(req",{"_index":2439,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["handler",{"_index":3218,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["handles",{"_index":603,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["handlesigningkeyerror",{"_index":2073,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["handling",{"_index":1525,"title":{},"body":{"injectables/EncryptionService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/WebhookService.html":{}}}],["hasclient",{"_index":2314,"title":{},"body":{"injectables/OAuthService.html":{}}}],["hasclient(clientid",{"_index":2325,"title":{},"body":{"injectables/OAuthService.html":{}}}],["hash",{"_index":3886,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashalg",{"_index":1371,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["hasher",{"_index":1370,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["hasresponsedata",{"_index":3633,"title":{},"body":{"injectables/WebhookService.html":{}}}],["haswebhook",{"_index":2709,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["head",{"_index":3112,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["head.contentlength",{"_index":3118,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["head.contenttype",{"_index":3119,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["head.etag",{"_index":3117,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["header",{"_index":48,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"classes/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["header('content",{"_index":3432,"title":{},"body":{"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["header.kid",{"_index":3080,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c",{"_index":3060,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c.map",{"_index":3063,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header['jwk",{"_index":3071,"title":{},"body":{"injectables/ResolverService.html":{}}}],["headername",{"_index":41,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["headers",{"_index":242,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/WebhookService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["headers.authorization",{"_index":438,"title":{},"body":{"controllers/AuthController.html":{}}}],["headers[session.webhook!.auth.config.headername",{"_index":3616,"title":{},"body":{"injectables/WebhookService.html":{}}}],["headers[webhook.auth.config.headername",{"_index":3637,"title":{},"body":{"injectables/WebhookService.html":{}}}],["headobjectcommand",{"_index":3097,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["health",{"_index":1787,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":1804,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1795,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1789,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1785,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":115,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"index.html":{},"modules.html":{}}}],["help",{"_index":545,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionModule.html":{}}}],["here",{"_index":850,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/WellKnownService.html":{}}}],["hh:mm:ss",{"_index":231,"title":{},"body":{"modules/AppModule.html":{}}}],["holdercnf",{"_index":1319,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["host",{"_index":1394,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/DatabaseModule.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["hosted",{"_index":1090,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["hostname",{"_index":2659,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${session.id}/oid4vp",{"_index":2662,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${session.tenantid",{"_index":2645,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${tenantid}/credentials",{"_index":1396,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["hot",{"_index":2246,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["hour",{"_index":2350,"title":{},"body":{"injectables/OAuthService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["hours",{"_index":464,"title":{},"body":{"controllers/AuthController.html":{},"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["hs256",{"_index":1764,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["http",{"_index":1741,"title":{},"body":{"injectables/FilesService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["httpmethod",{"_index":725,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["httpmodule",{"_index":1982,"title":{},"body":{"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"modules/VerifierModule.html":{}}}],["https://${this.bucket}.s3.amazonaws.com/${encodeuri(key",{"_index":3116,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["https://github.com/iamolegga/nestjs",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["https://github.com/openwallet",{"_index":3849,"title":{},"body":{"properties.html":{}}}],["https://json",{"_index":3124,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["https://openwallet",{"_index":97,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["httpservice",{"_index":2139,"title":{},"body":{"modules/KeyModule.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/WebhookService.html":{}}}],["iat",{"_index":487,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["id",{"_index":16,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["id'})@isstring",{"_index":3576,"title":{},"body":{"classes/TokenRequestDto.html":{}}}],["id).catch",{"_index":1178,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["id_token_signing_alg_values_supported",{"_index":480,"title":{},"body":{"controllers/AuthController.html":{}}}],["identifier",{"_index":27,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsMetadataController.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"interfaces/IssuerMetadata.html":{},"entities/KeyEntity.html":{},"classes/KeyObj.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"classes/TokenRequestDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"coverage.html":{}}}],["identify",{"_index":1061,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["ids",{"_index":1100,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["idx",{"_index":3512,"title":{},"body":{"injectables/StatusListService.html":{}}}],["if(this.configservice.get('jwt_secret",{"_index":1749,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["ignore",{"_index":232,"title":{},"body":{"modules/AppModule.html":{}}}],["ignoreexpiration",{"_index":2084,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":1967,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png",{"_index":1941,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png')@apibody({type",{"_index":1929,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["image/png')@useguards(jwtauthguard)@apisecurity('oauth2')@apibody({type",{"_index":2755,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["imeplement",{"_index":1410,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation",{"_index":1443,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"classes/FileSystemKeyService.html":{},"injectables/OAuthService.html":{}}}],["implementation.module",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{}}}],["implementation.module.ts",{"_index":1404,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["implementation.service",{"_index":1339,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"classes/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"injectables/WellKnownService.html":{}}}],["implementation.service.ts",{"_index":1432,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["implementation.service.ts:10",{"_index":1436,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implementation.service.ts:17",{"_index":1438,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implementation.service.ts:26",{"_index":1442,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implementation.ts",{"_index":1408,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["implementation.ts:19",{"_index":1416,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:24",{"_index":1421,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:29",{"_index":1425,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation/crypto",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["implementation/ed25519.ts",{"_index":3735,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["implements",{"_index":268,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/EC_Public.html":{},"injectables/IssuanceService.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/LocalFileStorage.html":{},"injectables/Oid4vciService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{}}}],["import",{"_index":52,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["import(tenantid",{"_index":1642,"title":{},"body":{"classes/FileSystemKeyService.html":{},"classes/KeyService.html":{}}}],["import.dto",{"_index":1658,"title":{},"body":{"classes/FileSystemKeyService.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{}}}],["import.dto.ts",{"_index":2092,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{},"coverage.html":{}}}],["import.dto.ts:11",{"_index":2100,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:13",{"_index":2101,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:15",{"_index":2095,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:17",{"_index":2096,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:19",{"_index":2094,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:31",{"_index":2134,"title":{},"body":{"classes/KeyImportDto.html":{}}}],["import.dto.ts:38",{"_index":2131,"title":{},"body":{"classes/KeyImportDto.html":{}}}],["import.dto.ts:45",{"_index":2132,"title":{},"body":{"classes/KeyImportDto.html":{}}}],["import.dto.ts:7",{"_index":2097,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:9",{"_index":2099,"title":{},"body":{"classes/Key.html":{}}}],["imported",{"_index":1204,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["importing",{"_index":2103,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["importjwk",{"_index":1547,"title":{},"body":{"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{},"injectables/PresentationsService.html":{}}}],["importjwk(keyentity.key",{"_index":1562,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["importjwk(payload.cnf.jwk",{"_index":2878,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["importjwk(privatekey",{"_index":1701,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["imports",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/CredentialConfigService.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{}}}],["include",{"_index":497,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vpController.html":{}}}],["included",{"_index":1815,"title":{},"body":{"entities/IssuanceConfig.html":{},"injectables/Oid4vciService.html":{}}}],["includes",{"_index":1103,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["including",{"_index":2915,"title":{},"body":{"injectables/RegistrarService.html":{},"interfaces/SessionLogContext.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":3202,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["indexes",{"_index":3444,"title":{},"body":{"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["indicates",{"_index":29,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["indicating",{"_index":2783,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["information",{"_index":96,"title":{},"body":{"controllers/AppController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/IssuerManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["inherited",{"_index":1622,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["init",{"_index":969,"title":{},"body":{"entities/ClientEntry.html":{},"classes/FileSystemKeyService.html":{},"classes/KeyService.html":{},"miscellaneous/typealiases.html":{}}}],["init(tenant",{"_index":1645,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["init(tenantid",{"_index":2173,"title":{},"body":{"classes/KeyService.html":{}}}],["initialization",{"_index":3321,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["initialize",{"_index":907,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/OAuthService.html":{},"injectables/StatusListService.html":{},"miscellaneous/functions.html":{}}}],["initializeclients",{"_index":2315,"title":{},"body":{"injectables/OAuthService.html":{}}}],["initialized",{"_index":2175,"title":{},"body":{"classes/KeyService.html":{},"injectables/RegistrarService.html":{}}}],["initializes",{"_index":1281,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["inject",{"_index":204,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["inject('keyservice",{"_index":2115,"title":{},"body":{"controllers/KeyController.html":{}}}],["injectable",{"_index":689,"title":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{}},"body":{"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["injectables",{"_index":690,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"index.html":{}}}],["injectmetric",{"_index":888,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/SessionService.html":{}}}],["injectmetric(\"tenant_client_total",{"_index":905,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["injectmetric('sessions",{"_index":3388,"title":{},"body":{"injectables/SessionService.html":{}}}],["injectrepository",{"_index":887,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["injectrepository(cliententry",{"_index":903,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["injectrepository(credentialconfig",{"_index":1150,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{}}}],["injectrepository(credentialissuancebinding",{"_index":1876,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["injectrepository(displayentity",{"_index":2464,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["injectrepository(issuanceconfig",{"_index":1875,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["injectrepository(keyentity",{"_index":1551,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["injectrepository(presentationconfig",{"_index":2847,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["injectrepository(registrarentity",{"_index":2965,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["injectrepository(session",{"_index":3387,"title":{},"body":{"injectables/SessionService.html":{}}}],["injectrepository(statuslistentity",{"_index":3487,"title":{},"body":{"injectables/StatusListService.html":{}}}],["injectrepository(statusmapping",{"_index":3486,"title":{},"body":{"injectables/StatusListService.html":{}}}],["instance",{"_index":2607,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["instance.decode(`${data}.${signature",{"_index":2866,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["instanceof",{"_index":2077,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LocalFileStorage.html":{}}}],["instead",{"_index":2063,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["insufficient_authorization",{"_index":822,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["int",{"_index":3528,"title":{},"body":{"entities/StatusMapping.html":{}}}],["integrated",{"_index":1753,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["integration",{"_index":901,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["intended",{"_index":1516,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["interact",{"_index":3847,"title":{},"body":{"properties.html":{}}}],["interacting",{"_index":2954,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["interaction",{"_index":2914,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["intercept",{"_index":3210,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["intercept(context",{"_index":3213,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interceptor",{"_index":3208,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["intercepts",{"_index":3216,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/FileStorage.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/TokenPayload.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/FileStorage.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/FileStorage.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/TokenPayload.html":{},"index.html":{}}}],["interval",{"_index":3392,"title":{},"body":{"injectables/SessionService.html":{}}}],["intervaltime",{"_index":3390,"title":{},"body":{"injectables/SessionService.html":{}}}],["invalid",{"_index":368,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{}}}],["is_public_key",{"_index":2019,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isabsolute",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["isabsolute(folder",{"_index":258,"title":{},"body":{"modules/AppModule.html":{}}}],["isarray",{"_index":1098,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["isarray()@isoptional",{"_index":2377,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["isarray()@validatenested({each",{"_index":1847,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["isauthurlauth",{"_index":574,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["isauthurlauth(config",{"_index":580,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["isboolean",{"_index":1079,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isboolean()@isoptional()@column('boolean",{"_index":1069,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isdebugmodeenabled",{"_index":2227,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isdefined",{"_index":1193,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["isempty",{"_index":1080,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/PresentationConfig.html":{}}}],["isempty()@column('varchar",{"_index":1074,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isempty()@column({type",{"_index":2726,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["isempty()@manytoone(undefined",{"_index":1055,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isempty()@onetomany(undefined",{"_index":1042,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isenabled",{"_index":2924,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["isenum",{"_index":2102,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{}}}],["isenum(['credential_accepted",{"_index":2279,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["isenum(['ec",{"_index":2098,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["isenum(responsetype",{"_index":2386,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{}}}],["isglobal",{"_index":200,"title":{},"body":{"modules/AppModule.html":{},"modules/StorageModule.html":{}}}],["ishttploggerenabled",{"_index":2228,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isin",{"_index":54,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isin(['apikey",{"_index":69,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isin(['client_credentials",{"_index":3580,"title":{},"body":{"classes/TokenRequestDto.html":{}}}],["isin(['none",{"_index":327,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["isin([0",{"_index":3537,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isnoneauth",{"_index":575,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["isnoneauth(config",{"_index":583,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["isnull",{"_index":3383,"title":{},"body":{"injectables/SessionService.html":{}}}],["isnumber",{"_index":1081,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"classes/StatusUpdateDto.html":{}}}],["isnumber()@isin(['0",{"_index":3535,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isnumber()@isoptional",{"_index":1845,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["isnumber()@isoptional()@column('int",{"_index":1062,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isobject",{"_index":55,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isobject()@column('json",{"_index":1807,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["isobject()@isoptional",{"_index":1066,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/OfferRequestDto.html":{},"classes/PresentationRequest.html":{}}}],["isobject()@isoptional()@validatenested()@type(undefined",{"_index":591,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{},"classes/IssuanceDto.html":{}}}],["isobject()@type(undefined",{"_index":2133,"title":{},"body":{"classes/KeyImportDto.html":{}}}],["isobject()@validatenested()@type(undefined",{"_index":1843,"title":{},"body":{"classes/IssuanceDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["isoptional",{"_index":56,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizeQueries.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isoptional()@isobject()@column('json",{"_index":2731,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["isoptional()@isstring",{"_index":677,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["isoptional()@validate(authconfigvalidator",{"_index":565,"title":{},"body":{"classes/AuthenticationConfigDto.html":{}}}],["ispresentationduringissuanceauth",{"_index":576,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["ispresentationduringissuanceauth(config",{"_index":585,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["ispublic",{"_index":1718,"title":{},"body":{"injectables/FilesService.html":{},"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["iss",{"_index":484,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"injectables/OAuthService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["issessionloggerenabled",{"_index":2229,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["issetup",{"_index":972,"title":{},"body":{"injectables/ClientService.html":{}}}],["issetup(id",{"_index":926,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["isstring",{"_index":44,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/IssuanceDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isstring()@column('varchar",{"_index":1052,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isstring()@isoptional",{"_index":1059,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/KeyImportDto.html":{},"classes/StatusUpdateDto.html":{}}}],["issuance",{"_index":323,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"injectables/WebhookService.html":{},"coverage.html":{}}}],["issuance.service",{"_index":1837,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["issuance/credentials",{"_index":1154,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["issuance/dto/authentication",{"_index":732,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuance/entities/credential",{"_index":1086,"title":{},"body":{"entities/CredentialConfig.html":{},"modules/IssuerModule.html":{}}}],["issuance/entities/issuance",{"_index":1340,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{}}}],["issuance/issuance",{"_index":1880,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuance/issuance.controller",{"_index":1994,"title":{},"body":{"modules/IssuerModule.html":{}}}],["issuance/issuance.service",{"_index":734,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuanceconfig",{"_index":1215,"title":{"entities/IssuanceConfig.html":{}},"body":{"entities/CredentialIssuanceBinding.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"coverage.html":{}}}],["issuanceconfig.authenticationconfig",{"_index":2478,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuanceconfig.authenticationconfig.config.url",{"_index":2479,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuanceconfig.authenticationconfig.method",{"_index":2514,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuanceconfig.batch_size",{"_index":2496,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuanceconfig.credentialissuancebindings",{"_index":1224,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["issuanceconfig.credentialissuancebindings.find",{"_index":1350,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["issuanceconfig.credentialissuancebindings.map",{"_index":2510,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuanceconfigid",{"_index":989,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"injectables/IssuanceService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["issuanceconfigrepo",{"_index":1860,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuanceconfigservice",{"_index":1315,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["issuancecontroller",{"_index":1826,"title":{"controllers/IssuanceController.html":{}},"body":{"controllers/IssuanceController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["issuancecounter",{"_index":3396,"title":{},"body":{"injectables/SessionService.html":{}}}],["issuancedto",{"_index":1099,"title":{"classes/IssuanceDto.html":{}},"body":{"classes/CredentialConfigMapping.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"coverage.html":{}}}],["issuanceid",{"_index":837,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{},"injectables/SessionService.html":{}}}],["issuanceservice",{"_index":702,"title":{"injectables/IssuanceService.html":{}},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{},"index.html":{}}}],["issue",{"_index":2395,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["issued",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/WellKnownService.html":{}}}],["issuer",{"_index":468,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"classes/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["issuer.png",{"_index":2473,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuer/authorize/authorize.service",{"_index":3690,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["issuer/authorize/dto/authorize",{"_index":3158,"title":{},"body":{"entities/Session.html":{}}}],["issuer/issuer.module",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["issuer/oid4vci/dto/offer",{"_index":2635,"title":{},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{}}}],["issuer/oid4vci/oid4vci.service",{"_index":896,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/WellKnownService.html":{}}}],["issuer/status",{"_index":514,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{}}}],["issuer_state",{"_index":672,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["issuer_validation_schema",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["issuermanagementcontroller",{"_index":1918,"title":{"controllers/IssuerManagementController.html":{}},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["issuermetadata",{"_index":1970,"title":{"interfaces/IssuerMetadata.html":{}},"body":{"interfaces/IssuerMetadata.html":{},"injectables/Oid4vciService.html":{},"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["issuermetadata(session",{"_index":2442,"title":{},"body":{"injectables/Oid4vciService.html":{},"controllers/WellKnownController.html":{}}}],["issuermetadata.authorizationservers",{"_index":2532,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuermetadata.credentialissuer.credential_issuer",{"_index":2535,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuermetadataresult",{"_index":2455,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["issuermodule",{"_index":116,"title":{"modules/IssuerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"index.html":{},"modules.html":{}}}],["issues",{"_index":1321,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["issuing",{"_index":3326,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["isuance",{"_index":1913,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["isurl",{"_index":286,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["isused",{"_index":1349,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["isused?.credentialconfig",{"_index":1355,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["isusingexternaloidc",{"_index":1783,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["isuuid",{"_index":1005,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["isuuid()@isoptional",{"_index":2384,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["isverified",{"_index":3899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["it's",{"_index":3626,"title":{},"body":{"injectables/WebhookService.html":{}}}],["item.name",{"_index":3008,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["iterate",{"_index":1165,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["job",{"_index":3372,"title":{},"body":{"injectables/SessionService.html":{}}}],["joi",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/OAuthModule.html":{},"modules/RegistrarModule.html":{},"modules/SessionModule.html":{},"modules/StorageModule.html":{},"dependencies.html":{}}}],["joi.boolean().default(false",{"_index":189,"title":{},"body":{"modules/AppModule.html":{},"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.boolean().when(joi.ref(\"storage_driver",{"_index":3556,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.exist",{"_index":2909,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["joi.number().default(24",{"_index":3339,"title":{},"body":{"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["joi.number().default(60",{"_index":3337,"title":{},"body":{"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["joi.number().when('db_type",{"_index":1474,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["joi.object",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.optional",{"_index":1471,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.required",{"_index":1472,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"modules/RegistrarModule.html":{},"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(\"../../assets/config",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default(\"../../tmp",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default(\"24h",{"_index":538,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(\"eudiplo",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default(\"http://localhost:3000",{"_index":2000,"title":{},"body":{"modules/IssuerModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(\"rs256",{"_index":532,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(\"uploads",{"_index":3549,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(default_auth_client_id",{"_index":542,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(default_auth_client_secret",{"_index":540,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(default_jwt_secret",{"_index":534,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().optional",{"_index":526,"title":{},"body":{"modules/AuthModule.html":{},"modules/OAuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().optional().default(\"eudiplo",{"_index":536,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().required",{"_index":529,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().uri().when(\"km_type",{"_index":2150,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().valid(\"file",{"_index":2145,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().valid(\"local",{"_index":3545,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().valid('es256').default('es256",{"_index":1406,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().valid('sqlite",{"_index":1466,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().when(\"km_type",{"_index":2152,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().when(\"registrar_url",{"_index":2908,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().when('db_type",{"_index":1469,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().when(joi.ref(\"storage_driver",{"_index":3548,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.when(\"oidc",{"_index":528,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["join",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"modules/DatabaseModule.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{}}}],["join(__dirname",{"_index":260,"title":{},"body":{"modules/AppModule.html":{}}}],["join(configpath",{"_index":1168,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["join(folder",{"_index":259,"title":{},"body":{"modules/AppModule.html":{}}}],["join(this.basedir",{"_index":2201,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["jose",{"_index":1522,"title":{},"body":{"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"classes/Key.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"dependencies.html":{}}}],["joseheaderparameters",{"_index":2178,"title":{},"body":{"classes/KeyService.html":{}}}],["json",{"_index":199,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/CredentialConfig.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/PresentationManagementController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["json.parse",{"_index":1172,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["json.stringify",{"_index":3161,"title":{},"body":{"entities/Session.html":{}}}],["json.stringify(credentialissuer).replace",{"_index":2500,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["json.stringify(data",{"_index":3255,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["json.stringify(values.dcql_query).replace",{"_index":2649,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["json.stringify(values.registrationcert).replace",{"_index":2652,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["jsonwebkey",{"_index":1420,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["junction",{"_index":1212,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["jwe",{"_index":1538,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwk",{"_index":726,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"miscellaneous/variables.html":{}}}],["jwk_ec_private",{"_index":1636,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["jwk_ec_public",{"_index":1510,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["jwks",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{},"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{}}}],["jwks_uri",{"_index":471,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["jwksrequestsperminute",{"_index":2071,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwksresponsedto",{"_index":1523,"title":{"classes/JwksResponseDto.html":{}},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["jwksuri",{"_index":2066,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwt",{"_index":792,"title":{},"body":{"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{}}}],["jwt.service",{"_index":405,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["jwt.setaudience(options.audience",{"_index":1771,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.sign(secretkey",{"_index":1772,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.strategy",{"_index":521,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt/crypto",{"_index":1333,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["jwt/jwt",{"_index":1336,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["jwt/sd",{"_index":1338,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["jwt/types",{"_index":1654,"title":{},"body":{"classes/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["jwt_alg_values",{"_index":2670,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["jwt_expires_in",{"_index":537,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["jwt_issuer",{"_index":535,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["jwt_secret",{"_index":533,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["jwtauthguard",{"_index":504,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AuthModule.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"coverage.html":{},"index.html":{}}}],["jwtdecrypt",{"_index":1548,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtdecrypt(response",{"_index":1564,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtfromrequest",{"_index":2044,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtheaderparameters",{"_index":1651,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["jwtpayload",{"_index":1650,"title":{},"body":{"classes/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{}}}],["jwtservice",{"_index":404,"title":{"injectables/JwtService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{},"index.html":{}}}],["jwtstrategy",{"_index":505,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{}}}],["jwtstrategy.getexternaloidcconfig(configservice",{"_index":2058,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtstrategy.getintegratedoauth2config(configservice",{"_index":2059,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtverify",{"_index":1747,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/PresentationsService.html":{}}}],["jwtverify(`${data}.${signature",{"_index":2879,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["jwtverify(token",{"_index":1775,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwtwithstatuslistpayload",{"_index":1335,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/StatusListService.html":{}}}],["kb",{"_index":1343,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{}}}],["kbverifier",{"_index":2800,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["key",{"_index":23,"title":{"classes/Key.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"entities/CertEntity.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["key).then",{"_index":2880,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["key.key",{"_index":1689,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["key.kid",{"_index":3079,"title":{},"body":{"injectables/ResolverService.html":{}}}],["key.service",{"_index":1661,"title":{},"body":{"classes/FileSystemKeyService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{}}}],["key.service.ts",{"_index":1608,"title":{},"body":{"classes/FileSystemKeyService.html":{},"coverage.html":{}}}],["key.service.ts:118",{"_index":1632,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["key.service.ts:153",{"_index":1640,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["key.service.ts:158",{"_index":1641,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["key.service.ts:28",{"_index":1620,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["key.service.ts:62",{"_index":1637,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["key/entities/cert.entity",{"_index":1457,"title":{},"body":{"modules/CryptoModule.html":{}}}],["key/entities/keys.entity",{"_index":1459,"title":{},"body":{"modules/CryptoModule.html":{},"injectables/EncryptionService.html":{}}}],["key/key.controller",{"_index":1460,"title":{},"body":{"modules/CryptoModule.html":{}}}],["key_ops",{"_index":1669,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["key_validation_schema",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["keybinding",{"_index":1023,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/PresentationsService.html":{}}}],["keybindingnonce",{"_index":2829,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keybindings",{"_index":2841,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keycloak",{"_index":2076,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{}}}],["keycloak_algorithm",{"_index":531,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["keycloak_internal_issuer_url",{"_index":527,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["keycloakissuerurl",{"_index":2065,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["keycloakissuerurl}/protocol/openid",{"_index":2067,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["keycontroller",{"_index":1454,"title":{"controllers/KeyController.html":{}},"body":{"modules/CryptoModule.html":{},"controllers/KeyController.html":{},"coverage.html":{}}}],["keyentity",{"_index":1458,"title":{"entities/KeyEntity.html":{}},"body":{"modules/CryptoModule.html":{},"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"coverage.html":{}}}],["keyid",{"_index":990,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"injectables/CredentialsService.html":{},"classes/FileSystemKeyService.html":{},"injectables/IssuanceService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"injectables/WellKnownService.html":{}}}],["keyimportdto",{"_index":1643,"title":{"classes/KeyImportDto.html":{}},"body":{"classes/FileSystemKeyService.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"coverage.html":{}}}],["keymodule",{"_index":117,"title":{"modules/KeyModule.html":{}},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{},"index.html":{},"modules.html":{}}}],["keymodule.forroot",{"_index":253,"title":{},"body":{"modules/AppModule.html":{}}}],["keyobj",{"_index":2157,"title":{"classes/KeyObj.html":{}},"body":{"classes/KeyObj.html":{},"classes/KeyService.html":{},"coverage.html":{}}}],["keypair",{"_index":1418,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/FileSystemKeyService.html":{},"classes/KeyService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["keypair.privatekey",{"_index":3891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keypair.publickey",{"_index":3890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keyrepository",{"_index":1533,"title":{},"body":{"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{},"modules/KeyModule.html":{}}}],["keyresponsedto",{"_index":358,"title":{"classes/KeyResponseDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/KeyResponseDto.html":{},"coverage.html":{}}}],["keys",{"_index":493,"title":{},"body":{"controllers/AuthController.html":{},"entities/CertEntity.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyResponseDto.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"injectables/WellKnownService.html":{}}}],["keys.privatekey",{"_index":1676,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["keyservice",{"_index":1611,"title":{"classes/KeyService.html":{}},"body":{"classes/FileSystemKeyService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"coverage.html":{}}}],["keyservice:109",{"_index":1648,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["keyservice:136",{"_index":1628,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["keyservice:152",{"_index":1639,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["keyservice:195",{"_index":1652,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["keyservice:46",{"_index":1644,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["keyservice:77",{"_index":1646,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["keyservice:86",{"_index":1623,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["keyusage",{"_index":2127,"title":{},"body":{"entities/KeyEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["kid",{"_index":2093,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["km_type",{"_index":2144,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["kmtype",{"_index":2154,"title":{},"body":{"modules/KeyModule.html":{}}}],["know",{"_index":3022,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["known",{"_index":3643,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["known.controller",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["known.controller.ts",{"_index":3641,"title":{},"body":{"controllers/WellKnownController.html":{},"coverage.html":{}}}],["known.controller.ts:47",{"_index":3654,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:59",{"_index":3646,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:71",{"_index":3650,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.service",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{}}}],["known.service.ts",{"_index":3672,"title":{},"body":{"injectables/WellKnownService.html":{},"coverage.html":{}}}],["known.service.ts:16",{"_index":3677,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known.service.ts:39",{"_index":3681,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known.service.ts:77",{"_index":3679,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known.service.ts:87",{"_index":3689,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known/dto/credential",{"_index":1239,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"coverage.html":{}}}],["known/dto/jwks",{"_index":1506,"title":{},"body":{"classes/EC_Public.html":{},"classes/FileSystemKeyService.html":{},"classes/JwksResponseDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"coverage.html":{}}}],["known/dto/oauth",{"_index":2362,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"coverage.html":{}}}],["known/jwks.json",{"_index":473,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["known/jwks.json')@apioperation({summary",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{}}}],["known/jwt",{"_index":3073,"title":{},"body":{"injectables/ResolverService.html":{}}}],["known/oauth",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{},"injectables/Oid4vciService.html":{}}}],["known/openid",{"_index":2974,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["known/well",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["kty",{"_index":1512,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["labelnames",{"_index":3341,"title":{},"body":{"modules/SessionModule.html":{}}}],["labs.github.io/eudiplo/latest",{"_index":99,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["labs/eudiplo.git",{"_index":3853,"title":{},"body":{"properties.html":{}}}],["labs/eudiplo/issues",{"_index":3850,"title":{},"body":{"properties.html":{}}}],["last",{"_index":3511,"title":{},"body":{"injectables/StatusListService.html":{}}}],["later",{"_index":496,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/IssuerManagementController.html":{}}}],["legend",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["length",{"_index":3256,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["lessthan",{"_index":3384,"title":{},"body":{"injectables/SessionService.html":{}}}],["lessthan(new",{"_index":3418,"title":{},"body":{"injectables/SessionService.html":{}}}],["level",{"_index":219,"title":{},"body":{"modules/AppModule.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["levels",{"_index":2260,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["levels[level.tolowercase",{"_index":2263,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["license",{"_index":3851,"title":{},"body":{"properties.html":{}}}],["lifetime",{"_index":1024,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/TokenResponseDto.html":{},"injectables/WellKnownService.html":{}}}],["line",{"_index":2995,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["link",{"_index":1045,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["links",{"_index":1814,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["list",{"_index":1252,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/CredentialsService.html":{},"interfaces/IssuerMetadata.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/PresentationsService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"dependencies.html":{}}}],["list')@header('content",{"_index":3427,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.controller",{"_index":3456,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.controller.ts",{"_index":3422,"title":{},"body":{"controllers/StatusListController.html":{},"coverage.html":{}}}],["list.controller.ts:17",{"_index":3429,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.entity",{"_index":3453,"title":{},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["list.entity.ts",{"_index":3437,"title":{},"body":{"entities/StatusListEntity.html":{},"coverage.html":{}}}],["list.entity.ts:13",{"_index":3445,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:19",{"_index":3441,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:25",{"_index":3443,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:31",{"_index":3440,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:37",{"_index":3442,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.module",{"_index":516,"title":{},"body":{"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/SessionModule.html":{}}}],["list.module.ts",{"_index":3451,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.service",{"_index":898,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{}}}],["list.service.ts",{"_index":3458,"title":{},"body":{"injectables/StatusListService.html":{},"coverage.html":{}}}],["list.service.ts:105",{"_index":3471,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:115",{"_index":3467,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:157",{"_index":3479,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:173",{"_index":3481,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:20",{"_index":3465,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:36",{"_index":3472,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:59",{"_index":3470,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list/dto/status",{"_index":3178,"title":{},"body":{"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["list/entities/status",{"_index":3436,"title":{},"body":{"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"coverage.html":{}}}],["list/status",{"_index":515,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"coverage.html":{}}}],["listen",{"_index":951,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["literal",{"_index":559,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/OfferRequestDto.html":{},"miscellaneous/typealiases.html":{}}}],["livetime",{"_index":1064,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["load",{"_index":915,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vpService.html":{}}}],["loadclients",{"_index":916,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["loadconfiguration",{"_index":2230,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loadtypemetadataformat",{"_index":1375,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["local",{"_index":1603,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"modules/StorageModule.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["local_storage_dir",{"_index":3547,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["locale",{"_index":1500,"title":{},"body":{"entities/DisplayEntity.html":{},"injectables/Oid4vciService.html":{}}}],["localfilestorage",{"_index":2183,"title":{"classes/LocalFileStorage.html":{}},"body":{"classes/LocalFileStorage.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["log",{"_index":2262,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["log_debug_mode",{"_index":195,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_enable_http_logger",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_enable_session_logger",{"_index":194,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["log_format",{"_index":196,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_level",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["logauthorizationrequest",{"_index":3277,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logauthorizationrequest(context",{"_index":3290,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcontext",{"_index":2483,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/WebhookService.html":{}}}],["logcredentialissuance",{"_index":3278,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialissuance(context",{"_index":3293,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification",{"_index":3279,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification(context",{"_index":3296,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowcomplete",{"_index":3280,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowcomplete(context",{"_index":3298,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror",{"_index":3281,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror(context",{"_index":3301,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart",{"_index":3282,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart(context",{"_index":3303,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logformat",{"_index":2254,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["logged",{"_index":3204,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["logger",{"_index":1120,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger.decorator",{"_index":2407,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["logger.decorator.ts",{"_index":3767,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger.interceptor",{"_index":1986,"title":{},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["logger.interceptor.ts",{"_index":3207,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{}}}],["logger.interceptor.ts:136",{"_index":3223,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:19",{"_index":3212,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:44",{"_index":3215,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.service",{"_index":1987,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"injectables/WebhookService.html":{}}}],["logger.service.ts",{"_index":3274,"title":{},"body":{"injectables/SessionLoggerService.html":{},"coverage.html":{}}}],["logger.service.ts:102",{"_index":3295,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:12",{"_index":3289,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:124",{"_index":3297,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:146",{"_index":3292,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:163",{"_index":3312,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:180",{"_index":3306,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:202",{"_index":3308,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:221",{"_index":3310,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:30",{"_index":3313,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:37",{"_index":3304,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:56",{"_index":3299,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:75",{"_index":3302,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger/session",{"_index":3613,"title":{},"body":{"injectables/WebhookService.html":{}}}],["loggerconfigservice",{"_index":2222,"title":{"injectables/LoggerConfigService.html":{}},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["loggerconfiguration",{"_index":2235,"title":{"interfaces/LoggerConfiguration.html":{}},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["loggermodule",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loggermodule.forrootasync",{"_index":203,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":212,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["loglevel",{"_index":2238,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["lognotification",{"_index":3283,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["lognotification(context",{"_index":3305,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logo",{"_index":1501,"title":{},"body":{"entities/DisplayEntity.html":{},"injectables/Oid4vciService.html":{}}}],["logs",{"_index":2628,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["logsession",{"_index":3284,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsession(context",{"_index":3307,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror",{"_index":3285,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror(context",{"_index":3309,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtokenexchange",{"_index":3286,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtokenexchange(context",{"_index":3311,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["made",{"_index":2736,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["main",{"_index":85,"title":{},"body":{"controllers/AppController.html":{}}}],["maintain",{"_index":556,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["makegaugeprovider",{"_index":511,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionModule.html":{}}}],["makes",{"_index":3697,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["making",{"_index":2811,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["manage",{"_index":865,"title":{},"body":{"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"injectables/OAuthService.html":{}}}],["management",{"_index":1071,"title":{},"body":{"entities/CredentialConfig.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{}}}],["management.controller",{"_index":1995,"title":{},"body":{"modules/IssuerModule.html":{}}}],["management.controller.ts",{"_index":1921,"title":{},"body":{"controllers/IssuerManagementController.html":{},"coverage.html":{}}}],["management.controller.ts:83",{"_index":1931,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["management/credentials",{"_index":1262,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["management/issuance",{"_index":1828,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["management/issuer",{"_index":1920,"title":{},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["managing",{"_index":1115,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"classes/FileSystemKeyService.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"modules/SessionModule.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["many",{"_index":1213,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["manytoone",{"_index":1082,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{}}}],["manytoone(undefined",{"_index":1220,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["map",{"_index":2332,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{}}}],["map((_",{"_index":3493,"title":{},"body":{"injectables/StatusListService.html":{}}}],["map((error",{"_index":1897,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["mapping",{"_index":1096,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity",{"_index":3455,"title":{},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity.ts",{"_index":3525,"title":{},"body":{"entities/StatusMapping.html":{},"coverage.html":{}}}],["mapping.entity.ts:12",{"_index":3529,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:15",{"_index":3527,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:6",{"_index":3531,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:9",{"_index":3530,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mark",{"_index":3903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marks",{"_index":3377,"title":{},"body":{"injectables/SessionService.html":{}}}],["match",{"_index":282,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/ResolverService.html":{}}}],["matches",{"_index":267,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["matching",{"_index":32,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":2125,"title":{},"body":{"entities/KeyEntity.html":{}}}],["math.floor(date.now",{"_index":2353,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{}}}],["math.floor(new",{"_index":2677,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["math.random",{"_index":3496,"title":{},"body":{"injectables/StatusListService.html":{}}}],["math.round(new",{"_index":1381,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["max",{"_index":1957,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["maybe",{"_index":2582,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["media",{"_index":3685,"title":{},"body":{"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mediatype",{"_index":3651,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{}}}],["mediatype.application_jwt",{"_index":3664,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["mediatype.application_jwt)@get('openid",{"_index":3653,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["message",{"_index":3261,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["messages",{"_index":1886,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["messages.join",{"_index":1900,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["messages.length",{"_index":1899,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["messages.push",{"_index":1888,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["metadata",{"_index":1039,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsMetadataController.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/IssuerMetadata.html":{},"injectables/Oid4vciService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["metadata+jwt",{"_index":3694,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["metadata.'})@apiproduces(mediatype.application_json",{"_index":3652,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["metadata.controller",{"_index":1993,"title":{},"body":{"modules/IssuerModule.html":{}}}],["metadata.controller.ts",{"_index":1292,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"coverage.html":{}}}],["metadata.controller.ts:15",{"_index":1299,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["metadata.controller.ts:25",{"_index":1296,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["metadata.credential_issuer",{"_index":3695,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["metadata.dto",{"_index":3057,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/WellKnownService.html":{}}}],["metadata.dto.ts",{"_index":1240,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"coverage.html":{}}}],["metadata.dto.ts:12",{"_index":1251,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:16",{"_index":1256,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:20",{"_index":1259,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:24",{"_index":1254,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:33",{"_index":1258,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:37",{"_index":1255,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:41",{"_index":1249,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:8",{"_index":1257,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata/credentials",{"_index":1291,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["metadata/dto/credential",{"_index":291,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/VCT.html":{},"coverage.html":{}}}],["metadata/dto/schema",{"_index":1085,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/SchemaResponse.html":{},"coverage.html":{}}}],["metadata/vct/${credentialconfig.id",{"_index":1397,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["method",{"_index":239,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/typealiases.html":{}}}],["methods",{"_index":84,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigHelper.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["metric/metric.module",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["metricmodule",{"_index":118,"title":{"modules/MetricModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetricModule.html":{},"index.html":{},"modules.html":{}}}],["metrics",{"_index":908,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"modules/MetricModule.html":{},"injectables/SessionService.html":{}}}],["middleware",{"_index":3846,"title":{},"body":{"properties.html":{}}}],["mirko",{"_index":3855,"title":{},"body":{"properties.html":{}}}],["miscellaneous",{"_index":3825,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["misused",{"_index":2998,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["mkdirsync",{"_index":2195,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["mkdirsync(dirname(fullpath",{"_index":2202,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["mm",{"_index":229,"title":{},"body":{"modules/AppModule.html":{},"injectables/WellKnownService.html":{}}}],["modify",{"_index":1960,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["modifying",{"_index":3266,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["module",{"_index":100,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":102,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["mollik",{"_index":3856,"title":{},"body":{"properties.html":{}}}],["more",{"_index":95,"title":{},"body":{"controllers/AppController.html":{},"entities/Session.html":{}}}],["move",{"_index":2336,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{}}}],["mso_mdoc",{"_index":2668,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["multi",{"_index":3152,"title":{},"body":{"entities/Session.html":{}}}],["multiple",{"_index":2568,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["mysql2",{"_index":3809,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":47,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"entities/DisplayEntity.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["name)?.id",{"_index":3009,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["namedcurve",{"_index":3885,"title":{},"body":{"miscellaneous/variables.html":{}}}],["necessary",{"_index":2627,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["need",{"_index":315,"title":{},"body":{"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"controllers/Oid4vpController.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{}}}],["needed",{"_index":213,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{}}}],["needs",{"_index":831,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["nestinterceptor",{"_index":3228,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["nestjs",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"modules/KeyModule.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["nestjs/axios",{"_index":1983,"title":{},"body":{"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"injectables/Oid4vciService.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"modules/VerifierModule.html":{},"injectables/WebhookService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":88,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"modules/VerifierModule.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"modules/DatabaseModule.html":{},"classes/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":2017,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":3783,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":508,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":3787,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionService.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":90,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":1797,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":510,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"injectables/Oid4vciService.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["new",{"_index":426,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":2994,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/StatusListService.html":{}}}],["next.handle",{"_index":3234,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["next.handle().pipe",{"_index":3249,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["node:crypto",{"_index":628,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{}}}],["node:fs",{"_index":2452,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["node:path",{"_index":2453,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["nodejs",{"_index":1334,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["noncce",{"_index":3155,"title":{},"body":{"entities/Session.html":{}}}],["nonce",{"_index":2391,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["nonce(@sessionentity",{"_index":2419,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["nonce(session",{"_index":2396,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["nonce_endpoint",{"_index":2494,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["noncerequest",{"_index":2430,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["noncerequest(session",{"_index":2444,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["none",{"_index":278,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/WebhookService.html":{}}}],["not(isnull",{"_index":3398,"title":{},"body":{"injectables/SessionService.html":{}}}],["notfoundexception",{"_index":3195,"title":{},"body":{"guards/SessionGuard.html":{}}}],["notification",{"_index":1104,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["notification.id",{"_index":2572,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notification_endpoint",{"_index":1248,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/Oid4vciService.html":{}}}],["notification_id",{"_index":2277,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["notificationevent",{"_index":2278,"title":{},"body":{"classes/NotificationRequestDto.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["notificationid",{"_index":2560,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notificationindex",{"_index":2577,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["notificationrequestdto",{"_index":2275,"title":{"classes/NotificationRequestDto.html":{}},"body":{"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"coverage.html":{}}}],["notifications",{"_index":77,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["notifications(body",{"_index":2399,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["notifywebhook",{"_index":1105,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"entities/Session.html":{}}}],["notitification",{"_index":2441,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["now",{"_index":490,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"controllers/IssuerManagementController.html":{},"injectables/OAuthService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["null",{"_index":579,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/RegistrarService.html":{}}}],["nullable",{"_index":875,"title":{},"body":{"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{}}}],["number",{"_index":547,"title":{},"body":{"modules/AuthModule.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/CredentialsService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/ParResponseDto.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"modules/SessionModule.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{}}}],["oauth",{"_index":2283,"title":{},"body":{"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["oauth.controller",{"_index":2306,"title":{},"body":{"modules/OAuthModule.html":{}}}],["oauth.service",{"_index":2296,"title":{},"body":{"controllers/OAuthController.html":{},"modules/OAuthModule.html":{}}}],["oauth2",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/RegistrarService.html":{}}}],["oauth2authorizationserver",{"_index":710,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["oauth2authorizationserverresponse",{"_index":2361,"title":{"classes/Oauth2AuthorizationServerResponse.html":{}},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["oauth2client",{"_index":2919,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["oauth2resourceserver",{"_index":2451,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["oauth_client_id",{"_index":2308,"title":{},"body":{"modules/OAuthModule.html":{},"miscellaneous/variables.html":{}}}],["oauth_client_secret",{"_index":2309,"title":{},"body":{"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"miscellaneous/variables.html":{}}}],["oauth_validation_schema",{"_index":2307,"title":{},"body":{"modules/OAuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["oauthcontroller",{"_index":2281,"title":{"controllers/OAuthController.html":{}},"body":{"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"coverage.html":{}}}],["oauthmodule",{"_index":2300,"title":{"modules/OAuthModule.html":{}},"body":{"modules/OAuthModule.html":{},"index.html":{},"modules.html":{}}}],["oauthservice",{"_index":2295,"title":{"injectables/OAuthService.html":{}},"body":{"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"coverage.html":{},"index.html":{}}}],["obj",{"_index":294,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/S3FileStorage.html":{}}}],["obj.body",{"_index":3120,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["obj.contentlength",{"_index":3122,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["obj.contenttype",{"_index":3121,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["obj.method",{"_index":297,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["object",{"_index":301,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/IssuerManagementController.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["object.dto",{"_index":2180,"title":{},"body":{"classes/KeyService.html":{}}}],["object.dto.ts",{"_index":2158,"title":{},"body":{"classes/KeyObj.html":{},"coverage.html":{}}}],["object.dto.ts:11",{"_index":2160,"title":{},"body":{"classes/KeyObj.html":{}}}],["object.dto.ts:15",{"_index":2161,"title":{},"body":{"classes/KeyObj.html":{}}}],["object.dto.ts:19",{"_index":2159,"title":{},"body":{"classes/KeyObj.html":{}}}],["object.entries(params",{"_index":2696,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["object.keys(res.vp_token",{"_index":2881,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["object.values",{"_index":1889,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["observable",{"_index":3220,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["obtain",{"_index":2289,"title":{},"body":{"controllers/OAuthController.html":{}}}],["offer",{"_index":836,"title":{},"body":{"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["offer.credentialoffer",{"_index":2521,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["offer.credentialofferobject",{"_index":2519,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["offered",{"_index":2580,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["offerrequestdto",{"_index":1924,"title":{"classes/OfferRequestDto.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"coverage.html":{}}}],["offerresponse",{"_index":1927,"title":{"classes/OfferResponse.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"coverage.html":{}}}],["offerurl",{"_index":2520,"title":{},"body":{"injectables/Oid4vciService.html":{},"entities/Session.html":{}}}],["oid4vci",{"_index":305,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"miscellaneous/variables.html":{}}}],["oid4vci/dto/offer",{"_index":1936,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["oid4vci/entities/display.entity",{"_index":1996,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/oid4vci.controller",{"_index":1997,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/oid4vci.service",{"_index":1998,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/util",{"_index":736,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["oid4vcicontroller",{"_index":1981,"title":{"controllers/Oid4vciController.html":{}},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"coverage.html":{}}}],["oid4vciservice",{"_index":895,"title":{"injectables/Oid4vciService.html":{}},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["oid4vp",{"_index":312,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"interfaces/SessionLogContext.html":{},"miscellaneous/variables.html":{}}}],["oid4vp.controller",{"_index":2619,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["oid4vp.service",{"_index":2605,"title":{},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["oid4vp/dto/presentation",{"_index":2761,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vp/oid4vp.module",{"_index":2793,"title":{},"body":{"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{}}}],["oid4vp/oid4vp.service",{"_index":2762,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vpcontroller",{"_index":2590,"title":{"controllers/Oid4vpController.html":{}},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"coverage.html":{}}}],["oid4vpmodule",{"_index":1976,"title":{"modules/Oid4vpModule.html":{}},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["oid4vpservice",{"_index":701,"title":{"injectables/Oid4vpService.html":{}},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"coverage.html":{},"index.html":{}}}],["oidc",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["oidcdiscoverydto",{"_index":388,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["oidcissuerurl",{"_index":2967,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/.well",{"_index":2973,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/protocol/openid",{"_index":2970,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["older",{"_index":3380,"title":{},"body":{"injectables/SessionService.html":{}}}],["on(\"error",{"_index":2213,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["on(\"finish",{"_index":2211,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["onapplicationbootstrap",{"_index":886,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{}}}],["once",{"_index":2932,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["one",{"_index":1630,"title":{},"body":{"classes/FileSystemKeyService.html":{},"injectables/RegistrarService.html":{}}}],["onetomany",{"_index":1083,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{}}}],["onetomany(undefined",{"_index":1811,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["onmoduleinit",{"_index":1855,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["ontenantinit",{"_index":1530,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["ontenantinit(tenantid",{"_index":1543,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["openid",{"_index":379,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{}}}],["openid4vc",{"_index":321,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"miscellaneous/typealiases.html":{}}}],["openid4vc/oauth2",{"_index":729,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"dependencies.html":{}}}],["openid4vc/openid4vci",{"_index":1078,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["openid4vc/openid4vp",{"_index":3795,"title":{},"body":{"dependencies.html":{}}}],["openid4vc/utils",{"_index":3796,"title":{},"body":{"dependencies.html":{}}}],["openid4vci",{"_index":601,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/WellKnownController.html":{}}}],["openid4vcidraftversion",{"_index":2456,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["openid4vcidraftversion.draft14",{"_index":2504,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["openid4vciissuer",{"_index":2449,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["openid4vp://?${(await",{"_index":819,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["openid4vp://?${values.uri",{"_index":2774,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["openidvci",{"_index":3693,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["operation",{"_index":1130,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["operations",{"_index":1439,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"controllers/Oid4vpController.html":{},"injectables/RegistrarService.html":{}}}],["optional",{"_index":17,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/OfferRequestDto.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":224,"title":{},"body":{"modules/AppModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["options.audience",{"_index":1770,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["options.dto",{"_index":2639,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["options.dto.ts",{"_index":2785,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{},"coverage.html":{}}}],["options.expiresin",{"_index":1759,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["opts",{"_index":1586,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["opts?.acl",{"_index":3107,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["opts?.checksum",{"_index":3110,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["opts?.contenttype",{"_index":2217,"title":{},"body":{"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["opts?.metadata",{"_index":3106,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["order",{"_index":2857,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{}}}],["original",{"_index":3267,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["originaldraftversion",{"_index":2503,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["originalname",{"_index":1735,"title":{},"body":{"injectables/FilesService.html":{}}}],["otherwhise",{"_index":1937,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["otherwise",{"_index":530,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["ov",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["over",{"_index":1166,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["override",{"_index":1955,"title":{},"body":{"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["overrides",{"_index":2379,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["overview",{"_index":3835,"title":{"index.html":{}},"body":{"index.html":{}}}],["overwrite",{"_index":1871,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["overwritten",{"_index":1033,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{}}}],["p",{"_index":1554,"title":{},"body":{"injectables/EncryptionService.html":{},"miscellaneous/variables.html":{}}}],["package",{"_index":3777,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pairs",{"_index":563,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["par",{"_index":607,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["par(@body",{"_index":651,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["par(body",{"_index":618,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["param",{"_index":412,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["param('id",{"_index":1287,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/KeyController.html":{},"controllers/SessionController.html":{}}}],["param('tenantid",{"_index":1304,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["parameter",{"_index":555,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["parameters",{"_index":275,"title":{},"body":{"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigHelper.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":2692,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["parresponsedto",{"_index":643,"title":{"classes/ParResponseDto.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/ParResponseDto.html":{},"coverage.html":{}}}],["parse",{"_index":2831,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parseaccesstokenrequest",{"_index":774,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsechallengerequest",{"_index":694,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsechallengerequest(body",{"_index":711,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["parsed",{"_index":2832,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parsedaccesstokenauthorizationcoderequestgrant",{"_index":737,"title":{"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["parsedaccesstokenpreauthorizedcoderequestgrant",{"_index":739,"title":{"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["parsedaccesstokenrequest",{"_index":773,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.accesstokenrequest",{"_index":789,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.dpop?.jwt",{"_index":793,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant",{"_index":788,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.granttype",{"_index":785,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.preauthorizedcode",{"_index":795,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.txcode",{"_index":797,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedcredentialrequest",{"_index":2524,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest.credentialconfigurationid",{"_index":2542,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest.proofs.jwt",{"_index":2549,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest.proofs?.jwt?.length",{"_index":2544,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parsedcredentialrequest?.proofs?.jwt",{"_index":2528,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["parseloglevel",{"_index":2231,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["parseloglevel(level",{"_index":2243,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["parseresponse",{"_index":2805,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parseresponse(res",{"_index":2827,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["part",{"_index":2844,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parties",{"_index":2918,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["party",{"_index":2938,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["pass",{"_index":1959,"title":{},"body":{"controllers/IssuerManagementController.html":{},"injectables/RegistrarService.html":{}}}],["passed",{"_index":1034,"title":{},"body":{"entities/CredentialConfig.html":{},"interfaces/CryptoImplementation.html":{},"injectables/Oid4vciService.html":{}}}],["passport",{"_index":2055,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportjwtsecret",{"_index":2051,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportmodule",{"_index":507,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":2050,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":2035,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":1489,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["path",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"modules/DatabaseModule.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["payload",{"_index":454,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialConfigService.html":{},"classes/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["payload.cnf",{"_index":2876,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["payload.id",{"_index":1176,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["payload.iss",{"_index":3058,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.iss}/.well",{"_index":3072,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.sub",{"_index":1768,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["payloads",{"_index":3048,"title":{},"body":{"injectables/ResolverService.html":{}}}],["peculiar/x509",{"_index":3797,"title":{},"body":{"dependencies.html":{}}}],["pem",{"_index":24,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/FileSystemKeyService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{}}}],["perform",{"_index":1790,"title":{},"body":{"controllers/HealthController.html":{}}}],["periodically",{"_index":2951,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["pg",{"_index":3812,"title":{},"body":{"dependencies.html":{}}}],["pid",{"_index":1946,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["pid,hostname",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["pino",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"modules/KeyModule.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"dependencies.html":{}}}],["pino?tab=readme",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["pinohttp",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["pinologger",{"_index":1121,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"modules/KeyModule.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["pkcecodechallengemethod",{"_index":727,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["pkcecodechallengemethod.s256",{"_index":759,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["placeholders",{"_index":2499,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["plaintoclass",{"_index":1145,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["plaintoclass(credentialconfig",{"_index":1182,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["plaintoclass(issuancedto",{"_index":1882,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["plaintoclass(presentationconfig",{"_index":2854,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["please",{"_index":933,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["png",{"_index":1939,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["port",{"_index":1485,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["post",{"_index":389,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["post('challenge",{"_index":664,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post('credential",{"_index":2411,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('credential')@sessionlogger('session",{"_index":2393,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('nonce",{"_index":2417,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('nonce')@sessionlogger('nonce",{"_index":2397,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('notification",{"_index":2414,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('notification')@sessionlogger('notification_id",{"_index":2400,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('oauth2/token",{"_index":413,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('oauth2/token')@apibody({type",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('offer",{"_index":1958,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["post('par",{"_index":650,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post('request",{"_index":2769,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["post('revoke",{"_index":3176,"title":{},"body":{"controllers/SessionController.html":{}}}],["post('token",{"_index":661,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/OAuthController.html":{}}}],["post()@sessionlogger('session",{"_index":2601,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["postgres",{"_index":1483,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgres').default('sqlite",{"_index":1467,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["pre",{"_index":325,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["preauthorizedcode",{"_index":740,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["preauthorizedcodegrantidentifier",{"_index":728,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["predefined",{"_index":2823,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["preferred",{"_index":1250,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["prefix",{"_index":599,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["preheader",{"_index":3504,"title":{},"body":{"injectables/StatusListService.html":{}}}],["prepayload",{"_index":3503,"title":{},"body":{"injectables/StatusListService.html":{}}}],["present",{"_index":298,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["presentation",{"_index":303,"title":{},"body":{"classes/AuthConfigValidator.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["presentationconfig",{"_index":843,"title":{"entities/PresentationConfig.html":{}},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"coverage.html":{}}}],["presentationconfig.webhook",{"_index":2700,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationconfig?.presentation.webhook",{"_index":845,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["presentationduringissuance",{"_index":281,"title":{"classes/PresentationDuringIssuance.html":{}},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/VCT.html":{},"coverage.html":{}}}],["presentationduringissuanceconfig",{"_index":280,"title":{"classes/PresentationDuringIssuanceConfig.html":{}},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["presentationexists",{"_index":2852,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["presentationmanagementcontroller",{"_index":2746,"title":{"controllers/PresentationManagementController.html":{}},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"coverage.html":{}}}],["presentationrequest",{"_index":2754,"title":{"classes/PresentationRequest.html":{}},"body":{"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"coverage.html":{}}}],["presentationrequestoptions",{"_index":2631,"title":{"interfaces/PresentationRequestOptions.html":{}},"body":{"injectables/Oid4vpService.html":{},"interfaces/PresentationRequestOptions.html":{},"coverage.html":{}}}],["presentations",{"_index":2593,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["presentations.controller",{"_index":2795,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["presentations.service",{"_index":2764,"title":{},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{}}}],["presentations/dto/auth",{"_index":2636,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentations/presentations.module",{"_index":2618,"title":{},"body":{"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["presentations/presentations.service",{"_index":2637,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationsmodule",{"_index":2617,"title":{"modules/PresentationsModule.html":{}},"body":{"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["presentationsservice",{"_index":2623,"title":{"injectables/PresentationsService.html":{}},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"coverage.html":{},"index.html":{}}}],["presented",{"_index":316,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["presigned",{"_index":1601,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["presigner",{"_index":3102,"title":{},"body":{"classes/S3FileStorage.html":{},"dependencies.html":{}}}],["pretty",{"_index":198,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"dependencies.html":{}}}],["primary",{"_index":877,"title":{},"body":{"entities/CertEntity.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"entities/DisplayEntity.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{}}}],["primarycolumn",{"_index":966,"title":{},"body":{"entities/ClientEntry.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/Session.html":{}}}],["primarycolumn('uuid",{"_index":3137,"title":{},"body":{"entities/Session.html":{}}}],["primarygeneratedcolumn",{"_index":1822,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["primarygeneratedcolumn(\"uuid",{"_index":1824,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":1816,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["private",{"_index":411,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{}}}],["private_key",{"_index":3269,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["privateencryptionkey",{"_index":1560,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["privatekey",{"_index":1429,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"miscellaneous/variables.html":{}}}],["privatekey.alg",{"_index":1678,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["privatekey.ext",{"_index":1682,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["privatekey.key_ops",{"_index":1683,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["privatekey.kid",{"_index":1666,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["privatekeyinstance",{"_index":1695,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["privatekeyjwk",{"_index":1423,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/FileSystemKeyService.html":{},"miscellaneous/variables.html":{}}}],["proceed",{"_index":3219,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["process",{"_index":324,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{}}}],["process.env.node_env",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["process_presentation_response",{"_index":2708,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["processes",{"_index":2634,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["production",{"_index":187,"title":{},"body":{"modules/AppModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["progress",{"_index":3206,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["prom",{"_index":890,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/SessionService.html":{},"dependencies.html":{}}}],["prometheus",{"_index":513,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"modules/MetricModule.html":{},"modules/SessionModule.html":{},"dependencies.html":{}}}],["prometheus/dist/injector",{"_index":3382,"title":{},"body":{"injectables/SessionService.html":{}}}],["prometheusmodule",{"_index":2271,"title":{},"body":{"modules/MetricModule.html":{}}}],["prometheusmodule.register",{"_index":2273,"title":{},"body":{"modules/MetricModule.html":{}}}],["promise",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["promise((resolve",{"_index":2204,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["promise.all(att",{"_index":2888,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["promise.resolve",{"_index":2218,"title":{},"body":{"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["promise.resolve(existssync(join(this.basedir",{"_index":2221,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["promise.resolve(this.storage.delete(key",{"_index":1737,"title":{},"body":{"injectables/FilesService.html":{}}}],["promise.resolve(this.storage.getstream(key",{"_index":1736,"title":{},"body":{"injectables/FilesService.html":{}}}],["promise.resolve(undefined",{"_index":1743,"title":{},"body":{"injectables/FilesService.html":{}}}],["promises",{"_index":2999,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["proof_signing_alg_values_supported",{"_index":1345,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["proof_types_supported",{"_index":1344,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["proofcount",{"_index":2543,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["proofverified",{"_index":2559,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["properties",{"_index":14,"title":{"properties.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/CryptoImplementation.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"classes/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NotificationRequestDto.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"properties.html":{}}}],["property",{"_index":299,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{}}}],["protect",{"_index":2272,"title":{},"body":{"modules/MetricModule.html":{}}}],["protected",{"_index":1617,"title":{},"body":{"classes/FileSystemKeyService.html":{},"classes/KeyService.html":{}}}],["protocol",{"_index":2530,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["protocol}//${req.host}${req.url",{"_index":2533,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["provide",{"_index":2153,"title":{},"body":{"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["provided",{"_index":78,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{}}}],["provider",{"_index":429,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/RegistrarService.html":{}}}],["providers",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["provides",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{},"injectables/IssuanceService.html":{},"modules/RegistrarModule.html":{}}}],["providing",{"_index":1788,"title":{},"body":{"controllers/HealthController.html":{}}}],["public",{"_index":22,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"controllers/KeyController.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public.decorator",{"_index":2020,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["public_url",{"_index":1999,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"miscellaneous/variables.html":{}}}],["publicbaseurl",{"_index":3087,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["publicjwk",{"_index":806,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["publickey",{"_index":1428,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/FileSystemKeyService.html":{},"classes/KeyObj.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["publickeyinstance",{"_index":1699,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["publickeyjwk",{"_index":1427,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["publicurl",{"_index":466,"title":{},"body":{"controllers/AuthController.html":{}}}],["publicurl}/.well",{"_index":472,"title":{},"body":{"controllers/AuthController.html":{}}}],["publicurl}/oauth2/token",{"_index":470,"title":{},"body":{"controllers/AuthController.html":{}}}],["purpose",{"_index":3023,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["pushed",{"_index":620,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{}}}],["pushed_authorization_request_endpoint",{"_index":756,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["put",{"_index":1573,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["put(key",{"_index":1583,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["putobjectcommand",{"_index":3098,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["putoptions",{"_index":1587,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["qr",{"_index":1944,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["qrcode",{"_index":1933,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["qrcode.tobuffer(values.uri",{"_index":1965,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["qrcodebuffer",{"_index":1964,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["queries",{"_index":617,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["queries.request_uri",{"_index":764,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["query",{"_index":629,"title":{},"body":{"controllers/AuthorizeController.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{}}}],["querydeeppartialentity",{"_index":3354,"title":{},"body":{"injectables/SessionService.html":{}}}],["querystring",{"_index":2695,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["r",{"_index":3074,"title":{},"body":{"injectables/ResolverService.html":{}}}],["r.data",{"_index":3075,"title":{},"body":{"injectables/ResolverService.html":{}}}],["random",{"_index":1677,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["randomness",{"_index":3477,"title":{},"body":{"injectables/StatusListService.html":{}}}],["randomuuid",{"_index":627,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/FilesService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["ratelimit",{"_index":2070,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["re",{"_index":817,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["reach",{"_index":849,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["reachable",{"_index":3077,"title":{},"body":{"injectables/ResolverService.html":{}}}],["react",{"_index":952,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["read",{"_index":3108,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["readable",{"_index":1585,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["readable.from(body",{"_index":2209,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["readdirsync",{"_index":1146,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readdirsync(configpath",{"_index":1159,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readdirsync(path",{"_index":1171,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readfilesync",{"_index":1147,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{}}}],["readfilesync(join(path",{"_index":1173,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readonly",{"_index":647,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["real",{"_index":2333,"title":{},"body":{"injectables/OAuthService.html":{}}}],["really",{"_index":1229,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["receive",{"_index":2603,"title":{},"body":{"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{}}}],["received",{"_index":3629,"title":{},"body":{"injectables/WebhookService.html":{}}}],["record",{"_index":1028,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"interfaces/FileStorage.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"classes/SchemaResponse.html":{},"injectables/WebhookService.html":{}}}],["recursive",{"_index":2203,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["recursively",{"_index":1890,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["redacted",{"_index":3273,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["redirect",{"_index":326,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["redirect_uri",{"_index":673,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["redirected",{"_index":309,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["reference",{"_index":1054,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/FileSystemKeyService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["reflect",{"_index":3818,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":2011,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["refresh",{"_index":2946,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["refresh_token",{"_index":3270,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["refreshaccesstoken",{"_index":2925,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["refreshes",{"_index":2950,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["regcert",{"_index":2647,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["region",{"_index":3560,"title":{},"body":{"modules/StorageModule.html":{}}}],["register",{"_index":3369,"title":{},"body":{"injectables/SessionService.html":{}}}],["registrar",{"_index":2901,"title":{},"body":{"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar.service",{"_index":2904,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["registrar/generated",{"_index":3041,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["registrar/registrar.module",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["registrar/registrar.service",{"_index":900,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vpService.html":{}}}],["registrar_oidc_client_id",{"_index":2910,"title":{},"body":{"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar_oidc_client_secret",{"_index":2911,"title":{},"body":{"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar_oidc_url",{"_index":2907,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["registrar_url",{"_index":2906,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["registrar_validation_schema",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"modules/RegistrarModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["registrarentity",{"_index":2889,"title":{"entities/RegistrarEntity.html":{}},"body":{"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"coverage.html":{}}}],["registrarmodule",{"_index":119,"title":{"modules/RegistrarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["registrarrepository",{"_index":2926,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["registrarservice",{"_index":899,"title":{"injectables/RegistrarService.html":{}},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vpService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"coverage.html":{},"index.html":{}}}],["registration",{"_index":2733,"title":{},"body":{"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["registrationcert",{"_index":2651,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{}}}],["registrationcertid",{"_index":2839,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["registrationcertificatecontrollerall",{"_index":2960,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["registrationcertificatecontrollerregister",{"_index":2961,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["registrationcertificatecreation",{"_index":3039,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["registrationcertificaterequest",{"_index":2730,"title":{"classes/RegistrationCertificateRequest.html":{}},"body":{"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"coverage.html":{}}}],["reject",{"_index":2205,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["related",{"_index":2148,"title":{},"body":{"modules/KeyModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["relations",{"_index":1206,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{}}}],["relationship",{"_index":1214,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["relevant",{"_index":2421,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["reload",{"_index":2247,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["reloadconfiguration",{"_index":2232,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["relying",{"_index":2917,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerfindall",{"_index":2962,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerregister",{"_index":2963,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["relyingpartyid",{"_index":2892,"title":{},"body":{"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{}}}],["remove",{"_index":1680,"title":{},"body":{"classes/FileSystemKeyService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["removeclient",{"_index":2316,"title":{},"body":{"injectables/OAuthService.html":{}}}],["removeclient(clientid",{"_index":2328,"title":{},"body":{"injectables/OAuthService.html":{}}}],["replace",{"_index":2498,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["replace(\"https",{"_index":3012,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["repository",{"_index":891,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{},"injectables/IssuanceService.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"properties.html":{}}}],["representing",{"_index":564,"title":{},"body":{"interfaces/AuthResponse.html":{},"interfaces/IssuerMetadata.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{}}}],["represents",{"_index":1241,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyObj.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"entities/Session.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["repsonse",{"_index":10,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{}}}],["req",{"_index":235,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/JwtStrategy.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"miscellaneous/functions.html":{}}}],["req+jwt",{"_index":2681,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["req.body",{"_index":2527,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["req.headers[\"content",{"_index":247,"title":{},"body":{"modules/AppModule.html":{}}}],["req.headers[\"user",{"_index":245,"title":{},"body":{"modules/AppModule.html":{}}}],["req.id",{"_index":3029,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["req.method",{"_index":240,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["req.params?.session",{"_index":237,"title":{},"body":{"modules/AppModule.html":{}}}],["req.params?.tenantid",{"_index":249,"title":{},"body":{"modules/AppModule.html":{}}}],["req.url",{"_index":241,"title":{},"body":{"modules/AppModule.html":{}}}],["request",{"_index":12,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["request.'})@isenum(responsetype",{"_index":2383,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.client_id",{"_index":2344,"title":{},"body":{"injectables/OAuthService.html":{}}}],["request.client_secret",{"_index":2345,"title":{},"body":{"injectables/OAuthService.html":{}}}],["request.dto",{"_index":642,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{}}}],["request.dto.ts",{"_index":667,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/TokenRequestDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["request.dto.ts:12",{"_index":679,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/TokenRequestDto.html":{}}}],["request.dto.ts:15",{"_index":684,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:17",{"_index":3040,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["request.dto.ts:18",{"_index":686,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:19",{"_index":3577,"title":{},"body":{"classes/TokenRequestDto.html":{}}}],["request.dto.ts:21",{"_index":688,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/OfferRequestDto.html":{}}}],["request.dto.ts:24",{"_index":680,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:26",{"_index":2781,"title":{},"body":{"classes/PresentationRequest.html":{},"classes/TokenRequestDto.html":{}}}],["request.dto.ts:27",{"_index":681,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:28",{"_index":2380,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:30",{"_index":682,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:33",{"_index":685,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/PresentationRequest.html":{},"classes/TokenRequestDto.html":{}}}],["request.dto.ts:35",{"_index":2378,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:36",{"_index":678,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:41",{"_index":2782,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["request.dto.ts:42",{"_index":2376,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:49",{"_index":2385,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:53",{"_index":2388,"title":{},"body":{"classes/OfferResponse.html":{}}}],["request.dto.ts:54",{"_index":2387,"title":{},"body":{"classes/OfferResponse.html":{}}}],["request.dto.ts:6",{"_index":683,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.dto.ts:9",{"_index":687,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.header",{"_index":2683,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.headers['accept",{"_index":3882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.headers['content",{"_index":3244,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.headers['user",{"_index":3243,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.method",{"_index":3239,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.params.session",{"_index":3197,"title":{},"body":{"guards/SessionGuard.html":{}}}],["request.params?.tenantid",{"_index":3238,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.params[sessionidparam",{"_index":3237,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.payload",{"_index":2685,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.scope",{"_index":2348,"title":{},"body":{"injectables/OAuthService.html":{}}}],["request.session",{"_index":3199,"title":{},"body":{"guards/SessionGuard.html":{},"miscellaneous/variables.html":{}}}],["request.url",{"_index":3240,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.user",{"_index":3574,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["request/response",{"_index":2251,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["request_error",{"_index":3259,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_start",{"_index":3242,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_success",{"_index":3252,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_uri",{"_index":652,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["requested",{"_index":2424,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["requestid",{"_index":2599,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{}}}],["requests",{"_index":604,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["requesturl",{"_index":2701,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["require_pushed_authorization_requests",{"_index":755,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["required",{"_index":70,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"modules/RegistrarModule.html":{},"classes/SchemaResponse.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/variables.html":{}}}],["requiredclaimkeys",{"_index":2885,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requiredfields",{"_index":2828,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requires",{"_index":2372,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["res",{"_index":250,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["res.data",{"_index":2875,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["res.data![\"crt",{"_index":3019,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.data![\"id",{"_index":3020,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.data![\"jwt",{"_index":3037,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.data?.filter",{"_index":3027,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.error",{"_index":3015,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.payload",{"_index":1565,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["res.redirect(`${values.redirect_uri}?code=${code",{"_index":771,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.send",{"_index":859,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.send(qrcodebuffer",{"_index":1968,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.send(values",{"_index":1969,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.setheader('content",{"_index":1966,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.state",{"_index":2705,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["res.status",{"_index":932,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["res.status(400).send(response",{"_index":847,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.statuscode",{"_index":252,"title":{},"body":{"modules/AppModule.html":{}}}],["res.value",{"_index":2476,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["reset",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["resolve",{"_index":2212,"title":{},"body":{"classes/LocalFileStorage.html":{},"injectables/ResolverService.html":{}}}],["resolvepublickey",{"_index":3049,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolvepublickey(payload",{"_index":3051,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolver.service",{"_index":3046,"title":{},"body":{"modules/ResolverModule.html":{}}}],["resolver/resolver.module",{"_index":2794,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["resolver/resolver.service",{"_index":2845,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["resolvermodule",{"_index":2791,"title":{"modules/ResolverModule.html":{}},"body":{"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"index.html":{},"modules.html":{}}}],["resolverservice",{"_index":2808,"title":{"injectables/ResolverService.html":{}},"body":{"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"coverage.html":{},"index.html":{}}}],["resolves",{"_index":1128,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/PresentationsService.html":{}}}],["resolving",{"_index":2812,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{}}}],["resource",{"_index":674,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/Oid4vciService.html":{}}}],["resourceserver",{"_index":2427,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["response",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["response.data",{"_index":2482,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["response.data!.find((item",{"_index":3007,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["response.data![\"id",{"_index":3005,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["response.dto",{"_index":396,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/FileSystemKeyService.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["response.dto.ts",{"_index":551,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:11",{"_index":595,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{}}}],["response.dto.ts:13",{"_index":2364,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:14",{"_index":3586,"title":{},"body":{"classes/TokenResponseDto.html":{}}}],["response.dto.ts:15",{"_index":1515,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:17",{"_index":2369,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:19",{"_index":1519,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:2",{"_index":3127,"title":{},"body":{"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:20",{"_index":3584,"title":{},"body":{"classes/TokenResponseDto.html":{}}}],["response.dto.ts:21",{"_index":2366,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:23",{"_index":1521,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:25",{"_index":2367,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:27",{"_index":3585,"title":{},"body":{"classes/TokenResponseDto.html":{}}}],["response.dto.ts:29",{"_index":2370,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:3",{"_index":3128,"title":{},"body":{"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:33",{"_index":2006,"title":{},"body":{"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:37",{"_index":2363,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:4",{"_index":2162,"title":{},"body":{"classes/KeyResponseDto.html":{},"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:5",{"_index":2368,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/SchemaResponse.html":{}}}],["response.dto.ts:8",{"_index":3583,"title":{},"body":{"classes/TokenResponseDto.html":{}}}],["response.dto.ts:9",{"_index":2373,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{}}}],["response.error",{"_index":3003,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["response.jwks.keys.find((key",{"_index":3078,"title":{},"body":{"injectables/ResolverService.html":{}}}],["response.statuscode",{"_index":3253,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["response.ts",{"_index":8,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"coverage.html":{}}}],["response_mode",{"_index":2663,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_processing",{"_index":2707,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_type",{"_index":675,"title":{},"body":{"classes/AuthorizeQueries.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["response_types_supported",{"_index":474,"title":{},"body":{"controllers/AuthController.html":{},"injectables/Oid4vpService.html":{}}}],["response_uri",{"_index":2661,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["responses",{"_index":3209,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsesize",{"_index":3254,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsestatus",{"_index":3631,"title":{},"body":{"injectables/WebhookService.html":{}}}],["responsetype",{"_index":1934,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["responsetype.qrcode",{"_index":1945,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsetype.uri",{"_index":1947,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsible",{"_index":1609,"title":{},"body":{"classes/FileSystemKeyService.html":{},"controllers/HealthController.html":{},"controllers/KeyController.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/SessionModule.html":{}}}],["result",{"_index":1129,"title":{},"body":{"injectables/CredentialConfigService.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{}}}],["result.payload",{"_index":2886,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["results",{"_index":31,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieval",{"_index":3673,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["retrieve",{"_index":656,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/EncryptionService.html":{},"injectables/PresentationsService.html":{}}}],["retrieves",{"_index":1133,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["retry",{"_index":934,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["return",{"_index":91,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":2784,"title":{},"body":{"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"injectables/WellKnownService.html":{}}}],["returning",{"_index":2064,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["returns",{"_index":87,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigHelper.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["reuse",{"_index":2721,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["review",{"_index":3696,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["revokeall",{"_index":3167,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(@body",{"_index":3188,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(value",{"_index":3174,"title":{},"body":{"controllers/SessionController.html":{}}}],["revoked",{"_index":18,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/StatusUpdateDto.html":{}}}],["rmdirsync",{"_index":2196,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["rmdirsync(join(this.basedir",{"_index":2220,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["root",{"_index":417,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/OAuthService.html":{},"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["rootpath",{"_index":257,"title":{},"body":{"modules/AppModule.html":{}}}],["rp",{"_index":3014,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["rp_name",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["rpid",{"_index":3002,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["rs256",{"_index":2356,"title":{},"body":{"injectables/OAuthService.html":{}}}],["rsa",{"_index":2052,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["run",{"_index":3373,"title":{},"body":{"injectables/SessionService.html":{}}}],["running",{"_index":94,"title":{},"body":{"controllers/AppController.html":{}}}],["rxjs",{"_index":2458,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/WebhookService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":3231,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["s3",{"_index":3089,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["s3\").default(\"local",{"_index":3546,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_access_key_id",{"_index":3552,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_bucket",{"_index":3551,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_endpoint",{"_index":3554,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_force_path_style",{"_index":3555,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_public_base_url",{"_index":3557,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_region",{"_index":3550,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_secret_access_key",{"_index":3553,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3client",{"_index":3085,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{}}}],["s3filestorage",{"_index":3082,"title":{"classes/S3FileStorage.html":{}},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["safeext",{"_index":1723,"title":{},"body":{"injectables/FilesService.html":{}}}],["saltgenerator",{"_index":1374,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["same",{"_index":815,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sanitize",{"_index":3226,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody",{"_index":3211,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody(body",{"_index":3222,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized",{"_index":3227,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized[field",{"_index":3272,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizes",{"_index":3224,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["satisfies",{"_index":2505,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["save",{"_index":654,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/FileSystemKeyService.html":{}}}],["saveuserupload",{"_index":1707,"title":{},"body":{"injectables/FilesService.html":{}}}],["saveuserupload(tenantid",{"_index":1716,"title":{},"body":{"injectables/FilesService.html":{}}}],["schedulemodule",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":254,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulerregistry",{"_index":3349,"title":{},"body":{"injectables/SessionService.html":{}}}],["schema",{"_index":1025,"title":{},"body":{"entities/CredentialConfig.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"modules/RegistrarModule.html":{},"classes/SchemaResponse.html":{},"miscellaneous/variables.html":{}}}],["schema(@param('id",{"_index":1306,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["schema(id",{"_index":1294,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["schema.org/draft/2020",{"_index":3125,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["schema_uri",{"_index":2743,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["schema_uri#integrity",{"_index":2744,"title":{},"body":{"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{}}}],["schemaresponse",{"_index":1065,"title":{"classes/SchemaResponse.html":{}},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/SchemaResponse.html":{},"coverage.html":{}}}],["scope",{"_index":676,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/OAuthService.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{}}}],["scopes_supported",{"_index":482,"title":{},"body":{"controllers/AuthController.html":{}}}],["sd",{"_index":1050,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/FileSystemKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["sdjwt",{"_index":1367,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwt.issue",{"_index":1389,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwtinstance",{"_index":2801,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["sdjwtvcinstance",{"_index":1337,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["sdk/client",{"_index":3100,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"dependencies.html":{}}}],["sdk/s3",{"_index":3101,"title":{},"body":{"classes/S3FileStorage.html":{},"dependencies.html":{}}}],["seconds",{"_index":465,"title":{},"body":{"controllers/AuthController.html":{},"entities/CredentialConfig.html":{},"classes/ParResponseDto.html":{},"classes/TokenResponseDto.html":{}}}],["secret",{"_index":445,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TokenRequestDto.html":{}}}],["secret'})@isstring",{"_index":3578,"title":{},"body":{"classes/TokenRequestDto.html":{}}}],["secretaccesskey",{"_index":3566,"title":{},"body":{"modules/StorageModule.html":{}}}],["secretkey",{"_index":1761,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["secretorkey",{"_index":2081,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secretorkeyprovider",{"_index":2043,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":1751,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["securely",{"_index":2335,"title":{},"body":{"injectables/OAuthService.html":{}}}],["selected",{"_index":329,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["send",{"_index":76,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["sendauthorizationcode",{"_index":695,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sendauthorizationcode(res",{"_index":715,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sendauthorizationresponse",{"_index":696,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sendauthorizationresponse(queries",{"_index":717,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sending",{"_index":853,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/WebhookService.html":{}}}],["sends",{"_index":948,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/WebhookService.html":{}}}],["sendwebhook",{"_index":3606,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sendwebhook(session",{"_index":3609,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sendwebhooknotification",{"_index":3607,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sendwebhooknotification(session",{"_index":3611,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sense",{"_index":3698,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["sensitive",{"_index":3225,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields",{"_index":3268,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields.foreach((field",{"_index":3271,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sent",{"_index":49,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{}}}],["serializers",{"_index":238,"title":{},"body":{"modules/AppModule.html":{}}}],["server",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["server')@apioperation({summary",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{}}}],["server's",{"_index":2365,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["servers",{"_index":1253,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["servestaticmodule",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forrootasync",{"_index":255,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":462,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerService.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["service.db",{"_index":1494,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["service_documentation",{"_index":488,"title":{},"body":{"controllers/AuthController.html":{}}}],["services",{"_index":73,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["session",{"_index":610,"title":{"entities/Session.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["session.auth_queries",{"_index":768,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.authorization_code",{"_index":800,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.controller",{"_index":3335,"title":{},"body":{"modules/SessionModule.html":{}}}],["session.credentialpayload",{"_index":3630,"title":{},"body":{"injectables/WebhookService.html":{}}}],["session.credentialpayload!.claims",{"_index":3628,"title":{},"body":{"injectables/WebhookService.html":{}}}],["session.credentialpayload?.claims?.[credentialconfigurationid",{"_index":1361,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["session.credentials",{"_index":829,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.id",{"_index":745,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{}}}],["session.issuanceid",{"_index":838,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["session.nonce",{"_index":2547,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifications",{"_index":2562,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifications.findindex",{"_index":2571,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifications.push",{"_index":2561,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifications[index",{"_index":2585,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifications[index].event",{"_index":2574,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["session.notifywebhook",{"_index":2583,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/WebhookService.html":{}}}],["session.requestid",{"_index":2641,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.service",{"_index":3181,"title":{},"body":{"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"modules/SessionModule.html":{}}}],["session.tenantid",{"_index":747,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["session.vp_nonce",{"_index":2713,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook",{"_index":2710,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.webhook!.auth",{"_index":3614,"title":{},"body":{"injectables/WebhookService.html":{}}}],["session.webhook!.auth.config.value",{"_index":3617,"title":{},"body":{"injectables/WebhookService.html":{}}}],["session.webhook!.auth.type",{"_index":3615,"title":{},"body":{"injectables/WebhookService.html":{}}}],["session.webhook!.auth?.type",{"_index":3622,"title":{},"body":{"injectables/WebhookService.html":{}}}],["session.webhook!.url",{"_index":3620,"title":{},"body":{"injectables/WebhookService.html":{}}}],["session/.well",{"_index":3642,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["session/authorize",{"_index":600,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["session/entities/session.entity",{"_index":632,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["session/oid4vp",{"_index":2592,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["session/session.decorator",{"_index":634,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{}}}],["session/session.guard",{"_index":636,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{}}}],["session/session.module",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["session/session.service",{"_index":638,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/WebhookService.html":{}}}],["session/vci",{"_index":2390,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["session_id",{"_index":2425,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["session_logger_key",{"_index":3232,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["session_tidy_up_interval",{"_index":3336,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["session_ttl",{"_index":3338,"title":{},"body":{"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["session_type",{"_index":3343,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["session_validation_schema",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"modules/SessionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessioncontroller",{"_index":3162,"title":{"controllers/SessionController.html":{}},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"coverage.html":{}}}],["sessionentity",{"_index":633,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessionguard",{"_index":635,"title":{"guards/SessionGuard.html":{}},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"guards/SessionGuard.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["sessionid",{"_index":236,"title":{},"body":{"modules/AppModule.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["sessionidparam",{"_index":3235,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["sessionlogcontext",{"_index":2460,"title":{"interfaces/SessionLogContext.html":{}},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{},"coverage.html":{}}}],["sessionlogger",{"_index":2405,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessionlogger('nonce",{"_index":2418,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["sessionlogger('notification_id",{"_index":2415,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["sessionlogger('session",{"_index":2412,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["sessionloggerinterceptor",{"_index":1977,"title":{"injectables/SessionLoggerInterceptor.html":{}},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{},"index.html":{}}}],["sessionloggerservice",{"_index":1978,"title":{"injectables/SessionLoggerService.html":{}},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"index.html":{}}}],["sessionmodule",{"_index":120,"title":{"modules/SessionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/SessionModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["sessionrepository",{"_index":3352,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessions",{"_index":3160,"title":{},"body":{"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["sessionscounter",{"_index":3350,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionservice",{"_index":637,"title":{"injectables/SessionService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"index.html":{}}}],["sessionstatus",{"_index":2459,"title":{},"body":{"injectables/Oid4vciService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["sessiontype",{"_index":3406,"title":{},"body":{"injectables/SessionService.html":{}}}],["set",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/EC_Public.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/typealiases.html":{}}}],["set+json",{"_index":3668,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["set+json')@get('jwks.json",{"_index":3649,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["setauthcode",{"_index":697,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["setauthcode(issuer_state",{"_index":719,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["setentry",{"_index":3461,"title":{},"body":{"injectables/StatusListService.html":{}}}],["setentry(id",{"_index":3478,"title":{},"body":{"injectables/StatusListService.html":{}}}],["setexpirationtime(expiresin",{"_index":1769,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setglobalconfig",{"_index":1984,"title":{},"body":{"modules/IssuerModule.html":{}}}],["setinterval(callback",{"_index":3393,"title":{},"body":{"injectables/SessionService.html":{}}}],["setissuedat",{"_index":1765,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setissuer(issuer",{"_index":1766,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setmetadata(is_public_key",{"_index":3901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(session_logger_key",{"_index":3902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setprotectedheader",{"_index":1763,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setprotectedheader(header",{"_index":1702,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["setstate",{"_index":3346,"title":{},"body":{"injectables/SessionService.html":{}}}],["setstate(session",{"_index":3375,"title":{},"body":{"injectables/SessionService.html":{}}}],["setsubject(options.subject",{"_index":1767,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["settimeout",{"_index":2991,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["setting",{"_index":945,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vciService.html":{}}}],["setupclient",{"_index":973,"title":{},"body":{"injectables/ClientService.html":{}}}],["setupclient(id",{"_index":954,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["sha",{"_index":1372,"title":{},"body":{"injectables/CredentialsService.html":{},"miscellaneous/variables.html":{}}}],["sha256",{"_index":1594,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["shouldenableautologging",{"_index":2233,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["shouldlog",{"_index":3287,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["shuffel",{"_index":3490,"title":{},"body":{"injectables/StatusListService.html":{}}}],["shuffled",{"_index":3476,"title":{},"body":{"injectables/StatusListService.html":{}}}],["sign",{"_index":2128,"title":{},"body":{"entities/KeyEntity.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/S3FileStorage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["sign(privatekeyinstance",{"_index":1703,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["signalg",{"_index":1369,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["signature",{"_index":1430,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{},"miscellaneous/variables.html":{}}}],["signature).catch((err",{"_index":2872,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["signaturebase64url",{"_index":3896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signed",{"_index":3686,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["signedjwt",{"_index":2684,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwt.length",{"_index":2689,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwtlength",{"_index":2688,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signer",{"_index":804,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/FileSystemKeyService.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["signer(tenantid",{"_index":1647,"title":{},"body":{"classes/FileSystemKeyService.html":{},"classes/KeyService.html":{}}}],["signing",{"_index":498,"title":{},"body":{"controllers/AuthController.html":{},"entities/CertEntity.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/FileSystemKeyService.html":{},"injectables/JwtStrategy.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/StatusListService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"miscellaneous/typealiases.html":{}}}],["signjwt",{"_index":1616,"title":{},"body":{"classes/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{}}}],["signjwt(payload",{"_index":1649,"title":{},"body":{"classes/FileSystemKeyService.html":{},"classes/KeyService.html":{}}}],["signl",{"_index":936,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["simplicity",{"_index":2887,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["singleline",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["size",{"_index":1599,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"injectables/StatusListService.html":{}}}],["skip",{"_index":1180,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["slice(1",{"_index":1726,"title":{},"body":{"injectables/FilesService.html":{}}}],["someone",{"_index":3035,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["sort",{"_index":3494,"title":{},"body":{"injectables/StatusListService.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["specific",{"_index":328,"title":{},"body":{"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/FileSystemKeyService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"miscellaneous/typealiases.html":{}}}],["specified",{"_index":283,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/WellKnownService.html":{}}}],["specifies",{"_index":314,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["specifying",{"_index":1218,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["sqlite",{"_index":1470,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["sqlite3",{"_index":3821,"title":{},"body":{"dependencies.html":{}}}],["src",{"_index":2208,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src.pipe(write",{"_index":2210,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/.../auth.module.ts",{"_index":3869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../authentication",{"_index":3860,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../cert.entity.ts",{"_index":3861,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../client.entity.ts",{"_index":3862,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../crypto",{"_index":3863,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../crypto.service.ts",{"_index":3871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.module.ts",{"_index":3870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../display.entity.ts",{"_index":3864,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../ed25519.ts",{"_index":3872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../issuer.module.ts",{"_index":3874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../key.module.ts",{"_index":3875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../keys.entity.ts",{"_index":3866,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":3832,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../media",{"_index":3827,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../oauth.module.ts",{"_index":3876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../presentation",{"_index":3829,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../public.decorator.ts",{"_index":3873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../registrar.module.ts",{"_index":3877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session",{"_index":3878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session.decorator.ts",{"_index":3880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session.entity.ts",{"_index":3867,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../session.module.ts",{"_index":3879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../storage.module.ts",{"_index":3865,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../storage.types.ts",{"_index":3868,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../token.decorator.ts",{"_index":3881,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../util.ts",{"_index":3833,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../webhook.dto.ts",{"_index":3859,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.module.ts",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/app.controller.ts",{"_index":83,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app/app.controller.ts:8",{"_index":86,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app/dto/oidc",{"_index":3705,"title":{},"body":{"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:158",{"_index":382,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:193",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:70",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.guard.ts",{"_index":2007,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/auth.guard.ts:12",{"_index":2015,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.guard.ts:7",{"_index":2012,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.module.ts",{"_index":506,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/client.service.ts",{"_index":884,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"coverage.html":{}}}],["src/auth/client.service.ts:142",{"_index":981,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:26",{"_index":975,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:41",{"_index":980,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:51",{"_index":977,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:61",{"_index":979,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:77",{"_index":982,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:90",{"_index":976,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:99",{"_index":978,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/dto/client",{"_index":960,"title":{},"body":{"classes/ClientCredentialsDto.html":{},"coverage.html":{}}}],["src/auth/dto/oidc",{"_index":3713,"title":{},"body":{"coverage.html":{}}}],["src/auth/dto/token",{"_index":3581,"title":{},"body":{"classes/TokenResponse.html":{},"coverage.html":{}}}],["src/auth/entitites/client.entity.ts",{"_index":964,"title":{},"body":{"entities/ClientEntry.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/entitites/client.entity.ts:11",{"_index":970,"title":{},"body":{"entities/ClientEntry.html":{}}}],["src/auth/entitites/client.entity.ts:14",{"_index":965,"title":{},"body":{"entities/ClientEntry.html":{}}}],["src/auth/entitites/client.entity.ts:8",{"_index":967,"title":{},"body":{"entities/ClientEntry.html":{}}}],["src/auth/jwt.service.ts",{"_index":1745,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{}}}],["src/auth/jwt.service.ts:100",{"_index":2032,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:14",{"_index":2028,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:26",{"_index":2031,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:63",{"_index":2033,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:89",{"_index":2029,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":2034,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:10",{"_index":2038,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:24",{"_index":2040,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:31",{"_index":2042,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:61",{"_index":2046,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:85",{"_index":2048,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/public.decorator.ts",{"_index":3720,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/token.decorator.ts",{"_index":3570,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/crypto.module.ts",{"_index":1453,"title":{},"body":{"modules/CryptoModule.html":{}}}],["src/crypto/crypto.service.ts",{"_index":3723,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/encryption/encryption.service.ts",{"_index":1524,"title":{},"body":{"injectables/EncryptionService.html":{},"coverage.html":{}}}],["src/crypto/encryption/encryption.service.ts:13",{"_index":1532,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:27",{"_index":1544,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:47",{"_index":1535,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:67",{"_index":1542,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/key/adapters/filesystem",{"_index":1607,"title":{},"body":{"classes/FileSystemKeyService.html":{},"coverage.html":{}}}],["src/crypto/key/adapters/vault",{"_index":3729,"title":{},"body":{"coverage.html":{}}}],["src/crypto/key/crypto",{"_index":1403,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/key/dto/key",{"_index":2091,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"coverage.html":{}}}],["src/crypto/key/entities/cert.entity.ts",{"_index":864,"title":{},"body":{"entities/CertEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/key/entities/cert.entity.ts:14",{"_index":878,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:20",{"_index":879,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:26",{"_index":874,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:32",{"_index":881,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:38",{"_index":876,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:44",{"_index":871,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts",{"_index":2122,"title":{},"body":{"entities/KeyEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/key/entities/keys.entity.ts:15",{"_index":2123,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts:21",{"_index":2126,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts:27",{"_index":2124,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts:33",{"_index":2129,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/key.controller.ts",{"_index":2104,"title":{},"body":{"controllers/KeyController.html":{},"coverage.html":{}}}],["src/crypto/key/key.controller.ts:37",{"_index":2113,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.controller.ts:49",{"_index":2109,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.controller.ts:64",{"_index":2111,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.module.ts",{"_index":2135,"title":{},"body":{"modules/KeyModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/key/key.module.ts:34",{"_index":2137,"title":{},"body":{"modules/KeyModule.html":{}}}],["src/crypto/key/key.service.ts",{"_index":2163,"title":{},"body":{"classes/KeyService.html":{},"coverage.html":{}}}],["src/crypto/key/key.service.ts:13",{"_index":2165,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:24",{"_index":2174,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:31",{"_index":2166,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:38",{"_index":2172,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:44",{"_index":2176,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:50",{"_index":2168,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:56",{"_index":2169,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:61",{"_index":2170,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:66",{"_index":2171,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:73",{"_index":2179,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:86",{"_index":2167,"title":{},"body":{"classes/KeyService.html":{}}}],["src/database/database.module.ts",{"_index":1462,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/health/health.controller.ts",{"_index":1786,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:25",{"_index":1794,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":1802,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/issuer/authorize/authorize.controller.ts",{"_index":598,"title":{},"body":{"controllers/AuthorizeController.html":{},"coverage.html":{}}}],["src/issuer/authorize/authorize.controller.ts:41",{"_index":615,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:55",{"_index":622,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:77",{"_index":625,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:94",{"_index":612,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.service.ts",{"_index":691,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["src/issuer/authorize/authorize.service.ts:104",{"_index":722,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:209",{"_index":712,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:227",{"_index":704,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:302",{"_index":716,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:309",{"_index":720,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:38",{"_index":703,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:49",{"_index":709,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:56",{"_index":706,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:79",{"_index":718,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/dto/authorize",{"_index":666,"title":{},"body":{"classes/AuthorizeQueries.html":{},"coverage.html":{}}}],["src/issuer/authorize/dto/par",{"_index":2724,"title":{},"body":{"classes/ParResponseDto.html":{},"coverage.html":{}}}],["src/issuer/credentials",{"_index":1290,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"classes/PresentationDuringIssuance.html":{},"classes/SchemaResponse.html":{},"classes/VCT.html":{},"coverage.html":{}}}],["src/issuer/credentials/credential",{"_index":1112,"title":{},"body":{"injectables/CredentialConfigService.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.controller.ts",{"_index":1261,"title":{},"body":{"controllers/CredentialsController.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.controller.ts:35",{"_index":1270,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:45",{"_index":1272,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:58",{"_index":1268,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.service.ts",{"_index":1308,"title":{},"body":{"injectables/CredentialsService.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.service.ts:100",{"_index":1320,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:210",{"_index":1329,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:236",{"_index":1327,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:24",{"_index":1317,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:49",{"_index":1325,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts",{"_index":1019,"title":{},"body":{"entities/CredentialConfig.html":{},"coverage.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:103",{"_index":1067,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:112",{"_index":1044,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:26",{"_index":1053,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:32",{"_index":1075,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:40",{"_index":1038,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:46",{"_index":1031,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:52",{"_index":1047,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:59",{"_index":1077,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:68",{"_index":1058,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:76",{"_index":1060,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:80",{"_index":1056,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:89",{"_index":1070,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:96",{"_index":1063,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/issuance/dto/authentication",{"_index":263,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/issuer/issuance/dto/credential",{"_index":984,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"coverage.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts",{"_index":1095,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"coverage.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:21",{"_index":1097,"title":{},"body":{"classes/CredentialConfigMapping.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:32",{"_index":1850,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:40",{"_index":1849,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:49",{"_index":1844,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:58",{"_index":1851,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:66",{"_index":1846,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/entities/credential",{"_index":1210,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"coverage.html":{}}}],["src/issuer/issuance/entities/issuance",{"_index":1805,"title":{},"body":{"entities/IssuanceConfig.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.controller.ts",{"_index":1827,"title":{},"body":{"controllers/IssuanceController.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.controller.ts:28",{"_index":1833,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.controller.ts:38",{"_index":1835,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.controller.ts:54",{"_index":1831,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.service.ts",{"_index":1852,"title":{},"body":{"injectables/IssuanceService.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.service.ts:160",{"_index":1864,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:173",{"_index":1866,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:189",{"_index":1870,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:23",{"_index":1859,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:259",{"_index":1862,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:43",{"_index":1868,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:52",{"_index":1867,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuer",{"_index":1919,"title":{},"body":{"controllers/IssuerManagementController.html":{},"coverage.html":{}}}],["src/issuer/issuer.module.ts",{"_index":1980,"title":{},"body":{"modules/IssuerModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/issuer/oid4vci/dto/notification",{"_index":2276,"title":{},"body":{"classes/NotificationRequestDto.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/dto/offer",{"_index":2374,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/entities/display.entity.ts",{"_index":1496,"title":{},"body":{"entities/DisplayEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/issuer/oid4vci/entities/display.entity.ts:15",{"_index":1497,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["src/issuer/oid4vci/entities/display.entity.ts:18",{"_index":1499,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts",{"_index":2389,"title":{},"body":{"controllers/Oid4vciController.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:39",{"_index":2394,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:53",{"_index":2401,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:63",{"_index":2398,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts",{"_index":2426,"title":{},"body":{"injectables/Oid4vciService.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:183",{"_index":2436,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:259",{"_index":2445,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:267",{"_index":2438,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:392",{"_index":2440,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:48",{"_index":2450,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:50",{"_index":2433,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:55",{"_index":2448,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:65",{"_index":2446,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:76",{"_index":2447,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts:92",{"_index":2443,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["src/issuer/oid4vci/util.ts",{"_index":3756,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/issuer/status",{"_index":3421,"title":{},"body":{"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":3758,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/metric/metric.module.ts",{"_index":2270,"title":{},"body":{"modules/MetricModule.html":{}}}],["src/oauth/dto/token",{"_index":3575,"title":{},"body":{"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"coverage.html":{}}}],["src/oauth/oauth.controller.ts",{"_index":2282,"title":{},"body":{"controllers/OAuthController.html":{},"coverage.html":{}}}],["src/oauth/oauth.controller.ts:22",{"_index":2291,"title":{},"body":{"controllers/OAuthController.html":{}}}],["src/oauth/oauth.module.ts",{"_index":2305,"title":{},"body":{"modules/OAuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/oauth/oauth.service.ts",{"_index":2310,"title":{},"body":{"injectables/OAuthService.html":{},"coverage.html":{}}}],["src/oauth/oauth.service.ts:10",{"_index":2318,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:100",{"_index":2326,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:20",{"_index":2327,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:33",{"_index":2324,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:60",{"_index":2331,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:68",{"_index":2322,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:92",{"_index":2320,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:96",{"_index":2329,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/registrar/dto/access",{"_index":6,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"coverage.html":{}}}],["src/registrar/entities/registrar.entity.ts",{"_index":2890,"title":{},"body":{"entities/RegistrarEntity.html":{},"coverage.html":{}}}],["src/registrar/entities/registrar.entity.ts:12",{"_index":2893,"title":{},"body":{"entities/RegistrarEntity.html":{}}}],["src/registrar/entities/registrar.entity.ts:6",{"_index":2895,"title":{},"body":{"entities/RegistrarEntity.html":{}}}],["src/registrar/entities/registrar.entity.ts:9",{"_index":2894,"title":{},"body":{"entities/RegistrarEntity.html":{}}}],["src/registrar/registrar.module.ts",{"_index":2900,"title":{},"body":{"modules/RegistrarModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/registrar/registrar.service.ts",{"_index":2913,"title":{},"body":{"injectables/RegistrarService.html":{},"coverage.html":{}}}],["src/registrar/registrar.service.ts:100",{"_index":2942,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:111",{"_index":2948,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:133",{"_index":2949,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:150",{"_index":2936,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:173",{"_index":2940,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:190",{"_index":2931,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:232",{"_index":2934,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:32",{"_index":2955,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:36",{"_index":2953,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:40",{"_index":2927,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:59",{"_index":2947,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:92",{"_index":2941,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/session/entities/session.entity.ts",{"_index":3129,"title":{},"body":{"entities/Session.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/session/entities/session.entity.ts:101",{"_index":3144,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:107",{"_index":3145,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:113",{"_index":3133,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:118",{"_index":3156,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:123",{"_index":3142,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:128",{"_index":3141,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:133",{"_index":3151,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:136",{"_index":3150,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:43",{"_index":3138,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:46",{"_index":3139,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:52",{"_index":3147,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:58",{"_index":3148,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:64",{"_index":3135,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:69",{"_index":3131,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:74",{"_index":3146,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:79",{"_index":3130,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:84",{"_index":3154,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:90",{"_index":3140,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:96",{"_index":3132,"title":{},"body":{"entities/Session.html":{}}}],["src/session/session.controller.ts",{"_index":3163,"title":{},"body":{"controllers/SessionController.html":{},"coverage.html":{}}}],["src/session/session.controller.ts:31",{"_index":3170,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:40",{"_index":3173,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:51",{"_index":3169,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:64",{"_index":3177,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.decorator.ts",{"_index":3760,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/session/session.guard.ts",{"_index":3191,"title":{},"body":{"guards/SessionGuard.html":{},"coverage.html":{}}}],["src/session/session.guard.ts:10",{"_index":3193,"title":{},"body":{"guards/SessionGuard.html":{}}}],["src/session/session.guard.ts:13",{"_index":3194,"title":{},"body":{"guards/SessionGuard.html":{}}}],["src/session/session.module.ts",{"_index":3334,"title":{},"body":{"modules/SessionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/session/session.service.ts",{"_index":3344,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["src/session/session.service.ts:109",{"_index":3376,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:135",{"_index":3355,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:143",{"_index":3363,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:152",{"_index":3362,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:161",{"_index":3366,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:168",{"_index":3379,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:181",{"_index":3360,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:19",{"_index":3351,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:34",{"_index":3368,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:89",{"_index":3358,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/storage/adapters/local.storage.ts",{"_index":2184,"title":{},"body":{"classes/LocalFileStorage.html":{},"coverage.html":{}}}],["src/storage/adapters/local.storage.ts:15",{"_index":2186,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:18",{"_index":2191,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:39",{"_index":2190,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:44",{"_index":2188,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:50",{"_index":2189,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts",{"_index":3083,"title":{},"body":{"classes/S3FileStorage.html":{},"coverage.html":{}}}],["src/storage/adapters/s3.storage.ts:13",{"_index":3088,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:20",{"_index":3094,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:56",{"_index":3093,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:68",{"_index":3090,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:74",{"_index":3091,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:85",{"_index":3092,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/files.service.ts",{"_index":1705,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{}}}],["src/storage/files.service.ts:13",{"_index":1709,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:16",{"_index":1719,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:38",{"_index":1715,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:42",{"_index":1711,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:46",{"_index":1714,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/storage.module.ts",{"_index":3538,"title":{},"body":{"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/storage/storage.module.ts:51",{"_index":3539,"title":{},"body":{"modules/StorageModule.html":{}}}],["src/storage/storage.types.ts",{"_index":1570,"title":{},"body":{"interfaces/FileStorage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/storage/storage.types.ts:21",{"_index":1588,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:27",{"_index":1582,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:31",{"_index":1575,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:33",{"_index":1577,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:35",{"_index":1580,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/utils/logger/logger",{"_index":2223,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["src/utils/logger/session",{"_index":3200,"title":{},"body":{"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/mediatype/media",{"_index":3770,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/utils/webhook/webhook.dto.ts",{"_index":36,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/utils/webhook/webhook.dto.ts:13",{"_index":46,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:19",{"_index":51,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:36",{"_index":3601,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:43",{"_index":3600,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:54",{"_index":3604,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:62",{"_index":3603,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/utils/webhook/webhook.service.ts",{"_index":3605,"title":{},"body":{"injectables/WebhookService.html":{},"coverage.html":{}}}],["src/utils/webhook/webhook.service.ts:13",{"_index":3608,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/utils/webhook/webhook.service.ts:32",{"_index":3610,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/utils/webhook/webhook.service.ts:98",{"_index":3612,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/verifier/oid4vp/dto/authorization",{"_index":594,"title":{},"body":{"classes/AuthorizationResponse.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/dto/presentation",{"_index":2780,"title":{},"body":{"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts",{"_index":2591,"title":{},"body":{"controllers/Oid4vpController.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:42",{"_index":2598,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:53",{"_index":2602,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.module.ts",{"_index":2615,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts",{"_index":2620,"title":{},"body":{"injectables/Oid4vpService.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:20",{"_index":2624,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:203",{"_index":2632,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:255",{"_index":2633,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:41",{"_index":2626,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/presentations/dto/auth",{"_index":550,"title":{},"body":{"interfaces/AuthResponse.html":{},"coverage.html":{}}}],["src/verifier/presentations/dto/vp",{"_index":3038,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{},"coverage.html":{}}}],["src/verifier/presentations/entities/presentation",{"_index":2725,"title":{},"body":{"entities/PresentationConfig.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.controller.ts",{"_index":2747,"title":{},"body":{"controllers/PresentationManagementController.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.controller.ts:111",{"_index":2751,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:121",{"_index":2759,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:137",{"_index":2753,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:79",{"_index":2757,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.module.ts",{"_index":2792,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["src/verifier/presentations/presentations.service.ts",{"_index":2797,"title":{},"body":{"injectables/PresentationsService.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.service.ts:137",{"_index":2821,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:150",{"_index":2836,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:161",{"_index":2815,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:171",{"_index":2819,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:192",{"_index":2838,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:205",{"_index":2843,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:228",{"_index":2842,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:243",{"_index":2840,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:260",{"_index":2830,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:28",{"_index":2810,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:48",{"_index":2826,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:60",{"_index":2825,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:67",{"_index":2822,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/resolver/dto/issuer",{"_index":1971,"title":{},"body":{"interfaces/IssuerMetadata.html":{},"coverage.html":{}}}],["src/verifier/resolver/resolver.module.ts",{"_index":3045,"title":{},"body":{"modules/ResolverModule.html":{}}}],["src/verifier/resolver/resolver.service.ts",{"_index":3047,"title":{},"body":{"injectables/ResolverService.html":{},"coverage.html":{}}}],["src/verifier/resolver/resolver.service.ts:12",{"_index":3050,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/resolver/resolver.service.ts:21",{"_index":3052,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/verifier.module.ts",{"_index":3598,"title":{},"body":{"modules/VerifierModule.html":{}}}],["src/well",{"_index":1238,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["st",{"_index":2214,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["st.size",{"_index":2216,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["stack",{"_index":3262,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["stage",{"_index":2485,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{}}}],["start",{"_index":2629,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["started",{"_index":3317,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["starting",{"_index":3246,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["starts",{"_index":2945,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["startswith(\"http",{"_index":2004,"title":{},"body":{"modules/IssuerModule.html":{}}}],["starttime",{"_index":3247,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["state",{"_index":553,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["statements",{"_index":3703,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":3395,"title":{},"body":{"injectables/SessionService.html":{}}}],["static",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthenticationConfigHelper.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{},"dependencies.html":{}}}],["statsync",{"_index":2197,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["statsync(fullpath",{"_index":2215,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["status",{"_index":418,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"dependencies.html":{}}}],["status_list",{"_index":3516,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuscode",{"_index":251,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["statuslist",{"_index":3483,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslist(entry.elements",{"_index":3499,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslist+jwt",{"_index":3505,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslistcontroller",{"_index":3420,"title":{"controllers/StatusListController.html":{}},"body":{"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"coverage.html":{}}}],["statuslistentity",{"_index":3435,"title":{"entities/StatusListEntity.html":{}},"body":{"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"coverage.html":{}}}],["statuslistfetcher",{"_index":2802,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["statuslistjwtheaderparameters",{"_index":3484,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslistmodule",{"_index":503,"title":{"modules/StatusListModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"index.html":{},"modules.html":{}}}],["statuslistrepository",{"_index":3464,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslistservice",{"_index":897,"title":{"injectables/StatusListService.html":{}},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"coverage.html":{},"index.html":{}}}],["statusmanagement",{"_index":1026,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["statusmapping",{"_index":3454,"title":{"entities/StatusMapping.html":{}},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"coverage.html":{}}}],["statusmappingrepository",{"_index":3463,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statusupdatedto",{"_index":3175,"title":{"classes/StatusUpdateDto.html":{}},"body":{"controllers/SessionController.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["statutslistservice",{"_index":902,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["step",{"_index":657,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/SessionLoggerService.html":{}}}],["storage",{"_index":1710,"title":{},"body":{"injectables/FilesService.html":{}}}],["storage.types",{"_index":2199,"title":{},"body":{"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"modules/StorageModule.html":{}}}],["storage/storage.module",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["storage/storage.types",{"_index":1721,"title":{},"body":{"injectables/FilesService.html":{}}}],["storage_driver",{"_index":3544,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["storagemodule",{"_index":121,"title":{"modules/StorageModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/StorageModule.html":{},"index.html":{},"modules.html":{}}}],["storagemodule.forroot",{"_index":261,"title":{},"body":{"modules/AppModule.html":{}}}],["store",{"_index":1118,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{}}}],["store(tenantid",{"_index":1139,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["storecredentialconfiguration",{"_index":1265,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["storecredentialconfiguration(config",{"_index":1271,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["stored",{"_index":1144,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{}}}],["storedobject",{"_index":1595,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["storedsecret",{"_index":2351,"title":{},"body":{"injectables/OAuthService.html":{}}}],["storeissuanceconfiguration",{"_index":1830,"title":{},"body":{"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["storeissuanceconfiguration(config",{"_index":1834,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["storeissuanceconfiguration(tenantid",{"_index":1869,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["storepresentationconfig",{"_index":2749,"title":{},"body":{"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["storepresentationconfig(config",{"_index":2758,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["storepresentationconfig(tenantid",{"_index":2834,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid",{"_index":2806,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid(registrationcertid",{"_index":2837,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["stores",{"_index":1141,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["strategy",{"_index":2054,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["stream",{"_index":1589,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["string",{"_index":19,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NotificationRequestDto.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":840,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{}}}],["structured",{"_index":3276,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["sub",{"_index":455,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/OAuthService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{}}}],["subfolder",{"_index":1153,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["subject",{"_index":808,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{}}}],["subject_types_supported",{"_index":479,"title":{},"body":{"controllers/AuthController.html":{}}}],["succeeded",{"_index":3328,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["success",{"_index":3408,"title":{},"body":{"injectables/SessionService.html":{}}}],["successful",{"_index":3378,"title":{},"body":{"injectables/SessionService.html":{}}}],["successfully",{"_index":2687,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/WebhookService.html":{}}}],["such",{"_index":1517,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"entities/Session.html":{}}}],["summary",{"_index":415,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/OAuthController.html":{},"controllers/PresentationManagementController.html":{},"controllers/WellKnownController.html":{}}}],["super",{"_index":2021,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["super(config",{"_index":2060,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super(configservice",{"_index":1662,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["super.authenticate(req",{"_index":2061,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":2025,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["supersecret",{"_index":523,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["support",{"_index":430,"title":{},"body":{"controllers/AuthController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/Session.html":{},"modules.html":{}}}],["supported",{"_index":68,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["supportedauthenticationscheme",{"_index":2454,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["supportedauthenticationscheme.bearer",{"_index":2538,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["supportedauthenticationscheme.clientattestationjwt",{"_index":762,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["supportedauthenticationscheme.dpop",{"_index":2537,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["supports",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{}}}],["svg",{"_index":3841,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":3662,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["switch",{"_index":1447,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["symbol(\"file_storage",{"_index":1605,"title":{},"body":{"interfaces/FileStorage.html":{},"miscellaneous/variables.html":{}}}],["symmetric",{"_index":2083,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["synchronize",{"_index":1481,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["system",{"_index":1625,"title":{},"body":{"classes/FileSystemKeyService.html":{},"controllers/KeyController.html":{},"injectables/StatusListService.html":{}}}],["t",{"_index":1536,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["table",{"_index":1230,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3776,"title":{},"body":{"coverage.html":{}}}],["tamper",{"_index":1731,"title":{},"body":{"injectables/FilesService.html":{}}}],["tap",{"_index":3230,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["tap((data",{"_index":3250,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["target",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["tell",{"_index":2717,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["tenancy",{"_index":3153,"title":{},"body":{"entities/Session.html":{}}}],["tenant",{"_index":494,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vciService.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["tenant.isdirectory",{"_index":1162,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["tenant.name",{"_index":1169,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["tenant/2025/08/14/uuid.ext",{"_index":1597,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["tenant_client_total",{"_index":544,"title":{},"body":{"modules/AuthModule.html":{}}}],["tenant_id",{"_index":3342,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["tenantclienttotal",{"_index":906,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["tenantfolders",{"_index":1158,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["tenanthost",{"_index":2644,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["tenantid",{"_index":248,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"entities/DisplayEntity.html":{},"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["tenantid)).uri",{"_index":821,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["tenantid/credentials",{"_index":1293,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["tenantid/status",{"_index":3423,"title":{},"body":{"controllers/StatusListController.html":{}}}],["tenantid}/${new",{"_index":1727,"title":{},"body":{"injectables/FilesService.html":{}}}],["terminusmodule",{"_index":1803,"title":{},"body":{"modules/HealthModule.html":{}}}],["textencoder().encode(data",{"_index":3894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["textencoder().encode(secret",{"_index":1762,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["then((cert",{"_index":1691,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["then((count",{"_index":930,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["then((entry",{"_index":1566,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["then((file",{"_index":3508,"title":{},"body":{"injectables/StatusListService.html":{}}}],["then((key",{"_index":1688,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["then((res",{"_index":2475,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["then((response",{"_index":3006,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["then((session",{"_index":767,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["then(async",{"_index":1556,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{}}}],["this.accesstoken",{"_index":2979,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.addaccesscertificate",{"_index":2985,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.addrp(name",{"_index":2984,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.authorizeservice.authorizationchallengeendpoint",{"_index":665,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.authzmetadata",{"_index":3699,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["this.authorizeservice.sendauthorizationresponse(queries",{"_index":649,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.validatetokenrequest(body",{"_index":663,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authzmetadata(session",{"_index":783,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.authzservice.authzmetadata(session",{"_index":2488,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.bucket",{"_index":3105,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.certrepository",{"_index":1690,"title":{},"body":{"classes/FileSystemKeyService.html":{},"classes/KeyService.html":{}}}],["this.client",{"_index":2975,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.client.setconfig",{"_index":2976,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.clientrepository",{"_index":928,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clientrepository.countby",{"_index":910,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clientrepository.findonebyorfail",{"_index":931,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clientrepository.save",{"_index":938,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clientrepository.update",{"_index":943,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clients",{"_index":913,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clients.delete(clientid",{"_index":2359,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.clients.get(clientid",{"_index":2352,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.clients.has(clientid",{"_index":2360,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.clients.set(clientid",{"_index":2358,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.clients.set(defaultclientid",{"_index":2342,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.clientservice.issetup(sub",{"_index":2090,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.clientservice.validateclient",{"_index":452,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.config",{"_index":2256,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enabledebugmode",{"_index":2266,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enablehttplogger",{"_index":2265,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enablesessionlogger",{"_index":2264,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.level",{"_index":2267,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.logformat",{"_index":2268,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.configservice",{"_index":3011,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.get",{"_index":2259,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.configservice.get(\"oidc",{"_index":2088,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.configservice.get(\"registrar_url",{"_index":2980,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.get('config_import",{"_index":1157,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["this.configservice.get('config_import_force",{"_index":1156,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["this.configservice.get('log_level",{"_index":2258,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.configservice.get('oauth_client_id",{"_index":2340,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.configservice.get('oidc",{"_index":1784,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow",{"_index":919,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow(\"auth_client_id",{"_index":918,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.configservice.getorthrow(\"public_url",{"_index":3501,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.configservice.getorthrow(\"registrar_oidc_url",{"_index":2968,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow(\"registrar_url",{"_index":2978,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow(\"rp_name",{"_index":2983,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow('config_folder",{"_index":1152,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["this.configservice.getorthrow('jwt_expires_in",{"_index":1760,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow('jwt_issuer",{"_index":1758,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow('jwt_secret",{"_index":1757,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow('public_url",{"_index":467,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.configservice.getorthrow('public_url')}${req.url",{"_index":772,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.configservice.getorthrow('public_url')}/${session.id",{"_index":803,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.configservice.getorthrow('public_url')}/${session.tenantid}/credentials/vct/${credentialconfigurationid",{"_index":1390,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.configservice.getorthrow('public_url')}/${session.tenantid}/credentials/vct/${value.id",{"_index":1354,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.configservice.getorthrow('public_url')}/${values.session}/oid4vp",{"_index":2694,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.configservice.getorthrow('rp_name",{"_index":2675,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.configservice.getorthrow('session_tidy_up_interval",{"_index":3391,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.configservice.getorthrow('session_ttl",{"_index":3416,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.configservie.get('crypto_alg",{"_index":1445,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["this.create(tenant",{"_index":1674,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["this.create(tenantid",{"_index":1687,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["this.createlist(entry",{"_index":3498,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.credentialconfigrepo",{"_index":1359,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepo.findby",{"_index":1341,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepo.findonebyorfail",{"_index":1376,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepository.delete",{"_index":1209,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.find",{"_index":1205,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.findonebyorfail",{"_index":1207,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.save",{"_index":1208,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialissuancebindingrepo.save",{"_index":1914,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.credentialsconfigservice.getbyid",{"_index":1906,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.credentialsconfigservice.import",{"_index":1878,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.credentialsservice.delete(user.sub",{"_index":1288,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.get(user.sub",{"_index":1285,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.getcredential",{"_index":2554,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.credentialsservice.getcredentialconfigurationsupported",{"_index":2491,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.credentialsservice.getschema(id",{"_index":1307,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["this.credentialsservice.getvct(id",{"_index":1305,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["this.credentialsservice.store(user.sub",{"_index":1286,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.crypto",{"_index":1663,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["this.crypto.alg",{"_index":1679,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["this.crypto.generatekeypair",{"_index":1675,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["this.crypto.getsigner(privatekey",{"_index":1685,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["this.cryptoimplementationservice.getalg",{"_index":1346,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.deletekey(token.sub",{"_index":2121,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.cryptoservice.getalg",{"_index":1696,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["this.cryptoservice.getcallbackcontext",{"_index":2466,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.cryptoservice.getcallbackcontext(tenantid",{"_index":743,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.cryptoservice.getcertchain",{"_index":1392,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.getcertentry",{"_index":1188,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.cryptoservice.getcerts(tenantid",{"_index":2118,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.cryptoservice.getjwks(tenantid).then((key",{"_index":3700,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["this.cryptoservice.import",{"_index":1877,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.cryptoservice.importkey(tenantid",{"_index":2119,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.cryptoservice.keyservice.getkid",{"_index":1366,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.keyservice.getkid(tenantid",{"_index":3010,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.cryptoservice.keyservice.getpublickey",{"_index":807,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{}}}],["this.cryptoservice.keyservice.signer",{"_index":1368,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.cryptoservice.ontenantinit(id",{"_index":955,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.cryptoservice.signjwt",{"_index":2355,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.storeaccesscertificate",{"_index":3018,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.db.pingcheck('database",{"_index":1801,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.displayrepository",{"_index":2474,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.displayrepository.save",{"_index":2469,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.encryptionservice.decryptjwe",{"_index":2703,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.encryptionservice.getencryptionpublickey",{"_index":2666,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.encryptionservice.ontenantinit(id",{"_index":956,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.generateaccesstoken",{"_index":2347,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.getauthorizationserver",{"_index":746,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.getauthorizationserver(tenantid).createaccesstokenresponse",{"_index":802,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.getbyid(tenant.name",{"_index":1177,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.getclients().find((c",{"_index":921,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.getexistingrp(name",{"_index":3004,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.getissuanceconfigurationbyid",{"_index":1881,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.getkid(tenant).catch(async",{"_index":1673,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["this.getkid(tenantid).catch",{"_index":1686,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["this.getpresentationconfig",{"_index":2853,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.getprivatekey(tenantid",{"_index":1684,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["this.getpubfromprivatekey(privatekeyjwk",{"_index":1698,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["this.health.check",{"_index":1800,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.httpservice.get",{"_index":2481,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/ResolverService.html":{}}}],["this.httpservice.post",{"_index":3623,"title":{},"body":{"injectables/WebhookService.html":{}}}],["this.import",{"_index":1879,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["this.initializeclients",{"_index":2337,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.isenabled",{"_index":2966,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.ishttploggerenabled",{"_index":2269,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.ispresentationduringissuanceauth(config",{"_index":588,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["this.issuanceconfigrepo.delete",{"_index":1917,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.find",{"_index":1902,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.findoneorfail",{"_index":1903,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.save",{"_index":1912,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigservice.getissuanceconfigurationbyid",{"_index":1364,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.issuanceservice",{"_index":2506,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuanceservice.deleteissuanceconfiguration(user.sub",{"_index":1842,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.issuanceservice.getissuanceconfiguration(user.sub",{"_index":1839,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.issuanceservice.getissuanceconfigurationbyid",{"_index":839,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.issuanceservice.storeissuanceconfiguration",{"_index":1840,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.issuer",{"_index":2467,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.createcredentialissuermetadata",{"_index":2490,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.createcredentialresponse",{"_index":2566,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.parsecredentialrequest",{"_index":2525,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuer.verifycredentialrequestjwtproof",{"_index":2551,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.issuermetadata(session",{"_index":2517,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.isusingexternaloidc",{"_index":1755,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.jwtservice.generatetoken(payload",{"_index":458,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.jwtservice.isusingexternaloidc",{"_index":424,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.kbverifier.bind(this",{"_index":2850,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.keyrepository",{"_index":1561,"title":{},"body":{"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{}}}],["this.keyrepository.save",{"_index":1558,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.loadclients",{"_index":914,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.loadconfiguration",{"_index":2255,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.logger.error",{"_index":1189,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.logger.info",{"_index":1203,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.logger.setcontext('sessionlogger",{"_index":3241,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.logger.setcontext('sessionloggerservice",{"_index":3314,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["this.oauth2client",{"_index":2969,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.oauth2client.clientcredentials().then((token",{"_index":2987,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.oauthservice.handleclientcredentialsgrant",{"_index":2299,"title":{},"body":{"controllers/OAuthController.html":{}}}],["this.oid4vciservice.createoffer",{"_index":1962,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["this.oid4vciservice.getcredential(req",{"_index":2413,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.handlenotification(req",{"_index":2416,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.issuermetadata(session",{"_index":3692,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["this.oid4vciservice.noncerequest(session",{"_index":2420,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.ontenantinit(id",{"_index":959,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.oid4vpservice.createauthorizationrequest(session",{"_index":2609,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.oid4vpservice.createrequest",{"_index":2770,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.oid4vpservice.createrequest('pid",{"_index":820,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.oid4vpservice.getresponse(body",{"_index":2610,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.parsechallengerequest",{"_index":846,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.parseloglevel",{"_index":2257,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.presentationsservice.deletepresentationconfig(id",{"_index":2779,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.getpresentationconfig",{"_index":2646,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.getpresentationconfigs(user.sub",{"_index":2776,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.parseresponse",{"_index":2712,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.storepresentationconfig",{"_index":2777,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.storercid",{"_index":3036,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.publicbaseurl",{"_index":3113,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.publicbaseurl.replace",{"_index":3114,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.reflector.get",{"_index":3233,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.reflector.getallandoverride",{"_index":2022,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.refreshaccesstoken",{"_index":2981,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.registrarrepository.findonebyorfail",{"_index":3024,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.registrarrepository.save",{"_index":2986,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.registrarservice.addregistrationcertificate",{"_index":2653,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.registrarservice.isenabled",{"_index":2650,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.registrarservice.ontenantinit(id",{"_index":958,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.resolverservice.resolvepublickey",{"_index":2869,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.resourceserver",{"_index":2468,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.resourceserver.verifyresourcerequest",{"_index":2531,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.s3",{"_index":3123,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.s3.send",{"_index":3104,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.sanitizebody(request.body",{"_index":3245,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.schedulerregistry.addinterval('tidyupsessions",{"_index":3394,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sdjwtinstance",{"_index":2848,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.sendauthorizationcode(res",{"_index":830,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionlogger.logauthorizationrequest(logcontext",{"_index":2655,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logcredentialissuance",{"_index":2556,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sessionlogger.logcredentialverification",{"_index":2714,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowcomplete(logcontext",{"_index":2563,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowerror(logcontext",{"_index":2487,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowstart(logcontext",{"_index":2541,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.lognotification(logcontext",{"_index":2576,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.sessionlogger.logsession",{"_index":2686,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/WebhookService.html":{}}}],["this.sessionlogger.logsession(logcontext",{"_index":3618,"title":{},"body":{"injectables/WebhookService.html":{}}}],["this.sessionlogger.logsessionerror",{"_index":2589,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/WebhookService.html":{}}}],["this.sessionrepository.countby",{"_index":3397,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.delete",{"_index":3417,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.find",{"_index":3412,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail",{"_index":3413,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail(where",{"_index":3414,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.save(session",{"_index":3402,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.update",{"_index":3407,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionscounter.dec",{"_index":3411,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionscounter.inc",{"_index":3403,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionscounter.set",{"_index":3399,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionservice",{"_index":765,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.add(body.issuer_state",{"_index":658,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.sessionservice.add(issuer_state",{"_index":860,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vciService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.add(res.state",{"_index":2718,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.add(session.id",{"_index":2522,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"injectables/WebhookService.html":{}}}],["this.sessionservice.add(values.session",{"_index":2702,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.create",{"_index":2515,"title":{},"body":{"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["this.sessionservice.delete(id",{"_index":3187,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.get(body.auth_session",{"_index":826,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.get(body.issuer_state",{"_index":834,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.get(id",{"_index":3186,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.get(sessionid",{"_index":3198,"title":{},"body":{"guards/SessionGuard.html":{}}}],["this.sessionservice.getall",{"_index":3184,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.getby",{"_index":777,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.setstate(session",{"_index":2588,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.setauthcode(issuer_state",{"_index":858,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.setauthcode(values.issuer_state",{"_index":770,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.setentry(entry.index",{"_index":3523,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.setupclient(id).catch(async",{"_index":939,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.shouldlog",{"_index":3315,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["this.statuslistfetcher.bind(this",{"_index":2851,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.statuslistrepository",{"_index":3507,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistrepository.findonebyorfail",{"_index":3510,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistrepository.save",{"_index":3497,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistrepository.update",{"_index":3506,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistservice.createentry",{"_index":1380,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.statuslistservice.getlist(tenantid",{"_index":3434,"title":{},"body":{"controllers/StatusListController.html":{}}}],["this.statuslistservice.updatestatus(value",{"_index":3189,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.statusmappingrepository.findby",{"_index":3519,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statusmappingrepository.save",{"_index":3515,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statutslistservice.ontenantinit(id",{"_index":957,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.storage.getsignedurl",{"_index":1738,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storage.getsignedurl(key",{"_index":1739,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storage.put(key",{"_index":1734,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.store(tenant.name",{"_index":1202,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.storeissuanceconfiguration",{"_index":1901,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.storepresentationconfig(tenant.name",{"_index":2855,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.tenantclienttotal.set",{"_index":911,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.tidyupsessions",{"_index":3389,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.validateclientcredentials",{"_index":2343,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.verifier.bind(this",{"_index":2849,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository",{"_index":2862,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.delete",{"_index":2861,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.find",{"_index":2856,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.save(vprequest",{"_index":2860,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.update",{"_index":2864,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.webhookservice.sendwebhook",{"_index":2722,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.webhookservice.sendwebhooknotification",{"_index":2584,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["this.wellknownservice.getauthzmetadata(session",{"_index":3667,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.wellknownservice.getissuermetadata(session",{"_index":3666,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.wellknownservice.getjwks(session.tenantid",{"_index":3671,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["throw",{"_index":425,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/FileSystemKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{}}}],["tidy",{"_index":3370,"title":{},"body":{"injectables/SessionService.html":{}}}],["tidyupsessions",{"_index":3347,"title":{},"body":{"injectables/SessionService.html":{}}}],["time",{"_index":1385,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vciService.html":{},"classes/ParResponseDto.html":{}}}],["times",{"_index":2569,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["timestamp",{"_index":1014,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["todo",{"_index":210,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"injectables/FilesService.html":{},"controllers/IssuerManagementController.html":{},"classes/KeyService.html":{},"modules/MetricModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{}}}],["token",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"entities/StatusListEntity.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponseDto.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["token(body",{"_index":623,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["token.accesstoken",{"_index":2988,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["token.decorator",{"_index":407,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["token.sub",{"_index":2117,"title":{},"body":{"controllers/KeyController.html":{}}}],["token_endpoint",{"_index":469,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["token_endpoint_auth_methods_supported",{"_index":476,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["token_exchange",{"_index":3329,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["token_type",{"_index":421,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{}}}],["tokenpayload",{"_index":406,"title":{"interfaces/TokenPayload.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CredentialsController.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tokenpayload.nonce",{"_index":2546,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["tokenpayload.sub",{"_index":2539,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["tokenrequest",{"_index":2293,"title":{},"body":{"controllers/OAuthController.html":{}}}],["tokenrequestdto",{"_index":2286,"title":{"classes/TokenRequestDto.html":{}},"body":{"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/TokenRequestDto.html":{},"coverage.html":{}}}],["tokenresponse",{"_index":366,"title":{"classes/TokenResponse.html":{}},"body":{"controllers/AuthController.html":{},"classes/TokenResponse.html":{},"coverage.html":{}}}],["tokenresponsedto",{"_index":2294,"title":{"classes/TokenResponseDto.html":{}},"body":{"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/TokenResponseDto.html":{},"coverage.html":{}}}],["tokens",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/OAuthController.html":{}}}],["tolowercase",{"_index":1725,"title":{},"body":{"injectables/FilesService.html":{}}}],["toodo",{"_index":1883,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["tostring('ascii",{"_index":444,"title":{},"body":{"controllers/AuthController.html":{}}}],["total",{"_index":546,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["tracking",{"_index":2786,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{}}}],["transformer",{"_index":53,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["translatetime",{"_index":227,"title":{},"body":{"modules/AppModule.html":{}}}],["transport",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["triggered",{"_index":2579,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["true",{"_index":201,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"classes/LocalFileStorage.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"guards/SessionGuard.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"modules/StorageModule.html":{},"controllers/WellKnownController.html":{},"miscellaneous/variables.html":{}}}],["true})@isboolean()@isoptional()@column('boolean",{"_index":1057,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["true})@isempty",{"_index":2734,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@isobject",{"_index":1030,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["true})@isobject()@isoptional",{"_index":1076,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["true})@isoptional()@isobject",{"_index":2737,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@isstring",{"_index":2729,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@type(undefined",{"_index":1848,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["trust",{"_index":3062,"title":{},"body":{"injectables/ResolverService.html":{}}}],["try",{"_index":435,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"classes/S3FileStorage.html":{}}}],["ttl",{"_index":3415,"title":{},"body":{"injectables/SessionService.html":{}}}],["ttlseconds",{"_index":1713,"title":{},"body":{"injectables/FilesService.html":{}}}],["two",{"_index":3682,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["txcode",{"_index":741,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["typ",{"_index":2679,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["type",{"_index":20,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type(undefined)@isobject",{"_index":3599,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["type(undefined)@isoptional()@isobject",{"_index":3602,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["type.'})@post('token",{"_index":2290,"title":{},"body":{"controllers/OAuthController.html":{}}}],["type.decorator",{"_index":3656,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["type.decorator.ts",{"_index":3771,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":3657,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["type.enum.ts",{"_index":3828,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typealiases",{"_index":3857,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":300,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{}}}],["typeorm",{"_index":883,"title":{},"body":{"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"injectables/CredentialsService.html":{},"entities/DisplayEntity.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"dependencies.html":{}}}],["typeorm/query",{"_index":3385,"title":{},"body":{"injectables/SessionService.html":{}}}],["typeorm/repository/repository",{"_index":892,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{},"modules/KeyModule.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{}}}],["typeormhealthindicator",{"_index":1796,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormmodule",{"_index":509,"title":{},"body":{"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{}}}],["typeormmodule.forfeature",{"_index":2001,"title":{},"body":{"modules/IssuerModule.html":{}}}],["typeormmodule.forfeature([certentity",{"_index":1461,"title":{},"body":{"modules/CryptoModule.html":{},"modules/KeyModule.html":{}}}],["typeormmodule.forfeature([cliententry",{"_index":543,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forfeature([presentationconfig",{"_index":2796,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["typeormmodule.forfeature([registrarentity",{"_index":2912,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["typeormmodule.forfeature([session",{"_index":3340,"title":{},"body":{"modules/SessionModule.html":{}}}],["typeormmodule.forfeature([statusmapping",{"_index":3457,"title":{},"body":{"modules/StatusListModule.html":{}}}],["typeormmodule.forrootasync",{"_index":1478,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeormmoduleoptions",{"_index":1463,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":2130,"title":{},"body":{"entities/KeyEntity.html":{},"modules/RegistrarModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":2996,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["typically",{"_index":851,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["unauthorizedexception",{"_index":390,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{}}}],["unauthorizedexception('invalid",{"_index":453,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{}}}],["undefined",{"_index":277,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"classes/TokenRequestDto.html":{},"miscellaneous/variables.html":{}}}],["undefined})@apiproduces('application/json",{"_index":1928,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["undefined})@apiresponse({status",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@post('offer",{"_index":1930,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["undefined})@post('request",{"_index":2756,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["union",{"_index":332,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"miscellaneous/typealiases.html":{}}}],["unique",{"_index":26,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"entities/KeyEntity.html":{},"classes/KeyObj.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["university",{"_index":992,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["unknown",{"_index":714,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/FileSystemKeyService.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vciService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["unsecure",{"_index":2002,"title":{},"body":{"modules/IssuerModule.html":{}}}],["unsigned",{"_index":3684,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["unsupported",{"_index":856,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["up",{"_index":93,"title":{},"body":{"controllers/AppController.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionService.html":{},"miscellaneous/typealiases.html":{}}}],["update",{"_index":942,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["update.dto",{"_index":3179,"title":{},"body":{"controllers/SessionController.html":{},"injectables/StatusListService.html":{}}}],["update.dto.ts",{"_index":3532,"title":{},"body":{"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["update.dto.ts:16",{"_index":3533,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:24",{"_index":3536,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:8",{"_index":3534,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["updatecredentialissuancebindingdto",{"_index":1011,"title":{"classes/UpdateCredentialIssuanceBindingDto.html":{}},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"coverage.html":{}}}],["updated",{"_index":2760,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["updatestatus",{"_index":3462,"title":{},"body":{"injectables/StatusListService.html":{}}}],["updatestatus(value",{"_index":3480,"title":{},"body":{"injectables/StatusListService.html":{}}}],["updating",{"_index":1009,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["uri",{"_index":1502,"title":{},"body":{"entities/DisplayEntity.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"miscellaneous/enumerations.html":{}}}],["url",{"_index":75,"title":{},"body":{"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/DisplayEntity.html":{},"interfaces/FileStorage.html":{},"interfaces/IssuerMetadata.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["url(payload.iss).hostname",{"_index":3067,"title":{},"body":{"injectables/ResolverService.html":{}}}],["urn:${randomuuid",{"_index":653,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["usage",{"_index":1559,"title":{},"body":{"injectables/EncryptionService.html":{},"entities/KeyEntity.html":{},"miscellaneous/typealiases.html":{}}}],["use",{"_index":322,"title":{},"body":{"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/EC_Public.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"injectables/OAuthService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["used",{"_index":62,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"injectables/CryptoImplementationService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["useexternaloidc",{"_index":2056,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["usefactory",{"_index":205,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["useful",{"_index":3205,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["useguards",{"_index":630,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/WellKnownController.html":{}}}],["useguards(jwtauthguard",{"_index":1278,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["useguards(sessionguard",{"_index":645,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{}}}],["useguards(sessionguard)@post('challenge",{"_index":611,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["useguards(sessionguard)@post('token",{"_index":624,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["useinterceptors",{"_index":2402,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["useinterceptors(sessionloggerinterceptor",{"_index":2410,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["user",{"_index":243,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/CredentialsController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vciService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"modules/SessionModule.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["user.sub",{"_index":1841,"title":{},"body":{"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vciService.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["username",{"_index":1487,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["users",{"_index":310,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["uses",{"_index":330,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/HealthController.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/SessionLoggerService.html":{}}}],["using",{"_index":385,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/OAuthController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/WellKnownService.html":{}}}],["utf8",{"_index":1174,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["util",{"_index":2463,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["utility",{"_index":570,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{},"miscellaneous/functions.html":{}}}],["utils/logger//session",{"_index":2406,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["utils/logger/session",{"_index":1985,"title":{},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["utils/mediatype/media",{"_index":3655,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["utils/webhook/webhook.dto",{"_index":289,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/VCT.html":{}}}],["utils/webhook/webhook.service",{"_index":1988,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["uuid",{"_index":1550,"title":{},"body":{"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"dependencies.html":{}}}],["v4",{"_index":1549,"title":{},"body":{"injectables/EncryptionService.html":{},"classes/FileSystemKeyService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{}}}],["valid",{"_index":828,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/StatusUpdateDto.html":{}}}],["valid(\"json",{"_index":197,"title":{},"body":{"modules/AppModule.html":{}}}],["valid(\"trace",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["validate",{"_index":271,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"injectables/OAuthService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{}}}],["validate(authconfigvalidator",{"_index":331,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["validate(config",{"_index":284,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{}}}],["validate(issuancedto",{"_index":1884,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["validate(payload",{"_index":2047,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateclient",{"_index":974,"title":{},"body":{"injectables/ClientService.html":{}}}],["validateclient(clientid",{"_index":920,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["validateclientcredentials",{"_index":2317,"title":{},"body":{"injectables/OAuthService.html":{}}}],["validateclientcredentials(clientid",{"_index":2330,"title":{},"body":{"injectables/OAuthService.html":{}}}],["validated",{"_index":2049,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/Oid4vciService.html":{}}}],["validatenested",{"_index":287,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["validatetokenrequest",{"_index":698,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["validatetokenrequest(body",{"_index":721,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["validation",{"_index":1068,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["validationarguments",{"_index":273,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["validationerror",{"_index":1190,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationerrors",{"_index":1183,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationerrors.length",{"_index":1197,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationerrors.map((error",{"_index":1198,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationschema",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":57,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["validatorconstraint",{"_index":288,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["validatorconstraintinterface",{"_index":269,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["value",{"_index":42,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"entities/DisplayEntity.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"classes/SchemaResponse.html":{},"controllers/SessionController.html":{},"injectables/StatusListService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.authenticationconfig",{"_index":1911,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.authenticationconfig.config",{"_index":1910,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.authenticationconfig.method",{"_index":1909,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.config",{"_index":1356,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.config.vct",{"_index":1353,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.credentialconfigs",{"_index":1905,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.credentialconfigurationid",{"_index":3521,"title":{},"body":{"injectables/StatusListService.html":{}}}],["value.id",{"_index":1352,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.sessionid",{"_index":3520,"title":{},"body":{"injectables/StatusListService.html":{}}}],["value.status",{"_index":3524,"title":{},"body":{"injectables/StatusListService.html":{}}}],["values",{"_index":763,"title":{},"body":{"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"interfaces/TokenPayload.html":{}}}],["values.session",{"_index":2698,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["values.uri",{"_index":2773,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["values.webhook",{"_index":2699,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["varchar",{"_index":3526,"title":{},"body":{"entities/StatusMapping.html":{}}}],["variable",{"_index":3374,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["variables",{"_index":2338,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/OAuthService.html":{},"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":72,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["vault",{"_index":2147,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["vault\").default(\"file",{"_index":2146,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["vault_token",{"_index":2151,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["vault_url",{"_index":2149,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["vaultkeyservice",{"_index":2142,"title":{},"body":{"modules/KeyModule.html":{},"coverage.html":{}}}],["vc",{"_index":1051,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["vcs",{"_index":2799,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vct",{"_index":1027,"title":{"classes/VCT.html":{}},"body":{"entities/CredentialConfig.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/PresentationDuringIssuance.html":{},"classes/VCT.html":{},"coverage.html":{}}}],["vct(@param('id",{"_index":1303,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["vct(id",{"_index":1297,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["verbose",{"_index":2261,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["verifiable",{"_index":1300,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{}}}],["verification",{"_index":489,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{}}}],["verification.'})@apiresponse({status",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{}}}],["verificationcounter",{"_index":3400,"title":{},"body":{"injectables/SessionService.html":{}}}],["verificationresult",{"_index":3134,"title":{},"body":{"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["verified",{"_index":3136,"title":{},"body":{"entities/Session.html":{}}}],["verifiedproof",{"_index":2550,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["verifiedproof.signer.publicjwk",{"_index":2552,"title":{},"body":{"injectables/Oid4vciService.html":{}}}],["verifier",{"_index":1426,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["verifier/oid4vp/dto/presentation",{"_index":1935,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["verifier/oid4vp/oid4vp.module",{"_index":1989,"title":{},"body":{"modules/IssuerModule.html":{}}}],["verifier/oid4vp/oid4vp.service",{"_index":731,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifier/presentations/dto/vp",{"_index":2957,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["verifier/presentations/presentations.module",{"_index":2902,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["verifier/presentations/presentations.service",{"_index":2958,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["verifier/verifier.module",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["verifier_attestations",{"_index":2678,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["verifiermodule",{"_index":122,"title":{"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["verify",{"_index":754,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"miscellaneous/variables.html":{}}}],["verify(data",{"_index":2871,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verify(res.vp_token[att",{"_index":2884,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verifyauthorizationcodeaccesstokenrequest",{"_index":798,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifying",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifypreauthorizedcodeaccesstokenrequest",{"_index":787,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifytoken",{"_index":2027,"title":{},"body":{"injectables/JwtService.html":{}}}],["verifytoken(token",{"_index":1773,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["version",{"_index":3844,"title":{},"body":{"properties.html":{}}}],["via",{"_index":317,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/FilesService.html":{},"classes/KeyService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/SessionService.html":{},"controllers/WellKnownController.html":{}}}],["void",{"_index":927,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vciService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{}}}],["vp",{"_index":560,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{}}}],["vp_formats",{"_index":2667,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["vp_nonce",{"_index":2654,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["vp_token",{"_index":554,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["vprequest",{"_index":2835,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vprequest.tenantid",{"_index":2859,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vprequestrepository",{"_index":2809,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vps",{"_index":2798,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["wallet",{"_index":814,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vciService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"properties.html":{}}}],["want",{"_index":1730,"title":{},"body":{"injectables/FilesService.html":{},"injectables/OAuthService.html":{}}}],["warn",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["we'll",{"_index":852,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"injectables/OAuthService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["web",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"entities/StatusListEntity.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["webhook",{"_index":65,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/Oid4vciService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{}}}],["webhook.auth",{"_index":3635,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhook.auth.config.value",{"_index":3638,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhook.auth.type",{"_index":3636,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhook.auth?.type",{"_index":3640,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhook.url",{"_index":3639,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhookauthconfig",{"_index":66,"title":{"classes/WebHookAuthConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookconfig",{"_index":74,"title":{"classes/WebhookConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuance.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookresponse",{"_index":3624,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhookresponse.data",{"_index":3627,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhookresponse.status",{"_index":3632,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webhooks",{"_index":40,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"miscellaneous/typealiases.html":{}}}],["webhooksent",{"_index":2723,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webhookservice",{"_index":1979,"title":{"injectables/WebhookService.html":{}},"body":{"modules/IssuerModule.html":{},"injectables/Oid4vciService.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"index.html":{}}}],["webhookurl",{"_index":3619,"title":{},"body":{"injectables/WebhookService.html":{}}}],["webook",{"_index":2720,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["well",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"classes/FileSystemKeyService.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["wellknowncontroller",{"_index":128,"title":{"controllers/WellKnownController.html":{}},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["wellknownservice",{"_index":123,"title":{"injectables/WellKnownService.html":{}},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["whether",{"_index":2371,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["whitelist",{"_index":1184,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["willsoto/nestjs",{"_index":512,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"modules/MetricModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"dependencies.html":{}}}],["withfiletypes",{"_index":1160,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["without",{"_index":1779,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["working",{"_index":572,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["write",{"_index":2206,"title":{},"body":{"classes/LocalFileStorage.html":{},"injectables/RegistrarService.html":{}}}],["writing",{"_index":3033,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["wrtites",{"_index":1624,"title":{},"body":{"classes/FileSystemKeyService.html":{}}}],["x",{"_index":1513,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["x509_san_dns",{"_index":2660,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509_san_dns:${hostname",{"_index":2693,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509certificate",{"_index":3055,"title":{},"body":{"injectables/ResolverService.html":{}}}],["x509certificate(buffer.from(cert",{"_index":3064,"title":{},"body":{"injectables/ResolverService.html":{}}}],["x5c",{"_index":1391,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["y",{"_index":1514,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["yes",{"_index":713,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/FileStorage.html":{},"classes/FileSystemKeyService.html":{},"injectables/FilesService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/OAuthService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerService.html":{}}}],["you'd",{"_index":2334,"title":{},"body":{"injectables/OAuthService.html":{}}}],["your_api_key_here",{"_index":60,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["yyyy",{"_index":228,"title":{},"body":{"modules/AppModule.html":{}}}],["zoom",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AccessCertificateResponse.html":{"url":"interfaces/AccessCertificateResponse.html","title":"interface - AccessCertificateResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccessCertificateResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/dto/access-certificate-response.ts\n        \n\n\n            \n                Description\n            \n            \n                Repsonse of access certificate request.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            crt\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            revoked\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        crt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        crt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The public key in PEM format.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier of the access certificate.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        revoked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        revoked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Indicates if the access certificate is revoked.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AccessCertificateResponse {\n    /**\n     * Unique identifier of the access certificate.\n     */\n    id: string;\n    /**\n     * The public key in PEM format.\n     */\n    crt: string;\n    /**\n     * Indicates if the access certificate is revoked.\n     */\n    revoked?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApiKeyConfig.html":{"url":"classes/ApiKeyConfig.html","title":"class - ApiKeyConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiKeyConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for API key authentication in webhooks.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                headerName\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        headerName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:13\n                        \n                    \n\n            \n                \n                    The name of the header where the API key will be sent.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:19\n                        \n                    \n\n            \n                \n                    The value of the API key to be sent in the header.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsIn, IsObject, IsOptional, IsString } from 'class-validator';\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     * @example Authorization\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     * @example Bearer your_api_key_here\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = 'apiKey';\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn(['apiKey'])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                main\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        main\n                        \n                    \n                \n            \n            \n                \n                        \n                    main()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app/app.controller.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiExcludeController } from '@nestjs/swagger';\n\n@ApiExcludeController()\n@Controller()\nexport class AppController {\n    @Get()\n    main(): string {\n        return 'EUDIPLO is up and running, more information at https://openwallet-foundation-labs.github.io/eudiplo/latest/';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\n\n\nMetricModule\n\nMetricModule\n\nAppModule -->\n\nMetricModule->AppModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\n\n\nStorageModule\n\nStorageModule\n\nAppModule -->\n\nStorageModule->AppModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\nWellKnownService\n\nWellKnownService\n\nAppModule -->\n\nWellKnownService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            WellKnownService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            WellKnownController\n                        \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CryptoModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            IssuerModule\n                        \n                        \n                            KeyModule\n                        \n                        \n                            MetricModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            StorageModule\n                        \n                        \n                            VerifierModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { ScheduleModule } from \"@nestjs/schedule\";\nimport { ServeStaticModule } from \"@nestjs/serve-static\";\nimport * as Joi from \"joi\";\nimport { LoggerModule } from \"nestjs-pino\";\nimport { isAbsolute, join } from \"path\";\nimport { AppController } from \"./app/app.controller\";\nimport { AUTH_VALIDATION_SCHEMA, AuthModule } from \"./auth/auth.module\";\nimport { CryptoModule } from \"./crypto/crypto.module\";\nimport { CRYPTO_VALIDATION_SCHEMA } from \"./crypto/key/crypto-implementation/crypto-implementation.module\";\nimport { KEY_VALIDATION_SCHEMA, KeyModule } from \"./crypto/key/key.module\";\nimport { DatabaseModule } from \"./database/database.module\";\nimport { HealthModule } from \"./health/health.module\";\nimport { ISSUER_VALIDATION_SCHEMA, IssuerModule } from \"./issuer/issuer.module\";\nimport { MetricModule } from \"./metric/metric.module\";\nimport {\n    REGISTRAR_VALIDATION_SCHEMA,\n    RegistrarModule,\n} from \"./registrar/registrar.module\";\nimport {\n    SESSION_VALIDATION_SCHEMA,\n    SessionModule,\n} from \"./session/session.module\";\nimport { CONFIG_STORAGE_SCHEMA, StorageModule } from \"./storage/storage.module\";\nimport { VerifierModule } from \"./verifier/verifier.module\";\nimport { WellKnownController } from \"./well-known/well-known.controller\";\nimport { WellKnownService } from \"./well-known/well-known.service\";\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            validationSchema: Joi.object({\n                FOLDER: Joi.string().default(\"../../tmp\"),\n                RP_NAME: Joi.string().default(\"EUDIPLO\"),\n                LOG_LEVEL: Joi.string()\n                    .valid(\"trace\", \"debug\", \"info\", \"warn\", \"error\", \"fatal\")\n                    .default(\n                        process.env.NODE_ENV === \"production\"\n                            ? \"warn\"\n                            : \"debug\",\n                    ),\n                CONFIG_IMPORT: Joi.boolean().default(false),\n                CONFIG_IMPORT_FORCE: Joi.boolean().default(false),\n                CONFIG_FOLDER: Joi.string().default(\"../../assets/config\"),\n                ...AUTH_VALIDATION_SCHEMA,\n                ...REGISTRAR_VALIDATION_SCHEMA,\n                ...KEY_VALIDATION_SCHEMA,\n                ...CRYPTO_VALIDATION_SCHEMA,\n                ...ISSUER_VALIDATION_SCHEMA,\n                ...SESSION_VALIDATION_SCHEMA,\n                ...CONFIG_STORAGE_SCHEMA,\n                LOG_ENABLE_HTTP_LOGGER: Joi.boolean().default(false),\n                LOG_ENABLE_SESSION_LOGGER: Joi.boolean().default(false),\n                LOG_DEBUG_MODE: Joi.boolean().default(false),\n                LOG_FORMAT: Joi.string()\n                    .valid(\"json\", \"pretty\")\n                    .default(\n                        process.env.NODE_ENV === \"production\"\n                            ? \"json\"\n                            : \"pretty\",\n                    ),\n            }),\n            isGlobal: true,\n            expandVariables: true,\n        }),\n        LoggerModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const enableHttpLogger = configService.get(\n                    \"LOG_ENABLE_HTTP_LOGGER\",\n                    false,\n                );\n                //TODO: check if logging to file is needed: https://github.com/iamolegga/nestjs-pino?tab=readme-ov-file#asynchronous-logging\n                return {\n                    pinoHttp: {\n                        level: configService.get(\"LOG_LEVEL\", \"info\"),\n                        autoLogging: enableHttpLogger,\n                        transport: {\n                            target: \"pino-pretty\",\n                            options: {\n                                colorize: true,\n                                singleLine: false,\n                                translateTime: \"yyyy-mm-dd HH:MM:ss\",\n                                ignore: \"pid,hostname\",\n                            },\n                        },\n                        customProps: (req: any) => ({\n                            sessionId: req.params?.session,\n                        }),\n                        serializers: {\n                            req: (req: any) => ({\n                                method: req.method,\n                                url: req.url,\n                                headers: {\n                                    \"user-agent\": req.headers[\"user-agent\"],\n                                    \"content-type\": req.headers[\"content-type\"],\n                                },\n                                sessionId: req.params?.session,\n                                tenantId: req.params?.tenantId,\n                            }),\n                            res: (res: any) => ({\n                                statusCode: res.statusCode,\n                            }),\n                        },\n                    },\n                };\n            },\n        }),\n        KeyModule.forRoot(),\n        CryptoModule,\n        IssuerModule,\n        VerifierModule,\n        RegistrarModule,\n        ScheduleModule.forRoot(),\n        ServeStaticModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const folder = configService.getOrThrow(\"FOLDER\");\n                const rootPath = isAbsolute(folder)\n                    ? join(folder, \"public\")\n                    : join(__dirname, \"../\", folder, \"public\");\n                return [\n                    {\n                        rootPath,\n                    },\n                ];\n            },\n        }),\n        DatabaseModule,\n        SessionModule,\n        DatabaseModule,\n        HealthModule,\n        AuthModule,\n        MetricModule,\n        StorageModule.forRoot(),\n    ],\n    controllers: [WellKnownController, AppController],\n    providers: [WellKnownService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthConfigValidator.html":{"url":"classes/AuthConfigValidator.html","title":"class - AuthConfigValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthConfigValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom validator to ensure config type matches the authentication method\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/dto/authentication-config.dto.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         \"config must be undefined when method is \\\"none\\\"\" | \"config must be of type AuthenticationUrlConfig when method is \\\"auth\\\"\" | \"config must be of type PresentationDuringIssuanceConfig when method is \\\"presentationDuringIssuance\\\"\" | \"config type does not match the specified method\"\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(config: any, args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/dto/authentication-config.dto.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsUrl,\n    Validate,\n    ValidateNested,\n    ValidationArguments,\n    ValidatorConstraint,\n    ValidatorConstraintInterface,\n} from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\nimport { PresentationDuringIssuance } from '../../credentials-metadata/dto/credential-config.dto';\n\n/**\n * Custom validator to ensure config type matches the authentication method\n */\n@ValidatorConstraint({ name: 'authConfigValidator', async: false })\nexport class AuthConfigValidator implements ValidatorConstraintInterface {\n    validate(config: any, args: ValidationArguments) {\n        const obj = args.object as AuthenticationConfigDto;\n\n        if (obj.method === 'none') {\n            // For 'none' method, config should be undefined\n            return config === undefined;\n        }\n\n        if (obj.method === 'auth') {\n            // For 'auth' method, config must be present and have 'url' property\n            return (\n                config &&\n                typeof config === 'object' &&\n                typeof config.url === 'string'\n            );\n        }\n\n        if (obj.method === 'presentationDuringIssuance') {\n            // For 'presentationDuringIssuance' method, config must be present and have 'presentation' property\n            return config && typeof config === 'object' && config.presentation;\n        }\n\n        return false;\n    }\n\n    defaultMessage(args: ValidationArguments) {\n        const obj = args.object as AuthenticationConfigDto;\n\n        if (obj.method === 'none') {\n            return 'config must be undefined when method is \"none\"';\n        }\n\n        if (obj.method === 'auth') {\n            return 'config must be of type AuthenticationUrlConfig when method is \"auth\"';\n        }\n\n        if (obj.method === 'presentationDuringIssuance') {\n            return 'config must be of type PresentationDuringIssuanceConfig when method is \"presentationDuringIssuance\"';\n        }\n\n        return 'config type does not match the specified method';\n    }\n}\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsUrl()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Presentation configuration that specifies what credentials need to be presented via OID4VP\n     */\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuance)\n    presentation: PresentationDuringIssuance;\n}\n\n/**\n * Base class for authentication configurations\n * Determines which OpenID4VC flow to use for the issuance process\n */\nexport class AuthenticationConfigDto {\n    /**\n     * The authentication method to use:\n     * - 'none': Pre-authorized code flow (no user authentication)\n     * - 'auth': OID4VCI authorized code flow (user redirect for authentication)\n     * - 'presentationDuringIssuance': OID4VP flow (credential presentation required)\n     */\n    @IsIn(['none', 'auth', 'presentationDuringIssuance'])\n    method: 'none' | 'auth' | 'presentationDuringIssuance';\n\n    /**\n     * Configuration specific to the selected authentication method\n     * - For 'none': no config needed (undefined) - uses pre-authorized code flow\n     * - For 'auth': AuthenticationUrlConfig - for OID4VCI authorized code flow\n     * - For 'presentationDuringIssuance': PresentationDuringIssuanceConfig - for OID4VP flow\n     */\n    @IsOptional()\n    @Validate(AuthConfigValidator)\n    config?: AuthenticationUrlConfig | PresentationDuringIssuanceConfig;\n}\n\n/**\n * Union type for authentication configurations\n * Each method corresponds to a specific OpenID4VC flow\n */\nexport type AuthenticationConfig =\n    | { method: 'none' } // Pre-authorized code flow\n    | { method: 'auth'; config: AuthenticationUrlConfig } // OID4VCI authorized code flow\n    | {\n          method: 'presentationDuringIssuance'; // OID4VP flow\n          config: PresentationDuringIssuanceConfig;\n      };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                getGlobalJwks\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOAuth2Token\n                            \n                            \n                                    \n                                    \n                                    \n                                getOidcDiscovery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getGlobalJwks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGlobalJwks()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('.well-known/jwks.json')@ApiOperation({summary: 'JSON Web Key Set', description: 'Returns the JSON Web Key Set for token verification.'})@ApiResponse({status: 200, description: 'JSON Web Key Set'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:193\n                        \n                    \n\n\n            \n                \n                        Global JWKS endpoint for client credentials flow.\nThis provides the JSON Web Key Set for verifying tokens issued by this server.\n\n\n                        \n                            Returns :         KeyResponseDto\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getOAuth2Token\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOAuth2Token(body: any, headers: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('oauth2/token')@ApiBody({type: ClientCredentialsDto, examples: undefined})@ApiResponse({status: 200, description: 'OAuth2 token response', type: TokenResponse, example: undefined})@ApiResponse({status: 401, description: 'Invalid client credentials'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:70\n                        \n                    \n\n\n            \n                \n                        OAuth2 Token endpoint - supports client credentials flow only\nAccepts client credentials either in Authorization header (Basic auth) or request body\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                headers\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getOidcDiscovery\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOidcDiscovery()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('.well-known/oauth-authorization-server')@ApiOperation({summary: 'OIDC Discovery Configuration', description: 'Returns the OpenID Connect discovery configuration for client credentials authentication.'})@ApiResponse({status: 200, description: 'OIDC Discovery Configuration'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:158\n                        \n                    \n\n\n            \n                \n                        OIDC Discovery endpoint for client credentials flow.\nThis endpoint provides the OpenID Connect configuration for applications\nthat need to authenticate using client_id and client_secret.\n\n\n                        \n                            Returns :         OidcDiscoveryDto\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Get,\n    Headers,\n    Post,\n    UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    ApiBody,\n    ApiExcludeController,\n    ApiOperation,\n    ApiResponse,\n    ApiTags,\n} from '@nestjs/swagger';\nimport { KeyResponseDto } from '../crypto/key/dto/key-response.dto';\nimport { ClientService } from './client.service';\nimport { ClientCredentialsDto } from './dto/client-credentials.dto';\nimport { OidcDiscoveryDto } from './dto/oidc-discovery.dto';\nimport { TokenResponse } from './dto/token-response.dto';\nimport { JwtService } from './jwt.service';\nimport { TokenPayload } from './token.decorator';\n\n@ApiExcludeController(process.env.SWAGGER_ALL !== 'true')\n@ApiTags('Authentication')\n@Controller('')\nexport class AuthController {\n    constructor(\n        private jwtService: JwtService,\n        private clientService: ClientService,\n        private configService: ConfigService,\n    ) {}\n\n    /**\n     * OAuth2 Token endpoint - supports client credentials flow only\n     * Accepts client credentials either in Authorization header (Basic auth) or request body\n     * @param body\n     * @param headers\n     * @returns\n     */\n    @Post('oauth2/token')\n    @ApiBody({\n        type: ClientCredentialsDto,\n        examples: {\n            client_credentials: {\n                summary: 'Client Credentials Flow',\n                value: {\n                    grant_type: 'client_credentials',\n                    client_id: 'root',\n                    client_secret: 'root',\n                },\n            },\n        },\n    })\n    @ApiResponse({\n        status: 200,\n        description: 'OAuth2 token response',\n        type: TokenResponse,\n        example: {\n            access_token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n            token_type: 'Bearer',\n            expires_in: 86400,\n        },\n    })\n    @ApiResponse({\n        status: 401,\n        description: 'Invalid client credentials',\n    })\n    async getOAuth2Token(\n        @Body() body: any,\n        @Headers() headers: any,\n    ): Promise {\n        if (this.jwtService.isUsingExternalOIDC()) {\n            throw new UnauthorizedException(\n                'OAuth2 token endpoint is not available when using external OIDC provider. Use your external OIDC provider for authentication.',\n            );\n        }\n\n        // Only support client credentials flow\n        if (body.grant_type !== 'client_credentials') {\n            throw new UnauthorizedException(\n                'Only client_credentials grant type is supported',\n            );\n        }\n\n        let clientId: string;\n        let clientSecret: string;\n\n        // Try to extract credentials from Authorization header (Basic auth)\n        const authHeader = headers.authorization;\n        if (authHeader && authHeader.startsWith('Basic ')) {\n            try {\n                const base64Credentials = authHeader.substring(6);\n                const credentials = Buffer.from(\n                    base64Credentials,\n                    'base64',\n                ).toString('ascii');\n                const [id, secret] = credentials.split(':');\n                clientId = id;\n                clientSecret = secret;\n            } catch {\n                throw new UnauthorizedException(\n                    'Invalid Authorization header format',\n                );\n            }\n        } else {\n            // Fall back to request body\n            clientId = body.client_id;\n            clientSecret = body.client_secret;\n        }\n\n        if (!clientId || !clientSecret) {\n            throw new UnauthorizedException(\n                'Client credentials must be provided either in Authorization header (Basic auth) or request body',\n            );\n        }\n\n        const client = this.clientService.validateClient(\n            clientId,\n            clientSecret,\n        );\n        if (!client) {\n            throw new UnauthorizedException('Invalid client credentials');\n        }\n\n        const payload: TokenPayload = {\n            sub: client.id,\n        };\n\n        const token = await this.jwtService.generateToken(payload, {\n            expiresIn: '24h',\n            audience: 'eudiplo-service',\n        });\n\n        return {\n            access_token: token,\n            token_type: 'Bearer',\n            expires_in: 86400, // 24 hours in seconds\n        };\n    }\n\n    /**\n     * OIDC Discovery endpoint for client credentials flow.\n     * This endpoint provides the OpenID Connect configuration for applications\n     * that need to authenticate using client_id and client_secret.\n     */\n    @Get('.well-known/oauth-authorization-server')\n    @ApiOperation({\n        summary: 'OIDC Discovery Configuration',\n        description:\n            'Returns the OpenID Connect discovery configuration for client credentials authentication.',\n    })\n    @ApiResponse({\n        status: 200,\n        description: 'OIDC Discovery Configuration',\n    })\n    getOidcDiscovery(): OidcDiscoveryDto {\n        const publicUrl = this.configService.getOrThrow('PUBLIC_URL');\n\n        return {\n            issuer: publicUrl,\n            token_endpoint: `${publicUrl}/oauth2/token`,\n            jwks_uri: `${publicUrl}/.well-known/jwks.json`,\n            response_types_supported: ['token'],\n            grant_types_supported: ['client_credentials'],\n            token_endpoint_auth_methods_supported: [\n                'client_secret_basic',\n                'client_secret_post',\n            ],\n            subject_types_supported: ['public'],\n            id_token_signing_alg_values_supported: ['ES256'],\n            scopes_supported: ['openid'],\n            claims_supported: ['iss', 'sub', 'aud', 'exp', 'iat'],\n            service_documentation:\n                'https://openwallet-foundation-labs.github.io/eudiplo/latest/',\n        };\n    }\n\n    /**\n     * Global JWKS endpoint for client credentials flow.\n     * This provides the JSON Web Key Set for verifying tokens issued by this server.\n     */\n    @Get('.well-known/jwks.json')\n    @ApiOperation({\n        summary: 'JSON Web Key Set',\n        description: 'Returns the JSON Web Key Set for token verification.',\n    })\n    @ApiResponse({\n        status: 200,\n        description: 'JSON Web Key Set',\n    })\n    getGlobalJwks(): KeyResponseDto {\n        // For now, return an empty key set since the actual keys are tenant-specific\n        // This can be enhanced later to include global signing keys if needed\n        return {\n            keys: [],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCryptoModule->AuthModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nAuthModule -->\n\nIssuerModule->AuthModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nAuthModule -->\n\nRegistrarModule->AuthModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nAuthModule -->\n\nStatusListModule->AuthModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nJwtService \n\nJwtService \n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nClientService\n\nClientService\n\nAuthModule -->\n\nClientService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ClientService\n                        \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            IssuerModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { makeGaugeProvider } from \"@willsoto/nestjs-prometheus\";\nimport * as Joi from \"joi\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { IssuerModule } from \"../issuer/issuer.module\";\nimport { StatusListModule } from \"../issuer/status-list/status-list.module\";\nimport { RegistrarModule } from \"../registrar/registrar.module\";\nimport { StorageModule } from \"../storage/storage.module\";\nimport { AuthController } from \"./auth.controller\";\nimport { JwtAuthGuard } from \"./auth.guard\";\nimport { ClientService } from \"./client.service\";\nimport { ClientEntry } from \"./entitites/client.entity\";\nimport { JwtService } from \"./jwt.service\";\nimport { JwtStrategy } from \"./jwt.strategy\";\n\nexport const DEFAULT_JWT_SECRET = \"supersecret\";\nexport const DEFAULT_AUTH_CLIENT_ID = \"root\";\nexport const DEFAULT_AUTH_CLIENT_SECRET = \"root\";\n\nexport const AUTH_VALIDATION_SCHEMA = {\n    OIDC: Joi.string().optional(),\n    KEYCLOAK_INTERNAL_ISSUER_URL: Joi.when(\"OIDC\", {\n        then: Joi.string().required(),\n        otherwise: Joi.string().optional(),\n    }),\n    KEYCLOAK_ALGORITHM: Joi.when(\"OIDC\", {\n        then: Joi.string().default(\"RS256\"),\n        otherwise: Joi.string().optional(),\n    }),\n    JWT_SECRET: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_JWT_SECRET),\n    }),\n    JWT_ISSUER: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().optional().default(\"eudiplo-service\"),\n    }),\n    JWT_EXPIRES_IN: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(\"24h\"),\n    }),\n    AUTH_CLIENT_SECRET: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_AUTH_CLIENT_SECRET),\n    }),\n    AUTH_CLIENT_ID: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_AUTH_CLIENT_ID),\n    }),\n};\n@Module({\n    imports: [\n        PassportModule,\n        ConfigModule,\n        CryptoModule,\n        StatusListModule,\n        RegistrarModule,\n        IssuerModule,\n        TypeOrmModule.forFeature([ClientEntry]),\n    ],\n    providers: [\n        JwtStrategy,\n        JwtAuthGuard,\n        JwtService,\n        ClientService,\n        makeGaugeProvider({\n            name: \"tenant_client_total\",\n            help: \"Total number of tenant clients\",\n        }),\n    ],\n    controllers: [AuthController],\n    exports: [PassportModule, JwtStrategy, JwtAuthGuard, JwtService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthResponse.html":{"url":"interfaces/AuthResponse.html","title":"interface - AuthResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/auth-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                AuthResponse DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            state\n                                        \n                                \n                                \n                                        \n                                            vp_token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The state parameter to maintain state between the request and callback.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        vp_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        vp_token:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The VP token containing the presentation data.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AuthResponse {\n    /**\n     * The VP token containing the presentation data.\n     */\n    vp_token: {\n        /**\n         * Key-value pairs representing the VP token data.\n         */\n        [key: string]: string;\n    };\n    /**\n     * The state parameter to maintain state between the request and callback.\n     */\n    state: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationConfigDto.html":{"url":"classes/AuthenticationConfigDto.html","title":"class - AuthenticationConfigDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationConfigDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Base class for authentication configurations\nDetermines which OpenID4VC flow to use for the issuance process\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                config\n                            \n                            \n                                    \n                                method\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthenticationUrlConfig | PresentationDuringIssuanceConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Validate(AuthConfigValidator)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:123\n                        \n                    \n\n            \n                \n                    Configuration specific to the selected authentication method\n\nFor 'none': no config needed (undefined) - uses pre-authorized code flow\nFor 'auth': AuthenticationUrlConfig - for OID4VCI authorized code flow\nFor 'presentationDuringIssuance': PresentationDuringIssuanceConfig - for OID4VP flow\n\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"none\" | \"auth\" | \"presentationDuringIssuance\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['none', 'auth', 'presentationDuringIssuance'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:113\n                        \n                    \n\n            \n                \n                    The authentication method to use:\n\n'none': Pre-authorized code flow (no user authentication)\n'auth': OID4VCI authorized code flow (user redirect for authentication)\n'presentationDuringIssuance': OID4VP flow (credential presentation required)\n\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsUrl,\n    Validate,\n    ValidateNested,\n    ValidationArguments,\n    ValidatorConstraint,\n    ValidatorConstraintInterface,\n} from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\nimport { PresentationDuringIssuance } from '../../credentials-metadata/dto/credential-config.dto';\n\n/**\n * Custom validator to ensure config type matches the authentication method\n */\n@ValidatorConstraint({ name: 'authConfigValidator', async: false })\nexport class AuthConfigValidator implements ValidatorConstraintInterface {\n    validate(config: any, args: ValidationArguments) {\n        const obj = args.object as AuthenticationConfigDto;\n\n        if (obj.method === 'none') {\n            // For 'none' method, config should be undefined\n            return config === undefined;\n        }\n\n        if (obj.method === 'auth') {\n            // For 'auth' method, config must be present and have 'url' property\n            return (\n                config &&\n                typeof config === 'object' &&\n                typeof config.url === 'string'\n            );\n        }\n\n        if (obj.method === 'presentationDuringIssuance') {\n            // For 'presentationDuringIssuance' method, config must be present and have 'presentation' property\n            return config && typeof config === 'object' && config.presentation;\n        }\n\n        return false;\n    }\n\n    defaultMessage(args: ValidationArguments) {\n        const obj = args.object as AuthenticationConfigDto;\n\n        if (obj.method === 'none') {\n            return 'config must be undefined when method is \"none\"';\n        }\n\n        if (obj.method === 'auth') {\n            return 'config must be of type AuthenticationUrlConfig when method is \"auth\"';\n        }\n\n        if (obj.method === 'presentationDuringIssuance') {\n            return 'config must be of type PresentationDuringIssuanceConfig when method is \"presentationDuringIssuance\"';\n        }\n\n        return 'config type does not match the specified method';\n    }\n}\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsUrl()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Presentation configuration that specifies what credentials need to be presented via OID4VP\n     */\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuance)\n    presentation: PresentationDuringIssuance;\n}\n\n/**\n * Base class for authentication configurations\n * Determines which OpenID4VC flow to use for the issuance process\n */\nexport class AuthenticationConfigDto {\n    /**\n     * The authentication method to use:\n     * - 'none': Pre-authorized code flow (no user authentication)\n     * - 'auth': OID4VCI authorized code flow (user redirect for authentication)\n     * - 'presentationDuringIssuance': OID4VP flow (credential presentation required)\n     */\n    @IsIn(['none', 'auth', 'presentationDuringIssuance'])\n    method: 'none' | 'auth' | 'presentationDuringIssuance';\n\n    /**\n     * Configuration specific to the selected authentication method\n     * - For 'none': no config needed (undefined) - uses pre-authorized code flow\n     * - For 'auth': AuthenticationUrlConfig - for OID4VCI authorized code flow\n     * - For 'presentationDuringIssuance': PresentationDuringIssuanceConfig - for OID4VP flow\n     */\n    @IsOptional()\n    @Validate(AuthConfigValidator)\n    config?: AuthenticationUrlConfig | PresentationDuringIssuanceConfig;\n}\n\n/**\n * Union type for authentication configurations\n * Each method corresponds to a specific OpenID4VC flow\n */\nexport type AuthenticationConfig =\n    | { method: 'none' } // Pre-authorized code flow\n    | { method: 'auth'; config: AuthenticationUrlConfig } // OID4VCI authorized code flow\n    | {\n          method: 'presentationDuringIssuance'; // OID4VP flow\n          config: PresentationDuringIssuanceConfig;\n      };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationConfigHelper.html":{"url":"classes/AuthenticationConfigHelper.html","title":"class - AuthenticationConfigHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationConfigHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.helper.ts\n        \n\n\n            \n                Description\n            \n            \n                Utility functions for working with OpenID4VC authentication configurations\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getPresentationConfig\n                            \n                            \n                                    Static\n                                isAuthUrlAuth\n                            \n                            \n                                    Static\n                                isNoneAuth\n                            \n                            \n                                    Static\n                                isPresentationDuringIssuanceAuth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getPresentationConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPresentationConfig(config: AuthenticationConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/dto/authentication-config.helper.ts:44\n                        \n                    \n\n\n            \n                \n                        Get the presentation configuration if the method is 'presentationDuringIssuance'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            AuthenticationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PresentationDuringIssuanceConfig | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isAuthUrlAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuthUrlAuth(config: AuthenticationConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/dto/authentication-config.helper.ts:23\n                        \n                    \n\n\n            \n                \n                        Type guard to check if the config uses OID4VCI authorized code flow\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            AuthenticationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isNoneAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isNoneAuth(config: AuthenticationConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/dto/authentication-config.helper.ts:14\n                        \n                    \n\n\n            \n                \n                        Type guard to check if the config uses pre-authorized code flow\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            AuthenticationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isPresentationDuringIssuanceAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isPresentationDuringIssuanceAuth(config: AuthenticationConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/dto/authentication-config.helper.ts:32\n                        \n                    \n\n\n            \n                \n                        Type guard to check if the config uses OID4VP flow\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            AuthenticationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    AuthenticationConfig,\n    AuthenticationUrlConfig,\n    PresentationDuringIssuanceConfig,\n} from './authentication-config.dto';\n\n/**\n * Utility functions for working with OpenID4VC authentication configurations\n */\nexport class AuthenticationConfigHelper {\n    /**\n     * Type guard to check if the config uses pre-authorized code flow\n     */\n    static isNoneAuth(\n        config: AuthenticationConfig,\n    ): config is { method: 'none' } {\n        return config.method === 'none';\n    }\n\n    /**\n     * Type guard to check if the config uses OID4VCI authorized code flow\n     */\n    static isAuthUrlAuth(\n        config: AuthenticationConfig,\n    ): config is { method: 'auth'; config: AuthenticationUrlConfig } {\n        return config.method === 'auth';\n    }\n\n    /**\n     * Type guard to check if the config uses OID4VP flow\n     */\n    static isPresentationDuringIssuanceAuth(\n        config: AuthenticationConfig,\n    ): config is {\n        method: 'presentationDuringIssuance';\n        config: PresentationDuringIssuanceConfig;\n    } {\n        return config.method === 'presentationDuringIssuance';\n    }\n\n    /**\n     * Get the presentation configuration if the method is 'presentationDuringIssuance'\n     */\n    static getPresentationConfig(\n        config: AuthenticationConfig,\n    ): PresentationDuringIssuanceConfig | null {\n        if (this.isPresentationDuringIssuanceAuth(config)) {\n            return config.config;\n        }\n        return null;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationUrlConfig.html":{"url":"classes/AuthenticationUrlConfig.html","title":"class - AuthenticationUrlConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationUrlConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for authentication method 'auth'\nUsed for OID4VCI authorized code flow where the user will be redirected for authentication\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                url\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:75\n                        \n                    \n\n            \n                \n                    The URL used in the OID4VCI authorized code flow.\nThis URL is where users will be redirected for authentication.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:84\n                        \n                    \n\n            \n                \n                    Optional webhook configuration for authentication callbacks\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsUrl,\n    Validate,\n    ValidateNested,\n    ValidationArguments,\n    ValidatorConstraint,\n    ValidatorConstraintInterface,\n} from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\nimport { PresentationDuringIssuance } from '../../credentials-metadata/dto/credential-config.dto';\n\n/**\n * Custom validator to ensure config type matches the authentication method\n */\n@ValidatorConstraint({ name: 'authConfigValidator', async: false })\nexport class AuthConfigValidator implements ValidatorConstraintInterface {\n    validate(config: any, args: ValidationArguments) {\n        const obj = args.object as AuthenticationConfigDto;\n\n        if (obj.method === 'none') {\n            // For 'none' method, config should be undefined\n            return config === undefined;\n        }\n\n        if (obj.method === 'auth') {\n            // For 'auth' method, config must be present and have 'url' property\n            return (\n                config &&\n                typeof config === 'object' &&\n                typeof config.url === 'string'\n            );\n        }\n\n        if (obj.method === 'presentationDuringIssuance') {\n            // For 'presentationDuringIssuance' method, config must be present and have 'presentation' property\n            return config && typeof config === 'object' && config.presentation;\n        }\n\n        return false;\n    }\n\n    defaultMessage(args: ValidationArguments) {\n        const obj = args.object as AuthenticationConfigDto;\n\n        if (obj.method === 'none') {\n            return 'config must be undefined when method is \"none\"';\n        }\n\n        if (obj.method === 'auth') {\n            return 'config must be of type AuthenticationUrlConfig when method is \"auth\"';\n        }\n\n        if (obj.method === 'presentationDuringIssuance') {\n            return 'config must be of type PresentationDuringIssuanceConfig when method is \"presentationDuringIssuance\"';\n        }\n\n        return 'config type does not match the specified method';\n    }\n}\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsUrl()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Presentation configuration that specifies what credentials need to be presented via OID4VP\n     */\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuance)\n    presentation: PresentationDuringIssuance;\n}\n\n/**\n * Base class for authentication configurations\n * Determines which OpenID4VC flow to use for the issuance process\n */\nexport class AuthenticationConfigDto {\n    /**\n     * The authentication method to use:\n     * - 'none': Pre-authorized code flow (no user authentication)\n     * - 'auth': OID4VCI authorized code flow (user redirect for authentication)\n     * - 'presentationDuringIssuance': OID4VP flow (credential presentation required)\n     */\n    @IsIn(['none', 'auth', 'presentationDuringIssuance'])\n    method: 'none' | 'auth' | 'presentationDuringIssuance';\n\n    /**\n     * Configuration specific to the selected authentication method\n     * - For 'none': no config needed (undefined) - uses pre-authorized code flow\n     * - For 'auth': AuthenticationUrlConfig - for OID4VCI authorized code flow\n     * - For 'presentationDuringIssuance': PresentationDuringIssuanceConfig - for OID4VP flow\n     */\n    @IsOptional()\n    @Validate(AuthConfigValidator)\n    config?: AuthenticationUrlConfig | PresentationDuringIssuanceConfig;\n}\n\n/**\n * Union type for authentication configurations\n * Each method corresponds to a specific OpenID4VC flow\n */\nexport type AuthenticationConfig =\n    | { method: 'none' } // Pre-authorized code flow\n    | { method: 'auth'; config: AuthenticationUrlConfig } // OID4VCI authorized code flow\n    | {\n          method: 'presentationDuringIssuance'; // OID4VP flow\n          config: PresentationDuringIssuanceConfig;\n      };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizationResponse.html":{"url":"classes/AuthorizationResponse.html","title":"class - AuthorizationResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizationResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/authorization-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the authorization response containing the VP token.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                response\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/authorization-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The response string containing the authorization details.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\n/**\n * DTO for the authorization response containing the VP token.\n */\nexport class AuthorizationResponse {\n    /**\n     * The response string containing the authorization details.\n     */\n    @IsString()\n    response: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthorizeController.html":{"url":"controllers/AuthorizeController.html","title":"controller - AuthorizeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthorizeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/authorize\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI authorization endpoints.\nThis controller handles the authorization requests, token requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                authorizationChallengeEndpoint\n                            \n                            \n                                    \n                                authorize\n                            \n                            \n                                    \n                                    \n                                    Async\n                                par\n                            \n                            \n                                    \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(res: Response, body: AuthorizeQueries, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Post('challenge')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:94\n                        \n                    \n\n\n            \n                \n                        Endpoint for the authorization challenge.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorize\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorize(queries: AuthorizeQueries, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:41\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Authorization Request.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        par\n                        \n                    \n                \n            \n            \n                \n                        \n                    par(body: AuthorizeQueries)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({description: 'Pushed Authorization Request', type: AuthorizeQueries})@Post('par')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:55\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Pushed Authorization Request (PAR).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        token\n                        \n                    \n                \n            \n            \n                \n                        \n                    token(body: any, req: Request, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Post('token')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:77\n                        \n                    \n\n\n            \n                \n                        Endpoint to validate the token request.\nThis endpoint is used to exchange the authorization code for an access token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\nimport {\n    Body,\n    Controller,\n    Get,\n    Post,\n    Query,\n    Req,\n    Res,\n    UseGuards,\n} from '@nestjs/common';\nimport { ApiBody, ApiExcludeController } from '@nestjs/swagger';\nimport type { Request, Response } from 'express';\nimport { Session } from '../../session/entities/session.entity';\nimport { SessionEntity } from '../../session/session.decorator';\nimport { SessionGuard } from '../../session/session.guard';\nimport { SessionService } from '../../session/session.service';\nimport { AuthorizeService } from './authorize.service';\nimport { AuthorizeQueries } from './dto/authorize-request.dto';\nimport { ParResponseDto } from './dto/par-response.dto';\n\n/**\n * Controller for the OpenID4VCI authorization endpoints.\n * This controller handles the authorization requests, token requests.\n */\n@ApiExcludeController(process.env.SWAGGER_ALL !== 'true')\n@UseGuards(SessionGuard)\n@Controller(':session/authorize')\nexport class AuthorizeController {\n    constructor(\n        private readonly authorizeService: AuthorizeService,\n        private sessionService: SessionService,\n    ) {}\n\n    /**\n     * Endpoint to handle the Authorization Request.\n     * @param queries\n     * @param res\n     */\n    @Get()\n    authorize(@Query() queries: AuthorizeQueries, @Res() res: Response) {\n        return this.authorizeService.sendAuthorizationResponse(queries, res);\n    }\n\n    /**\n     * Endpoint to handle the Pushed Authorization Request (PAR).\n     * @param body\n     * @returns\n     */\n    @ApiBody({\n        description: 'Pushed Authorization Request',\n        type: AuthorizeQueries,\n    })\n    @Post('par')\n    async par(@Body() body: AuthorizeQueries): Promise {\n        const request_uri = `urn:${randomUUID()}`;\n        // save both so we can retrieve the session also via the request_uri in the authorize step.\n        await this.sessionService.add(body.issuer_state!, {\n            request_uri,\n            auth_queries: body,\n        });\n        return {\n            expires_in: 500,\n            request_uri,\n        };\n    }\n\n    /**\n     * Endpoint to validate the token request.\n     * This endpoint is used to exchange the authorization code for an access token.\n     * @param body\n     * @param req\n     * @returns\n     */\n    @UseGuards(SessionGuard)\n    @Post('token')\n    token(\n        @Body() body: any,\n        @Req() req: Request,\n        @SessionEntity() session: Session,\n    ): Promise {\n        //TODO: define body\n        return this.authorizeService.validateTokenRequest(body, req, session);\n    }\n\n    /**\n     * Endpoint for the authorization challenge.\n     * @param res\n     * @param body\n     * @returns\n     */\n    @UseGuards(SessionGuard)\n    @Post('challenge')\n    authorizationChallengeEndpoint(\n        @Res() res: Response,\n        @Body() body: AuthorizeQueries,\n        @SessionEntity() session: Session,\n    ) {\n        return this.authorizeService.authorizationChallengeEndpoint(\n            res,\n            body,\n            session,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizeQueries.html":{"url":"classes/AuthorizeQueries.html","title":"class - AuthorizeQueries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizeQueries\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/authorize-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                auth_session\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                client_id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge_method\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                dpop_jkt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                issuer_state\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                redirect_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                resource\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                scope\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        auth_session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge_method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        dpop_jkt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        issuer_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        redirect_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from 'class-validator';\n\nexport class AuthorizeQueries {\n    @IsOptional()\n    @IsString()\n    issuer_state?: string;\n    @IsOptional()\n    @IsString()\n    response_type?: string;\n    @IsOptional()\n    @IsString()\n    client_id?: string;\n    @IsOptional()\n    @IsString()\n    redirect_uri?: string;\n    @IsOptional()\n    @IsString()\n    resource?: string;\n    @IsOptional()\n    @IsString()\n    scope?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge_method?: string;\n    @IsOptional()\n    @IsString()\n    dpop_jkt?: string;\n    @IsOptional()\n    @IsString()\n    request_uri?: string;\n    @IsOptional()\n    @IsString()\n    auth_session?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthorizeService.html":{"url":"injectables/AuthorizeService.html","title":"injectable - AuthorizeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthorizeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authorizationChallengeEndpoint\n                            \n                            \n                                authzMetadata\n                            \n                            \n                                getAuthorizationServer\n                            \n                            \n                                    Async\n                                parseChallengeRequest\n                            \n                            \n                                    Private\n                                    Async\n                                sendAuthorizationCode\n                            \n                            \n                                    Async\n                                sendAuthorizationResponse\n                            \n                            \n                                    Async\n                                setAuthCode\n                            \n                            \n                                    Async\n                                validateTokenRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, oid4vpService: Oid4vpService, sessionService: SessionService, issuanceService: IssuanceService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/authorize/authorize.service.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oid4vpService\n                                                  \n                                                        \n                                                                        Oid4vpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        issuanceService\n                                                  \n                                                        \n                                                                        IssuanceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(res: Response>, body: AuthorizeQueries, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:227\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \nauthzMetadata(session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     AuthorizationServerMetadata\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAuthorizationServer\n                        \n                    \n                \n            \n            \n                \ngetAuthorizationServer(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Oauth2AuthorizationServer\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        parseChallengeRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseChallengeRequest(body: AuthorizeQueries, tenantId: string, webhook?: WebhookConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:209\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                webhook\n                                            \n                                                            WebhookConfig\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        sendAuthorizationCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationCode(res: Response, issuer_state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:302\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendAuthorizationResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationResponse(queries: AuthorizeQueries, res: Response>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setAuthCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAuthCode(issuer_state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:309\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateTokenRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateTokenRequest(body: any, req: Request, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\nimport { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    authorizationCodeGrantIdentifier,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from '@openid4vc/oauth2';\nimport type { Request, Response } from 'express';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { Session } from '../../session/entities/session.entity';\nimport { SessionService } from '../../session/session.service';\nimport { WebhookConfig } from '../../utils/webhook/webhook.dto';\nimport { Oid4vpService } from '../../verifier/oid4vp/oid4vp.service';\nimport { AuthenticationConfigHelper } from '../issuance/dto/authentication-config.helper';\nimport { IssuanceService } from '../issuance/issuance.service';\nimport { getHeadersFromRequest } from '../oid4vci/util';\nimport { AuthorizeQueries } from './dto/authorize-request.dto';\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(session: Session): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow('PUBLIC_URL') +\n            `/${session.id}`;\n        return this.getAuthorizationServer(\n            session.tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: ['ES256'],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        'request_uri not found or not provided in the request',\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                'request_uri not found or not provided in the request',\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        session: Session,\n    ): Promise {\n        const url = `${this.configService.getOrThrow('PUBLIC_URL')}${req.url}`;\n        const tenantId = session.tenantId;\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        /*         const session = await this.sessionService.getBy({\n            authorization_code: body.code ?? body['pre-authorized_code'],\n            tenantId,\n        });\n\n        if (!session) {\n            throw new ConflictException('Authorization code not found');\n        } */\n        const authorizationServerMetadata = this.authzMetadata(session);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n        //const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow('PUBLIC_URL')}/${session.id}`,\n            signer: {\n                method: 'jwk',\n                alg: 'ES256',\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    'jwk',\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            /* cNonce,\n            cNonceExpiresIn: 100, */\n            clientId: 'wallet', // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest('pid', { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: 'insufficient_authorization',\n            auth_session,\n            presentation,\n            error_description:\n                'Presentation of credential required before issuance',\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        session: Session,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            /* const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n */\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(res, body.auth_session);\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    'Session does not have valid credentials for issuance',\n                );\n            }\n        }\n\n        /* const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        } */\n        const issuanceId = session.issuanceId!;\n        const config = await this.issuanceService.getIssuanceConfigurationById(\n            issuanceId,\n            session.tenantId,\n        );\n\n        // Use the new authentication configuration structure\n        const authConfig = config.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                'No authentication configuration found for issuance config',\n            );\n        }\n\n        if (\n            AuthenticationConfigHelper.isPresentationDuringIssuanceAuth(\n                authConfig,\n            )\n        ) {\n            // OID4VP flow - credential presentation required\n            const presentationConfig =\n                AuthenticationConfigHelper.getPresentationConfig(authConfig);\n            const webhook = presentationConfig?.presentation.webhook;\n            const response = await this.parseChallengeRequest(\n                body,\n                session.tenantId,\n                webhook,\n            );\n            res.status(400).send(response);\n        } else if (AuthenticationConfigHelper.isAuthUrlAuth(authConfig)) {\n            // OID4VCI authorized code flow - should not reach here typically in challenge endpoint\n            // But we'll handle it by sending authorization code\n            await this.sendAuthorizationCode(res, body.issuer_state!);\n        } else if (AuthenticationConfigHelper.isNoneAuth(authConfig)) {\n            // Pre-authorized code flow (method: 'none') - send authorization code directly\n            await this.sendAuthorizationCode(res, body.issuer_state!);\n        } else {\n            throw new Error(\n                `Unsupported authentication method: ${(authConfig as any).method}`,\n            );\n        }\n    }\n\n    private async sendAuthorizationCode(res: Response, issuer_state: string) {\n        const authorization_code = await this.setAuthCode(issuer_state);\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CertEntity.html":{"url":"entities/CertEntity.html","title":"entity - CertEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CertEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/entities/cert.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity to manage certificates for keys.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                crt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:44\n                        \n                    \n\n            \n                \n                    Creation date of the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        crt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:26\n                        \n                    \n\n            \n                \n                    Certificate in PEM format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:38\n                        \n                    \n\n            \n                \n                    Description of the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:14\n                        \n                    \n\n            \n                \n                    Unique identifier for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:20\n                        \n                    \n\n            \n                \n                    Tenant ID for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CertificateType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {default: 'signing', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:32\n                        \n                    \n\n            \n                \n                    Type of the certificate (access or signing).\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\n\nexport type CertificateType = 'access' | 'signing';\n\n/**\n * Entity to manage certificates for keys.\n */\n@Entity()\nexport class CertEntity {\n    /**\n     * Unique identifier for the key.\n     */\n    @Column('varchar', { primary: true })\n    id: string;\n\n    /**\n     * Tenant ID for the key.\n     */\n    @Column('varchar', { primary: true })\n    tenantId: string;\n\n    /**\n     * Certificate in PEM format.\n     */\n    @Column('varchar')\n    crt: string;\n\n    /**\n     * Type of the certificate (access or signing).\n     */\n    @Column('varchar', { default: 'signing', primary: true })\n    type: CertificateType;\n\n    /**\n     * Description of the key.\n     */\n    @Column('varchar', { nullable: true })\n    description?: string;\n\n    /**\n     * Creation date of the key.\n     */\n    @Column({ type: 'date', default: () => 'CURRENT_TIMESTAMP' })\n    createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Client.html":{"url":"interfaces/Client.html","title":"interface - Client","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Client\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            secret\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    BadRequestException,\n    Injectable,\n    OnApplicationBootstrap,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { InjectMetric } from \"@willsoto/nestjs-prometheus\";\nimport { Gauge } from \"prom-client\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { CryptoService } from \"../crypto/crypto.service\";\nimport { EncryptionService } from \"../crypto/encryption/encryption.service\";\nimport { Oid4vciService } from \"../issuer/oid4vci/oid4vci.service\";\nimport { StatusListService } from \"../issuer/status-list/status-list.service\";\nimport { RegistrarService } from \"../registrar/registrar.service\";\nimport { ClientEntry } from \"./entitites/client.entity\";\n\n// Client interface for service integration\nexport interface Client {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class ClientService implements OnApplicationBootstrap {\n    private clients: Client[] | null = null;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private statutsListService: StatusListService,\n        private registrarService: RegistrarService,\n        private oid4vciService: Oid4vciService,\n        @InjectRepository(ClientEntry)\n        private clientRepository: Repository,\n        @InjectMetric(\"tenant_client_total\")\n        private tenantClientTotal: Gauge,\n    ) {}\n\n    async onApplicationBootstrap() {\n        // Initialize the client metrics\n        const count = await this.clientRepository.countBy({ status: \"set up\" });\n        this.tenantClientTotal.set({}, count);\n    }\n\n    /**\n     * Get clients from configuration\n     * @returns\n     */\n    private getClients(): Client[] {\n        if (!this.clients) {\n            this.clients = this.loadClients();\n        }\n        return this.clients;\n    }\n\n    /**\n     * Load clients from configuration\n     */\n    private loadClients(): Client[] {\n        // Default clients for development/testing\n        return [\n            {\n                id: this.configService.getOrThrow(\"AUTH_CLIENT_ID\"),\n                secret: this.configService.getOrThrow(\n                    \"AUTH_CLIENT_SECRET\",\n                ),\n            },\n        ];\n    }\n\n    /**\n     * Validate client credentials (OAuth2 Client Credentials flow)\n     * This is the primary authentication method for service integration\n     */\n    validateClient(clientId: string, clientSecret: string): Client | null {\n        const client = this.getClients().find((c) => c.id === clientId);\n\n        if (!client || client.secret !== clientSecret) {\n            return null;\n        }\n\n        return client;\n    }\n\n    /**\n     * Find client by ID\n     */\n    findClientById(clientId: string): Client | null {\n        return this.getClients().find((c) => c.id === clientId) || null;\n    }\n\n    /**\n     * Check if the client is set up, if not, set it up.\n     * @param id\n     * @returns\n     */\n    async isSetUp(id: string) {\n        void this.clientRepository\n            .countBy({ status: \"set up\" })\n            .then((count) => {\n                this.tenantClientTotal.set({}, count);\n            });\n\n        await this.clientRepository.findOneByOrFail({ id }).then(\n            (res) => {\n                if (res.status === \"set up\") {\n                    return true;\n                }\n                throw new BadRequestException(\n                    `Client ${id} is not set up. Please retry later.`,\n                );\n            },\n            async () => {\n                // create it to signl that the client getting set up\n                await this.clientRepository.save({ id });\n                await this.setUpClient(id).catch(async (err) => {\n                    console.error(err);\n                    // if there is an error, update the client status\"\n                    await this.clientRepository.update(\n                        { id },\n                        { status: \"error\", error: err.message },\n                    );\n                    throw new BadRequestException(\n                        `Error setting up client ${id}. Please retry later.`,\n                    );\n                });\n                // if everything is fine, update the client status\n                return this.clientRepository.update(\n                    { id },\n                    { status: \"set up\" },\n                );\n            },\n        );\n    }\n\n    /**\n     * Sends an event to set up a client, allowing all other services to listen and react accordingly.\n     * @param id\n     */\n    async setUpClient(id: string) {\n        await this.cryptoService.onTenantInit(id);\n        await this.encryptionService.onTenantInit(id);\n        await this.statutsListService.onTenantInit(id);\n        await this.registrarService.onTenantInit(id);\n        await this.oid4vciService.onTenantInit(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClientCredentialsDto.html":{"url":"classes/ClientCredentialsDto.html","title":"class - ClientCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClientCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/client-credentials.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                client_id\n                            \n                            \n                                    \n                                client_secret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_secret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class ClientCredentialsDto {\n    @IsString()\n    client_id: string;\n    @IsString()\n    client_secret: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ClientEntry.html":{"url":"entities/ClientEntry.html","title":"entity - ClientEntry","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ClientEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entitites/client.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                error\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entitites/client.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entitites/client.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClientStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {default: 'init'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entitites/client.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryColumn } from 'typeorm';\n\nexport type ClientStatus = 'init' | 'set up' | 'error';\n\n@Entity()\nexport class ClientEntry {\n    @PrimaryColumn()\n    id: string;\n\n    @Column('varchar', { default: 'init' })\n    status: ClientStatus;\n\n    @Column('varchar', { nullable: true })\n    error?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClientService.html":{"url":"injectables/ClientService.html","title":"injectable - ClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clients\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findClientById\n                            \n                            \n                                    Private\n                                getClients\n                            \n                            \n                                    Async\n                                isSetUp\n                            \n                            \n                                    Private\n                                loadClients\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                    Async\n                                setUpClient\n                            \n                            \n                                validateClient\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, encryptionService: EncryptionService, statutsListService: StatusListService, registrarService: RegistrarService, oid4vciService: Oid4vciService, clientRepository: Repository, tenantClientTotal: Gauge)\n                    \n                \n                        \n                            \n                                Defined in src/auth/client.service.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        encryptionService\n                                                  \n                                                        \n                                                                        EncryptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statutsListService\n                                                  \n                                                        \n                                                                        StatusListService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registrarService\n                                                  \n                                                        \n                                                                        RegistrarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oid4vciService\n                                                  \n                                                        \n                                                                        Oid4vciService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        clientRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tenantClientTotal\n                                                  \n                                                        \n                                                                    Gauge\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findClientById\n                        \n                    \n                \n            \n            \n                \nfindClientById(clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:90\n                        \n                    \n\n\n            \n                \n                        Find client by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Client | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getClients\n                        \n                    \n                \n            \n            \n                \n                        \n                    getClients()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Get clients from configuration\n\n\n                        \n                            Returns :         Client[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isSetUp\n                        \n                    \n                \n            \n            \n                \n                        \n                    isSetUp(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:99\n                        \n                    \n\n\n            \n                \n                        Check if the client is set up, if not, set it up.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadClients\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadClients()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Load clients from configuration\n\n\n                        \n                            Returns :         Client[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setUpClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    setUpClient(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:142\n                        \n                    \n\n\n            \n                \n                        Sends an event to set up a client, allowing all other services to listen and react accordingly.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateClient\n                        \n                    \n                \n            \n            \n                \nvalidateClient(clientId: string, clientSecret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:77\n                        \n                    \n\n\n            \n                \n                        Validate client credentials (OAuth2 Client Credentials flow)\nThis is the primary authentication method for service integration\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSecret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Client | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        clients\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Client[] | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/auth/client.service.ts:26\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    BadRequestException,\n    Injectable,\n    OnApplicationBootstrap,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { InjectMetric } from \"@willsoto/nestjs-prometheus\";\nimport { Gauge } from \"prom-client\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { CryptoService } from \"../crypto/crypto.service\";\nimport { EncryptionService } from \"../crypto/encryption/encryption.service\";\nimport { Oid4vciService } from \"../issuer/oid4vci/oid4vci.service\";\nimport { StatusListService } from \"../issuer/status-list/status-list.service\";\nimport { RegistrarService } from \"../registrar/registrar.service\";\nimport { ClientEntry } from \"./entitites/client.entity\";\n\n// Client interface for service integration\nexport interface Client {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class ClientService implements OnApplicationBootstrap {\n    private clients: Client[] | null = null;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private statutsListService: StatusListService,\n        private registrarService: RegistrarService,\n        private oid4vciService: Oid4vciService,\n        @InjectRepository(ClientEntry)\n        private clientRepository: Repository,\n        @InjectMetric(\"tenant_client_total\")\n        private tenantClientTotal: Gauge,\n    ) {}\n\n    async onApplicationBootstrap() {\n        // Initialize the client metrics\n        const count = await this.clientRepository.countBy({ status: \"set up\" });\n        this.tenantClientTotal.set({}, count);\n    }\n\n    /**\n     * Get clients from configuration\n     * @returns\n     */\n    private getClients(): Client[] {\n        if (!this.clients) {\n            this.clients = this.loadClients();\n        }\n        return this.clients;\n    }\n\n    /**\n     * Load clients from configuration\n     */\n    private loadClients(): Client[] {\n        // Default clients for development/testing\n        return [\n            {\n                id: this.configService.getOrThrow(\"AUTH_CLIENT_ID\"),\n                secret: this.configService.getOrThrow(\n                    \"AUTH_CLIENT_SECRET\",\n                ),\n            },\n        ];\n    }\n\n    /**\n     * Validate client credentials (OAuth2 Client Credentials flow)\n     * This is the primary authentication method for service integration\n     */\n    validateClient(clientId: string, clientSecret: string): Client | null {\n        const client = this.getClients().find((c) => c.id === clientId);\n\n        if (!client || client.secret !== clientSecret) {\n            return null;\n        }\n\n        return client;\n    }\n\n    /**\n     * Find client by ID\n     */\n    findClientById(clientId: string): Client | null {\n        return this.getClients().find((c) => c.id === clientId) || null;\n    }\n\n    /**\n     * Check if the client is set up, if not, set it up.\n     * @param id\n     * @returns\n     */\n    async isSetUp(id: string) {\n        void this.clientRepository\n            .countBy({ status: \"set up\" })\n            .then((count) => {\n                this.tenantClientTotal.set({}, count);\n            });\n\n        await this.clientRepository.findOneByOrFail({ id }).then(\n            (res) => {\n                if (res.status === \"set up\") {\n                    return true;\n                }\n                throw new BadRequestException(\n                    `Client ${id} is not set up. Please retry later.`,\n                );\n            },\n            async () => {\n                // create it to signl that the client getting set up\n                await this.clientRepository.save({ id });\n                await this.setUpClient(id).catch(async (err) => {\n                    console.error(err);\n                    // if there is an error, update the client status\"\n                    await this.clientRepository.update(\n                        { id },\n                        { status: \"error\", error: err.message },\n                    );\n                    throw new BadRequestException(\n                        `Error setting up client ${id}. Please retry later.`,\n                    );\n                });\n                // if everything is fine, update the client status\n                return this.clientRepository.update(\n                    { id },\n                    { status: \"set up\" },\n                );\n            },\n        );\n    }\n\n    /**\n     * Sends an event to set up a client, allowing all other services to listen and react accordingly.\n     * @param id\n     */\n    async setUpClient(id: string) {\n        await this.cryptoService.onTenantInit(id);\n        await this.encryptionService.onTenantInit(id);\n        await this.statutsListService.onTenantInit(id);\n        await this.registrarService.onTenantInit(id);\n        await this.oid4vciService.onTenantInit(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCredentialIssuanceBindingDto.html":{"url":"classes/CreateCredentialIssuanceBindingDto.html","title":"class - CreateCredentialIssuanceBindingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCredentialIssuanceBindingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/credential-issuance-binding.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating a new credential-issuance binding.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                credentialConfigId\n                            \n                            \n                                    \n                                    \n                                issuanceConfigId\n                            \n                            \n                                    \n                                    \n                                keyID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credentialConfigId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the credential configuration', example: 'university-degree'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/credential-issuance-binding.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        issuanceConfigId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the issuance configuration', example: '123e4567-e89b-12d3-a456-426614174000'})@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/credential-issuance-binding.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        keyID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The key ID to use for signing this credential in this issuance config', example: 'signing-key-2024-01'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/credential-issuance-binding.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, IsUUID } from 'class-validator';\n\n/**\n * DTO for creating a new credential-issuance binding.\n */\nexport class CreateCredentialIssuanceBindingDto {\n    @ApiProperty({\n        description: 'The ID of the credential configuration',\n        example: 'university-degree',\n    })\n    @IsString()\n    credentialConfigId: string;\n\n    @ApiProperty({\n        description: 'The ID of the issuance configuration',\n        example: '123e4567-e89b-12d3-a456-426614174000',\n    })\n    @IsUUID()\n    issuanceConfigId: string;\n\n    @ApiProperty({\n        description:\n            'The key ID to use for signing this credential in this issuance config',\n        example: 'signing-key-2024-01',\n    })\n    @IsString()\n    keyID: string;\n}\n\n/**\n * DTO for updating the key ID of an existing binding.\n */\nexport class UpdateCredentialIssuanceBindingDto {\n    @ApiProperty({\n        description: 'The new key ID to use for signing this credential',\n        example: 'signing-key-2024-02',\n    })\n    @IsString()\n    keyID: string;\n}\n\n/**\n * DTO for the response of a credential-issuance binding.\n */\nexport class CredentialIssuanceBindingResponseDto {\n    @ApiProperty({\n        description: 'The unique identifier of the binding',\n        example: '123e4567-e89b-12d3-a456-426614174000',\n    })\n    id: string;\n\n    @ApiProperty({\n        description: 'The ID of the credential configuration',\n        example: 'university-degree',\n    })\n    credentialConfigId: string;\n\n    @ApiProperty({\n        description: 'The ID of the issuance configuration',\n        example: '123e4567-e89b-12d3-a456-426614174000',\n    })\n    issuanceConfigId: string;\n\n    @ApiProperty({\n        description: 'The key ID used for signing this credential',\n        example: 'signing-key-2024-01',\n    })\n    keyID: string;\n\n    @ApiProperty({\n        description: 'The timestamp when the binding was created',\n        example: '2024-08-03T10:30:00Z',\n    })\n    createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CredentialConfig.html":{"url":"entities/CredentialConfig.html","title":"entity - CredentialConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CredentialConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity to manage a credential configuration\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                claims\n                            \n                            \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                    \n                                credentialIssuanceBindings\n                            \n                            \n                                    \n                                    \n                                disclosureFrame\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                keyBinding\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                keyId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lifeTime\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                statusManagement\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:46\n                        \n                    \n\n            \n                \n                    Claims that should be set by default when this credential is being issued. Will be overwritten when passed during a credential offer request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialConfigurationSupported\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:40\n                        \n                    \n\n            \n                \n                    OID4VCI issuer metadata credential configuration element.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credentialIssuanceBindings\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialIssuanceBinding[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmpty()@OneToMany(undefined, binding => binding.credentialConfig)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:112\n                        \n                    \n\n            \n                \n                    Link to all the issuance config bindings that are using this credential.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        disclosureFrame\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:52\n                        \n                    \n\n            \n                \n                    Disclosure frame for the sd jwt vc.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:26\n                        \n                    \n\n            \n                \n                    Unique identifier for the configuration to reference it.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CertEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmpty()@ManyToOne(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        keyBinding\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsBoolean()@IsOptional()@Column('boolean', {default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        keyId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:76\n                        \n                    \n\n            \n                \n                    Optional key ID for the credential configuration.\nThis is used to identify the key used for signing the credential.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lifeTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@Column('int', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:96\n                        \n                    \n\n            \n                \n                    Optional livetime for the credential configuration in seconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SchemaResponse\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:103\n                        \n                    \n\n            \n                \n                    json schema that is used during issuance for the validation of the claims.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        statusManagement\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()@Column('boolean', {default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:89\n                        \n                    \n\n            \n                \n                    Optional status management flag for the credential configuration.\nIf true, a status management will be applied to the credential.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmpty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:32\n                        \n                    \n\n            \n                \n                    Tenant ID for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         VCT\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:59\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { CredentialConfigurationSupported } from '@openid4vc/openid4vci';\nimport {\n    IsBoolean,\n    IsEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n} from 'class-validator';\nimport { Column, Entity, ManyToOne, OneToMany } from 'typeorm';\nimport { CertEntity } from '../../../crypto/key/entities/cert.entity';\nimport { VCT } from '../../credentials-metadata/dto/credential-config.dto';\nimport { SchemaResponse } from '../../credentials-metadata/dto/schema-response.dto';\nimport { CredentialIssuanceBinding } from '../../issuance/entities/credential-issuance-binding.entity';\n\n/**\n * Entity to manage a credential configuration\n */\n@Entity()\nexport class CredentialConfig {\n    /**\n     * Unique identifier for the configuration to reference it.\n     */\n    @IsString()\n    @Column('varchar', { primary: true })\n    id: string;\n    /**\n     * Tenant ID for the issuance configuration.\n     */\n    @IsEmpty()\n    @Column('varchar', { primary: true })\n    tenantId: string;\n\n    //TODO: only allow display config for now\n    /**\n     * OID4VCI issuer metadata credential configuration element.\n     */\n    @Column('json')\n    @IsObject()\n    config: CredentialConfigurationSupported;\n    /**\n     * Claims that should be set by default when this credential is being issued. Will be overwritten when passed during a credential offer request.\n     */\n    @Column('json', { nullable: true })\n    @IsObject()\n    claims: Record;\n    /**\n     * Disclosure frame for the sd jwt vc.\n     */\n    @Column('json', { nullable: true })\n    @IsObject()\n    disclosureFrame: Record;\n    @Column('json', { nullable: true })\n    /**\n     * VCT values that are hosted by this service.\n     */\n    @IsObject()\n    @IsOptional()\n    vct?: VCT;\n    @Column('json', { nullable: true })\n\n    /**\n     * If true, the credential will be key bound.\n     */\n    @IsBoolean()\n    @IsOptional()\n    @Column('boolean', { default: false })\n    keyBinding?: boolean;\n\n    /**\n     * Optional key ID for the credential configuration.\n     * This is used to identify the key used for signing the credential.\n     */\n    @IsString()\n    @IsOptional()\n    keyId?: string;\n\n    @IsEmpty()\n    @ManyToOne(() => CertEntity)\n    key: CertEntity;\n\n    /**\n     * Optional status management flag for the credential configuration.\n     * If true, a status management will be applied to the credential.\n     */\n    @IsBoolean()\n    @IsOptional()\n    @Column('boolean', { default: false })\n    statusManagement?: boolean;\n    /**\n     * Optional livetime for the credential configuration in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column('int', { nullable: true })\n    lifeTime?: number;\n\n    /**\n     * json schema that is used during issuance for the validation of the claims.\n     */\n    @IsObject()\n    @IsOptional()\n    schema?: SchemaResponse;\n    /**\n     * Link to all the issuance config bindings that are using this credential.\n     */\n    @IsEmpty()\n    @OneToMany(\n        () => CredentialIssuanceBinding,\n        (binding) => binding.credentialConfig,\n    )\n    credentialIssuanceBindings: CredentialIssuanceBinding[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialConfigMapping.html":{"url":"classes/CredentialConfigMapping.html","title":"class - CredentialConfigMapping","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialConfigMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/issuance.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for mapping credential configurations in issuance.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:21\n                        \n                    \n\n            \n                \n                    Unique identifier for the credential configuration.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n    IsArray,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\nimport { AuthenticationConfigDto } from './authentication-config.dto';\n\n/**\n * DTO for mapping credential configurations in issuance.\n */\nexport class CredentialConfigMapping {\n    /**\n     * Unique identifier for the credential configuration.\n     */\n    @IsString()\n    id: string;\n}\n\n/**\n * DTO for Issuance Configuration.\n */\nexport class IssuanceDto {\n    /**\n     * Unique identifier for the issuance configuration.\n     */\n    @IsString()\n    id: string;\n\n    /**\n     * Ids of the credential configurations associated with this issuance configuration.\n     */\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialConfigMapping)\n    credentialConfigs: CredentialConfigMapping[];\n\n    /**\n     * Authentication configuration for the issuance process.\n     * This includes details like the authentication method and any required parameters.\n     */\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationConfigDto)\n    authenticationConfig: AuthenticationConfigDto;\n\n    /**\n     * Optional webhook configuration to send the results of the notification response.\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    notifyWebhook?: WebhookConfig;\n\n    /**\n     * Value to determine the amount of credentials that are issued in a batch.\n     * Default is 1.\n     */\n    @IsNumber()\n    @IsOptional()\n    batch_size?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CredentialConfigService.html":{"url":"injectables/CredentialConfigService.html","title":"injectable - CredentialConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CredentialConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credential-config/credential-config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing credential configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                getById\n                            \n                            \n                                    Public\n                                    Async\n                                import\n                            \n                            \n                                store\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(credentialConfigRepository: Repository, configService: ConfigService, logger: PinoLogger, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/credentials/credential-config/credential-config.service.ts:17\n                            \n                        \n\n                \n                    \n                            Constructor for CredentialConfigService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        credentialConfigRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for CredentialConfig entity.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:172\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the CredentialConfig entity to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the result of the delete operation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:132\n                        \n                    \n\n\n            \n                \n                        Retrieves all credential configurations for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to an array of CredentialConfig entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getById\n                        \n                    \n                \n            \n            \n                \ngetById(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:145\n                        \n                    \n\n\n            \n                \n                        Retrieves a credential configuration by its ID for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Imports the configs\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n            \n                \nstore(tenantId: string, config: CredentialConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:159\n                        \n                    \n\n\n            \n                \n                        Stores a credential configuration for a given tenant.\nIf the configuration already exists, it will be overwritten.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                        \n                                                config\n                                            \n                                                            CredentialConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe CredentialConfig entity to store.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the stored CredentialConfig entity.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { plainToClass } from 'class-transformer';\nimport { validate } from 'class-validator';\nimport { readdirSync, readFileSync } from 'fs';\nimport { PinoLogger } from 'nestjs-pino';\nimport { join } from 'path';\nimport { Repository } from 'typeorm';\nimport { CryptoService } from '../../../crypto/crypto.service';\nimport { CredentialConfig } from '../entities/credential.entity';\n\n/**\n * Service for managing credential configurations.\n */\n@Injectable()\nexport class CredentialConfigService {\n    /**\n     * Constructor for CredentialConfigService.\n     * @param credentialConfigRepository - Repository for CredentialConfig entity.\n     */\n    constructor(\n        @InjectRepository(CredentialConfig)\n        private readonly credentialConfigRepository: Repository,\n        private configService: ConfigService,\n        private logger: PinoLogger,\n        private cryptoService: CryptoService,\n    ) {}\n\n    /**\n     * Imports the configs\n     */\n    public async import() {\n        const configPath = this.configService.getOrThrow('CONFIG_FOLDER');\n        const subfolder = 'issuance/credentials';\n        const force = this.configService.get('CONFIG_IMPORT_FORCE');\n        if (this.configService.get('CONFIG_IMPORT')) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            for (const tenant of tenantFolders) {\n                let counter = 0;\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const files = readdirSync(path);\n                for (const file of files) {\n                    const payload = JSON.parse(\n                        readFileSync(join(path, file), 'utf8'),\n                    );\n\n                    const id = file.replace('.json', '');\n                    payload.id = id;\n                    const exists = await this.getById(tenant.name, id).catch(\n                        () => false,\n                    );\n                    if (exists && !force) {\n                        continue; // Skip if config already exists and force is not set\n                    }\n\n                    // Validate the payload against CredentialConfig\n                    const config = plainToClass(CredentialConfig, payload);\n                    const validationErrors = await validate(config, {\n                        whitelist: true,\n                        forbidNonWhitelisted: true,\n                    });\n\n                    // Check if keyId is provided and if the certificate exists\n                    if (config.keyId) {\n                        const cert = await this.cryptoService.getCertEntry(\n                            tenant.name,\n                            config.keyId,\n                        );\n                        if (!cert) {\n                            this.logger.error(\n                                {\n                                    event: 'ValidationError',\n                                    file,\n                                    tenant: tenant.name,\n                                    errors: [\n                                        {\n                                            property: 'keyId',\n                                            constraints: {\n                                                isDefined:\n                                                    'Key ID must be defined in the crypto service.',\n                                            },\n                                            value: config.keyId,\n                                        },\n                                    ],\n                                },\n                                `Validation failed for credentials config ${file} in tenant ${tenant.name}`,\n                            );\n                            continue; // Skip this invalid config\n                        }\n                        config.key = cert;\n                    }\n\n                    if (validationErrors.length > 0) {\n                        this.logger.error(\n                            {\n                                event: 'ValidationError',\n                                file,\n                                tenant: tenant.name,\n                                errors: validationErrors.map((error) => ({\n                                    property: error.property,\n                                    constraints: error.constraints,\n                                    value: error.value,\n                                })),\n                            },\n                            `Validation failed for credentials config ${file} in tenant ${tenant.name}`,\n                        );\n                        continue; // Skip this invalid config\n                    }\n\n                    await this.store(tenant.name, config);\n                    counter++;\n                }\n                this.logger.info(\n                    {\n                        event: 'Import',\n                    },\n                    `${counter} credential configs imported for ${tenant.name}`,\n                );\n            }\n        }\n    }\n\n    /**\n     * Retrieves all credential configurations for a given tenant.\n     * @param tenantId - The ID of the tenant.\n     * @returns A promise that resolves to an array of CredentialConfig entities.\n     */\n    get(tenantId: string) {\n        return this.credentialConfigRepository.find({\n            where: { tenantId },\n            relations: ['key'],\n        });\n    }\n\n    /**\n     * Retrieves a credential configuration by its ID for a given tenant.\n     * @param tenantId\n     * @param id\n     * @returns\n     */\n    getById(tenantId: string, id: string) {\n        return this.credentialConfigRepository.findOneByOrFail({\n            id,\n            tenantId,\n        });\n    }\n\n    /**\n     * Stores a credential configuration for a given tenant.\n     * If the configuration already exists, it will be overwritten.\n     * @param tenantId - The ID of the tenant.\n     * @param config - The CredentialConfig entity to store.\n     * @returns A promise that resolves to the stored CredentialConfig entity.\n     */\n    store(tenantId: string, config: CredentialConfig) {\n        return this.credentialConfigRepository.save({\n            ...config,\n            tenantId,\n        });\n    }\n\n    /**\n     * Deletes a credential configuration for a given tenant.\n     * @param tenantId - The ID of the tenant.\n     * @param id - The ID of the CredentialConfig entity to delete.\n     * @returns A promise that resolves to the result of the delete operation.\n     */\n    delete(tenantId: string, id: string) {\n        return this.credentialConfigRepository.delete({\n            id,\n            tenantId,\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CredentialIssuanceBinding.html":{"url":"entities/CredentialIssuanceBinding.html","title":"entity - CredentialIssuanceBinding","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CredentialIssuanceBinding\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/entities/credential-issuance-binding.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Junction entity for the many-to-many relationship between CredentialConfig and IssuanceConfig\nwith additional keyID attribute for specifying which key should be used for signing.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                createdAt\n                            \n                            \n                                    \n                                credentialConfig\n                            \n                            \n                                    \n                                credentialConfigId\n                            \n                            \n                                    \n                                issuanceConfig\n                            \n                            \n                                    \n                                issuanceConfigId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/credential-issuance-binding.entity.ts:40\n                        \n                    \n\n            \n                \n                    The timestamp when the binding was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, credentialConfig => credentialConfig.credentialIssuanceBindings)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/credential-issuance-binding.entity.ts:25\n                        \n                    \n\n            \n                \n                    Reference to the credential configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/credential-issuance-binding.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        issuanceConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IssuanceConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, issuanceConfig => issuanceConfig.credentialIssuanceBindings)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/credential-issuance-binding.entity.ts:34\n                        \n                    \n\n            \n                \n                    Reference to the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        issuanceConfigId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/credential-issuance-binding.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryColumn } from 'typeorm';\nimport { CredentialConfig } from '../../credentials/entities/credential.entity';\nimport { IssuanceConfig } from './issuance-config.entity';\n\n//TODO: check if we really need this table and not just go with a many-to-many relationship\n/**\n * Junction entity for the many-to-many relationship between CredentialConfig and IssuanceConfig\n * with additional keyID attribute for specifying which key should be used for signing.\n */\n@Entity()\nexport class CredentialIssuanceBinding {\n    @PrimaryColumn()\n    credentialConfigId: string;\n\n    @PrimaryColumn()\n    issuanceConfigId: string;\n\n    /**\n     * Reference to the credential configuration.\n     */\n    @ManyToOne(\n        () => CredentialConfig,\n        (credentialConfig) => credentialConfig.credentialIssuanceBindings,\n    )\n    credentialConfig: CredentialConfig;\n\n    /**\n     * Reference to the issuance configuration.\n     */\n    @ManyToOne(\n        () => IssuanceConfig,\n        (issuanceConfig) => issuanceConfig.credentialIssuanceBindings,\n    )\n    issuanceConfig: IssuanceConfig;\n\n    /**\n     * The timestamp when the binding was created.\n     */\n    @Column({ type: 'date', default: () => 'CURRENT_TIMESTAMP' })\n    createdAt?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialIssuanceBindingResponseDto.html":{"url":"classes/CredentialIssuanceBindingResponseDto.html","title":"class - CredentialIssuanceBindingResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialIssuanceBindingResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/credential-issuance-binding.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the response of a credential-issuance binding.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                credentialConfigId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                issuanceConfigId\n                            \n                            \n                                    \n                                keyID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The timestamp when the binding was created', example: '2024-08-03T10:30:00Z'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/credential-issuance-binding.dto.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the credential configuration', example: 'university-degree'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/credential-issuance-binding.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The unique identifier of the binding', example: '123e4567-e89b-12d3-a456-426614174000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/credential-issuance-binding.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        issuanceConfigId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the issuance configuration', example: '123e4567-e89b-12d3-a456-426614174000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/credential-issuance-binding.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        keyID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The key ID used for signing this credential', example: 'signing-key-2024-01'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/credential-issuance-binding.dto.ts:69\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, IsUUID } from 'class-validator';\n\n/**\n * DTO for creating a new credential-issuance binding.\n */\nexport class CreateCredentialIssuanceBindingDto {\n    @ApiProperty({\n        description: 'The ID of the credential configuration',\n        example: 'university-degree',\n    })\n    @IsString()\n    credentialConfigId: string;\n\n    @ApiProperty({\n        description: 'The ID of the issuance configuration',\n        example: '123e4567-e89b-12d3-a456-426614174000',\n    })\n    @IsUUID()\n    issuanceConfigId: string;\n\n    @ApiProperty({\n        description:\n            'The key ID to use for signing this credential in this issuance config',\n        example: 'signing-key-2024-01',\n    })\n    @IsString()\n    keyID: string;\n}\n\n/**\n * DTO for updating the key ID of an existing binding.\n */\nexport class UpdateCredentialIssuanceBindingDto {\n    @ApiProperty({\n        description: 'The new key ID to use for signing this credential',\n        example: 'signing-key-2024-02',\n    })\n    @IsString()\n    keyID: string;\n}\n\n/**\n * DTO for the response of a credential-issuance binding.\n */\nexport class CredentialIssuanceBindingResponseDto {\n    @ApiProperty({\n        description: 'The unique identifier of the binding',\n        example: '123e4567-e89b-12d3-a456-426614174000',\n    })\n    id: string;\n\n    @ApiProperty({\n        description: 'The ID of the credential configuration',\n        example: 'university-degree',\n    })\n    credentialConfigId: string;\n\n    @ApiProperty({\n        description: 'The ID of the issuance configuration',\n        example: '123e4567-e89b-12d3-a456-426614174000',\n    })\n    issuanceConfigId: string;\n\n    @ApiProperty({\n        description: 'The key ID used for signing this credential',\n        example: 'signing-key-2024-01',\n    })\n    keyID: string;\n\n    @ApiProperty({\n        description: 'The timestamp when the binding was created',\n        example: '2024-08-03T10:30:00Z',\n    })\n    createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialIssuerMetadataDto.html":{"url":"classes/CredentialIssuerMetadataDto.html","title":"class - CredentialIssuerMetadataDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialIssuerMetadataDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/credential-issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the metadata for a credential issuer.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_server\n                            \n                            \n                                authorization_servers\n                            \n                            \n                                batch_credential_issuance\n                            \n                            \n                                credential_configurations_supported\n                            \n                            \n                                credential_endpoint\n                            \n                            \n                                credential_issuer\n                            \n                            \n                                display\n                            \n                            \n                                notification_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_server\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:41\n                        \n                    \n\n            \n                \n                    The URL of the preferred authorization server.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_servers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:12\n                        \n                    \n\n            \n                \n                    List of authorization servers that support the credential issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        batch_credential_issuance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:24\n                        \n                    \n\n            \n                \n                    Information about batch credential issuance.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_configurations_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:37\n                        \n                    \n\n            \n                \n                    Object of credentials configurations supported by the issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:16\n                        \n                    \n\n            \n                \n                    The URL of the credential issuance endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:8\n                        \n                    \n\n            \n                \n                    The issuer identifier, typically a URL.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        display\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:33\n                        \n                    \n\n            \n                \n                    Display information for the credentials that are getting issued.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notification_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:20\n                        \n                    \n\n            \n                \n                    The URL of the notification endpoint for credential issuance.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CredentialIssuerMetadataDto {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    credential_issuer: string;\n    /**\n     * List of authorization servers that support the credential issuer.\n     */\n    authorization_servers: string[];\n    /**\n     * The URL of the credential issuance endpoint.\n     */\n    credential_endpoint: string;\n    /**\n     * The URL of the notification endpoint for credential issuance.\n     */\n    notification_endpoint: string;\n    /**\n     * Information about batch credential issuance.\n     */\n    batch_credential_issuance: {\n        /**\n         * Amount of elements in a batch.\n         */\n        batch_size: number;\n    };\n    /**\n     * Display information for the credentials that are getting issued.\n     */\n    display: Array;\n    /**\n     * Object of credentials configurations supported by the issuer.\n     */\n    credential_configurations_supported: any;\n    /**\n     * The URL of the preferred authorization server.\n     */\n    authorization_server: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CredentialsController.html":{"url":"controllers/CredentialsController.html","title":"controller - CredentialsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CredentialsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management/credentials\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing credential configurations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    \n                                getConfigs\n                            \n                            \n                                    \n                                storeCredentialConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteIssuanceConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:58\n                        \n                    \n\n\n            \n                \n                        Deletes an credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getConfigs\n                        \n                    \n                \n            \n            \n                \n                        \n                    getConfigs(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:35\n                        \n                    \n\n\n            \n                \n                        Returns the credential configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storeCredentialConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeCredentialConfiguration(config: CredentialConfig, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:45\n                        \n                    \n\n\n            \n                \n                        Stores the credential configuration for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            CredentialConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    UseGuards,\n} from '@nestjs/common';\nimport { ApiSecurity, ApiTags } from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../../auth/auth.guard';\nimport { Token, TokenPayload } from '../../auth/token.decorator';\nimport { CredentialConfigService } from './credential-config/credential-config.service';\nimport { CredentialConfig } from './entities/credential.entity';\n\n/**\n * Controller for managing credential configurations.\n */\n@ApiTags('Issuer management')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2')\n@Controller('issuer-management/credentials')\nexport class CredentialsController {\n    /**\n     * Initializes the CredentialsController with the CredentialConfigService.\n     * @param credentialsService\n     */\n    constructor(private readonly credentialsService: CredentialConfigService) {}\n\n    /**\n     * Returns the credential configurations for this tenant.\n     * @returns\n     */\n    @Get()\n    getConfigs(@Token() user: TokenPayload) {\n        return this.credentialsService.get(user.sub);\n    }\n\n    /**\n     * Stores the credential configuration for this tenant.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storeCredentialConfiguration(\n        @Body() config: CredentialConfig,\n        @Token() user: TokenPayload,\n    ) {\n        return this.credentialsService.store(user.sub, config);\n    }\n\n    /**\n     * Deletes an credential configuration.\n     * @param id\n     * @returns\n     */\n    @Delete(':id')\n    deleteIssuanceConfiguration(\n        @Param('id') id: string,\n        @Token() user: TokenPayload,\n    ) {\n        return this.credentialsService.delete(user.sub, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CredentialsMetadataController.html":{"url":"controllers/CredentialsMetadataController.html","title":"controller - CredentialsMetadataController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CredentialsMetadataController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/credentials-metadata.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/credentials-metadata\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n            \n                \n                        \n                    schema(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('schema/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials-metadata/credentials-metadata.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        vct\n                        \n                    \n                \n            \n            \n                \n                        \n                    vct(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('vct/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials-metadata/credentials-metadata.controller.ts:15\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe identifier of the credential configuration.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from '@nestjs/common';\nimport { ApiExcludeController } from '@nestjs/swagger';\nimport { CredentialsService } from '../credentials/credentials.service';\n\n@ApiExcludeController(process.env.SWAGGER_ALL !== 'true')\n@Controller(':tenantId/credentials-metadata')\nexport class CredentialsMetadataController {\n    constructor(private readonly credentialsService: CredentialsService) {}\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n     * @param id - The identifier of the credential configuration.\n     */\n    @Get('vct/:id')\n    vct(@Param('id') id: string, @Param('tenantId') tenantId: string) {\n        return this.credentialsService.getVCT(id, tenantId);\n    }\n\n    /**\n     * Retrieves the schema for a specific credential\n     * @param id\n     * @returns\n     */\n    @Get('schema/:id')\n    schema(@Param('id') id: string, @Param('tenantId') tenantId: string) {\n        return this.credentialsService.getSchema(id, tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CredentialsService.html":{"url":"injectables/CredentialsService.html","title":"injectable - CredentialsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CredentialsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing credentials and their configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getCredential\n                            \n                            \n                                    Async\n                                getCredentialConfigurationSupported\n                            \n                            \n                                    Async\n                                getSchema\n                            \n                            \n                                    Async\n                                getVCT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cryptoService: CryptoService, configService: ConfigService, statusListService: StatusListService, credentialConfigRepo: Repository, issuanceConfigService: IssuanceService, cryptoImplementationService: CryptoImplementationService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/credentials/credentials.service.ts:24\n                            \n                        \n\n                \n                    \n                            Constructor for CredentialsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusListService\n                                                  \n                                                        \n                                                                        StatusListService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialConfigRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        issuanceConfigService\n                                                  \n                                                        \n                                                                        IssuanceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoImplementationService\n                                                  \n                                                        \n                                                                        CryptoImplementationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredential\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredential(credentialConfigurationId: string, holderCnf: Jwk, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:100\n                        \n                    \n\n\n            \n                \n                        Issues a credential based on the provided configuration and session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                holderCnf\n                                            \n                                                        Jwk\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredentialConfigurationSupported\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredentialConfigurationSupported(session: Session, issuanceConfig: IssuanceConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Returns the credential configuration that is required for oid4vci\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuanceConfig\n                                            \n                                                            IssuanceConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSchema\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSchema(credentialConfigurationId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:236\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getVCT\n                        \n                    \n                \n            \n            \n                \n                        \n                    getVCT(credentialId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:210\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport type { Jwk } from '@openid4vc/oauth2';\nimport { CredentialConfigurationSupported } from '@openid4vc/openid4vci';\nimport { digest, generateSalt } from '@sd-jwt/crypto-nodejs';\nimport { JWTwithStatusListPayload } from '@sd-jwt/jwt-status-list';\nimport { SDJwtVcInstance } from '@sd-jwt/sd-jwt-vc';\nimport { Repository } from 'typeorm';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { CryptoImplementationService } from '../../crypto/key/crypto-implementation/crypto-implementation.service';\nimport { Session } from '../../session/entities/session.entity';\nimport { VCT } from '../credentials-metadata/dto/credential-config.dto';\nimport { SchemaResponse } from '../credentials-metadata/dto/schema-response.dto';\nimport { IssuanceConfig } from '../issuance/entities/issuance-config.entity';\nimport { IssuanceService } from '../issuance/issuance.service';\nimport { StatusListService } from '../status-list/status-list.service';\nimport { CredentialConfig } from './entities/credential.entity';\n\n/**\n * Service for managing credentials and their configurations.\n */\n@Injectable()\nexport class CredentialsService {\n    /**\n     * Constructor for CredentialsService.\n     * @param cryptoService\n     * @param configService\n     * @param statusListService\n     * @param credentialConfigRepo\n     * @param issuanceConfigService\n     * @param cryptoImplementationService\n     */\n    constructor(\n        private cryptoService: CryptoService,\n        private configService: ConfigService,\n        private statusListService: StatusListService,\n        @InjectRepository(CredentialConfig)\n        private credentialConfigRepo: Repository,\n        private issuanceConfigService: IssuanceService,\n        private cryptoImplementationService: CryptoImplementationService,\n    ) {}\n\n    /**\n     * Returns the credential configuration that is required for oid4vci\n     * @param tenantId\n     * @returns\n     */\n    async getCredentialConfigurationSupported(\n        session: Session,\n        issuanceConfig: IssuanceConfig,\n    ): Promise> {\n        const credential_configurations_supported: Record = {};\n\n        const configs = await this.credentialConfigRepo.findBy({\n            tenantId: session.tenantId,\n        });\n\n        //add key binding when required:\n        const kb = {\n            proof_types_supported: {\n                jwt: {\n                    proof_signing_alg_values_supported: [\n                        this.cryptoImplementationService.getAlg(),\n                    ],\n                },\n            },\n            credential_signing_alg_values_supported: [\n                this.cryptoImplementationService.getAlg(),\n            ],\n            cryptographic_binding_methods_supported: ['jwk'],\n        };\n\n        for (const value of configs) {\n            const isUsed = issuanceConfig.credentialIssuanceBindings.find(\n                (binding) => binding.credentialConfigId === value.id,\n            );\n            value.config.vct = `${this.configService.getOrThrow('PUBLIC_URL')}/${session.tenantId}/credentials/vct/${value.id}`;\n\n            if (isUsed?.credentialConfig)\n                value.config = {\n                    ...value.config,\n                    ...kb,\n                };\n            credential_configurations_supported[value.id] = value.config;\n        }\n        return credential_configurations_supported;\n    }\n\n    /**\n     * Issues a credential based on the provided configuration and session.\n     * @param credentialConfigurationId\n     * @param holderCnf\n     * @param session\n     * @returns\n     */\n    async getCredential(\n        credentialConfigurationId: string,\n        holderCnf: Jwk,\n        session: Session,\n    ) {\n        const credentialConfiguration = await this.credentialConfigRepo\n            .findOneByOrFail({\n                id: credentialConfigurationId,\n                tenantId: session.tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException(\n                    `Credential configuration with id ${credentialConfigurationId} not found`,\n                );\n            });\n\n        const claims =\n            session.credentialPayload?.claims?.[credentialConfigurationId] ??\n            credentialConfiguration.claims;\n        const disclosureFrame = credentialConfiguration.disclosureFrame;\n\n        const issuanceConfig =\n            await this.issuanceConfigService.getIssuanceConfigurationById(\n                session.issuanceId!,\n                session.tenantId,\n            );\n        const binding = issuanceConfig.credentialIssuanceBindings.find(\n            (binding) =>\n                binding.credentialConfigId === credentialConfigurationId,\n        );\n\n        const keyId =\n            binding?.credentialConfig?.keyId ??\n            (await this.cryptoService.keyService.getKid(\n                session.tenantId,\n                'signing',\n            ));\n\n        const sdjwt = new SDJwtVcInstance({\n            signer: await this.cryptoService.keyService.signer(\n                session.tenantId,\n                keyId,\n            ),\n            signAlg: this.cryptoImplementationService.getAlg(),\n            hasher: digest,\n            hashAlg: 'sha-256',\n            saltGenerator: generateSalt,\n            loadTypeMetadataFormat: true,\n        });\n\n        const credentialConfig =\n            await this.credentialConfigRepo.findOneByOrFail({\n                id: credentialConfigurationId,\n                tenantId: session.tenantId,\n            });\n\n        // If status management is enabled, create a status entry\n        let status: JWTwithStatusListPayload | undefined;\n        if (credentialConfig.statusManagement) {\n            status = await this.statusListService.createEntry(\n                session,\n                credentialConfigurationId,\n            );\n        }\n\n        const iat = Math.round(new Date().getTime() / 1000);\n        // Set expiration time if lifeTime is defined\n        let exp: number | undefined;\n        if (credentialConfig.lifeTime) {\n            exp = iat + credentialConfig.lifeTime;\n        }\n\n        // If key binding is enabled, include the JWK in the cnf\n        let cnf: { jwk: Jwk } | undefined;\n\n        if (credentialConfig.keyBinding) {\n            cnf = {\n                jwk: holderCnf,\n            };\n        }\n\n        return sdjwt.issue(\n            {\n                iss: this.configService.getOrThrow('PUBLIC_URL'),\n                iat,\n                exp,\n                vct: `${this.configService.getOrThrow('PUBLIC_URL')}/${session.tenantId}/credentials/vct/${credentialConfigurationId}`,\n                cnf,\n                ...claims,\n                ...status,\n            },\n            disclosureFrame,\n            {\n                header: {\n                    x5c: await this.cryptoService.getCertChain(\n                        'signing',\n                        session.tenantId,\n                    ),\n                    alg: this.cryptoImplementationService.getAlg(),\n                },\n            },\n        );\n    }\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n     * @param credentialId\n     * @param tenantId\n     * @returns\n     */\n    async getVCT(credentialId: string, tenantId: string): Promise {\n        const credentialConfig = await this.credentialConfigRepo\n            .findOneByOrFail({\n                tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException(\n                    `Credential configuration with id ${credentialId} not found`,\n                );\n            });\n        if (!credentialConfig.vct) {\n            throw new ConflictException(\n                `VCT for credential configuration with id ${credentialId} not found`,\n            );\n        }\n        const host = this.configService.getOrThrow('PUBLIC_URL');\n        credentialConfig.vct.vct = `${host}/${tenantId}/credentials-metadata/vct/${credentialConfig.id}`;\n        return credentialConfig.vct;\n    }\n\n    /**\n     * Retrieves the schema for a specific credential configuration.\n     * @param id\n     * @param tenantId\n     * @returns\n     */\n    async getSchema(\n        credentialConfigurationId: string,\n        tenantId: string,\n    ): Promise {\n        const credentialConfig =\n            await this.credentialConfigRepo.findOneByOrFail({\n                tenantId,\n            });\n        if (!credentialConfig) {\n            throw new ConflictException(\n                `Credential configuration with id ${credentialConfigurationId} not found`,\n            );\n        }\n        if (!credentialConfig.schema) {\n            throw new ConflictException(\n                `Schema for credential configuration with id ${credentialConfigurationId} not found`,\n            );\n        }\n        return credentialConfig.schema;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CryptoImplementatationModule.html":{"url":"modules/CryptoImplementatationModule.html","title":"module - CryptoImplementatationModule","body":"\n                   \n\n\n\n\n    Modules\n    CryptoImplementatationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CryptoImplementatationModule\n\n\n\ncluster_CryptoImplementatationModule_exports\n\n\n\ncluster_CryptoImplementatationModule_providers\n\n\n\n\nCryptoImplementationService \n\nCryptoImplementationService \n\n\n\nCryptoImplementatationModule\n\nCryptoImplementatationModule\n\nCryptoImplementationService  -->\n\nCryptoImplementatationModule->CryptoImplementationService \n\n\n\n\n\nCryptoImplementationService\n\nCryptoImplementationService\n\nCryptoImplementatationModule -->\n\nCryptoImplementationService->CryptoImplementatationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/key/crypto-implementation/crypto-implementation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CryptoImplementationService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CryptoImplementationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport * as Joi from 'joi';\nimport { CryptoImplementationService } from './crypto-implementation.service';\n\nexport const CRYPTO_VALIDATION_SCHEMA = {\n    CRYPTO_ALG: Joi.string().valid('ES256').default('ES256'),\n};\n\n@Global()\n@Module({\n    imports: [ConfigModule],\n    providers: [CryptoImplementationService],\n    exports: [CryptoImplementationService],\n})\nexport class CryptoImplementatationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CryptoImplementation.html":{"url":"interfaces/CryptoImplementation.html","title":"interface - CryptoImplementation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CryptoImplementation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto-implementation/crypto-implementation.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface to imeplement different algorithms.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            alg\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        generateKeyPair\n                                    \n                                \n                                \n                                    \n                                        getSigner\n                                    \n                                \n                                \n                                    \n                                        getVerifier\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateKeyPair\n                        \n                    \n                \n            \n            \n                \ngenerateKeyPair()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.ts:19\n                        \n                    \n\n\n            \n                \n                        Generates a new keypair\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSigner\n                        \n                    \n                \n            \n            \n                \ngetSigner(privateKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.ts:24\n                        \n                    \n\n\n            \n                \n                        creates a signer based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                privateKeyJWK\n                                            \n                                                            JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getVerifier\n                        \n                    \n                \n            \n            \n                \ngetVerifier(publicKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.ts:29\n                        \n                    \n\n\n            \n                \n                        creates a verifier based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                publicKeyJWK\n                                            \n                                                            JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        alg\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        alg:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type KeyPair = {\n    publicKey: JsonWebKey;\n    privateKey: JsonWebKey;\n};\n\ntype Signer = (data: string) => Promise;\n\ntype Verifier = (data: string, signature: string) => Promise;\n\n/**\n * Generic interface to imeplement different algorithms.\n */\nexport interface CryptoImplementation {\n    //name of the algorithm\n    alg: string;\n    /**\n     * Generates a new keypair\n     */\n    generateKeyPair(): Promise;\n    /**\n     * creates a signer based on the passed key.\n     * @param privateKeyJWK\n     */\n    getSigner(privateKeyJWK: JsonWebKey): Promise;\n    /**\n     * creates a verifier based on the passed key.\n     * @param publicKeyJWK\n     */\n    getVerifier(publicKeyJWK: JsonWebKey): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CryptoImplementationService.html":{"url":"injectables/CryptoImplementationService.html","title":"injectable - CryptoImplementationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CryptoImplementationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAlg\n                            \n                            \n                                getCrypto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configServie: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/crypto-implementation/crypto-implementation.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configServie\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAlg\n                        \n                    \n                \n            \n            \n                \ngetAlg()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.service.ts:17\n                        \n                    \n\n\n            \n                \n                        Return the algorithm that is used for the crypto operations like signing.\n\n\n                        \n                            Returns :         CryptoType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCrypto\n                        \n                    \n                \n            \n            \n                \ngetCrypto(alg)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Returns the crypto implementation based on the configured algorithm.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                alg\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    this.configServie.get('CRYPTO_ALG')\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CryptoImplementation\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { ES256 } from '@sd-jwt/crypto-nodejs';\nimport { CryptoImplementation } from './crypto-implementation';\nimport { ED25519 } from './ed25519';\n\nexport type CryptoType = 'ES256' | 'Ed25519';\n\n@Injectable()\nexport class CryptoImplementationService {\n    constructor(private configServie: ConfigService) {}\n\n    /**\n     * Return the algorithm that is used for the crypto operations like signing.\n     * @returns\n     */\n    getAlg(): CryptoType {\n        return this.configServie.get('CRYPTO_ALG') as CryptoType;\n    }\n\n    /**\n     * Returns the crypto implementation based on the configured algorithm.\n     * @param alg\n     * @returns\n     */\n    getCrypto(\n        alg = this.configServie.get('CRYPTO_ALG'),\n    ): CryptoImplementation {\n        switch (alg) {\n            case 'Ed25519':\n                return ED25519;\n            case 'ES256':\n                return ES256;\n            default:\n                throw new Error(`Unsupported algorithm ${alg}`);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CryptoModule.html":{"url":"modules/CryptoModule.html","title":"module - CryptoModule","body":"\n                   \n\n\n\n\n    Modules\n    CryptoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_exports\n\n\n\ncluster_CryptoModule_providers\n\n\n\n\nCryptoService \n\nCryptoService \n\n\n\nEncryptionService \n\nEncryptionService \n\n\n\nCryptoModule\n\nCryptoModule\n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/crypto.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            KeyController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { CryptoService } from \"./crypto.service\";\nimport { EncryptionService } from \"./encryption/encryption.service\";\nimport { CertEntity } from \"./key/entities/cert.entity\";\nimport { KeyEntity } from \"./key/entities/keys.entity\";\nimport { KeyController } from \"./key/key.controller\";\n\n@Module({\n    imports: [TypeOrmModule.forFeature([CertEntity, KeyEntity])],\n    controllers: [KeyController],\n    providers: [CryptoService, EncryptionService],\n    exports: [CryptoService, EncryptionService],\n})\nexport class CryptoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule, TypeOrmModuleOptions } from '@nestjs/typeorm';\nimport * as Joi from 'joi';\nimport { join } from 'path';\n\nexport const DB_VALIDATION_SCHEMA = {\n    DB_TYPE: Joi.string().valid('sqlite', 'postgres').default('sqlite'),\n    DB_HOST: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PORT: Joi.number().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_USERNAME: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PASSWORD: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_DATABASE: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n};\n\n@Module({\n    imports: [\n        TypeOrmModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (\n                configService: ConfigService,\n            ): TypeOrmModuleOptions => {\n                const dbType = configService.get(\n                    'DB_TYPE',\n                );\n\n                const commonOptions = {\n                    synchronize: true,\n                    autoLoadEntities: true,\n                };\n\n                if (dbType === 'postgres') {\n                    return {\n                        type: 'postgres',\n                        host: configService.getOrThrow('DB_HOST'),\n                        port: configService.getOrThrow('DB_PORT'),\n                        username:\n                            configService.getOrThrow('DB_USERNAME'),\n                        password:\n                            configService.getOrThrow('DB_PASSWORD'),\n                        database:\n                            configService.getOrThrow('DB_DATABASE'),\n                        ...commonOptions,\n                    };\n                }\n\n                return {\n                    type: 'sqlite',\n                    database: join(\n                        configService.getOrThrow('FOLDER'),\n                        'service.db',\n                    ),\n                    ...commonOptions,\n                };\n            },\n        }),\n    ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DisplayEntity.html":{"url":"entities/DisplayEntity.html","title":"entity - DisplayEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DisplayEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/entities/display.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/entities/display.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DisplayInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/entities/display.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from \"typeorm\";\n\ntype DisplayInfo = {\n    name: string;\n    locale: string;\n    logo: {\n        uri: string;\n        url: string;\n    };\n};\n\n@Entity()\nexport class DisplayEntity {\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    @Column(\"json\")\n    value: DisplayInfo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EC_Public.html":{"url":"classes/EC_Public.html","title":"class - EC_Public","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EC_Public\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\nThis class is used to define the structure of EC public keys in JWK format.\n\n            \n\n\n            \n                Implements\n            \n            \n                            JWK_EC_Public\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                crv\n                            \n                            \n                                kty\n                            \n                            \n                                x\n                            \n                            \n                                y\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        crv\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:15\n                        \n                    \n\n            \n                \n                    The algorithm intended for use with the key, such as 'ES256'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        kty\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The key type, which is always 'EC' for Elliptic Curve keys.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        x\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:19\n                        \n                    \n\n            \n                \n                    The x coordinate of the EC public key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        y\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:23\n                        \n                    \n\n            \n                \n                    The y coordinate of the EC public key.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from 'jose';\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: 'EC';\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EncryptionService.html":{"url":"injectables/EncryptionService.html","title":"injectable - EncryptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EncryptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/encryption/encryption.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling encryption and decryption operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decryptJwe\n                            \n                            \n                                getEncryptionPublicKey\n                            \n                            \n                                    Async\n                                onTenantInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(keyRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/encryption/encryption.service.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor for the EncryptionService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        keyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decryptJwe\n                        \n                    \n                \n            \n            \n                \n                        \n                    decryptJwe(response: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:47\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Encrypts a response using JWE (JSON Web Encryption).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe response to encrypt.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to encrypt the response.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The encrypted response as a JWE string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEncryptionPublicKey\n                        \n                    \n                \n            \n            \n                \ngetEncryptionPublicKey(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Retrieves the public encryption key for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve the public key.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The public encryption key as a JWK.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:27\n                        \n                    \n\n\n            \n                \n                        Initializes the encryption keys for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to initialize the keys.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport e from \"express\";\nimport { exportJWK, generateKeyPair, importJWK, JWK, jwtDecrypt } from \"jose\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { v4 } from \"uuid\";\nimport { KeyEntity } from \"../key/entities/keys.entity\";\n\n/**\n * Service for handling encryption and decryption operations.\n */\n@Injectable()\nexport class EncryptionService {\n    /**\n     * Constructor for the EncryptionService.\n     * @param configService\n     */\n    constructor(\n        @InjectRepository(KeyEntity)\n        private keyRepository: Repository,\n    ) {}\n\n    /**\n     * Initializes the encryption keys for a given tenant.\n     * @param tenantId - The ID of the tenant for which to initialize the keys.\n     */\n    async onTenantInit(tenantId: string) {\n        const privateKey = await generateKeyPair(\"ECDH-ES\", {\n            crv: \"P-256\",\n            extractable: true,\n        }).then(async (secret) => exportJWK(secret.privateKey));\n\n        this.keyRepository.save({\n            id: v4(),\n            tenantId,\n            key: privateKey,\n            usage: \"encrypt\",\n        });\n    }\n\n    /**\n     * Encrypts a response using JWE (JSON Web Encryption).\n     * @param response - The response to encrypt.\n     * @param tenantId - The ID of the tenant for which to encrypt the response.\n     * @returns The encrypted response as a JWE string.\n     */\n    async decryptJwe(response: string, tenantId: string): Promise {\n        const privateEncryptionKey = await this.keyRepository\n            .findOneByOrFail({\n                tenantId,\n                usage: \"encrypt\",\n            })\n            .then(\n                (keyEntity) =>\n                    importJWK(keyEntity.key, \"ECDH-ES\") as Promise,\n            );\n\n        const res = await jwtDecrypt(response, privateEncryptionKey);\n        return res.payload;\n    }\n\n    /**\n     * Retrieves the public encryption key for a given tenant.\n     * @param tenantId - The ID of the tenant for which to retrieve the public key.\n     * @returns The public encryption key as a JWK.\n     */\n    getEncryptionPublicKey(tenantId: string): Promise {\n        return this.keyRepository\n            .findOneByOrFail({\n                tenantId,\n                usage: \"encrypt\",\n            })\n            .then((entry) => {\n                delete entry.key.d;\n                return entry.key;\n            });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileStorage.html":{"url":"interfaces/FileStorage.html","title":"interface - FileStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FileStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/storage.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        delete\n                                    \n                                \n                                \n                                    \n                                        exists\n                                    \n                                \n                                \n                                        Optional\n                                    \n                                        getSignedUrl\n                                    \n                                \n                                \n                                    \n                                        getStream\n                                    \n                                \n                                \n                                    \n                                        put\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exists\n                        \n                    \n                \n            \n            \n                \nexists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        getSignedUrl\n                        \n                    \n                \n            \n            \n                \ngetSignedUrl(key: string, expiresInSec: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresInSec\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStream\n                        \n                    \n                \n            \n            \n                \ngetStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(key: string, body: Buffer | Readable, opts?: PutOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        Buffer | Readable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            PutOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Readable } from \"stream\";\n\nexport type PutOptions = {\n    contentType?: string;\n    metadata?: Record;\n    acl?: \"private\" | \"public\";\n    checksum?: string; // e.g., sha256 base64\n};\n\nexport type StoredObject = {\n    key: string; // canonical key (e.g. \"tenant/2025/08/14/uuid.ext\")\n    etag?: string;\n    size?: number;\n    url?: string; // public URL if ACL=public or a presigned URL\n    contentType?: string;\n    metadata?: Record;\n};\n\nexport interface FileStorage {\n    put(\n        key: string,\n        body: Buffer | Readable,\n        opts?: PutOptions,\n    ): Promise;\n\n    getStream(\n        key: string,\n    ): Promise;\n\n    delete(key: string): Promise;\n\n    exists(key: string): Promise;\n\n    getSignedUrl?(key: string, expiresInSec: number): Promise; // optional for local\n}\n\nexport const FILE_STORAGE = Symbol(\"FILE_STORAGE\");\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileSystemKeyService.html":{"url":"classes/FileSystemKeyService.html","title":"class - FileSystemKeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileSystemKeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/adapters/filesystem-key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The key service is responsible for managing the keys of the issuer.\n\n            \n\n            \n                Extends\n            \n            \n                            KeyService\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                crypto\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                getKid\n                            \n                            \n                                    Private\n                                    Async\n                                getPrivateKey\n                            \n                            \n                                    Private\n                                getPubFromPrivateKey\n                            \n                            \n                                getPublicKey\n                            \n                            \n                                getPublicKey\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                import\n                            \n                            \n                                init\n                            \n                            \n                                    Async\n                                signer\n                            \n                            \n                                    Async\n                                signJWT\n                            \n                            \n                                    Protected\n                                getCertificate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoImplementationService, certRepository: Repository, keyRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/adapters/filesystem-key.service.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoImplementationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        certRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        keyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        crypto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CryptoImplementation\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/adapters/filesystem-key.service.ts:28\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:86\n\n                        \n                    \n\n\n            \n                \n                        Creates a new keypair and wrtites the private key to the file system.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                key id of the generated key.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getKid\n                        \n                    \n                \n            \n            \n                \ngetKid(tenantId: string, type: CertificateType)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:136\n\n                        \n                    \n\n\n            \n                \n                        Gets one key id for the tenant.\nIf no key exists, it will throw an error.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                type\n                                            \n                                                            CertificateType\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    \"signing\"\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        getPrivateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPrivateKey(tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/filesystem-key.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Get the keys from the file system or generate them if they do not exist\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getPubFromPrivateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPubFromPrivateKey(privateKey: JWK_EC_Private)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/filesystem-key.service.ts:62\n                        \n                    \n\n\n            \n                \n                        Get the public key from the private key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                privateKey\n                                            \n                                                        JWK_EC_Private\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         EC_Public\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \ngetPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:152\n\n                        \n                    \n\n\n            \n                \n                        Get the public key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \ngetPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/filesystem-key.service.ts:153\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"pem\" | \"jwk\", tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/filesystem-key.service.ts:158\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"pem\" | \"jwk\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        import\n                        \n                    \n                \n            \n            \n                \nimport(tenantId: string, body: KeyImportDto)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:46\n\n                        \n                    \n\n\n            \n                \n                        Import a key into the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            KeyImportDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        init\n                        \n                    \n                \n            \n            \n                \ninit(tenant: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:77\n\n                        \n                    \n\n\n            \n                \n                        Initialize the key service for a specific tenant.\nThis will create the keys if they do not exist.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenant\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signer\n                        \n                    \n                \n            \n            \n                \n                        \n                    signer(tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:109\n\n                        \n                    \n\n\n            \n                \n                        Get the signer for the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JWTPayload, header: JWTHeaderParameters, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:195\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWTHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCertificate(tenantId: string, keyId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:86\n\n                        \n                    \n\n\n            \n                \n                        Get the certificate for the given key id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConfigService } from \"@nestjs/config\";\nimport { Signer } from \"@sd-jwt/types\";\nimport {\n    CryptoKey,\n    exportJWK,\n    exportSPKI,\n    importJWK,\n    JWK,\n    JWK_EC_Private,\n    JWTHeaderParameters,\n    JWTPayload,\n    SignJWT,\n} from \"jose\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { v4 } from \"uuid\";\nimport { EC_Public } from \"../../../well-known/dto/jwks-response.dto\";\nimport { CryptoImplementation } from \"../crypto-implementation/crypto-implementation\";\nimport { CryptoImplementationService } from \"../crypto-implementation/crypto-implementation.service\";\nimport { KeyImportDto } from \"../dto/key-import.dto\";\nimport { CertEntity, CertificateType } from \"../entities/cert.entity\";\nimport { KeyEntity } from \"../entities/keys.entity\";\nimport { KeyService } from \"../key.service\";\n\n/**\n * The key service is responsible for managing the keys of the issuer.\n */\nexport class FileSystemKeyService extends KeyService {\n    private crypto: CryptoImplementation;\n\n    constructor(\n        configService: ConfigService,\n        private cryptoService: CryptoImplementationService,\n        certRepository: Repository,\n        private keyRepository: Repository,\n    ) {\n        super(configService, certRepository);\n        this.crypto = cryptoService.getCrypto();\n    }\n\n    /**\n     * Import a key into the key service.\n     * @param tenantId\n     * @param body\n     * @returns\n     */\n    import(tenantId: string, body: KeyImportDto): Promise {\n        const privateKey = body.privateKey;\n        return this.keyRepository\n            .save({\n                id: privateKey.kid,\n                tenantId,\n                key: privateKey,\n            })\n            .then(() => privateKey.kid);\n    }\n\n    /**\n     * Get the public key from the private key.\n     * @param privateKey\n     * @returns\n     */\n    private getPubFromPrivateKey(privateKey: JWK_EC_Private): EC_Public {\n        const {\n            d: _d,\n            key_ops: _key_ops,\n            ext: _ext,\n            ...publicKey\n        } = privateKey;\n        return publicKey as EC_Public;\n    }\n\n    /**\n     * Initialize the key service for a specific tenant.\n     * This will create the keys if they do not exist.\n     * @param tenant\n     */\n    init(tenant: string): Promise {\n        return this.getKid(tenant).catch(async () => this.create(tenant));\n    }\n\n    /**\n     * Creates a new keypair and wrtites the private key to the file system.\n     * @param tenantId\n     * @returns key id of the generated key.\n     */\n    async create(tenantId: string): Promise {\n        const keys = await this.crypto.generateKeyPair();\n        const privateKey = keys.privateKey as JWK;\n        //add a random key id for reference\n        privateKey.kid = v4();\n        privateKey.alg = this.crypto.alg;\n\n        //remove exportable and key_ops from the private key\n        delete privateKey.ext;\n        delete privateKey.key_ops;\n\n        return this.keyRepository\n            .save({\n                id: privateKey.kid,\n                tenantId,\n                key: privateKey,\n            })\n            .then(() => privateKey.kid!);\n    }\n\n    /**\n     * Get the signer for the key service\n     */\n    async signer(tenantId: string, keyId?: string): Promise {\n        const privateKey = await this.getPrivateKey(tenantId, keyId);\n        return this.crypto.getSigner(privateKey);\n    }\n\n    /**\n     * Get the keys from the file system or generate them if they do not exist\n     * @returns\n     */\n    private async getPrivateKey(tenantId: string, keyId?: string) {\n        keyId =\n            keyId ||\n            (await this.getKid(tenantId).catch(() => this.create(tenantId)));\n\n        return this.keyRepository\n            .findOneByOrFail({\n                id: keyId,\n                tenantId,\n            })\n            .then((key) => key.key);\n    }\n\n    /**\n     * Gets one key id for the tenant.\n     * If no key exists, it will throw an error.\n     * @returns\n     */\n    getKid(\n        tenantId: string,\n        type: CertificateType = \"signing\",\n    ): Promise {\n        return this.certRepository\n            .findOneByOrFail({\n                tenantId,\n                type,\n            })\n            .then((cert) => cert.id);\n    }\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    getPublicKey(type: \"jwk\", tenantId: string, keyId?: string): Promise;\n    getPublicKey(\n        type: \"pem\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n    async getPublicKey(\n        type: \"pem\" | \"jwk\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise {\n        const privateKey = await this.getPrivateKey(tenantId, keyId);\n\n        // Convert the private key to a public key\n        // First import the private key as a CryptoKey\n        const privateKeyInstance = await importJWK(\n            privateKey,\n            this.cryptoService.getAlg(),\n            { extractable: true },\n        );\n\n        // Export it as a JWK to get the public key components\n        const privateKeyJWK = (await exportJWK(\n            privateKeyInstance,\n        )) as JWK_EC_Private;\n\n        // Remove private key components to get only the public key\n\n        const publicKey = this.getPubFromPrivateKey(privateKeyJWK);\n\n        if (type === \"pem\") {\n            // Import the public key and export as PEM\n            const publicKeyInstance = await importJWK(\n                publicKey,\n                this.cryptoService.getAlg(),\n                { extractable: true },\n            );\n            return exportSPKI(publicKeyInstance as CryptoKey);\n        } else {\n            return publicKey;\n        }\n    }\n\n    async signJWT(\n        payload: JWTPayload,\n        header: JWTHeaderParameters,\n        tenantId: string,\n        keyId?: string,\n    ): Promise {\n        const privateKey = await this.getPrivateKey(tenantId, keyId);\n        const privateKeyInstance = (await importJWK(privateKey)) as CryptoKey;\n        return new SignJWT(payload)\n            .setProtectedHeader(header)\n            .sign(privateKeyInstance);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/files.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                getDownloadUrl\n                            \n                            \n                                getStream\n                            \n                            \n                                saveUserUpload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(storage: FileStorage)\n                    \n                \n                        \n                            \n                                Defined in src/storage/files.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        storage\n                                                  \n                                                        \n                                                                        FileStorage\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDownloadUrl\n                        \n                    \n                \n            \n            \n                \ngetDownloadUrl(key: string, ttlSeconds: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                ttlSeconds\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    300\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStream\n                        \n                    \n                \n            \n            \n                \ngetStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveUserUpload\n                        \n                    \n                \n            \n            \n                \nsaveUserUpload(tenantId: string, fileName: string, body: Buffer | Readable, contentType?: string, isPublic)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                fileName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                body\n                                            \n                                                        Buffer | Readable\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                contentType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                isPublic\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from \"@nestjs/common\";\nimport { randomUUID } from \"crypto\";\nimport { extname } from \"path\";\nimport { Readable } from \"stream\";\nimport {\n    FILE_STORAGE,\n    FileStorage,\n    StoredObject,\n} from \"../storage/storage.types\";\n\n@Injectable()\nexport class FilesService {\n    constructor(@Inject(FILE_STORAGE) private storage: FileStorage) {}\n\n    saveUserUpload(\n        tenantId: string,\n        fileName: string,\n        body: Buffer | Readable,\n        contentType?: string,\n        isPublic = false,\n    ): Promise {\n        const safeExt = extname(fileName || \"\")\n            .toLowerCase()\n            .slice(1);\n        const key = `${tenantId}/${new Date().toISOString().slice(0, 10)}/${randomUUID()}${safeExt ? \".\" + safeExt : \"\"}`;\n\n        // TODO: add checksum if you want tamper detection:\n        // const checksum = createHash('sha256').update(bufferOrStreamToBuffer(body)).digest('base64');\n\n        return this.storage.put(key, body, {\n            contentType,\n            acl: isPublic ? \"public\" : \"private\",\n            metadata: { originalName: fileName },\n        });\n    }\n\n    getStream(key: string) {\n        return Promise.resolve(this.storage.getStream(key));\n    }\n\n    delete(key: string) {\n        return Promise.resolve(this.storage.delete(key));\n    }\n\n    getDownloadUrl(key: string, ttlSeconds = 300) {\n        if (this.storage.getSignedUrl)\n            return this.storage.getSignedUrl(key, ttlSeconds);\n        // For local, expose via your HTTP controller at /files/:key\n        return Promise.resolve(undefined);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GenerateTokenOptions.html":{"url":"interfaces/GenerateTokenOptions.html","title":"interface - GenerateTokenOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GenerateTokenOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            audience\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expiresIn\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            subject\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresIn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresIn:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { decodeJwt, jwtVerify, SignJWT } from 'jose';\nimport { TokenPayload } from './token.decorator';\nimport { DEFAULT_JWT_SECRET } from './auth.module';\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject?: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {\n        if(this.configService.get('JWT_SECRET') === DEFAULT_JWT_SECRET) {\n            console.warn(\n                'Using default JWT secret. This is not secure for production environments.',\n            );\n        }\n    }\n\n    /**\n     * Generate a JWT token for integrated OAuth2 server\n     */\n    async generateToken(\n        payload: TokenPayload,\n        options: GenerateTokenOptions = {},\n    ): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                'Token generation is not available when using external OIDC provider. Use your external OIDC provider for token generation.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow('JWT_EXPIRES_IN');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: 'HS256' })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject || payload.sub)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                'Token verification is handled by external OIDC provider.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = (await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: ['HS256'],\n            })) as { payload: TokenPayload };\n            return payload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Decode token without verification (for debugging)\n     */\n    decodeToken(token: string): TokenPayload | null {\n        try {\n            return decodeJwt(token) as TokenPayload;\n        } catch {\n            return null;\n        }\n    }\n\n    /**\n     * Check if the service is using external OIDC provider\n     */\n    isUsingExternalOIDC(): boolean {\n        return this.configService.get('OIDC') !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n            \n                Description\n            \n            \n                HealthController is responsible for providing health check endpoints.\nIt uses the HealthCheckService to perform checks on the database connection.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        check\n                        \n                    \n                \n            \n            \n                \n                        \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Endpoint to check the health of the service.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport {\n    HealthCheck,\n    HealthCheckService,\n    TypeOrmHealthIndicator,\n} from '@nestjs/terminus';\n\n/**\n * HealthController is responsible for providing health check endpoints.\n * It uses the HealthCheckService to perform checks on the database connection.\n */\n@Controller('health')\nexport class HealthController {\n    constructor(\n        private health: HealthCheckService,\n        private db: TypeOrmHealthIndicator,\n    ) {}\n\n    /**\n     * Endpoint to check the health of the service.\n     * @returns\n     */\n    @Get()\n    @HealthCheck()\n    check() {\n        return this.health.check([() => this.db.pingCheck('database')]);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { HealthController } from './health.controller';\n\n@Module({\n    imports: [TerminusModule],\n    controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/IssuanceConfig.html":{"url":"entities/IssuanceConfig.html","title":"entity - IssuanceConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  IssuanceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/entities/issuance-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity to manage issuance configs\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                authenticationConfig\n                            \n                            \n                                    \n                                    Optional\n                                batch_size\n                            \n                            \n                                    \n                                    Optional\n                                createdAt\n                            \n                            \n                                    \n                                credentialIssuanceBindings\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                notifyWebhook\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        authenticationConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthenticationConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:44\n                        \n                    \n\n            \n                \n                    Authentication configuration for the issuance process.\nThis determines which OpenID4VC flow to use:\n\n'none': Pre-authorized code flow (no user authentication required)\n'auth': OID4VCI authorized code flow (user will be redirected for authentication)\n'presentationDuringIssuance': OID4VP request is sent (credential presentation required)\n\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        batch_size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int', {default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:63\n                        \n                    \n\n            \n                \n                    Value to determine the amount of credentials that are issued in a batch.\nDefault is 1.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:50\n                        \n                    \n\n            \n                \n                    The timestamp when the issuance configuration was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialIssuanceBindings\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialIssuanceBinding[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, binding => binding.issuanceConfig)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:33\n                        \n                    \n\n            \n                \n                    Links to all credential config bindings that are included in this issuance config.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:17\n                        \n                    \n\n            \n                \n                    Unique identifier for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        notifyWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:56\n                        \n                    \n\n            \n                \n                    Webhook to send the result of the notification response\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:24\n                        \n                    \n\n            \n                \n                    Tenant ID for the issuance configuration.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiHideProperty } from \"@nestjs/swagger\";\nimport { IsObject } from \"class-validator\";\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from \"typeorm\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport type { AuthenticationConfig } from \"../dto/authentication-config.dto\";\nimport { CredentialIssuanceBinding } from \"./credential-issuance-binding.entity\";\n\n/**\n * Entity to manage issuance configs\n */\n@Entity()\nexport class IssuanceConfig {\n    /**\n     * Unique identifier for the issuance configuration.\n     */\n    @PrimaryGeneratedColumn(\"uuid\")\n    id: string;\n\n    /**\n     * Tenant ID for the issuance configuration.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\")\n    tenantId: string;\n\n    /**\n     * Links to all credential config bindings that are included in this issuance config.\n     */\n    @OneToMany(\n        () => CredentialIssuanceBinding,\n        (binding) => binding.issuanceConfig,\n    )\n    credentialIssuanceBindings: CredentialIssuanceBinding[];\n\n    /**\n     * Authentication configuration for the issuance process.\n     * This determines which OpenID4VC flow to use:\n     * - 'none': Pre-authorized code flow (no user authentication required)\n     * - 'auth': OID4VCI authorized code flow (user will be redirected for authentication)\n     * - 'presentationDuringIssuance': OID4VP request is sent (credential presentation required)\n     */\n    @IsObject()\n    @Column(\"json\")\n    authenticationConfig: AuthenticationConfig;\n\n    /**\n     * The timestamp when the issuance configuration was created.\n     */\n    @Column({ type: \"date\", default: () => \"CURRENT_TIMESTAMP\" })\n    createdAt?: Date;\n\n    /**\n     * Webhook to send the result of the notification response\n     */\n    @Column(\"json\", { nullable: true })\n    notifyWebhook?: WebhookConfig;\n\n    /**\n     * Value to determine the amount of credentials that are issued in a batch.\n     * Default is 1.\n     */\n    @Column(\"int\", { default: 1 })\n    batch_size?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssuanceController.html":{"url":"controllers/IssuanceController.html","title":"controller - IssuanceController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssuanceController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/issuance.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management/issuance\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    \n                                getIssuanceConfigurations\n                            \n                            \n                                    \n                                storeIssuanceConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteIssuanceConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:54\n                        \n                    \n\n\n            \n                \n                        Deletes an issuance configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getIssuanceConfigurations\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuanceConfigurations(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:28\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storeIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeIssuanceConfiguration(config: IssuanceDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:38\n                        \n                    \n\n\n            \n                \n                        Stores the issuance configuration for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            IssuanceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    UseGuards,\n} from '@nestjs/common';\nimport { ApiSecurity, ApiTags } from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../../auth/auth.guard';\nimport { Token, TokenPayload } from '../../auth/token.decorator';\nimport { IssuanceDto } from './dto/issuance.dto';\nimport { IssuanceService } from './issuance.service';\n\n@ApiTags('Issuer management')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2')\n@Controller('issuer-management/issuance')\nexport class IssuanceController {\n    constructor(private readonly issuanceService: IssuanceService) {}\n\n    /**\n     * Returns the issuance configurations for this tenant.\n     * @returns\n     */\n    @Get()\n    getIssuanceConfigurations(@Token() user: TokenPayload) {\n        return this.issuanceService.getIssuanceConfiguration(user.sub);\n    }\n\n    /**\n     * Stores the issuance configuration for this tenant.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storeIssuanceConfiguration(\n        @Body() config: IssuanceDto,\n        @Token() user: TokenPayload,\n    ) {\n        return this.issuanceService.storeIssuanceConfiguration(\n            user.sub,\n            config,\n        );\n    }\n\n    /**\n     * Deletes an issuance configuration.\n     * @param id\n     * @returns\n     */\n    @Delete(':id')\n    deleteIssuanceConfiguration(\n        @Param('id') id: string,\n        @Token() user: TokenPayload,\n    ) {\n        return this.issuanceService.deleteIssuanceConfiguration(user.sub, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IssuanceDto.html":{"url":"classes/IssuanceDto.html","title":"class - IssuanceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IssuanceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/issuance.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for Issuance Configuration.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authenticationConfig\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                batch_size\n                            \n                            \n                                    \n                                    \n                                    \n                                credentialConfigs\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                notifyWebhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authenticationConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthenticationConfigDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:49\n                        \n                    \n\n            \n                \n                    Authentication configuration for the issuance process.\nThis includes details like the authentication method and any required parameters.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        batch_size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:66\n                        \n                    \n\n            \n                \n                    Value to determine the amount of credentials that are issued in a batch.\nDefault is 1.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        credentialConfigs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialConfigMapping[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:40\n                        \n                    \n\n            \n                \n                    Ids of the credential configurations associated with this issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:32\n                        \n                    \n\n            \n                \n                    Unique identifier for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        notifyWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:58\n                        \n                    \n\n            \n                \n                    Optional webhook configuration to send the results of the notification response.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n    IsArray,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\nimport { AuthenticationConfigDto } from './authentication-config.dto';\n\n/**\n * DTO for mapping credential configurations in issuance.\n */\nexport class CredentialConfigMapping {\n    /**\n     * Unique identifier for the credential configuration.\n     */\n    @IsString()\n    id: string;\n}\n\n/**\n * DTO for Issuance Configuration.\n */\nexport class IssuanceDto {\n    /**\n     * Unique identifier for the issuance configuration.\n     */\n    @IsString()\n    id: string;\n\n    /**\n     * Ids of the credential configurations associated with this issuance configuration.\n     */\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialConfigMapping)\n    credentialConfigs: CredentialConfigMapping[];\n\n    /**\n     * Authentication configuration for the issuance process.\n     * This includes details like the authentication method and any required parameters.\n     */\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationConfigDto)\n    authenticationConfig: AuthenticationConfigDto;\n\n    /**\n     * Optional webhook configuration to send the results of the notification response.\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    notifyWebhook?: WebhookConfig;\n\n    /**\n     * Value to determine the amount of credentials that are issued in a batch.\n     * Default is 1.\n     */\n    @IsNumber()\n    @IsOptional()\n    batch_size?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IssuanceService.html":{"url":"injectables/IssuanceService.html","title":"injectable - IssuanceService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IssuanceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/issuance.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing issuance configurations.\nIt provides methods to get, store, and delete issuance configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    Public\n                                getIssuanceConfiguration\n                            \n                            \n                                getIssuanceConfigurationById\n                            \n                            \n                                    Private\n                                    Async\n                                import\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                storeIssuanceConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(issuanceConfigRepo: Repository, credentialIssuanceBindingRepo: Repository, credentialsConfigService: CredentialConfigService, configService: ConfigService, logger: PinoLogger, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/issuance/issuance.service.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for IssuanceService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        issuanceConfigRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialIssuanceBindingRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialsConfigService\n                                                  \n                                                        \n                                                                        CredentialConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \ndeleteIssuanceConfiguration(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:259\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuanceConfiguration(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:160\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getIssuanceConfigurationById\n                        \n                    \n                \n            \n            \n                \ngetIssuanceConfigurationById(issuanceConfigId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:173\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configuration by ID for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuanceConfigId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:52\n                        \n                    \n\n\n            \n                \n                        Import issuance configurations from the configured folder.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:43\n                        \n                    \n\n\n            \n                \n                        Import issuance configurations and the credential configurations from the configured folder.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        storeIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeIssuanceConfiguration(tenantId: string, value: IssuanceDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:189\n                        \n                    \n\n\n            \n                \n                        Store the config. If it already exist, overwrite it.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            IssuanceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, OnModuleInit } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { plainToClass } from 'class-transformer';\nimport { validate } from 'class-validator';\nimport { readdirSync, readFileSync } from 'fs';\nimport { PinoLogger } from 'nestjs-pino';\nimport { join } from 'path';\nimport { Repository } from 'typeorm';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { CredentialConfigService } from '../credentials/credential-config/credential-config.service';\nimport { CredentialConfig } from '../credentials/entities/credential.entity';\nimport { AuthenticationConfig } from './dto/authentication-config.dto';\nimport { IssuanceDto } from './dto/issuance.dto';\nimport { CredentialIssuanceBinding } from './entities/credential-issuance-binding.entity';\nimport { IssuanceConfig } from './entities/issuance-config.entity';\n\n/**\n * Service for managing issuance configurations.\n * It provides methods to get, store, and delete issuance configurations.\n */\n@Injectable()\nexport class IssuanceService implements OnModuleInit {\n    /**\n     * Constructor for IssuanceService.\n     * @param issuanceConfigRepo\n     * @param credentialsConfigService\n     */\n    constructor(\n        @InjectRepository(IssuanceConfig)\n        private issuanceConfigRepo: Repository,\n        @InjectRepository(CredentialIssuanceBinding)\n        private credentialIssuanceBindingRepo: Repository,\n        private credentialsConfigService: CredentialConfigService,\n        private configService: ConfigService,\n        private logger: PinoLogger,\n        private cryptoService: CryptoService,\n    ) {}\n\n    /**\n     * Import issuance configurations and the credential configurations from the configured folder.\n     */\n    async onModuleInit() {\n        await this.cryptoService.import();\n        await this.credentialsConfigService.import();\n        await this.import();\n    }\n\n    /**\n     * Import issuance configurations from the configured folder.\n     */\n    private async import() {\n        const configPath = this.configService.getOrThrow('CONFIG_FOLDER');\n        const subfolder = 'issuance/issuance';\n        const force = this.configService.get('CONFIG_IMPORT_FORCE');\n        if (this.configService.get('CONFIG_IMPORT')) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            for (const tenant of tenantFolders) {\n                let counter = 0;\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const files = readdirSync(path);\n                for (const file of files) {\n                    const payload = JSON.parse(\n                        readFileSync(join(path, file), 'utf8'),\n                    );\n\n                    payload.id = file.replace('.json', '');\n                    const exists = await this.getIssuanceConfigurationById(\n                        payload.id,\n                        tenant.name,\n                    ).catch(() => false);\n                    if (exists && !force) {\n                        continue; // Skip if config already exists and force is not set\n                    }\n\n                    // Validate the payload against IssuanceDto\n                    const issuanceDto = plainToClass(IssuanceDto, payload);\n                    //TOODO: it does not validate the different config options\n                    const validationErrors = await validate(issuanceDto, {\n                        whitelist: true,\n                        forbidNonWhitelisted: true,\n                    });\n\n                    if (validationErrors.length > 0) {\n                        const extractErrorMessages = (error: any): string[] => {\n                            const messages: string[] = [];\n\n                            // Add constraints from the current level\n                            if (error.constraints) {\n                                messages.push(\n                                    ...Object.values(\n                                        error.constraints as Record,\n                                    ),\n                                );\n                            }\n\n                            // Recursively add constraints from children\n                            if (error.children && error.children.length > 0) {\n                                for (const child of error.children) {\n                                    messages.push(\n                                        ...extractErrorMessages(child),\n                                    );\n                                }\n                            }\n\n                            return messages;\n                        };\n\n                        const errorMessages = validationErrors\n                            .map((error) => {\n                                const messages = extractErrorMessages(error);\n                                return messages.length > 0\n                                    ? `${error.property}: ${messages.join(', ')}`\n                                    : error.property;\n                            })\n                            .join('; ');\n\n                        this.logger.error(\n                            {\n                                event: 'ValidationError',\n                                file,\n                                tenant: tenant.name,\n                                errors: validationErrors.map((error) => ({\n                                    property: error.property,\n                                    constraints: error.constraints,\n                                    value: error.value,\n                                })),\n                            },\n                            `Validation failed for issuance config ${file} in tenant ${tenant.name}: ${errorMessages}`,\n                        );\n                        continue; // Skip this invalid config\n                    }\n                    await this.storeIssuanceConfiguration(\n                        tenant.name,\n                        issuanceDto,\n                    );\n                    counter++;\n                }\n                this.logger.info(\n                    {\n                        event: 'Import',\n                    },\n                    `${counter} issuance configs imported for ${tenant.name}`,\n                );\n            }\n        }\n    }\n\n    /**\n     * Returns the issuance configurations for this tenant.\n     * @param tenantId\n     * @returns\n     */\n    public getIssuanceConfiguration(tenantId: string) {\n        return this.issuanceConfigRepo.find({\n            where: { tenantId },\n            relations: ['credentialIssuanceBindings'],\n        });\n    }\n\n    /**\n     * Returns the issuance configuration by ID for a given tenant.\n     * @param issuanceConfigId\n     * @param tenantId\n     * @returns\n     */\n    getIssuanceConfigurationById(\n        issuanceConfigId: string,\n        tenantId: string,\n    ): Promise {\n        return this.issuanceConfigRepo.findOneOrFail({\n            where: { id: issuanceConfigId, tenantId },\n            relations: ['credentialIssuanceBindings.credentialConfig'],\n        });\n    }\n\n    /**\n     * Store the config. If it already exist, overwrite it.\n     * @param tenantId\n     * @param value\n     * @returns\n     */\n    async storeIssuanceConfiguration(tenantId: string, value: IssuanceDto) {\n        const credentials: { config: CredentialConfig; keyId?: string }[] = [];\n        //check if all credential configs exist\n        for (const credentialConfigId of value.credentialConfigs) {\n            const credential = await this.credentialsConfigService.getById(\n                tenantId,\n                credentialConfigId.id,\n            );\n            credentials.push({\n                config: credential,\n            });\n        }\n\n        // Convert AuthenticationConfigDto to AuthenticationConfig union type\n        let authenticationConfig: AuthenticationConfig;\n        if (value.authenticationConfig.method === 'none') {\n            authenticationConfig = { method: 'none' };\n        } else if (value.authenticationConfig.method === 'auth') {\n            if (!value.authenticationConfig.config) {\n                throw new Error(\n                    'AuthenticationConfig is required for auth method',\n                );\n            }\n            authenticationConfig = {\n                method: 'auth',\n                config: value.authenticationConfig.config as any,\n            };\n        } else if (\n            value.authenticationConfig.method === 'presentationDuringIssuance'\n        ) {\n            if (!value.authenticationConfig.config) {\n                throw new Error(\n                    'AuthenticationConfig is required for presentationDuringIssuance method',\n                );\n            }\n            authenticationConfig = {\n                method: 'presentationDuringIssuance',\n                config: value.authenticationConfig.config as any,\n            };\n        } else {\n            throw new Error(\n                `Invalid authentication method: ${\n                    (value.authenticationConfig as any).method\n                }`,\n            );\n        }\n\n        const issuanceConfig = await this.issuanceConfigRepo.save({\n            ...value,\n            tenantId,\n            authenticationConfig,\n        });\n\n        //store the binding between credential and isuance\n        for (const credentialConfig of credentials) {\n            await this.credentialIssuanceBindingRepo.save({\n                credentialConfig: credentialConfig.config,\n                issuanceConfig,\n                keyID: credentialConfig.keyId,\n            });\n        }\n        return issuanceConfig;\n    }\n\n    /**\n     * Deletes a credential configuration.\n     * @param tenantId\n     * @param id\n     * @returns\n     */\n    deleteIssuanceConfiguration(tenantId: string, id: string) {\n        return this.issuanceConfigRepo.delete({ tenantId, id });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssuerManagementController.html":{"url":"controllers/IssuerManagementController.html","title":"controller - IssuerManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssuerManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuer-management/issuer-management.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(res: Response, body: OfferRequestDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@ApiBody({type: OfferRequestDto, examples: undefined})@Post('offer')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuer-management/issuer-management.controller.ts:83\n                        \n                    \n\n\n            \n                \n                        Create an offer for a credential.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            OfferRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Res, UseGuards } from '@nestjs/common';\nimport {\n    ApiBody,\n    ApiProduces,\n    ApiResponse,\n    ApiSecurity,\n    ApiTags,\n} from '@nestjs/swagger';\nimport { Response } from 'express';\nimport * as QRCode from 'qrcode';\nimport { JwtAuthGuard } from '../../auth/auth.guard';\nimport { Token, TokenPayload } from '../../auth/token.decorator';\nimport { Oid4vciService } from '../../issuer/oid4vci/oid4vci.service';\nimport { ResponseType } from '../../verifier/oid4vp/dto/presentation-request.dto';\nimport {\n    OfferRequestDto,\n    OfferResponse,\n} from '../oid4vci/dto/offer-request.dto';\n\n@ApiTags('Issuer management')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2')\n@Controller('issuer-management')\nexport class IssuerManagementController {\n    constructor(private readonly oid4vciService: Oid4vciService) {}\n\n    /**\n     * Create an offer for a credential.\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: 'JSON response',\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            'application/json': { schema: { type: 'object' } },\n            'image/png': { schema: { type: 'string', format: 'binary' } },\n        },\n    })\n    @ApiProduces('application/json', 'image/png')\n    @ApiBody({\n        type: OfferRequestDto,\n        examples: {\n            qrcode: {\n                summary: 'QR-Code Example',\n                value: {\n                    response_type: ResponseType.QRCode,\n                    issuanceId: 'pid',\n                } as OfferRequestDto,\n            },\n            uri: {\n                summary: 'URI',\n                value: {\n                    response_type: ResponseType.URI,\n                    issuanceId: 'pid',\n                } as OfferRequestDto,\n            },\n            authfixed: {\n                summary: 'Auth flow with fixed session',\n                value: {\n                    response_type: ResponseType.QRCode,\n                    issuanceId: 'pid',\n                    session: 'fd3ebf28-8ad6-4909-8a7a-a739c2c412c0',\n                } as OfferRequestDto,\n            },\n            override: {\n                summary: 'Override',\n                value: {\n                    response_type: ResponseType.QRCode,\n                    issuanceId: 'pid-none',\n                    claims: {\n                        pid: {\n                            given_name: 'Max',\n                        },\n                    },\n                } as OfferRequestDto,\n            },\n        },\n    })\n    @Post('offer')\n    async getOffer(\n        @Res() res: Response,\n        @Body() body: OfferRequestDto,\n        @Token() user: TokenPayload,\n    ) {\n        // For now, we'll just pass the body to the service as before\n        // You can modify the service later to accept user information if needed\n        const values = await this.oid4vciService.createOffer(\n            body,\n            user,\n            user.sub,\n        );\n\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader('Content-Type', 'image/png');\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IssuerMetadata.html":{"url":"interfaces/IssuerMetadata.html","title":"interface - IssuerMetadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IssuerMetadata\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/dto/issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the issuer metadata.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            issuer\n                                        \n                                \n                                \n                                        \n                                            jwks\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        issuer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        issuer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The issuer identifier, typically a URL.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwks\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwks:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { JWK } from 'jose';\n\n/**\n * Interface representing the issuer metadata.\n */\nexport interface IssuerMetadata {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    issuer: string;\n    /**\n     * The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n     */\n    jwks: {\n        /**\n         * List of keys in the JWKS.\n         */\n        keys: JWK[];\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IssuerModule.html":{"url":"modules/IssuerModule.html","title":"module - IssuerModule","body":"\n                   \n\n\n\n\n    Modules\n    IssuerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_exports\n\n\n\ncluster_IssuerModule_imports\n\n\n\ncluster_IssuerModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialConfigService\n\nCredentialConfigService\n\nIssuerModule -->\n\nCredentialConfigService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nIssuanceService\n\nIssuanceService\n\nIssuerModule -->\n\nIssuanceService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nIssuerModule -->\n\nSessionLoggerInterceptor->IssuerModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nIssuerModule -->\n\nSessionLoggerService->IssuerModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nIssuerModule -->\n\nWebhookService->IssuerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/issuer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            CredentialConfigService\n                        \n                        \n                            CredentialsService\n                        \n                        \n                            IssuanceService\n                        \n                        \n                            Oid4vciService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                        \n                            WebhookService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vciController\n                        \n                        \n                            AuthorizeController\n                        \n                        \n                            CredentialsController\n                        \n                        \n                            IssuerManagementController\n                        \n                        \n                            IssuanceController\n                        \n                        \n                            CredentialsMetadataController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            Oid4vciService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { Module } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { setGlobalConfig } from \"@openid4vc/openid4vci\";\nimport * as Joi from \"joi\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { SessionModule } from \"../session/session.module\";\nimport { SessionLoggerInterceptor } from \"../utils/logger/session-logger.interceptor\";\nimport { SessionLoggerService } from \"../utils/logger/session-logger.service\";\nimport { WebhookService } from \"../utils/webhook/webhook.service\";\nimport { Oid4vpModule } from \"../verifier/oid4vp/oid4vp.module\";\nimport { AuthorizeController } from \"./authorize/authorize.controller\";\nimport { AuthorizeService } from \"./authorize/authorize.service\";\nimport { CredentialConfigService } from \"./credentials/credential-config/credential-config.service\";\nimport { CredentialsController } from \"./credentials/credentials.controller\";\nimport { CredentialsService } from \"./credentials/credentials.service\";\nimport { CredentialConfig } from \"./credentials/entities/credential.entity\";\nimport { CredentialsMetadataController } from \"./credentials-metadata/credentials-metadata.controller\";\nimport { CredentialIssuanceBinding } from \"./issuance/entities/credential-issuance-binding.entity\";\nimport { IssuanceConfig } from \"./issuance/entities/issuance-config.entity\";\nimport { IssuanceController } from \"./issuance/issuance.controller\";\nimport { IssuanceService } from \"./issuance/issuance.service\";\nimport { IssuerManagementController } from \"./issuer-management/issuer-management.controller\";\nimport { DisplayEntity } from \"./oid4vci/entities/display.entity\";\nimport { Oid4vciController } from \"./oid4vci/oid4vci.controller\";\nimport { Oid4vciService } from \"./oid4vci/oid4vci.service\";\nimport { StatusListModule } from \"./status-list/status-list.module\";\n\nexport const ISSUER_VALIDATION_SCHEMA = {\n    PUBLIC_URL: Joi.string().default(\"http://localhost:3000\"),\n};\n\n@Module({\n    imports: [\n        CryptoModule,\n        StatusListModule,\n        Oid4vpModule,\n        SessionModule,\n        HttpModule,\n        TypeOrmModule.forFeature([\n            IssuanceConfig,\n            CredentialConfig,\n            CredentialIssuanceBinding,\n            DisplayEntity,\n        ]),\n    ],\n    controllers: [\n        Oid4vciController,\n        AuthorizeController,\n        CredentialsController,\n        IssuerManagementController,\n        IssuanceController,\n        CredentialsMetadataController,\n    ],\n    providers: [\n        AuthorizeService,\n        CredentialsService,\n        Oid4vciService,\n        SessionLoggerService,\n        SessionLoggerInterceptor,\n        IssuanceService,\n        CredentialConfigService,\n        WebhookService,\n    ],\n    exports: [AuthorizeService, Oid4vciService],\n})\nexport class IssuerModule {\n    constructor(configService: ConfigService) {\n        const unsecure = configService\n            .getOrThrow(\"PUBLIC_URL\")\n            .startsWith(\"http://\");\n        setGlobalConfig({ allowInsecureUrls: unsecure });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwksResponseDto.html":{"url":"classes/JwksResponseDto.html","title":"class - JwksResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwksResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                keys\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    An array of EC public keys in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from 'jose';\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: 'EC';\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.guard.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n    constructor(private reflector: Reflector) {\n        super();\n    }\n\n    canActivate(context: ExecutionContext) {\n        const isPublic = this.reflector.getAllAndOverride(\n            IS_PUBLIC_KEY,\n            [context.getHandler(), context.getClass()],\n        );\n        if (isPublic) {\n            return true;\n        }\n        return super.canActivate(context);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtService.html":{"url":"injectables/JwtService.html","title":"injectable - JwtService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                decodeToken\n                            \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                isUsingExternalOIDC\n                            \n                            \n                                    Async\n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        decodeToken\n                        \n                    \n                \n            \n            \n                \ndecodeToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Decode token without verification (for debugging)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         TokenPayload | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(payload: TokenPayload, options: GenerateTokenOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Generate a JWT token for integrated OAuth2 server\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                options\n                                            \n                                                            GenerateTokenOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isUsingExternalOIDC\n                        \n                    \n                \n            \n            \n                \nisUsingExternalOIDC()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:100\n                        \n                    \n\n\n            \n                \n                        Check if the service is using external OIDC provider\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:63\n                        \n                    \n\n\n            \n                \n                        Verify a JWT token (for additional validation if needed)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { decodeJwt, jwtVerify, SignJWT } from 'jose';\nimport { TokenPayload } from './token.decorator';\nimport { DEFAULT_JWT_SECRET } from './auth.module';\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject?: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {\n        if(this.configService.get('JWT_SECRET') === DEFAULT_JWT_SECRET) {\n            console.warn(\n                'Using default JWT secret. This is not secure for production environments.',\n            );\n        }\n    }\n\n    /**\n     * Generate a JWT token for integrated OAuth2 server\n     */\n    async generateToken(\n        payload: TokenPayload,\n        options: GenerateTokenOptions = {},\n    ): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                'Token generation is not available when using external OIDC provider. Use your external OIDC provider for token generation.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow('JWT_EXPIRES_IN');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: 'HS256' })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject || payload.sub)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                'Token verification is handled by external OIDC provider.',\n            );\n        }\n\n        const secret = this.configService.getOrThrow('JWT_SECRET');\n        const issuer = this.configService.getOrThrow('JWT_ISSUER');\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = (await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: ['HS256'],\n            })) as { payload: TokenPayload };\n            return payload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Decode token without verification (for debugging)\n     */\n    decodeToken(token: string): TokenPayload | null {\n        try {\n            return decodeJwt(token) as TokenPayload;\n        } catch {\n            return null;\n        }\n    }\n\n    /**\n     * Check if the service is using external OIDC provider\n     */\n    isUsingExternalOIDC(): boolean {\n        return this.configService.get('OIDC') !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, \"jwt\")\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Private\n                                    Static\n                                getExternalOIDCConfig\n                            \n                            \n                                    Private\n                                    Static\n                                getIntegratedOAuth2Config\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(req: any, options?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getExternalOIDCConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getExternalOIDCConfig(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         { secretOrKeyProvider: any; jwtFromRequest: any; algorithms: {}; issuer: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getIntegratedOAuth2Config\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIntegratedOAuth2Config(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: TokenPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:85\n                        \n                    \n\n\n            \n                \n                        Validate the JWT payload. It will also check if the client is set up.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The JWT payload\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise<>\n\n                        \n                            \n                                The validated payload or an error\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { passportJwtSecret } from \"jwks-rsa\";\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\nimport { ClientService } from \"./client.service\";\nimport { TokenPayload } from \"./token.decorator\";\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, \"jwt\") {\n    constructor(\n        private configService: ConfigService,\n        private clientService: ClientService,\n    ) {\n        const useExternalOIDC = configService.get(\"OIDC\");\n\n        const config = useExternalOIDC\n            ? JwtStrategy.getExternalOIDCConfig(configService)\n            : JwtStrategy.getIntegratedOAuth2Config(configService);\n        super(config);\n    }\n\n    // Override authenticate to add debugging\n    authenticate(req: any, options?: any) {\n        return super.authenticate(req, {\n            ...options,\n            failWithError: true, // This will throw errors instead of just returning 401\n        });\n    }\n\n    private static getExternalOIDCConfig(configService: ConfigService) {\n        const keycloakIssuerUrl = configService.get(\n            \"KEYCLOAK_INTERNAL_ISSUER_URL\",\n        );\n        const jwksUri = `${keycloakIssuerUrl}/protocol/openid-connect/certs`;\n\n        return {\n            secretOrKeyProvider: passportJwtSecret({\n                cache: true,\n                rateLimit: true,\n                jwksRequestsPerMinute: 5,\n                jwksUri: jwksUri,\n                handleSigningKeyError: (err, cb) => {\n                    console.error(\"❌ Keycloak JWKS error:\", err);\n                    if (err instanceof Error) {\n                        return cb(err);\n                    }\n                    return cb(\n                        new Error(\n                            \"Could not get the signing key from Keycloak\",\n                        ),\n                    );\n                },\n            }),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: [configService.get(\"KEYCLOAK_ALGORITHM\")],\n            issuer: keycloakIssuerUrl,\n        };\n    }\n\n    private static getIntegratedOAuth2Config(\n        configService: ConfigService,\n    ): any {\n        const config = {\n            secretOrKey: configService.get(\"JWT_SECRET\"),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: [\"HS256\"], // Using symmetric key for integrated OAuth2\n            ignoreExpiration: false, // Ensure tokens expire\n        };\n\n        // Add issuer validation only if JWT_ISSUER is configured\n        const issuer = configService.get(\"JWT_ISSUER\");\n        if (issuer) {\n            (config as any).issuer = issuer;\n        }\n\n        return config;\n    }\n\n    /**\n     * Validate the JWT payload. It will also check if the client is set up.\n     * @param payload The JWT payload\n     * @returns The validated payload or an error\n     */\n    async validate(payload: TokenPayload): Promise {\n        const useExternalOIDC =\n            this.configService.get(\"OIDC\") !== undefined;\n\n        const sub = useExternalOIDC ? (payload as any).azp : payload.sub;\n\n        await this.clientService.isSetUp(sub);\n\n        return { sub };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Key.html":{"url":"classes/Key.html","title":"class - Key","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Key\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-import.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        JWK\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                alg\n                            \n                            \n                                    \n                                crv\n                            \n                            \n                                    \n                                d\n                            \n                            \n                                    \n                                kid\n                            \n                            \n                                    \n                                kty\n                            \n                            \n                                    \n                                x\n                            \n                            \n                                    \n                                y\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        alg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        crv\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        d\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        kid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        kty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(['EC'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        x\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        y\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsEnum, IsObject, IsOptional, IsString } from 'class-validator';\nimport { JWK } from 'jose';\n\nclass Key implements JWK {\n    @IsString()\n    kid: string; // Key ID\n    @IsEnum(['EC'])\n    kty: string; // Key Type\n    @IsString()\n    x: string; // X coordinate for EC keys\n    @IsString()\n    y: string; // Y coordinate for EC keys\n    @IsString()\n    crv: string; // Curve name for EC keys\n    @IsString()\n    d: string; // Private key value for EC keys\n    @IsString()\n    alg: string; // Algorithm used with the key\n}\n\n/**\n * DTO for importing a key.\n */\nexport class KeyImportDto {\n    /**\n     * The private key in JWK format.\n     */\n    @IsObject()\n    @Type(() => Key)\n    privateKey: Key;\n\n    /**\n     * Optional certificate in PEM format.\n     */\n    @IsString()\n    @IsOptional()\n    crt?: string;\n\n    /**\n     * Description of the key.\n     */\n    @IsString()\n    @IsOptional()\n    description?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/KeyController.html":{"url":"controllers/KeyController.html","title":"controller - KeyController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  KeyController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/key.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                key\n            \n\n\n            \n                Description\n            \n            \n                KeyController is responsible for managing keys in the system.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                addKey\n                            \n                            \n                                    \n                                deleteKey\n                            \n                            \n                                    \n                                getKeys\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        addKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    addKey(token: TokenPayload, body: KeyImportDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:49\n                        \n                    \n\n\n            \n                \n                        Add a new key to the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            KeyImportDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteKey(token: TokenPayload, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:64\n                        \n                    \n\n\n            \n                \n                        Delete a key from the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getKeys\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKeys(token: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:37\n                        \n                    \n\n\n            \n                \n                        Get all keys for the tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Inject,\n    Param,\n    Post,\n    UseGuards,\n} from '@nestjs/common';\nimport { ApiSecurity } from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../../auth/auth.guard';\nimport { Token, TokenPayload } from '../../auth/token.decorator';\nimport { CryptoService } from '../crypto.service';\nimport { KeyImportDto } from './dto/key-import.dto';\nimport { CertEntity } from './entities/cert.entity';\nimport { KeyService } from './key.service';\n\n/**\n * KeyController is responsible for managing keys in the system.\n */\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2')\n@Controller('key')\nexport class KeyController {\n    constructor(\n        @Inject('KeyService') public readonly keyService: KeyService,\n        private cryptoService: CryptoService,\n    ) {}\n\n    /**\n     * Get all keys for the tenant.\n     * @param token\n     * @returns\n     */\n    @Get()\n    getKeys(@Token() token: TokenPayload): Promise {\n        const tenantId = token.sub;\n        return this.cryptoService.getCerts(tenantId);\n    }\n\n    /**\n     * Add a new key to the key service.\n     * @param token\n     * @param body\n     * @returns\n     */\n    @Post()\n    async addKey(\n        @Token() token: TokenPayload,\n        @Body() body: KeyImportDto,\n    ): Promise {\n        const tenantId = token.sub;\n        const id = await this.cryptoService.importKey(tenantId, body);\n        return { id };\n    }\n\n    /**\n     * Delete a key from the key service.\n     * @param token\n     * @param id\n     */\n    @Delete(':id')\n    deleteKey(@Token() token: TokenPayload, @Param('id') id: string) {\n        return this.cryptoService.deleteKey(token.sub, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/KeyEntity.html":{"url":"entities/KeyEntity.html","title":"entity - KeyEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  KeyEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/entities/keys.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                key\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                usage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:15\n                        \n                    \n\n            \n                \n                    Unique identifier for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JWK\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:27\n                        \n                    \n\n            \n                \n                    The key material.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:21\n                        \n                    \n\n            \n                \n                    Tenant ID for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        usage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KeyUsage\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {default: 'sign'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:33\n                        \n                    \n\n            \n                \n                    The usage type of the key.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { JWK } from \"jose\";\nimport { Column, Entity } from \"typeorm\";\n\n/**\n * Key usage types.\n */\nexport type KeyUsage = \"sign\" | \"encrypt\";\n\n@Entity()\nexport class KeyEntity {\n    /**\n     * Unique identifier for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    id: string;\n\n    /**\n     * Tenant ID for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The key material.\n     */\n    @Column(\"json\")\n    key: JWK;\n\n    /**\n     * The usage type of the key.\n     */\n    @Column(\"varchar\", { default: \"sign\" })\n    usage: KeyUsage;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyImportDto.html":{"url":"classes/KeyImportDto.html","title":"class - KeyImportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyImportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-import.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for importing a key.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                crt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                privateKey\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        crt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:38\n                        \n                    \n\n            \n                \n                    Optional certificate in PEM format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:45\n                        \n                    \n\n            \n                \n                    Description of the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        privateKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Key\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:31\n                        \n                    \n\n            \n                \n                    The private key in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsEnum, IsObject, IsOptional, IsString } from 'class-validator';\nimport { JWK } from 'jose';\n\nclass Key implements JWK {\n    @IsString()\n    kid: string; // Key ID\n    @IsEnum(['EC'])\n    kty: string; // Key Type\n    @IsString()\n    x: string; // X coordinate for EC keys\n    @IsString()\n    y: string; // Y coordinate for EC keys\n    @IsString()\n    crv: string; // Curve name for EC keys\n    @IsString()\n    d: string; // Private key value for EC keys\n    @IsString()\n    alg: string; // Algorithm used with the key\n}\n\n/**\n * DTO for importing a key.\n */\nexport class KeyImportDto {\n    /**\n     * The private key in JWK format.\n     */\n    @IsObject()\n    @Type(() => Key)\n    privateKey: Key;\n\n    /**\n     * Optional certificate in PEM format.\n     */\n    @IsString()\n    @IsOptional()\n    crt?: string;\n\n    /**\n     * Description of the key.\n     */\n    @IsString()\n    @IsOptional()\n    description?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KeyModule.html":{"url":"modules/KeyModule.html","title":"module - KeyModule","body":"\n                   \n\n\n\n\n    Modules\n    KeyModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/key/key.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.module.ts:34\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { HttpModule, HttpService } from \"@nestjs/axios\";\nimport { DynamicModule, Global, Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { getRepositoryToken, TypeOrmModule } from \"@nestjs/typeorm\";\nimport * as Joi from \"joi\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { FileSystemKeyService } from \"./adapters/filesystem-key.service\";\nimport { VaultKeyService } from \"./adapters/vault-key.service\";\nimport { CryptoImplementatationModule } from \"./crypto-implementation/crypto-implementation.module\";\nimport { CryptoImplementationService } from \"./crypto-implementation/crypto-implementation.service\";\nimport { CertEntity } from \"./entities/cert.entity\";\nimport { KeyEntity } from \"./entities/keys.entity\";\n\nexport const KEY_VALIDATION_SCHEMA = {\n    KM_TYPE: Joi.string().valid(\"file\", \"vault\").default(\"file\"),\n\n    // Vault-related config\n    VAULT_URL: Joi.string().uri().when(\"KM_TYPE\", {\n        is: \"vault\",\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n    VAULT_TOKEN: Joi.string().when(\"KM_TYPE\", {\n        is: \"vault\",\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n};\n\n@Global()\n@Module({})\nexport class KeyModule {\n    static forRoot(): DynamicModule {\n        return {\n            module: KeyModule,\n            imports: [\n                HttpModule,\n                ConfigModule,\n                CryptoImplementatationModule,\n                TypeOrmModule.forFeature([CertEntity, KeyEntity]),\n            ],\n            providers: [\n                {\n                    provide: \"KeyService\",\n                    useFactory: (\n                        configService: ConfigService,\n                        httpService: HttpService,\n                        cryptoService: CryptoImplementationService,\n                        certRepository: Repository,\n                        keyRepository: Repository,\n                    ) => {\n                        const kmType = configService.get(\n                            \"KM_TYPE\",\n                        );\n                        if (kmType === \"vault\") {\n                            return new VaultKeyService(\n                                httpService,\n                                configService,\n                                cryptoService,\n                                certRepository,\n                            );\n                        }\n\n                        return new FileSystemKeyService(\n                            configService,\n                            cryptoService,\n                            certRepository,\n                            keyRepository,\n                        );\n                    },\n                    inject: [\n                        ConfigService,\n                        HttpService,\n                        CryptoImplementationService,\n                        getRepositoryToken(CertEntity),\n                        getRepositoryToken(KeyEntity),\n                    ],\n                },\n            ],\n            exports: [\"KeyService\"],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyObj.html":{"url":"classes/KeyObj.html","title":"class - KeyObj","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyObj\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-object.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a key entity with its unique identifier, public key, and certificate.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                crt\n                            \n                            \n                                id\n                            \n                            \n                                publicKey\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        crt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-object.dto.ts:19\n                        \n                    \n\n            \n                \n                    Certificate in PEM format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-object.dto.ts:11\n                        \n                    \n\n            \n                \n                    Unique identifier for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        publicKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EC_Public\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-object.dto.ts:15\n                        \n                    \n\n            \n                \n                    Public key in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EC_Public } from '../../../well-known/dto/jwks-response.dto';\n\n/**\n * Represents a key entity with its unique identifier, public key, and certificate.\n */\n\nexport class KeyObj {\n    /**\n     * Unique identifier for the key.\n     */\n    id: string;\n    /**\n     * Public key in JWK format.\n     */\n    publicKey: EC_Public;\n    /**\n     * Certificate in PEM format.\n     */\n    crt: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyResponseDto.html":{"url":"classes/KeyResponseDto.html","title":"class - KeyResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                keys\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EC_Public[]\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EC_Public } from '../../../well-known/dto/jwks-response.dto';\n\nexport class KeyResponseDto {\n    keys: EC_Public[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyService.html":{"url":"classes/KeyService.html","title":"class - KeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface for a key service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                create\n                            \n                            \n                                    Protected\n                                getCertificate\n                            \n                            \n                                    Abstract\n                                getKid\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                import\n                            \n                            \n                                    Abstract\n                                init\n                            \n                            \n                                    Abstract\n                                signer\n                            \n                            \n                                    Abstract\n                                signJWT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, certRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/key.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        certRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(tenantId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Creates a new keypair\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                key id of the generated key.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCertificate(tenantId: string, keyId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:86\n                        \n                    \n\n\n            \n                \n                        Get the certificate for the given key id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getKid\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKid(tenantId: string, type?: CertificateType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:50\n                        \n                    \n\n\n            \n                \n                        Get the key id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                            CertificateType\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Get the public key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"pem\" | \"jwk\", tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"pem\" | \"jwk\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import(tenantId: string, body: KeyImportDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:38\n                        \n                    \n\n\n            \n                \n                        Import a key into the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            KeyImportDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:24\n                        \n                    \n\n\n            \n                \n                        Initialize the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                key id of the initialized key.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signer\n                        \n                    \n                \n            \n            \n                \n                        \n                    signer(tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Get the callback for the signer function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JWTPayload, header: JoseHeaderParameters, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JoseHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConflictException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Signer } from '@sd-jwt/types';\nimport { JoseHeaderParameters, JWK, JWTPayload } from 'jose';\nimport { Repository } from 'typeorm';\nimport { KeyImportDto } from './dto/key-import.dto';\nimport { KeyObj } from './dto/key-object.dto';\nimport { CertEntity, CertificateType } from './entities/cert.entity';\n\n/**\n * Generic interface for a key service\n */\nexport abstract class KeyService {\n    constructor(\n        protected configService: ConfigService,\n        protected certRepository: Repository,\n    ) {}\n\n    /**\n     * Initialize the key service\n     * @param tenantId\n     * @returns key id of the initialized key.\n     */\n    abstract init(tenantId): Promise;\n\n    /**\n     * Creates a new keypair\n     * @param tenantId\n     * @return key id of the generated key.\n     */\n    abstract create(tenantId): Promise;\n\n    /**\n     * Import a key into the key service.\n     * @param tenantId\n     * @param body\n     */\n    abstract import(tenantId: string, body: KeyImportDto): Promise;\n\n    /**\n     * Get the callback for the signer function\n     * @param tenantId\n     */\n    abstract signer(tenantId: string, keyId?: string): Promise;\n\n    /**\n     * Get the key id\n     * @returns\n     */\n    abstract getKid(tenantId: string, type?: CertificateType): Promise;\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    abstract getPublicKey(\n        type: 'jwk',\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n    abstract getPublicKey(\n        type: 'pem',\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n    abstract getPublicKey(\n        type: 'pem' | 'jwk',\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n\n    //TODO: this can be handled via the signer callback\n    abstract signJWT(\n        payload: JWTPayload,\n        header: JoseHeaderParameters,\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n\n    /**\n     * Get the certificate for the given key id.\n     * @param tenantId\n     * @param keyId\n     * @returns\n     */\n    protected getCertificate(tenantId: string, keyId: string): Promise {\n        return this.certRepository\n            .findOneByOrFail({\n                tenantId,\n                id: keyId,\n            })\n            .then(\n                (cert) => cert.crt,\n                () => {\n                    throw new ConflictException('Certificate not found');\n                },\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocalFileStorage.html":{"url":"classes/LocalFileStorage.html","title":"class - LocalFileStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocalFileStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/adapters/local.storage.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            FileStorage\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                exists\n                            \n                            \n                                getStream\n                            \n                            \n                                    Async\n                                put\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(baseDir: string)\n                    \n                \n                        \n                            \n                                Defined in src/storage/adapters/local.storage.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        baseDir\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exists\n                        \n                    \n                \n            \n            \n                \nexists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStream\n                        \n                    \n                \n            \n            \n                \ngetStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        put\n                        \n                    \n                \n            \n            \n                \n                        \n                    put(key: string, body: Buffer | Readable, opts?: PutOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        Buffer | Readable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            PutOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    createReadStream,\n    createWriteStream,\n    existsSync,\n    mkdirSync,\n    rmdirSync,\n    statSync,\n} from \"fs\";\nimport { dirname, join } from \"path\";\nimport { Readable } from \"stream\";\nimport { FileStorage, PutOptions, StoredObject } from \"../storage.types\";\n\nexport class LocalFileStorage implements FileStorage {\n    constructor(private baseDir: string) {}\n\n    async put(\n        key: string,\n        body: Buffer | Readable,\n        opts?: PutOptions,\n    ): Promise {\n        const fullPath = join(this.baseDir, key);\n        mkdirSync(dirname(fullPath), { recursive: true });\n\n        await new Promise((resolve, reject) => {\n            const write = createWriteStream(fullPath);\n            const src = body instanceof Readable ? body : Readable.from(body);\n            src.pipe(write)\n                .on(\"finish\", () => resolve())\n                .on(\"error\", reject);\n        });\n\n        const st = statSync(fullPath);\n\n        return { key, size: st.size, contentType: opts?.contentType };\n    }\n\n    getStream(key: string) {\n        const fullPath = join(this.baseDir, key);\n        return Promise.resolve({ stream: createReadStream(fullPath) });\n    }\n\n    delete(key: string) {\n        return Promise.resolve(\n            rmdirSync(join(this.baseDir, key), { recursive: true }),\n        );\n    }\n\n    exists(key: string) {\n        return Promise.resolve(existsSync(join(this.baseDir, key)));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerConfigService.html":{"url":"injectables/LoggerConfigService.html","title":"injectable - LoggerConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/logger-config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing logger configuration\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getConfiguration\n                            \n                            \n                                getLogFormat\n                            \n                            \n                                getLogLevel\n                            \n                            \n                                isDebugModeEnabled\n                            \n                            \n                                isHttpLoggerEnabled\n                            \n                            \n                                isSessionLoggerEnabled\n                            \n                            \n                                    Private\n                                loadConfiguration\n                            \n                            \n                                    Private\n                                parseLogLevel\n                            \n                            \n                                reloadConfiguration\n                            \n                            \n                                shouldEnableAutoLogging\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/logger-config.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getConfiguration\n                        \n                    \n                \n            \n            \n                \ngetConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         LoggerConfiguration\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLogFormat\n                        \n                    \n                \n            \n            \n                \ngetLogFormat()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     \"json\" | \"pretty\"\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLogLevel\n                        \n                    \n                \n            \n            \n                \ngetLogLevel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     LogLevel\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDebugModeEnabled\n                        \n                    \n                \n            \n            \n                \nisDebugModeEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isHttpLoggerEnabled\n                        \n                    \n                \n            \n            \n                \nisHttpLoggerEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSessionLoggerEnabled\n                        \n                    \n                \n            \n            \n                \nisSessionLoggerEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parseLogLevel\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseLogLevel(level: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                level\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     LogLevel\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reloadConfiguration\n                        \n                    \n                \n            \n            \n                \nreloadConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:86\n                        \n                    \n\n\n            \n                \n                        Hot reload configuration from environment\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        shouldEnableAutoLogging\n                        \n                    \n                \n            \n            \n                \nshouldEnableAutoLogging()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Check if automatic HTTP request/response logging should be enabled\nThis is used by the LoggerModule configuration\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LoggerConfiguration\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/logger-config.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, LogLevel } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nexport interface LoggerConfiguration {\n    level: LogLevel;\n    enableSessionLogger: boolean;\n    enableHttpLogger: boolean;\n    enableDebugMode: boolean;\n    logFormat: 'json' | 'pretty';\n}\n\n/**\n * Service for managing logger configuration\n */\n@Injectable()\nexport class LoggerConfigService {\n    private config: LoggerConfiguration;\n\n    constructor(private readonly configService: ConfigService) {\n        this.loadConfiguration();\n    }\n\n    private loadConfiguration(): void {\n        this.config = {\n            level: this.parseLogLevel(\n                this.configService.get('LOG_LEVEL', 'info'),\n            ),\n            enableSessionLogger: this.configService.get(\n                'LOG_ENABLE_SESSION_LOGGER',\n                false,\n            ),\n            enableHttpLogger: this.configService.get(\n                'LOG_ENABLE_HTTP_LOGGER',\n                false,\n            ),\n            enableDebugMode: this.configService.get(\n                'LOG_DEBUG_MODE',\n                false,\n            ),\n            logFormat: this.configService.get(\n                'LOG_FORMAT',\n                'pretty',\n            ),\n        };\n    }\n\n    private parseLogLevel(level: string): LogLevel {\n        const levels: Record = {\n            verbose: 'verbose',\n            debug: 'debug',\n            log: 'log',\n            warn: 'warn',\n            error: 'error',\n            fatal: 'fatal',\n        };\n        return levels[level.toLowerCase()] || 'log';\n    }\n\n    getConfiguration(): LoggerConfiguration {\n        return { ...this.config };\n    }\n\n    isSessionLoggerEnabled(): boolean {\n        return this.config.enableSessionLogger;\n    }\n\n    isHttpLoggerEnabled(): boolean {\n        return this.config.enableHttpLogger;\n    }\n\n    isDebugModeEnabled(): boolean {\n        return this.config.enableDebugMode;\n    }\n\n    getLogLevel(): LogLevel {\n        return this.config.level;\n    }\n\n    getLogFormat(): 'json' | 'pretty' {\n        return this.config.logFormat;\n    }\n\n    /**\n     * Hot reload configuration from environment\n     */\n    reloadConfiguration(): void {\n        this.loadConfiguration();\n    }\n\n    /**\n     * Check if automatic HTTP request/response logging should be enabled\n     * This is used by the LoggerModule configuration\n     */\n    shouldEnableAutoLogging(): boolean {\n        return this.isHttpLoggerEnabled();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoggerConfiguration.html":{"url":"interfaces/LoggerConfiguration.html","title":"interface - LoggerConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoggerConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/logger-config.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            enableDebugMode\n                                        \n                                \n                                \n                                        \n                                            enableHttpLogger\n                                        \n                                \n                                \n                                        \n                                            enableSessionLogger\n                                        \n                                \n                                \n                                        \n                                            level\n                                        \n                                \n                                \n                                        \n                                            logFormat\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enableDebugMode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableDebugMode:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableHttpLogger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableHttpLogger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableSessionLogger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableSessionLogger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:     LogLevel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     LogLevel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logFormat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logFormat:     \"json\" | \"pretty\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"json\" | \"pretty\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, LogLevel } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nexport interface LoggerConfiguration {\n    level: LogLevel;\n    enableSessionLogger: boolean;\n    enableHttpLogger: boolean;\n    enableDebugMode: boolean;\n    logFormat: 'json' | 'pretty';\n}\n\n/**\n * Service for managing logger configuration\n */\n@Injectable()\nexport class LoggerConfigService {\n    private config: LoggerConfiguration;\n\n    constructor(private readonly configService: ConfigService) {\n        this.loadConfiguration();\n    }\n\n    private loadConfiguration(): void {\n        this.config = {\n            level: this.parseLogLevel(\n                this.configService.get('LOG_LEVEL', 'info'),\n            ),\n            enableSessionLogger: this.configService.get(\n                'LOG_ENABLE_SESSION_LOGGER',\n                false,\n            ),\n            enableHttpLogger: this.configService.get(\n                'LOG_ENABLE_HTTP_LOGGER',\n                false,\n            ),\n            enableDebugMode: this.configService.get(\n                'LOG_DEBUG_MODE',\n                false,\n            ),\n            logFormat: this.configService.get(\n                'LOG_FORMAT',\n                'pretty',\n            ),\n        };\n    }\n\n    private parseLogLevel(level: string): LogLevel {\n        const levels: Record = {\n            verbose: 'verbose',\n            debug: 'debug',\n            log: 'log',\n            warn: 'warn',\n            error: 'error',\n            fatal: 'fatal',\n        };\n        return levels[level.toLowerCase()] || 'log';\n    }\n\n    getConfiguration(): LoggerConfiguration {\n        return { ...this.config };\n    }\n\n    isSessionLoggerEnabled(): boolean {\n        return this.config.enableSessionLogger;\n    }\n\n    isHttpLoggerEnabled(): boolean {\n        return this.config.enableHttpLogger;\n    }\n\n    isDebugModeEnabled(): boolean {\n        return this.config.enableDebugMode;\n    }\n\n    getLogLevel(): LogLevel {\n        return this.config.level;\n    }\n\n    getLogFormat(): 'json' | 'pretty' {\n        return this.config.logFormat;\n    }\n\n    /**\n     * Hot reload configuration from environment\n     */\n    reloadConfiguration(): void {\n        this.loadConfiguration();\n    }\n\n    /**\n     * Check if automatic HTTP request/response logging should be enabled\n     * This is used by the LoggerModule configuration\n     */\n    shouldEnableAutoLogging(): boolean {\n        return this.isHttpLoggerEnabled();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetricModule.html":{"url":"modules/MetricModule.html","title":"module - MetricModule","body":"\n                   \n\n\n\n\n    Modules\n    MetricModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/metric/metric.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrometheusModule } from '@willsoto/nestjs-prometheus';\n\n@Module({\n    imports: [\n        //TODO: add a guard to protect the metrics endpoint\n        PrometheusModule.register({\n            defaultMetrics: {\n                enabled: false,\n            },\n        }),\n    ],\n})\nexport class MetricModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotificationRequestDto.html":{"url":"classes/NotificationRequestDto.html","title":"class - NotificationRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotificationRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/notification-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                event\n                            \n                            \n                                    \n                                notification_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationEvent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(['credential_accepted', 'credential_revoked'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notification_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotificationEvent } from '@openid4vc/openid4vci';\nimport { IsEnum, IsString } from 'class-validator';\n\nexport class NotificationRequestDto {\n    @IsString()\n    notification_id: string;\n\n    @IsEnum(['credential_accepted', 'credential_revoked'])\n    event: NotificationEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OAuthController.html":{"url":"controllers/OAuthController.html","title":"controller - OAuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OAuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/oauth/oauth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                oauth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                getToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    getToken(tokenRequest: TokenRequestDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'OAuth 2.0 Token Endpoint', description: 'Obtain an access token using client credentials grant type.'})@Post('token')\n                \n            \n\n                    \n                        \n                            Defined in src/oauth/oauth.controller.ts:22\n                        \n                    \n\n\n            \n                \n                        OAuth 2.0 token endpoint for client credentials flow.\nThis endpoint allows clients to obtain access tokens using their client credentials.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tokenRequest\n                                            \n                                                            TokenRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { TokenRequestDto } from './dto/token-request.dto';\nimport { TokenResponseDto } from './dto/token-response.dto';\nimport { OAuthService } from './oauth.service';\n\n@ApiTags('OAuth 2.0')\n@Controller('oauth')\nexport class OAuthController {\n    constructor(private readonly oauthService: OAuthService) {}\n\n    /**\n     * OAuth 2.0 token endpoint for client credentials flow.\n     * This endpoint allows clients to obtain access tokens using their client credentials.\n     */\n    @ApiOperation({\n        summary: 'OAuth 2.0 Token Endpoint',\n        description:\n            'Obtain an access token using client credentials grant type.',\n    })\n    @Post('token')\n    async getToken(\n        @Body() tokenRequest: TokenRequestDto,\n    ): Promise {\n        return await this.oauthService.handleClientCredentialsGrant(\n            tokenRequest,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OAuthModule.html":{"url":"modules/OAuthModule.html","title":"module - OAuthModule","body":"\n                   \n\n\n\n\n    Modules\n    OAuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OAuthModule\n\n\n\ncluster_OAuthModule_imports\n\n\n\ncluster_OAuthModule_exports\n\n\n\ncluster_OAuthModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nOAuthModule\n\nOAuthModule\n\nOAuthModule -->\n\nCryptoModule->OAuthModule\n\n\n\n\n\nOAuthService \n\nOAuthService \n\nOAuthService  -->\n\nOAuthModule->OAuthService \n\n\n\n\n\nOAuthService\n\nOAuthService\n\nOAuthModule -->\n\nOAuthService->OAuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/oauth/oauth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OAuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OAuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OAuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport * as Joi from 'joi';\nimport { CryptoModule } from '../crypto/crypto.module';\nimport { OAuthController } from './oauth.controller';\nimport { OAuthService } from './oauth.service';\n\nexport const OAUTH_VALIDATION_SCHEMA = {\n    OAUTH_CLIENT_ID: Joi.string().optional(),\n    OAUTH_CLIENT_SECRET: Joi.string().optional(),\n};\n\n@Module({\n    imports: [CryptoModule],\n    controllers: [OAuthController],\n    providers: [OAuthService],\n    exports: [OAuthService],\n})\nexport class OAuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OAuthService.html":{"url":"injectables/OAuthService.html","title":"injectable - OAuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OAuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/oauth/oauth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                clients\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addClient\n                            \n                            \n                                    Private\n                                    Async\n                                generateAccessToken\n                            \n                            \n                                    Async\n                                handleClientCredentialsGrant\n                            \n                            \n                                hasClient\n                            \n                            \n                                    Private\n                                initializeClients\n                            \n                            \n                                removeClient\n                            \n                            \n                                    Private\n                                validateClientCredentials\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/oauth/oauth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addClient\n                        \n                    \n                \n            \n            \n                \naddClient(clientId: string, clientSecret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSecret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateAccessToken(clientId: string, scope?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                scope\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleClientCredentialsGrant\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleClientCredentialsGrant(request: TokenRequestDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                            TokenRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasClient\n                        \n                    \n                \n            \n            \n                \nhasClient(clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initializeClients\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeClients()\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeClient\n                        \n                    \n                \n            \n            \n                \nremoveClient(clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        validateClientCredentials\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateClientCredentials(clientId: string, clientSecret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSecret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        clients\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/oauth/oauth.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { CryptoService } from '../crypto/crypto.service';\nimport { TokenRequestDto } from './dto/token-request.dto';\nimport { TokenResponseDto } from './dto/token-response.dto';\n\n@Injectable()\nexport class OAuthService {\n    // In a real implementation, you'd store these securely in a database\n    private readonly clients = new Map();\n\n    constructor(\n        private readonly configService: ConfigService,\n        private readonly cryptoService: CryptoService,\n    ) {\n        // Initialize with some default clients - you can move this to configuration\n        this.initializeClients();\n    }\n\n    private initializeClients() {\n        // Add default client from environment variables if available\n        const defaultClientId =\n            this.configService.get('OAUTH_CLIENT_ID');\n        const defaultClientSecret = this.configService.get(\n            'OAUTH_CLIENT_SECRET',\n        );\n\n        if (defaultClientId && defaultClientSecret) {\n            this.clients.set(defaultClientId, defaultClientSecret);\n        }\n    }\n\n    async handleClientCredentialsGrant(\n        request: TokenRequestDto,\n    ): Promise {\n        // Validate client credentials\n        if (\n            !this.validateClientCredentials(\n                request.client_id,\n                request.client_secret,\n            )\n        ) {\n            throw new UnauthorizedException('Invalid client credentials');\n        }\n\n        // Generate access token\n        const accessToken = await this.generateAccessToken(\n            request.client_id,\n            request.scope,\n        );\n\n        return {\n            access_token: accessToken,\n            token_type: 'Bearer',\n            expires_in: 3600, // 1 hour\n            scope: request.scope || 'openid',\n        };\n    }\n\n    private validateClientCredentials(\n        clientId: string,\n        clientSecret: string,\n    ): boolean {\n        const storedSecret = this.clients.get(clientId);\n        return storedSecret === clientSecret;\n    }\n\n    private async generateAccessToken(\n        clientId: string,\n        scope?: string,\n    ): Promise {\n        const payload = {\n            sub: clientId,\n            aud: this.configService.getOrThrow('PUBLIC_URL'),\n            iss: this.configService.getOrThrow('PUBLIC_URL'),\n            scope: scope || 'openid',\n            exp: Math.floor(Date.now() / 1000) + 3600, // 1 hour from now\n            iat: Math.floor(Date.now() / 1000),\n        };\n\n        // For now, we'll use the root tenant for signing\n        // In a real implementation, you might want to use a dedicated OAuth signing key\n        const tenantId = 'root';\n        return await this.cryptoService.signJwt(\n            payload,\n            { alg: 'RS256' },\n            tenantId,\n        );\n    }\n\n    // Methods to manage clients dynamically\n    addClient(clientId: string, clientSecret: string): void {\n        this.clients.set(clientId, clientSecret);\n    }\n\n    removeClient(clientId: string): void {\n        this.clients.delete(clientId);\n    }\n\n    hasClient(clientId: string): boolean {\n        return this.clients.has(clientId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Oauth2AuthorizationServerResponse.html":{"url":"classes/Oauth2AuthorizationServerResponse.html","title":"class - Oauth2AuthorizationServerResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Oauth2AuthorizationServerResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/oauth-authorization-server-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the response from an OAuth2 authorization server.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_challenge_endpoint\n                            \n                            \n                                authorization_endpoint\n                            \n                            \n                                code_challenge_methods_supported\n                            \n                            \n                                dpop_signing_alg_values_supported\n                            \n                            \n                                issuer\n                            \n                            \n                                jwks_uri\n                            \n                            \n                                pushed_authorization_request_endpoint\n                            \n                            \n                                require_pushed_authorization_requests\n                            \n                            \n                                token_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_challenge_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:37\n                        \n                    \n\n            \n                \n                    The URL of the authorization challenge endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:13\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's authorization endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        code_challenge_methods_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:21\n                        \n                    \n\n            \n                \n                    List of supported algorithms to sign the challenge\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dpop_signing_alg_values_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:25\n                        \n                    \n\n            \n                \n                    List of supported algorithms for DPoP signing.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jwks_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:17\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pushed_authorization_request_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    The URL of the pushed authorization request endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        require_pushed_authorization_requests\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:29\n                        \n                    \n\n            \n                \n                    Indicates whether the server requires pushed authorization requests.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's token endpoint.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Oauth2AuthorizationServerResponse {\n    issuer: string;\n    /**\n     * The URL of the OAuth2 authorization server's token endpoint.\n     */\n    token_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's authorization endpoint.\n     */\n    authorization_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n     */\n    jwks_uri: string;\n    /**\n     * List of supported algorithms to sign the challenge\n     */\n    code_challenge_methods_supported: string[];\n    /**\n     * List of supported algorithms for DPoP signing.\n     */\n    dpop_signing_alg_values_supported: string[];\n    /**\n     * Indicates whether the server requires pushed authorization requests.\n     */\n    require_pushed_authorization_requests: boolean;\n    /**\n     * The URL of the pushed authorization request endpoint.\n     */\n    pushed_authorization_request_endpoint: string;\n    /**\n     * The URL of the authorization challenge endpoint.\n     */\n    authorization_challenge_endpoint: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferRequestDto.html":{"url":"classes/OfferRequestDto.html","title":"class - OfferRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                claims\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                credentialConfigurationIds\n                            \n                            \n                                    \n                                issuanceId\n                            \n                            \n                                    \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                session\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:42\n                        \n                    \n\n            \n                \n                    Override the default values for the credential claims.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credentialConfigurationIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:35\n                        \n                    \n\n            \n                \n                    Overrides the default values for the credential ids.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        issuanceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:28\n                        \n                    \n\n            \n                \n                    Issuance config id to reference the issuance configuration.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'qrcode', description: 'The type of response expected for the offer request.'})@IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:21\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:49\n                        \n                    \n\n            \n                \n                    Pre defined session id\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n    IsArray,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n    IsUUID,\n} from 'class-validator';\nimport { ResponseType } from '../../../verifier/oid4vp/dto/presentation-request.dto';\n\nexport class OfferRequestDto {\n    /**\n     * @example \"qrcode\"\n     */\n    @ApiProperty({\n        example: 'qrcode',\n        description: 'The type of response expected for the offer request.',\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Issuance config id to reference the issuance configuration.\n     * @example \"pid\"\n     */\n    @IsString()\n    issuanceId: string;\n\n    /**\n     * Overrides the default values for the credential ids.\n     */\n    @IsArray()\n    @IsOptional()\n    credentialConfigurationIds?: string[];\n\n    /**\n     * Override the default values for the credential claims.\n     */\n    @IsObject()\n    @IsOptional()\n    claims?: { [key: string]: Record };\n\n    /**\n     * Pre defined session id\n     */\n    @IsUUID()\n    @IsOptional()\n    session?: string;\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferResponse.html":{"url":"classes/OfferResponse.html","title":"class - OfferResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                session\n                            \n                            \n                                uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:53\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n    IsArray,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n    IsUUID,\n} from 'class-validator';\nimport { ResponseType } from '../../../verifier/oid4vp/dto/presentation-request.dto';\n\nexport class OfferRequestDto {\n    /**\n     * @example \"qrcode\"\n     */\n    @ApiProperty({\n        example: 'qrcode',\n        description: 'The type of response expected for the offer request.',\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Issuance config id to reference the issuance configuration.\n     * @example \"pid\"\n     */\n    @IsString()\n    issuanceId: string;\n\n    /**\n     * Overrides the default values for the credential ids.\n     */\n    @IsArray()\n    @IsOptional()\n    credentialConfigurationIds?: string[];\n\n    /**\n     * Override the default values for the credential claims.\n     */\n    @IsObject()\n    @IsOptional()\n    claims?: { [key: string]: Record };\n\n    /**\n     * Pre defined session id\n     */\n    @IsUUID()\n    @IsOptional()\n    session?: string;\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vciController.html":{"url":"controllers/Oid4vciController.html","title":"controller - Oid4vciController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Oid4vciController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/oid4vci.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/vci\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling OID4VCI (OpenID for Verifiable Credential Issuance) requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                credential\n                            \n                            \n                                    \n                                    \n                                nonce\n                            \n                            \n                                    \n                                    \n                                notifications\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credential\n                        \n                    \n                \n            \n            \n                \n                        \n                    credential(req: Request, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('credential')@SessionLogger('session', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:39\n                        \n                    \n\n\n            \n                \n                        Endpoint to issue credentials\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        nonce\n                        \n                    \n                \n            \n            \n                \n                        \n                    nonce(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('nonce')@SessionLogger('nonce', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        notifications\n                        \n                    \n                \n            \n            \n                \n                        \n                    notifications(body: NotificationRequestDto, req: Request, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('notification')@SessionLogger('notification_id', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:53\n                        \n                    \n\n\n            \n                \n                        Notification endpoint\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            NotificationRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Get,\n    Post,\n    Req,\n    UseGuards,\n    UseInterceptors,\n} from '@nestjs/common';\nimport { ApiExcludeController, ApiParam } from '@nestjs/swagger';\nimport type { CredentialResponse } from '@openid4vc/openid4vci';\nimport type { Request } from 'express';\nimport { Oid4vciService } from '../../issuer/oid4vci/oid4vci.service';\nimport { Session } from '../../session/entities/session.entity';\nimport { SessionEntity } from '../../session/session.decorator';\nimport { SessionGuard } from '../../session/session.guard';\nimport { SessionLogger } from '../../utils/logger//session-logger.decorator';\nimport { SessionLoggerInterceptor } from '../../utils/logger/session-logger.interceptor';\nimport { NotificationRequestDto } from './dto/notification-request.dto';\n\n/**\n * Controller for handling OID4VCI (OpenID for Verifiable Credential Issuance) requests.\n */\n@ApiParam({ name: 'session', required: true })\n@ApiExcludeController(process.env.SWAGGER_ALL !== 'true')\n@UseGuards(SessionGuard)\n@Controller(':session/vci')\n@UseInterceptors(SessionLoggerInterceptor)\nexport class Oid4vciController {\n    constructor(private readonly oid4vciService: Oid4vciService) {}\n\n    /**\n     * Endpoint to issue credentials\n     * @param req\n     * @returns\n     */\n    @Post('credential')\n    @SessionLogger('session', 'OID4VCI')\n    credential(\n        @Req() req: Request,\n        @SessionEntity() session: Session,\n    ): Promise {\n        return this.oid4vciService.getCredential(req, session);\n    }\n\n    /**\n     * Notification endpoint\n     * @param body\n     * @returns\n     */\n    @Post('notification')\n    @SessionLogger('notification_id', 'OID4VCI')\n    notifications(\n        @Body() body: NotificationRequestDto,\n        @Req() req: Request,\n        @SessionEntity() session: Session,\n    ) {\n        return this.oid4vciService.handleNotification(req, body, session);\n    }\n\n    @Post('nonce')\n    @SessionLogger('nonce', 'OID4VCI')\n    nonce(@SessionEntity() session: Session) {\n        return this.oid4vciService.nonceRequest(session);\n    }\n\n    //TODO: this endpoint may be relevant for the wallet attestation.\n    /* @Get('session')\n  session() {\n    console.log('Session requested');\n    //TODO store session and created at\n    const session = randomUUID();\n    return {\n      session_id: session,\n    };\n  } */\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Oid4vciService.html":{"url":"injectables/Oid4vciService.html","title":"injectable - Oid4vciService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Oid4vciService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/oid4vci.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                credentialsService\n                            \n                            \n                                    Private\n                                issuer\n                            \n                            \n                                resourceServer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createOffer\n                            \n                            \n                                    Async\n                                getCredential\n                            \n                            \n                                    Async\n                                handleNotification\n                            \n                            \n                                    Async\n                                issuerMetadata\n                            \n                            \n                                    Async\n                                nonceRequest\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                onTenantInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authzService: AuthorizeService, cryptoService: CryptoService, credentialsService: CredentialsService, configService: ConfigService, sessionService: SessionService, sessionLogger: SessionLoggerService, issuanceService: IssuanceService, webhookService: WebhookService, httpService: HttpService, displayRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:50\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authzService\n                                                  \n                                                        \n                                                                        AuthorizeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialsService\n                                                  \n                                                        \n                                                                        CredentialsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        issuanceService\n                                                  \n                                                        \n                                                                        IssuanceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        webhookService\n                                                  \n                                                        \n                                                                        WebhookService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        displayRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOffer(body: OfferRequestDto, user: TokenPayload, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:183\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            OfferRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredential\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredential(req: Request, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:267\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleNotification(req: Request, body: NotificationRequestDto, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:392\n                        \n                    \n\n\n            \n                \n                        Store the notification in the session based on the notitification id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            NotificationRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        issuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    issuerMetadata(session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        nonceRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    nonceRequest(session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:259\n                        \n                    \n\n\n            \n                \n                        Create a nonce an store it in the session entity\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \nonTenantInit(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        credentialsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialsService\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Openid4vciIssuer\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resourceServer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Oauth2ResourceServer\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/oid4vci.service.ts:50\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { readFileSync } from 'node:fs';\nimport { join } from 'node:path';\nimport { HttpService } from '@nestjs/axios';\nimport {\n    BadRequestException,\n    ConflictException,\n    Injectable,\n    OnModuleInit,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport {\n    AuthorizationServerMetadata,\n    authorizationCodeGrantIdentifier,\n    type HttpMethod,\n    Oauth2ResourceServer,\n    preAuthorizedCodeGrantIdentifier,\n    SupportedAuthenticationScheme,\n} from '@openid4vc/oauth2';\nimport {\n    type CredentialResponse,\n    type IssuerMetadataResult,\n    Openid4vciDraftVersion,\n    Openid4vciIssuer,\n} from '@openid4vc/openid4vci';\nimport type { Request } from 'express';\nimport { firstValueFrom } from 'rxjs';\nimport { Repository } from 'typeorm/repository/Repository';\nimport { v4 } from 'uuid';\nimport { TokenPayload } from '../../auth/token.decorator';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { Session, SessionStatus } from '../../session/entities/session.entity';\nimport { SessionService } from '../../session/session.service';\nimport { SessionLoggerService } from '../../utils/logger/session-logger.service';\nimport { SessionLogContext } from '../../utils/logger/session-logger-context';\nimport { WebhookService } from '../../utils/webhook/webhook.service';\nimport { AuthorizeService } from '../authorize/authorize.service';\nimport { CredentialsService } from '../credentials/credentials.service';\nimport { AuthenticationConfigHelper } from '../issuance/dto/authentication-config.helper';\nimport { IssuanceService } from '../issuance/issuance.service';\nimport { NotificationRequestDto } from './dto/notification-request.dto';\nimport { OfferRequestDto, OfferResponse } from './dto/offer-request.dto';\nimport { DisplayEntity } from './entities/display.entity';\nimport { getHeadersFromRequest } from './util';\n\n@Injectable()\nexport class Oid4vciService implements OnModuleInit {\n    private issuer: Openid4vciIssuer;\n\n    resourceServer: Oauth2ResourceServer;\n\n    constructor(\n        private readonly authzService: AuthorizeService,\n        private readonly cryptoService: CryptoService,\n        public readonly credentialsService: CredentialsService,\n        private readonly configService: ConfigService,\n        private readonly sessionService: SessionService,\n        private readonly sessionLogger: SessionLoggerService,\n        private readonly issuanceService: IssuanceService,\n        private readonly webhookService: WebhookService,\n        private readonly httpService: HttpService,\n        @InjectRepository(DisplayEntity)\n        private readonly displayRepository: Repository,\n    ) {}\n    onModuleInit() {\n        //TODO: align for tenant\n        const callbacks = this.cryptoService.getCallbackContext('');\n        this.issuer = new Openid4vciIssuer({\n            callbacks,\n        });\n        this.resourceServer = new Oauth2ResourceServer({\n            callbacks,\n        });\n    }\n\n    onTenantInit(tenantId: string) {\n        return this.displayRepository.save({\n            tenantId,\n            value: [\n                {\n                    name: 'EUDI Wallet dev',\n                    locale: 'de-DE',\n                    logo: {\n                        uri: '/issuer.png',\n                        url: '/issuer.png',\n                    },\n                },\n            ],\n        });\n    }\n\n    async issuerMetadata(session: Session): Promise {\n        const credential_issuer = `${this.configService.getOrThrow(\n            'PUBLIC_URL',\n        )}/${session.id}`;\n\n        const display = await this.displayRepository\n            .findOneByOrFail({\n                tenantId: session.tenantId,\n            })\n            .then((res) => res.value);\n\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                session.issuanceId as string,\n                session.tenantId,\n            );\n\n        let authorizationServerMetadata: AuthorizationServerMetadata;\n\n        let authServer: string;\n\n        if (\n            AuthenticationConfigHelper.isAuthUrlAuth(\n                issuanceConfig.authenticationConfig,\n            )\n        ) {\n            authServer = issuanceConfig.authenticationConfig.config.url;\n            // fetch the authorization server metadata\n            authorizationServerMetadata = await firstValueFrom(\n                this.httpService.get(\n                    `${authServer}/.well-known/oauth-authorization-server`,\n                ),\n            ).then(\n                (response) => response.data,\n                (err) => {\n                    const logContext: SessionLogContext = {\n                        sessionId: session.id,\n                        tenantId: session.tenantId,\n                        flowType: 'OID4VCI',\n                        stage: 'credential_request',\n                    };\n                    this.sessionLogger.logFlowError(logContext, err);\n                    throw new BadRequestException(\n                        'Failed to fetch authorization server metadata',\n                    );\n                },\n            );\n        } else {\n            authServer =\n                this.configService.getOrThrow('PUBLIC_URL') +\n                `/${session.id}`;\n            authorizationServerMetadata =\n                this.authzService.authzMetadata(session);\n        }\n\n        let credentialIssuer = this.issuer.createCredentialIssuerMetadata({\n            credential_issuer,\n            credential_configurations_supported:\n                await this.credentialsService.getCredentialConfigurationSupported(\n                    session,\n                    issuanceConfig,\n                ),\n            credential_endpoint: `${credential_issuer}/vci/credential`,\n            authorization_servers: [authServer],\n            authorization_server: authServer,\n            notification_endpoint: `${credential_issuer}/vci/notification`,\n            nonce_endpoint: `${credential_issuer}/vci/nonce`,\n            display,\n        });\n\n        if (issuanceConfig.batch_size) {\n            credentialIssuer.batch_credential_issuance = {\n                batch_size: issuanceConfig.batch_size,\n            };\n        }\n\n        //replace placeholders in the issuer metadata\n        credentialIssuer = JSON.parse(\n            JSON.stringify(credentialIssuer).replace(\n                //g,\n                this.configService.getOrThrow('PUBLIC_URL'),\n            ),\n        );\n\n        return {\n            credentialIssuer,\n            authorizationServers: [authorizationServerMetadata],\n            originalDraftVersion: Openid4vciDraftVersion.Draft14,\n        } as const satisfies IssuerMetadataResult;\n    }\n\n    async createOffer(\n        body: OfferRequestDto,\n        user: TokenPayload,\n        tenantId: string,\n    ): Promise {\n        const issuanceConfig = await this.issuanceService\n            .getIssuanceConfigurationById(body.issuanceId, tenantId)\n            .catch(() => {\n                throw new BadRequestException(\n                    `Issuance configuration with ID ${body.issuanceId} not found`,\n                );\n            });\n        const credentialConfigurationIds =\n            body.credentialConfigurationIds ||\n            issuanceConfig.credentialIssuanceBindings.map(\n                (config) => config.credentialConfigId,\n            );\n\n        let authorization_code: string | undefined;\n        let grants: any;\n        const issuer_state = body.session ?? v4();\n        if (issuanceConfig.authenticationConfig.method === 'none') {\n            authorization_code = v4();\n            grants = {\n                [preAuthorizedCodeGrantIdentifier]: {\n                    'pre-authorized_code': authorization_code,\n                },\n            };\n        } else {\n            grants = {\n                [authorizationCodeGrantIdentifier]: {\n                    issuer_state,\n                },\n            };\n        }\n\n        const session = await this.sessionService.create({\n            id: issuer_state,\n            credentialPayload: body,\n            tenantId: user.sub,\n            issuanceId: body.issuanceId,\n            authorization_code,\n        });\n\n        const issuerMetadata = await this.issuerMetadata(session);\n\n        return this.issuer\n            .createCredentialOffer({\n                credentialConfigurationIds,\n                grants,\n                issuerMetadata,\n            })\n            .then(\n                async (offer) => {\n                    await this.sessionService.add(issuer_state, {\n                        offer: offer.credentialOfferObject as any,\n                        offerUrl: offer.credentialOffer,\n                    });\n                    return {\n                        session: issuer_state,\n                        uri: offer.credentialOffer,\n                    } as OfferResponse;\n                },\n                () => {\n                    throw new ConflictException(\n                        `Invalid credential configuration ID`,\n                    );\n                },\n            );\n    }\n\n    /**\n     * Create a nonce an store it in the session entity\n     * @param session\n     * @returns\n     */\n    async nonceRequest(session: Session) {\n        const nonce = v4();\n        await this.sessionService.add(session.id, { nonce });\n        return {\n            c_nonce: nonce,\n        };\n    }\n\n    async getCredential(\n        req: Request,\n        session: Session,\n    ): Promise {\n        const issuerMetadata = await this.issuerMetadata(session);\n        const parsedCredentialRequest = this.issuer.parseCredentialRequest({\n            issuerMetadata,\n            credentialRequest: req.body as Record,\n        });\n\n        if (parsedCredentialRequest?.proofs?.jwt === undefined) {\n            throw new Error('Invalid credential request');\n        }\n\n        const protocol = new URL(\n            this.configService.getOrThrow('PUBLIC_URL'),\n        ).protocol;\n\n        const headers = getHeadersFromRequest(req);\n\n        const { tokenPayload } =\n            await this.resourceServer.verifyResourceRequest({\n                authorizationServers: issuerMetadata.authorizationServers,\n                request: {\n                    url: `${protocol}//${req.host}${req.url}`,\n                    method: req.method as HttpMethod,\n                    headers,\n                },\n                //TODO: Keycloak is setting aud to `account`, but it should be the value of resource server\n                resourceServer:\n                    issuerMetadata.credentialIssuer.credential_issuer,\n                allowedAuthenticationSchemes: [\n                    SupportedAuthenticationScheme.DPoP,\n                    SupportedAuthenticationScheme.Bearer,\n                ],\n            });\n\n        if (tokenPayload.sub !== session.id) {\n            throw new BadRequestException('Session not found');\n        }\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: session.id,\n            tenantId: session.tenantId,\n            flowType: 'OID4VCI',\n            stage: 'credential_request',\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            credentialConfigurationId:\n                parsedCredentialRequest.credentialConfigurationId,\n            proofCount: parsedCredentialRequest.proofs?.jwt?.length || 0,\n        });\n\n        try {\n            const credentials: string[] = [];\n            const expectedNonce =\n                (tokenPayload.nonce as string) || session.nonce;\n            if (expectedNonce === undefined) {\n                throw new BadRequestException('Nonce not found');\n            }\n            for (const jwt of parsedCredentialRequest.proofs.jwt) {\n                const verifiedProof =\n                    await this.issuer.verifyCredentialRequestJwtProof({\n                        //check if this is correct or if the passed nonce is validated.\n                        expectedNonce,\n                        issuerMetadata: await this.issuerMetadata(session),\n                        jwt,\n                    });\n                const cnf = verifiedProof.signer.publicJwk;\n                const cred = await this.credentialsService.getCredential(\n                    parsedCredentialRequest.credentialConfigurationId as string,\n                    cnf as any,\n                    session,\n                );\n                credentials.push(cred);\n\n                this.sessionLogger.logCredentialIssuance(\n                    logContext,\n                    parsedCredentialRequest.credentialConfigurationId as string,\n                    {\n                        credentialSize: cred.length,\n                        proofVerified: true,\n                    },\n                );\n            }\n\n            const notificationId = v4();\n            session.notifications.push({\n                id: notificationId,\n                credentialConfigurationId:\n                    parsedCredentialRequest.credentialConfigurationId as string,\n            });\n            await this.sessionService.add(session.id, {\n                notifications: session.notifications,\n            });\n\n            this.sessionLogger.logFlowComplete(logContext, {\n                credentialsIssued: credentials.length,\n                notificationId,\n            });\n\n            return this.issuer.createCredentialResponse({\n                credentials,\n                credentialRequest: parsedCredentialRequest,\n                cNonce: tokenPayload.nonce as string,\n                cNonceExpiresInSeconds: 3600,\n                //this should be stored in the session in case this endpoint is requested multiple times, but the response is differnt.\n                notificationId,\n            });\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                credentialConfigurationId:\n                    parsedCredentialRequest.credentialConfigurationId,\n            });\n            throw error;\n        }\n    }\n\n    /**\n     * Store the notification in the session based on the notitification id.\n     * @param req\n     * @param body\n     */\n    async handleNotification(\n        req: Request,\n        body: NotificationRequestDto,\n        session: Session,\n    ) {\n        const issuerMetadata = await this.issuerMetadata(session);\n        const headers = getHeadersFromRequest(req);\n        const protocol = new URL(\n            this.configService.getOrThrow('PUBLIC_URL'),\n        ).protocol;\n        const { tokenPayload } =\n            await this.resourceServer.verifyResourceRequest({\n                authorizationServers: issuerMetadata.authorizationServers,\n                request: {\n                    url: `${protocol}//${req.host}${req.url}`,\n                    method: req.method as HttpMethod,\n                    headers,\n                },\n                resourceServer:\n                    issuerMetadata.credentialIssuer.credential_issuer,\n                allowedAuthenticationSchemes: [\n                    SupportedAuthenticationScheme.DPoP,\n                ],\n            });\n\n        if (session.id !== tokenPayload.sub) {\n            throw new BadRequestException('Session not found');\n        }\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: session.id,\n            tenantId: session.tenantId,\n            flowType: 'OID4VCI',\n            stage: 'notification',\n        };\n\n        try {\n            const index = session.notifications.findIndex(\n                (notification) => notification.id === body.notification_id,\n            );\n            if (index === -1) {\n                throw new BadRequestException(\n                    'No notifications found in session',\n                );\n            }\n\n            session.notifications[index].event = body.event;\n            await this.sessionService.add(session.id, {\n                notifications: session.notifications,\n            });\n\n            this.sessionLogger.logNotification(logContext, body.event || '', {\n                notificationId: body.notification_id,\n                notificationIndex: index,\n            });\n\n            //check for the webhook and send it.\n            //TODO: in case multiple batches are included, check if each time the notification endpoint is triggered. Also when multiple credentials got offered in the request, try to bundle them maybe?\n            if (session.notifyWebhook) {\n                await this.webhookService.sendWebhookNotification(\n                    session,\n                    logContext,\n                    session.notifications[index],\n                );\n            }\n            const state: SessionStatus =\n                body.event === 'credential_accepted' ? 'completed' : 'failed';\n            await this.sessionService.setState(session, state);\n        } catch (error) {\n            this.sessionLogger.logSessionError(\n                logContext,\n                error as Error,\n                'Failed to handle notification',\n                {\n                    notificationId: body.notification_id,\n                },\n            );\n            throw error;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vpController.html":{"url":"controllers/Oid4vpController.html","title":"controller - Oid4vpController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Oid4vpController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/oid4vp\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getRequestWithSession\n                            \n                            \n                                    \n                                    \n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getRequestWithSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRequestWithSession(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@SessionLogger('session', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:42\n                        \n                    \n\n\n            \n                \n                        Returns the authorization request for a given requestId and session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@SessionLogger('session', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:53\n                        \n                    \n\n\n            \n                \n                        Endpoint to receive the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Get,\n    Post,\n    UseGuards,\n    UseInterceptors,\n} from '@nestjs/common';\nimport { ApiExcludeController, ApiParam } from '@nestjs/swagger';\nimport { Session } from '../../session/entities/session.entity';\nimport { SessionEntity } from '../../session/session.decorator';\nimport { SessionGuard } from '../../session/session.guard';\nimport { SessionLogger } from '../../utils/logger/session-logger.decorator';\nimport { SessionLoggerInterceptor } from '../../utils/logger/session-logger.interceptor';\nimport { AuthorizationResponse } from './dto/authorization-response.dto';\nimport { Oid4vpService } from './oid4vp.service';\n\n/**\n * Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n */\n@Controller(':session/oid4vp')\n@UseGuards(SessionGuard)\n@UseInterceptors(SessionLoggerInterceptor)\n@ApiParam({ name: 'session', required: true })\n@ApiExcludeController(process.env.SWAGGER_ALL !== 'true')\nexport class Oid4vpController {\n    /**\n     * Constructor for the Oid4vpController.\n     * @param oid4vpService - Instance of Oid4vpService for handling OID4VP operations.\n     */\n    constructor(private readonly oid4vpService: Oid4vpService) {}\n\n    /**\n     * Returns the authorization request for a given requestId and session.\n     * @param requestId\n     * @param session\n     * @returns\n     */\n    //TODO: we just need the session that will include the requestId.\n    @Get()\n    @SessionLogger('session', 'OID4VP')\n    getRequestWithSession(@SessionEntity() session: Session) {\n        return this.oid4vpService.createAuthorizationRequest(session);\n    }\n\n    /**\n     * Endpoint to receive the response from the wallet.\n     * @param body\n     * @returns\n     */\n    @Post()\n    @SessionLogger('session', 'OID4VP')\n    getResponse(\n        @Body() body: AuthorizationResponse,\n        @SessionEntity() session: Session,\n    ) {\n        return this.oid4vpService.getResponse(body, session);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/Oid4vpModule.html":{"url":"modules/Oid4vpModule.html","title":"module - Oid4vpModule","body":"\n                   \n\n\n\n\n    Modules\n    Oid4vpModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_imports\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nOid4vpModule -->\n\nSessionLoggerService->Oid4vpModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nOid4vpModule -->\n\nWebhookService->Oid4vpModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            Oid4vpService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                        \n                            WebhookService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vpController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            Oid4vpService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from '@nestjs/axios';\nimport { forwardRef, Module } from '@nestjs/common';\nimport { CryptoModule } from '../../crypto/crypto.module';\nimport { RegistrarModule } from '../../registrar/registrar.module';\nimport { SessionModule } from '../../session/session.module';\nimport { SessionLoggerInterceptor } from '../../utils/logger/session-logger.interceptor';\nimport { SessionLoggerService } from '../../utils/logger/session-logger.service';\nimport { WebhookService } from '../../utils/webhook/webhook.service';\nimport { PresentationsModule } from '../presentations/presentations.module';\nimport { Oid4vpController } from './oid4vp.controller';\nimport { Oid4vpService } from './oid4vp.service';\n\n@Module({\n    imports: [\n        CryptoModule,\n        forwardRef(() => RegistrarModule),\n        forwardRef(() => PresentationsModule),\n        SessionModule,\n        HttpModule,\n    ],\n    controllers: [Oid4vpController],\n    providers: [\n        Oid4vpService,\n        SessionLoggerService,\n        SessionLoggerInterceptor,\n        WebhookService,\n    ],\n    exports: [Oid4vpService],\n})\nexport class Oid4vpModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Oid4vpService.html":{"url":"injectables/Oid4vpService.html","title":"injectable - Oid4vpService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Oid4vpService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAuthorizationRequest\n                            \n                            \n                                    Async\n                                createRequest\n                            \n                            \n                                    Async\n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cryptoService: CryptoService, encryptionService: EncryptionService, configService: ConfigService, registrarService: RegistrarService, presentationsService: PresentationsService, sessionService: SessionService, sessionLogger: SessionLoggerService, webhookService: WebhookService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/oid4vp/oid4vp.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        encryptionService\n                                                  \n                                                        \n                                                                        EncryptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registrarService\n                                                  \n                                                        \n                                                                        RegistrarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        webhookService\n                                                  \n                                                        \n                                                                        WebhookService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAuthorizationRequest(session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:41\n                        \n                    \n\n\n            \n                \n                        Creates an authorization request for the OID4VP flow.\nThis method generates a JWT that includes the necessary parameters for the authorization request.\nIt initializes the session logging context and logs the start of the flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRequest(requestId: string, values: PresentationRequestOptions, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:203\n                        \n                    \n\n\n            \n                \n                        Creates a request for the OID4VP flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            PresentationRequestOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:255\n                        \n                    \n\n\n            \n                \n                        Processes the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\nimport { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { v4 } from 'uuid';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { EncryptionService } from '../../crypto/encryption/encryption.service';\nimport { OfferResponse } from '../../issuer/oid4vci/dto/offer-request.dto';\nimport { RegistrarService } from '../../registrar/registrar.service';\nimport { Session } from '../../session/entities/session.entity';\nimport { SessionService } from '../../session/session.service';\nimport { SessionLoggerService } from '../../utils/logger/session-logger.service';\nimport { SessionLogContext } from '../../utils/logger/session-logger-context';\nimport { WebhookService } from '../../utils/webhook/webhook.service';\nimport { AuthResponse } from '../presentations/dto/auth-response.dto';\nimport { PresentationsService } from '../presentations/presentations.service';\nimport { AuthorizationResponse } from './dto/authorization-response.dto';\nimport { PresentationRequestOptions } from './dto/presentation-request-options.dto';\n\n@Injectable()\nexport class Oid4vpService {\n    constructor(\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private configService: ConfigService,\n        private registrarService: RegistrarService,\n        private presentationsService: PresentationsService,\n        private sessionService: SessionService,\n        private sessionLogger: SessionLoggerService,\n        private webhookService: WebhookService,\n    ) {}\n\n    /**\n     * Creates an authorization request for the OID4VP flow.\n     * This method generates a JWT that includes the necessary parameters for the authorization request.\n     * It initializes the session logging context and logs the start of the flow.\n     * @param requestId\n     * @param tenantId\n     * @param auth_session\n     * @returns\n     */\n    async createAuthorizationRequest(session: Session): Promise {\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: session.id,\n            tenantId: session.tenantId,\n            flowType: 'OID4VP',\n            stage: 'authorization_request',\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            requestId: session.requestId,\n            action: 'create_authorization_request',\n        });\n\n        try {\n            const host = this.configService.getOrThrow('PUBLIC_URL');\n            const tenantHost = `${host}/${session.tenantId}`;\n\n            const values =\n                await this.presentationsService.getPresentationConfig(\n                    session.requestId!,\n                    session.tenantId,\n                );\n            let regCert: string | undefined = undefined;\n\n            const dcql_query = JSON.parse(\n                JSON.stringify(values.dcql_query).replace(\n                    //g,\n                    tenantHost,\n                ),\n            );\n\n            if (this.registrarService.isEnabled()) {\n                const registrationCert = JSON.parse(\n                    JSON.stringify(values.registrationCert).replace(\n                        //g,\n                        tenantHost,\n                    ),\n                );\n                regCert =\n                    await this.registrarService.addRegistrationCertificate(\n                        registrationCert,\n                        dcql_query,\n                        session.requestId!,\n                        session.tenantId,\n                    );\n            }\n            const nonce = randomUUID();\n            await this.sessionService.add(session.id, {\n                vp_nonce: nonce,\n            });\n\n            this.sessionLogger.logAuthorizationRequest(logContext, {\n                requestId: session.requestId,\n                nonce,\n                regCert,\n                dcqlQueryCount: Array.isArray(dcql_query)\n                    ? dcql_query.length\n                    : 1,\n            });\n\n            const hostname = new URL(\n                this.configService.getOrThrow('PUBLIC_URL'),\n            ).hostname;\n\n            const request = {\n                payload: {\n                    response_type: 'vp_token',\n                    client_id: 'x509_san_dns:' + hostname,\n                    response_uri: `${host}/${session.id}/oid4vp`,\n                    response_mode: 'direct_post.jwt',\n                    nonce,\n                    dcql_query,\n                    client_metadata: {\n                        jwks: {\n                            keys: [\n                                await this.encryptionService.getEncryptionPublicKey(\n                                    session.tenantId,\n                                ),\n                            ],\n                        },\n                        vp_formats: {\n                            mso_mdoc: {\n                                alg: ['ES256'],\n                            },\n                            'dc+sd-jwt': {\n                                'kb-jwt_alg_values': ['ES256'],\n                                'sd-jwt_alg_values': ['ES256'],\n                            },\n                        },\n                        authorization_encrypted_response_alg: 'ECDH-ES',\n                        authorization_encrypted_response_enc: 'A128GCM',\n                        client_name:\n                            this.configService.getOrThrow('RP_NAME'),\n                        response_types_supported: ['vp_token'],\n                    },\n                    state: session.id,\n                    aud: host,\n                    exp: Math.floor(Date.now() / 1000) + 60 * 5,\n                    iat: Math.floor(new Date().getTime() / 1000),\n                    verifier_attestations: regCert\n                        ? [\n                              {\n                                  format: 'jwt',\n                                  data: regCert,\n                              },\n                          ]\n                        : undefined,\n                },\n                header: {\n                    typ: 'oauth-authz-req+jwt',\n                },\n            };\n\n            const accessCert = await this.cryptoService.getCertChain(\n                'access',\n                session.tenantId,\n            );\n\n            const header = {\n                ...request.header,\n                alg: 'ES256',\n                x5c: accessCert,\n            };\n\n            const keyId = await this.cryptoService.keyService.getKid(\n                session.tenantId,\n                'access',\n            );\n            const signedJwt = await this.cryptoService.signJwt(\n                header,\n                request.payload,\n                session.tenantId,\n                keyId,\n            );\n\n            this.sessionLogger.logSession(\n                logContext,\n                'Authorization request created successfully',\n                {\n                    signedJwtLength: signedJwt.length,\n                    certificateChainLength: accessCert?.length || 0,\n                },\n            );\n\n            return signedJwt;\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                requestId: session.requestId,\n                action: 'create_authorization_request',\n            });\n            throw error;\n        }\n    }\n\n    /**\n     * Creates a request for the OID4VP flow.\n     * @param requestId\n     * @param values\n     * @param tenantId\n     * @returns\n     */\n    async createRequest(\n        requestId: string,\n        values: PresentationRequestOptions,\n        tenantId: string,\n    ): Promise {\n        const presentationConfig =\n            await this.presentationsService.getPresentationConfig(\n                requestId,\n                tenantId,\n            );\n\n        const hostname = new URL(\n            this.configService.getOrThrow('PUBLIC_URL'),\n        ).hostname;\n        const params = {\n            client_id: `x509_san_dns:${hostname}`,\n            request_uri: `${this.configService.getOrThrow('PUBLIC_URL')}/${values.session}/oid4vp`,\n        };\n        const queryString = Object.entries(params)\n            .map(\n                ([key, value]) =>\n                    `${encodeURIComponent(key)}=${encodeURIComponent(value)}`,\n            )\n            .join('&');\n\n        if (!values.session) {\n            values.session = v4();\n            await this.sessionService.create({\n                id: values.session,\n                webhook: values.webhook ?? presentationConfig.webhook,\n                tenantId,\n                requestId,\n                requestUrl: queryString,\n            });\n        } else {\n            await this.sessionService.add(values.session, {\n                webhook: values.webhook ?? presentationConfig.webhook,\n                requestUrl: queryString,\n            });\n        }\n\n        return {\n            uri: queryString,\n            session: values.session,\n        };\n    }\n\n    /**\n     * Processes the response from the wallet.\n     * @param body\n     * @param tenantId\n     */\n    async getResponse(body: AuthorizationResponse, session: Session) {\n        const res = await this.encryptionService.decryptJwe(\n            body.response,\n            session.tenantId,\n        );\n        if (!res.state) {\n            throw new ConflictException('No state found in the response');\n        }\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: res.state,\n            tenantId: session.tenantId,\n            flowType: 'OID4VP',\n            stage: 'response_processing',\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            action: 'process_presentation_response',\n            hasWebhook: !!session.webhook,\n        });\n\n        try {\n            //TODO: load required fields from the config\n            const credentials = await this.presentationsService.parseResponse(\n                res,\n                [],\n                session.vp_nonce as string,\n            );\n\n            this.sessionLogger.logCredentialVerification(\n                logContext,\n                !!credentials && credentials.length > 0,\n                {\n                    credentialCount: credentials?.length || 0,\n                    nonce: session.vp_nonce,\n                },\n            );\n\n            //tell the auth server the result of the session.\n            await this.sessionService.add(res.state, {\n                //TODO: not clear why it has to be any\n                credentials: credentials as any,\n            });\n            // if there a a webook URL, send the response there\n            //TODO: move to dedicated service to reuse it also in the oid4vci flow.\n            if (session.webhook) {\n                await this.webhookService.sendWebhook(\n                    session,\n                    logContext,\n                    credentials,\n                );\n            }\n\n            this.sessionLogger.logFlowComplete(logContext, {\n                credentialCount: credentials?.length || 0,\n                webhookSent: !!session.webhook,\n            });\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                action: 'process_presentation_response',\n            });\n            throw error;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParResponseDto.html":{"url":"classes/ParResponseDto.html","title":"class - ParResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/par-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expires_in\n                            \n                            \n                                request_uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The expiration time for the request URI in seconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:5\n                        \n                    \n\n            \n                \n                    The request URI for the Pushed Authorization Request.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ParResponseDto {\n    /**\n     * The request URI for the Pushed Authorization Request.\n     */\n    request_uri: string;\n    /**\n     * The expiration time for the request URI in seconds.\n     */\n    expires_in: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{"url":"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html","title":"interface - ParsedAccessTokenAuthorizationCodeRequestGrant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParsedAccessTokenAuthorizationCodeRequestGrant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            code\n                                        \n                                \n                                \n                                        \n                                            grantType\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        grantType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        grantType:     AuthorizationCodeGrantIdentifier\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AuthorizationCodeGrantIdentifier\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\nimport { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    authorizationCodeGrantIdentifier,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from '@openid4vc/oauth2';\nimport type { Request, Response } from 'express';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { Session } from '../../session/entities/session.entity';\nimport { SessionService } from '../../session/session.service';\nimport { WebhookConfig } from '../../utils/webhook/webhook.dto';\nimport { Oid4vpService } from '../../verifier/oid4vp/oid4vp.service';\nimport { AuthenticationConfigHelper } from '../issuance/dto/authentication-config.helper';\nimport { IssuanceService } from '../issuance/issuance.service';\nimport { getHeadersFromRequest } from '../oid4vci/util';\nimport { AuthorizeQueries } from './dto/authorize-request.dto';\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(session: Session): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow('PUBLIC_URL') +\n            `/${session.id}`;\n        return this.getAuthorizationServer(\n            session.tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: ['ES256'],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        'request_uri not found or not provided in the request',\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                'request_uri not found or not provided in the request',\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        session: Session,\n    ): Promise {\n        const url = `${this.configService.getOrThrow('PUBLIC_URL')}${req.url}`;\n        const tenantId = session.tenantId;\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        /*         const session = await this.sessionService.getBy({\n            authorization_code: body.code ?? body['pre-authorized_code'],\n            tenantId,\n        });\n\n        if (!session) {\n            throw new ConflictException('Authorization code not found');\n        } */\n        const authorizationServerMetadata = this.authzMetadata(session);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n        //const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow('PUBLIC_URL')}/${session.id}`,\n            signer: {\n                method: 'jwk',\n                alg: 'ES256',\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    'jwk',\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            /* cNonce,\n            cNonceExpiresIn: 100, */\n            clientId: 'wallet', // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest('pid', { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: 'insufficient_authorization',\n            auth_session,\n            presentation,\n            error_description:\n                'Presentation of credential required before issuance',\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        session: Session,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            /* const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n */\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(res, body.auth_session);\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    'Session does not have valid credentials for issuance',\n                );\n            }\n        }\n\n        /* const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        } */\n        const issuanceId = session.issuanceId!;\n        const config = await this.issuanceService.getIssuanceConfigurationById(\n            issuanceId,\n            session.tenantId,\n        );\n\n        // Use the new authentication configuration structure\n        const authConfig = config.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                'No authentication configuration found for issuance config',\n            );\n        }\n\n        if (\n            AuthenticationConfigHelper.isPresentationDuringIssuanceAuth(\n                authConfig,\n            )\n        ) {\n            // OID4VP flow - credential presentation required\n            const presentationConfig =\n                AuthenticationConfigHelper.getPresentationConfig(authConfig);\n            const webhook = presentationConfig?.presentation.webhook;\n            const response = await this.parseChallengeRequest(\n                body,\n                session.tenantId,\n                webhook,\n            );\n            res.status(400).send(response);\n        } else if (AuthenticationConfigHelper.isAuthUrlAuth(authConfig)) {\n            // OID4VCI authorized code flow - should not reach here typically in challenge endpoint\n            // But we'll handle it by sending authorization code\n            await this.sendAuthorizationCode(res, body.issuer_state!);\n        } else if (AuthenticationConfigHelper.isNoneAuth(authConfig)) {\n            // Pre-authorized code flow (method: 'none') - send authorization code directly\n            await this.sendAuthorizationCode(res, body.issuer_state!);\n        } else {\n            throw new Error(\n                `Unsupported authentication method: ${(authConfig as any).method}`,\n            );\n        }\n    }\n\n    private async sendAuthorizationCode(res: Response, issuer_state: string) {\n        const authorization_code = await this.setAuthCode(issuer_state);\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{"url":"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html","title":"interface - ParsedAccessTokenPreAuthorizedCodeRequestGrant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParsedAccessTokenPreAuthorizedCodeRequestGrant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            grantType\n                                        \n                                \n                                \n                                        \n                                            preAuthorizedCode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            txCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        grantType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        grantType:     PreAuthorizedCodeGrantIdentifier\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     PreAuthorizedCodeGrantIdentifier\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        preAuthorizedCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        preAuthorizedCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        txCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        txCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { randomUUID } from 'node:crypto';\nimport { ConflictException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    authorizationCodeGrantIdentifier,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from '@openid4vc/oauth2';\nimport type { Request, Response } from 'express';\nimport { CryptoService } from '../../crypto/crypto.service';\nimport { Session } from '../../session/entities/session.entity';\nimport { SessionService } from '../../session/session.service';\nimport { WebhookConfig } from '../../utils/webhook/webhook.dto';\nimport { Oid4vpService } from '../../verifier/oid4vp/oid4vp.service';\nimport { AuthenticationConfigHelper } from '../issuance/dto/authentication-config.helper';\nimport { IssuanceService } from '../issuance/issuance.service';\nimport { getHeadersFromRequest } from '../oid4vci/util';\nimport { AuthorizeQueries } from './dto/authorize-request.dto';\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(session: Session): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow('PUBLIC_URL') +\n            `/${session.id}`;\n        return this.getAuthorizationServer(\n            session.tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: ['ES256'],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        'request_uri not found or not provided in the request',\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                'request_uri not found or not provided in the request',\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        session: Session,\n    ): Promise {\n        const url = `${this.configService.getOrThrow('PUBLIC_URL')}${req.url}`;\n        const tenantId = session.tenantId;\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        /*         const session = await this.sessionService.getBy({\n            authorization_code: body.code ?? body['pre-authorized_code'],\n            tenantId,\n        });\n\n        if (!session) {\n            throw new ConflictException('Authorization code not found');\n        } */\n        const authorizationServerMetadata = this.authzMetadata(session);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n        //const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow('PUBLIC_URL')}/${session.id}`,\n            signer: {\n                method: 'jwk',\n                alg: 'ES256',\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    'jwk',\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            /* cNonce,\n            cNonceExpiresIn: 100, */\n            clientId: 'wallet', // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest('pid', { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: 'insufficient_authorization',\n            auth_session,\n            presentation,\n            error_description:\n                'Presentation of credential required before issuance',\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        session: Session,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            /* const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n */\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(res, body.auth_session);\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    'Session does not have valid credentials for issuance',\n                );\n            }\n        }\n\n        /* const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        } */\n        const issuanceId = session.issuanceId!;\n        const config = await this.issuanceService.getIssuanceConfigurationById(\n            issuanceId,\n            session.tenantId,\n        );\n\n        // Use the new authentication configuration structure\n        const authConfig = config.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                'No authentication configuration found for issuance config',\n            );\n        }\n\n        if (\n            AuthenticationConfigHelper.isPresentationDuringIssuanceAuth(\n                authConfig,\n            )\n        ) {\n            // OID4VP flow - credential presentation required\n            const presentationConfig =\n                AuthenticationConfigHelper.getPresentationConfig(authConfig);\n            const webhook = presentationConfig?.presentation.webhook;\n            const response = await this.parseChallengeRequest(\n                body,\n                session.tenantId,\n                webhook,\n            );\n            res.status(400).send(response);\n        } else if (AuthenticationConfigHelper.isAuthUrlAuth(authConfig)) {\n            // OID4VCI authorized code flow - should not reach here typically in challenge endpoint\n            // But we'll handle it by sending authorization code\n            await this.sendAuthorizationCode(res, body.issuer_state!);\n        } else if (AuthenticationConfigHelper.isNoneAuth(authConfig)) {\n            // Pre-authorized code flow (method: 'none') - send authorization code directly\n            await this.sendAuthorizationCode(res, body.issuer_state!);\n        } else {\n            throw new Error(\n                `Unsupported authentication method: ${(authConfig as any).method}`,\n            );\n        }\n    }\n\n    private async sendAuthorizationCode(res: Response, issuer_state: string) {\n        const authorization_code = await this.setAuthCode(issuer_state);\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PresentationConfig.html":{"url":"entities/PresentationConfig.html","title":"entity - PresentationConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PresentationConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a configuration for a Verifiable Presentation (VP) request.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                dcql_query\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                registrationCert\n                            \n                            \n                                    \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmpty()@Column({type: 'date', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:54\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        dcql_query\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:33\n                        \n                    \n\n            \n                \n                    The DCQL query to be used for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:17\n                        \n                    \n\n            \n                \n                    Unique identifier for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        registrationCert\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RegistrationCertificateRequest\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsObject()@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:40\n                        \n                    \n\n            \n                \n                    The registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})@IsEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:25\n                        \n                    \n\n            \n                \n                    The tenant ID for which the VP request is made.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsOptional()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:47\n                        \n                    \n\n            \n                \n                    Optional webhook URL to receive the response.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiHideProperty } from '@nestjs/swagger';\nimport { IsEmpty, IsObject, IsOptional, IsString } from 'class-validator';\nimport { Column, Entity } from 'typeorm';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\nimport { RegistrationCertificateRequest } from '../dto/vp-request.dto';\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column('varchar', { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column('varchar', { primary: true })\n    @IsEmpty()\n    tenantId: string;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column('json')\n    @IsObject()\n    //TODO: define the structure of the DCQL query\n    dcql_query: any;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @IsObject()\n    @Column('json', { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column('json', { nullable: true })\n    @IsOptional()\n    @IsObject()\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @IsEmpty()\n    @Column({ type: 'date', default: () => 'CURRENT_TIMESTAMP' })\n    createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationDuringIssuance.html":{"url":"classes/PresentationDuringIssuance.html","title":"class - PresentationDuringIssuance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationDuringIssuance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/dto/credential-config.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsString } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\n\nexport class VCT {\n    @IsString()\n    vct: string;\n    @IsString()\n    name?: string;\n    @IsString()\n    description?: string;\n    @IsString()\n    extends?: string;\n    @IsString()\n    'extends#integrity'?: string;\n    @IsString()\n    schema_uri?: string;\n    @IsString()\n    'schema_uri#integrity'?: string;\n}\n\nexport class PresentationDuringIssuance {\n    @IsString()\n    type: string;\n    @IsObject()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationDuringIssuanceConfig.html":{"url":"classes/PresentationDuringIssuanceConfig.html","title":"class - PresentationDuringIssuanceConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationDuringIssuanceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for authentication method 'presentationDuringIssuance'\nUsed for OID4VP flow where a credential presentation request is sent\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                presentation\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        presentation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PresentationDuringIssuance\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:98\n                        \n                    \n\n            \n                \n                    Presentation configuration that specifies what credentials need to be presented via OID4VP\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsUrl,\n    Validate,\n    ValidateNested,\n    ValidationArguments,\n    ValidatorConstraint,\n    ValidatorConstraintInterface,\n} from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\nimport { PresentationDuringIssuance } from '../../credentials-metadata/dto/credential-config.dto';\n\n/**\n * Custom validator to ensure config type matches the authentication method\n */\n@ValidatorConstraint({ name: 'authConfigValidator', async: false })\nexport class AuthConfigValidator implements ValidatorConstraintInterface {\n    validate(config: any, args: ValidationArguments) {\n        const obj = args.object as AuthenticationConfigDto;\n\n        if (obj.method === 'none') {\n            // For 'none' method, config should be undefined\n            return config === undefined;\n        }\n\n        if (obj.method === 'auth') {\n            // For 'auth' method, config must be present and have 'url' property\n            return (\n                config &&\n                typeof config === 'object' &&\n                typeof config.url === 'string'\n            );\n        }\n\n        if (obj.method === 'presentationDuringIssuance') {\n            // For 'presentationDuringIssuance' method, config must be present and have 'presentation' property\n            return config && typeof config === 'object' && config.presentation;\n        }\n\n        return false;\n    }\n\n    defaultMessage(args: ValidationArguments) {\n        const obj = args.object as AuthenticationConfigDto;\n\n        if (obj.method === 'none') {\n            return 'config must be undefined when method is \"none\"';\n        }\n\n        if (obj.method === 'auth') {\n            return 'config must be of type AuthenticationUrlConfig when method is \"auth\"';\n        }\n\n        if (obj.method === 'presentationDuringIssuance') {\n            return 'config must be of type PresentationDuringIssuanceConfig when method is \"presentationDuringIssuance\"';\n        }\n\n        return 'config type does not match the specified method';\n    }\n}\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsUrl()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Presentation configuration that specifies what credentials need to be presented via OID4VP\n     */\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuance)\n    presentation: PresentationDuringIssuance;\n}\n\n/**\n * Base class for authentication configurations\n * Determines which OpenID4VC flow to use for the issuance process\n */\nexport class AuthenticationConfigDto {\n    /**\n     * The authentication method to use:\n     * - 'none': Pre-authorized code flow (no user authentication)\n     * - 'auth': OID4VCI authorized code flow (user redirect for authentication)\n     * - 'presentationDuringIssuance': OID4VP flow (credential presentation required)\n     */\n    @IsIn(['none', 'auth', 'presentationDuringIssuance'])\n    method: 'none' | 'auth' | 'presentationDuringIssuance';\n\n    /**\n     * Configuration specific to the selected authentication method\n     * - For 'none': no config needed (undefined) - uses pre-authorized code flow\n     * - For 'auth': AuthenticationUrlConfig - for OID4VCI authorized code flow\n     * - For 'presentationDuringIssuance': PresentationDuringIssuanceConfig - for OID4VP flow\n     */\n    @IsOptional()\n    @Validate(AuthConfigValidator)\n    config?: AuthenticationUrlConfig | PresentationDuringIssuanceConfig;\n}\n\n/**\n * Union type for authentication configurations\n * Each method corresponds to a specific OpenID4VC flow\n */\nexport type AuthenticationConfig =\n    | { method: 'none' } // Pre-authorized code flow\n    | { method: 'auth'; config: AuthenticationUrlConfig } // OID4VCI authorized code flow\n    | {\n          method: 'presentationDuringIssuance'; // OID4VP flow\n          config: PresentationDuringIssuanceConfig;\n      };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PresentationManagementController.html":{"url":"controllers/PresentationManagementController.html","title":"controller - PresentationManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PresentationManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                presentation-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                configuration\n                            \n                            \n                                    \n                                deleteConfiguration\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                            \n                                    \n                                storePresentationConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        configuration\n                        \n                    \n                \n            \n            \n                \n                        \n                    configuration(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:111\n                        \n                    \n\n\n            \n                \n                        Returns the presentation request configurations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:137\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation request configuration by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(res: Response, body: PresentationRequest, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@UseGuards(JwtAuthGuard)@ApiSecurity('oauth2')@ApiBody({type: PresentationRequest, examples: undefined})@Post('request')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:79\n                        \n                    \n\n\n            \n                \n                        Create an presentation request that can be sent to the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            PresentationRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    storePresentationConfig(config: PresentationConfig, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:121\n                        \n                    \n\n\n            \n                \n                        Store a presentation request configuration. If it already exists, it will be updated.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            PresentationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Res,\n    UseGuards,\n} from '@nestjs/common';\nimport {\n    ApiBody,\n    ApiProduces,\n    ApiResponse,\n    ApiSecurity,\n    ApiTags,\n} from '@nestjs/swagger';\nimport { Response } from 'express';\nimport * as QRCode from 'qrcode';\nimport { JwtAuthGuard } from '../../auth/auth.guard';\nimport { Token, TokenPayload } from '../../auth/token.decorator';\nimport { OfferResponse } from '../../issuer/oid4vci/dto/offer-request.dto';\nimport {\n    PresentationRequest,\n    ResponseType,\n} from '../oid4vp/dto/presentation-request.dto';\nimport { Oid4vpService } from '../oid4vp/oid4vp.service';\nimport { PresentationConfig } from './entities/presentation-config.entity';\nimport { PresentationsService } from './presentations.service';\n\n@ApiTags('Presentation management')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2', ['api:read', 'api:write'])\n@Controller('presentation-management')\nexport class PresentationManagementController {\n    constructor(\n        private readonly presentationsService: PresentationsService,\n        private readonly oid4vpService: Oid4vpService,\n    ) {}\n\n    /**\n     * Create an presentation request that can be sent to the user\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: 'JSON response',\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            'application/json': { schema: { type: 'object' } },\n            'image/png': { schema: { type: 'string', format: 'binary' } },\n        },\n    })\n    @ApiProduces('application/json', 'image/png')\n    @UseGuards(JwtAuthGuard)\n    @ApiSecurity('oauth2')\n    @ApiBody({\n        type: PresentationRequest,\n        examples: {\n            qrcode: {\n                summary: 'QR-Code Example',\n                value: {\n                    response_type: ResponseType.QRCode,\n                    requestId: 'pid',\n                },\n            },\n            uri: {\n                summary: 'URI',\n                value: {\n                    response_type: ResponseType.URI,\n                    requestId: 'pid',\n                },\n            },\n        },\n    })\n    @Post('request')\n    async getOffer(\n        @Res() res: Response,\n        @Body() body: PresentationRequest,\n        @Token() user: TokenPayload,\n    ) {\n        const values = await this.oid4vpService.createRequest(\n            body.requestId,\n            {\n                webhook: body.webhook,\n            },\n            user.sub,\n        );\n        values.uri = `openid4vp://?${values.uri}`;\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader('Content-Type', 'image/png');\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n\n    /**\n     * Returns the presentation request configurations.\n     * @returns\n     */\n    @Get()\n    configuration(@Token() user: TokenPayload) {\n        return this.presentationsService.getPresentationConfigs(user.sub);\n    }\n\n    /**\n     * Store a presentation request configuration. If it already exists, it will be updated.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storePresentationConfig(\n        @Body() config: PresentationConfig,\n        @Token() user: TokenPayload,\n    ) {\n        return this.presentationsService.storePresentationConfig(\n            user.sub,\n            config,\n        );\n    }\n\n    /**\n     * Deletes a presentation request configuration by its ID.\n     * @param id\n     * @returns\n     */\n    @Delete(':id')\n    deleteConfiguration(@Param('id') id: string, @Token() user: TokenPayload) {\n        return this.presentationsService.deletePresentationConfig(id, user.sub);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationRequest.html":{"url":"classes/PresentationRequest.html","title":"class - PresentationRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the presentation request containing the response type and request ID.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                requestId\n                            \n                            \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        requestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:33\n                        \n                    \n\n            \n                \n                    Identifier of the presentation configuration\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:26\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:41\n                        \n                    \n\n            \n                \n                    Webhook configuration to receive the response.\nIf not provided, the configured webhook from the configuration will be used.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsObject, IsOptional, IsString } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\n\n/**\n * Enum for the type of response expected from the presentation request.\n */\nexport enum ResponseType {\n    /**\n     * Response type indicating a QR code will be returned.\n     */\n    QRCode = 'qrcode',\n    /**\n     * Response type indicating a URI will be returned.\n     */\n    URI = 'uri',\n}\n\n/**\n * DTO for the presentation request containing the response type and request ID.\n */\nexport class PresentationRequest {\n    /**\n     * @example qrcode\n     */\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Identifier of the presentation configuration\n     * @example pid\n     */\n    @IsString()\n    requestId: string;\n\n    /**\n     * Webhook configuration to receive the response.\n     * If not provided, the configured webhook from the configuration will be used.\n     */\n    @IsObject()\n    @IsOptional()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PresentationRequestOptions.html":{"url":"interfaces/PresentationRequestOptions.html","title":"interface - PresentationRequestOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PresentationRequestOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PresentationRequestOptions DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            session\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            webhook\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        session\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        session:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional session identifier for tracking the request.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        webhook\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        webhook:         WebhookConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         WebhookConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional webhook configuration to receive the response.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { WebhookConfig } from '../../../utils/webhook/webhook.dto';\n\n/**\n * PresentationRequestOptions DTO\n */\nexport interface PresentationRequestOptions {\n    /**\n     * Optional session identifier for tracking the request.\n     */\n    session?: string;\n    /**\n     * Optional webhook configuration to receive the response.\n     */\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PresentationsModule.html":{"url":"modules/PresentationsModule.html","title":"module - PresentationsModule","body":"\n                   \n\n\n\n\n    Modules\n    PresentationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_providers\n\n\n\ncluster_PresentationsModule_exports\n\n\n\ncluster_PresentationsModule_imports\n\n\n\n\nResolverModule\n\nResolverModule\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/presentations/presentations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PresentationManagementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ResolverModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from '@nestjs/axios';\nimport { forwardRef, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Oid4vpModule } from '../oid4vp/oid4vp.module';\nimport { ResolverModule } from '../resolver/resolver.module';\nimport { PresentationConfig } from './entities/presentation-config.entity';\nimport { PresentationManagementController } from './presentations.controller';\nimport { PresentationsService } from './presentations.service';\n\n@Module({\n    imports: [\n        ResolverModule,\n        HttpModule,\n        forwardRef(() => Oid4vpModule),\n        TypeOrmModule.forFeature([PresentationConfig]),\n    ],\n    controllers: [PresentationManagementController],\n    providers: [PresentationsService],\n    exports: [PresentationsService],\n})\nexport class PresentationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PresentationsService.html":{"url":"injectables/PresentationsService.html","title":"injectable - PresentationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PresentationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                kbVerifier\n                            \n                            \n                                sdjwtInstance\n                            \n                            \n                                    Private\n                                statusListFetcher\n                            \n                            \n                                verifier\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deletePresentationConfig\n                            \n                            \n                                getPresentationConfig\n                            \n                            \n                                getPresentationConfigs\n                            \n                            \n                                    Private\n                                    Async\n                                import\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                parseResponse\n                            \n                            \n                                storePresentationConfig\n                            \n                            \n                                    Public\n                                storeRCID\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, resolverService: ResolverService, vpRequestRepository: Repository, configService: ConfigService, logger: PinoLogger)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/presentations/presentations.service.ts:28\n                            \n                        \n\n                \n                    \n                            Constructor for the PresentationsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of HttpService for making HTTP requests.\n\n\n                                                        \n                                                \n                                                \n                                                        resolverService\n                                                  \n                                                        \n                                                                        ResolverService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ResolverService for resolving DID documents.\n\n\n                                                        \n                                                \n                                                \n                                                        vpRequestRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for managing VP request configurations.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deletePresentationConfig\n                        \n                    \n                \n            \n            \n                \ndeletePresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:161\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to delete.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to delete the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves when the deletion is complete.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPresentationConfig\n                        \n                    \n                \n            \n            \n                \ngetPresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:171\n                        \n                    \n\n\n            \n                \n                        Retrieves a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to retrieve.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the requested PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPresentationConfigs\n                        \n                    \n                \n            \n            \n                \ngetPresentationConfigs(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:137\n                        \n                    \n\n\n            \n                \n                        Retrieves all presentation configurations for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve configurations.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to an array of PresentationConfig entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import()\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Imports presentation configurations from a predefined directory structure.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Imports presentation configurations from a predefined directory structure.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Initializes the SDJwtVcInstance with the necessary configurations.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseResponse\n                        \n                    \n                \n            \n            \n                \nparseResponse(res: AuthResponse, requiredFields: string[], keyBindingNonce: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:260\n                        \n                    \n\n\n            \n                \n                        Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            AuthResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requiredFields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyBindingNonce\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \nstorePresentationConfig(tenantId: string, vprequest: PresentationConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:150\n                        \n                    \n\n\n            \n                \n                        Stores a new presentation configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the configuration.\n\n\n                                            \n                                        \n                                        \n                                                vprequest\n                                            \n                                                            PresentationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe PresentationConfig entity to store.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the stored PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        storeRCID\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeRCID(registrationCertId: string, id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:192\n                        \n                    \n\n\n            \n                \n                        Stores the new registration certificate.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                registrationCertId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the registration certificate to store.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to update.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the registration certificate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        kbVerifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KbVerifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:243\n                        \n                    \n\n            \n                \n                    Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                            \n                                            \n                                                    signature\n                                            \n                                            \n                                                    payload\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sdjwtInstance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SDJwtVcInstance\n\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:28\n                        \n                    \n\n            \n                \n                    Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        statusListFetcher\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:228\n                        \n                    \n\n            \n                \n                    Fetch the status list from the uri.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    uri\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Verifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:205\n                        \n                    \n\n            \n                \n                    Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                                    \n                                                            \nThe data part of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                            \n                                                    signature\n                                                    \n                                                            \nThe signature of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { ConflictException, Injectable, OnModuleInit } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { digest, ES256 } from '@sd-jwt/crypto-nodejs';\nimport { SDJwtVcInstance } from '@sd-jwt/sd-jwt-vc';\nimport { KbVerifier, Verifier } from '@sd-jwt/types';\nimport { plainToClass } from 'class-transformer';\nimport { validate } from 'class-validator';\nimport { readdirSync, readFileSync } from 'fs';\nimport { importJWK, JWK, JWTPayload, jwtVerify } from 'jose';\nimport { PinoLogger } from 'nestjs-pino';\nimport { join } from 'path';\nimport { firstValueFrom } from 'rxjs';\nimport { Repository } from 'typeorm/repository/Repository';\nimport { ResolverService } from '../resolver/resolver.service';\nimport { AuthResponse } from './dto/auth-response.dto';\nimport { PresentationConfig } from './entities/presentation-config.entity';\n\n/**\n * Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n */\n@Injectable()\nexport class PresentationsService implements OnModuleInit {\n    /**\n     * Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n     */\n    sdjwtInstance: SDJwtVcInstance;\n\n    /**\n     * Constructor for the PresentationsService.\n     * @param httpService - Instance of HttpService for making HTTP requests.\n     * @param resolverService - Instance of ResolverService for resolving DID documents.\n     * @param vpRequestRepository - Repository for managing VP request configurations.\n     */\n    constructor(\n        private httpService: HttpService,\n        private resolverService: ResolverService,\n        @InjectRepository(PresentationConfig)\n        private vpRequestRepository: Repository,\n        private configService: ConfigService,\n        private logger: PinoLogger,\n    ) {}\n\n    /**\n     * Initializes the SDJwtVcInstance with the necessary configurations.\n     */\n    onModuleInit() {\n        this.sdjwtInstance = new SDJwtVcInstance({\n            hasher: digest,\n            verifier: this.verifier.bind(this),\n            kbVerifier: this.kbVerifier.bind(this),\n            statusListFetcher: this.statusListFetcher.bind(this),\n        });\n    }\n\n    /**\n     * Imports presentation configurations from a predefined directory structure.\n     */\n    async onApplicationBootstrap() {\n        await this.import();\n    }\n\n    /**\n     * Imports presentation configurations from a predefined directory structure.\n     */\n    private async import() {\n        const configPath = this.configService.getOrThrow('CONFIG_FOLDER');\n        const subfolder = 'presentation';\n        const force = this.configService.get('CONFIG_IMPORT_FORCE');\n        if (this.configService.get('CONFIG_IMPORT')) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            for (const tenant of tenantFolders) {\n                let counter = 0;\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const files = readdirSync(path);\n                for (const file of files) {\n                    const payload = JSON.parse(\n                        readFileSync(join(path, file), 'utf8'),\n                    );\n\n                    const id = file.replace('.json', '');\n                    payload.id = id;\n                    const presentationExists = await this.getPresentationConfig(\n                        id,\n                        tenant.name,\n                    ).catch(() => false);\n                    if (presentationExists && !force) {\n                        continue; // Skip if config already exists and force is not set\n                    }\n\n                    // Validate the payload against PresentationConfig\n                    const config = plainToClass(PresentationConfig, payload);\n                    const validationErrors = await validate(config, {\n                        whitelist: true,\n                        forbidNonWhitelisted: true,\n                    });\n\n                    if (validationErrors.length > 0) {\n                        this.logger.error(\n                            {\n                                event: 'ValidationError',\n                                file,\n                                tenant: tenant.name,\n                                errors: validationErrors.map((error) => ({\n                                    property: error.property,\n                                    constraints: error.constraints,\n                                    value: error.value,\n                                })),\n                            },\n                            `Validation failed for presentation config ${file} in tenant ${tenant.name}`,\n                        );\n                        continue; // Skip this invalid config\n                    }\n\n                    await this.storePresentationConfig(tenant.name, config);\n                    counter++;\n                }\n                this.logger.info(\n                    {\n                        event: 'Import',\n                    },\n                    `${counter} presentation configs imported for ${tenant.name}`,\n                );\n            }\n        }\n    }\n\n    /**\n     * Retrieves all presentation configurations for a given tenant.\n     * @param tenantId - The ID of the tenant for which to retrieve configurations.\n     * @returns A promise that resolves to an array of PresentationConfig entities.\n     */\n    getPresentationConfigs(tenantId: string): Promise {\n        return this.vpRequestRepository.find({\n            where: { tenantId },\n            order: { createdAt: 'DESC' },\n        });\n    }\n\n    /**\n     * Stores a new presentation configuration.\n     * @param tenantId - The ID of the tenant for which to store the configuration.\n     * @param vprequest - The PresentationConfig entity to store.\n     * @returns A promise that resolves to the stored PresentationConfig entity.\n     */\n    storePresentationConfig(tenantId: string, vprequest: PresentationConfig) {\n        vprequest.tenantId = tenantId;\n        return this.vpRequestRepository.save(vprequest);\n    }\n\n    /**\n     * Deletes a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to delete.\n     * @param tenantId - The ID of the tenant for which to delete the configuration.\n     * @returns A promise that resolves when the deletion is complete.\n     */\n    deletePresentationConfig(id: string, tenantId: string) {\n        return this.vpRequestRepository.delete({ id, tenantId });\n    }\n\n    /**\n     * Retrieves a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to retrieve.\n     * @param tenantId - The ID of the tenant for which to retrieve the configuration.\n     * @returns A promise that resolves to the requested PresentationConfig entity.\n     */\n    getPresentationConfig(\n        id: string,\n        tenantId: string,\n    ): Promise {\n        return this.vpRequestRepository\n            .findOneByOrFail({\n                id,\n                tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException(`Request ID ${id} not found`);\n            });\n    }\n\n    /**\n     * Stores the new registration certificate.\n     * @param registrationCertId - The ID of the registration certificate to store.\n     * @param id - The ID of the presentation configuration to update.\n     * @param tenantId - The ID of the tenant for which to store the registration certificate.\n     * @returns\n     */\n    public storeRCID(registrationCertId: string, id: string, tenantId: string) {\n        return this.vpRequestRepository.update(\n            { id, tenantId },\n            { registrationCert: { id: registrationCertId } },\n        );\n    }\n\n    /**\n     * Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n     * @param data - The data part of the SD-JWT-VC.\n     * @param signature - The signature of the SD-JWT-VC.\n     * @returns\n     */\n    verifier: Verifier = async (data, signature) => {\n        const instance = new SDJwtVcInstance({\n            hasher: digest,\n        });\n        const decodedVC = await instance.decode(`${data}.${signature}`);\n        const payload = decodedVC.jwt?.payload as JWTPayload;\n        const header = decodedVC.jwt?.header as JWK;\n        const publicKey = await this.resolverService.resolvePublicKey(\n            payload,\n            header,\n        );\n        const verify = await ES256.getVerifier(publicKey);\n        return verify(data, signature).catch((err) => {\n            console.log(err);\n            return false;\n        });\n    };\n\n    /**\n     * Fetch the status list from the uri.\n     * @param uri\n     * @returns\n     */\n    private statusListFetcher: (uri: string) => Promise = (\n        uri: string,\n    ) => {\n        return firstValueFrom(this.httpService.get(uri)).then(\n            (res) => res.data,\n        );\n    };\n\n    /**\n     * Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n     * @param data\n     * @param signature\n     * @param payload\n     * @returns\n     */\n    private kbVerifier: KbVerifier = async (data, signature, payload) => {\n        if (!payload.cnf) {\n            throw new Error('No cnf found in the payload');\n        }\n        const key = await importJWK(payload.cnf.jwk as JWK, 'ES256');\n        return jwtVerify(`${data}.${signature}`, key).then(\n            () => true,\n            () => false,\n        );\n    };\n\n    /**\n     * Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n     * @param res\n     * @param requiredFields\n     * @returns\n     */\n    parseResponse(\n        res: AuthResponse,\n        requiredFields: string[],\n        keyBindingNonce: string,\n    ) {\n        const attestations = Object.keys(res.vp_token);\n        const att = attestations.map((att) =>\n            this.sdjwtInstance\n                .verify(res.vp_token[att], {\n                    requiredClaimKeys: requiredFields,\n                    keyBindingNonce,\n                })\n                .then(\n                    (result) => {\n                        return {\n                            id: att,\n                            values: {\n                                ...result.payload,\n                                cnf: undefined, // remove cnf for simplicity\n                                status: undefined, // remove status for simplicity\n                            },\n                        };\n                    },\n                    /* (err) => {\n                        throw new Error\n                        //(console.log(err);\n                        return {\n                            id: att,\n                            error: err.message,\n                        };\n                    }, */\n                ),\n        );\n        return Promise.all(att);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/RegistrarEntity.html":{"url":"entities/RegistrarEntity.html","title":"entity - RegistrarEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  RegistrarEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/entities/registrar.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accessCertificateId\n                            \n                            \n                                    \n                                relyingPartyId\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accessCertificateId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/registrar/entities/registrar.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        relyingPartyId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/registrar/entities/registrar.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/registrar/entities/registrar.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from \"typeorm\";\n\n@Entity()\nexport class RegistrarEntity {\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    @Column(\"varchar\")\n    relyingPartyId: string;\n\n    @Column(\"varchar\")\n    accessCertificateId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RegistrarModule.html":{"url":"modules/RegistrarModule.html","title":"module - RegistrarModule","body":"\n                   \n\n\n\n\n    Modules\n    RegistrarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_providers\n\n\n\ncluster_RegistrarModule_exports\n\n\n\ncluster_RegistrarModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/registrar/registrar.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            RegistrarModule is responsible for managing the registrar service.\nIt provides the RegistrarService and imports necessary modules.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            PresentationsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport * as Joi from \"joi\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { PresentationsModule } from \"../verifier/presentations/presentations.module\";\nimport { RegistrarEntity } from \"./entities/registrar.entity\";\nimport { RegistrarService } from \"./registrar.service\";\n\n/**\n * Validation schema for the registrar module.\n * Defines the required environment variables and their types.\n */\nexport const REGISTRAR_VALIDATION_SCHEMA = {\n    REGISTRAR_URL: Joi.string(),\n    REGISTRAR_OIDC_URL: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    REGISTRAR_OIDC_CLIENT_ID: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    REGISTRAR_OIDC_CLIENT_SECRET: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n};\n\n/**\n * RegistrarModule is responsible for managing the registrar service.\n * It provides the RegistrarService and imports necessary modules.\n */\n@Module({\n    imports: [\n        CryptoModule,\n        PresentationsModule,\n        TypeOrmModule.forFeature([RegistrarEntity]),\n    ],\n    providers: [RegistrarService],\n    exports: [RegistrarService],\n})\nexport class RegistrarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RegistrarService.html":{"url":"injectables/RegistrarService.html","title":"injectable - RegistrarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RegistrarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/registrar.service.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrarService is responsible for managing the interaction with the registrar,\nincluding adding relying parties, access certificates, and registration certificates.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                accessToken\n                            \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                oauth2Client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                addAccessCertificate\n                            \n                            \n                                    Async\n                                addRegistrationCertificate\n                            \n                            \n                                addRp\n                            \n                            \n                                    Private\n                                getExistingRp\n                            \n                            \n                                isEnabled\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                    Async\n                                onTenantInit\n                            \n                            \n                                    Async\n                                refreshAccessToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, presentationsService: PresentationsService, registrarRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/registrar/registrar.service.ts:40\n                            \n                        \n\n                \n                    \n                            Constructor for the RegistrarService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ConfigService for accessing configuration values.\n\n\n                                                        \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of CryptoService for cryptographic operations.\n\n\n                                                        \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of PresentationsService for handling presentations.\n\n\n                                                        \n                                                \n                                                \n                                                        registrarRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        addAccessCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addAccessCertificate(tenantId: string, relyingPartyId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:190\n                        \n                    \n\n\n            \n                \n                        Add a new access certificate to the registrar.\nThis is only needed once, when the access certificate is created.\nIf the access certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                relyingPartyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addRegistrationCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addRegistrationCertificate(req: RegistrationCertificateRequest, dcql_query: any, requestId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:232\n                        \n                    \n\n\n            \n                \n                        Add a new registration certificate to the registrar.\nThis is only needed once, when the registration certificate is created.\nIf the registration certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RegistrationCertificateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dcql_query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addRp\n                        \n                    \n                \n            \n            \n                \naddRp(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:150\n                        \n                    \n\n\n            \n                \n                        Adds a new relying party to the registrar.\nThis is only needed once, when the relying party is created.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getExistingRp\n                        \n                    \n                \n            \n            \n                \n                        \n                    getExistingRp(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:173\n                        \n                    \n\n\n            \n                \n                        Stores the existing relying party ID based on the name.\nThis is used when the relying party already exists in the registrar.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the relying party.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The ID of the existing relying party.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEnabled\n                        \n                    \n                \n            \n            \n                \nisEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:92\n                        \n                    \n\n\n            \n                \n                        Checks if the registrar service is enabled based on the configuration.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the registrar service is enabled, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:100\n                        \n                    \n\n\n            \n                \n                        This function is called when the application starts.\nIt will refresh the access token for the registrar.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:59\n                        \n                    \n\n\n            \n                \n                        Initializes the OAuth2 client and registrar client with the necessary configurations.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:111\n                        \n                    \n\n\n            \n                \n                        This function is called when a tenant is initialized.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshAccessToken()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:133\n                        \n                    \n\n\n            \n                \n                        Refreshes the access token for the registrar using client credentials.\nThis method is called periodically to ensure the access token is valid.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:40\n                        \n                    \n\n            \n                \n                    Access token for authenticating requests to the registrar.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:36\n                        \n                    \n\n            \n                \n                    Client for interacting with the registrar API.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oauth2Client\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:32\n                        \n                    \n\n            \n                \n                    OAuth2 client for interacting with the OIDC provider.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { OAuth2Client } from \"@badgateway/oauth2-client\";\nimport {\n    Injectable,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../crypto/crypto.service\";\nimport { RegistrationCertificateRequest } from \"../verifier/presentations/dto/vp-request.dto\";\nimport { PresentationsService } from \"../verifier/presentations/presentations.service\";\nimport { RegistrarEntity } from \"./entities/registrar.entity\";\nimport {\n    accessCertificateControllerRegister,\n    registrationCertificateControllerAll,\n    registrationCertificateControllerRegister,\n    relyingPartyControllerFindAll,\n    relyingPartyControllerRegister,\n} from \"./generated\";\nimport { client } from \"./generated/client.gen\";\n\n/**\n * RegistrarService is responsible for managing the interaction with the registrar,\n * including adding relying parties, access certificates, and registration certificates.\n */\n@Injectable()\nexport class RegistrarService implements OnApplicationBootstrap, OnModuleInit {\n    /**\n     * OAuth2 client for interacting with the OIDC provider.\n     */\n    private oauth2Client: OAuth2Client;\n    /**\n     * Client for interacting with the registrar API.\n     */\n    private client: typeof client;\n    /**\n     * Access token for authenticating requests to the registrar.\n     */\n    private accessToken: string;\n\n    /**\n     * Constructor for the RegistrarService.\n     * @param configService - Instance of ConfigService for accessing configuration values.\n     * @param cryptoService - Instance of CryptoService for cryptographic operations.\n     * @param presentationsService - Instance of PresentationsService for handling presentations.\n     */\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private presentationsService: PresentationsService,\n        @InjectRepository(RegistrarEntity)\n        private registrarRepository: Repository,\n    ) {}\n\n    /**\n     * Initializes the OAuth2 client and registrar client with the necessary configurations.\n     */\n    onModuleInit() {\n        //when not set, we will not use the registrar\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const oidcIssuerUrl =\n            this.configService.getOrThrow(\"REGISTRAR_OIDC_URL\");\n        const clientId = this.configService.getOrThrow(\n            \"REGISTRAR_OIDC_CLIENT_ID\",\n        );\n        const clientSecret = this.configService.getOrThrow(\n            \"REGISTRAR_OIDC_CLIENT_SECRET\",\n        );\n\n        this.oauth2Client = new OAuth2Client({\n            server: `${oidcIssuerUrl}/protocol/openid-connect/token`,\n            clientId,\n            clientSecret,\n            discoveryEndpoint: `${oidcIssuerUrl}/.well-known/openid-configuration`,\n        });\n\n        this.client = client;\n        this.client.setConfig({\n            baseUrl: this.configService.getOrThrow(\"REGISTRAR_URL\"),\n            auth: () => this.accessToken,\n        });\n    }\n\n    /**\n     * Checks if the registrar service is enabled based on the configuration.\n     * @returns True if the registrar service is enabled, false otherwise.\n     */\n    isEnabled() {\n        return !!this.configService.get(\"REGISTRAR_URL\");\n    }\n\n    /**\n     * This function is called when the application starts.\n     * It will refresh the access token for the registrar.\n     */\n    async onApplicationBootstrap() {\n        if (!this.configService.get(\"REGISTRAR_URL\")) {\n            return;\n        }\n        await this.refreshAccessToken();\n    }\n\n    /**\n     * This function is called when a tenant is initialized.\n     * @param tenantId\n     */\n    async onTenantInit(tenantId: string) {\n        if (!this.isEnabled()) {\n            return;\n        }\n        //TODO: pass name by call\n        const name = this.configService.getOrThrow(\"RP_NAME\");\n        const relyingPartyId = await this.addRp(name);\n        const accessCertificateId = await this.addAccessCertificate(\n            tenantId,\n            relyingPartyId,\n        );\n        await this.registrarRepository.save({\n            tenantId,\n            relyingPartyId,\n            accessCertificateId,\n        });\n    }\n\n    /**\n     * Refreshes the access token for the registrar using client credentials.\n     * This method is called periodically to ensure the access token is valid.\n     */\n    async refreshAccessToken() {\n        await this.oauth2Client.clientCredentials().then((token) => {\n            this.accessToken = token.accessToken;\n            const date = new Date();\n            const expirationDate = new Date(token.expiresAt as number);\n            setTimeout(\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                () => this.refreshAccessToken(),\n                expirationDate.getTime() - date.getTime() - 1000,\n            );\n        });\n    }\n\n    /**\n     * Adds a new relying party to the registrar.\n     * This is only needed once, when the relying party is created.\n     */\n    addRp(name: string): Promise {\n        return relyingPartyControllerRegister({\n            client: this.client,\n            body: {\n                name,\n            },\n        }).then(async (response) => {\n            let rpId: string;\n            if (response.error) {\n                rpId = await this.getExistingRp(name);\n            } else {\n                rpId = response.data![\"id\"];\n            }\n            return rpId;\n        });\n    }\n\n    /**\n     * Stores the existing relying party ID based on the name.\n     * This is used when the relying party already exists in the registrar.\n     * @param name - The name of the relying party.\n     * @returns The ID of the existing relying party.\n     */\n    private getExistingRp(name: string) {\n        return relyingPartyControllerFindAll({\n            client: this.client,\n            query: {\n                name,\n            },\n        }).then((response) => {\n            return response.data!.find((item) => item.name === name)?.id!;\n        });\n    }\n\n    /**\n     * Add a new access certificate to the registrar.\n     * This is only needed once, when the access certificate is created.\n     * If the access certificate already exists, it will be returned.\n     * @returns\n     */\n    private async addAccessCertificate(\n        tenantId: string,\n        relyingPartyId: string,\n    ): Promise {\n        const keyId = await this.cryptoService.keyService.getKid(tenantId);\n        const host = this.configService\n            .getOrThrow(\"PUBLIC_URL\")\n            .replace(\"https://\", \"\");\n        return accessCertificateControllerRegister({\n            client: this.client,\n            body: {\n                publicKey: await this.cryptoService.keyService.getPublicKey(\n                    \"pem\",\n                    tenantId,\n                    keyId,\n                ),\n                dns: [host],\n            },\n            path: {\n                rp: relyingPartyId,\n            },\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\"Error adding access certificate:\", res.error);\n                throw new Error(\"Error adding access certificate\");\n            }\n            //store the cert\n            await this.cryptoService.storeAccessCertificate(\n                res.data![\"crt\"],\n                tenantId,\n                keyId,\n            );\n            return res.data![\"id\"];\n        });\n    }\n\n    /**\n     * Add a new registration certificate to the registrar.\n     * This is only needed once, when the registration certificate is created.\n     * If the registration certificate already exists, it will be returned.\n     * @returns\n     */\n    async addRegistrationCertificate(\n        req: RegistrationCertificateRequest,\n        //TODO: check if the dcql_query is covered by the registration certificate. If not, we need to throw an error since we do not know the new purpose for it.\n        dcql_query: any,\n        requestId: string,\n        tenantId: string,\n    ) {\n        const entry = await this.registrarRepository.findOneByOrFail({\n            tenantId,\n        });\n\n        //TODO: need to check if the access certificate is bound to the access certificate with the subject. Also that the requested fields are matching.\n\n        const certs =\n            (await registrationCertificateControllerAll({\n                client: this.client,\n                path: {\n                    rp: entry.relyingPartyId,\n                },\n            }).then((res) =>\n                res.data?.filter(\n                    (cert) =>\n                        cert.revoked == null && cert.id === (req.id as string),\n                ),\n            )) || [];\n\n        if (certs?.length > 0) {\n            return certs[0].jwt;\n        }\n\n        return registrationCertificateControllerRegister({\n            client: this.client,\n            path: {\n                rp: entry.relyingPartyId,\n            },\n            body: req.body,\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\n                    \"Error adding registration certificate:\",\n                    res.error,\n                );\n                throw new Error(\"Error adding registration certificate\");\n            }\n\n            //TODO: write the ID to the config so its easier to use it. Easier than writing the comparison algorithm (any maybe someone wants to use a different one)\n            await this.presentationsService.storeRCID(\n                res.data![\"id\"],\n                requestId,\n                tenantId,\n            );\n            return res.data![\"jwt\"];\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistrationCertificateRequest.html":{"url":"classes/RegistrationCertificateRequest.html","title":"class - RegistrationCertificateRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistrationCertificateRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/vp-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrationCertificateRequest DTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                body\n                            \n                            \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RegistrationCertificateCreation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:17\n                        \n                    \n\n            \n                \n                    The body of the registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:12\n                        \n                    \n\n            \n                \n                    Identifier of the registration certificate that got issued.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsString } from 'class-validator';\nimport { RegistrationCertificateCreation } from '../../../registrar/generated';\n\n/**\n * RegistrationCertificateRequest DTO\n */\nexport class RegistrationCertificateRequest {\n    /**\n     * Identifier of the registration certificate that got issued.\n     */\n    @IsString()\n    id?: string;\n    /**\n     * The body of the registration certificate request containing the necessary details.\n     */\n    @IsObject()\n    body: RegistrationCertificateCreation;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ResolverModule.html":{"url":"modules/ResolverModule.html","title":"module - ResolverModule","body":"\n                   \n\n\n\n\n    Modules\n    ResolverModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_exports\n\n\n\ncluster_ResolverModule_providers\n\n\n\n\nResolverService \n\nResolverService \n\n\n\nResolverModule\n\nResolverModule\n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/resolver/resolver.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from '@nestjs/axios';\nimport { Module } from '@nestjs/common';\nimport { ResolverService } from './resolver.service';\n\n@Module({\n    imports: [HttpModule],\n    providers: [ResolverService],\n    exports: [ResolverService],\n})\nexport class ResolverModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResolverService.html":{"url":"injectables/ResolverService.html","title":"injectable - ResolverService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResolverService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/resolver.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for resolving public keys from JWT payloads and headers.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                resolvePublicKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/resolver/resolver.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resolvePublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolvePublicKey(payload: JWTPayload, header: JWK)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/resolver/resolver.service.ts:21\n                        \n                    \n\n\n            \n                \n                        Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWK\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { X509Certificate } from 'node:crypto';\nimport { HttpService } from '@nestjs/axios';\nimport { ConflictException, Injectable } from '@nestjs/common';\nimport { JWK, JWTPayload } from 'jose';\nimport { firstValueFrom } from 'rxjs';\nimport { IssuerMetadata } from './dto/issuer-metadata.dto';\n\n/**\n * Service for resolving public keys from JWT payloads and headers.\n */\n@Injectable()\nexport class ResolverService {\n    constructor(private httpService: HttpService) {}\n\n    /**\n     * Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n     * @param payload\n     * @param header\n     * @returns\n     */\n    async resolvePublicKey(payload: JWTPayload, header: JWK): Promise {\n        if (!payload.iss) {\n            throw new Error('Issuer not found');\n        }\n\n        if (header.x5c) {\n            //TODO: validate the certificate and the chain of trust!\n            const certs = header.x5c.map(\n                (cert) => new X509Certificate(Buffer.from(cert, 'base64')),\n            );\n            const cert = certs[0];\n            if (!cert.subjectAltName?.includes(new URL(payload.iss).hostname)) {\n                throw new Error('Subject and issuer do not match');\n            }\n            return cert.publicKey.export({ format: 'jwk' }) as JWK;\n        }\n        //checl if the key is in the header as jwk\n        if (header['jwk']) {\n            return header['jwk'] as JWK;\n        }\n\n        const response = await firstValueFrom(\n            this.httpService.get(\n                `${payload.iss}/.well-known/jwt-vc-issuer`,\n            ),\n        ).then(\n            (r) => r.data,\n            () => {\n                throw new ConflictException('Issuer not reachable');\n            },\n        );\n        const key = response.jwks.keys.find((key) => key.kid === header.kid);\n        if (!key) {\n            throw new Error('Key not found');\n        }\n        return key;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/S3FileStorage.html":{"url":"classes/S3FileStorage.html","title":"class - S3FileStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  S3FileStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/adapters/s3.storage.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            FileStorage\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                exists\n                            \n                            \n                                getSignedUrl\n                            \n                            \n                                    Async\n                                getStream\n                            \n                            \n                                    Async\n                                put\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(s3: S3Client, bucket: string, publicBaseUrl?: string)\n                    \n                \n                        \n                            \n                                Defined in src/storage/adapters/s3.storage.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        s3\n                                                  \n                                                        \n                                                                        S3Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        bucket\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        publicBaseUrl\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        exists\n                        \n                    \n                \n            \n            \n                \n                        \n                    exists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSignedUrl\n                        \n                    \n                \n            \n            \n                \ngetSignedUrl(key: string, expiresInSec: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresInSec\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStream\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        put\n                        \n                    \n                \n            \n            \n                \n                        \n                    put(key: string, body: Buffer | Readable, opts?: PutOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        Buffer | Readable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            PutOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    DeleteObjectCommand,\n    GetObjectCommand,\n    HeadObjectCommand,\n    PutObjectCommand,\n    S3Client,\n} from \"@aws-sdk/client-s3\";\nimport { getSignedUrl as sign } from \"@aws-sdk/s3-request-presigner\";\nimport { Readable } from \"stream\";\nimport { FileStorage, PutOptions, StoredObject } from \"../storage.types\";\n\nexport class S3FileStorage implements FileStorage {\n    constructor(\n        private s3: S3Client,\n        private bucket: string,\n        private publicBaseUrl?: string, // e.g. CloudFront URL (optional)\n    ) {}\n\n    async put(\n        key: string,\n        body: Buffer | Readable,\n        opts?: PutOptions,\n    ): Promise {\n        await this.s3.send(\n            new PutObjectCommand({\n                Bucket: this.bucket,\n                Key: key,\n                Body: body,\n                ContentType: opts?.contentType,\n                Metadata: opts?.metadata,\n                ACL: opts?.acl === \"public\" ? \"public-read\" : undefined,\n                ChecksumSHA256: opts?.checksum, // optional if you computed it\n            }),\n        );\n\n        const head = await this.s3.send(\n            new HeadObjectCommand({ Bucket: this.bucket, Key: key }),\n        );\n        const url =\n            opts?.acl === \"public\"\n                ? this.publicBaseUrl\n                    ? `${this.publicBaseUrl.replace(/\\/+$/, \"\")}/${encodeURI(key)}`\n                    : `https://${this.bucket}.s3.amazonaws.com/${encodeURI(key)}`\n                : undefined;\n\n        return {\n            key,\n            etag: head.ETag,\n            size: head.ContentLength,\n            url,\n            contentType: head.ContentType || opts?.contentType,\n        };\n    }\n\n    async getStream(key: string) {\n        const obj = await this.s3.send(\n            new GetObjectCommand({ Bucket: this.bucket, Key: key }),\n        );\n        const stream = obj.Body as Readable;\n        return {\n            stream,\n            contentType: obj.ContentType,\n            size: obj.ContentLength,\n        };\n    }\n\n    async delete(key: string) {\n        await this.s3.send(\n            new DeleteObjectCommand({ Bucket: this.bucket, Key: key }),\n        );\n    }\n\n    async exists(key: string) {\n        try {\n            await this.s3.send(\n                new HeadObjectCommand({ Bucket: this.bucket, Key: key }),\n            );\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    getSignedUrl(key: string, expiresInSec: number) {\n        return Promise.resolve(\n            sign(\n                this.s3,\n                new GetObjectCommand({ Bucket: this.bucket, Key: key }),\n                { expiresIn: expiresInSec },\n            ),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SchemaResponse.html":{"url":"classes/SchemaResponse.html","title":"class - SchemaResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SchemaResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/dto/schema-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                $schema\n                            \n                            \n                                properties\n                            \n                            \n                                required\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        $schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'https://json-schema.org/draft/2020-12/schema'\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        required\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'object'\n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class SchemaResponse {\n    $schema = 'https://json-schema.org/draft/2020-12/schema';\n    type = 'object';\n    properties: Record;\n    required: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Session.html":{"url":"entities/Session.html","title":"entity - Session","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Session\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/entities/session.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a user session in the application.\nIt includes various properties such as credentials, authorization code,\nrequest URI, authorization queries, and more.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                auth_queries\n                            \n                            \n                                    \n                                    Optional\n                                authorization_code\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                credentialPayload\n                            \n                            \n                                    \n                                    Optional\n                                credentials\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                issuanceId\n                            \n                            \n                                    \n                                    Optional\n                                nonce\n                            \n                            \n                                    \n                                notifications\n                            \n                            \n                                    \n                                    Optional\n                                notifyWebhook\n                            \n                            \n                                    \n                                    Optional\n                                offer\n                            \n                            \n                                    \n                                    Optional\n                                offerUrl\n                            \n                            \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                    Optional\n                                requestId\n                            \n                            \n                                    \n                                    Optional\n                                requestUrl\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    Optional\n                                vp_nonce\n                            \n                            \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        auth_queries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthorizeQueries\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:79\n                        \n                    \n\n            \n                \n                    Authorization queries associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        authorization_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:69\n                        \n                    \n\n            \n                \n                    Authorization code for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:96\n                        \n                    \n\n            \n                \n                    Credential offer object containing details about the credential offer or presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentialPayload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OfferRequestDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:113\n                        \n                    \n\n            \n                \n                    Credential payload containing the offer request details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :     VerificationResult[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:64\n                        \n                    \n\n            \n                \n                    Verified credentials from the verification process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:43\n                        \n                    \n\n            \n                \n                    Unique identifier for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        issuanceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        nonce\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:90\n                        \n                    \n\n            \n                \n                    Nonce used for the OID4VCI flow.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Notification[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:128\n                        \n                    \n\n            \n                \n                    Notifications associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        notifyWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:123\n                        \n                    \n\n            \n                \n                    Webhook configuration to send the result of the notification response.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        offer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CredentialOfferObject\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:101\n                        \n                    \n\n            \n                \n                    Credential offer object containing details about the credential offer or presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        offerUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:107\n                        \n                    \n\n            \n                \n                    Offer URL for the credential offer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:74\n                        \n                    \n\n            \n                \n                    Request URI from the authorization request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        requestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:52\n                        \n                    \n\n            \n                \n                    The ID of the presentation configuration associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        requestUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:58\n                        \n                    \n\n            \n                \n                    The URL of the presentation auth request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SessionStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true, default: 'active'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:136\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:133\n                        \n                    \n\n            \n                \n                    Tenant ID for multi-tenancy support.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        vp_nonce\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:84\n                        \n                    \n\n            \n                \n                    Noncce from the Verifiable Presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:118\n                        \n                    \n\n            \n                \n                    Webhook configuration to send result and may receive further information.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n    CredentialOfferObject,\n    NotificationEvent,\n} from '@openid4vc/openid4vci';\nimport { VerificationResult } from '@sd-jwt/sd-jwt-vc';\nimport { Column, Entity, PrimaryColumn } from 'typeorm';\nimport { AuthorizeQueries } from '../../issuer/authorize/dto/authorize-request.dto';\nimport { OfferRequestDto } from '../../issuer/oid4vci/dto/offer-request.dto';\nimport { WebhookConfig } from '../../utils/webhook/webhook.dto';\n\nexport type SessionStatus = 'active' | 'completed' | 'expired' | 'failed';\n\n/**\n * Represents a session entity for managing user sessions in the application.\n */\nexport type Notification = {\n    /**\n     * Unique identifier for the notification.\n     */\n    id: string;\n    /**\n     * The type of notification.\n     */\n    event?: NotificationEvent;\n\n    /**\n     * The credential ID associated with the notification.\n     */\n    credentialConfigurationId: string;\n};\n\n/**\n * Entity representing a user session in the application.\n * It includes various properties such as credentials, authorization code,\n * request URI, authorization queries, and more.\n */\n@Entity()\nexport class Session {\n    /**\n     * Unique identifier for the session.\n     */\n    @PrimaryColumn('uuid')\n    id: string;\n\n    @Column('varchar', { nullable: true })\n    issuanceId?: string;\n\n    /**\n     * The ID of the presentation configuration associated with the session.\n     */\n    @Column('varchar', { nullable: true })\n    requestId?: string;\n\n    /**\n     * The URL of the presentation auth request.\n     */\n    @Column('varchar', { nullable: true })\n    requestUrl?: string;\n\n    /**\n     * Verified credentials from the verification process.\n     */\n    @Column('json', { nullable: true })\n    credentials?: VerificationResult[];\n    /**\n     * Authorization code for the session.\n     */\n    @Column('varchar', { nullable: true })\n    authorization_code?: string;\n    /**\n     * Request URI from the authorization request.\n     */\n    @Column('varchar', { nullable: true })\n    request_uri?: string;\n    /**\n     * Authorization queries associated with the session.\n     */\n    @Column('json', { nullable: true })\n    auth_queries?: AuthorizeQueries;\n    /**\n     * Noncce from the Verifiable Presentation request.\n     */\n    @Column('varchar', { nullable: true })\n    vp_nonce?: string;\n\n    /**\n     * Nonce used for the OID4VCI flow.\n     */\n    @Column('varchar', { nullable: true })\n    nonce?: string;\n\n    /**\n     * Credential offer object containing details about the credential offer or presentation request.\n     */\n    @Column({ type: 'date', default: () => 'CURRENT_TIMESTAMP' })\n    createdAt: Date;\n    /**\n     * Credential offer object containing details about the credential offer or presentation request.\n     */\n    @Column('json', { nullable: true })\n    offer?: CredentialOfferObject;\n\n    /**\n     * Offer URL for the credential offer.\n     */\n    @Column('varchar', { nullable: true })\n    offerUrl?: string;\n\n    /**\n     * Credential payload containing the offer request details.\n     */\n    @Column('json', { nullable: true })\n    credentialPayload?: OfferRequestDto;\n    /**\n     * Webhook configuration to send result and may receive further information.\n     */\n    @Column('json', { nullable: true })\n    webhook?: WebhookConfig;\n    /**\n     * Webhook configuration to send the result of the notification response.\n     */\n    @Column('json', { nullable: true })\n    notifyWebhook?: WebhookConfig;\n    /**\n     * Notifications associated with the session.\n     */\n    @Column('json', { default: JSON.stringify([]) })\n    notifications: Notification[];\n    /**\n     * Tenant ID for multi-tenancy support.\n     */\n    @Column('varchar')\n    tenantId: string;\n\n    @Column('varchar', { nullable: true, default: 'active' })\n    status: SessionStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SessionController.html":{"url":"controllers/SessionController.html","title":"controller - SessionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SessionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                session\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteSession\n                            \n                            \n                                    \n                                getAllSessions\n                            \n                            \n                                    \n                                getSession\n                            \n                            \n                                    \n                                revokeAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteSession(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:51\n                        \n                    \n\n\n            \n                \n                        Deletes a session by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getAllSessions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllSessions()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:31\n                        \n                    \n\n\n            \n                \n                        Retrieves all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSession(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:40\n                        \n                    \n\n\n            \n                \n                        Retrieves the session information for a given session ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe identifier of the session.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        revokeAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    revokeAll(value: StatusUpdateDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('revoke')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:64\n                        \n                    \n\n\n            \n                \n                        Update the status of the credentials of a specific session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    UseGuards,\n} from '@nestjs/common';\nimport { ApiSecurity, ApiTags } from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../auth/auth.guard';\nimport { Token, TokenPayload } from '../auth/token.decorator';\nimport { StatusUpdateDto } from '../issuer/status-list/dto/status-update.dto';\nimport { StatusListService } from '../issuer/status-list/status-list.service';\nimport { Session } from './entities/session.entity';\nimport { SessionService } from './session.service';\n\n@ApiTags('Session management')\n@UseGuards(JwtAuthGuard)\n@ApiSecurity('oauth2')\n@Controller('session')\nexport class SessionController {\n    constructor(\n        private readonly sessionService: SessionService,\n        private readonly statusListService: StatusListService,\n    ) {}\n\n    /**\n     * Retrieves all sessions.\n     */ @Get()\n    getAllSessions(): Promise {\n        return this.sessionService.getAll();\n    }\n\n    /**\n     * Retrieves the session information for a given session ID.\n     * @param id - The identifier of the session.\n     */\n    @Get(':id')\n    getSession(@Param('id') id: string): Promise {\n        return this.sessionService.get(id);\n    }\n\n    /**\n     * Deletes a session by its ID.\n     * @param id\n     * @param user\n     * @returns\n     */\n    @Delete(':id')\n    deleteSession(\n        @Param('id') id: string,\n        @Token() user: TokenPayload,\n    ): Promise {\n        return this.sessionService.delete(id, user.sub);\n    }\n\n    /**\n     * Update the status of the credentials of a specific session.\n     * @param value\n     * @returns\n     */\n    @Post('revoke')\n    revokeAll(@Body() value: StatusUpdateDto, @Token() user: TokenPayload) {\n        return this.statusListService.updateStatus(value, user.sub);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/SessionGuard.html":{"url":"guards/SessionGuard.html","title":"guard - SessionGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    SessionGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/session/session.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionService: SessionService)\n                    \n                \n                        \n                            \n                                Defined in src/session/session.guard.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.guard.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n    CanActivate,\n    ExecutionContext,\n    Injectable,\n    NotFoundException,\n} from '@nestjs/common';\nimport { SessionService } from './session.service';\n\n@Injectable()\nexport class SessionGuard implements CanActivate {\n    constructor(private readonly sessionService: SessionService) {}\n\n    async canActivate(context: ExecutionContext): Promise {\n        const request = context.switchToHttp().getRequest();\n        const sessionId = request.params.session;\n        if (!sessionId) {\n            throw new NotFoundException(\n                'Session ID not found in request parameters',\n            );\n        }\n        const session = await this.sessionService.get(sessionId);\n        if (!session) {\n            throw new NotFoundException(\n                `Session with ID ${sessionId} not found`,\n            );\n        }\n        request.session = session;\n        return true;\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SessionLogContext.html":{"url":"interfaces/SessionLogContext.html","title":"interface - SessionLogContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SessionLogContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger-context.ts\n        \n\n\n            \n                Description\n            \n            \n                Context for session logging, including session ID, tenant ID, flow type, and optional stage.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            flowType\n                                        \n                                \n                                \n                                        \n                                            sessionId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stage\n                                        \n                                \n                                \n                                        \n                                            tenantId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger-context.ts:21\n                            \n                        \n                \n                    \n                        Additional context information for the session.\n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        flowType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        flowType:     \"OID4VCI\" | \"OID4VP\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"OID4VCI\" | \"OID4VP\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Type of flow being logged (e.g., OID4VCI, OID4VP).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sessionId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sessionId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier for the session.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional stage of the flow, useful for tracking progress.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tenantId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tenantId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identifier for the tenant associated with the session.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SessionLogContext {\n    /**\n     * Unique identifier for the session.\n     */\n    sessionId: string;\n    /**\n     * Identifier for the tenant associated with the session.\n     */\n    tenantId: string;\n    /**\n     * Type of flow being logged (e.g., OID4VCI, OID4VP).\n     */\n    flowType: 'OID4VCI' | 'OID4VP';\n    /**\n     * Optional stage of the flow, useful for tracking progress.\n     */\n    stage?: string;\n    /**\n     * Additional context information for the session.\n     */\n    [key: string]: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerInterceptor.html":{"url":"injectables/SessionLoggerInterceptor.html","title":"injectable - SessionLoggerInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor for logging session-related requests and responses.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                isEnabled\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                            \n                                    Private\n                                sanitizeBody\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, logger: PinoLogger, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger.interceptor.ts:19\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerInterceptor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nReflector instance for accessing metadata.\n\n\n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPinoLogger instance for logging.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfigService for accessing configuration.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.interceptor.ts:44\n                        \n                    \n\n\n            \n                \n                        Intercepts the request and logs session-related information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nExecution context of the request.\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCall handler to proceed with the request.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that emits the response data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sanitizeBody\n                        \n                    \n                \n            \n            \n                \n                        \n                    sanitizeBody(body: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.interceptor.ts:136\n                        \n                    \n\n\n            \n                \n                        Sanitizes the request body to remove sensitive information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request body to sanitize.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Sanitized body.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        isEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/session-logger.interceptor.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    CallHandler,\n    ExecutionContext,\n    Injectable,\n    NestInterceptor,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Reflector } from '@nestjs/core';\nimport { PinoLogger } from 'nestjs-pino';\nimport { Observable } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { SESSION_LOGGER_KEY } from './session-logger.decorator';\n\n/**\n * Interceptor for logging session-related requests and responses.\n */\n@Injectable()\nexport class SessionLoggerInterceptor implements NestInterceptor {\n    private readonly isEnabled: boolean;\n\n    /**\n     * Constructor for SessionLoggerInterceptor.\n     * @param reflector - Reflector instance for accessing metadata.\n     * @param logger - PinoLogger instance for logging.\n     * @param configService - ConfigService for accessing configuration.\n     */\n    constructor(\n        private readonly reflector: Reflector,\n        private readonly logger: PinoLogger,\n        private readonly configService: ConfigService,\n    ) {\n        this.isEnabled = this.configService.get(\n            'LOG_ENABLE_SESSION_LOGGER',\n            false,\n        );\n    }\n\n    /**\n     * Intercepts the request and logs session-related information.\n     * @param context - Execution context of the request.\n     * @param next - Call handler to proceed with the request.\n     * @returns An observable that emits the response data.\n     */\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        const metadata = this.reflector.get(\n            SESSION_LOGGER_KEY,\n            context.getHandler(),\n        );\n\n        if (!metadata || !this.isEnabled) {\n            return next.handle();\n        }\n\n        const { sessionIdParam, flowType } = metadata;\n        const request = context.switchToHttp().getRequest();\n        const response = context.switchToHttp().getResponse();\n\n        const sessionId = request.params[sessionIdParam];\n\n        const tenantId = request.params?.tenantId;\n        const method = request.method;\n        const url = request.url;\n\n        // Set context for this logger instance\n        this.logger.setContext('SessionLogger');\n\n        // Create log context\n        const logContext = {\n            sessionId,\n            tenantId,\n            flowType,\n            endpoint: `${method} ${url}`,\n        };\n\n        // Log the start of the request\n        this.logger.info(\n            {\n                ...logContext,\n                event: 'request_start',\n                method,\n                url,\n                headers: {\n                    'user-agent': request.headers['user-agent'],\n                    'content-type': request.headers['content-type'],\n                },\n                body: this.sanitizeBody(request.body),\n            },\n            `[${flowType}] Starting ${method} ${url} for session ${sessionId}`,\n        );\n\n        const startTime = Date.now();\n\n        return next.handle().pipe(\n            tap((data) => {\n                const duration = Date.now() - startTime;\n                this.logger.info(\n                    {\n                        ...logContext,\n                        event: 'request_success',\n                        method,\n                        url,\n                        statusCode: response.statusCode,\n                        duration,\n                        responseSize: JSON.stringify(data || {}).length,\n                    },\n                    `[${flowType}] Completed ${method} ${url} for session ${sessionId} in ${duration}ms`,\n                );\n            }),\n            catchError((error) => {\n                const duration = Date.now() - startTime;\n                this.logger.error(\n                    {\n                        ...logContext,\n                        event: 'request_error',\n                        method,\n                        url,\n                        error: {\n                            name: error.name,\n                            message: error.message,\n                            stack: error.stack,\n                        },\n                        duration,\n                    },\n                    `[${flowType}] Error in ${method} ${url} for session ${sessionId}: ${error.message}`,\n                );\n                throw error;\n            }),\n        );\n    }\n\n    /**\n     * Sanitizes the request body to remove sensitive information.\n     * @param body - The request body to sanitize.\n     * @returns Sanitized body.\n     */\n    private sanitizeBody(body: any): any {\n        if (!body) return body;\n\n        // Create a copy to avoid modifying the original\n        const sanitized = { ...body };\n\n        // Remove sensitive fields\n        const sensitiveFields = [\n            'password',\n            'token',\n            'secret',\n            'key',\n            'private_key',\n            'access_token',\n            'refresh_token',\n        ];\n\n        sensitiveFields.forEach((field) => {\n            if (sanitized[field]) {\n                sanitized[field] = '[REDACTED]';\n            }\n        });\n\n        return sanitized;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerService.html":{"url":"injectables/SessionLoggerService.html","title":"injectable - SessionLoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for logging session-related events and errors.\nUses PinoLogger for structured logging.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                isEnabled\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logAuthorizationRequest\n                            \n                            \n                                logCredentialIssuance\n                            \n                            \n                                logCredentialVerification\n                            \n                            \n                                logFlowComplete\n                            \n                            \n                                logFlowError\n                            \n                            \n                                logFlowStart\n                            \n                            \n                                logNotification\n                            \n                            \n                                logSession\n                            \n                            \n                                logSessionError\n                            \n                            \n                                logTokenExchange\n                            \n                            \n                                    Private\n                                shouldLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: PinoLogger, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger.service.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPinoLogger instance for logging.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfigService for accessing environment configuration.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \nlogAuthorizationRequest(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:146\n                        \n                    \n\n\n            \n                \n                        Log authorization request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialIssuance\n                        \n                    \n                \n            \n            \n                \nlogCredentialIssuance(context: SessionLogContext, credentialType: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Log credential issuance step\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialVerification\n                        \n                    \n                \n            \n            \n                \nlogCredentialVerification(context: SessionLogContext, verificationResult: boolean, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Log credential presentation verification\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                verificationResult\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowComplete\n                        \n                    \n                \n            \n            \n                \nlogFlowComplete(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Log session flow completion\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowError\n                        \n                    \n                \n            \n            \n                \nlogFlowError(context: SessionLogContext, error: Error, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Log session flow error\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowStart\n                        \n                    \n                \n            \n            \n                \nlogFlowStart(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Log session flow start\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logNotification\n                        \n                    \n                \n            \n            \n                \nlogNotification(context: SessionLogContext, notificationEvent: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:180\n                        \n                    \n\n\n            \n                \n                        Log notification events\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                notificationEvent\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSession\n                        \n                    \n                \n            \n            \n                \nlogSession(context: SessionLogContext, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:202\n                        \n                    \n\n\n            \n                \n                        Generic session log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSessionError\n                        \n                    \n                \n            \n            \n                \nlogSessionError(context: SessionLogContext, error: Error, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:221\n                        \n                    \n\n\n            \n                \n                        Generic session error log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logTokenExchange\n                        \n                    \n                \n            \n            \n                \nlogTokenExchange(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:163\n                        \n                    \n\n\n            \n                \n                        Log token exchange\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldLog\n                        \n                    \n                \n            \n            \n                \n                        \n                    shouldLog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        isEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/session-logger.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PinoLogger } from 'nestjs-pino';\nimport { SessionLogContext } from './session-logger-context';\n\n/**\n * Service for logging session-related events and errors.\n * Uses PinoLogger for structured logging.\n */\n@Injectable()\nexport class SessionLoggerService {\n    private readonly isEnabled: boolean;\n\n    /**\n     * Constructor for SessionLoggerService.\n     * @param logger - PinoLogger instance for logging.\n     * @param configService - ConfigService for accessing environment configuration.\n     */\n    constructor(\n        private readonly logger: PinoLogger,\n        private readonly configService: ConfigService,\n    ) {\n        this.logger.setContext('SessionLoggerService');\n        this.isEnabled = this.configService.get(\n            'LOG_ENABLE_SESSION_LOGGER',\n            false,\n        );\n    }\n\n    private shouldLog(): boolean {\n        return this.isEnabled;\n    }\n\n    /**\n     * Log session flow start\n     */\n    logFlowStart(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow started for session ${context.sessionId} in tenant ${context.tenantId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'flow_start',\n                stage: 'initialization',\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow completion\n     */\n    logFlowComplete(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow completed for session ${context.sessionId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'flow_complete',\n                stage: 'completion',\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow error\n     */\n    logFlowError(\n        context: SessionLogContext,\n        error: Error,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow error for session ${context.sessionId}: ${error.message}`;\n\n        this.logger.error(\n            {\n                ...context,\n                event: 'flow_error',\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log credential issuance step\n     */\n    logCredentialIssuance(\n        context: SessionLogContext,\n        credentialType: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'credential_issuance',\n                stage: 'credential_creation',\n                credentialType,\n                ...additionalData,\n            },\n            `[${context.flowType}] Issuing credential of type ${credentialType} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log credential presentation verification\n     */\n    logCredentialVerification(\n        context: SessionLogContext,\n        verificationResult: boolean,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'credential_verification',\n                stage: 'verification',\n                verificationResult,\n                ...additionalData,\n            },\n            `[${context.flowType}] Credential verification ${verificationResult ? 'succeeded' : 'failed'} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log authorization request\n     */\n    logAuthorizationRequest(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'authorization_request',\n                stage: 'authorization',\n                ...additionalData,\n            },\n            `[${context.flowType}] Authorization request created for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log token exchange\n     */\n    logTokenExchange(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'token_exchange',\n                stage: 'token_exchange',\n                ...additionalData,\n            },\n            `[${context.flowType}] Token exchange for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log notification events\n     */\n    logNotification(\n        context: SessionLogContext,\n        notificationEvent: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: 'notification',\n                stage: 'notification',\n                notificationEvent,\n                ...additionalData,\n            },\n            `[${context.flowType}] Notification ${notificationEvent} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Generic session log method\n     */\n    logSession(\n        context: SessionLogContext,\n        message: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}`,\n        );\n    }\n\n    /**\n     * Generic session error log method\n     */\n    logSessionError(\n        context: SessionLogContext,\n        error: Error,\n        message: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.error(\n            {\n                ...context,\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}: ${error.message}`,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SessionModule.html":{"url":"modules/SessionModule.html","title":"module - SessionModule","body":"\n                   \n\n\n\n\n    Modules\n    SessionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_imports\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_SessionModule_exports\n\n\n\n\nStatusListModule\n\nStatusListModule\n\n\n\nSessionModule\n\nSessionModule\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/session/session.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            SessionModule is responsible for managing user sessions.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SessionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SessionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SessionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { makeGaugeProvider } from '@willsoto/nestjs-prometheus';\nimport * as Joi from 'joi';\nimport { StatusListModule } from '../issuer/status-list/status-list.module';\nimport { Session } from './entities/session.entity';\nimport { SessionController } from './session.controller';\nimport { SessionService } from './session.service';\n\n/**\n * Module for managing user sessions.\n */\nexport const SESSION_VALIDATION_SCHEMA = {\n    SESSION_TIDY_UP_INTERVAL: Joi.number().default(60 * 60), // default to every hour\n    SESSION_TTL: Joi.number().default(24 * 60 * 60), // default to 24 hours\n};\n\n/**\n * SessionModule is responsible for managing user sessions.\n */\n@Module({\n    imports: [TypeOrmModule.forFeature([Session]), StatusListModule],\n    providers: [\n        SessionService,\n        makeGaugeProvider({\n            name: 'sessions',\n            help: 'Total number of sessions by status',\n            labelNames: ['tenant_id', 'session_type', 'status'],\n        }),\n    ],\n    exports: [SessionService],\n    controllers: [SessionController],\n})\nexport class SessionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionService.html":{"url":"injectables/SessionService.html","title":"injectable - SessionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                getAll\n                            \n                            \n                                getBy\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                    Async\n                                setState\n                            \n                            \n                                tidyUpSessions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionRepository: Repository, configService: ConfigService, schedulerRegistry: SchedulerRegistry, sessionsCounter: Gauge)\n                    \n                \n                        \n                            \n                                Defined in src/session/session.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schedulerRegistry\n                                                  \n                                                        \n                                                                    SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionsCounter\n                                                  \n                                                        \n                                                                    Gauge\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(issuer_state: string, values: QueryDeepPartialEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:135\n                        \n                    \n\n\n            \n                \n                        Update an existing session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            QueryDeepPartialEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(session: DeepPartial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Create a new session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string, sub: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:181\n                        \n                    \n\n\n            \n                \n                        Deletes a session by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                sub\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:152\n                        \n                    \n\n\n            \n                \n                        Get a session by its state.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAll\n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:143\n                        \n                    \n\n\n            \n                \n                        Get all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBy\n                        \n                    \n                \n            \n            \n                \ngetBy(where: FindOptionsWhere)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:161\n                        \n                    \n\n\n            \n                \n                        Get a session by a specific condition.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                            FindOptionsWhere\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Register the tidy up cron job on application bootstrap.\nThis will run every hour by default, but can be configured via the SESSION_TIDY_UP_INTERVAL config variable.\n\n\n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setState\n                        \n                    \n                \n            \n            \n                \n                        \n                    setState(session: Session, status: SessionStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Marks the session as successful or failed.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            SessionStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tidyUpSessions\n                        \n                    \n                \n            \n            \n                \ntidyUpSessions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:168\n                        \n                    \n\n\n            \n                \n                        Tidy up sessions that are older than 1 day.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { SchedulerRegistry } from '@nestjs/schedule';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { InjectMetric } from '@willsoto/nestjs-prometheus/dist/injector';\nimport { Gauge } from 'prom-client';\nimport {\n    DeepPartial,\n    FindOptionsWhere,\n    IsNull,\n    LessThan,\n    Not,\n    Repository,\n} from 'typeorm';\nimport { QueryDeepPartialEntity } from 'typeorm/query-builder/QueryPartialEntity';\nimport { Session, SessionStatus } from './entities/session.entity';\n\n@Injectable()\nexport class SessionService implements OnApplicationBootstrap {\n    constructor(\n        @InjectRepository(Session)\n        private sessionRepository: Repository,\n        private readonly configService: ConfigService,\n        private readonly schedulerRegistry: SchedulerRegistry,\n        @InjectMetric('sessions')\n        private sessionsCounter: Gauge,\n    ) {}\n\n    /**\n     * Register the tidy up cron job on application bootstrap.\n     * This will run every hour by default, but can be configured via the `SESSION_TIDY_UP_INTERVAL` config variable.\n     * @returns\n     */\n    async onApplicationBootstrap() {\n        const callback = () => {\n            void this.tidyUpSessions();\n        };\n        const intervalTime =\n            this.configService.getOrThrow('SESSION_TIDY_UP_INTERVAL') *\n            1000;\n        const interval = setInterval(callback, intervalTime);\n        this.schedulerRegistry.addInterval('tidyUpSessions', interval);\n\n        //set default values for session metrics\n        const tenantId = 'root';\n        const states: SessionStatus[] = [\n            'active',\n            'completed',\n            'expired',\n            'failed',\n        ];\n        for (const state of states) {\n            const issuanceCounter = await this.sessionRepository.countBy({\n                tenantId,\n                issuanceId: Not(IsNull()),\n                status: state,\n            });\n            this.sessionsCounter.set(\n                {\n                    tenant_id: tenantId,\n                    session_type: 'issuance',\n                    status: state,\n                },\n                issuanceCounter,\n            );\n            const verificationCounter = await this.sessionRepository.countBy({\n                tenantId,\n                issuanceId: IsNull(),\n                status: state,\n            });\n            this.sessionsCounter.set(\n                {\n                    tenant_id: tenantId,\n                    session_type: 'verification',\n                    status: state,\n                },\n                verificationCounter,\n            );\n        }\n\n        return this.tidyUpSessions();\n    }\n\n    /**\n     * Create a new session.\n     * @param session\n     * @returns\n     */\n    async create(session: DeepPartial) {\n        const createdSession = await this.sessionRepository.save(session);\n\n        // Count total sessions created\n        this.sessionsCounter.inc({\n            tenant_id: createdSession.tenantId,\n            session_type: createdSession.issuanceId\n                ? 'issuance'\n                : 'verification',\n            status: 'active',\n        });\n\n        return createdSession;\n    }\n\n    /**\n     * Marks the session as successful or failed.\n     * @param session\n     * @param status\n     */\n    async setState(session: Session, status: SessionStatus) {\n        const sessionType = session.issuanceId ? 'issuance' : 'verification';\n\n        await this.sessionRepository.update({ id: session.id }, { status });\n\n        // Count completed sessions (success or failure)\n        this.sessionsCounter.inc({\n            tenant_id: session.tenantId,\n            session_type: sessionType,\n            status,\n        });\n\n        // Decrease active sessions count\n        this.sessionsCounter.dec({\n            tenant_id: session.tenantId,\n            session_type: sessionType,\n            status: 'active',\n        });\n    }\n\n    /**\n     * Update an existing session.\n     * @param issuer_state\n     * @param values\n     * @returns\n     */\n    add(issuer_state: string, values: QueryDeepPartialEntity) {\n        return this.sessionRepository.update({ id: issuer_state }, values);\n    }\n\n    /**\n     * Get all sessions.\n     * @returns\n     */\n    getAll(): Promise {\n        return this.sessionRepository.find();\n    }\n\n    /**\n     * Get a session by its state.\n     * @param state\n     * @returns\n     */\n    get(state: string) {\n        return this.sessionRepository.findOneByOrFail({ id: state });\n    }\n\n    /**\n     * Get a session by a specific condition.\n     * @param where\n     * @returns\n     */\n    getBy(where: FindOptionsWhere) {\n        return this.sessionRepository.findOneByOrFail(where);\n    }\n\n    /**\n     * Tidy up sessions that are older than 1 day.\n     */\n    tidyUpSessions() {\n        const ttl = this.configService.getOrThrow('SESSION_TTL') * 1000;\n        return this.sessionRepository.delete({\n            createdAt: LessThan(new Date(Date.now() - ttl)),\n        });\n    }\n\n    /**\n     * Deletes a session by its ID and tenant ID.\n     * @param id\n     * @param sub\n     * @returns\n     */\n    delete(id: string, sub: string): Promise {\n        return this.sessionRepository.delete({ id, tenantId: sub });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StatusListController.html":{"url":"controllers/StatusListController.html","title":"controller - StatusListController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StatusListController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/status-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getList\n                        \n                    \n                \n            \n            \n                \n                        \n                    getList(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('status-list')@Header('Content-Type', 'application/statuslist+jwt')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.controller.ts:17\n                        \n                    \n\n\n            \n                \n                        Get the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header, Param } from '@nestjs/common';\nimport { ApiExcludeController, ApiTags } from '@nestjs/swagger';\nimport { StatusListService } from './status-list.service';\n\n@ApiExcludeController(process.env.SWAGGER_ALL !== 'true')\n@ApiTags('Status management')\n@Controller(':tenantId/status-management')\nexport class StatusListController {\n    constructor(private statusListService: StatusListService) {}\n\n    /**\n     * Get the status list\n     * @returns\n     */\n    @Get('status-list')\n    @Header('Content-Type', 'application/statuslist+jwt')\n    getList(@Param('tenantId') tenantId: string) {\n        return this.statusListService.getList(tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/StatusListEntity.html":{"url":"entities/StatusListEntity.html","title":"entity - StatusListEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  StatusListEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/entities/status-list.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing the status list for a tenant.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                bits\n                            \n                            \n                                    \n                                elements\n                            \n                            \n                                    \n                                    Optional\n                                jwt\n                            \n                            \n                                    \n                                stack\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        bits\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BitsPerStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:31\n                        \n                    \n\n            \n                \n                    The number of bits used for each status in the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        elements\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:19\n                        \n                    \n\n            \n                \n                    The elements of the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        jwt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:37\n                        \n                    \n\n            \n                \n                    The JSON Web Token (JWT) for the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        stack\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:25\n                        \n                    \n\n            \n                \n                    The stack of available indexes for the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:13\n                        \n                    \n\n            \n                \n                    The ID of the tenant to which the status list belongs.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { BitsPerStatus } from \"@sd-jwt/jwt-status-list\";\nimport { Column, Entity } from \"typeorm\";\n\n/**\n * Entity representing the status list for a tenant.\n */\n@Entity()\nexport class StatusListEntity {\n    /**\n     * The ID of the tenant to which the status list belongs.\n     */\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The elements of the status list.\n     */\n    @Column(\"json\")\n    elements: number[];\n\n    /**\n     * The stack of available indexes for the status list.\n     */\n    @Column(\"json\")\n    stack: number[];\n\n    /**\n     * The number of bits used for each status in the status list.\n     */\n    @Column(\"int\")\n    bits: BitsPerStatus;\n\n    /**\n     * The JSON Web Token (JWT) for the status list.\n     */\n    @Column(\"varchar\", { nullable: true })\n    jwt?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StatusListModule.html":{"url":"modules/StatusListModule.html","title":"module - StatusListModule","body":"\n                   \n\n\n\n\n    Modules\n    StatusListModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_exports\n\n\n\ncluster_StatusListModule_providers\n\n\n\ncluster_StatusListModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/status-list/status-list.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StatusListController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { CryptoModule } from \"../../crypto/crypto.module\";\nimport { StatusListEntity } from \"./entities/status-list.entity\";\nimport { StatusMapping } from \"./entities/status-mapping.entity\";\nimport { StatusListController } from \"./status-list.controller\";\nimport { StatusListService } from \"./status-list.service\";\n\n@Module({\n    imports: [\n        CryptoModule,\n        TypeOrmModule.forFeature([StatusMapping, StatusListEntity]),\n    ],\n    controllers: [StatusListController],\n    providers: [StatusListService],\n    exports: [StatusListService],\n})\nexport class StatusListModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StatusListService.html":{"url":"injectables/StatusListService.html","title":"injectable - StatusListService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StatusListService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEntry\n                            \n                            \n                                    Async\n                                createList\n                            \n                            \n                                getList\n                            \n                            \n                                    Async\n                                onTenantInit\n                            \n                            \n                                    Private\n                                    Async\n                                setEntry\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, statusMappingRepository: Repository, statusListRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/status-list/status-list.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusMappingRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusListRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    createEntry(session: Session, credentialConfigurationId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:115\n                        \n                    \n\n\n            \n                \n                        Get the next free entry in the status list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createList\n                        \n                    \n                \n            \n            \n                \n                        \n                    createList(entry: StatusListEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:59\n                        \n                    \n\n\n            \n                \n                        Create a new status list and stored it in the file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entry\n                                            \n                                                            StatusListEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getList\n                        \n                    \n                \n            \n            \n                \ngetList(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:105\n                        \n                    \n\n\n            \n                \n                        Get the JWT for the status list of a tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The JWT for the status list.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:36\n                        \n                    \n\n\n            \n                \n                        Initialize the status list service by checking if the status list file exists.\nIf it does not exist, create a new status list with 10,000 entries and a stack\nof 10,000 indexes. The stack is shuffled to ensure randomness in the order of\nentries. The status list is stored in the file system as a JSON file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        setEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    setEntry(id: number, value: number, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:157\n                        \n                    \n\n\n            \n                \n                        Update the value of an entry in the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(value: StatusUpdateDto, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:173\n                        \n                    \n\n\n            \n                \n                        Update the status of a session and its credential configuration\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport {\n    createHeaderAndPayload,\n    JWTwithStatusListPayload,\n    StatusList,\n    StatusListJWTHeaderParameters,\n} from \"@sd-jwt/jwt-status-list\";\nimport { JwtPayload } from \"@sd-jwt/types\";\nimport { join } from \"path\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { StatusUpdateDto } from \"./dto/status-update.dto\";\nimport { StatusListEntity } from \"./entities/status-list.entity\";\nimport { StatusMapping } from \"./entities/status-mapping.entity\";\n\n@Injectable()\nexport class StatusListService {\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        @InjectRepository(StatusMapping)\n        private statusMappingRepository: Repository,\n        @InjectRepository(StatusListEntity)\n        private statusListRepository: Repository,\n    ) {}\n\n    /**\n     * Initialize the status list service by checking if the status list file exists.\n     * If it does not exist, create a new status list with 10,000 entries and a stack\n     * of 10,000 indexes. The stack is shuffled to ensure randomness in the order of\n     * entries. The status list is stored in the file system as a JSON file.\n     */\n    async onTenantInit(tenantId: string) {\n        const size = 10000;\n        // create an empty array with the size of 1000\n        const elements = new Array(size).fill(0).map(() => 0);\n        // create a list of 1000 indexes and shuffel them\n        const stack = new Array(size)\n            .fill(0)\n            .map((_, i) => i)\n            .sort(() => 0.5 - Math.random());\n\n        const entry = await this.statusListRepository.save({\n            tenantId,\n            elements,\n            stack,\n            bits: 1,\n        });\n\n        await this.createList(entry);\n    }\n\n    /**\n     * Create a new status list and stored it in the file\n     */\n    async createList(entry: StatusListEntity) {\n        const list = new StatusList(entry.elements, entry.bits);\n        const iss = `${this.configService.getOrThrow(\"PUBLIC_URL\")}`;\n\n        const sub = join(\n            this.configService.getOrThrow(\"PUBLIC_URL\"),\n            entry.tenantId,\n            \"status-management\",\n            \"status-list\",\n        );\n\n        const prePayload: JwtPayload = {\n            iss,\n            sub,\n            iat: Math.floor(Date.now() / 1000),\n        };\n        const preHeader: StatusListJWTHeaderParameters = {\n            alg: \"ES256\",\n            typ: \"statuslist+jwt\",\n            x5c: await this.cryptoService.getCertChain(\n                \"signing\",\n                entry.tenantId,\n            ),\n        };\n        const { header, payload } = createHeaderAndPayload(\n            list,\n            prePayload,\n            preHeader,\n        );\n\n        const jwt = await this.cryptoService.signJwt(\n            header,\n            payload,\n            entry.tenantId,\n        );\n        await this.statusListRepository.update(\n            { tenantId: entry.tenantId },\n            { jwt },\n        );\n    }\n\n    /**\n     * Get the JWT for the status list of a tenant.\n     * @param tenantId The ID of the tenant.\n     * @returns The JWT for the status list.\n     */\n    getList(tenantId: string) {\n        return this.statusListRepository\n            .findOneByOrFail({ tenantId })\n            .then((file) => file.jwt);\n    }\n\n    /**\n     * Get the next free entry in the status list.\n     * @returns\n     */\n    async createEntry(\n        session: Session,\n        credentialConfigurationId: string,\n    ): Promise {\n        const file = await this.statusListRepository.findOneByOrFail({\n            tenantId: session.tenantId,\n        });\n        // get the last element from the stack\n        const idx = file.stack.pop();\n        //TODO: what to do if the stack is empty\n        if (idx === undefined) {\n            throw new Error(\"Stack for status list is empty!!!\");\n        }\n        const sub = join(\n            this.configService.getOrThrow(\"PUBLIC_URL\"),\n            session.tenantId,\n            \"status-management\",\n            \"status-list\",\n        );\n        // store the index in the status mapping\n        await this.statusMappingRepository.save({\n            sessionId: session.id,\n            index: idx,\n            list: sub,\n            credentialConfigurationId,\n        });\n\n        return {\n            status: {\n                status_list: {\n                    idx: idx,\n                    uri: sub,\n                },\n            },\n        };\n    }\n\n    /**\n     * Update the value of an entry in the status list\n     * @param id\n     * @param value\n     */\n    private async setEntry(id: number, value: number, tenantId: string) {\n        const entry = await this.statusListRepository.findOneByOrFail({\n            tenantId,\n        });\n        entry.elements[id] = value;\n        await this.statusListRepository.update(\n            { tenantId },\n            { elements: entry.elements },\n        );\n        return this.createList(entry);\n    }\n\n    /**\n     * Update the status of a session and its credential configuration\n     * @param value\n     */\n    async updateStatus(value: StatusUpdateDto, tenantId: string) {\n        const entries = await this.statusMappingRepository.findBy({\n            sessionId: value.sessionId,\n            credentialConfigurationId: value.credentialConfigurationId,\n        });\n        if (entries.length === 0) {\n            throw new ConflictException(\n                `No status mapping found for session ${value.sessionId} and credential configuration ${value.credentialConfigurationId}`,\n            );\n        }\n        for (const entry of entries) {\n            await this.setEntry(entry.index, value.status, tenantId);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/StatusMapping.html":{"url":"entities/StatusMapping.html","title":"entity - StatusMapping","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  StatusMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/entities/status-mapping.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                credentialConfigurationId\n                            \n                            \n                                    \n                                index\n                            \n                            \n                                    \n                                list\n                            \n                            \n                                    \n                                sessionId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        list\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\n\n@Entity()\nexport class StatusMapping {\n    @Column({ type: 'varchar', primary: true })\n    sessionId: string;\n\n    @Column({ type: 'varchar', primary: true })\n    list: string;\n\n    @Column({ type: 'int', primary: true })\n    index: number;\n\n    @Column({ type: 'varchar', primary: true })\n    credentialConfigurationId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StatusUpdateDto.html":{"url":"classes/StatusUpdateDto.html","title":"class - StatusUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StatusUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/dto/status-update.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                credentialConfigurationId\n                            \n                            \n                                    \n                                sessionId\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:16\n                        \n                    \n\n            \n                \n                    The ID of the credential configuration\nThis is optional, if not provided, all credentials will be revoked of the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:8\n                        \n                    \n\n            \n                \n                    The session ID of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsIn(['0', '1'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:24\n                        \n                    \n\n            \n                \n                    The status of the credential\n0 = valid, 1 = revoked\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsNumber, IsOptional, IsString } from 'class-validator';\n\nexport class StatusUpdateDto {\n    /**\n     * The session ID of the user\n     */\n    @IsString()\n    sessionId: string;\n\n    /**\n     * The ID of the credential configuration\n     * This is optional, if not provided, all credentials will be revoked of the session.\n     */\n    @IsString()\n    @IsOptional()\n    credentialConfigurationId?: string;\n\n    /**\n     * The status of the credential\n     * 0 = valid, 1 = revoked\n     */\n    @IsNumber()\n    @IsIn([0, 1])\n    status: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StorageModule.html":{"url":"modules/StorageModule.html","title":"module - StorageModule","body":"\n                   \n\n\n\n\n    Modules\n    StorageModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/storage/storage.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot()\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.module.ts:51\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { S3Client } from \"@aws-sdk/client-s3\";\nimport { DynamicModule, Global, Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport * as Joi from \"joi\";\nimport { LocalFileStorage } from \"./adapters/local.storage\";\nimport { S3FileStorage } from \"./adapters/s3.storage\";\nimport { FilesService } from \"./files.service\";\nimport { FILE_STORAGE, FileStorage } from \"./storage.types\";\n\ntype Driver = \"local\" | \"s3\";\n\nexport const CONFIG_STORAGE_SCHEMA = {\n    STORAGE_DRIVER: Joi.string().valid(\"local\", \"s3\").default(\"local\"),\n    LOCAL_STORAGE_DIR: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"local\",\n        then: Joi.string().default(\"uploads\"),\n    }),\n    S3_REGION: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_BUCKET: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_ACCESS_KEY_ID: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_SECRET_ACCESS_KEY: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_ENDPOINT: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.optional(),\n    }),\n    S3_FORCE_PATH_STYLE: Joi.boolean().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.boolean().default(false),\n    }),\n    S3_PUBLIC_BASE_URL: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n};\n\n@Global()\n@Module({})\nexport class StorageModule {\n    static forRoot(): DynamicModule {\n        return {\n            module: StorageModule,\n            imports: [ConfigModule.forRoot({ isGlobal: true })],\n            providers: [\n                {\n                    provide: FILE_STORAGE,\n                    inject: [ConfigService],\n                    useFactory: (cfg: ConfigService): FileStorage => {\n                        const driver = cfg.get(\"STORAGE_DRIVER\");\n                        if (driver === \"s3\") {\n                            return new S3FileStorage(\n                                new S3Client({\n                                    region: cfg.get(\"S3_REGION\"),\n                                    endpoint: cfg.get(\"S3_ENDPOINT\"),\n                                    forcePathStyle: cfg.get(\n                                        \"S3_FORCE_PATH_STYLE\",\n                                    ),\n                                    credentials: {\n                                        accessKeyId:\n                                            cfg.get(\n                                                \"S3_ACCESS_KEY_ID\",\n                                            )!,\n                                        secretAccessKey: cfg.get(\n                                            \"S3_SECRET_ACCESS_KEY\",\n                                        )!,\n                                    },\n                                }),\n                                cfg.get(\"S3_BUCKET\")!,\n                                cfg.get(\"S3_PUBLIC_BASE_URL\"),\n                            );\n                        }\n                        // local\n                        return new LocalFileStorage(\n                            cfg.getOrThrow(\"LOCAL_STORAGE_DIR\"),\n                        );\n                    },\n                },\n            ],\n            exports: [FILE_STORAGE],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.decorator.ts\n        \n\n\n            \n                Description\n            \n            \n                Values of the user token\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext } from '@nestjs/common';\n\nexport const Token = createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user as TokenPayload; // Access the token payload on the request object\n    },\n);\n\n/**\n * Values of the user token\n */\nexport interface TokenPayload {\n    sub: string; // Subject (client_id for client credentials)\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenRequestDto.html":{"url":"classes/TokenRequestDto.html","title":"class - TokenRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/oauth/dto/token-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                client_id\n                            \n                            \n                                    \n                                    \n                                client_secret\n                            \n                            \n                                    \n                                    \n                                    \n                                grant_type\n                            \n                            \n                                    \n                                    Optional\n                                scope\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The client identifier', example: 'my-client-id'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-request.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        client_secret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The client secret', example: 'my-client-secret'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-request.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        grant_type\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The grant type', enum: undefined, example: 'client_credentials'})@IsString()@IsIn(['client_credentials'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-request.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The scope of the access request', example: 'openid', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-request.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsIn, IsString } from 'class-validator';\n\nexport class TokenRequestDto {\n    @ApiProperty({\n        description: 'The grant type',\n        enum: ['client_credentials'],\n        example: 'client_credentials',\n    })\n    @IsString()\n    @IsIn(['client_credentials'])\n    grant_type: 'client_credentials';\n\n    @ApiProperty({\n        description: 'The client identifier',\n        example: 'my-client-id',\n    })\n    @IsString()\n    client_id: string;\n\n    @ApiProperty({\n        description: 'The client secret',\n        example: 'my-client-secret',\n    })\n    @IsString()\n    client_secret: string;\n\n    @ApiProperty({\n        description: 'The scope of the access request',\n        example: 'openid',\n        required: false,\n    })\n    scope?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenResponse.html":{"url":"classes/TokenResponse.html","title":"class - TokenResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/token-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access_token\n                            \n                            \n                                expires_in\n                            \n                            \n                                token_type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_type\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TokenResponse {\n    access_token: string;\n    token_type: 'Bearer';\n    expires_in: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenResponseDto.html":{"url":"classes/TokenResponseDto.html","title":"class - TokenResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/oauth/dto/token-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                access_token\n                            \n                            \n                                    \n                                expires_in\n                            \n                            \n                                    \n                                    Optional\n                                scope\n                            \n                            \n                                    \n                                token_type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The access token', example: 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The lifetime in seconds of the access token', example: 3600})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The scope of the access token', example: 'openid', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-response.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token_type\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The type of the token', example: 'Bearer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class TokenResponseDto {\n    @ApiProperty({\n        description: 'The access token',\n        example: 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...',\n    })\n    access_token: string;\n\n    @ApiProperty({\n        description: 'The type of the token',\n        example: 'Bearer',\n    })\n    token_type: 'Bearer';\n\n    @ApiProperty({\n        description: 'The lifetime in seconds of the access token',\n        example: 3600,\n    })\n    expires_in: number;\n\n    @ApiProperty({\n        description: 'The scope of the access token',\n        example: 'openid',\n        required: false,\n    })\n    scope?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCredentialIssuanceBindingDto.html":{"url":"classes/UpdateCredentialIssuanceBindingDto.html","title":"class - UpdateCredentialIssuanceBindingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCredentialIssuanceBindingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/credential-issuance-binding.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating the key ID of an existing binding.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                keyID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        keyID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The new key ID to use for signing this credential', example: 'signing-key-2024-02'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/credential-issuance-binding.dto.ts:40\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, IsUUID } from 'class-validator';\n\n/**\n * DTO for creating a new credential-issuance binding.\n */\nexport class CreateCredentialIssuanceBindingDto {\n    @ApiProperty({\n        description: 'The ID of the credential configuration',\n        example: 'university-degree',\n    })\n    @IsString()\n    credentialConfigId: string;\n\n    @ApiProperty({\n        description: 'The ID of the issuance configuration',\n        example: '123e4567-e89b-12d3-a456-426614174000',\n    })\n    @IsUUID()\n    issuanceConfigId: string;\n\n    @ApiProperty({\n        description:\n            'The key ID to use for signing this credential in this issuance config',\n        example: 'signing-key-2024-01',\n    })\n    @IsString()\n    keyID: string;\n}\n\n/**\n * DTO for updating the key ID of an existing binding.\n */\nexport class UpdateCredentialIssuanceBindingDto {\n    @ApiProperty({\n        description: 'The new key ID to use for signing this credential',\n        example: 'signing-key-2024-02',\n    })\n    @IsString()\n    keyID: string;\n}\n\n/**\n * DTO for the response of a credential-issuance binding.\n */\nexport class CredentialIssuanceBindingResponseDto {\n    @ApiProperty({\n        description: 'The unique identifier of the binding',\n        example: '123e4567-e89b-12d3-a456-426614174000',\n    })\n    id: string;\n\n    @ApiProperty({\n        description: 'The ID of the credential configuration',\n        example: 'university-degree',\n    })\n    credentialConfigId: string;\n\n    @ApiProperty({\n        description: 'The ID of the issuance configuration',\n        example: '123e4567-e89b-12d3-a456-426614174000',\n    })\n    issuanceConfigId: string;\n\n    @ApiProperty({\n        description: 'The key ID used for signing this credential',\n        example: 'signing-key-2024-01',\n    })\n    keyID: string;\n\n    @ApiProperty({\n        description: 'The timestamp when the binding was created',\n        example: '2024-08-03T10:30:00Z',\n    })\n    createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VCT.html":{"url":"classes/VCT.html","title":"class - VCT","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VCT\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/dto/credential-config.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                extends\n                            \n                            \n                                    \n                                    Optional\n                                extends#integrity\n                            \n                            \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    Optional\n                                schema_uri\n                            \n                            \n                                    \n                                    Optional\n                                schema_uri#integrity\n                            \n                            \n                                    \n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        extends\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        extends#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema_uri#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsString } from 'class-validator';\nimport { WebhookConfig } from '../../../utils/webhook/webhook.dto';\n\nexport class VCT {\n    @IsString()\n    vct: string;\n    @IsString()\n    name?: string;\n    @IsString()\n    description?: string;\n    @IsString()\n    extends?: string;\n    @IsString()\n    'extends#integrity'?: string;\n    @IsString()\n    schema_uri?: string;\n    @IsString()\n    'schema_uri#integrity'?: string;\n}\n\nexport class PresentationDuringIssuance {\n    @IsString()\n    type: string;\n    @IsObject()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VerifierModule.html":{"url":"modules/VerifierModule.html","title":"module - VerifierModule","body":"\n                   \n\n\n\n\n    Modules\n    VerifierModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VerifierModule\n\n\n\ncluster_VerifierModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/verifier.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            PresentationsModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from '@nestjs/axios';\nimport { Module } from '@nestjs/common';\nimport { CryptoModule } from '../crypto/crypto.module';\nimport { RegistrarModule } from '../registrar/registrar.module';\nimport { SessionModule } from '../session/session.module';\nimport { Oid4vpModule } from './oid4vp/oid4vp.module';\nimport { PresentationsModule } from './presentations/presentations.module';\n\n@Module({\n    imports: [\n        CryptoModule,\n        RegistrarModule,\n        SessionModule,\n        HttpModule,\n        PresentationsModule,\n        Oid4vpModule,\n    ],\n})\nexport class VerifierModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebHookAuthConfig.html":{"url":"classes/WebHookAuthConfig.html","title":"class - WebHookAuthConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebHookAuthConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhook authentication.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApiKeyConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:43\n                        \n                    \n\n            \n                \n                    Configuration for API key authentication.\nThis is required if the type is 'apiKey'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['apiKey'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:36\n                        \n                    \n\n            \n                \n                    The type of authentication used for the webhook.\nCurrently, only 'apiKey' is supported.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsIn, IsObject, IsOptional, IsString } from 'class-validator';\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     * @example Authorization\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     * @example Bearer your_api_key_here\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = 'apiKey';\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn(['apiKey'])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebhookConfig.html":{"url":"classes/WebhookConfig.html","title":"class - WebhookConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebhookConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhooks used in various services.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                auth\n                            \n                            \n                                    \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        auth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebHookAuthConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsOptional()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:62\n                        \n                    \n\n            \n                \n                    Optional authentication configuration for the webhook.\nIf not provided, no authentication will be used.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:54\n                        \n                    \n\n            \n                \n                    The URL to which the webhook will send notifications.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsIn, IsObject, IsOptional, IsString } from 'class-validator';\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     * @example Authorization\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     * @example Bearer your_api_key_here\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = 'apiKey';\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn(['apiKey'])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WebhookService.html":{"url":"injectables/WebhookService.html","title":"injectable - WebhookService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WebhookService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling webhooks in the application.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendWebhook\n                            \n                            \n                                    Async\n                                sendWebhookNotification\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, sessionService: SessionService, sessionLogger: SessionLoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/webhook/webhook.service.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor for WebhookService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendWebhook\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendWebhook(session: Session, logContext: SessionLogContext, credentials: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/webhook/webhook.service.ts:32\n                        \n                    \n\n\n            \n                \n                        Sends a webhook with the provided credentials, also return the response data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                logContext\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentials\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendWebhookNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendWebhookNotification(session: Session, logContext: SessionLogContext, notification: Notification)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/webhook/webhook.service.ts:98\n                        \n                    \n\n\n            \n                \n                        Sends a webhook notification for a session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                logContext\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                notification\n                                            \n                                                            Notification\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { Injectable } from '@nestjs/common';\nimport { firstValueFrom } from 'rxjs';\nimport { Notification, Session } from '../../session/entities/session.entity';\nimport { SessionService } from '../../session/session.service';\nimport { SessionLoggerService } from '../logger/session-logger.service';\nimport { SessionLogContext } from '../logger/session-logger-context';\n\n/**\n * Service for handling webhooks in the application.\n */\n@Injectable()\nexport class WebhookService {\n    /**\n     * Constructor for WebhookService.\n     * @param httpService\n     * @param sessionService\n     * @param sessionLogger\n     */\n    constructor(\n        private httpService: HttpService,\n        private sessionService: SessionService,\n        private sessionLogger: SessionLoggerService,\n    ) {}\n\n    /**\n     * Sends a webhook with the provided credentials, also return the response data.\n     * @param session\n     * @param logContext\n     * @param credentials\n     */\n    async sendWebhook(\n        session: Session,\n        logContext: SessionLogContext,\n        credentials: any[],\n    ) {\n        const headers: Record = {};\n        if (session.webhook!.auth && session.webhook!.auth.type === 'apiKey') {\n            headers[session.webhook!.auth.config.headerName] =\n                session.webhook!.auth.config.value;\n        }\n        this.sessionLogger.logSession(logContext, 'Sending webhook', {\n            webhookUrl: session.webhook!.url,\n            authType: session.webhook!.auth?.type || 'none',\n        });\n\n        await firstValueFrom(\n            this.httpService.post(\n                session.webhook!.url,\n                {\n                    credentials,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    'Webhook sent successfully',\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    'Error sending webhook',\n                    {\n                        webhookUrl: session.webhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n\n    /**\n     * Sends a webhook notification for a session.\n     * @param session\n     * @param logContext\n     * @param notification\n     */\n    async sendWebhookNotification(\n        session: Session,\n        logContext: SessionLogContext,\n        notification: Notification,\n    ) {\n        const headers: Record = {};\n        const webhook = session.notifyWebhook!;\n\n        if (webhook.auth && webhook.auth.type === 'apiKey') {\n            headers[webhook.auth.config.headerName] = webhook.auth.config.value;\n        }\n        this.sessionLogger.logSession(\n            logContext,\n            'Sending webhook notification',\n            {\n                webhookUrl: webhook.url,\n                authType: webhook.auth?.type || 'none',\n            },\n        );\n\n        await firstValueFrom(\n            this.httpService.post(\n                webhook.url,\n                {\n                    notification,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    'Webhook notification sent successfully',\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    'Error sending webhook',\n                    {\n                        webhookUrl: session.webhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/WellKnownController.html":{"url":"controllers/WellKnownController.html","title":"controller - WellKnownController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  WellKnownController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/well-known.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/.well-known\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI well-known endpoints.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authzMetadata\n                            \n                            \n                                    \n                                    \n                                getJwks\n                            \n                            \n                                    \n                                    \n                                    \n                                issuerMetadata\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    authzMetadata(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('oauth-authorization-server')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:59\n                        \n                    \n\n\n            \n                \n                        Authorization Server Metadata\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Oauth2AuthorizationServerResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getJwks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getJwks(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Header('Content-Type', 'application/jwk-set+json')@Get('jwks.json')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:71\n                        \n                    \n\n\n            \n                \n                        Returns the JSON Web Key Set (JWKS) for the authorization server.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        issuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    issuerMetadata(session: Session, contentType: MediaType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get OpenID4VCI issuer metadata', description: 'Returns the OpenID4VCI issuer metadata.'})@ApiProduces(MediaType.APPLICATION_JSON, MediaType.APPLICATION_JWT)@Get('openid-credential-issuer')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:47\n                        \n                    \n\n\n            \n                \n                        Retrieves the OpenID4VCI issuer metadata for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                contentType\n                                            \n                                                            MediaType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header, UseGuards } from '@nestjs/common';\nimport {\n    ApiExcludeController,\n    ApiOperation,\n    ApiParam,\n    ApiProduces,\n} from '@nestjs/swagger';\nimport { Session } from '../session/entities/session.entity';\nimport { SessionEntity } from '../session/session.decorator';\nimport { SessionGuard } from '../session/session.guard';\nimport { ContentType } from '../utils/mediaType/media-type.decorator';\nimport { MediaType } from '../utils/mediaType/media-type.enum';\nimport { JwksResponseDto } from './dto/jwks-response.dto';\nimport { Oauth2AuthorizationServerResponse } from './dto/oauth-authorization-server-response.dto';\nimport { WellKnownService } from './well-known.service';\n\n/**\n * Controller for the OpenID4VCI well-known endpoints.\n */\n@ApiExcludeController(process.env.SWAGGER_ALL !== 'true')\n@UseGuards(SessionGuard)\n@ApiParam({\n    name: 'session',\n    required: true,\n})\n@Controller(':session/.well-known')\nexport class WellKnownController {\n    /**\n     * Constructor for WellKnownController.\n     * @param wellKnownService\n     */\n    constructor(private readonly wellKnownService: WellKnownService) {}\n\n    /**\n     * Retrieves the OpenID4VCI issuer metadata for a given tenant.\n     * @param tenantId\n     * @param contentType\n     * @returns\n     */\n    @ApiOperation({\n        summary: 'Get OpenID4VCI issuer metadata',\n        description: 'Returns the OpenID4VCI issuer metadata.',\n    })\n    //we can not set the accept in the apiheader via swagger.\n    @ApiProduces(MediaType.APPLICATION_JSON, MediaType.APPLICATION_JWT)\n    @Get('openid-credential-issuer')\n    issuerMetadata(\n        @SessionEntity() session: Session,\n        @ContentType() contentType: MediaType,\n    ) {\n        return this.wellKnownService.getIssuerMetadata(session, contentType);\n    }\n\n    /**\n     * Authorization Server Metadata\n     * @returns\n     */\n    @Get('oauth-authorization-server')\n    authzMetadata(\n        @SessionEntity() session: Session,\n    ): Oauth2AuthorizationServerResponse {\n        return this.wellKnownService.getAuthzMetadata(session);\n    }\n\n    /**\n     * Returns the JSON Web Key Set (JWKS) for the authorization server.\n     * @returns\n     */\n    @Header('Content-Type', 'application/jwk-set+json')\n    @Get('jwks.json')\n    getJwks(@SessionEntity() session: Session): Promise {\n        return this.wellKnownService.getJwks(session.tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WellKnownService.html":{"url":"injectables/WellKnownService.html","title":"injectable - WellKnownService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WellKnownService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/well-known.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to handle well-known endpoints and metadata retrieval.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAuthzMetadata\n                            \n                            \n                                    Async\n                                getIssuerMetadata\n                            \n                            \n                                getJwks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(oid4vciService: Oid4vciService, cryptoService: CryptoService, authorizeService: AuthorizeService, cryptoImplementationService: CryptoImplementationService)\n                    \n                \n                        \n                            \n                                Defined in src/well-known/well-known.service.ts:16\n                            \n                        \n\n                \n                    \n                            Constructor for WellKnownService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        oid4vciService\n                                                  \n                                                        \n                                                                        Oid4vciService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authorizeService\n                                                  \n                                                        \n                                                                        AuthorizeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoImplementationService\n                                                  \n                                                        \n                                                                        CryptoImplementationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAuthzMetadata\n                        \n                    \n                \n            \n            \n                \ngetAuthzMetadata(session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/well-known/well-known.service.ts:77\n                        \n                    \n\n\n            \n                \n                        Returns the OAuth 2.0 Authorization Server metadata for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Oauth2AuthorizationServerResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getIssuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuerMetadata(session: Session, contentType: MediaType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/well-known/well-known.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Retrieves the issuer metadata for a given tenant for the specified content type.\nThe metadata can be returned in two formats:\n\nan unsigned JSON document using the media type application/json, or\na signed JSON Web Token (JWT) containing the Credential Issuer Metadata in its payload using the media type application/jwt.\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                contentType\n                                            \n                                                            MediaType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getJwks\n                        \n                    \n                \n            \n            \n                \ngetJwks(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/well-known/well-known.service.ts:87\n                        \n                    \n\n\n            \n                \n                        Returns the JSON Web Key Set (JWKS) for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CryptoService } from '../crypto/crypto.service';\nimport { CryptoImplementationService } from '../crypto/key/crypto-implementation/crypto-implementation.service';\nimport { AuthorizeService } from '../issuer/authorize/authorize.service';\nimport { Oid4vciService } from '../issuer/oid4vci/oid4vci.service';\nimport { Session } from '../session/entities/session.entity';\nimport { MediaType } from '../utils/mediaType/media-type.enum';\nimport { CredentialIssuerMetadataDto } from './dto/credential-issuer-metadata.dto';\nimport { JwksResponseDto } from './dto/jwks-response.dto';\nimport { Oauth2AuthorizationServerResponse } from './dto/oauth-authorization-server-response.dto';\n\n/**\n * Service to handle well-known endpoints and metadata retrieval.\n */\n@Injectable()\nexport class WellKnownService {\n    /**\n     * Constructor for WellKnownService.\n     * @param oid4vciService\n     * @param cryptoService\n     * @param authorizeService\n     */\n    constructor(\n        private readonly oid4vciService: Oid4vciService,\n        private readonly cryptoService: CryptoService,\n        private readonly authorizeService: AuthorizeService,\n        private readonly cryptoImplementationService: CryptoImplementationService,\n    ) {}\n\n    /**\n     * Retrieves the issuer metadata for a given tenant for the specified content type.\n     * The metadata can be returned in two formats:\n     * - an unsigned JSON document using the media type application/json, or\n     * - a signed JSON Web Token (JWT) containing the Credential Issuer Metadata in its payload using the media type application/jwt.\n     * @param tenantId\n     * @param contentType\n     * @returns\n     */\n    async getIssuerMetadata(session: Session, contentType: MediaType) {\n        const metadata = (await this.oid4vciService.issuerMetadata(session))\n            .credentialIssuer as unknown as CredentialIssuerMetadataDto;\n\n        if (contentType === MediaType.APPLICATION_JWT) {\n            const keyId = await this.cryptoService.keyService.getKid(\n                session.tenantId,\n                'access',\n            );\n            return this.cryptoService.signJwt(\n                {\n                    typ: 'openidvci-issuer-metadata+jwt',\n                    alg: this.cryptoImplementationService.getAlg(),\n                    x5c: await this.cryptoService.getCertChain(\n                        'access',\n                        session.tenantId,\n                    ),\n                },\n                {\n                    ...metadata,\n                    iss: metadata.credential_issuer,\n                    sub: metadata.credential_issuer,\n                    iat: Math.floor(new Date().getTime() / 1000),\n                    // [Review]: should we add `exp` value here?\n                    //MM: the value makes sense when we cache the issuer metadata so it must not be signed on every request. Like when it is issued every hour, its lifetime is 1 hour and the jwt is in the cache.\n                },\n                session.tenantId,\n                keyId,\n            );\n        }\n\n        return metadata;\n    }\n\n    /**\n     * Returns the OAuth 2.0 Authorization Server metadata for a given tenant.\n     * @returns\n     */\n    getAuthzMetadata(session: Session): Oauth2AuthorizationServerResponse {\n        return this.authorizeService.authzMetadata(\n            session,\n        ) as Oauth2AuthorizationServerResponse;\n    }\n\n    /**\n     * Returns the JSON Web Key Set (JWKS) for a given tenant.\n     * @returns\n     */\n    getJwks(tenantId: string): Promise {\n        return this.cryptoService.getJwks(tenantId).then((key) => ({\n            keys: [key],\n        }));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/dto/oidc-discovery.dto.ts\n            \n            interface\n            OidcDiscoveryDto\n            \n                100 %\n                (36/36)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/auth.module.ts\n            \n            variable\n            AUTH_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/auth.module.ts\n            \n            variable\n            DEFAULT_AUTH_CLIENT_ID\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/auth.module.ts\n            \n            variable\n            DEFAULT_AUTH_CLIENT_SECRET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/auth.module.ts\n            \n            variable\n            DEFAULT_JWT_SECRET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/client.service.ts\n            \n            injectable\n            ClientService\n            \n                60 %\n                (6/10)\n            \n        \n        \n            \n                \n                src/auth/client.service.ts\n            \n            interface\n            Client\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/client-credentials.dto.ts\n            \n            class\n            ClientCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/oidc-discovery.dto.ts\n            \n            interface\n            OidcDiscoveryDto\n            \n                100 %\n                (36/36)\n            \n        \n        \n            \n                \n                src/auth/dto/token-response.dto.ts\n            \n            class\n            TokenResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/entitites/client.entity.ts\n            \n            entity\n            ClientEntry\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/entitites/client.entity.ts\n            \n            type alias\n            ClientStatus\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.service.ts\n            \n            injectable\n            JwtService\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/auth/jwt.service.ts\n            \n            interface\n            GenerateTokenOptions\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                        src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/token.decorator.ts\n            \n            interface\n            TokenPayload\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/auth/token.decorator.ts\n            \n            variable\n            Token\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/crypto.service.ts\n            \n            injectable\n            CryptoService\n            \n                90 %\n                (18/20)\n            \n        \n        \n            \n                \n                        src/crypto/crypto.service.ts\n            \n            variable\n            ECDSA_P256\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/encryption/encryption.service.ts\n            \n            injectable\n            EncryptionService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/crypto/key/adapters/filesystem-key.service.ts\n            \n            class\n            FileSystemKeyService\n            \n                66 %\n                (10/15)\n            \n        \n        \n            \n                \n                src/crypto/key/adapters/vault-key.service.ts\n            \n            class\n            VaultKeyService\n            \n                47 %\n                (9/19)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.module.ts\n            \n            variable\n            CRYPTO_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n            \n            injectable\n            CryptoImplementationService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n            \n            type alias\n            CryptoType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            interface\n            CryptoImplementation\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            type alias\n            KeyPair\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            type alias\n            Signer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            type alias\n            Verifier\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/ed25519.ts\n            \n            variable\n            ED25519\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-import.dto.ts\n            \n            class\n            Key\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-import.dto.ts\n            \n            class\n            KeyImportDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-object.dto.ts\n            \n            class\n            KeyObj\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-response.dto.ts\n            \n            class\n            KeyResponseDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/crypto/key/entities/cert.entity.ts\n            \n            entity\n            CertEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/entities/cert.entity.ts\n            \n            type alias\n            CertificateType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/entities/keys.entity.ts\n            \n            entity\n            KeyEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/entities/keys.entity.ts\n            \n            type alias\n            KeyUsage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/crypto/key/key.controller.ts\n            \n            controller\n            KeyController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                        src/crypto/key/key.module.ts\n            \n            variable\n            KEY_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/key.service.ts\n            \n            class\n            KeyService\n            \n                66 %\n                (8/12)\n            \n        \n        \n            \n                \n                        src/database/database.module.ts\n            \n            variable\n            DB_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.controller.ts\n            \n            controller\n            AuthorizeController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.service.ts\n            \n            injectable\n            AuthorizeService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.service.ts\n            \n            interface\n            ParsedAccessTokenAuthorizationCodeRequestGrant\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.service.ts\n            \n            interface\n            ParsedAccessTokenPreAuthorizedCodeRequestGrant\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/issuer/authorize/dto/authorize-request.dto.ts\n            \n            class\n            AuthorizeQueries\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/issuer/authorize/dto/par-response.dto.ts\n            \n            class\n            ParResponseDto\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/credentials-metadata.controller.ts\n            \n            controller\n            CredentialsMetadataController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/dto/credential-config.dto.ts\n            \n            class\n            PresentationDuringIssuance\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/dto/credential-config.dto.ts\n            \n            class\n            VCT\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/dto/schema-response.dto.ts\n            \n            class\n            SchemaResponse\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/issuer/credentials/credential-config/credential-config.service.ts\n            \n            injectable\n            CredentialConfigService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/issuer/credentials/credentials.controller.ts\n            \n            controller\n            CredentialsController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/issuer/credentials/credentials.service.ts\n            \n            injectable\n            CredentialsService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/credential.entity.ts\n            \n            entity\n            CredentialConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthConfigValidator\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationConfigDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationUrlConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            PresentationDuringIssuanceConfig\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            type alias\n            AuthenticationConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.helper.ts\n            \n            class\n            AuthenticationConfigHelper\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/credential-issuance-binding.dto.ts\n            \n            class\n            CreateCredentialIssuanceBindingDto\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/credential-issuance-binding.dto.ts\n            \n            class\n            CredentialIssuanceBindingResponseDto\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/credential-issuance-binding.dto.ts\n            \n            class\n            UpdateCredentialIssuanceBindingDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/issuance.dto.ts\n            \n            class\n            CredentialConfigMapping\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/issuance.dto.ts\n            \n            class\n            IssuanceDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/issuer/issuance/entities/credential-issuance-binding.entity.ts\n            \n            entity\n            CredentialIssuanceBinding\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/issuance/entities/issuance-config.entity.ts\n            \n            entity\n            IssuanceConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/issuance/issuance.controller.ts\n            \n            controller\n            IssuanceController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/issuer/issuance/issuance.service.ts\n            \n            injectable\n            IssuanceService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/issuer/issuer-management/issuer-management.controller.ts\n            \n            controller\n            IssuerManagementController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/issuer/issuer.module.ts\n            \n            variable\n            ISSUER_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/dto/notification-request.dto.ts\n            \n            class\n            NotificationRequestDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/dto/offer-request.dto.ts\n            \n            class\n            OfferRequestDto\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/dto/offer-request.dto.ts\n            \n            class\n            OfferResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/entities/display.entity.ts\n            \n            entity\n            DisplayEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/issuer/oid4vci/entities/display.entity.ts\n            \n            type alias\n            DisplayInfo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/oid4vci.controller.ts\n            \n            controller\n            Oid4vciController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/oid4vci.service.ts\n            \n            injectable\n            Oid4vciService\n            \n                16 %\n                (2/12)\n            \n        \n        \n            \n                \n                        src/issuer/oid4vci/util.ts\n            \n            function\n            getHeadersFromRequest\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/status-list/dto/status-update.dto.ts\n            \n            class\n            StatusUpdateDto\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/issuer/status-list/entities/status-list.entity.ts\n            \n            entity\n            StatusListEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/status-list/entities/status-mapping.entity.ts\n            \n            entity\n            StatusMapping\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/status-list/status-list.controller.ts\n            \n            controller\n            StatusListController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/issuer/status-list/status-list.service.ts\n            \n            injectable\n            StatusListService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/oauth/dto/token-request.dto.ts\n            \n            class\n            TokenRequestDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/oauth/dto/token-response.dto.ts\n            \n            class\n            TokenResponseDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/oauth/oauth.controller.ts\n            \n            controller\n            OAuthController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/oauth/oauth.module.ts\n            \n            variable\n            OAUTH_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/oauth/oauth.service.ts\n            \n            injectable\n            OAuthService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/registrar/dto/access-certificate-response.ts\n            \n            interface\n            AccessCertificateResponse\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/registrar/entities/registrar.entity.ts\n            \n            entity\n            RegistrarEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/registrar/registrar.module.ts\n            \n            variable\n            REGISTRAR_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/registrar/registrar.service.ts\n            \n            injectable\n            RegistrarService\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/session/entities/session.entity.ts\n            \n            entity\n            Session\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/session/entities/session.entity.ts\n            \n            type alias\n            Notification\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/session/entities/session.entity.ts\n            \n            type alias\n            SessionStatus\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/session/session.controller.ts\n            \n            controller\n            SessionController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                        src/session/session.decorator.ts\n            \n            variable\n            SessionEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/session/session.guard.ts\n            \n            guard\n            SessionGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/session/session.module.ts\n            \n            variable\n            SESSION_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/session/session.service.ts\n            \n            injectable\n            SessionService\n            \n                81 %\n                (9/11)\n            \n        \n        \n            \n                \n                src/storage/adapters/local.storage.ts\n            \n            class\n            LocalFileStorage\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/storage/adapters/s3.storage.ts\n            \n            class\n            S3FileStorage\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/storage/files.service.ts\n            \n            injectable\n            FilesService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/storage/storage.module.ts\n            \n            variable\n            CONFIG_STORAGE_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/storage/storage.module.ts\n            \n            type alias\n            Driver\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/storage/storage.types.ts\n            \n            interface\n            FileStorage\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/storage/storage.types.ts\n            \n            variable\n            FILE_STORAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/storage/storage.types.ts\n            \n            type alias\n            PutOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/storage/storage.types.ts\n            \n            type alias\n            StoredObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/logger/logger-config.service.ts\n            \n            injectable\n            LoggerConfigService\n            \n                23 %\n                (3/13)\n            \n        \n        \n            \n                \n                src/utils/logger/logger-config.service.ts\n            \n            interface\n            LoggerConfiguration\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/utils/logger/session-logger-context.ts\n            \n            interface\n            SessionLogContext\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/utils/logger/session-logger.decorator.ts\n            \n            variable\n            SESSION_LOGGER_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/logger/session-logger.decorator.ts\n            \n            variable\n            SessionLogger\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/logger/session-logger.interceptor.ts\n            \n            injectable\n            SessionLoggerInterceptor\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/utils/logger/session-logger.service.ts\n            \n            injectable\n            SessionLoggerService\n            \n                85 %\n                (12/14)\n            \n        \n        \n            \n                \n                        src/utils/mediaType/media-type.decorator.ts\n            \n            variable\n            ContentType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            ApiKeyConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebHookAuthConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebhookConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/utils/webhook/webhook.dto.ts\n            \n            type alias\n            AuthConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.service.ts\n            \n            injectable\n            WebhookService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/dto/authorization-response.dto.ts\n            \n            class\n            AuthorizationResponse\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/dto/presentation-request-options.dto.ts\n            \n            interface\n            PresentationRequestOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/dto/presentation-request.dto.ts\n            \n            class\n            PresentationRequest\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/oid4vp.controller.ts\n            \n            controller\n            Oid4vpController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/oid4vp.service.ts\n            \n            injectable\n            Oid4vpService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/verifier/presentations/dto/auth-response.dto.ts\n            \n            interface\n            AuthResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/dto/vp-request.dto.ts\n            \n            class\n            RegistrationCertificateRequest\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            entity\n            PresentationConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/verifier/presentations/presentations.controller.ts\n            \n            controller\n            PresentationManagementController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/verifier/presentations/presentations.service.ts\n            \n            injectable\n            PresentationsService\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/verifier/resolver/dto/issuer-metadata.dto.ts\n            \n            interface\n            IssuerMetadata\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/resolver/resolver.service.ts\n            \n            injectable\n            ResolverService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/well-known/dto/credential-issuer-metadata.dto.ts\n            \n            class\n            CredentialIssuerMetadataDto\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/well-known/dto/jwks-response.dto.ts\n            \n            class\n            EC_Public\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/well-known/dto/jwks-response.dto.ts\n            \n            class\n            JwksResponseDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/well-known/dto/oauth-authorization-server-response.dto.ts\n            \n            class\n            Oauth2AuthorizationServerResponse\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/well-known/well-known.controller.ts\n            \n            controller\n            WellKnownController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/well-known/well-known.service.ts\n            \n            injectable\n            WellKnownService\n            \n                100 %\n                (5/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws-sdk/client-s3 : ^3.864.0\n        \n            @aws-sdk/s3-request-presigner : ^3.864.0\n        \n            @badgateway/oauth2-client : ^3.3.0\n        \n            @nestjs/axios : ^4.0.1\n        \n            @nestjs/common : ^11.1.6\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.6\n        \n            @nestjs/event-emitter : ^3.0.1\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.6\n        \n            @nestjs/schedule : ^6.0.0\n        \n            @nestjs/serve-static : ^5.0.3\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/terminus : ^11.0.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @openid4vc/oauth2 : 0.3.0-alpha-20250714110838\n        \n            @openid4vc/openid4vci : 0.3.0-alpha-20250714110838\n        \n            @openid4vc/openid4vp : 0.3.0-alpha-20250714110838\n        \n            @openid4vc/utils : 0.3.0-alpha-20250714110838\n        \n            @peculiar/x509 : ^1.13.0\n        \n            @sd-jwt/crypto-nodejs : ^0.14.0\n        \n            @sd-jwt/jwt-status-list : ^0.14.0\n        \n            @sd-jwt/sd-jwt-vc : ^0.14.1\n        \n            @sd-jwt/types : ^0.14.0\n        \n            @willsoto/nestjs-prometheus : ^6.0.2\n        \n            axios : ^1.11.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            joi : ^18.0.0\n        \n            jose : ^6.0.12\n        \n            jwks-rsa : ^3.2.0\n        \n            mysql2 : ^3.14.3\n        \n            nestjs-pino : ^4.4.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.16.3\n        \n            pino-http : ^10.5.0\n        \n            pino-pretty : ^13.1.1\n        \n            prom-client : ^15.1.3\n        \n            qrcode : ^1.5.4\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            sqlite3 : ^5.1.7\n        \n            typeorm : ^0.3.25\n        \n            uuid : ^11.1.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MediaType   (src/.../media-type.enum.ts)\n                        \n                        \n                            ResponseType   (src/.../presentation-request.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/mediaType/media-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        MediaType\n                    \n                \n                    \n                        \n                            Represents the media types used in the application.\n\n                        \n                    \n                        \n                            \n                                 APPLICATION_JSON\n                            \n                        \n                        \n                            \n                                Value : application/json\n                            \n                        \n                        \n                            \n                                 APPLICATION_JWT\n                            \n                        \n                        \n                            \n                                Value : application/jwt\n                            \n                        \n            \n        \n\n    src/verifier/oid4vp/dto/presentation-request.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ResponseType\n                    \n                \n                    \n                        \n                            Enum for the type of response expected from the presentation request.\n\n                        \n                    \n                        \n                            \n                                 QRCode\n                            \n                        \n                        \n                            \n                                Value : qrcode\n                            \n                        \n                        \n                            \n                                 URI\n                            \n                        \n                        \n                            \n                                Value : uri\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            getHeadersFromRequest   (src/.../util.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Bootstrap function to initialize the NestJS application.\n\n\n                \n            \n        \n    \n    src/issuer/oid4vci/util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getHeadersFromRequest\n                        \n                    \n                \n            \n            \n                \ngetHeadersFromRequest(req: Request)\n                \n            \n\n\n\n\n            \n                \n                        Utility function to extract headers from an Express request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     globalThis.Headers\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CryptoImplementatationModule\n\n\n\ncluster_CryptoImplementatationModule_exports\n\n\n\ncluster_CryptoImplementatationModule_providers\n\n\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_exports\n\n\n\ncluster_CryptoModule_providers\n\n\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_imports\n\n\n\ncluster_IssuerModule_exports\n\n\n\ncluster_IssuerModule_providers\n\n\n\ncluster_OAuthModule\n\n\n\ncluster_OAuthModule_exports\n\n\n\ncluster_OAuthModule_providers\n\n\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_imports\n\n\n\ncluster_PresentationsModule_exports\n\n\n\ncluster_PresentationsModule_providers\n\n\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_exports\n\n\n\ncluster_RegistrarModule_providers\n\n\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_exports\n\n\n\ncluster_ResolverModule_providers\n\n\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_exports\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_exports\n\n\n\ncluster_StatusListModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nJwtService \n\nJwtService \n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\nAuthModule -->\n\nCryptoModule->AuthModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nCryptoService \n\nCryptoService \n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\n\n\nEncryptionService \n\nEncryptionService \n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nOAuthModule\n\nOAuthModule\n\nOAuthModule -->\n\nCryptoModule->OAuthModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\nAuthModule -->\n\nIssuerModule->AuthModule\n\n\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\n\n\nMetricModule\n\nMetricModule\n\nAppModule -->\n\nMetricModule->AppModule\n\n\n\nAuthModule -->\n\nRegistrarModule->AuthModule\n\n\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\n\n\nSessionModule\n\nSessionModule\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\n\n\nStorageModule\n\nStorageModule\n\nAppModule -->\n\nStorageModule->AppModule\n\n\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\nWellKnownService\n\nWellKnownService\n\nAppModule -->\n\nWellKnownService->AppModule\n\n\n\nAuthModule -->\n\nStatusListModule->AuthModule\n\n\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nClientService\n\nClientService\n\nAuthModule -->\n\nClientService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nCryptoImplementationService \n\nCryptoImplementationService \n\n\n\nCryptoImplementatationModule\n\nCryptoImplementatationModule\n\nCryptoImplementationService  -->\n\nCryptoImplementatationModule->CryptoImplementationService \n\n\n\n\n\nCryptoImplementationService\n\nCryptoImplementationService\n\nCryptoImplementatationModule -->\n\nCryptoImplementationService->CryptoImplementatationModule\n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialConfigService\n\nCredentialConfigService\n\nIssuerModule -->\n\nCredentialConfigService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nIssuanceService\n\nIssuanceService\n\nIssuerModule -->\n\nIssuanceService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nIssuerModule -->\n\nSessionLoggerInterceptor->IssuerModule\n\n\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nIssuerModule -->\n\nSessionLoggerService->IssuerModule\n\n\n\nOid4vpModule -->\n\nSessionLoggerService->Oid4vpModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nIssuerModule -->\n\nWebhookService->IssuerModule\n\n\n\nOid4vpModule -->\n\nWebhookService->Oid4vpModule\n\n\n\n\n\nOAuthService \n\nOAuthService \n\nOAuthService  -->\n\nOAuthModule->OAuthService \n\n\n\n\n\nOAuthService\n\nOAuthService\n\nOAuthModule -->\n\nOAuthService->OAuthModule\n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nResolverModule\n\nResolverModule\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nResolverService \n\nResolverService \n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        18 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    16 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    25 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    42 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    15 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoImplementatationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IssuerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KeyModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetricModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OAuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        Oid4vpModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PresentationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RegistrarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ResolverModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SessionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StatusListModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StorageModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VerifierModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : a middleware to interact with the EUDI Wallet\n        \n            Bugs : https://github.com/openwallet-foundation-labs/eudiplo/issues\n        \n            License : Apache-2.0\n        \n            Repository : https://github.com/openwallet-foundation-labs/eudiplo.git\n        \n            Author : Mirko Mollik \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthConfig   (src/.../webhook.dto.ts)\n                        \n                        \n                            AuthenticationConfig   (src/.../authentication-config.dto.ts)\n                        \n                        \n                            CertificateType   (src/.../cert.entity.ts)\n                        \n                        \n                            ClientStatus   (src/.../client.entity.ts)\n                        \n                        \n                            CryptoType   (src/.../crypto-implementation.service.ts)\n                        \n                        \n                            DisplayInfo   (src/.../display.entity.ts)\n                        \n                        \n                            Driver   (src/.../storage.module.ts)\n                        \n                        \n                            KeyPair   (src/.../crypto-implementation.ts)\n                        \n                        \n                            KeyUsage   (src/.../keys.entity.ts)\n                        \n                        \n                            Notification   (src/.../session.entity.ts)\n                        \n                        \n                            PutOptions   (src/.../storage.types.ts)\n                        \n                        \n                            SessionStatus   (src/.../session.entity.ts)\n                        \n                        \n                            Signer   (src/.../crypto-implementation.ts)\n                        \n                        \n                            StoredObject   (src/.../storage.types.ts)\n                        \n                        \n                            Verifier   (src/.../crypto-implementation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/webhook/webhook.dto.ts\n    \n    \n        \n            \n                \n                    \n                    AuthConfig\n                \n            \n            \n                \n                    Enum for the type of authentication used in webhooks.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/issuer/issuance/dto/authentication-config.dto.ts\n    \n    \n        \n            \n                \n                    \n                    AuthenticationConfig\n                \n            \n            \n                \n                    Union type for authentication configurations\nEach method corresponds to a specific OpenID4VC flow\n\n                \n            \n            \n                \n                        literal type | literal type | literal type\n\n                \n            \n        \n    \n    src/crypto/key/entities/cert.entity.ts\n    \n    \n        \n            \n                \n                    \n                    CertificateType\n                \n            \n            \n                \n                        \"access\" | \"signing\"\n\n                \n            \n        \n    \n    src/auth/entitites/client.entity.ts\n    \n    \n        \n            \n                \n                    \n                    ClientStatus\n                \n            \n            \n                \n                        \"init\" | \"set up\" | \"error\"\n\n                \n            \n        \n    \n    src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n    \n    \n        \n            \n                \n                    \n                    CryptoType\n                \n            \n            \n                \n                        \"ES256\" | \"Ed25519\"\n\n                \n            \n        \n    \n    src/issuer/oid4vci/entities/display.entity.ts\n    \n    \n        \n            \n                \n                    \n                    DisplayInfo\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/storage/storage.module.ts\n    \n    \n        \n            \n                \n                    \n                    Driver\n                \n            \n            \n                \n                        \"local\" | \"s3\"\n\n                \n            \n        \n    \n    src/crypto/key/crypto-implementation/crypto-implementation.ts\n    \n    \n        \n            \n                \n                    \n                    KeyPair\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Signer\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Verifier\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/crypto/key/entities/keys.entity.ts\n    \n    \n        \n            \n                \n                    \n                    KeyUsage\n                \n            \n            \n                \n                    Key usage types.\n\n                \n            \n            \n                \n                        \"sign\" | \"encrypt\"\n\n                \n            \n        \n    \n    src/session/entities/session.entity.ts\n    \n    \n        \n            \n                \n                    \n                    Notification\n                \n            \n            \n                \n                    Represents a session entity for managing user sessions in the application.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SessionStatus\n                \n            \n            \n                \n                        \"active\" | \"completed\" | \"expired\" | \"failed\"\n\n                \n            \n        \n    \n    src/storage/storage.types.ts\n    \n    \n        \n            \n                \n                    \n                    PutOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StoredObject\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AUTH_VALIDATION_SCHEMA   (src/.../auth.module.ts)\n                        \n                        \n                            CONFIG_STORAGE_SCHEMA   (src/.../storage.module.ts)\n                        \n                        \n                            ContentType   (src/.../media-type.decorator.ts)\n                        \n                        \n                            CRYPTO_VALIDATION_SCHEMA   (src/.../crypto-implementation.module.ts)\n                        \n                        \n                            DB_VALIDATION_SCHEMA   (src/.../database.module.ts)\n                        \n                        \n                            DEFAULT_AUTH_CLIENT_ID   (src/.../auth.module.ts)\n                        \n                        \n                            DEFAULT_AUTH_CLIENT_SECRET   (src/.../auth.module.ts)\n                        \n                        \n                            DEFAULT_JWT_SECRET   (src/.../auth.module.ts)\n                        \n                        \n                            ECDSA_P256   (src/.../crypto.service.ts)\n                        \n                        \n                            ED25519   (src/.../ed25519.ts)\n                        \n                        \n                            FILE_STORAGE   (src/.../storage.types.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            ISSUER_VALIDATION_SCHEMA   (src/.../issuer.module.ts)\n                        \n                        \n                            KEY_VALIDATION_SCHEMA   (src/.../key.module.ts)\n                        \n                        \n                            OAUTH_VALIDATION_SCHEMA   (src/.../oauth.module.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            REGISTRAR_VALIDATION_SCHEMA   (src/.../registrar.module.ts)\n                        \n                        \n                            SESSION_LOGGER_KEY   (src/.../session-logger.decorator.ts)\n                        \n                        \n                            SESSION_VALIDATION_SCHEMA   (src/.../session.module.ts)\n                        \n                        \n                            SessionEntity   (src/.../session.decorator.ts)\n                        \n                        \n                            SessionLogger   (src/.../session-logger.decorator.ts)\n                        \n                        \n                            Token   (src/.../token.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    OIDC: Joi.string().optional(),\n    KEYCLOAK_INTERNAL_ISSUER_URL: Joi.when(\"OIDC\", {\n        then: Joi.string().required(),\n        otherwise: Joi.string().optional(),\n    }),\n    KEYCLOAK_ALGORITHM: Joi.when(\"OIDC\", {\n        then: Joi.string().default(\"RS256\"),\n        otherwise: Joi.string().optional(),\n    }),\n    JWT_SECRET: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_JWT_SECRET),\n    }),\n    JWT_ISSUER: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().optional().default(\"eudiplo-service\"),\n    }),\n    JWT_EXPIRES_IN: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(\"24h\"),\n    }),\n    AUTH_CLIENT_SECRET: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_AUTH_CLIENT_SECRET),\n    }),\n    AUTH_CLIENT_ID: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_AUTH_CLIENT_ID),\n    }),\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_AUTH_CLIENT_ID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"root\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_AUTH_CLIENT_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"root\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_JWT_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"supersecret\"\n                    \n                \n\n\n        \n    \n\n    src/storage/storage.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CONFIG_STORAGE_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    STORAGE_DRIVER: Joi.string().valid(\"local\", \"s3\").default(\"local\"),\n    LOCAL_STORAGE_DIR: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"local\",\n        then: Joi.string().default(\"uploads\"),\n    }),\n    S3_REGION: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_BUCKET: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_ACCESS_KEY_ID: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_SECRET_ACCESS_KEY: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_ENDPOINT: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.optional(),\n    }),\n    S3_FORCE_PATH_STYLE: Joi.boolean().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.boolean().default(false),\n    }),\n    S3_PUBLIC_BASE_URL: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/mediaType/media-type.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ContentType\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.headers['accept'] as string | undefined;\n    },\n)\n                    \n                \n\n            \n                \n                    Decorator to extract the content type from the request headers.\nThis decorator can be used to determine the media type of the request.\n\n                \n            \n\n        \n    \n\n    src/crypto/key/crypto-implementation/crypto-implementation.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CRYPTO_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    CRYPTO_ALG: Joi.string().valid('ES256').default('ES256'),\n}\n                    \n                \n\n\n        \n    \n\n    src/database/database.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DB_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    DB_TYPE: Joi.string().valid('sqlite', 'postgres').default('sqlite'),\n    DB_HOST: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PORT: Joi.number().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_USERNAME: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PASSWORD: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_DATABASE: Joi.string().when('DB_TYPE', {\n        is: 'sqlite',\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n}\n                    \n                \n\n\n        \n    \n\n    src/crypto/crypto.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ECDSA_P256\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    name: \"ECDSA\",\n    namedCurve: \"P-256\",\n    hash: \"SHA-256\" as const,\n}\n                    \n                \n\n\n        \n    \n\n    src/crypto/key/crypto-implementation/ed25519.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ED25519\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CryptoImplementation\n\n                    \n                \n                \n                    \n                        Default value : {\n    alg: 'EdDSA',\n    async generateKeyPair() {\n        const keyPair = await crypto.webcrypto.subtle.generateKey(\n            {\n                name: 'EdDSA',\n                namedCurve: 'Ed25519',\n            },\n            true,\n            ['sign', 'verify'],\n        );\n\n        const publicKey = await crypto.webcrypto.subtle.exportKey(\n            'jwk',\n            keyPair.publicKey,\n        );\n        const privateKey = await crypto.webcrypto.subtle.exportKey(\n            'jwk',\n            keyPair.privateKey,\n        );\n\n        return { publicKey, privateKey };\n    },\n    async getSigner(privateKeyJWK: object) {\n        const privateKey = await crypto.webcrypto.subtle.importKey(\n            'jwk',\n            privateKeyJWK,\n            {\n                name: 'EdDSA',\n                namedCurve: 'Ed25519',\n            },\n            false,\n            ['sign'],\n        );\n\n        return async (data: string) => {\n            const signature = await crypto.webcrypto.subtle.sign(\n                'EdDSA',\n                privateKey,\n                new TextEncoder().encode(data),\n            );\n\n            return Buffer.from(signature).toString('base64url');\n        };\n    },\n    async getVerifier(publicKeyJWK: object) {\n        const publicKey = await crypto.webcrypto.subtle.importKey(\n            'jwk',\n            publicKeyJWK,\n            {\n                name: 'EdDSA',\n                namedCurve: 'Ed25519',\n            },\n            false,\n            ['verify'],\n        );\n\n        return async (data: string, signatureBase64url: string) => {\n            const signature = Buffer.from(signatureBase64url, 'base64url');\n            const isVerified = await crypto.webcrypto.subtle.verify(\n                'EdDSA',\n                publicKey,\n                signature,\n                new TextEncoder().encode(data),\n            );\n\n            return isVerified;\n        };\n    },\n}\n                    \n                \n\n\n        \n    \n\n    src/storage/storage.types.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FILE_STORAGE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol(\"FILE_STORAGE\")\n                    \n                \n\n\n        \n    \n\n    src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/issuer/issuer.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ISSUER_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    PUBLIC_URL: Joi.string().default(\"http://localhost:3000\"),\n}\n                    \n                \n\n\n        \n    \n\n    src/crypto/key/key.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        KEY_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    KM_TYPE: Joi.string().valid(\"file\", \"vault\").default(\"file\"),\n\n    // Vault-related config\n    VAULT_URL: Joi.string().uri().when(\"KM_TYPE\", {\n        is: \"vault\",\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n    VAULT_TOKEN: Joi.string().when(\"KM_TYPE\", {\n        is: \"vault\",\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n}\n                    \n                \n\n\n        \n    \n\n    src/oauth/oauth.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OAUTH_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    OAUTH_CLIENT_ID: Joi.string().optional(),\n    OAUTH_CLIENT_SECRET: Joi.string().optional(),\n}\n                    \n                \n\n\n        \n    \n\n    src/registrar/registrar.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REGISTRAR_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    REGISTRAR_URL: Joi.string(),\n    REGISTRAR_OIDC_URL: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    REGISTRAR_OIDC_CLIENT_ID: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    REGISTRAR_OIDC_CLIENT_SECRET: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n}\n                    \n                \n\n            \n                \n                    Validation schema for the registrar module.\nDefines the required environment variables and their types.\n\n                \n            \n\n        \n    \n\n    src/utils/logger/session-logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SESSION_LOGGER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'session-logger'\n                    \n                \n\n            \n                \n                    Key for session logger metadata.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SessionLogger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n    sessionIdParam: string,\n    flowType: 'OID4VCI' | 'OID4VP',\n) => SetMetadata(SESSION_LOGGER_KEY, { sessionIdParam, flowType })\n                    \n                \n\n            \n                \n                    Decorator to mark methods that should have session-based logging\n\n                \n            \n\n        \n    \n\n    src/session/session.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SESSION_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    SESSION_TIDY_UP_INTERVAL: Joi.number().default(60 * 60), // default to every hour\n    SESSION_TTL: Joi.number().default(24 * 60 * 60), // default to 24 hours\n}\n                    \n                \n\n            \n                \n                    Module for managing user sessions.\n\n                \n            \n\n        \n    \n\n    src/session/session.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SessionEntity\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.session as Session;\n    },\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/token.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Token\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user as TokenPayload; // Access the token payload on the request object\n    },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
